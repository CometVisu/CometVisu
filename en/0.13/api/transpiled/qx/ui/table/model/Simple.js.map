{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "construct",
    "constructor",
    "call",
    "_rowArr",
    "__sortColumnIndex",
    "__sortMethods",
    "__editableColArr",
    "properties",
    "caseSensitiveSorting",
    "check",
    "init",
    "statics",
    "_defaultSortComparatorAscending",
    "row1",
    "row2",
    "columnIndex",
    "obj1",
    "obj2",
    "lang",
    "Type",
    "isNumber",
    "result",
    "isNaN",
    "_defaultSortComparatorInsensitiveAscending",
    "toLowerCase",
    "_defaultSortComparatorDescending",
    "_defaultSortComparatorInsensitiveDescending",
    "members",
    "__sortableColArr",
    "__sortAscending",
    "getRowData",
    "rowIndex",
    "rowData",
    "originalData",
    "getRowDataAsMap",
    "map",
    "col",
    "getColumnCount",
    "getColumnId",
    "key",
    "undefined",
    "getDataAsMapArray",
    "len",
    "getRowCount",
    "data",
    "i",
    "push",
    "setEditable",
    "editable",
    "fireEvent",
    "setColumnEditable",
    "isColumnEditable",
    "setColumnSortable",
    "sortable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "comparator",
    "sortMethods",
    "descending",
    "getCaseSensitiveSorting",
    "Simple",
    "sort",
    "fireDataEvent",
    "setSortMethods",
    "compare",
    "methods",
    "isFunction",
    "getSortMethods",
    "clearSorting",
    "getSortColumnIndex",
    "_setSortColumnIndex",
    "isSortAscending",
    "_setSortAscending",
    "length",
    "getValue",
    "Error",
    "setValue",
    "value",
    "hasListener",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "setData",
    "rowArr",
    "_checkEditing",
    "getData",
    "setDataAsMapArray",
    "mapArr",
    "rememberMaps",
    "_mapArray2RowArr",
    "addRows",
    "startIndex",
    "splice",
    "Array",
    "prototype",
    "apply",
    "addRowsAsMapArray",
    "setRows",
    "rowArrLength",
    "setRowsAsMapArray",
    "removeRows",
    "howMany",
    "removeStart",
    "removeCount",
    "rowCount",
    "columnCount",
    "dataArr",
    "columnArr",
    "j",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Simple.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A simple table model that provides an API for changing the model data.\r\n */\r\nqx.Class.define(\"qx.ui.table.model.Simple\", {\r\n  extend: qx.ui.table.model.Abstract,\r\n\r\n  construct() {\r\n    super();\r\n\r\n    this._rowArr = [];\r\n    this.__sortColumnIndex = -1;\r\n\r\n    // Array of objects, each with property \"ascending\" and \"descending\"\r\n    this.__sortMethods = [];\r\n\r\n    this.__editableColArr = null;\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * Whether sorting should be case sensitive\r\n     */\r\n    caseSensitiveSorting: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    }\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * Default ascending sort method to use if no custom method has been\r\n     * provided.\r\n     *\r\n     * @param row1 {var} first row\r\n     * @param row2 {var} second row\r\n     * @param columnIndex {Integer} the column to be sorted\r\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\r\n     */\r\n    _defaultSortComparatorAscending(row1, row2, columnIndex) {\r\n      var obj1 = row1[columnIndex];\r\n      var obj2 = row2[columnIndex];\r\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\r\n        var result = isNaN(obj1)\r\n          ? isNaN(obj2)\r\n            ? 0\r\n            : 1\r\n          : isNaN(obj2)\r\n          ? -1\r\n          : null;\r\n        if (result != null) {\r\n          return result;\r\n        }\r\n      }\r\n      if (obj1 == null && obj2 !== null) {\r\n        return -1;\r\n      } else if (obj2 == null && obj1 !== null) {\r\n        return 1;\r\n      }\r\n      return obj1 > obj2 ? 1 : obj1 == obj2 ? 0 : -1;\r\n    },\r\n\r\n    /**\r\n     * Same as the Default ascending sort method but using case insensitivity\r\n     *\r\n     * @param row1 {var} first row\r\n     * @param row2 {var} second row\r\n     * @param columnIndex {Integer} the column to be sorted\r\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\r\n     */\r\n    _defaultSortComparatorInsensitiveAscending(row1, row2, columnIndex) {\r\n      var obj1 = row1[columnIndex].toLowerCase\r\n        ? row1[columnIndex].toLowerCase()\r\n        : row1[columnIndex];\r\n      var obj2 = row2[columnIndex].toLowerCase\r\n        ? row2[columnIndex].toLowerCase()\r\n        : row2[columnIndex];\r\n\r\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\r\n        var result = isNaN(obj1)\r\n          ? isNaN(obj2)\r\n            ? 0\r\n            : 1\r\n          : isNaN(obj2)\r\n          ? -1\r\n          : null;\r\n        if (result != null) {\r\n          return result;\r\n        }\r\n      }\r\n      if (obj1 == null && obj2 !== null) {\r\n        return -1;\r\n      } else if (obj2 == null && obj1 !== null) {\r\n        return 1;\r\n      }\r\n      return obj1 > obj2 ? 1 : obj1 == obj2 ? 0 : -1;\r\n    },\r\n\r\n    /**\r\n     * Default descending sort method to use if no custom method has been\r\n     * provided.\r\n     *\r\n     * @param row1 {var} first row\r\n     * @param row2 {var} second row\r\n     * @param columnIndex {Integer} the column to be sorted\r\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\r\n     */\r\n    _defaultSortComparatorDescending(row1, row2, columnIndex) {\r\n      var obj1 = row1[columnIndex];\r\n      var obj2 = row2[columnIndex];\r\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\r\n        var result = isNaN(obj1)\r\n          ? isNaN(obj2)\r\n            ? 0\r\n            : 1\r\n          : isNaN(obj2)\r\n          ? -1\r\n          : null;\r\n        if (result != null) {\r\n          return result;\r\n        }\r\n      }\r\n      if (obj1 == null && obj2 !== null) {\r\n        return 1;\r\n      } else if (obj2 == null && obj1 !== null) {\r\n        return -1;\r\n      }\r\n      return obj1 < obj2 ? 1 : obj1 == obj2 ? 0 : -1;\r\n    },\r\n\r\n    /**\r\n     * Same as the Default descending sort method but using case insensitivity\r\n     *\r\n     * @param row1 {var} first row\r\n     * @param row2 {var} second row\r\n     * @param columnIndex {Integer} the column to be sorted\r\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\r\n     */\r\n    _defaultSortComparatorInsensitiveDescending(row1, row2, columnIndex) {\r\n      var obj1 = row1[columnIndex].toLowerCase\r\n        ? row1[columnIndex].toLowerCase()\r\n        : row1[columnIndex];\r\n      var obj2 = row2[columnIndex].toLowerCase\r\n        ? row2[columnIndex].toLowerCase()\r\n        : row2[columnIndex];\r\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\r\n        var result = isNaN(obj1)\r\n          ? isNaN(obj2)\r\n            ? 0\r\n            : 1\r\n          : isNaN(obj2)\r\n          ? -1\r\n          : null;\r\n        if (result != null) {\r\n          return result;\r\n        }\r\n      }\r\n      if (obj1 == null && obj2 !== null) {\r\n        return 1;\r\n      } else if (obj2 == null && obj1 !== null) {\r\n        return -1;\r\n      }\r\n      return obj1 < obj2 ? 1 : obj1 == obj2 ? 0 : -1;\r\n    }\r\n  },\r\n\r\n  members: {\r\n    _rowArr: null,\r\n    __editableColArr: null,\r\n    __sortableColArr: null,\r\n    __sortMethods: null,\r\n    __sortColumnIndex: null,\r\n    __sortAscending: null,\r\n\r\n    // overridden\r\n    getRowData(rowIndex) {\r\n      var rowData = this._rowArr[rowIndex];\r\n      if (rowData == null || rowData.originalData == null) {\r\n        return rowData;\r\n      } else {\r\n        return rowData.originalData;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the data of one row as map containing the column IDs as key and\r\n     * the cell values as value. Also the meta data is included.\r\n     *\r\n     * @param rowIndex {Integer} the model index of the row.\r\n     * @return {Map} a Map containing the column values.\r\n     */\r\n    getRowDataAsMap(rowIndex) {\r\n      var rowData = this._rowArr[rowIndex];\r\n\r\n      if (rowData != null) {\r\n        var map = {};\r\n        // get the current set data\r\n        for (var col = 0; col < this.getColumnCount(); col++) {\r\n          map[this.getColumnId(col)] = rowData[col];\r\n        }\r\n\r\n        if (rowData.originalData != null) {\r\n          // merge in the meta data\r\n          for (var key in rowData.originalData) {\r\n            if (map[key] == undefined) {\r\n              map[key] = rowData.originalData[key];\r\n            }\r\n          }\r\n        }\r\n\r\n        return map;\r\n      }\r\n      // may be null, which is ok\r\n      return rowData && rowData.originalData ? rowData.originalData : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the whole data as an array of maps.\r\n     *\r\n     * Note: Individual items are retrieved by {@link #getRowDataAsMap}.\r\n     * @return {Map[]} Array of row data maps\r\n     */\r\n    getDataAsMapArray() {\r\n      var len = this.getRowCount();\r\n      var data = [];\r\n\r\n      for (var i = 0; i < len; i++) {\r\n        data.push(this.getRowDataAsMap(i));\r\n      }\r\n\r\n      return data;\r\n    },\r\n\r\n    /**\r\n     * Sets all columns editable or not editable.\r\n     *\r\n     * @param editable {Boolean} whether all columns are editable.\r\n     */\r\n    setEditable(editable) {\r\n      this.__editableColArr = [];\r\n\r\n      for (var col = 0; col < this.getColumnCount(); col++) {\r\n        this.__editableColArr[col] = editable;\r\n      }\r\n\r\n      this.fireEvent(\"metaDataChanged\");\r\n    },\r\n\r\n    /**\r\n     * Sets whether a column is editable.\r\n     *\r\n     * @param columnIndex {Integer} the column of which to set the editable state.\r\n     * @param editable {Boolean} whether the column should be editable.\r\n     */\r\n    setColumnEditable(columnIndex, editable) {\r\n      if (editable != this.isColumnEditable(columnIndex)) {\r\n        if (this.__editableColArr == null) {\r\n          this.__editableColArr = [];\r\n        }\r\n\r\n        this.__editableColArr[columnIndex] = editable;\r\n\r\n        this.fireEvent(\"metaDataChanged\");\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    isColumnEditable(columnIndex) {\r\n      return this.__editableColArr\r\n        ? this.__editableColArr[columnIndex] == true\r\n        : false;\r\n    },\r\n\r\n    /**\r\n     * Sets whether a column is sortable.\r\n     *\r\n     * @param columnIndex {Integer} the column of which to set the sortable state.\r\n     * @param sortable {Boolean} whether the column should be sortable.\r\n     */\r\n    setColumnSortable(columnIndex, sortable) {\r\n      if (sortable != this.isColumnSortable(columnIndex)) {\r\n        if (this.__sortableColArr == null) {\r\n          this.__sortableColArr = [];\r\n        }\r\n\r\n        this.__sortableColArr[columnIndex] = sortable;\r\n        this.fireEvent(\"metaDataChanged\");\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    isColumnSortable(columnIndex) {\r\n      return this.__sortableColArr\r\n        ? this.__sortableColArr[columnIndex] !== false\r\n        : true;\r\n    },\r\n\r\n    // overridden\r\n    sortByColumn(columnIndex, ascending) {\r\n      // NOTE: We use different comparators for ascending and descending,\r\n      //     because comparators should be really fast.\r\n      var comparator;\r\n\r\n      var sortMethods = this.__sortMethods[columnIndex];\r\n      if (sortMethods) {\r\n        comparator = ascending ? sortMethods.ascending : sortMethods.descending;\r\n      } else {\r\n        if (this.getCaseSensitiveSorting()) {\r\n          comparator = ascending\r\n            ? qx.ui.table.model.Simple._defaultSortComparatorAscending\r\n            : qx.ui.table.model.Simple._defaultSortComparatorDescending;\r\n        } else {\r\n          comparator = ascending\r\n            ? qx.ui.table.model.Simple\r\n                ._defaultSortComparatorInsensitiveAscending\r\n            : qx.ui.table.model.Simple\r\n                ._defaultSortComparatorInsensitiveDescending;\r\n        }\r\n      }\r\n\r\n      comparator.columnIndex = columnIndex;\r\n      this._rowArr.sort(function (row1, row2) {\r\n        return comparator(row1, row2, columnIndex);\r\n      });\r\n\r\n      this.__sortColumnIndex = columnIndex;\r\n      this.__sortAscending = ascending;\r\n\r\n      var data = {\r\n        columnIndex: columnIndex,\r\n        ascending: ascending\r\n      };\r\n\r\n      this.fireDataEvent(\"sorted\", data);\r\n\r\n      this.fireEvent(\"metaDataChanged\");\r\n    },\r\n\r\n    /**\r\n     * Specify the methods to use for ascending and descending sorts of a\r\n     * particular column.\r\n     *\r\n     * @param columnIndex {Integer}\r\n     *   The index of the column for which the sort methods are being\r\n     *   provided.\r\n     *\r\n     * @param compare {Function|Map}\r\n     *   If provided as a Function, this is the comparator function to sort in\r\n     *   ascending order. It takes three parameters: the two arrays of row data,\r\n     *   row1 and row2, being compared and the column index sorting was requested\r\n     *   for.\r\n     *\r\n     *   For backwards compatability, user-supplied compare functions may still\r\n     *   take only two parameters, the two arrays of row data, row1 and row2,\r\n     *   being compared and obtain the column index as arguments.callee.columnIndex.\r\n     *   This is deprecated, however, as arguments.callee is disallowed in ES5 strict\r\n     *   mode and ES6.\r\n     *\r\n     *   The comparator function must return 1, 0 or -1, when the column in row1\r\n     *   is greater than, equal to, or less than, respectively, the column in\r\n     *   row2.\r\n     *\r\n     *   If this parameter is a Map, it shall have two properties: \"ascending\"\r\n     *   and \"descending\". The property value of each is a comparator\r\n     *   function, as described above.\r\n     *\r\n     *   If only the \"ascending\" function is provided (i.e. this parameter is\r\n     *   a Function, not a Map), then the \"descending\" function is built\r\n     *   dynamically by passing the two parameters to the \"ascending\" function\r\n     *   in reversed order. <i>Use of a dynamically-built \"descending\" function\r\n     *   generates at least one extra function call for each row in the table,\r\n     *   and possibly many more. If the table is expected to have more than\r\n     *   about 1000 rows, you will likely want to provide a map with a custom\r\n     *   \"descending\" sort function as well as the \"ascending\" one.</i>\r\n     *\r\n     */\r\n    setSortMethods(columnIndex, compare) {\r\n      var methods;\r\n      if (qx.lang.Type.isFunction(compare)) {\r\n        methods = {\r\n          ascending: compare,\r\n          descending(row1, row2, columnIndex) {\r\n            /* assure backwards compatibility for sort functions using\r\n             * arguments.callee.columnIndex and fix a bug where retreiveing\r\n             * column index via this way did not work for the case where a\r\n             * single comparator function was used.\r\n             * Note that arguments.callee is not available in ES5 strict mode and ES6.\r\n             * See discussion in\r\n             * https://github.com/qooxdoo/qooxdoo/pull/9499#pullrequestreview-99655182\r\n             */\r\n            compare.columnIndex = columnIndex;\r\n\r\n            return compare(row2, row1, columnIndex);\r\n          }\r\n        };\r\n      } else {\r\n        methods = compare;\r\n      }\r\n      this.__sortMethods[columnIndex] = methods;\r\n    },\r\n\r\n    /**\r\n     * Returns the sortMethod(s) for a table column.\r\n     *\r\n     * @param columnIndex {Integer} The index of the column for which the sort\r\n     *   methods are being  provided.\r\n     *\r\n     * @return {Map} a map with the two properties \"ascending\"\r\n     *   and \"descending\" for the specified column.\r\n     *   The property value of each is a comparator function, as described\r\n     *   in {@link #setSortMethods}.\r\n     */\r\n    getSortMethods(columnIndex) {\r\n      return this.__sortMethods[columnIndex];\r\n    },\r\n\r\n    /**\r\n     * Clears the sorting.\r\n     */\r\n    clearSorting() {\r\n      if (this.__sortColumnIndex != -1) {\r\n        this.__sortColumnIndex = -1;\r\n        this.__sortAscending = true;\r\n\r\n        this.fireEvent(\"metaDataChanged\");\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    getSortColumnIndex() {\r\n      return this.__sortColumnIndex;\r\n    },\r\n\r\n    /**\r\n     * Set the sort column index\r\n     *\r\n     * WARNING: This should be called only by subclasses with intimate\r\n     *          knowledge of what they are doing!\r\n     *\r\n     * @param columnIndex {Integer} index of the column\r\n     */\r\n    _setSortColumnIndex(columnIndex) {\r\n      this.__sortColumnIndex = columnIndex;\r\n    },\r\n\r\n    // overridden\r\n    isSortAscending() {\r\n      return this.__sortAscending;\r\n    },\r\n\r\n    /**\r\n     * Set whether to sort in ascending order or not.\r\n     *\r\n     * WARNING: This should be called only by subclasses with intimate\r\n     *          knowledge of what they are doing!\r\n     *\r\n     * @param ascending {Boolean}\r\n     *   <i>true</i> for an ascending sort;\r\n     *   <i> false</i> for a descending sort.\r\n     */\r\n    _setSortAscending(ascending) {\r\n      this.__sortAscending = ascending;\r\n    },\r\n\r\n    // overridden\r\n    getRowCount() {\r\n      return this._rowArr.length;\r\n    },\r\n\r\n    // overridden\r\n    getValue(columnIndex, rowIndex) {\r\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\r\n        throw new Error(\r\n          \"this._rowArr out of bounds: \" +\r\n            rowIndex +\r\n            \" (0..\" +\r\n            this._rowArr.length +\r\n            \")\"\r\n        );\r\n      }\r\n\r\n      return this._rowArr[rowIndex][columnIndex];\r\n    },\r\n\r\n    // overridden\r\n    setValue(columnIndex, rowIndex, value) {\r\n      if (this._rowArr[rowIndex][columnIndex] != value) {\r\n        this._rowArr[rowIndex][columnIndex] = value;\r\n\r\n        // Inform the listeners\r\n        if (this.hasListener(\"dataChanged\")) {\r\n          var data = {\r\n            firstRow: rowIndex,\r\n            lastRow: rowIndex,\r\n            firstColumn: columnIndex,\r\n            lastColumn: columnIndex\r\n          };\r\n\r\n          this.fireDataEvent(\"dataChanged\", data);\r\n        }\r\n\r\n        if (columnIndex == this.__sortColumnIndex) {\r\n          this.clearSorting();\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the whole data in a bulk.\r\n     *\r\n     * @param rowArr {var[][]} An array containing an array for each row. Each\r\n     *          row-array contains the values in that row in the order of the columns\r\n     *          in this model.\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    setData(rowArr, clearSorting) {\r\n      this._checkEditing();\r\n      this._rowArr = rowArr;\r\n\r\n      // Inform the listeners\r\n      if (this.hasListener(\"dataChanged\")) {\r\n        var data = {\r\n          firstRow: 0,\r\n          lastRow: rowArr.length - 1,\r\n          firstColumn: 0,\r\n          lastColumn: this.getColumnCount() - 1\r\n        };\r\n\r\n        this.fireDataEvent(\"dataChanged\", data);\r\n      }\r\n\r\n      if (clearSorting !== false) {\r\n        this.clearSorting();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the data of this model.\r\n     *\r\n     * Warning: Do not alter this array! If you want to change the data use\r\n     * {@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead.\r\n     *\r\n     * @return {var[][]} An array containing an array for each row. Each\r\n     *           row-array contains the values in that row in the order of the columns\r\n     *           in this model.\r\n     */\r\n    getData() {\r\n      return this._rowArr;\r\n    },\r\n\r\n    /**\r\n     * Sets the whole data in a bulk.\r\n     *\r\n     * @param mapArr {Map[]} An array containing a map for each row. Each\r\n     *        row-map contains the column IDs as key and the cell values as value.\r\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\r\n     *        If true {@link #getRowData} will return the original map.\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    setDataAsMapArray(mapArr, rememberMaps, clearSorting) {\r\n      this.setData(this._mapArray2RowArr(mapArr, rememberMaps), clearSorting);\r\n    },\r\n\r\n    /**\r\n     * Adds some rows to the model.\r\n     *\r\n     * Warning: The given array will be altered!\r\n     *\r\n     * @param rowArr {var[][]} An array containing an array for each row. Each\r\n     *          row-array contains the values in that row in the order of the columns\r\n     *          in this model.\r\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\r\n     *          the rows are appended to the end.\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    addRows(rowArr, startIndex, clearSorting) {\r\n      if (startIndex == null) {\r\n        startIndex = this._rowArr.length;\r\n      }\r\n\r\n      // Prepare the rowArr so it can be used for apply\r\n      rowArr.splice(0, 0, startIndex, 0);\r\n\r\n      // Insert the new rows\r\n      Array.prototype.splice.apply(this._rowArr, rowArr);\r\n\r\n      // Inform the listeners\r\n      var data = {\r\n        firstRow: startIndex,\r\n        lastRow: this._rowArr.length - 1,\r\n        firstColumn: 0,\r\n        lastColumn: this.getColumnCount() - 1\r\n      };\r\n\r\n      this.fireDataEvent(\"dataChanged\", data);\r\n\r\n      if (clearSorting !== false) {\r\n        this.clearSorting();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Adds some rows to the model.\r\n     *\r\n     * Warning: The given array (mapArr) will be altered!\r\n     *\r\n     * @param mapArr {Map[]} An array containing a map for each row. Each\r\n     *        row-map contains the column IDs as key and the cell values as value.\r\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\r\n     *        the rows are appended to the end.\r\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\r\n     *        If true {@link #getRowData} will return the original map.\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    addRowsAsMapArray(mapArr, startIndex, rememberMaps, clearSorting) {\r\n      this.addRows(\r\n        this._mapArray2RowArr(mapArr, rememberMaps),\r\n        startIndex,\r\n        clearSorting\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Sets rows in the model. The rows overwrite the old rows starting at\r\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\r\n     *\r\n     * Warning: The given array will be altered!\r\n     *\r\n     * @param rowArr {var[][]} An array containing an array for each row. Each\r\n     *          row-array contains the values in that row in the order of the columns\r\n     *          in this model.\r\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\r\n     *          the rows are set from the beginning (0).\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    setRows(rowArr, startIndex, clearSorting) {\r\n      this._checkEditing();\r\n      if (startIndex == null) {\r\n        startIndex = 0;\r\n      }\r\n\r\n      // store the original length before we alter rowArr for use in splice.apply\r\n      var rowArrLength = rowArr.length;\r\n\r\n      // Prepare the rowArr so it can be used for apply\r\n      rowArr.splice(0, 0, startIndex, rowArr.length);\r\n\r\n      // Replace rows\r\n      Array.prototype.splice.apply(this._rowArr, rowArr);\r\n\r\n      // Inform the listeners\r\n      var data = {\r\n        firstRow: startIndex,\r\n        lastRow: startIndex + rowArrLength - 1,\r\n        firstColumn: 0,\r\n        lastColumn: this.getColumnCount() - 1\r\n      };\r\n\r\n      this.fireDataEvent(\"dataChanged\", data);\r\n\r\n      if (clearSorting !== false) {\r\n        this.clearSorting();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set rows in the model. The rows overwrite the old rows starting at\r\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\r\n     *\r\n     * Warning: The given array (mapArr) will be altered!\r\n     *\r\n     * @param mapArr {Map[]} An array containing a map for each row. Each\r\n     *        row-map contains the column IDs as key and the cell values as value.\r\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\r\n     *        the rows are appended to the end.\r\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\r\n     *        If true {@link #getRowData} will return the original map.\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    setRowsAsMapArray(mapArr, startIndex, rememberMaps, clearSorting) {\r\n      this.setRows(\r\n        this._mapArray2RowArr(mapArr, rememberMaps),\r\n        startIndex,\r\n        clearSorting\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Removes some rows from the model.\r\n     *\r\n     * @param startIndex {Integer} the index of the first row to remove.\r\n     * @param howMany {Integer} the number of rows to remove.\r\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\r\n     */\r\n    removeRows(startIndex, howMany, clearSorting) {\r\n      this._checkEditing();\r\n      // In the case of `removeRows`, specifically, we must create the\r\n      // listeners' event data before actually removing the rows from\r\n      // the row data, so that the `lastRow` calculation is correct.\r\n      // If we do the delete operation first, as is done in other\r\n      // methods, the final rows of the table can escape being\r\n      // updated, thus leaving hanging old data on the rendered table.\r\n      // This reordering (deleting after creating event data) fixes #10365.\r\n      var data = {\r\n        firstRow: startIndex,\r\n        lastRow: this._rowArr.length - 1,\r\n        firstColumn: 0,\r\n        lastColumn: this.getColumnCount() - 1,\r\n        removeStart: startIndex,\r\n        removeCount: howMany\r\n      };\r\n\r\n      this._rowArr.splice(startIndex, howMany);\r\n\r\n      // Inform the listeners\r\n      this.fireDataEvent(\"dataChanged\", data);\r\n\r\n      if (clearSorting !== false) {\r\n        this.clearSorting();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Creates an array of maps to an array of arrays.\r\n     *\r\n     * @param mapArr {Map[]} An array containing a map for each row. Each\r\n     *          row-map contains the column IDs as key and the cell values as value.\r\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\r\n     *        If true {@link #getRowData} will return the original map.\r\n     * @return {var[][]} An array containing an array for each row. Each\r\n     *           row-array contains the values in that row in the order of the columns\r\n     *           in this model.\r\n     */\r\n    _mapArray2RowArr(mapArr, rememberMaps) {\r\n      var rowCount = mapArr.length;\r\n      var columnCount = this.getColumnCount();\r\n      var dataArr = new Array(rowCount);\r\n      var columnArr;\r\n\r\n      for (var i = 0; i < rowCount; ++i) {\r\n        columnArr = [];\r\n        if (rememberMaps) {\r\n          columnArr.originalData = mapArr[i];\r\n        }\r\n\r\n        for (var j = 0; j < columnCount; ++j) {\r\n          columnArr[j] = mapArr[i][this.getColumnId(j)];\r\n        }\r\n\r\n        dataArr[i] = columnArr;\r\n      }\r\n\r\n      return dataArr;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._rowArr =\r\n      this.__editableColArr =\r\n      this.__sortMethods =\r\n      this.__sortableColArr =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}