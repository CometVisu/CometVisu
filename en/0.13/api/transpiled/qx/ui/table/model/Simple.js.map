{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "construct",
    "constructor",
    "call",
    "_rowArr",
    "__sortColumnIndex",
    "__sortMethods",
    "__editableColArr",
    "properties",
    "caseSensitiveSorting",
    "check",
    "init",
    "statics",
    "_defaultSortComparatorAscending",
    "row1",
    "row2",
    "columnIndex",
    "obj1",
    "obj2",
    "lang",
    "Type",
    "isNumber",
    "result",
    "isNaN",
    "_defaultSortComparatorInsensitiveAscending",
    "toLowerCase",
    "_defaultSortComparatorDescending",
    "_defaultSortComparatorInsensitiveDescending",
    "members",
    "__sortableColArr",
    "__sortAscending",
    "getRowData",
    "rowIndex",
    "rowData",
    "originalData",
    "getRowDataAsMap",
    "map",
    "col",
    "getColumnCount",
    "getColumnId",
    "key",
    "undefined",
    "getDataAsMapArray",
    "len",
    "getRowCount",
    "data",
    "i",
    "push",
    "setEditable",
    "editable",
    "fireEvent",
    "setColumnEditable",
    "isColumnEditable",
    "setColumnSortable",
    "sortable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "comparator",
    "sortMethods",
    "descending",
    "getCaseSensitiveSorting",
    "Simple",
    "sort",
    "fireDataEvent",
    "setSortMethods",
    "compare",
    "methods",
    "isFunction",
    "getSortMethods",
    "clearSorting",
    "getSortColumnIndex",
    "_setSortColumnIndex",
    "isSortAscending",
    "_setSortAscending",
    "length",
    "getValue",
    "Error",
    "setValue",
    "value",
    "hasListener",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "setData",
    "rowArr",
    "_checkEditing",
    "getData",
    "setDataAsMapArray",
    "mapArr",
    "rememberMaps",
    "_mapArray2RowArr",
    "addRows",
    "startIndex",
    "splice",
    "Array",
    "prototype",
    "apply",
    "addRowsAsMapArray",
    "setRows",
    "rowArrLength",
    "setRowsAsMapArray",
    "removeRows",
    "howMany",
    "removeStart",
    "removeCount",
    "rowCount",
    "columnCount",
    "dataArr",
    "columnArr",
    "j",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Simple.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A simple table model that provides an API for changing the model data.\n */\nqx.Class.define(\"qx.ui.table.model.Simple\", {\n  extend: qx.ui.table.model.Abstract,\n\n  construct() {\n    super();\n\n    this._rowArr = [];\n    this.__sortColumnIndex = -1;\n\n    // Array of objects, each with property \"ascending\" and \"descending\"\n    this.__sortMethods = [];\n\n    this.__editableColArr = null;\n  },\n\n  properties: {\n    /**\n     * Whether sorting should be case sensitive\n     */\n    caseSensitiveSorting: {\n      check: \"Boolean\",\n      init: true\n    }\n  },\n\n  statics: {\n    /**\n     * Default ascending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorAscending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return -1;\n      } else if (obj2 == null && obj1 !== null) {\n        return 1;\n      }\n      return obj1 > obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    },\n\n    /**\n     * Same as the Default ascending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveAscending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex].toLowerCase\n        ? row1[columnIndex].toLowerCase()\n        : row1[columnIndex];\n      var obj2 = row2[columnIndex].toLowerCase\n        ? row2[columnIndex].toLowerCase()\n        : row2[columnIndex];\n\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return -1;\n      } else if (obj2 == null && obj1 !== null) {\n        return 1;\n      }\n      return obj1 > obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    },\n\n    /**\n     * Default descending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorDescending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return 1;\n      } else if (obj2 == null && obj1 !== null) {\n        return -1;\n      }\n      return obj1 < obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    },\n\n    /**\n     * Same as the Default descending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveDescending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex].toLowerCase\n        ? row1[columnIndex].toLowerCase()\n        : row1[columnIndex];\n      var obj2 = row2[columnIndex].toLowerCase\n        ? row2[columnIndex].toLowerCase()\n        : row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return 1;\n      } else if (obj2 == null && obj1 !== null) {\n        return -1;\n      }\n      return obj1 < obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    }\n  },\n\n  members: {\n    _rowArr: null,\n    __editableColArr: null,\n    __sortableColArr: null,\n    __sortMethods: null,\n    __sortColumnIndex: null,\n    __sortAscending: null,\n\n    // overridden\n    getRowData(rowIndex) {\n      var rowData = this._rowArr[rowIndex];\n      if (rowData == null || rowData.originalData == null) {\n        return rowData;\n      } else {\n        return rowData.originalData;\n      }\n    },\n\n    /**\n     * Returns the data of one row as map containing the column IDs as key and\n     * the cell values as value. Also the meta data is included.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Map} a Map containing the column values.\n     */\n    getRowDataAsMap(rowIndex) {\n      var rowData = this._rowArr[rowIndex];\n\n      if (rowData != null) {\n        var map = {};\n        // get the current set data\n        for (var col = 0; col < this.getColumnCount(); col++) {\n          map[this.getColumnId(col)] = rowData[col];\n        }\n\n        if (rowData.originalData != null) {\n          // merge in the meta data\n          for (var key in rowData.originalData) {\n            if (map[key] == undefined) {\n              map[key] = rowData.originalData[key];\n            }\n          }\n        }\n\n        return map;\n      }\n      // may be null, which is ok\n      return rowData && rowData.originalData ? rowData.originalData : null;\n    },\n\n    /**\n     * Gets the whole data as an array of maps.\n     *\n     * Note: Individual items are retrieved by {@link #getRowDataAsMap}.\n     * @return {Map[]} Array of row data maps\n     */\n    getDataAsMapArray() {\n      var len = this.getRowCount();\n      var data = [];\n\n      for (var i = 0; i < len; i++) {\n        data.push(this.getRowDataAsMap(i));\n      }\n\n      return data;\n    },\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean} whether all columns are editable.\n     */\n    setEditable(editable) {\n      this.__editableColArr = [];\n\n      for (var col = 0; col < this.getColumnCount(); col++) {\n        this.__editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column of which to set the editable state.\n     * @param editable {Boolean} whether the column should be editable.\n     */\n    setColumnEditable(columnIndex, editable) {\n      if (editable != this.isColumnEditable(columnIndex)) {\n        if (this.__editableColArr == null) {\n          this.__editableColArr = [];\n        }\n\n        this.__editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable(columnIndex) {\n      return this.__editableColArr\n        ? this.__editableColArr[columnIndex] == true\n        : false;\n    },\n\n    /**\n     * Sets whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column of which to set the sortable state.\n     * @param sortable {Boolean} whether the column should be sortable.\n     */\n    setColumnSortable(columnIndex, sortable) {\n      if (sortable != this.isColumnSortable(columnIndex)) {\n        if (this.__sortableColArr == null) {\n          this.__sortableColArr = [];\n        }\n\n        this.__sortableColArr[columnIndex] = sortable;\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnSortable(columnIndex) {\n      return this.__sortableColArr\n        ? this.__sortableColArr[columnIndex] !== false\n        : true;\n    },\n\n    // overridden\n    sortByColumn(columnIndex, ascending) {\n      // NOTE: We use different comparators for ascending and descending,\n      //     because comparators should be really fast.\n      var comparator;\n\n      var sortMethods = this.__sortMethods[columnIndex];\n      if (sortMethods) {\n        comparator = ascending ? sortMethods.ascending : sortMethods.descending;\n      } else {\n        if (this.getCaseSensitiveSorting()) {\n          comparator = ascending\n            ? qx.ui.table.model.Simple._defaultSortComparatorAscending\n            : qx.ui.table.model.Simple._defaultSortComparatorDescending;\n        } else {\n          comparator = ascending\n            ? qx.ui.table.model.Simple\n                ._defaultSortComparatorInsensitiveAscending\n            : qx.ui.table.model.Simple\n                ._defaultSortComparatorInsensitiveDescending;\n        }\n      }\n\n      comparator.columnIndex = columnIndex;\n      this._rowArr.sort(function (row1, row2) {\n        return comparator(row1, row2, columnIndex);\n      });\n\n      this.__sortColumnIndex = columnIndex;\n      this.__sortAscending = ascending;\n\n      var data = {\n        columnIndex: columnIndex,\n        ascending: ascending\n      };\n\n      this.fireDataEvent(\"sorted\", data);\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Specify the methods to use for ascending and descending sorts of a\n     * particular column.\n     *\n     * @param columnIndex {Integer}\n     *   The index of the column for which the sort methods are being\n     *   provided.\n     *\n     * @param compare {Function|Map}\n     *   If provided as a Function, this is the comparator function to sort in\n     *   ascending order. It takes three parameters: the two arrays of row data,\n     *   row1 and row2, being compared and the column index sorting was requested\n     *   for.\n     *\n     *   For backwards compatability, user-supplied compare functions may still\n     *   take only two parameters, the two arrays of row data, row1 and row2,\n     *   being compared and obtain the column index as arguments.callee.columnIndex.\n     *   This is deprecated, however, as arguments.callee is disallowed in ES5 strict\n     *   mode and ES6.\n     *\n     *   The comparator function must return 1, 0 or -1, when the column in row1\n     *   is greater than, equal to, or less than, respectively, the column in\n     *   row2.\n     *\n     *   If this parameter is a Map, it shall have two properties: \"ascending\"\n     *   and \"descending\". The property value of each is a comparator\n     *   function, as described above.\n     *\n     *   If only the \"ascending\" function is provided (i.e. this parameter is\n     *   a Function, not a Map), then the \"descending\" function is built\n     *   dynamically by passing the two parameters to the \"ascending\" function\n     *   in reversed order. <i>Use of a dynamically-built \"descending\" function\n     *   generates at least one extra function call for each row in the table,\n     *   and possibly many more. If the table is expected to have more than\n     *   about 1000 rows, you will likely want to provide a map with a custom\n     *   \"descending\" sort function as well as the \"ascending\" one.</i>\n     *\n     */\n    setSortMethods(columnIndex, compare) {\n      var methods;\n      if (qx.lang.Type.isFunction(compare)) {\n        methods = {\n          ascending: compare,\n          descending(row1, row2, columnIndex) {\n            /* assure backwards compatibility for sort functions using\n             * arguments.callee.columnIndex and fix a bug where retreiveing\n             * column index via this way did not work for the case where a\n             * single comparator function was used.\n             * Note that arguments.callee is not available in ES5 strict mode and ES6.\n             * See discussion in\n             * https://github.com/qooxdoo/qooxdoo/pull/9499#pullrequestreview-99655182\n             */\n            compare.columnIndex = columnIndex;\n\n            return compare(row2, row1, columnIndex);\n          }\n        };\n      } else {\n        methods = compare;\n      }\n      this.__sortMethods[columnIndex] = methods;\n    },\n\n    /**\n     * Returns the sortMethod(s) for a table column.\n     *\n     * @param columnIndex {Integer} The index of the column for which the sort\n     *   methods are being  provided.\n     *\n     * @return {Map} a map with the two properties \"ascending\"\n     *   and \"descending\" for the specified column.\n     *   The property value of each is a comparator function, as described\n     *   in {@link #setSortMethods}.\n     */\n    getSortMethods(columnIndex) {\n      return this.__sortMethods[columnIndex];\n    },\n\n    /**\n     * Clears the sorting.\n     */\n    clearSorting() {\n      if (this.__sortColumnIndex != -1) {\n        this.__sortColumnIndex = -1;\n        this.__sortAscending = true;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    getSortColumnIndex() {\n      return this.__sortColumnIndex;\n    },\n\n    /**\n     * Set the sort column index\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param columnIndex {Integer} index of the column\n     */\n    _setSortColumnIndex(columnIndex) {\n      this.__sortColumnIndex = columnIndex;\n    },\n\n    // overridden\n    isSortAscending() {\n      return this.__sortAscending;\n    },\n\n    /**\n     * Set whether to sort in ascending order or not.\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param ascending {Boolean}\n     *   <i>true</i> for an ascending sort;\n     *   <i> false</i> for a descending sort.\n     */\n    _setSortAscending(ascending) {\n      this.__sortAscending = ascending;\n    },\n\n    // overridden\n    getRowCount() {\n      return this._rowArr.length;\n    },\n\n    // overridden\n    getValue(columnIndex, rowIndex) {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\n          \"this._rowArr out of bounds: \" +\n            rowIndex +\n            \" (0..\" +\n            this._rowArr.length +\n            \")\"\n        );\n      }\n\n      return this._rowArr[rowIndex][columnIndex];\n    },\n\n    // overridden\n    setValue(columnIndex, rowIndex, value) {\n      if (this._rowArr[rowIndex][columnIndex] != value) {\n        this._rowArr[rowIndex][columnIndex] = value;\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\")) {\n          var data = {\n            firstRow: rowIndex,\n            lastRow: rowIndex,\n            firstColumn: columnIndex,\n            lastColumn: columnIndex\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n\n        if (columnIndex == this.__sortColumnIndex) {\n          this.clearSorting();\n        }\n      }\n    },\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setData(rowArr, clearSorting) {\n      this._checkEditing();\n      this._rowArr = rowArr;\n\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: rowArr.length - 1,\n          firstColumn: 0,\n          lastColumn: this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Returns the data of this model.\n     *\n     * Warning: Do not alter this array! If you want to change the data use\n     * {@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead.\n     *\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    getData() {\n      return this._rowArr;\n    },\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setDataAsMapArray(mapArr, rememberMaps, clearSorting) {\n      this.setData(this._mapArray2RowArr(mapArr, rememberMaps), clearSorting);\n    },\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are appended to the end.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRows(rowArr, startIndex, clearSorting) {\n      if (startIndex == null) {\n        startIndex = this._rowArr.length;\n      }\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, 0);\n\n      // Insert the new rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data = {\n        firstRow: startIndex,\n        lastRow: this._rowArr.length - 1,\n        firstColumn: 0,\n        lastColumn: this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRowsAsMapArray(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.addRows(\n        this._mapArray2RowArr(mapArr, rememberMaps),\n        startIndex,\n        clearSorting\n      );\n    },\n\n    /**\n     * Sets rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are set from the beginning (0).\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRows(rowArr, startIndex, clearSorting) {\n      this._checkEditing();\n      if (startIndex == null) {\n        startIndex = 0;\n      }\n\n      // store the original length before we alter rowArr for use in splice.apply\n      var rowArrLength = rowArr.length;\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, rowArr.length);\n\n      // Replace rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data = {\n        firstRow: startIndex,\n        lastRow: startIndex + rowArrLength - 1,\n        firstColumn: 0,\n        lastColumn: this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Set rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRowsAsMapArray(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.setRows(\n        this._mapArray2RowArr(mapArr, rememberMaps),\n        startIndex,\n        clearSorting\n      );\n    },\n\n    /**\n     * Removes some rows from the model.\n     *\n     * @param startIndex {Integer} the index of the first row to remove.\n     * @param howMany {Integer} the number of rows to remove.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    removeRows(startIndex, howMany, clearSorting) {\n      this._checkEditing();\n      // In the case of `removeRows`, specifically, we must create the\n      // listeners' event data before actually removing the rows from\n      // the row data, so that the `lastRow` calculation is correct.\n      // If we do the delete operation first, as is done in other\n      // methods, the final rows of the table can escape being\n      // updated, thus leaving hanging old data on the rendered table.\n      // This reordering (deleting after creating event data) fixes #10365.\n      var data = {\n        firstRow: startIndex,\n        lastRow: this._rowArr.length - 1,\n        firstColumn: 0,\n        lastColumn: this.getColumnCount() - 1,\n        removeStart: startIndex,\n        removeCount: howMany\n      };\n\n      this._rowArr.splice(startIndex, howMany);\n\n      // Inform the listeners\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Creates an array of maps to an array of arrays.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *          row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    _mapArray2RowArr(mapArr, rememberMaps) {\n      var rowCount = mapArr.length;\n      var columnCount = this.getColumnCount();\n      var dataArr = new Array(rowCount);\n      var columnArr;\n\n      for (var i = 0; i < rowCount; ++i) {\n        columnArr = [];\n        if (rememberMaps) {\n          columnArr.originalData = mapArr[i];\n        }\n\n        for (var j = 0; j < columnCount; ++j) {\n          columnArr[j] = mapArr[i][this.getColumnId(j)];\n        }\n\n        dataArr[i] = columnArr;\n      }\n\n      return dataArr;\n    }\n  },\n\n  destruct() {\n    this._rowArr =\n      this.__editableColArr =\n      this.__sortMethods =\n      this.__sortableColArr =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}