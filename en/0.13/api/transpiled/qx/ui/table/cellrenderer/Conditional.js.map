{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Conditional.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Default",
    "construct",
    "align",
    "color",
    "style",
    "weight",
    "numericAllowed",
    "betweenAllowed",
    "conditions",
    "__defaultTextAlign",
    "__defaultColor",
    "__defaultFontStyle",
    "__defaultFontWeight",
    "members",
    "__applyFormatting",
    "condition",
    "addNumericCondition",
    "value1",
    "target",
    "temp",
    "includes",
    "push",
    "Error",
    "addBetweenCondition",
    "value2",
    "addRegex",
    "regex",
    "_getCellStyle",
    "cellInfo",
    "tableModel",
    "getTableModel",
    "i",
    "cond_test",
    "compareValue",
    "value",
    "getValueById",
    "row",
    "the_pattern",
    "RegExp",
    "test",
    "styleString",
    "key",
    "join",
    "destruct",
    "Conditional"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 by Tartan Solutions, Inc, http://www.tartansolutions.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Dan Hummon\n\n************************************************************************ */\n\n/**\n * The conditional cell renderer allows special per cell formatting based on\n * conditions on the cell's value.\n *\n * @require(qx.util.format.NumberFormat)\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Conditional\",\n{\n  extend : qx.ui.table.cellrenderer.Default,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param align {String|null}\n   *   The default text alignment to format the cell with by default.\n   *\n   * @param color {String|null}\n   *   The default font color to format the cell with by default.\n   *\n   * @param style {String|null}\n   *   The default font style to format the cell with by default.\n   *\n   * @param weight {String|null}\n   *   The default font weight to format the cell with by default.\n   */\n  construct : function(align, color, style, weight)\n  {\n    this.base(arguments);\n\n    this.numericAllowed = [\"==\", \"!=\", \">\", \"<\", \">=\", \"<=\"];\n    this.betweenAllowed = [\"between\", \"!between\"];\n    this.conditions = [];\n\n    this.__defaultTextAlign = align || \"\";\n    this.__defaultColor = color || \"\";\n    this.__defaultFontStyle = style || \"\";\n    this.__defaultFontWeight = weight || \"\";\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __defaultTextAlign : null,\n    __defaultColor : null,\n    __defaultFontStyle : null,\n    __defaultFontWeight : null,\n\n\n    /**\n     * Applies the cell styles to the style map.\n     * @param condition {Array} The matched condition\n     * @param style {Map} map of already applied styles.\n     */\n    __applyFormatting : function(condition, style)\n    {\n      if (condition[1] != null) {\n        style[\"text-align\"] = condition[1];\n      }\n\n      if (condition[2] != null) {\n        style[\"color\"] = condition[2];\n      }\n\n      if (condition[3] != null) {\n        style[\"font-style\"] = condition[3];\n      }\n\n      if (condition[4] != null) {\n        style[\"font-weight\"] = condition[4];\n      }\n    },\n\n\n    /**\n     * The addNumericCondition method is used to add a basic numeric condition to\n     * the cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the align,\n     * color, style and weight arguments. Null will allow pre-existing formatting\n     * to pass through, where an empty string will clear it back to the default\n     * formatting set in the constructor.\n     *\n     *\n     * @param condition {String} The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\", \">=\",\n     *     and \"<=\".\n     * @param value1 {Integer} The value to compare against.\n     * @param align {String|null} The text alignment to format the cell with if the condition matches.\n     * @param color {String|null} The font color to format the cell with if the condition matches.\n     * @param style {String|null} The font style to format the cell with if the condition matches.\n     * @param weight {String|null} The font weight to format the cell with if the condition matches.\n     * @param target {String|null} The text value of the column to compare against. If this is null,\n     *     comparisons will be against the contents of this cell.\n     * @throws {Error} If the condition can not be recognized or value is null.\n     */\n    addNumericCondition : function(condition, value1, align, color, style, weight, target)\n    {\n      var temp = null;\n\n      if (this.numericAllowed.includes(condition))\n      {\n        if (value1 != null) {\n          temp = [condition, align, color, style, weight, value1, target];\n        }\n      }\n\n      if (temp != null) {\n        this.conditions.push(temp);\n      } else {\n        throw new Error(\"Condition not recognized or value is null!\");\n      }\n    },\n\n\n    /**\n     * The addBetweenCondition method is used to add a between condition to the\n     * cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the align,\n     * color, style and weight arguments. Null will allow pre-existing formatting\n     * to pass through, where an empty string will clear it back to the default\n     * formatting set in the constructor.\n     *\n     *\n     * @param condition {String} The type of condition. Accepted strings are \"between\" and \"!between\".\n     * @param value1 {Integer} The first value to compare against.\n     * @param value2 {Integer} The second value to compare against.\n     * @param align {String|null} The text alignment to format the cell with if the condition matches.\n     * @param color {String|null} The font color to format the cell with if the condition matches.\n     * @param style {String|null} The font style to format the cell with if the condition matches.\n     * @param weight {String|null} The font weight to format the cell with if the condition matches.\n     * @param target {String|null} The text value of the column to compare against. If this is null,\n     *     comparisons will be against the contents of this cell.\n     * @throws {Error} If the condition can not be recognized or value is null.\n     */\n    addBetweenCondition : function(condition, value1, value2, align, color, style, weight, target)\n    {\n      if (this.betweenAllowed.includes(condition))\n      {\n        if (value1 != null && value2 != null) {\n          var temp = [condition, align, color, style, weight, value1, value2, target];\n        }\n      }\n\n      if (temp != null) {\n        this.conditions.push(temp);\n      } else {\n        throw new Error(\"Condition not recognized or value1/value2 is null!\");\n      }\n    },\n\n\n    /**\n     * The addRegex method is used to add a regular expression condition to the\n     * cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the align,\n     * color, style and weight arguments. Null will allow pre-existing formatting\n     * to pass through, where an empty string will clear it back to the default\n     * formatting set in the constructor.\n     *\n     *\n     * @param regex {String} The regular expression to match against.\n     * @param align {String|null} The text alignment to format the cell with if the condition matches.\n     * @param color {String|null} The font color to format the cell with if the condition matches.\n     * @param style {String|null} The font style to format the cell with if the condition matches.\n     * @param weight {String|null} The font weight to format the cell with if the condition matches.\n     * @param target {String|null} The text value of the column to compare against. If this is null,\n     *     comparisons will be against the contents of this cell.\n     * @throws {Error} If the regex is null.\n     */\n    addRegex : function(regex, align, color, style, weight, target)\n    {\n      if (regex != null) {\n        var temp = [\"regex\", align, color, style, weight, regex, target];\n      }\n\n      if (temp != null) {\n        this.conditions.push(temp);\n      } else {\n        throw new Error(\"regex cannot be null!\");\n      }\n    },\n\n\n    /**\n     * Overridden; called whenever the cell updates. The cell will iterate through\n     * each available condition and apply formatting for those that\n     * match. Multiple conditions can match, but later conditions will override\n     * earlier ones. Conditions with null values will stack with other conditions\n     * that apply to that value.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Map}\n     */\n    _getCellStyle : function(cellInfo)\n    {\n      var tableModel = cellInfo.table.getTableModel();\n      var i;\n      var cond_test;\n      var compareValue;\n\n      var style =\n      {\n        \"text-align\": this.__defaultTextAlign,\n        \"color\": this.__defaultColor,\n        \"font-style\": this.__defaultFontStyle,\n        \"font-weight\": this.__defaultFontWeight\n      };\n\n      for (i in this.conditions)\n      {\n        cond_test = false;\n\n        if (this.numericAllowed.includes(this.conditions[i][0]))\n        {\n          if (this.conditions[i][6] == null) {\n            compareValue = cellInfo.value;\n          } else {\n            compareValue = tableModel.getValueById(this.conditions[i][6], cellInfo.row);\n          }\n\n          switch(this.conditions[i][0])\n          {\n            case \"==\":\n              if (compareValue == this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"!=\":\n              if (compareValue != this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \">\":\n              if (compareValue > this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"<\":\n              if (compareValue < this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \">=\":\n              if (compareValue >= this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"<=\":\n              if (compareValue <= this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n          }\n        }\n        else if (this.betweenAllowed.includes(this.conditions[i][0]))\n        {\n          if (this.conditions[i][7] == null) {\n            compareValue = cellInfo.value;\n          } else {\n            compareValue = tableModel.getValueById(this.conditions[i][7], cellInfo.row);\n          }\n\n          switch(this.conditions[i][0])\n          {\n            case \"between\":\n              if (compareValue >= this.conditions[i][5] && compareValue <= this.conditions[i][6]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"!between\":\n              if (compareValue < this.conditions[i][5] || compareValue > this.conditions[i][6]) {\n                cond_test = true;\n              }\n\n              break;\n          }\n        }\n        else if (this.conditions[i][0] == \"regex\")\n        {\n          if (this.conditions[i][6] == null) {\n            compareValue = cellInfo.value;\n          } else {\n            compareValue = tableModel.getValueById(this.conditions[i][6], cellInfo.row);\n          }\n\n          var the_pattern = new RegExp(this.conditions[i][5], 'g');\n          cond_test = the_pattern.test(compareValue);\n        }\n\n        // Apply formatting, if any.\n        if (cond_test == true) {\n          this.__applyFormatting(this.conditions[i], style);\n        }\n      }\n\n      var styleString = [];\n      for(var key in style) {\n        if (style[key]) {\n          styleString.push(key, \":\", style[key], \";\");\n        }\n      }\n      return styleString.join(\"\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.numericAllowed = this.betweenAllowed = this.conditions = null;\n  }\n});\n"
  ]
}