{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Default",
    "construct",
    "align",
    "color",
    "style",
    "weight",
    "numericAllowed",
    "betweenAllowed",
    "conditions",
    "__defaultTextAlign",
    "__defaultColor",
    "__defaultFontStyle",
    "__defaultFontWeight",
    "members",
    "__applyFormatting",
    "condition",
    "addNumericCondition",
    "value1",
    "target",
    "temp",
    "includes",
    "push",
    "Error",
    "addBetweenCondition",
    "value2",
    "addRegex",
    "regex",
    "_getCellStyle",
    "cellInfo",
    "tableModel",
    "getTableModel",
    "i",
    "cond_test",
    "compareValue",
    "value",
    "getValueById",
    "row",
    "the_pattern",
    "RegExp",
    "test",
    "styleString",
    "key",
    "join",
    "destruct",
    "Conditional"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Conditional.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 by Tartan Solutions, Inc, http://www.tartansolutions.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Dan Hummon\n\n************************************************************************ */\n\n/**\n * The conditional cell renderer allows special per cell formatting based on\n * conditions on the cell's value.\n *\n * @require(qx.util.format.NumberFormat)\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Conditional\", {\n  extend: qx.ui.table.cellrenderer.Default,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param align {String|null}\n   *   The default text alignment to format the cell with by default.\n   *\n   * @param color {String|null}\n   *   The default font color to format the cell with by default.\n   *\n   * @param style {String|null}\n   *   The default font style to format the cell with by default.\n   *\n   * @param weight {String|null}\n   *   The default font weight to format the cell with by default.\n   */\n  construct(align, color, style, weight) {\n    super();\n\n    this.numericAllowed = [\"==\", \"!=\", \">\", \"<\", \">=\", \"<=\"];\n    this.betweenAllowed = [\"between\", \"!between\"];\n    this.conditions = [];\n\n    this.__defaultTextAlign = align || \"\";\n    this.__defaultColor = color || \"\";\n    this.__defaultFontStyle = style || \"\";\n    this.__defaultFontWeight = weight || \"\";\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __defaultTextAlign: null,\n    __defaultColor: null,\n    __defaultFontStyle: null,\n    __defaultFontWeight: null,\n\n    /**\n     * Applies the cell styles to the style map.\n     * @param condition {Array} The matched condition\n     * @param style {Map} map of already applied styles.\n     */\n    __applyFormatting(condition, style) {\n      if (condition[1] != null) {\n        style[\"text-align\"] = condition[1];\n      }\n\n      if (condition[2] != null) {\n        style[\"color\"] = condition[2];\n      }\n\n      if (condition[3] != null) {\n        style[\"font-style\"] = condition[3];\n      }\n\n      if (condition[4] != null) {\n        style[\"font-weight\"] = condition[4];\n      }\n    },\n\n    /**\n     * The addNumericCondition method is used to add a basic numeric condition to\n     * the cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the align,\n     * color, style and weight arguments. Null will allow pre-existing formatting\n     * to pass through, where an empty string will clear it back to the default\n     * formatting set in the constructor.\n     *\n     *\n     * @param condition {String} The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\", \">=\",\n     *     and \"<=\".\n     * @param value1 {Integer} The value to compare against.\n     * @param align {String|null} The text alignment to format the cell with if the condition matches.\n     * @param color {String|null} The font color to format the cell with if the condition matches.\n     * @param style {String|null} The font style to format the cell with if the condition matches.\n     * @param weight {String|null} The font weight to format the cell with if the condition matches.\n     * @param target {String|null} The text value of the column to compare against. If this is null,\n     *     comparisons will be against the contents of this cell.\n     * @throws {Error} If the condition can not be recognized or value is null.\n     */\n    addNumericCondition(\n      condition,\n      value1,\n      align,\n      color,\n      style,\n      weight,\n      target\n    ) {\n      var temp = null;\n\n      if (this.numericAllowed.includes(condition)) {\n        if (value1 != null) {\n          temp = [condition, align, color, style, weight, value1, target];\n        }\n      }\n\n      if (temp != null) {\n        this.conditions.push(temp);\n      } else {\n        throw new Error(\"Condition not recognized or value is null!\");\n      }\n    },\n\n    /**\n     * The addBetweenCondition method is used to add a between condition to the\n     * cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the align,\n     * color, style and weight arguments. Null will allow pre-existing formatting\n     * to pass through, where an empty string will clear it back to the default\n     * formatting set in the constructor.\n     *\n     *\n     * @param condition {String} The type of condition. Accepted strings are \"between\" and \"!between\".\n     * @param value1 {Integer} The first value to compare against.\n     * @param value2 {Integer} The second value to compare against.\n     * @param align {String|null} The text alignment to format the cell with if the condition matches.\n     * @param color {String|null} The font color to format the cell with if the condition matches.\n     * @param style {String|null} The font style to format the cell with if the condition matches.\n     * @param weight {String|null} The font weight to format the cell with if the condition matches.\n     * @param target {String|null} The text value of the column to compare against. If this is null,\n     *     comparisons will be against the contents of this cell.\n     * @throws {Error} If the condition can not be recognized or value is null.\n     */\n    addBetweenCondition(\n      condition,\n      value1,\n      value2,\n      align,\n      color,\n      style,\n      weight,\n      target\n    ) {\n      if (this.betweenAllowed.includes(condition)) {\n        if (value1 != null && value2 != null) {\n          var temp = [\n            condition,\n            align,\n            color,\n            style,\n            weight,\n            value1,\n            value2,\n            target\n          ];\n        }\n      }\n\n      if (temp != null) {\n        this.conditions.push(temp);\n      } else {\n        throw new Error(\"Condition not recognized or value1/value2 is null!\");\n      }\n    },\n\n    /**\n     * The addRegex method is used to add a regular expression condition to the\n     * cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the align,\n     * color, style and weight arguments. Null will allow pre-existing formatting\n     * to pass through, where an empty string will clear it back to the default\n     * formatting set in the constructor.\n     *\n     *\n     * @param regex {String} The regular expression to match against.\n     * @param align {String|null} The text alignment to format the cell with if the condition matches.\n     * @param color {String|null} The font color to format the cell with if the condition matches.\n     * @param style {String|null} The font style to format the cell with if the condition matches.\n     * @param weight {String|null} The font weight to format the cell with if the condition matches.\n     * @param target {String|null} The text value of the column to compare against. If this is null,\n     *     comparisons will be against the contents of this cell.\n     * @throws {Error} If the regex is null.\n     */\n    addRegex(regex, align, color, style, weight, target) {\n      if (regex != null) {\n        var temp = [\"regex\", align, color, style, weight, regex, target];\n      }\n\n      if (temp != null) {\n        this.conditions.push(temp);\n      } else {\n        throw new Error(\"regex cannot be null!\");\n      }\n    },\n\n    /**\n     * Overridden; called whenever the cell updates. The cell will iterate through\n     * each available condition and apply formatting for those that\n     * match. Multiple conditions can match, but later conditions will override\n     * earlier ones. Conditions with null values will stack with other conditions\n     * that apply to that value.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Map}\n     */\n    _getCellStyle(cellInfo) {\n      var tableModel = cellInfo.table.getTableModel();\n      var i;\n      var cond_test;\n      var compareValue;\n\n      var style = {\n        \"text-align\": this.__defaultTextAlign,\n        color: this.__defaultColor,\n        \"font-style\": this.__defaultFontStyle,\n        \"font-weight\": this.__defaultFontWeight\n      };\n\n      for (i in this.conditions) {\n        cond_test = false;\n\n        if (this.numericAllowed.includes(this.conditions[i][0])) {\n          if (this.conditions[i][6] == null) {\n            compareValue = cellInfo.value;\n          } else {\n            compareValue = tableModel.getValueById(\n              this.conditions[i][6],\n              cellInfo.row\n            );\n          }\n\n          switch (this.conditions[i][0]) {\n            case \"==\":\n              if (compareValue == this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"!=\":\n              if (compareValue != this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \">\":\n              if (compareValue > this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"<\":\n              if (compareValue < this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \">=\":\n              if (compareValue >= this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"<=\":\n              if (compareValue <= this.conditions[i][5]) {\n                cond_test = true;\n              }\n\n              break;\n          }\n        } else if (this.betweenAllowed.includes(this.conditions[i][0])) {\n          if (this.conditions[i][7] == null) {\n            compareValue = cellInfo.value;\n          } else {\n            compareValue = tableModel.getValueById(\n              this.conditions[i][7],\n              cellInfo.row\n            );\n          }\n\n          switch (this.conditions[i][0]) {\n            case \"between\":\n              if (\n                compareValue >= this.conditions[i][5] &&\n                compareValue <= this.conditions[i][6]\n              ) {\n                cond_test = true;\n              }\n\n              break;\n\n            case \"!between\":\n              if (\n                compareValue < this.conditions[i][5] ||\n                compareValue > this.conditions[i][6]\n              ) {\n                cond_test = true;\n              }\n\n              break;\n          }\n        } else if (this.conditions[i][0] == \"regex\") {\n          if (this.conditions[i][6] == null) {\n            compareValue = cellInfo.value;\n          } else {\n            compareValue = tableModel.getValueById(\n              this.conditions[i][6],\n              cellInfo.row\n            );\n          }\n\n          var the_pattern = new RegExp(this.conditions[i][5], \"g\");\n          cond_test = the_pattern.test(compareValue);\n        }\n\n        // Apply formatting, if any.\n        if (cond_test == true) {\n          this.__applyFormatting(this.conditions[i], style);\n        }\n      }\n\n      var styleString = [];\n      for (var key in style) {\n        if (style[key]) {\n          styleString.push(key, \":\", style[key], \";\");\n        }\n      }\n      return styleString.join(\"\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.numericAllowed = this.betweenAllowed = this.conditions = null;\n  }\n});\n"
  ],
  "mappings": "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"
}