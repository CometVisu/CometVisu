{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Conditional",
    "properties",
    "dateFormat",
    "check",
    "init",
    "nullable",
    "members",
    "_getContentHtml",
    "cellInfo",
    "df",
    "getDateFormat",
    "value",
    "bom",
    "String",
    "escape",
    "format",
    "_getCellClass",
    "Date"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Date.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 OpenHex SPRL, http://www.openhex.org\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Gaetan de Menten (ged)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Specific data cell renderer for dates.\r\n */\r\nqx.Class.define(\"qx.ui.table.cellrenderer.Date\", {\r\n  extend: qx.ui.table.cellrenderer.Conditional,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * DateFormat used to format the data.\r\n     */\r\n    dateFormat: {\r\n      check: \"qx.util.format.DateFormat\",\r\n      init: null,\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    _getContentHtml(cellInfo) {\r\n      var df = this.getDateFormat();\r\n\r\n      if (df) {\r\n        if (cellInfo.value) {\r\n          return qx.bom.String.escape(df.format(cellInfo.value));\r\n        } else {\r\n          return \"\";\r\n        }\r\n      } else {\r\n        return cellInfo.value || \"\";\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    _getCellClass(cellInfo) {\r\n      return \"qooxdoo-table-cell\";\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,+BAA+B,EAAE;IAC/CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACC,WAAW;IAE5C;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,UAAU,EAAE;QACVC,KAAK,EAAE,2BAA2B;QAClCC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE;MACZ;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,eAAe,WAAAA,gBAACC,QAAQ,EAAE;QACxB,IAAIC,EAAE,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;QAE7B,IAAID,EAAE,EAAE;UACN,IAAID,QAAQ,CAACG,KAAK,EAAE;YAClB,OAAOrB,EAAE,CAACsB,GAAG,CAACC,MAAM,CAACC,MAAM,CAACL,EAAE,CAACM,MAAM,CAACP,QAAQ,CAACG,KAAK,CAAC,CAAC;UACxD,CAAC,MAAM;YACL,OAAO,EAAE;UACX;QACF,CAAC,MAAM;UACL,OAAOH,QAAQ,CAACG,KAAK,IAAI,EAAE;QAC7B;MACF,CAAC;MAED;MACAK,aAAa,WAAAA,cAACR,QAAQ,EAAE;QACtB,OAAO,oBAAoB;MAC7B;IACF;EACF,CAAC,CAAC;EAnEFlB,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACkB,IAAI,CAACxB,aAAa,GAAGA,aAAa;AAAC"
}