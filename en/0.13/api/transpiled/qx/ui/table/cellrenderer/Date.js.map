{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Conditional",
    "properties",
    "dateFormat",
    "check",
    "init",
    "nullable",
    "members",
    "_getContentHtml",
    "cellInfo",
    "df",
    "getDateFormat",
    "value",
    "bom",
    "String",
    "escape",
    "format",
    "_getCellClass",
    "Date"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Date.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 OpenHex SPRL, http://www.openhex.org\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Gaetan de Menten (ged)\n\n************************************************************************ */\n\n/**\n * Specific data cell renderer for dates.\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Date\", {\n  extend: qx.ui.table.cellrenderer.Conditional,\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * DateFormat used to format the data.\n     */\n    dateFormat: {\n      check: \"qx.util.format.DateFormat\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    _getContentHtml(cellInfo) {\n      var df = this.getDateFormat();\n\n      if (df) {\n        if (cellInfo.value) {\n          return qx.bom.String.escape(df.format(cellInfo.value));\n        } else {\n          return \"\";\n        }\n      } else {\n        return cellInfo.value || \"\";\n      }\n    },\n\n    // overridden\n    _getCellClass(cellInfo) {\n      return \"qooxdoo-table-cell\";\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,+BAA+B,EAAE;IAC/CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACC,WAAW;IAE5C;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,UAAU,EAAE;QACVC,KAAK,EAAE,2BAA2B;QAClCC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE;MACZ;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,eAAe,WAAfA,eAAeA,CAACC,QAAQ,EAAE;QACxB,IAAIC,EAAE,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;QAE7B,IAAID,EAAE,EAAE;UACN,IAAID,QAAQ,CAACG,KAAK,EAAE;YAClB,OAAOrB,EAAE,CAACsB,GAAG,CAACC,MAAM,CAACC,MAAM,CAACL,EAAE,CAACM,MAAM,CAACP,QAAQ,CAACG,KAAK,CAAC,CAAC;UACxD,CAAC,MAAM;YACL,OAAO,EAAE;UACX;QACF,CAAC,MAAM;UACL,OAAOH,QAAQ,CAACG,KAAK,IAAI,EAAE;QAC7B;MACF,CAAC;MAED;MACAK,aAAa,WAAbA,aAAaA,CAACR,QAAQ,EAAE;QACtB,OAAO,oBAAoB;MAC7B;IACF;EACF,CAAC,CAAC;EAnEFlB,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACkB,IAAI,CAACxB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}