{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Default",
    "construct",
    "cellRendererFactoryFunction",
    "constructor",
    "call",
    "setCellRendererFactoryFunction",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "createDataCellHtml",
    "cellInfo",
    "htmlArr",
    "getCellRendererFactoryFunction",
    "Error",
    "cellRenderer",
    "Dynamic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Dynamic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 by Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A cell renderer factory which can dynamically exchange the cell renderer\n * based on information retrieved at runtime. This is useful when different\n * rows in a column should have different cell renderer based on cell content\n * or row metadata. A typical example would be a spreadsheet that has different\n * kind of data in one column.\n *\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Dynamic\", {\n  extend: qx.ui.table.cellrenderer.Default,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param cellRendererFactoryFunction {Function?null} The initial value for\n   *    the property {@link #cellRendererFactoryFunction}.\n   */\n  construct(cellRendererFactoryFunction) {\n    super();\n    if (cellRendererFactoryFunction) {\n      this.setCellRendererFactoryFunction(cellRendererFactoryFunction);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Function that returns a cellRenderer instance which will be\n     * used for the row that is currently being edited. The function is\n     * defined like this:\n     *\n     * <pre class=\"javascript\">\n     * myTable.getTableColumnModel().setCellRenderer(function(cellInfo){\n     *   // based on the cellInfo map or other information, return the\n     *   // appropriate cell renderer\n     *   if (cellInfo.row == 5)\n     *     return new qx.ui.table.cellrenderer.Boolean;\n     *   else\n     *     return new qx.ui.table.cellrenderer.Default;\n     * });\n     * </pre>\n     *\n     * the function MUST return at least a qx.ui.table.cellrenderer.Default\n     **/\n    cellRendererFactoryFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Overridden; called whenever the cell updates. The cell will call the\n     * function stored in the cellRendererFactoryFunction to retrieve the\n     * cell renderer which should be used for this particular cell\n     *\n     * @param cellInfo {Map} A map containing the information about the cell to\n     *     create.\n     * @param htmlArr {String[]} Target string container. The HTML of the data\n     *     cell should be appended to this array.\n     * @return {String} Data cell HTML\n     */\n    createDataCellHtml(cellInfo, htmlArr) {\n      var cellRendererFactoryFunction = this.getCellRendererFactoryFunction();\n      if (!cellRendererFactoryFunction) {\n        throw new Error(\"No function provided! Aborting.\");\n      }\n      var cellRenderer = cellRendererFactoryFunction(cellInfo);\n\n      return cellRenderer.createDataCellHtml(cellInfo, htmlArr);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kCAAkC,EAAE;IAClDC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO;IAExC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,2BAA2B,EAAE;MACrCZ,EAAA,CAAAO,EAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA,CAAAG,WAAA,CAAAC,IAAA;MACA,IAAIF,2BAA2B,EAAE;QAC/B,IAAI,CAACG,8BAA8B,CAACH,2BAA2B,CAAC;MAClE;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEI,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIJ,2BAA2B,EAAE;QAC3BK,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACC,QAAQ,EAAEC,OAAO,EAAE;QACpC,IAAIX,2BAA2B,GAAG,IAAI,CAACY,8BAA8B,CAAC,CAAC;QACvE,IAAI,CAACZ,2BAA2B,EAAE;UAChC,MAAM,IAAIa,KAAK,CAAC,iCAAiC,CAAC;QACpD;QACA,IAAIC,YAAY,GAAGd,2BAA2B,CAACU,QAAQ,CAAC;QAExD,OAAOI,YAAY,CAACL,kBAAkB,CAACC,QAAQ,EAAEC,OAAO,CAAC;MAC3D;IACF;EACF,CAAC,CAAC;EA1GFvB,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACkB,OAAO,CAACxB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}