{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Default",
    "construct",
    "cellRendererFactoryFunction",
    "constructor",
    "call",
    "setCellRendererFactoryFunction",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "createDataCellHtml",
    "cellInfo",
    "htmlArr",
    "getCellRendererFactoryFunction",
    "Error",
    "cellRenderer",
    "Dynamic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Dynamic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 by Christian Boulanger\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Boulanger (cboulanger)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A cell renderer factory which can dynamically exchange the cell renderer\r\n * based on information retrieved at runtime. This is useful when different\r\n * rows in a column should have different cell renderer based on cell content\r\n * or row metadata. A typical example would be a spreadsheet that has different\r\n * kind of data in one column.\r\n *\r\n */\r\nqx.Class.define(\"qx.ui.table.cellrenderer.Dynamic\", {\r\n  extend: qx.ui.table.cellrenderer.Default,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param cellRendererFactoryFunction {Function?null} The initial value for\r\n   *    the property {@link #cellRendererFactoryFunction}.\r\n   */\r\n  construct(cellRendererFactoryFunction) {\r\n    super();\r\n    if (cellRendererFactoryFunction) {\r\n      this.setCellRendererFactoryFunction(cellRendererFactoryFunction);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * Function that returns a cellRenderer instance which will be\r\n     * used for the row that is currently being edited. The function is\r\n     * defined like this:\r\n     *\r\n     * <pre class=\"javascript\">\r\n     * myTable.getTableColumnModel().setCellRenderer(function(cellInfo){\r\n     *   // based on the cellInfo map or other information, return the\r\n     *   // appropriate cell renderer\r\n     *   if (cellInfo.row == 5)\r\n     *     return new qx.ui.table.cellrenderer.Boolean;\r\n     *   else\r\n     *     return new qx.ui.table.cellrenderer.Default;\r\n     * });\r\n     * </pre>\r\n     *\r\n     * the function MUST return at least a qx.ui.table.cellrenderer.Default\r\n     **/\r\n    cellRendererFactoryFunction: {\r\n      check: \"Function\",\r\n      nullable: true,\r\n      init: null\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Overridden; called whenever the cell updates. The cell will call the\r\n     * function stored in the cellRendererFactoryFunction to retrieve the\r\n     * cell renderer which should be used for this particular cell\r\n     *\r\n     * @param cellInfo {Map} A map containing the information about the cell to\r\n     *     create.\r\n     * @param htmlArr {String[]} Target string container. The HTML of the data\r\n     *     cell should be appended to this array.\r\n     * @return {String} Data cell HTML\r\n     */\r\n    createDataCellHtml(cellInfo, htmlArr) {\r\n      var cellRendererFactoryFunction = this.getCellRendererFactoryFunction();\r\n      if (!cellRendererFactoryFunction) {\r\n        throw new Error(\"No function provided! Aborting.\");\r\n      }\r\n      var cellRenderer = cellRendererFactoryFunction(cellInfo);\r\n\r\n      return cellRenderer.createDataCellHtml(cellInfo, htmlArr);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kCAAkC,EAAE;IAClDC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO;IAExC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,2BAA2B,EAAE;MACrCZ,EAAA,CAAAO,EAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA,CAAAG,WAAA,CAAAC,IAAA;MACA,IAAIF,2BAA2B,EAAE;QAC/B,IAAI,CAACG,8BAA8B,CAACH,2BAA2B,CAAC;MAClE;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEI,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIJ,2BAA2B,EAAE;QAC3BK,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACC,QAAQ,EAAEC,OAAO,EAAE;QACpC,IAAIX,2BAA2B,GAAG,IAAI,CAACY,8BAA8B,CAAC,CAAC;QACvE,IAAI,CAACZ,2BAA2B,EAAE;UAChC,MAAM,IAAIa,KAAK,CAAC,iCAAiC,CAAC;QACpD;QACA,IAAIC,YAAY,GAAGd,2BAA2B,CAACU,QAAQ,CAAC;QAExD,OAAOI,YAAY,CAACL,kBAAkB,CAACC,QAAQ,EAAEC,OAAO,CAAC;MAC3D;IACF;EACF,CAAC,CAAC;EA1GFvB,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,YAAY,CAACkB,OAAO,CAACxB,aAAa,GAAGA,aAAa;AAAC"
}