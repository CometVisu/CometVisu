{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "createDataCellHtml",
    "cellInfo",
    "htmlArr",
    "ui",
    "table",
    "ICellRenderer"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/ICellRenderer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A cell renderer for data cells.\r\n */\r\nqx.Interface.define(\"qx.ui.table.ICellRenderer\", {\r\n  members: {\r\n    /**\r\n     * Creates the HTML for a data cell.\r\n     *\r\n     * The cellInfo map contains the following properties:\r\n     * <ul>\r\n     * <li>value (var): the cell's value.</li>\r\n     * <li>rowData (var): contains the row data for the row, the cell belongs to.\r\n     *   The kind of this object depends on the table model, see\r\n     *   {@link qx.ui.table.ITableModel#getRowData}</li>\r\n     * <li>row (int): the model index of the row the cell belongs to.</li>\r\n     * <li>col (int): the model index of the column the cell belongs to.</li>\r\n     * <li>table (qx.ui.table.Table): the table the cell belongs to.</li>\r\n     * <li>xPos (int): the x position of the cell in the table pane.</li>\r\n     * <li>selected (boolean): whether the cell is selected.</li>\r\n     * <li>focusedRow (boolean): whether the cell is in the same row as the\r\n     *   focused cell.</li>\r\n     * <li>editable (boolean): whether the cell is editable.</li>\r\n     * <li>style (string): The CSS styles that should be applied to the outer HTML\r\n     *   element.</li>\r\n     * <li>styleLeft (string): The left position of the cell.</li>\r\n     * <li>styleWidth (string): The cell's width (pixel).</li>\r\n     * <li>styleHeight (string): The cell's height (pixel).</li>\r\n     * </ul>\r\n     *\r\n     * @param cellInfo {Map} A map containing the information about the cell to\r\n     *     create.\r\n     * @param htmlArr {String[]} Target string container. The HTML of the data\r\n     *     cell should be appended to this array.\r\n     *\r\n     * @return {Boolean|undefined}\r\n     *   A return value of <i>true</i> specifies that no additional cells in\r\n     *   the row shall be rendered. This may be used, for example, for\r\n     *   separator rows or for other special rendering purposes. Traditional\r\n     *   cell renderers had no defined return value, so returned nothing\r\n     *   (undefined). If this method returns either false or nothing, then\r\n     *   rendering continues with the next cell in the row, which the normal\r\n     *   mode of operation.\r\n     */\r\n    createDataCellHtml(cellInfo, htmlArr) {\r\n      return true;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC/CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACC,QAAQ,EAAEC,OAAO,EAAE;QACpC,OAAO,IAAI;MACb;IACF;EACF,CAAC,CAAC;EAjEFT,EAAE,CAACU,EAAE,CAACC,KAAK,CAACC,aAAa,CAACT,aAAa,GAAGA,aAAa;AAAC"
}