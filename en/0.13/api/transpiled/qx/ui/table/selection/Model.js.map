{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__selectedRangeArr",
    "__anchorSelectionIndex",
    "__leadSelectionIndex",
    "hasBatchModeRefCount",
    "__hadChangeEventInBatchMode",
    "events",
    "changeSelection",
    "statics",
    "NO_SELECTION",
    "SINGLE_SELECTION",
    "SINGLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_SELECTION_TOGGLE",
    "properties",
    "selectionMode",
    "init",
    "check",
    "apply",
    "members",
    "_applySelectionMode",
    "resetSelection",
    "setBatchMode",
    "batchMode",
    "Error",
    "_fireChangeSelection",
    "hasBatchMode",
    "getAnchorSelectionIndex",
    "_setAnchorSelectionIndex",
    "index",
    "getLeadSelectionIndex",
    "_setLeadSelectionIndex",
    "_getSelectedRangeArr",
    "isSelectionEmpty",
    "_resetSelection",
    "length",
    "getSelectedCount",
    "selectedCount",
    "i",
    "range",
    "maxIndex",
    "minIndex",
    "isSelectedIndex",
    "getSelectedRanges",
    "retVal",
    "push",
    "iterateSelection",
    "iterator",
    "object",
    "j",
    "call",
    "setSelectionInterval",
    "fromIndex",
    "toIndex",
    "me",
    "getSelectionMode",
    "_addSelectionInterval",
    "removeSelectionInterval",
    "e",
    "addSelectionInterval",
    "SelectionModel",
    "ui",
    "table",
    "selection",
    "Model",
    "rowsRemoved",
    "Math",
    "min",
    "max",
    "removeCount",
    "newRanges",
    "extraRange",
    "minIsIn",
    "maxIsIn",
    "newRangeIndex",
    "splice",
    "lastRange",
    "_dumpRanges",
    "text",
    "debug",
    "fireEvent",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/selection/Model.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * David Perez Carmona (david-perez)\n\n************************************************************************ */\n\n/**\n * A selection model.\n */\nqx.Class.define(\"qx.ui.table.selection.Model\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.__selectedRangeArr = [];\n    this.__anchorSelectionIndex = -1;\n    this.__leadSelectionIndex = -1;\n    this.hasBatchModeRefCount = 0;\n    this.__hadChangeEventInBatchMode = false;\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired when the selection has changed. */\n    changeSelection: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {int} The selection mode \"none\". Nothing can ever be selected. */\n    NO_SELECTION: 1,\n\n    /** @type {int} The selection mode \"single\". This mode only allows one selected item. */\n    SINGLE_SELECTION: 2,\n\n    /**\n     * @type {int} The selection mode \"single interval\". This mode only allows one\n     * continuous interval of selected items.\n     */\n    SINGLE_INTERVAL_SELECTION: 3,\n\n    /**\n     * @type {int} The selection mode \"multiple interval\". This mode only allows any\n     * selection.\n     */\n    MULTIPLE_INTERVAL_SELECTION: 4,\n\n    /**\n     * @type {int} The selection mode \"multiple interval\". This mode only allows any\n     * selection. The difference with the previous one, is that multiple\n     * selection is eased. A tap on an item, toggles its selection state.\n     * On the other hand, MULTIPLE_INTERVAL_SELECTION does this behavior only\n     * when Ctrl-tapping an item.\n     */\n    MULTIPLE_INTERVAL_SELECTION_TOGGLE: 5\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Set the selection mode. Valid values are {@link #NO_SELECTION},\n     * {@link #SINGLE_SELECTION}, {@link #SINGLE_INTERVAL_SELECTION},\n     * {@link #MULTIPLE_INTERVAL_SELECTION} and\n     * {@link #MULTIPLE_INTERVAL_SELECTION_TOGGLE}.\n     */\n    selectionMode: {\n      init: 2, //SINGLE_SELECTION,\n      check: [1, 2, 3, 4, 5],\n      //[ NO_SELECTION, SINGLE_SELECTION, SINGLE_INTERVAL_SELECTION, MULTIPLE_INTERVAL_SELECTION, MULTIPLE_INTERVAL_SELECTION_TOGGLE ],\n      apply: \"_applySelectionMode\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __hadChangeEventInBatchMode: null,\n    __anchorSelectionIndex: null,\n    __leadSelectionIndex: null,\n    __selectedRangeArr: null,\n\n    // selectionMode property modifier\n    _applySelectionMode(selectionMode) {\n      this.resetSelection();\n    },\n\n    /**\n     *\n     * Activates / Deactivates batch mode. In batch mode, no change events will be thrown but\n     * will be collected instead. When batch mode is turned off again and any events have\n     * been collected, one event is thrown to inform the listeners.\n     *\n     * This method supports nested calling, i. e. batch mode can be turned more than once.\n     * In this case, batch mode will not end until it has been turned off once for each\n     * turning on.\n     *\n     * @param batchMode {Boolean} true to activate batch mode, false to deactivate\n     * @return {Boolean} true if batch mode is active, false otherwise\n     * @throws {Error} if batch mode is turned off once more than it has been turned on\n     */\n    setBatchMode(batchMode) {\n      if (batchMode) {\n        this.hasBatchModeRefCount += 1;\n      } else {\n        if (this.hasBatchModeRefCount == 0) {\n          throw new Error(\n            \"Try to turn off batch mode althoug it was not turned on.\"\n          );\n        }\n\n        this.hasBatchModeRefCount -= 1;\n\n        if (this.__hadChangeEventInBatchMode) {\n          this.__hadChangeEventInBatchMode = false;\n          this._fireChangeSelection();\n        }\n      }\n\n      return this.hasBatchMode();\n    },\n\n    /**\n     *\n     * Returns whether batch mode is active. See setter for a description of batch mode.\n     *\n     * @return {Boolean} true if batch mode is active, false otherwise\n     */\n    hasBatchMode() {\n      return this.hasBatchModeRefCount > 0;\n    },\n\n    /**\n     * Returns the first argument of the last call to {@link #setSelectionInterval()},\n     * {@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.\n     *\n     * @return {Integer} the anchor selection index.\n     */\n    getAnchorSelectionIndex() {\n      return this.__anchorSelectionIndex;\n    },\n\n    /**\n     * Sets the anchor selection index. Only use this function, if you want manipulate\n     * the selection manually.\n     *\n     * @param index {Integer} the index to set.\n     */\n    _setAnchorSelectionIndex(index) {\n      this.__anchorSelectionIndex = index;\n    },\n\n    /**\n     * Returns the second argument of the last call to {@link #setSelectionInterval()},\n     * {@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.\n     *\n     * @return {Integer} the lead selection index.\n     */\n    getLeadSelectionIndex() {\n      return this.__leadSelectionIndex;\n    },\n\n    /**\n     * Sets the lead selection index. Only use this function, if you want manipulate\n     * the selection manually.\n     *\n     * @param index {Integer} the index to set.\n     */\n    _setLeadSelectionIndex(index) {\n      this.__leadSelectionIndex = index;\n    },\n\n    /**\n     * Returns an array that holds all the selected ranges of the table. Each\n     * entry is a map holding information about the \"minIndex\" and \"maxIndex\" of the\n     * selection range.\n     *\n     * @return {Map[]} array with all the selected ranges.\n     */\n    _getSelectedRangeArr() {\n      return this.__selectedRangeArr;\n    },\n\n    /**\n     * Resets (clears) the selection.\n     */\n    resetSelection() {\n      if (!this.isSelectionEmpty()) {\n        this._resetSelection();\n        this._fireChangeSelection();\n      }\n    },\n\n    /**\n     * Returns whether the selection is empty.\n     *\n     * @return {Boolean} whether the selection is empty.\n     */\n    isSelectionEmpty() {\n      return this.__selectedRangeArr.length == 0;\n    },\n\n    /**\n     * Returns the number of selected items.\n     *\n     * @return {Integer} the number of selected items.\n     */\n    getSelectedCount() {\n      var selectedCount = 0;\n\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n        selectedCount += range.maxIndex - range.minIndex + 1;\n      }\n\n      return selectedCount;\n    },\n\n    /**\n     * Returns whether an index is selected.\n     *\n     * @param index {Integer} the index to check.\n     * @return {Boolean} whether the index is selected.\n     */\n    isSelectedIndex(index) {\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n\n        if (index >= range.minIndex && index <= range.maxIndex) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns the selected ranges as an array. Each array element has a\n     * <code>minIndex</code> and a <code>maxIndex</code> property.\n     *\n     * @return {Map[]} the selected ranges.\n     */\n    getSelectedRanges() {\n      // clone the selection array and the individual elements - this prevents the\n      // caller from messing with the internal model\n      var retVal = [];\n\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        retVal.push({\n          minIndex: this.__selectedRangeArr[i].minIndex,\n          maxIndex: this.__selectedRangeArr[i].maxIndex\n        });\n      }\n\n      return retVal;\n    },\n\n    /**\n     * Calls an iterator function for each selected index.\n     *\n     * Usage Example:\n     * <pre class='javascript'>\n     * var selectedRowData = [];\n     * mySelectionModel.iterateSelection(function(index) {\n     *   selectedRowData.push(myTableModel.getRowData(index));\n     * });\n     * </pre>\n     *\n     * @param iterator {Function} the function to call for each selected index.\n     *          Gets the current index as parameter.\n     * @param object {var ? null} the object to use when calling the handler.\n     *          (this object will be available via \"this\" in the iterator)\n     */\n    iterateSelection(iterator, object) {\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        for (\n          var j = this.__selectedRangeArr[i].minIndex;\n          j <= this.__selectedRangeArr[i].maxIndex;\n          j++\n        ) {\n          iterator.call(object, j);\n        }\n      }\n    },\n\n    /**\n     * Sets the selected interval. This will clear the former selection.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    setSelectionInterval(fromIndex, toIndex) {\n      var me = this.self(arguments);\n\n      switch (this.getSelectionMode()) {\n        case me.NO_SELECTION:\n          return;\n\n        case me.SINGLE_SELECTION:\n          // Ensure there is actually a change of selection\n          if (this.isSelectedIndex(toIndex)) {\n            return;\n          }\n\n          fromIndex = toIndex;\n          break;\n\n        case me.MULTIPLE_INTERVAL_SELECTION_TOGGLE:\n          this.setBatchMode(true);\n          try {\n            for (var i = fromIndex; i <= toIndex; i++) {\n              if (!this.isSelectedIndex(i)) {\n                this._addSelectionInterval(i, i);\n              } else {\n                this.removeSelectionInterval(i, i);\n              }\n            }\n          } catch (e) {\n            throw e;\n          } finally {\n            this.setBatchMode(false);\n          }\n          this._fireChangeSelection();\n          return;\n      }\n\n      this._resetSelection();\n      this._addSelectionInterval(fromIndex, toIndex);\n\n      this._fireChangeSelection();\n    },\n\n    /**\n     * Adds a selection interval to the current selection.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    addSelectionInterval(fromIndex, toIndex) {\n      var SelectionModel = qx.ui.table.selection.Model;\n\n      switch (this.getSelectionMode()) {\n        case SelectionModel.NO_SELECTION:\n          return;\n\n        case SelectionModel.MULTIPLE_INTERVAL_SELECTION:\n        case SelectionModel.MULTIPLE_INTERVAL_SELECTION_TOGGLE:\n          this._addSelectionInterval(fromIndex, toIndex);\n          this._fireChangeSelection();\n          break;\n\n        default:\n          this.setSelectionInterval(fromIndex, toIndex);\n          break;\n      }\n    },\n\n    /**\n     * Removes an interval from the current selection.\n     *\n     * @param fromIndex {Integer} the first index of the interval (including).\n     * @param toIndex {Integer} the last index of the interval (including).\n     * @param rowsRemoved {Boolean?} rows were removed that caused this selection to change.\n     *   If rows were removed, move the selections over so the same rows are selected as before.\n     */\n    removeSelectionInterval(fromIndex, toIndex, rowsRemoved) {\n      this.__anchorSelectionIndex = fromIndex;\n      this.__leadSelectionIndex = toIndex;\n\n      var minIndex = Math.min(fromIndex, toIndex);\n      var maxIndex = Math.max(fromIndex, toIndex);\n      var removeCount = maxIndex + 1 - minIndex;\n\n      // Crop the affected ranges\n      var newRanges = [];\n      var extraRange = null;\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n\n        if (range.minIndex > maxIndex) {\n          if (rowsRemoved) {\n            // Move whole selection up.\n            range.minIndex -= removeCount;\n            range.maxIndex -= removeCount;\n          }\n        } else if (range.maxIndex >= minIndex) {\n          // This range is affected\n          var minIsIn = range.minIndex >= minIndex;\n          var maxIsIn =\n            range.maxIndex >= minIndex && range.maxIndex <= maxIndex;\n\n          if (minIsIn && maxIsIn) {\n            // This range is removed completely\n            range = null;\n          } else if (minIsIn) {\n            if (rowsRemoved) {\n              range.minIndex = minIndex;\n              range.maxIndex -= removeCount;\n            } else {\n              // The range is cropped from the left\n              range.minIndex = maxIndex + 1;\n            }\n          } else if (maxIsIn) {\n            // The range is cropped from the right\n            range.maxIndex = minIndex - 1;\n          } else {\n            if (rowsRemoved) {\n              range.maxIndex -= removeCount;\n            } else {\n              // The range is split\n              extraRange = {\n                minIndex: maxIndex + 1,\n                maxIndex: range.maxIndex\n              };\n\n              range.maxIndex = minIndex - 1;\n            }\n          }\n        }\n\n        if (range) {\n          newRanges.push(range);\n          range = null;\n        }\n        if (extraRange) {\n          newRanges.push(extraRange);\n          extraRange = null;\n        }\n      }\n\n      this.__selectedRangeArr = newRanges;\n\n      this._fireChangeSelection();\n    },\n\n    /**\n     * Resets (clears) the selection, but doesn't inform the listeners.\n     */\n    _resetSelection() {\n      this.__selectedRangeArr = [];\n      this.__anchorSelectionIndex = -1;\n      this.__leadSelectionIndex = -1;\n    },\n\n    /**\n     * Adds a selection interval to the current selection, but doesn't inform\n     * the listeners.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    _addSelectionInterval(fromIndex, toIndex) {\n      this.__anchorSelectionIndex = fromIndex;\n      this.__leadSelectionIndex = toIndex;\n\n      var minIndex = Math.min(fromIndex, toIndex);\n      var maxIndex = Math.max(fromIndex, toIndex);\n\n      // Find the index where the new range should be inserted\n      var newRangeIndex = 0;\n\n      for (; newRangeIndex < this.__selectedRangeArr.length; newRangeIndex++) {\n        var range = this.__selectedRangeArr[newRangeIndex];\n\n        if (range.minIndex > minIndex) {\n          break;\n        }\n      }\n\n      // Add the new range\n      this.__selectedRangeArr.splice(newRangeIndex, 0, {\n        minIndex: minIndex,\n        maxIndex: maxIndex\n      });\n\n      // Merge overlapping ranges\n      var lastRange = this.__selectedRangeArr[0];\n\n      for (var i = 1; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n\n        if (lastRange.maxIndex + 1 >= range.minIndex) {\n          // The ranges are overlapping -> merge them\n          lastRange.maxIndex = Math.max(lastRange.maxIndex, range.maxIndex);\n\n          // Remove the current range\n          this.__selectedRangeArr.splice(i, 1);\n\n          // Check this index another time\n          i--;\n        } else {\n          lastRange = range;\n        }\n      }\n    },\n\n    // this._dumpRanges();\n    /**\n     * Logs the current ranges for debug purposes.\n     *\n     */\n    _dumpRanges() {\n      var text = \"Ranges:\";\n\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n        text += \" [\" + range.minIndex + \"..\" + range.maxIndex + \"]\";\n      }\n\n      this.debug(text);\n    },\n\n    /**\n     * Fires the \"changeSelection\" event to all registered listeners. If the selection model\n     * currently is in batch mode, only one event will be thrown when batch mode is ended.\n     *\n     */\n    _fireChangeSelection() {\n      if (this.hasBatchMode()) {\n        // In batch mode, remember event but do not throw (yet)\n        this.__hadChangeEventInBatchMode = true;\n      } else {\n        // If not in batch mode, throw event\n        this.fireEvent(\"changeSelection\");\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__selectedRangeArr = null;\n  }\n});\n"
  ],
  "mappings": "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"
}