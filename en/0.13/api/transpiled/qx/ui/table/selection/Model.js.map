{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__selectedRangeArr",
    "__anchorSelectionIndex",
    "__leadSelectionIndex",
    "hasBatchModeRefCount",
    "__hadChangeEventInBatchMode",
    "events",
    "changeSelection",
    "statics",
    "NO_SELECTION",
    "SINGLE_SELECTION",
    "SINGLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_SELECTION_TOGGLE",
    "properties",
    "selectionMode",
    "init",
    "check",
    "apply",
    "members",
    "_applySelectionMode",
    "resetSelection",
    "setBatchMode",
    "batchMode",
    "Error",
    "_fireChangeSelection",
    "hasBatchMode",
    "getAnchorSelectionIndex",
    "_setAnchorSelectionIndex",
    "index",
    "getLeadSelectionIndex",
    "_setLeadSelectionIndex",
    "_getSelectedRangeArr",
    "isSelectionEmpty",
    "_resetSelection",
    "length",
    "getSelectedCount",
    "selectedCount",
    "i",
    "range",
    "maxIndex",
    "minIndex",
    "isSelectedIndex",
    "getSelectedRanges",
    "retVal",
    "push",
    "iterateSelection",
    "iterator",
    "object",
    "j",
    "call",
    "setSelectionInterval",
    "fromIndex",
    "toIndex",
    "me",
    "getSelectionMode",
    "_addSelectionInterval",
    "removeSelectionInterval",
    "e",
    "addSelectionInterval",
    "SelectionModel",
    "ui",
    "table",
    "selection",
    "Model",
    "rowsRemoved",
    "Math",
    "min",
    "max",
    "removeCount",
    "newRanges",
    "extraRange",
    "minIsIn",
    "maxIsIn",
    "newRangeIndex",
    "splice",
    "lastRange",
    "_dumpRanges",
    "text",
    "debug",
    "fireEvent",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/selection/Model.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * David Perez Carmona (david-perez)\n\n************************************************************************ */\n\n/**\n * A selection model.\n */\nqx.Class.define(\"qx.ui.table.selection.Model\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.__selectedRangeArr = [];\n    this.__anchorSelectionIndex = -1;\n    this.__leadSelectionIndex = -1;\n    this.hasBatchModeRefCount = 0;\n    this.__hadChangeEventInBatchMode = false;\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired when the selection has changed. */\n    changeSelection: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {int} The selection mode \"none\". Nothing can ever be selected. */\n    NO_SELECTION: 1,\n\n    /** @type {int} The selection mode \"single\". This mode only allows one selected item. */\n    SINGLE_SELECTION: 2,\n\n    /**\n     * @type {int} The selection mode \"single interval\". This mode only allows one\n     * continuous interval of selected items.\n     */\n    SINGLE_INTERVAL_SELECTION: 3,\n\n    /**\n     * @type {int} The selection mode \"multiple interval\". This mode only allows any\n     * selection.\n     */\n    MULTIPLE_INTERVAL_SELECTION: 4,\n\n    /**\n     * @type {int} The selection mode \"multiple interval\". This mode only allows any\n     * selection. The difference with the previous one, is that multiple\n     * selection is eased. A tap on an item, toggles its selection state.\n     * On the other hand, MULTIPLE_INTERVAL_SELECTION does this behavior only\n     * when Ctrl-tapping an item.\n     */\n    MULTIPLE_INTERVAL_SELECTION_TOGGLE: 5\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Set the selection mode. Valid values are {@link #NO_SELECTION},\n     * {@link #SINGLE_SELECTION}, {@link #SINGLE_INTERVAL_SELECTION},\n     * {@link #MULTIPLE_INTERVAL_SELECTION} and\n     * {@link #MULTIPLE_INTERVAL_SELECTION_TOGGLE}.\n     */\n    selectionMode: {\n      init: 2, //SINGLE_SELECTION,\n      check: [1, 2, 3, 4, 5],\n      //[ NO_SELECTION, SINGLE_SELECTION, SINGLE_INTERVAL_SELECTION, MULTIPLE_INTERVAL_SELECTION, MULTIPLE_INTERVAL_SELECTION_TOGGLE ],\n      apply: \"_applySelectionMode\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __hadChangeEventInBatchMode: null,\n    __anchorSelectionIndex: null,\n    __leadSelectionIndex: null,\n    __selectedRangeArr: null,\n\n    // selectionMode property modifier\n    _applySelectionMode(selectionMode) {\n      this.resetSelection();\n    },\n\n    /**\n     *\n     * Activates / Deactivates batch mode. In batch mode, no change events will be thrown but\n     * will be collected instead. When batch mode is turned off again and any events have\n     * been collected, one event is thrown to inform the listeners.\n     *\n     * This method supports nested calling, i. e. batch mode can be turned more than once.\n     * In this case, batch mode will not end until it has been turned off once for each\n     * turning on.\n     *\n     * @param batchMode {Boolean} true to activate batch mode, false to deactivate\n     * @return {Boolean} true if batch mode is active, false otherwise\n     * @throws {Error} if batch mode is turned off once more than it has been turned on\n     */\n    setBatchMode(batchMode) {\n      if (batchMode) {\n        this.hasBatchModeRefCount += 1;\n      } else {\n        if (this.hasBatchModeRefCount == 0) {\n          throw new Error(\n            \"Try to turn off batch mode althoug it was not turned on.\"\n          );\n        }\n\n        this.hasBatchModeRefCount -= 1;\n\n        if (this.__hadChangeEventInBatchMode) {\n          this.__hadChangeEventInBatchMode = false;\n          this._fireChangeSelection();\n        }\n      }\n\n      return this.hasBatchMode();\n    },\n\n    /**\n     *\n     * Returns whether batch mode is active. See setter for a description of batch mode.\n     *\n     * @return {Boolean} true if batch mode is active, false otherwise\n     */\n    hasBatchMode() {\n      return this.hasBatchModeRefCount > 0;\n    },\n\n    /**\n     * Returns the first argument of the last call to {@link #setSelectionInterval()},\n     * {@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.\n     *\n     * @return {Integer} the anchor selection index.\n     */\n    getAnchorSelectionIndex() {\n      return this.__anchorSelectionIndex;\n    },\n\n    /**\n     * Sets the anchor selection index. Only use this function, if you want manipulate\n     * the selection manually.\n     *\n     * @param index {Integer} the index to set.\n     */\n    _setAnchorSelectionIndex(index) {\n      this.__anchorSelectionIndex = index;\n    },\n\n    /**\n     * Returns the second argument of the last call to {@link #setSelectionInterval()},\n     * {@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.\n     *\n     * @return {Integer} the lead selection index.\n     */\n    getLeadSelectionIndex() {\n      return this.__leadSelectionIndex;\n    },\n\n    /**\n     * Sets the lead selection index. Only use this function, if you want manipulate\n     * the selection manually.\n     *\n     * @param index {Integer} the index to set.\n     */\n    _setLeadSelectionIndex(index) {\n      this.__leadSelectionIndex = index;\n    },\n\n    /**\n     * Returns an array that holds all the selected ranges of the table. Each\n     * entry is a map holding information about the \"minIndex\" and \"maxIndex\" of the\n     * selection range.\n     *\n     * @return {Map[]} array with all the selected ranges.\n     */\n    _getSelectedRangeArr() {\n      return this.__selectedRangeArr;\n    },\n\n    /**\n     * Resets (clears) the selection.\n     */\n    resetSelection() {\n      if (!this.isSelectionEmpty()) {\n        this._resetSelection();\n        this._fireChangeSelection();\n      }\n    },\n\n    /**\n     * Returns whether the selection is empty.\n     *\n     * @return {Boolean} whether the selection is empty.\n     */\n    isSelectionEmpty() {\n      return this.__selectedRangeArr.length == 0;\n    },\n\n    /**\n     * Returns the number of selected items.\n     *\n     * @return {Integer} the number of selected items.\n     */\n    getSelectedCount() {\n      var selectedCount = 0;\n\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n        selectedCount += range.maxIndex - range.minIndex + 1;\n      }\n\n      return selectedCount;\n    },\n\n    /**\n     * Returns whether an index is selected.\n     *\n     * @param index {Integer} the index to check.\n     * @return {Boolean} whether the index is selected.\n     */\n    isSelectedIndex(index) {\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n\n        if (index >= range.minIndex && index <= range.maxIndex) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns the selected ranges as an array. Each array element has a\n     * <code>minIndex</code> and a <code>maxIndex</code> property.\n     *\n     * @return {Map[]} the selected ranges.\n     */\n    getSelectedRanges() {\n      // clone the selection array and the individual elements - this prevents the\n      // caller from messing with the internal model\n      var retVal = [];\n\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        retVal.push({\n          minIndex: this.__selectedRangeArr[i].minIndex,\n          maxIndex: this.__selectedRangeArr[i].maxIndex\n        });\n      }\n\n      return retVal;\n    },\n\n    /**\n     * Calls an iterator function for each selected index.\n     *\n     * Usage Example:\n     * <pre class='javascript'>\n     * var selectedRowData = [];\n     * mySelectionModel.iterateSelection(function(index) {\n     *   selectedRowData.push(myTableModel.getRowData(index));\n     * });\n     * </pre>\n     *\n     * @param iterator {Function} the function to call for each selected index.\n     *          Gets the current index as parameter.\n     * @param object {var ? null} the object to use when calling the handler.\n     *          (this object will be available via \"this\" in the iterator)\n     */\n    iterateSelection(iterator, object) {\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        for (\n          var j = this.__selectedRangeArr[i].minIndex;\n          j <= this.__selectedRangeArr[i].maxIndex;\n          j++\n        ) {\n          iterator.call(object, j);\n        }\n      }\n    },\n\n    /**\n     * Sets the selected interval. This will clear the former selection.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    setSelectionInterval(fromIndex, toIndex) {\n      var me = this.self(arguments);\n\n      switch (this.getSelectionMode()) {\n        case me.NO_SELECTION:\n          return;\n\n        case me.SINGLE_SELECTION:\n          // Ensure there is actually a change of selection\n          if (this.isSelectedIndex(toIndex)) {\n            return;\n          }\n\n          fromIndex = toIndex;\n          break;\n\n        case me.MULTIPLE_INTERVAL_SELECTION_TOGGLE:\n          this.setBatchMode(true);\n          try {\n            for (var i = fromIndex; i <= toIndex; i++) {\n              if (!this.isSelectedIndex(i)) {\n                this._addSelectionInterval(i, i);\n              } else {\n                this.removeSelectionInterval(i, i);\n              }\n            }\n          } catch (e) {\n            throw e;\n          } finally {\n            this.setBatchMode(false);\n          }\n          this._fireChangeSelection();\n          return;\n      }\n\n      this._resetSelection();\n      this._addSelectionInterval(fromIndex, toIndex);\n\n      this._fireChangeSelection();\n    },\n\n    /**\n     * Adds a selection interval to the current selection.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    addSelectionInterval(fromIndex, toIndex) {\n      var SelectionModel = qx.ui.table.selection.Model;\n\n      switch (this.getSelectionMode()) {\n        case SelectionModel.NO_SELECTION:\n          return;\n\n        case SelectionModel.MULTIPLE_INTERVAL_SELECTION:\n        case SelectionModel.MULTIPLE_INTERVAL_SELECTION_TOGGLE:\n          this._addSelectionInterval(fromIndex, toIndex);\n          this._fireChangeSelection();\n          break;\n\n        default:\n          this.setSelectionInterval(fromIndex, toIndex);\n          break;\n      }\n    },\n\n    /**\n     * Removes an interval from the current selection.\n     *\n     * @param fromIndex {Integer} the first index of the interval (including).\n     * @param toIndex {Integer} the last index of the interval (including).\n     * @param rowsRemoved {Boolean?} rows were removed that caused this selection to change.\n     *   If rows were removed, move the selections over so the same rows are selected as before.\n     */\n    removeSelectionInterval(fromIndex, toIndex, rowsRemoved) {\n      this.__anchorSelectionIndex = fromIndex;\n      this.__leadSelectionIndex = toIndex;\n\n      var minIndex = Math.min(fromIndex, toIndex);\n      var maxIndex = Math.max(fromIndex, toIndex);\n      var removeCount = maxIndex + 1 - minIndex;\n\n      // Crop the affected ranges\n      var newRanges = [];\n      var extraRange = null;\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n\n        if (range.minIndex > maxIndex) {\n          if (rowsRemoved) {\n            // Move whole selection up.\n            range.minIndex -= removeCount;\n            range.maxIndex -= removeCount;\n          }\n        } else if (range.maxIndex >= minIndex) {\n          // This range is affected\n          var minIsIn = range.minIndex >= minIndex;\n          var maxIsIn =\n            range.maxIndex >= minIndex && range.maxIndex <= maxIndex;\n\n          if (minIsIn && maxIsIn) {\n            // This range is removed completely\n            range = null;\n          } else if (minIsIn) {\n            if (rowsRemoved) {\n              range.minIndex = minIndex;\n              range.maxIndex -= removeCount;\n            } else {\n              // The range is cropped from the left\n              range.minIndex = maxIndex + 1;\n            }\n          } else if (maxIsIn) {\n            // The range is cropped from the right\n            range.maxIndex = minIndex - 1;\n          } else {\n            if (rowsRemoved) {\n              range.maxIndex -= removeCount;\n            } else {\n              // The range is split\n              extraRange = {\n                minIndex: maxIndex + 1,\n                maxIndex: range.maxIndex\n              };\n\n              range.maxIndex = minIndex - 1;\n            }\n          }\n        }\n\n        if (range) {\n          newRanges.push(range);\n          range = null;\n        }\n        if (extraRange) {\n          newRanges.push(extraRange);\n          extraRange = null;\n        }\n      }\n\n      this.__selectedRangeArr = newRanges;\n\n      this._fireChangeSelection();\n    },\n\n    /**\n     * Resets (clears) the selection, but doesn't inform the listeners.\n     */\n    _resetSelection() {\n      this.__selectedRangeArr = [];\n      this.__anchorSelectionIndex = -1;\n      this.__leadSelectionIndex = -1;\n    },\n\n    /**\n     * Adds a selection interval to the current selection, but doesn't inform\n     * the listeners.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    _addSelectionInterval(fromIndex, toIndex) {\n      this.__anchorSelectionIndex = fromIndex;\n      this.__leadSelectionIndex = toIndex;\n\n      var minIndex = Math.min(fromIndex, toIndex);\n      var maxIndex = Math.max(fromIndex, toIndex);\n\n      // Find the index where the new range should be inserted\n      var newRangeIndex = 0;\n\n      for (; newRangeIndex < this.__selectedRangeArr.length; newRangeIndex++) {\n        var range = this.__selectedRangeArr[newRangeIndex];\n\n        if (range.minIndex > minIndex) {\n          break;\n        }\n      }\n\n      // Add the new range\n      this.__selectedRangeArr.splice(newRangeIndex, 0, {\n        minIndex: minIndex,\n        maxIndex: maxIndex\n      });\n\n      // Merge overlapping ranges\n      var lastRange = this.__selectedRangeArr[0];\n\n      for (var i = 1; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n\n        if (lastRange.maxIndex + 1 >= range.minIndex) {\n          // The ranges are overlapping -> merge them\n          lastRange.maxIndex = Math.max(lastRange.maxIndex, range.maxIndex);\n\n          // Remove the current range\n          this.__selectedRangeArr.splice(i, 1);\n\n          // Check this index another time\n          i--;\n        } else {\n          lastRange = range;\n        }\n      }\n    },\n\n    // this._dumpRanges();\n    /**\n     * Logs the current ranges for debug purposes.\n     *\n     */\n    _dumpRanges() {\n      var text = \"Ranges:\";\n\n      for (var i = 0; i < this.__selectedRangeArr.length; i++) {\n        var range = this.__selectedRangeArr[i];\n        text += \" [\" + range.minIndex + \"..\" + range.maxIndex + \"]\";\n      }\n\n      this.debug(text);\n    },\n\n    /**\n     * Fires the \"changeSelection\" event to all registered listeners. If the selection model\n     * currently is in batch mode, only one event will be thrown when batch mode is ended.\n     *\n     */\n    _fireChangeSelection() {\n      if (this.hasBatchMode()) {\n        // In batch mode, remember event but do not throw (yet)\n        this.__hadChangeEventInBatchMode = true;\n      } else {\n        // If not in batch mode, throw event\n        this.fireEvent(\"changeSelection\");\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__selectedRangeArr = null;\n  }\n});\n"
  ],
  "mappings": "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"
}