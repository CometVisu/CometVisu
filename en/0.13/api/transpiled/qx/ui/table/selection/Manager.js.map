{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "properties",
    "selectionModel",
    "check",
    "members",
    "__lastPointerDownHandled",
    "handleTap",
    "index",
    "evt",
    "isLeftPressed",
    "getSelectionModel",
    "isSelectedIndex",
    "_handleSelectEvent",
    "isRightPressed",
    "getModifiers",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "handleMoveKeyDown",
    "event",
    "type",
    "Dom",
    "SHIFT_MASK",
    "anchor",
    "getAnchorSelectionIndex",
    "leadIndex",
    "getLeadSelectionIndex",
    "anchorIndex",
    "isShiftPressed",
    "isSelectionEmpty",
    "isCtrlOrCommandPressed",
    "addSelectionInterval",
    "removeSelectionInterval",
    "ui",
    "table",
    "selection",
    "Manager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/selection/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A selection manager. This is a helper class that handles all selection\r\n * related events and updates a SelectionModel.\r\n * <p>\r\n * Widgets that support selection should use this manager. This way the only\r\n * thing the widget has to do is mapping pointer or key events to indexes and\r\n * call the corresponding handler method.\r\n *\r\n * @see SelectionModel\r\n */\r\nqx.Class.define(\"qx.ui.table.selection.Manager\", {\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    super();\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * The selection model where to set the selection changes.\r\n     */\r\n    selectionModel: {\r\n      check: \"qx.ui.table.selection.Model\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __lastPointerDownHandled: null,\r\n\r\n    /**\r\n     * Handles the tap event.\r\n     *\r\n     * @param index {Integer} the index the pointer is pointing at.\r\n     * @param evt {qx.event.type.Tap} the pointer event.\r\n     */\r\n    handleTap(index, evt) {\r\n      if (evt.isLeftPressed()) {\r\n        var selectionModel = this.getSelectionModel();\r\n\r\n        if (!selectionModel.isSelectedIndex(index)) {\r\n          // This index is not selected -> We react when the pointer is pressed (because of drag and drop)\r\n          this._handleSelectEvent(index, evt);\r\n          this.__lastPointerDownHandled = true;\r\n        } else {\r\n          // This index is already selected -> We react when the pointer is released (because of drag and drop)\r\n          this.__lastPointerDownHandled = false;\r\n        }\r\n      } else if (evt.isRightPressed() && evt.getModifiers() == 0) {\r\n        var selectionModel = this.getSelectionModel();\r\n\r\n        if (!selectionModel.isSelectedIndex(index)) {\r\n          // This index is not selected -> Set the selection to this index\r\n          selectionModel.setSelectionInterval(index, index);\r\n        }\r\n      }\r\n\r\n      if (evt.isLeftPressed() && !this.__lastPointerDownHandled) {\r\n        this._handleSelectEvent(index, evt);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the key down event that is used as replacement for pointer taps\r\n     * (Normally space).\r\n     *\r\n     * @param index {Integer} the index that is currently focused.\r\n     * @param evt {Map} the key event.\r\n     */\r\n    handleSelectKeyDown(index, evt) {\r\n      this._handleSelectEvent(index, evt);\r\n    },\r\n\r\n    /**\r\n     * Handles a key down event that moved the focus (E.g. up, down, home, end, ...).\r\n     *\r\n     * @param index {Integer} the index that is currently focused.\r\n     * @param evt {Map} the key event.\r\n     */\r\n    handleMoveKeyDown(index, evt) {\r\n      var selectionModel = this.getSelectionModel();\r\n\r\n      switch (evt.getModifiers()) {\r\n        case 0:\r\n          selectionModel.setSelectionInterval(index, index);\r\n          break;\r\n\r\n        case qx.event.type.Dom.SHIFT_MASK:\r\n          var anchor = selectionModel.getAnchorSelectionIndex();\r\n\r\n          if (anchor == -1) {\r\n            selectionModel.setSelectionInterval(index, index);\r\n          } else {\r\n            selectionModel.setSelectionInterval(anchor, index);\r\n          }\r\n\r\n          break;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles a select event.\r\n     *\r\n     * @param index {Integer} the index the event is pointing at.\r\n     * @param evt {Map} the pointer event.\r\n     */\r\n    _handleSelectEvent(index, evt) {\r\n      var selectionModel = this.getSelectionModel();\r\n\r\n      var leadIndex = selectionModel.getLeadSelectionIndex();\r\n      var anchorIndex = selectionModel.getAnchorSelectionIndex();\r\n\r\n      if (evt.isShiftPressed()) {\r\n        if (index != leadIndex || selectionModel.isSelectionEmpty()) {\r\n          // The lead selection index was changed\r\n          if (anchorIndex == -1) {\r\n            anchorIndex = index;\r\n          }\r\n\r\n          if (evt.isCtrlOrCommandPressed()) {\r\n            selectionModel.addSelectionInterval(anchorIndex, index);\r\n          } else {\r\n            selectionModel.setSelectionInterval(anchorIndex, index);\r\n          }\r\n        }\r\n      } else if (evt.isCtrlOrCommandPressed()) {\r\n        if (selectionModel.isSelectedIndex(index)) {\r\n          selectionModel.removeSelectionInterval(index, index);\r\n        } else {\r\n          selectionModel.addSelectionInterval(index, index);\r\n        }\r\n      } else {\r\n        // setSelectionInterval checks to see if the change is really necessary\r\n        selectionModel.setSelectionInterval(index, index);\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}