{
  "className": "qx.ui.table.ICellRenderer",
  "packageName": "qx.ui.table",
  "name": "ICellRenderer",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0,
        "index": 508
      },
      "end": {
        "line": 66,
        "column": 3,
        "index": 2640
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A cell renderer for data cells.</p>"
        }
      ]
    }
  },
  "type": "interface",
  "members": {
    "createDataCellHtml": {
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 2568
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 2632
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the HTML for a data cell.\n The cellInfo map contains the following properties:\n </p>\n<ul>\n <li>value (var): the cell's value.</li>\n <li>rowData (var): contains the row data for the row, the cell belongs to.\n   The kind of this object depends on the table model, see\n   {@link qx.ui.table.ITableModel#getRowData}</li>\n <li>row (int): the model index of the row the cell belongs to.</li>\n <li>col (int): the model index of the column the cell belongs to.</li>\n <li>table (qx.ui.table.Table): the table the cell belongs to.</li>\n <li>xPos (int): the x position of the cell in the table pane.</li>\n <li>selected (boolean): whether the cell is selected.</li>\n <li>focusedRow (boolean): whether the cell is in the same row as the\n   focused cell.</li>\n <li>editable (boolean): whether the cell is editable.</li>\n <li>style (string): The CSS styles that should be applied to the outer HTML\n   element.</li>\n <li>styleLeft (string): The left position of the cell.</li>\n <li>styleWidth (string): The cell's width (pixel).</li>\n <li>styleHeight (string): The cell's height (pixel).</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} A map containing the information about the cell to\n     create.",
            "paramName": "cellInfo",
            "description": " A map containing the information about the cell to\n     create.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "htmlArr {String[]} Target string container. The HTML of the data\n     cell should be appended to this array.",
            "paramName": "htmlArr",
            "description": " Target string container. The HTML of the data\n     cell should be appended to this array.",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|undefined}\n   A return value of <i>true</i> specifies that no additional cells in\n   the row shall be rendered. This may be used, for example, for\n   separator rows or for other special rendering purposes. Traditional\n   cell renderers had no defined return value, so returned nothing\n   (undefined). If this method returns either false or nothing, then\n   rendering continues with the next cell in the row, which the normal\n   mode of operation.",
            "type": "Boolean|undefined",
            "description": "\n   A return value of <i>true</i> specifies that no additional cells in\n   the row shall be rendered. This may be used, for example, for\n   separator rows or for other special rendering purposes. Traditional\n   cell renderers had no defined return value, so returned nothing\n   (undefined). If this method returns either false or nothing, then\n   rendering continues with the next cell in the row, which the normal\n   mode of operation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}