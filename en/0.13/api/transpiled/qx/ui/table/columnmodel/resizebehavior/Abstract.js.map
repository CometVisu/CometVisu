{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "members",
    "_setNumColumns",
    "numColumns",
    "Error",
    "onAppear",
    "event",
    "forceRefresh",
    "onTableWidthChanged",
    "onVerticalScrollBarChanged",
    "onColumnWidthChanged",
    "onVisibilityChanged",
    "_getAvailableWidth",
    "tableColumnModel",
    "getTableColumnModel",
    "table",
    "getTable",
    "scrollerArr",
    "_getPaneScrollerArr",
    "getLayoutParent",
    "getBounds",
    "scrollerParentWidth",
    "width",
    "lastScroller",
    "length",
    "getPaneInsetRight",
    "ui",
    "columnmodel",
    "resizebehavior",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/resizebehavior/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * An abstract resize behavior.  All resize behaviors should extend this\r\n * class.\r\n */\r\nqx.Class.define(\"qx.ui.table.columnmodel.resizebehavior.Abstract\", {\r\n  type: \"abstract\",\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Called when the ResizeTableColumnModel is initialized, and upon loading of\r\n     * a new TableModel, to allow the Resize Behaviors to know how many columns\r\n     * are in use.\r\n     *\r\n     * @abstract\r\n     * @param numColumns {Integer} The number of columns in use.\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    _setNumColumns(numColumns) {\r\n      throw new Error(\"_setNumColumns is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Called when the table has first been rendered.\r\n     *\r\n     * @abstract\r\n     * @param event {var} The <i>onappear</i> event object.\r\n     * @param forceRefresh {Boolean?false} Whether a refresh should be forced\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    onAppear(event, forceRefresh) {\r\n      throw new Error(\"onAppear is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Called when the table width changes due to either a window size change\r\n     * or a parent object changing size causing the table to change size.\r\n     *\r\n     * @abstract\r\n     * @param event {var} The <i>tableWidthChanged</i> event object.\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    onTableWidthChanged(event) {\r\n      throw new Error(\"onTableWidthChanged is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Called when the use of vertical scroll bar in the table changes, either\r\n     * from present to not present, or vice versa.\r\n     *\r\n     * @abstract\r\n     * @param event {var} The <i>verticalScrollBarChanged</i> event object.  This event has data,\r\n     *     obtained via event.getValue(), which is a boolean indicating whether a\r\n     *     vertical scroll bar is now present.\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    onVerticalScrollBarChanged(event) {\r\n      throw new Error(\"onVerticalScrollBarChanged is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Called when a column width is changed.\r\n     *\r\n     * @abstract\r\n     * @param event {var} The <i>widthChanged</i> event object.  This event has data, obtained via\r\n     *     event.getValue(), which is an object with three properties: the column\r\n     *     which changed width (data.col), the old width (data.oldWidth) and the new\r\n     *     width (data.newWidth).\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    onColumnWidthChanged(event) {\r\n      throw new Error(\"onColumnWidthChanged is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Called when a column visibility is changed.\r\n     *\r\n     * @abstract\r\n     * @param event {var} The <i>visibilityChanged</i> event object.  This event has data, obtained\r\n     *     via event.getValue(), which is an object with two properties: the column\r\n     *     which changed width (data.col) and the new visibility of the column\r\n     *     (data.visible).\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    onVisibilityChanged(event) {\r\n      throw new Error(\"onVisibilityChanged is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Determine the inner width available to columns in the table.\r\n     *\r\n     * @return {Integer} The available width\r\n     */\r\n    _getAvailableWidth() {\r\n      var tableColumnModel = this.getTableColumnModel();\r\n\r\n      // Get the inner width off the table\r\n      var table = tableColumnModel.getTable();\r\n\r\n      var scrollerArr = table._getPaneScrollerArr();\r\n      if (!scrollerArr[0] || !scrollerArr[0].getLayoutParent().getBounds()) {\r\n        return null;\r\n      }\r\n      var scrollerParentWidth = scrollerArr[0]\r\n        .getLayoutParent()\r\n        .getBounds().width;\r\n\r\n      var lastScroller = scrollerArr[scrollerArr.length - 1];\r\n      scrollerParentWidth -= lastScroller.getPaneInsetRight();\r\n\r\n      return scrollerParentWidth;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,iDAAiD,EAAE;IACjEC,IAAI,EAAE,UAAU;IAChBC,MAAM,EAAEP,EAAE,CAACQ,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAACC,UAAU,EAAE;QACzB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAACC,KAAK,EAAEC,YAAY,EAAE;QAC5B,MAAM,IAAIH,KAAK,CAAC,sBAAsB,CAAC;MACzC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACII,mBAAmB,WAAAA,oBAACF,KAAK,EAAE;QACzB,MAAM,IAAIF,KAAK,CAAC,iCAAiC,CAAC;MACpD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,0BAA0B,WAAAA,2BAACH,KAAK,EAAE;QAChC,MAAM,IAAIF,KAAK,CAAC,wCAAwC,CAAC;MAC3D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,oBAAoB,WAAAA,qBAACJ,KAAK,EAAE;QAC1B,MAAM,IAAIF,KAAK,CAAC,kCAAkC,CAAC;MACrD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,mBAAmB,WAAAA,oBAACL,KAAK,EAAE;QACzB,MAAM,IAAIF,KAAK,CAAC,iCAAiC,CAAC;MACpD,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIQ,kBAAkB,WAAAA,mBAAA,EAAG;QACnB,IAAIC,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC;;QAEjD;QACA,IAAIC,KAAK,GAAGF,gBAAgB,CAACG,QAAQ,CAAC,CAAC;QAEvC,IAAIC,WAAW,GAAGF,KAAK,CAACG,mBAAmB,CAAC,CAAC;QAC7C,IAAI,CAACD,WAAW,CAAC,CAAC,CAAC,IAAI,CAACA,WAAW,CAAC,CAAC,CAAC,CAACE,eAAe,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE;UACpE,OAAO,IAAI;QACb;QACA,IAAIC,mBAAmB,GAAGJ,WAAW,CAAC,CAAC,CAAC,CACrCE,eAAe,CAAC,CAAC,CACjBC,SAAS,CAAC,CAAC,CAACE,KAAK;QAEpB,IAAIC,YAAY,GAAGN,WAAW,CAACA,WAAW,CAACO,MAAM,GAAG,CAAC,CAAC;QACtDH,mBAAmB,IAAIE,YAAY,CAACE,iBAAiB,CAAC,CAAC;QAEvD,OAAOJ,mBAAmB;MAC5B;IACF;EACF,CAAC,CAAC;EAzIF9B,EAAE,CAACmC,EAAE,CAACX,KAAK,CAACY,WAAW,CAACC,cAAc,CAACC,QAAQ,CAACnC,aAAa,GAAGA,aAAa;AAAC"
}