{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "columnmodel",
    "resizebehavior",
    "Abstract",
    "construct",
    "constructor",
    "call",
    "__resizeColumnData",
    "__layout",
    "layout",
    "HBox",
    "connectToWidget",
    "__deferredComputeColumnsFlexWidth",
    "util",
    "DeferredCall",
    "_computeColumnsFlexWidth",
    "properties",
    "newResizeBehaviorColumnData",
    "check",
    "init",
    "obj",
    "core",
    "ColumnData",
    "initializeWidthsOnEveryAppear",
    "tableColumnModel",
    "members",
    "__layoutChildren",
    "__widthsInitialized",
    "setWidth",
    "col",
    "width",
    "flex",
    "length",
    "Error",
    "setColumnWidth",
    "schedule",
    "setMinWidth",
    "setMaxWidth",
    "set",
    "map",
    "prop",
    "onAppear",
    "event",
    "forceRefresh",
    "getInitializeWidthsOnEveryAppear",
    "onTableWidthChanged",
    "onVerticalScrollBarChanged",
    "onColumnWidthChanged",
    "_extendNextColumn",
    "onVisibilityChanged",
    "data",
    "getData",
    "visible",
    "_extendLastColumn",
    "_setNumColumns",
    "numColumns",
    "colData",
    "splice",
    "i",
    "getNewResizeBehaviorColumnData",
    "columnNumber",
    "getLayoutChildren",
    "cancel",
    "_getAvailableWidth",
    "getTableColumnModel",
    "visibleColumns",
    "getVisibleColumns",
    "visibleColumnsLength",
    "l",
    "columns",
    "push",
    "__clearLayoutCaches",
    "renderLayout",
    "top",
    "right",
    "bottom",
    "left",
    "colWidth",
    "getComputedWidth",
    "__P_445_5",
    "invalidateChildrenCache",
    "children",
    "invalidateLayoutCache",
    "newWidth",
    "oldWidth",
    "nextCol",
    "widthUsed",
    "getColumnWidth",
    "lastCol",
    "_getResizeColumnData",
    "destruct",
    "_disposeObjects",
    "Default"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/resizebehavior/Default.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The default resize behavior.  Until a resize model is loaded, the default\r\n * behavior is to:\r\n * <ol>\r\n *   <li>\r\n *     Upon the table initially appearing, and upon any window resize, divide\r\n *     the table space equally between the visible columns.\r\n *   </li>\r\n *   <li>\r\n *     When a column is increased in width, all columns to its right are\r\n *     pushed to the right with no change to their widths.  This may push some\r\n *     columns off the right edge of the table, causing a horizontal scroll\r\n *     bar to appear.\r\n *   </li>\r\n *   <li>\r\n *     When a column is decreased in width, if the total width of all columns\r\n *     is <i>greater than</i> the table width, no additional column width\r\n *     change is made.\r\n *   </li>\r\n *   <li>\r\n *     When a column is decreased in width, if the total width of all columns\r\n *     is <i>less than</i> the table width, the visible column\r\n *     immediately to the right of the column which decreased in width has its\r\n *     width increased to fill the remaining space.\r\n *   </li>\r\n * </ol>\r\n *\r\n * A resize model may be loaded to provide more guidance on how to adjust\r\n * column width upon each of the events: initial appear, window resize, and\r\n * column resize. *** TO BE FILLED IN ***\r\n *\r\n * @require(qx.ui.core.ColumnData)\r\n */\r\nqx.Class.define(\"qx.ui.table.columnmodel.resizebehavior.Default\", {\r\n  extend: qx.ui.table.columnmodel.resizebehavior.Abstract,\r\n\r\n  construct() {\r\n    super();\r\n\r\n    this.__resizeColumnData = [];\r\n\r\n    // This layout is not connected to a widget but to this class. This class\r\n    // must implement the method \"getLayoutChildren\", which must return all\r\n    // columns (LayoutItems) which should be recalculated. The call\r\n    // \"layout.renderLayout\" will call the method \"renderLayout\" on each column\r\n    // data object\r\n    // The advantage of the use of the normal layout manager is that the\r\n    // semantics of flex and percent are exactly the same as in the widget code.\r\n    this.__layout = new qx.ui.layout.HBox();\r\n    this.__layout.connectToWidget(this);\r\n\r\n    this.__deferredComputeColumnsFlexWidth = new qx.util.DeferredCall(\r\n      this._computeColumnsFlexWidth,\r\n      this\r\n    );\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * A function to instantiate a resize behavior column data object.\r\n     */\r\n    newResizeBehaviorColumnData: {\r\n      check: \"Function\",\r\n      init(obj) {\r\n        return new qx.ui.core.ColumnData();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Whether to reinitialize default widths on each appear event.\r\n     * Typically, one would want to initialize the default widths only upon\r\n     * the first appearance of the table, but the original behavior was to\r\n     * reinitialize it even if the table is hidden and then reshown\r\n     * (e.g. it's in a pageview and the page is switched and then switched\r\n     * back).\r\n     */\r\n    initializeWidthsOnEveryAppear: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    },\r\n\r\n    /**\r\n     * The table column model in use.  Of particular interest is the method\r\n     * <i>getTable</i> which is a reference to the table widget.  This allows\r\n     * access to any other features of the table, for use in calculating widths\r\n     * of columns.\r\n     */\r\n    tableColumnModel: {\r\n      check: \"qx.ui.table.columnmodel.Resize\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __layout: null,\r\n    __layoutChildren: null,\r\n    __resizeColumnData: null,\r\n    __deferredComputeColumnsFlexWidth: null,\r\n\r\n    /**\r\n     * Whether we have initialized widths on the first appear yet\r\n     */\r\n    __widthsInitialized: false,\r\n\r\n    /**\r\n     * Set the width of a column.\r\n     *\r\n     * @param col {Integer} The column whose width is to be set\r\n     *\r\n     * @param width {Integer|String}\r\n     *   The width of the specified column.  The width may be specified as\r\n     *   integer number of pixels (e.g. 100), a string representing percentage\r\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\r\n     *   representing a flex width (e.g. \"1*\").\r\n     *\r\n     * @param flex {Integer?0} Optional flex value of the column\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    setWidth(col, width, flex) {\r\n      // Ensure the column is within range\r\n      if (col >= this.__resizeColumnData.length) {\r\n        throw new Error(\"Column number out of range\");\r\n      }\r\n\r\n      // Set the new width\r\n      this.__resizeColumnData[col].setColumnWidth(width, flex);\r\n      this.__deferredComputeColumnsFlexWidth.schedule();\r\n    },\r\n\r\n    /**\r\n     * Set the minimum width of a column.\r\n     *\r\n     * @param col {Integer}\r\n     *   The column whose minimum width is to be set\r\n     *\r\n     * @param width {Integer}\r\n     *   The minimum width of the specified column.\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    setMinWidth(col, width) {\r\n      // Ensure the column is within range\r\n      if (col >= this.__resizeColumnData.length) {\r\n        throw new Error(\"Column number out of range\");\r\n      }\r\n\r\n      // Set the new width\r\n      this.__resizeColumnData[col].setMinWidth(width);\r\n      this.__deferredComputeColumnsFlexWidth.schedule();\r\n    },\r\n\r\n    /**\r\n     * Set the maximum width of a column.\r\n     *\r\n     * @param col {Integer}\r\n     *   The column whose maximum width is to be set\r\n     *\r\n     * @param width {Integer}\r\n     *   The maximum width of the specified column.\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    setMaxWidth(col, width) {\r\n      // Ensure the column is within range\r\n      if (col >= this.__resizeColumnData.length) {\r\n        throw new Error(\"Column number out of range\");\r\n      }\r\n\r\n      // Set the new width\r\n      this.__resizeColumnData[col].setMaxWidth(width);\r\n      this.__deferredComputeColumnsFlexWidth.schedule();\r\n    },\r\n\r\n    /**\r\n     * Set any or all of the width, minimum width, and maximum width of a\r\n     * column in a single call.\r\n     *\r\n     * @param col {Integer}\r\n     *   The column whose attributes are to be changed\r\n     *\r\n     * @param map {Map}\r\n     *   A map containing any or all of the property names \"width\", \"minWidth\",\r\n     *   and \"maxWidth\".  The property values are as described for\r\n     *   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\r\n     *   respectively.\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    set(col, map) {\r\n      for (var prop in map) {\r\n        switch (prop) {\r\n          case \"width\":\r\n            this.setWidth(col, map[prop]);\r\n            break;\r\n\r\n          case \"minWidth\":\r\n            this.setMinWidth(col, map[prop]);\r\n            break;\r\n\r\n          case \"maxWidth\":\r\n            this.setMaxWidth(col, map[prop]);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(\"Unknown property: \" + prop);\r\n        }\r\n      }\r\n    },\r\n\r\n    // overloaded\r\n    onAppear(event, forceRefresh) {\r\n      // If we haven't initialized widths at least once, or\r\n      // they want us to reinitialize widths on every appear event...\r\n      if (\r\n        forceRefresh === true ||\r\n        !this.__widthsInitialized ||\r\n        this.getInitializeWidthsOnEveryAppear()\r\n      ) {\r\n        // Calculate column widths\r\n        this._computeColumnsFlexWidth();\r\n\r\n        // Track that we've initialized widths at least once\r\n        this.__widthsInitialized = true;\r\n      }\r\n    },\r\n\r\n    // overloaded\r\n    onTableWidthChanged(event) {\r\n      this._computeColumnsFlexWidth();\r\n    },\r\n\r\n    // overloaded\r\n    onVerticalScrollBarChanged(event) {\r\n      this._computeColumnsFlexWidth();\r\n    },\r\n\r\n    // overloaded\r\n    onColumnWidthChanged(event) {\r\n      // Extend the next column to fill blank space\r\n      this._extendNextColumn(event);\r\n    },\r\n\r\n    // overloaded\r\n    onVisibilityChanged(event) {\r\n      // Event data properties: col, visible\r\n      var data = event.getData();\r\n\r\n      // If a column just became visible, resize all columns.\r\n      if (data.visible) {\r\n        this._computeColumnsFlexWidth();\r\n        return;\r\n      }\r\n\r\n      // Extend the last column to fill blank space\r\n      this._extendLastColumn(event);\r\n    },\r\n\r\n    // overloaded\r\n    _setNumColumns(numColumns) {\r\n      var colData = this.__resizeColumnData;\r\n      // Are there now fewer (or the same number of) columns than there were\r\n      // previously?\r\n      if (numColumns <= colData.length) {\r\n        // Yup.  Delete the extras.\r\n        colData.splice(numColumns, colData.length);\r\n        return;\r\n      }\r\n\r\n      // There are more columns than there were previously.  Allocate more.\r\n      for (var i = colData.length; i < numColumns; i++) {\r\n        colData[i] = this.getNewResizeBehaviorColumnData()();\r\n        colData[i].columnNumber = i;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * This method is required by the box layout. If returns an array of items\r\n     * to relayout.\r\n     *\r\n     * @return {qx.ui.core.ColumnData[]} The list of column data object to layout.\r\n     */\r\n    getLayoutChildren() {\r\n      return this.__layoutChildren;\r\n    },\r\n\r\n    /**\r\n     * Computes the width of all flexible children.\r\n     *\r\n     */\r\n    _computeColumnsFlexWidth() {\r\n      this.__deferredComputeColumnsFlexWidth.cancel();\r\n      var width = this._getAvailableWidth();\r\n\r\n      if (width === null) {\r\n        return;\r\n      }\r\n\r\n      var tableColumnModel = this.getTableColumnModel();\r\n      var visibleColumns = tableColumnModel.getVisibleColumns();\r\n      var visibleColumnsLength = visibleColumns.length;\r\n      var colData = this.__resizeColumnData;\r\n      var i, l;\r\n\r\n      if (visibleColumnsLength === 0) {\r\n        return;\r\n      }\r\n\r\n      // Create an array of the visible columns\r\n      var columns = [];\r\n      for (i = 0; i < visibleColumnsLength; i++) {\r\n        columns.push(colData[visibleColumns[i]]);\r\n      }\r\n      this.__layoutChildren = columns;\r\n      this.__clearLayoutCaches();\r\n\r\n      // Use a horizontal box layout to determine the available width.\r\n      this.__layout.renderLayout(width, 100, {\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0\r\n      });\r\n\r\n      // Now that we've calculated the width, set it.\r\n      for (i = 0, l = columns.length; i < l; i++) {\r\n        var colWidth = columns[i].getComputedWidth();\r\n        tableColumnModel.setColumnWidth(visibleColumns[i], colWidth);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Clear all layout caches of the column datas.\r\n     */\r\n    __clearLayoutCaches() {\r\n      this.__layout.invalidateChildrenCache();\r\n      var children = this.__layoutChildren;\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        children[i].invalidateLayoutCache();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Extend the visible column to right of the column which just changed\r\n     * width, to fill any available space within the inner width of the table.\r\n     * This means that if the sum of the widths of all columns exceeds the\r\n     * inner width of the table, no change is made.  If, on the other hand,\r\n     * the sum of the widths of all columns is less than the inner width of\r\n     * the table, the visible column to the right of the column which just\r\n     * changed width is extended to take up the width available within the\r\n     * inner width of the table.\r\n     *\r\n     *\r\n     * @param event {qx.event.type.Data}\r\n     *   The event object.\r\n     *\r\n     */\r\n    _extendNextColumn(event) {\r\n      var tableColumnModel = this.getTableColumnModel();\r\n\r\n      // Event data properties: col, oldWidth, newWidth\r\n      var data = event.getData();\r\n\r\n      var visibleColumns = tableColumnModel.getVisibleColumns();\r\n\r\n      // Determine the available width\r\n      var width = this._getAvailableWidth();\r\n\r\n      // Determine the number of visible columns\r\n      var numColumns = visibleColumns.length;\r\n\r\n      // Did this column become longer than it was?\r\n      if (data.newWidth > data.oldWidth) {\r\n        // Yup.  Don't resize anything else.  The other columns will just get\r\n        // pushed off and require scrollbars be added (if not already there).\r\n        return;\r\n      }\r\n\r\n      // This column became shorter.  See if we no longer take up the full\r\n      // space that's available to us.\r\n      var i;\r\n      var nextCol;\r\n      var widthUsed = 0;\r\n\r\n      for (i = 0; i < numColumns; i++) {\r\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\r\n      }\r\n\r\n      // If the used width is less than the available width...\r\n      if (widthUsed < width) {\r\n        // ... then determine the next visible column\r\n        for (i = 0; i < visibleColumns.length; i++) {\r\n          if (visibleColumns[i] == data.col) {\r\n            nextCol = visibleColumns[i + 1];\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (nextCol) {\r\n          // Make the next column take up the available space.\r\n          var newWidth =\r\n            width - (widthUsed - tableColumnModel.getColumnWidth(nextCol));\r\n          tableColumnModel.setColumnWidth(nextCol, newWidth);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * If a column was just made invisible, extend the last column to fill any\r\n     * available space within the inner width of the table.  This means that\r\n     * if the sum of the widths of all columns exceeds the inner width of the\r\n     * table, no change is made.  If, on the other hand, the sum of the widths\r\n     * of all columns is less than the inner width of the table, the last\r\n     * column is extended to take up the width available within the inner\r\n     * width of the table.\r\n     *\r\n     *\r\n     * @param event {qx.event.type.Data}\r\n     *   The event object.\r\n     *\r\n     */\r\n    _extendLastColumn(event) {\r\n      var tableColumnModel = this.getTableColumnModel();\r\n\r\n      // Event data properties: col, visible\r\n      var data = event.getData();\r\n\r\n      // If the column just became visible, don't make any width changes\r\n      if (data.visible) {\r\n        return;\r\n      }\r\n\r\n      // Get the array of visible columns\r\n      var visibleColumns = tableColumnModel.getVisibleColumns();\r\n\r\n      // If no columns are visible...\r\n      if (visibleColumns.length == 0) {\r\n        return;\r\n      }\r\n\r\n      // Determine the available width\r\n      var width = this._getAvailableWidth(tableColumnModel);\r\n\r\n      // Determine the number of visible columns\r\n      var numColumns = visibleColumns.length;\r\n\r\n      // See if we no longer take up the full space that's available to us.\r\n      var i;\r\n      var lastCol;\r\n      var widthUsed = 0;\r\n\r\n      for (i = 0; i < numColumns; i++) {\r\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\r\n      }\r\n\r\n      // If the used width is less than the available width...\r\n      if (widthUsed < width) {\r\n        // ... then get the last visible column\r\n        lastCol = visibleColumns[visibleColumns.length - 1];\r\n\r\n        // Make the last column take up the available space.\r\n        var newWidth =\r\n          width - (widthUsed - tableColumnModel.getColumnWidth(lastCol));\r\n        tableColumnModel.setColumnWidth(lastCol, newWidth);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns an array of the resizing information of a column.\r\n     *\r\n     * @return {qx.ui.core.ColumnData[]} array of the resizing information of a column.\r\n     */\r\n    _getResizeColumnData() {\r\n      return this.__resizeColumnData;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this.__resizeColumnData = this.__layoutChildren = null;\r\n    this._disposeObjects(\"__layout\", \"__deferredComputeColumnsFlexWidth\");\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}