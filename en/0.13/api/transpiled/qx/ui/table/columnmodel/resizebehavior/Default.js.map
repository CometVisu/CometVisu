{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "columnmodel",
    "resizebehavior",
    "Abstract",
    "construct",
    "__resizeColumnData",
    "__layout",
    "layout",
    "HBox",
    "connectToWidget",
    "__deferredComputeColumnsFlexWidth",
    "util",
    "DeferredCall",
    "_computeColumnsFlexWidth",
    "properties",
    "newResizeBehaviorColumnData",
    "check",
    "init",
    "obj",
    "core",
    "ColumnData",
    "initializeWidthsOnEveryAppear",
    "tableColumnModel",
    "members",
    "__layoutChildren",
    "__widthsInitialized",
    "setWidth",
    "col",
    "width",
    "flex",
    "length",
    "Error",
    "setColumnWidth",
    "schedule",
    "setMinWidth",
    "setMaxWidth",
    "set",
    "map",
    "prop",
    "onAppear",
    "event",
    "forceRefresh",
    "getInitializeWidthsOnEveryAppear",
    "onTableWidthChanged",
    "onVerticalScrollBarChanged",
    "onColumnWidthChanged",
    "_extendNextColumn",
    "onVisibilityChanged",
    "data",
    "getData",
    "visible",
    "_extendLastColumn",
    "_setNumColumns",
    "numColumns",
    "colData",
    "splice",
    "i",
    "getNewResizeBehaviorColumnData",
    "columnNumber",
    "getLayoutChildren",
    "cancel",
    "_getAvailableWidth",
    "getTableColumnModel",
    "visibleColumns",
    "getVisibleColumns",
    "visibleColumnsLength",
    "l",
    "columns",
    "push",
    "__clearLayoutCaches",
    "renderLayout",
    "top",
    "right",
    "bottom",
    "left",
    "colWidth",
    "getComputedWidth",
    "invalidateChildrenCache",
    "children",
    "invalidateLayoutCache",
    "newWidth",
    "oldWidth",
    "nextCol",
    "widthUsed",
    "getColumnWidth",
    "lastCol",
    "_getResizeColumnData",
    "destruct",
    "_disposeObjects",
    "Default"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/resizebehavior/Default.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * The default resize behavior.  Until a resize model is loaded, the default\n * behavior is to:\n * <ol>\n *   <li>\n *     Upon the table initially appearing, and upon any window resize, divide\n *     the table space equally between the visible columns.\n *   </li>\n *   <li>\n *     When a column is increased in width, all columns to its right are\n *     pushed to the right with no change to their widths.  This may push some\n *     columns off the right edge of the table, causing a horizontal scroll\n *     bar to appear.\n *   </li>\n *   <li>\n *     When a column is decreased in width, if the total width of all columns\n *     is <i>greater than</i> the table width, no additional column width\n *     change is made.\n *   </li>\n *   <li>\n *     When a column is decreased in width, if the total width of all columns\n *     is <i>less than</i> the table width, the visible column\n *     immediately to the right of the column which decreased in width has its\n *     width increased to fill the remaining space.\n *   </li>\n * </ol>\n *\n * A resize model may be loaded to provide more guidance on how to adjust\n * column width upon each of the events: initial appear, window resize, and\n * column resize. *** TO BE FILLED IN ***\n *\n * @require(qx.ui.core.ColumnData)\n */\nqx.Class.define(\"qx.ui.table.columnmodel.resizebehavior.Default\", {\n  extend: qx.ui.table.columnmodel.resizebehavior.Abstract,\n\n  construct() {\n    super();\n\n    this.__resizeColumnData = [];\n\n    // This layout is not connected to a widget but to this class. This class\n    // must implement the method \"getLayoutChildren\", which must return all\n    // columns (LayoutItems) which should be recalculated. The call\n    // \"layout.renderLayout\" will call the method \"renderLayout\" on each column\n    // data object\n    // The advantage of the use of the normal layout manager is that the\n    // semantics of flex and percent are exactly the same as in the widget code.\n    this.__layout = new qx.ui.layout.HBox();\n    this.__layout.connectToWidget(this);\n\n    this.__deferredComputeColumnsFlexWidth = new qx.util.DeferredCall(\n      this._computeColumnsFlexWidth,\n      this\n    );\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * A function to instantiate a resize behavior column data object.\n     */\n    newResizeBehaviorColumnData: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.core.ColumnData();\n      }\n    },\n\n    /**\n     * Whether to reinitialize default widths on each appear event.\n     * Typically, one would want to initialize the default widths only upon\n     * the first appearance of the table, but the original behavior was to\n     * reinitialize it even if the table is hidden and then reshown\n     * (e.g. it's in a pageview and the page is switched and then switched\n     * back).\n     */\n    initializeWidthsOnEveryAppear: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * The table column model in use.  Of particular interest is the method\n     * <i>getTable</i> which is a reference to the table widget.  This allows\n     * access to any other features of the table, for use in calculating widths\n     * of columns.\n     */\n    tableColumnModel: {\n      check: \"qx.ui.table.columnmodel.Resize\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __layout: null,\n    __layoutChildren: null,\n    __resizeColumnData: null,\n    __deferredComputeColumnsFlexWidth: null,\n\n    /**\n     * Whether we have initialized widths on the first appear yet\n     */\n    __widthsInitialized: false,\n\n    /**\n     * Set the width of a column.\n     *\n     * @param col {Integer} The column whose width is to be set\n     *\n     * @param width {Integer|String}\n     *   The width of the specified column.  The width may be specified as\n     *   integer number of pixels (e.g. 100), a string representing percentage\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\n     *   representing a flex width (e.g. \"1*\").\n     *\n     * @param flex {Integer?0} Optional flex value of the column\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setWidth(col, width, flex) {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setColumnWidth(width, flex);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n    /**\n     * Set the minimum width of a column.\n     *\n     * @param col {Integer}\n     *   The column whose minimum width is to be set\n     *\n     * @param width {Integer}\n     *   The minimum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMinWidth(col, width) {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setMinWidth(width);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n    /**\n     * Set the maximum width of a column.\n     *\n     * @param col {Integer}\n     *   The column whose maximum width is to be set\n     *\n     * @param width {Integer}\n     *   The maximum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMaxWidth(col, width) {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setMaxWidth(width);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n    /**\n     * Set any or all of the width, minimum width, and maximum width of a\n     * column in a single call.\n     *\n     * @param col {Integer}\n     *   The column whose attributes are to be changed\n     *\n     * @param map {Map}\n     *   A map containing any or all of the property names \"width\", \"minWidth\",\n     *   and \"maxWidth\".  The property values are as described for\n     *   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n     *   respectively.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    set(col, map) {\n      for (var prop in map) {\n        switch (prop) {\n          case \"width\":\n            this.setWidth(col, map[prop]);\n            break;\n\n          case \"minWidth\":\n            this.setMinWidth(col, map[prop]);\n            break;\n\n          case \"maxWidth\":\n            this.setMaxWidth(col, map[prop]);\n            break;\n\n          default:\n            throw new Error(\"Unknown property: \" + prop);\n        }\n      }\n    },\n\n    // overloaded\n    onAppear(event, forceRefresh) {\n      // If we haven't initialized widths at least once, or\n      // they want us to reinitialize widths on every appear event...\n      if (\n        forceRefresh === true ||\n        !this.__widthsInitialized ||\n        this.getInitializeWidthsOnEveryAppear()\n      ) {\n        // Calculate column widths\n        this._computeColumnsFlexWidth();\n\n        // Track that we've initialized widths at least once\n        this.__widthsInitialized = true;\n      }\n    },\n\n    // overloaded\n    onTableWidthChanged(event) {\n      this._computeColumnsFlexWidth();\n    },\n\n    // overloaded\n    onVerticalScrollBarChanged(event) {\n      this._computeColumnsFlexWidth();\n    },\n\n    // overloaded\n    onColumnWidthChanged(event) {\n      // Extend the next column to fill blank space\n      this._extendNextColumn(event);\n    },\n\n    // overloaded\n    onVisibilityChanged(event) {\n      // Event data properties: col, visible\n      var data = event.getData();\n\n      // If a column just became visible, resize all columns.\n      if (data.visible) {\n        this._computeColumnsFlexWidth();\n        return;\n      }\n\n      // Extend the last column to fill blank space\n      this._extendLastColumn(event);\n    },\n\n    // overloaded\n    _setNumColumns(numColumns) {\n      var colData = this.__resizeColumnData;\n      // Are there now fewer (or the same number of) columns than there were\n      // previously?\n      if (numColumns <= colData.length) {\n        // Yup.  Delete the extras.\n        colData.splice(numColumns, colData.length);\n        return;\n      }\n\n      // There are more columns than there were previously.  Allocate more.\n      for (var i = colData.length; i < numColumns; i++) {\n        colData[i] = this.getNewResizeBehaviorColumnData()();\n        colData[i].columnNumber = i;\n      }\n    },\n\n    /**\n     * This method is required by the box layout. If returns an array of items\n     * to relayout.\n     *\n     * @return {qx.ui.core.ColumnData[]} The list of column data object to layout.\n     */\n    getLayoutChildren() {\n      return this.__layoutChildren;\n    },\n\n    /**\n     * Computes the width of all flexible children.\n     *\n     */\n    _computeColumnsFlexWidth() {\n      this.__deferredComputeColumnsFlexWidth.cancel();\n      var width = this._getAvailableWidth();\n\n      if (width === null) {\n        return;\n      }\n\n      var tableColumnModel = this.getTableColumnModel();\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n      var visibleColumnsLength = visibleColumns.length;\n      var colData = this.__resizeColumnData;\n      var i, l;\n\n      if (visibleColumnsLength === 0) {\n        return;\n      }\n\n      // Create an array of the visible columns\n      var columns = [];\n      for (i = 0; i < visibleColumnsLength; i++) {\n        columns.push(colData[visibleColumns[i]]);\n      }\n      this.__layoutChildren = columns;\n      this.__clearLayoutCaches();\n\n      // Use a horizontal box layout to determine the available width.\n      this.__layout.renderLayout(width, 100, {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      });\n\n      // Now that we've calculated the width, set it.\n      for (i = 0, l = columns.length; i < l; i++) {\n        var colWidth = columns[i].getComputedWidth();\n        tableColumnModel.setColumnWidth(visibleColumns[i], colWidth);\n      }\n    },\n\n    /**\n     * Clear all layout caches of the column datas.\n     */\n    __clearLayoutCaches() {\n      this.__layout.invalidateChildrenCache();\n      var children = this.__layoutChildren;\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].invalidateLayoutCache();\n      }\n    },\n\n    /**\n     * Extend the visible column to right of the column which just changed\n     * width, to fill any available space within the inner width of the table.\n     * This means that if the sum of the widths of all columns exceeds the\n     * inner width of the table, no change is made.  If, on the other hand,\n     * the sum of the widths of all columns is less than the inner width of\n     * the table, the visible column to the right of the column which just\n     * changed width is extended to take up the width available within the\n     * inner width of the table.\n     *\n     *\n     * @param event {qx.event.type.Data}\n     *   The event object.\n     *\n     */\n    _extendNextColumn(event) {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Event data properties: col, oldWidth, newWidth\n      var data = event.getData();\n\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n\n      // Determine the available width\n      var width = this._getAvailableWidth();\n\n      // Determine the number of visible columns\n      var numColumns = visibleColumns.length;\n\n      // Did this column become longer than it was?\n      if (data.newWidth > data.oldWidth) {\n        // Yup.  Don't resize anything else.  The other columns will just get\n        // pushed off and require scrollbars be added (if not already there).\n        return;\n      }\n\n      // This column became shorter.  See if we no longer take up the full\n      // space that's available to us.\n      var i;\n      var nextCol;\n      var widthUsed = 0;\n\n      for (i = 0; i < numColumns; i++) {\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\n      }\n\n      // If the used width is less than the available width...\n      if (widthUsed < width) {\n        // ... then determine the next visible column\n        for (i = 0; i < visibleColumns.length; i++) {\n          if (visibleColumns[i] == data.col) {\n            nextCol = visibleColumns[i + 1];\n            break;\n          }\n        }\n\n        if (nextCol) {\n          // Make the next column take up the available space.\n          var newWidth =\n            width - (widthUsed - tableColumnModel.getColumnWidth(nextCol));\n          tableColumnModel.setColumnWidth(nextCol, newWidth);\n        }\n      }\n    },\n\n    /**\n     * If a column was just made invisible, extend the last column to fill any\n     * available space within the inner width of the table.  This means that\n     * if the sum of the widths of all columns exceeds the inner width of the\n     * table, no change is made.  If, on the other hand, the sum of the widths\n     * of all columns is less than the inner width of the table, the last\n     * column is extended to take up the width available within the inner\n     * width of the table.\n     *\n     *\n     * @param event {qx.event.type.Data}\n     *   The event object.\n     *\n     */\n    _extendLastColumn(event) {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Event data properties: col, visible\n      var data = event.getData();\n\n      // If the column just became visible, don't make any width changes\n      if (data.visible) {\n        return;\n      }\n\n      // Get the array of visible columns\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n\n      // If no columns are visible...\n      if (visibleColumns.length == 0) {\n        return;\n      }\n\n      // Determine the available width\n      var width = this._getAvailableWidth(tableColumnModel);\n\n      // Determine the number of visible columns\n      var numColumns = visibleColumns.length;\n\n      // See if we no longer take up the full space that's available to us.\n      var i;\n      var lastCol;\n      var widthUsed = 0;\n\n      for (i = 0; i < numColumns; i++) {\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\n      }\n\n      // If the used width is less than the available width...\n      if (widthUsed < width) {\n        // ... then get the last visible column\n        lastCol = visibleColumns[visibleColumns.length - 1];\n\n        // Make the last column take up the available space.\n        var newWidth =\n          width - (widthUsed - tableColumnModel.getColumnWidth(lastCol));\n        tableColumnModel.setColumnWidth(lastCol, newWidth);\n      }\n    },\n\n    /**\n     * Returns an array of the resizing information of a column.\n     *\n     * @return {qx.ui.core.ColumnData[]} array of the resizing information of a column.\n     */\n    _getResizeColumnData() {\n      return this.__resizeColumnData;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__resizeColumnData = this.__layoutChildren = null;\n    this._disposeObjects(\"__layout\", \"__deferredComputeColumnsFlexWidth\");\n  }\n});\n"
  ],
  "mappings": "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"
}