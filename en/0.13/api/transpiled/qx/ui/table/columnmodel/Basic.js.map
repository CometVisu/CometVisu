{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "__overallColumnArr",
    "__visibleColumnArr",
    "events",
    "widthChanged",
    "visibilityChangedPre",
    "visibilityChanged",
    "orderChanged",
    "headerCellRendererChanged",
    "statics",
    "DEFAULT_WIDTH",
    "DEFAULT_HEADER_RENDERER",
    "ui",
    "table",
    "headerrenderer",
    "Default",
    "DEFAULT_DATA_RENDERER",
    "cellrenderer",
    "DEFAULT_EDITOR_FACTORY",
    "celleditor",
    "TextField",
    "members",
    "__internalChange",
    "__colToXPosMap",
    "__columnDataArr",
    "__headerRenderer",
    "__dataRenderer",
    "__editorFactory",
    "init",
    "colCount",
    "width",
    "columnmodel",
    "Basic",
    "headerRenderer",
    "dataRenderer",
    "editorFactory",
    "initiallyHiddenColumns",
    "getInitiallyHiddenColumns",
    "col",
    "hidden",
    "length",
    "setColumnVisible",
    "data",
    "visible",
    "isColumnVisible",
    "fireDataEvent",
    "getVisibleColumns",
    "setColumnWidth",
    "isPointerAction",
    "oldWidth",
    "newWidth",
    "getColumnWidth",
    "setHeaderCellRenderer",
    "renderer",
    "oldRenderer",
    "dispose",
    "setHeaderCellRenderers",
    "renderers",
    "cols",
    "keys",
    "getHeaderCellRenderer",
    "setDataCellRenderer",
    "getDataCellRenderer",
    "setCellEditorFactory",
    "factory",
    "oldFactory",
    "getCellEditorFactory",
    "_getColToXPosMap",
    "overX",
    "visX",
    "getVisibleColumnCount",
    "getVisibleColumnAtX",
    "visXPos",
    "getVisibleX",
    "getOverallColumnCount",
    "getOverallColumnAtX",
    "overXPos",
    "getOverallX",
    "colToXPosMap",
    "Error",
    "nextVisX",
    "x",
    "currCol",
    "currVisX",
    "splice",
    "moveColumn",
    "fromOverXPos",
    "toOverXPos",
    "setColumnsOrder",
    "newPositions",
    "isVisible",
    "Array",
    "colIdx",
    "lang",
    "clone",
    "destruct",
    "i",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/Basic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A model that contains all meta data about columns, such as width, renderer,\n * visibility and order.\n *\n * @see qx.ui.table.ITableModel\n */\nqx.Class.define(\"qx.ui.table.columnmodel.Basic\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    this.__overallColumnArr = [];\n    this.__visibleColumnArr = [];\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the width of a column has changed. The data property of the event is\n     * a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column the width of which has changed.</li>\n     *   <li>newWidth: The new width of the column in pixels.</li>\n     *   <li>oldWidth: The old width of the column in pixels.</li>\n     * </ul>\n     */\n    widthChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the visibility of a column has changed. This event is equal to\n     * \"visibilityChanged\", but is fired right before.\n     */\n    visibilityChangedPre: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the visibility of a column has changed. The data property of the\n     * event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column the visibility of which has changed.</li>\n     *   <li>visible: Whether the column is now visible.</li>\n     * </ul>\n     */\n    visibilityChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the column order has changed. The data property of the\n     * event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column that was moved.</li>\n     *   <li>fromOverXPos: The old overall x position of the column.</li>\n     *   <li>toOverXPos: The new overall x position of the column.</li>\n     * </ul>\n     */\n    orderChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the cell renderer of a column has changed.\n     * The data property of the event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column that was moved.</li>\n     * </ul>\n     */\n    headerCellRendererChanged: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} the default width of a column in pixels. */\n    DEFAULT_WIDTH: 100,\n\n    /** @type {qx.ui.table.headerrenderer.Default} the default header cell renderer. */\n    DEFAULT_HEADER_RENDERER: qx.ui.table.headerrenderer.Default,\n\n    /** @type {qx.ui.table.cellrenderer.Default} the default data cell renderer. */\n    DEFAULT_DATA_RENDERER: qx.ui.table.cellrenderer.Default,\n\n    /** @type {qx.ui.table.celleditor.TextField} the default editor factory. */\n    DEFAULT_EDITOR_FACTORY: qx.ui.table.celleditor.TextField\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __internalChange: null,\n    __colToXPosMap: null,\n    __visibleColumnArr: null,\n    __overallColumnArr: null,\n    __columnDataArr: null,\n\n    __headerRenderer: null,\n    __dataRenderer: null,\n    __editorFactory: null,\n\n    /**\n     * Initializes the column model.\n     *\n     * @param colCount {Integer}\n     *   The number of columns the model should have.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this column model is attached.\n     */\n    init(colCount, table) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(colCount, \"Invalid argument 'colCount'.\");\n      }\n\n      this.__columnDataArr = [];\n\n      var width = qx.ui.table.columnmodel.Basic.DEFAULT_WIDTH;\n      var headerRenderer =\n        this.__headerRenderer ||\n        (this.__headerRenderer =\n          new qx.ui.table.columnmodel.Basic.DEFAULT_HEADER_RENDERER());\n      var dataRenderer =\n        this.__dataRenderer ||\n        (this.__dataRenderer =\n          new qx.ui.table.columnmodel.Basic.DEFAULT_DATA_RENDERER());\n      var editorFactory =\n        this.__editorFactory ||\n        (this.__editorFactory =\n          new qx.ui.table.columnmodel.Basic.DEFAULT_EDITOR_FACTORY());\n      this.__overallColumnArr = [];\n      this.__visibleColumnArr = [];\n\n      // Get the initially hidden column array, if one was provided. Older\n      // subclasses may not provide the 'table' argument, so we treat them\n      // traditionally with no initially hidden columns.\n      var initiallyHiddenColumns;\n\n      // Was a table provided to us?\n      if (table) {\n        // Yup. Get its list of initially hidden columns, if the user provided\n        // such a list.\n        initiallyHiddenColumns = table.getInitiallyHiddenColumns();\n      }\n\n      // If no table was specified, or if the user didn't provide a list of\n      // initially hidden columns, use an empty list.\n      initiallyHiddenColumns = initiallyHiddenColumns || [];\n\n      for (var col = 0; col < colCount; col++) {\n        this.__columnDataArr[col] = {\n          width: width,\n          headerRenderer: headerRenderer,\n          dataRenderer: dataRenderer,\n          editorFactory: editorFactory\n        };\n\n        this.__overallColumnArr[col] = col;\n        this.__visibleColumnArr[col] = col;\n      }\n\n      this.__colToXPosMap = null;\n\n      // If any columns are initially hidden, hide them now. Make it an\n      // internal change so that events are not generated.\n      this.__internalChange = true;\n      for (var hidden = 0; hidden < initiallyHiddenColumns.length; hidden++) {\n        this.setColumnVisible(initiallyHiddenColumns[hidden], false);\n      }\n      this.__internalChange = false;\n\n      for (col = 0; col < colCount; col++) {\n        var data = {\n          col: col,\n          visible: this.isColumnVisible(col)\n        };\n\n        this.fireDataEvent(\"visibilityChangedPre\", data);\n        this.fireDataEvent(\"visibilityChanged\", data);\n      }\n    },\n\n    /**\n     * Return the array of visible columns\n     *\n     * @return {Array} List of all visible columns\n     */\n    getVisibleColumns() {\n      return this.__visibleColumnArr != null ? this.__visibleColumnArr : [];\n    },\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer}\n     *   The model index of the column.\n     *\n     * @param width {Integer}\n     *   The new width the column should get in pixels.\n     *\n     * @param isPointerAction {Boolean}\n     *   <i>true</i> if the column width is being changed as a result of a\n     *   pointer drag in the header; false or undefined otherwise.\n     *\n     */\n    setColumnWidth(col, width, isPointerAction) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInteger(width, \"Invalid argument 'width'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldWidth = this.__columnDataArr[col].width;\n\n      if (oldWidth != width) {\n        this.__columnDataArr[col].width = width;\n\n        var data = {\n          col: col,\n          newWidth: width,\n          oldWidth: oldWidth,\n          isPointerAction: isPointerAction || false\n        };\n\n        this.fireDataEvent(\"widthChanged\", data);\n      }\n    },\n\n    /**\n     * Returns the width of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the width of the column in pixels.\n     */\n    getColumnWidth(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].width;\n    },\n\n    /**\n     * Sets the header renderer of a column. Use setHeaderCellRenderers\n     * instead of this method if you want to set the header renderer of many\n     * columns.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param renderer {qx.ui.table.IHeaderRenderer} the new header renderer the column\n     *      should get.\n     */\n    setHeaderCellRenderer(col, renderer) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(\n          renderer,\n          qx.ui.table.IHeaderRenderer,\n          \"Invalid argument 'renderer'.\"\n        );\n\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldRenderer = this.__columnDataArr[col].headerRenderer;\n      if (oldRenderer !== this.__headerRenderer) {\n        oldRenderer.dispose();\n      }\n\n      this.__columnDataArr[col].headerRenderer = renderer;\n      if (!this.__internalChange) {\n        this.fireDataEvent(\"headerCellRendererChanged\", { col: col });\n      }\n    },\n\n    /**\n     * Sets the header renderer of one or more columns. Use this method, in\n     * favor of setHeaderCellRenderer, if you want to set the header renderer\n     * of many columns. This method fires the \"headerCellRendererChanged\"\n     * event only once, after setting all renderers, whereas\n     * setHeaderCellRenderer fires it for each changed renderer which can be\n     * slow with many columns.\n     *\n     * @param renderers {Map}\n     *   Map, where the keys are column numbers and values are the renderers,\n     *   implementing qx.ui.table.IHeaderRenderer, of the the new header\n     *   renderers for that column\n     */\n    setHeaderCellRenderers(renderers) {\n      var col;\n\n      // Prevent firing \"headerCellRendererChanged\" for each column. Instead,\n      // we'll fire it once at the end.\n      this.__internalChange = true;\n\n      // For each listed column...\n      for (col in renderers) {\n        // ... set that column's renderer\n        this.setHeaderCellRenderer(+col, renderers[col]);\n      }\n\n      // Turn off the internal-change flag so operation returns to normal\n      this.__internalChange = false;\n\n      // Now we can fire the event once. The data indicates which columns\n      // changed. Internally to qooxdoo, nothing cares about the event data.\n      this.fireDataEvent(\"headerCellRendererChanged\", {\n        cols: Object.keys(renderers)\n      });\n    },\n\n    /**\n     * Returns the header renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.IHeaderRenderer} the header renderer of the column.\n     */\n    getHeaderCellRenderer(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].headerRenderer;\n    },\n\n    /**\n     * Sets the data renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param renderer {qx.ui.table.ICellRenderer} the new data renderer\n     *   the column should get.\n     * @return {qx.ui.table.ICellRenderer?null} If an old renderer was set and\n     *   it was not the default renderer, the old renderer is returned for\n     *   pooling or disposing.\n     */\n    setDataCellRenderer(col, renderer) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(\n          renderer,\n          qx.ui.table.ICellRenderer,\n          \"Invalid argument 'renderer'.\"\n        );\n\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldRenderer = this.__columnDataArr[col].dataRenderer;\n      this.__columnDataArr[col].dataRenderer = renderer;\n\n      if (oldRenderer !== this.__dataRenderer) {\n        return oldRenderer;\n      }\n      return null;\n    },\n\n    /**\n     * Returns the data renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.ICellRenderer} the data renderer of the column.\n     */\n    getDataCellRenderer(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].dataRenderer;\n    },\n\n    /**\n     * Sets the cell editor factory of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param factory {qx.ui.table.ICellEditorFactory} the new cell editor factory the column should get.\n     */\n    setCellEditorFactory(col, factory) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(\n          factory,\n          qx.ui.table.ICellEditorFactory,\n          \"Invalid argument 'factory'.\"\n        );\n\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldFactory = this.__columnDataArr[col].editorFactory;\n      if (oldFactory === factory) {\n        return;\n      }\n      if (oldFactory !== this.__editorFactory) {\n        oldFactory.dispose();\n      }\n\n      this.__columnDataArr[col].editorFactory = factory;\n    },\n\n    /**\n     * Returns the cell editor factory of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.ICellEditorFactory} the cell editor factory of the column.\n     */\n    getCellEditorFactory(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].editorFactory;\n    },\n\n    /**\n     * Returns the map that translates model indexes to x positions.\n     *\n     * The returned map contains for a model index (int) a map having two\n     * properties: overX (the overall x position of the column, int) and\n     * visX (the visible x position of the column, int). visX is missing for\n     * hidden columns.\n     *\n     * @return {Map} the \"column to x position\" map.\n     */\n    _getColToXPosMap() {\n      if (this.__colToXPosMap == null) {\n        this.__colToXPosMap = {};\n\n        for (var overX = 0; overX < this.__overallColumnArr.length; overX++) {\n          var col = this.__overallColumnArr[overX];\n          this.__colToXPosMap[col] = { overX: overX };\n        }\n\n        for (var visX = 0; visX < this.__visibleColumnArr.length; visX++) {\n          var col = this.__visibleColumnArr[visX];\n          this.__colToXPosMap[col].visX = visX;\n        }\n      }\n\n      return this.__colToXPosMap;\n    },\n\n    /**\n     * Returns the number of visible columns.\n     *\n     * @return {Integer} the number of visible columns.\n     */\n    getVisibleColumnCount() {\n      return this.__visibleColumnArr != null\n        ? this.__visibleColumnArr.length\n        : 0;\n    },\n\n    /**\n     * Returns the model index of a column at a certain visible x position.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getVisibleColumnAtX(visXPos) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(visXPos, \"Invalid argument 'visXPos'.\");\n      }\n\n      return this.__visibleColumnArr[visXPos];\n    },\n\n    /**\n     * Returns the visible x position of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the visible x position of the column.\n     */\n    getVisibleX(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].visX;\n    },\n\n    /**\n     * Returns the overall number of columns (including hidden columns).\n     *\n     * @return {Integer} the overall number of columns.\n     */\n    getOverallColumnCount() {\n      return this.__overallColumnArr.length;\n    },\n\n    /**\n     * Returns the model index of a column at a certain overall x position.\n     *\n     * @param overXPos {Integer} the overall x position of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getOverallColumnAtX(overXPos) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(overXPos, \"Invalid argument 'overXPos'.\");\n      }\n\n      return this.__overallColumnArr[overXPos];\n    },\n\n    /**\n     * Returns the overall x position of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the overall x position of the column.\n     */\n    getOverallX(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].overX;\n    },\n\n    /**\n     * Returns whether a certain column is visible.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Boolean} whether the column is visible.\n     */\n    isColumnVisible(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].visX != null;\n    },\n\n    /**\n     * Sets whether a certain column is visible.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param visible {Boolean} whether the column should be visible.\n     */\n    setColumnVisible(col, visible) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertBoolean(visible, \"Invalid argument 'visible'.\");\n      }\n\n      if (visible != this.isColumnVisible(col)) {\n        if (visible) {\n          var colToXPosMap = this._getColToXPosMap();\n\n          var overX = colToXPosMap[col].overX;\n\n          if (overX == null) {\n            throw new Error(\n              \"Showing column failed: \" +\n                col +\n                \". The column is not added to this TablePaneModel.\"\n            );\n          }\n\n          // get the visX of the next visible column after the column to show\n          var nextVisX;\n\n          for (var x = overX + 1; x < this.__overallColumnArr.length; x++) {\n            var currCol = this.__overallColumnArr[x];\n            var currVisX = colToXPosMap[currCol].visX;\n\n            if (currVisX != null) {\n              nextVisX = currVisX;\n              break;\n            }\n          }\n\n          // If there comes no visible column any more, then show the column\n          // at the end\n          if (nextVisX == null) {\n            nextVisX = this.__visibleColumnArr.length;\n          }\n\n          // Add the column to the visible columns\n          this.__visibleColumnArr.splice(nextVisX, 0, col);\n        } else {\n          var visX = this.getVisibleX(col);\n          this.__visibleColumnArr.splice(visX, 1);\n        }\n\n        // Invalidate the __colToXPosMap\n        this.__colToXPosMap = null;\n\n        // Inform the listeners\n        if (!this.__internalChange) {\n          var data = {\n            col: col,\n            visible: visible\n          };\n\n          this.fireDataEvent(\"visibilityChangedPre\", data);\n          this.fireDataEvent(\"visibilityChanged\", data);\n        }\n      }\n    },\n\n    /**\n     * Moves a column.\n     *\n     * @param fromOverXPos {Integer} the overall x position of the column to move.\n     * @param toOverXPos {Integer} the overall x position of where the column should be\n     *      moved to.\n     */\n    moveColumn(fromOverXPos, toOverXPos) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(fromOverXPos, \"Invalid argument 'fromOverXPos'.\");\n        this.assertInteger(toOverXPos, \"Invalid argument 'toOverXPos'.\");\n      }\n\n      this.__internalChange = true;\n\n      var col = this.__overallColumnArr[fromOverXPos];\n      var visible = this.isColumnVisible(col);\n\n      if (visible) {\n        this.setColumnVisible(col, false);\n      }\n\n      this.__overallColumnArr.splice(fromOverXPos, 1);\n      this.__overallColumnArr.splice(toOverXPos, 0, col);\n\n      // Invalidate the __colToXPosMap\n      this.__colToXPosMap = null;\n\n      if (visible) {\n        this.setColumnVisible(col, true);\n      }\n      this.__internalChange = false;\n\n      // Inform the listeners\n      var data = {\n        col: col,\n        fromOverXPos: fromOverXPos,\n        toOverXPos: toOverXPos\n      };\n\n      this.fireDataEvent(\"orderChanged\", data);\n    },\n\n    /**\n     * Reorders all columns to new overall positions. Will fire one \"orderChanged\" event\n     * without data afterwards\n     *\n     * @param newPositions {Integer[]} Array mapping the index of a column in table model to its wanted overall\n     *                            position on screen (both zero based). If the table models holds\n     *                            col0, col1, col2 and col3 and you give [1,3,2,0], the new column order\n     *                            will be col1, col3, col2, col0\n     */\n    setColumnsOrder(newPositions) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArray(newPositions, \"Invalid argument 'newPositions'.\");\n      }\n\n      if (newPositions.length == this.__overallColumnArr.length) {\n        this.__internalChange = true;\n\n        // Go through each column an switch visible ones to invisible. Reason is unknown,\n        // this just mimicks the behaviour of moveColumn. Possibly useful because setting\n        // a column visible later updates a map with its screen coords.\n        var isVisible = new Array(newPositions.length);\n        for (\n          var colIdx = 0;\n          colIdx < this.__overallColumnArr.length;\n          colIdx++\n        ) {\n          var visible = this.isColumnVisible(colIdx);\n          isVisible[colIdx] = visible; //Remember, as this relies on this.__colToXPosMap which is cleared below\n          if (visible) {\n            this.setColumnVisible(colIdx, false);\n          }\n        }\n\n        // Store new position values\n        this.__overallColumnArr = qx.lang.Array.clone(newPositions);\n\n        // Invalidate the __colToXPosMap\n        this.__colToXPosMap = null;\n\n        // Go through each column an switch invisible ones back to visible\n        for (\n          var colIdx = 0;\n          colIdx < this.__overallColumnArr.length;\n          colIdx++\n        ) {\n          if (isVisible[colIdx]) {\n            this.setColumnVisible(colIdx, true);\n          }\n        }\n        this.__internalChange = false;\n\n        // Inform the listeners. Do not add data as all known listeners in qooxdoo\n        // only take this event to mean \"total repaint necesscary\". Fabian will look\n        // after deprecating the data part of the orderChanged - event\n        this.fireDataEvent(\"orderChanged\");\n      } else {\n        throw new Error(\n          \"setColumnsOrder: Invalid number of column positions given, expected \" +\n            this.__overallColumnArr.length +\n            \", got \" +\n            newPositions.length\n        );\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    for (var i = 0; i < this.__columnDataArr.length; i++) {\n      this.__columnDataArr[i].headerRenderer.dispose();\n      this.__columnDataArr[i].dataRenderer.dispose();\n      this.__columnDataArr[i].editorFactory.dispose();\n    }\n\n    this.__overallColumnArr =\n      this.__visibleColumnArr =\n      this.__columnDataArr =\n      this.__colToXPosMap =\n        null;\n\n    this._disposeObjects(\n      \"__headerRenderer\",\n      \"__dataRenderer\",\n      \"__editorFactory\"\n    );\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}