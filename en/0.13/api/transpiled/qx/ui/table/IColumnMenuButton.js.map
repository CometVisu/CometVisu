{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "properties",
    "menu",
    "members",
    "factory",
    "item",
    "options",
    "empty",
    "ui",
    "table",
    "IColumnMenuButton"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/IColumnMenuButton.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Interface for creating the column visibility menu\n */\nqx.Interface.define(\"qx.ui.table.IColumnMenuButton\", {\n  properties: {\n    /**\n     * The menu which is displayed when this button is pressed.\n     */\n    menu: {}\n  },\n\n  members: {\n    /**\n     * Instantiate a sub-widget.\n     *\n     * @param item {String}\n     *   One of the following strings, indicating what type of\n     *   column-menu-specific object to instantiate:\n     *   <dl>\n     *     <dt>menu</dt>\n     *     <dd>\n     *       Instantiate a menu which will appear when the column visibility\n     *       button is pressed. No options are provided in this case.\n     *     </dd>\n     *     <dt>menu-button</dt>\n     *     <dd>\n     *       Instantiate a button to correspond to a column within the\n     *       table. The options are a map containing <i>text</i>, the name of\n     *       the column; <i>column</i>, the column number; and\n     *       <i>bVisible</i>, a boolean indicating whether this column is\n     *       currently visible. The instantiated return object must implement\n     *       interface {@link qx.ui.table.IColumnMenuItem}\n     *     </dd>\n     *     <dt>user-button</dt>\n     *     <dd>\n     *       Instantiate a button for other than a column name. This is used,\n     *       for example, to add the \"Reset column widths\" button when the\n     *       Resize column model is requested. The options is a map containing\n     *       <i>text</i>, the text to present in the button.\n     *     </dd>\n     *     <dt>separator</dt>\n     *     <dd>\n     *       Instantiate a separator object to added to the menu. This is\n     *       used, for example, to separate the table column name list from\n     *       the \"Reset column widths\" button when the Resize column model is\n     *       requested. No options are provided in this case.\n     *     </dd>\n     *   </dl>\n     *\n     * @param options {Map}\n     *   Options specific to the <i>item</i> being requested.\n     *\n     * @return {qx.ui.core.Widget}\n     *   The instantiated object as specified by <i>item</i>.\n     */\n    factory(item, options) {\n      return true;\n    },\n\n    /**\n     * Empty the menu of all items, in preparation for building a new column\n     * visibility menu.\n     *\n     */\n    empty() {\n      return true;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,+BAApB,EAAqD;IACnDC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,IAAI,EAAE;IAJI,CADuC;IAQnDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OA5CO,mBA4CCC,IA5CD,EA4COC,OA5CP,EA4CgB;QACrB,OAAO,IAAP;MACD,CA9CM;;MAgDP;AACJ;AACA;AACA;AACA;MACIC,KArDO,mBAqDC;QACN,OAAO,IAAP;MACD;IAvDM;EAR0C,CAArD;EArBAZ,EAAE,CAACa,EAAH,CAAMC,KAAN,CAAYC,iBAAZ,CAA8BZ,aAA9B,GAA8CA,aAA9C"
}