{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "celleditor",
    "AbstractField",
    "members",
    "getCellEditorValue",
    "cellEditor",
    "value",
    "getValue",
    "validationFunc",
    "getValidationFunction",
    "originalValue",
    "parseFloat",
    "_createEditor",
    "form",
    "TextField",
    "setAppearance"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/celleditor/TextField.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A cell editor factory creating text fields.\n */\nqx.Class.define(\"qx.ui.table.celleditor.TextField\", {\n  extend: qx.ui.table.celleditor.AbstractField,\n\n  members: {\n    // overridden\n    getCellEditorValue(cellEditor) {\n      var value = cellEditor.getValue();\n\n      // validation function will be called with new and old value\n      var validationFunc = this.getValidationFunction();\n      if (validationFunc) {\n        value = validationFunc(value, cellEditor.originalValue);\n      }\n\n      if (typeof cellEditor.originalValue == \"number\") {\n        // Correct problem of NaN displaying when value is null string.\n        //if (value != null) {\n        if (value != null && value != \"\") {\n          value = parseFloat(value);\n        }\n      }\n      return value;\n    },\n\n    _createEditor() {\n      var cellEditor = new qx.ui.form.TextField();\n      cellEditor.setAppearance(\"table-editor-textfield\");\n      return cellEditor;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kCAAkC,EAAE;IAClDC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,UAAU,CAACC,aAAa;IAE5CC,OAAO,EAAE;MACP;MACAC,kBAAkB,8BAACC,UAAU,EAAE;QAC7B,IAAIC,KAAK,GAAGD,UAAU,CAACE,QAAQ,EAAE;;QAEjC;QACA,IAAIC,cAAc,GAAG,IAAI,CAACC,qBAAqB,EAAE;QACjD,IAAID,cAAc,EAAE;UAClBF,KAAK,GAAGE,cAAc,CAACF,KAAK,EAAED,UAAU,CAACK,aAAa,CAAC;QACzD;QAEA,IAAI,OAAOL,UAAU,CAACK,aAAa,IAAI,QAAQ,EAAE;UAC/C;UACA;UACA,IAAIJ,KAAK,IAAI,IAAI,IAAIA,KAAK,IAAI,EAAE,EAAE;YAChCA,KAAK,GAAGK,UAAU,CAACL,KAAK,CAAC;UAC3B;QACF;QACA,OAAOA,KAAK;MACd,CAAC;MAEDM,aAAa,2BAAG;QACd,IAAIP,UAAU,GAAG,IAAIb,EAAE,CAACO,EAAE,CAACc,IAAI,CAACC,SAAS,EAAE;QAC3CT,UAAU,CAACU,aAAa,CAAC,wBAAwB,CAAC;QAClD,OAAOV,UAAU;MACnB;IACF;EACF,CAAC,CAAC;EApDFb,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,UAAU,CAACa,SAAS,CAACnB,aAAa,GAAGA,aAAa;AAAC"
}