{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "construct",
    "cellEditorFactoryFunction",
    "setCellEditorFactoryFunction",
    "__infos",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "__cellEditorFactory",
    "createCellEditor",
    "cellInfo",
    "getCellEditorFactoryFunction",
    "cellEditor",
    "toHashCode",
    "getCellEditorValue",
    "value",
    "destruct",
    "celleditor",
    "Dynamic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/celleditor/Dynamic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A cell editor factory which can dynamically exchange the cell editor\n * based on information retrieved at runtime. This is useful when different\n * rows in a column should have different cellEditors based on cell content\n * or row meta data. A typical example would be a spreadsheet that has different\n * kind of data in one column.\n *\n */\nqx.Class.define(\"qx.ui.table.celleditor.Dynamic\", {\n  extend: qx.core.Object,\n  implement: qx.ui.table.ICellEditorFactory,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param cellEditorFactoryFunction {Function?null} the factory function\n   *    {@link #cellEditorFactoryFunction}.\n   */\n  construct(cellEditorFactoryFunction) {\n    super();\n    if (cellEditorFactoryFunction) {\n      this.setCellEditorFactoryFunction(cellEditorFactoryFunction);\n    }\n\n    this.__infos = {};\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Function that returns a cellEditorFactory instance which will be\n     * used for the row that is currently being edited. The function is\n     * defined like this:\n     * <pre class=\"javascript\">\n     * myTable.getTableColumnModel().setCellEditorFactory(function(cellInfo){\n     *   // based on the cellInfo map or other information, return the\n     *   // appropriate cellEditorFactory\n     *   if (cellInfo.row == 5)\n     *     return new qx.ui.table.celleditor.CheckBox;\n     *   else\n     *     return new qx.ui.table.celleditor.TextField;\n     * });\n     * </pre>\n     **/\n    cellEditorFactoryFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __cellEditorFactory: null,\n    __infos: null,\n\n    /**\n     * Creates the cell editor based on the cellEditorFactory instance\n     * returned by the function stored in the cellEditorFactoryFunction\n     * property. Passes the cellInfo map to the function.\n     *\n     * @param cellInfo {Map} A map containing the information about the cell to\n     *      create.\n     * @return {qx.ui.core.Widget}\n     */\n    createCellEditor(cellInfo) {\n      var cellEditorFactoryFunction = this.getCellEditorFactoryFunction();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFunction(\n          cellEditorFactoryFunction,\n          \"No function provided! Aborting.\"\n        );\n      }\n\n      this.__cellEditorFactory = cellEditorFactoryFunction(cellInfo);\n      var cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n      // save the cell info to the editor (needed for getting the value)\n      this.__infos[cellEditor.toHashCode()] = cellInfo;\n\n      return cellEditor;\n    },\n\n    // interface implementation\n    getCellEditorValue(cellEditor) {\n      var cellEditorFactoryFunction = this.getCellEditorFactoryFunction();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFunction(\n          cellEditorFactoryFunction,\n          \"No function provided! Aborting.\"\n        );\n      }\n\n      var cellInfo = this.__infos[cellEditor.toHashCode()];\n      // update the propper factory\n      this.__cellEditorFactory = cellEditorFactoryFunction(cellInfo);\n      var value = this.__cellEditorFactory.getCellEditorValue(cellEditor);\n      return value;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__cellEditorFactory = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,gCAAhB,EAAkD;IAChDC,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADgC;IAEhDC,SAAS,EAAET,EAAE,CAACU,EAAH,CAAMC,KAAN,CAAYC,kBAFyB;;IAIhD;AACF;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;IACEC,SAdgD,qBActCC,yBAdsC,EAcX;MACnC;;MACA,IAAIA,yBAAJ,EAA+B;QAC7B,KAAKC,4BAAL,CAAkCD,yBAAlC;MACD;;MAED,KAAKE,SAAL,GAAe,EAAf;IACD,CArB+C;;IAuBhD;AACF;AACA;AACA;AACA;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIH,yBAAyB,EAAE;QACzBI,KAAK,EAAE,UADkB;QAEzBC,QAAQ,EAAE,IAFe;QAGzBC,IAAI,EAAE;MAHmB;IAhBjB,CA7BoC;;IAoDhD;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACPC,SAAmB,EAAE,IADd;MAEPN,SAAO,EAAE,IAFF;;MAIP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,gBAbO,4BAaUC,QAbV,EAaoB;QACzB,IAAIV,yBAAyB,GAAG,KAAKW,4BAAL,EAAhC;QASA,KAAKH,SAAL,GAA2BR,yBAAyB,CAACU,QAAD,CAApD;;QACA,IAAIE,UAAU,GAAG,KAAKJ,SAAL,CAAyBC,gBAAzB,CAA0CC,QAA1C,CAAjB,CAXyB,CAazB;;;QACA,KAAKR,SAAL,CAAaU,UAAU,CAACC,UAAX,EAAb,IAAwCH,QAAxC;QAEA,OAAOE,UAAP;MACD,CA9BM;MAgCP;MACAE,kBAjCO,8BAiCYF,UAjCZ,EAiCwB;QAC7B,IAAIZ,yBAAyB,GAAG,KAAKW,4BAAL,EAAhC;;QASA,IAAID,QAAQ,GAAG,KAAKR,SAAL,CAAaU,UAAU,CAACC,UAAX,EAAb,CAAf,CAV6B,CAW7B;;;QACA,KAAKL,SAAL,GAA2BR,yBAAyB,CAACU,QAAD,CAApD;;QACA,IAAIK,KAAK,GAAG,KAAKP,SAAL,CAAyBM,kBAAzB,CAA4CF,UAA5C,CAAZ;;QACA,OAAOG,KAAP;MACD;IAhDM,CA1DuC;;IA6GhD;AACF;AACA;AACA;AACA;IAEEC,QAnHgD,sBAmHrC;MACT,KAAKR,SAAL,GAA2B,IAA3B;IACD;EArH+C,CAAlD;EA1BAtB,EAAE,CAACU,EAAH,CAAMC,KAAN,CAAYoB,UAAZ,CAAuBC,OAAvB,CAA+B7B,aAA/B,GAA+CA,aAA/C"
}