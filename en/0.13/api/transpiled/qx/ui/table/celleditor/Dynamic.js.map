{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "construct",
    "cellEditorFactoryFunction",
    "constructor",
    "call",
    "setCellEditorFactoryFunction",
    "__infos",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "__cellEditorFactory",
    "createCellEditor",
    "cellInfo",
    "getCellEditorFactoryFunction",
    "cellEditor",
    "toHashCode",
    "getCellEditorValue",
    "value",
    "destruct",
    "celleditor",
    "Dynamic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/celleditor/Dynamic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 Christian Boulanger\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Boulanger (cboulanger)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A cell editor factory which can dynamically exchange the cell editor\r\n * based on information retrieved at runtime. This is useful when different\r\n * rows in a column should have different cellEditors based on cell content\r\n * or row meta data. A typical example would be a spreadsheet that has different\r\n * kind of data in one column.\r\n *\r\n */\r\nqx.Class.define(\"qx.ui.table.celleditor.Dynamic\", {\r\n  extend: qx.core.Object,\r\n  implement: qx.ui.table.ICellEditorFactory,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param cellEditorFactoryFunction {Function?null} the factory function\r\n   *    {@link #cellEditorFactoryFunction}.\r\n   */\r\n  construct(cellEditorFactoryFunction) {\r\n    super();\r\n    if (cellEditorFactoryFunction) {\r\n      this.setCellEditorFactoryFunction(cellEditorFactoryFunction);\r\n    }\r\n\r\n    this.__infos = {};\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * Function that returns a cellEditorFactory instance which will be\r\n     * used for the row that is currently being edited. The function is\r\n     * defined like this:\r\n     * <pre class=\"javascript\">\r\n     * myTable.getTableColumnModel().setCellEditorFactory(function(cellInfo){\r\n     *   // based on the cellInfo map or other information, return the\r\n     *   // appropriate cellEditorFactory\r\n     *   if (cellInfo.row == 5)\r\n     *     return new qx.ui.table.celleditor.CheckBox;\r\n     *   else\r\n     *     return new qx.ui.table.celleditor.TextField;\r\n     * });\r\n     * </pre>\r\n     **/\r\n    cellEditorFactoryFunction: {\r\n      check: \"Function\",\r\n      nullable: true,\r\n      init: null\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __cellEditorFactory: null,\r\n    __infos: null,\r\n\r\n    /**\r\n     * Creates the cell editor based on the cellEditorFactory instance\r\n     * returned by the function stored in the cellEditorFactoryFunction\r\n     * property. Passes the cellInfo map to the function.\r\n     *\r\n     * @param cellInfo {Map} A map containing the information about the cell to\r\n     *      create.\r\n     * @return {qx.ui.core.Widget}\r\n     */\r\n    createCellEditor(cellInfo) {\r\n      var cellEditorFactoryFunction = this.getCellEditorFactoryFunction();\r\n\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertFunction(\r\n          cellEditorFactoryFunction,\r\n          \"No function provided! Aborting.\"\r\n        );\r\n      }\r\n\r\n      this.__cellEditorFactory = cellEditorFactoryFunction(cellInfo);\r\n      var cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\r\n\r\n      // save the cell info to the editor (needed for getting the value)\r\n      this.__infos[cellEditor.toHashCode()] = cellInfo;\r\n\r\n      return cellEditor;\r\n    },\r\n\r\n    // interface implementation\r\n    getCellEditorValue(cellEditor) {\r\n      var cellEditorFactoryFunction = this.getCellEditorFactoryFunction();\r\n\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertFunction(\r\n          cellEditorFactoryFunction,\r\n          \"No function provided! Aborting.\"\r\n        );\r\n      }\r\n\r\n      var cellInfo = this.__infos[cellEditor.toHashCode()];\r\n      // update the propper factory\r\n      this.__cellEditorFactory = cellEditorFactoryFunction(cellInfo);\r\n      var value = this.__cellEditorFactory.getCellEditorValue(cellEditor);\r\n      return value;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this.__cellEditorFactory = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gCAAgC,EAAE;IAChDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,SAAS,EAAET,EAAE,CAACU,EAAE,CAACC,KAAK,CAACC,kBAAkB;IAEzC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,yBAAyB,EAAE;MACnCd,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAO,WAAA,CAAAC,IAAA;MACA,IAAIF,yBAAyB,EAAE;QAC7B,IAAI,CAACG,4BAA4B,CAACH,yBAAyB,CAAC;MAC9D;MAEA,IAAI,CAACI,SAAO,GAAG,CAAC,CAAC;IACnB,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIL,yBAAyB,EAAE;QACzBM,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,SAAmB,EAAE,IAAI;MACzBN,SAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,gBAAgB,WAAAA,iBAACC,QAAQ,EAAE;QACzB,IAAIZ,yBAAyB,GAAG,IAAI,CAACa,4BAA4B,CAAC,CAAC;QASnE,IAAI,CAACH,SAAmB,GAAGV,yBAAyB,CAACY,QAAQ,CAAC;QAC9D,IAAIE,UAAU,GAAG,IAAI,CAACJ,SAAmB,CAACC,gBAAgB,CAACC,QAAQ,CAAC;;QAEpE;QACA,IAAI,CAACR,SAAO,CAACU,UAAU,CAACC,UAAU,CAAC,CAAC,CAAC,GAAGH,QAAQ;QAEhD,OAAOE,UAAU;MACnB,CAAC;MAED;MACAE,kBAAkB,WAAAA,mBAACF,UAAU,EAAE;QAC7B,IAAId,yBAAyB,GAAG,IAAI,CAACa,4BAA4B,CAAC,CAAC;QASnE,IAAID,QAAQ,GAAG,IAAI,CAACR,SAAO,CAACU,UAAU,CAACC,UAAU,CAAC,CAAC,CAAC;QACpD;QACA,IAAI,CAACL,SAAmB,GAAGV,yBAAyB,CAACY,QAAQ,CAAC;QAC9D,IAAIK,KAAK,GAAG,IAAI,CAACP,SAAmB,CAACM,kBAAkB,CAACF,UAAU,CAAC;QACnE,OAAOG,KAAK;MACd;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEC,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACR,SAAmB,GAAG,IAAI;IACjC;EACF,CAAC,CAAC;EAhJFxB,EAAE,CAACU,EAAE,CAACC,KAAK,CAACsB,UAAU,CAACC,OAAO,CAAC/B,aAAa,GAAGA,aAAa;AAAC"
}