{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "members",
    "createCellEditor",
    "cellInfo",
    "editor",
    "container",
    "Composite",
    "layout",
    "HBox",
    "set",
    "alignX",
    "alignY",
    "focusable",
    "checkbox",
    "form",
    "CheckBox",
    "value",
    "add",
    "addListener",
    "focus",
    "activate",
    "getCellEditorValue",
    "cellEditor",
    "getChildren",
    "getValue",
    "celleditor"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/celleditor/CheckBox.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 David Perez\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * David Perez (david-perez)\n\n************************************************************************ */\n\n/**\n * For editing boolean data in a checkbox. It is advisable to use this in\n * conjunction with {@link qx.ui.table.cellrenderer.Boolean}.\n */\nqx.Class.define(\"qx.ui.table.celleditor.CheckBox\", {\n  extend: qx.core.Object,\n  implement: qx.ui.table.ICellEditorFactory,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // interface implementation\n    createCellEditor(cellInfo) {\n      var editor = new qx.ui.container.Composite(\n        new qx.ui.layout.HBox().set({\n          alignX: \"center\",\n          alignY: \"middle\"\n        })\n      ).set({\n        focusable: true\n      });\n\n      var checkbox = new qx.ui.form.CheckBox().set({\n        value: cellInfo.value\n      });\n\n      editor.add(checkbox);\n\n      // propagate focus\n      editor.addListener(\"focus\", function () {\n        checkbox.focus();\n      });\n\n      // propagate active state\n      editor.addListener(\"activate\", function () {\n        checkbox.activate();\n      });\n\n      return editor;\n    },\n\n    // interface implementation\n    getCellEditorValue(cellEditor) {\n      return cellEditor.getChildren()[0].getValue();\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,iCAAiC,EAAE;IACjDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,SAAS,EAAET,EAAE,CAACU,EAAE,CAACC,KAAK,CAACC,kBAAkB;IAEzC;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;MACAC,gBAAgB,WAAAA,iBAACC,QAAQ,EAAE;QACzB,IAAIC,MAAM,GAAG,IAAIhB,EAAE,CAACU,EAAE,CAACO,SAAS,CAACC,SAAS,CACxC,IAAIlB,EAAE,CAACU,EAAE,CAACS,MAAM,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC;UAC1BC,MAAM,EAAE,QAAQ;UAChBC,MAAM,EAAE;QACV,CAAC,CACH,CAAC,CAACF,GAAG,CAAC;UACJG,SAAS,EAAE;QACb,CAAC,CAAC;QAEF,IAAIC,QAAQ,GAAG,IAAIzB,EAAE,CAACU,EAAE,CAACgB,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACN,GAAG,CAAC;UAC3CO,KAAK,EAAEb,QAAQ,CAACa;QAClB,CAAC,CAAC;QAEFZ,MAAM,CAACa,GAAG,CAACJ,QAAQ,CAAC;;QAEpB;QACAT,MAAM,CAACc,WAAW,CAAC,OAAO,EAAE,YAAY;UACtCL,QAAQ,CAACM,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC;;QAEF;QACAf,MAAM,CAACc,WAAW,CAAC,UAAU,EAAE,YAAY;UACzCL,QAAQ,CAACO,QAAQ,CAAC,CAAC;QACrB,CAAC,CAAC;QAEF,OAAOhB,MAAM;MACf,CAAC;MAED;MACAiB,kBAAkB,WAAAA,mBAACC,UAAU,EAAE;QAC7B,OAAOA,UAAU,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAC/C;IACF;EACF,CAAC,CAAC;EApEFpC,EAAE,CAACU,EAAE,CAACC,KAAK,CAAC0B,UAAU,CAACV,QAAQ,CAACxB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}