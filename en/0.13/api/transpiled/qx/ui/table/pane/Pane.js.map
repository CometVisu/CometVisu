{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "paneScroller",
    "__paneScroller",
    "__lastColCount",
    "__lastRowCount",
    "__rowCache",
    "events",
    "paneReloadsData",
    "paneUpdated",
    "properties",
    "firstVisibleRow",
    "check",
    "init",
    "apply",
    "visibleRowCount",
    "maxCacheLines",
    "allowShrinkX",
    "refine",
    "members",
    "__tableContainer",
    "__focusedRow",
    "__focusedCol",
    "__rowCacheCount",
    "_applyFirstVisibleRow",
    "value",
    "old",
    "updateContent",
    "_applyVisibleRowCount",
    "_getContentHint",
    "width",
    "getPaneScroller",
    "getTablePaneModel",
    "getTotalWidth",
    "height",
    "getTable",
    "setFocusedCell",
    "col",
    "row",
    "massUpdate",
    "oldRow",
    "onSelectionChanged",
    "onFocusChanged",
    "setColumnWidth",
    "onColOrderChanged",
    "onPaneModelChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "__rowCacheClear",
    "paneFirstRow",
    "getFirstVisibleRow",
    "rowCount",
    "getVisibleRowCount",
    "getTableModel",
    "getRowCount",
    "onTableModelMetaDataChanged",
    "_applyMaxCacheLines",
    "__rowCacheGet",
    "selected",
    "focused",
    "__rowCacheSet",
    "rowString",
    "getMaxCacheLines",
    "completeUpdate",
    "scrollOffset",
    "onlyRow",
    "onlySelectionOrFocusChanged",
    "Math",
    "abs",
    "min",
    "_scrollContent",
    "getAlwaysUpdateCells",
    "_updateRowStyles",
    "_updateSingleRow",
    "_updateAllRows",
    "elem",
    "getContentElement",
    "getDomElement",
    "firstChild",
    "table",
    "selectionModel",
    "getSelectionModel",
    "tableModel",
    "rowRenderer",
    "getDataRowRenderer",
    "rowNodes",
    "childNodes",
    "cellInfo",
    "y",
    "end",
    "length",
    "offset",
    "isSelectedIndex",
    "focusedRow",
    "rowData",
    "getRowData",
    "updateDataRowElement",
    "_getRowsHtml",
    "columnModel",
    "getTableColumnModel",
    "paneModel",
    "prefetchRows",
    "rowHeight",
    "getRowHeight",
    "colCount",
    "getColumnCount",
    "left",
    "cols",
    "x",
    "getColumnAtX",
    "cellWidth",
    "getColumnWidth",
    "push",
    "xPos",
    "editable",
    "isColumnEditable",
    "focusedCol",
    "styleLeft",
    "styleWidth",
    "rowsArr",
    "cachedRow",
    "rowHtml",
    "styleHeight",
    "rowAttributes",
    "getRowAttributes",
    "rowClass",
    "getRowClass",
    "rowStyle",
    "createRowStyle",
    "getRowHeightStyle",
    "stopLoop",
    "col_def",
    "attr",
    "getValue",
    "cellRenderer",
    "getDataCellRenderer",
    "style",
    "getDefaultCellStyle",
    "createDataCellHtml",
    "join",
    "fireDataEvent",
    "rowOffset",
    "el",
    "tableBody",
    "tableChildNodes",
    "tabelModel",
    "modelRowCount",
    "removeRowBase",
    "addRowBase",
    "i",
    "rowElem",
    "removeChild",
    "exp",
    "document",
    "createElement",
    "tableDummy",
    "innerHTML",
    "newTableRows",
    "appendChild",
    "insertBefore",
    "fireEvent",
    "replaceChild",
    "addListenerOnce",
    "max",
    "rowWidth",
    "htmlArr",
    "getForceLineHeight",
    "data",
    "setWidth",
    "getRenderedRowHeight",
    "getBoundingClientRect",
    "destruct",
    "removeListener",
    "_onTrack",
    "pane",
    "Pane"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The table pane that shows a certain section from a table. This class handles\n * the display of the data part of a table and is therefore the base for virtual\n * scrolling.\n */\nqx.Class.define(\"qx.ui.table.pane.Pane\", {\n  extend: qx.ui.core.Widget,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\n   */\n  construct(paneScroller) {\n    super();\n\n    this.__paneScroller = paneScroller;\n\n    this.__lastColCount = 0;\n    this.__lastRowCount = 0;\n\n    this.__rowCache = [];\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Whether the current view port of the pane has not loaded data.\n     * The data object of the event indicates if the table pane has to reload\n     * data or not. Can be used to give the user feedback of the loading state\n     * of the rows.\n     */\n    paneReloadsData: \"qx.event.type.Data\",\n\n    /**\n     * Whenever the content of the table pane has been updated (rendered)\n     * trigger a paneUpdated event. This allows the canvas cellrenderer to act\n     * once the new cells have been integrated in the dom.\n     */\n    paneUpdated: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The index of the first row to show. */\n    firstVisibleRow: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyFirstVisibleRow\"\n    },\n\n    /** The number of rows to show. */\n    visibleRowCount: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyVisibleRowCount\"\n    },\n\n    /**\n     * Maximum number of cached rows. If the value is <code>-1</code> the cache\n     * size is unlimited\n     */\n    maxCacheLines: {\n      check: \"Number\",\n      init: 1000,\n      apply: \"_applyMaxCacheLines\"\n    },\n\n    // overridden\n    allowShrinkX: {\n      refine: true,\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lastRowCount: null,\n    __lastColCount: null,\n\n    __paneScroller: null,\n    __tableContainer: null,\n\n    __focusedRow: null,\n    __focusedCol: null,\n\n    // sparse array to cache rendered rows\n    __rowCache: null,\n    __rowCacheCount: 0,\n\n    // property modifier\n    _applyFirstVisibleRow(value, old) {\n      this.updateContent(false, value - old);\n    },\n\n    // property modifier\n    _applyVisibleRowCount(value, old) {\n      this.updateContent(true);\n    },\n\n    // overridden\n    _getContentHint() {\n      // the preferred height is 400 pixel. We don't use rowCount * rowHeight\n      // because this is typically too large.\n      return {\n        width: this.getPaneScroller().getTablePaneModel().getTotalWidth(),\n        height: 400\n      };\n    },\n\n    /**\n     * Returns the TablePaneScroller this pane belongs to.\n     *\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\n     */\n    getPaneScroller() {\n      return this.__paneScroller;\n    },\n\n    /**\n     * Returns the table this pane belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable() {\n      return this.__paneScroller.getTable();\n    },\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param massUpdate {Boolean ? false} Whether other updates are planned as well.\n     *          If true, no repaint will be done.\n     */\n    setFocusedCell(col, row, massUpdate) {\n      if (col != this.__focusedCol || row != this.__focusedRow) {\n        var oldRow = this.__focusedRow;\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        // Update the focused row background\n        if (row != oldRow && !massUpdate) {\n          if (oldRow !== null) {\n            this.updateContent(false, null, oldRow, true);\n          }\n          if (row !== null) {\n            this.updateContent(false, null, row, true);\n          }\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged() {\n      this.updateContent(false, null, null, true);\n    },\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged() {\n      this.updateContent(false, null, null, true);\n    },\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth(col, width) {\n      this.updateContent(true);\n    },\n\n    /**\n     * Event handler. Called the column order has changed.\n     *\n     */\n    onColOrderChanged() {\n      this.updateContent(true);\n    },\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    onPaneModelChanged() {\n      this.updateContent(true);\n    },\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn) {\n      this.__rowCacheClear();\n\n      var paneFirstRow = this.getFirstVisibleRow();\n      var rowCount = this.getVisibleRowCount();\n\n      if (\n        lastRow == -1 ||\n        (lastRow >= paneFirstRow && firstRow < paneFirstRow + rowCount)\n      ) {\n        // The change intersects this pane, check if a full or partial update is required\n        if (\n          firstRow === lastRow &&\n          this.getTable().getTableModel().getRowCount() > 1\n        ) {\n          this.updateContent(false, null, firstRow, false);\n        } else {\n          this.updateContent();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged() {\n      this.updateContent(true);\n    },\n\n    // property apply method\n    _applyMaxCacheLines(value, old) {\n      if (this.__rowCacheCount >= value && value !== -1) {\n        this.__rowCacheClear();\n      }\n    },\n\n    /**\n     * Clear the row cache\n     */\n    __rowCacheClear() {\n      this.__rowCache = [];\n      this.__rowCacheCount = 0;\n    },\n\n    /**\n     * Get a line from the row cache.\n     *\n     * @param row {Integer} Row index to get\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     * @return {String|null} The cached row or null if a row with the given\n     *     index is not cached.\n     */\n    __rowCacheGet(row, selected, focused) {\n      if (!selected && !focused && this.__rowCache[row]) {\n        return this.__rowCache[row];\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Add a line to the row cache.\n     *\n     * @param row {Integer} Row index to set\n     * @param rowString {String} computed row string to cache\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     */\n    __rowCacheSet(row, rowString, selected, focused) {\n      var maxCacheLines = this.getMaxCacheLines();\n      if (!selected && !focused && !this.__rowCache[row] && maxCacheLines > 0) {\n        this._applyMaxCacheLines(maxCacheLines);\n        this.__rowCache[row] = rowString;\n        this.__rowCacheCount += 1;\n      }\n    },\n\n    /**\n     * Updates the content of the pane.\n     *\n     * @param completeUpdate {Boolean ? false} if true a complete update is performed.\n     *      On a complete update all cell widgets are recreated.\n     * @param scrollOffset {Integer ? null} If set specifies how many rows to scroll.\n     * @param onlyRow {Integer ? null} if set only the specified row will be updated.\n     * @param onlySelectionOrFocusChanged {Boolean ? false} if true, cell values won't\n     *          be updated. Only the row background will.\n     */\n    updateContent(\n      completeUpdate,\n      scrollOffset,\n      onlyRow,\n      onlySelectionOrFocusChanged\n    ) {\n      if (completeUpdate) {\n        this.__rowCacheClear();\n      }\n\n      if (\n        scrollOffset &&\n        Math.abs(scrollOffset) <= Math.min(10, this.getVisibleRowCount())\n      ) {\n        this._scrollContent(scrollOffset);\n      } else if (\n        onlySelectionOrFocusChanged &&\n        !this.getTable().getAlwaysUpdateCells()\n      ) {\n        this._updateRowStyles(onlyRow);\n      } else if (typeof onlyRow == \"number\" && onlyRow >= 0) {\n        this._updateSingleRow(onlyRow);\n      } else {\n        this._updateAllRows();\n      }\n    },\n\n    /**\n     * If only focus or selection changes it is sufficient to only update the\n     * row styles. This method updates the row styles of all visible rows or\n     * of just one row.\n     *\n     * @param onlyRow {Integer|null ? null} If this parameter is set only the row\n     *     with this index is updated.\n     */\n    _updateRowStyles(onlyRow) {\n      var elem = this.getContentElement().getDomElement();\n\n      if (!elem || !elem.firstChild) {\n        this._updateAllRows();\n        return;\n      }\n\n      var table = this.getTable();\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var rowRenderer = table.getDataRowRenderer();\n      var rowNodes = elem.firstChild.childNodes;\n      var cellInfo = { table: table };\n\n      // We don't want to execute the row loop below more than necessary. If\n      // onlyRow is not null, we want to do the loop only for that row.\n      // In that case, we start at (set the \"row\" variable to) that row, and\n      // stop at (set the \"end\" variable to the offset of) the next row.\n      var row = this.getFirstVisibleRow();\n      var y = 0;\n\n      // How many rows do we need to update?\n      var end = rowNodes.length;\n\n      if (onlyRow != null) {\n        // How many rows are we skipping?\n        var offset = onlyRow - row;\n        if (offset >= 0 && offset < end) {\n          row = onlyRow;\n          y = offset;\n          end = offset + 1;\n        } else {\n          return;\n        }\n      }\n\n      for (; y < end; y++, row++) {\n        cellInfo.row = row;\n        cellInfo.selected = selectionModel.isSelectedIndex(row);\n        cellInfo.focusedRow = this.__focusedRow == row;\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        rowRenderer.updateDataRowElement(cellInfo, rowNodes[y]);\n      }\n    },\n\n    /**\n     * Get the HTML table fragment for the given row range.\n     *\n     * @param firstRow {Integer} Index of the first row\n     * @param rowCount {Integer} Number of rows\n     * @return {String} The HTML table fragment for the given row range.\n     */\n    _getRowsHtml(firstRow, rowCount) {\n      var table = this.getTable();\n\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var columnModel = table.getTableColumnModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n      var rowRenderer = table.getDataRowRenderer();\n\n      tableModel.prefetchRows(firstRow, firstRow + rowCount - 1);\n\n      var rowHeight = table.getRowHeight();\n      var colCount = paneModel.getColumnCount();\n      var left = 0;\n      var cols = [];\n\n      // precompute column properties\n      for (var x = 0; x < colCount; x++) {\n        var col = paneModel.getColumnAtX(x);\n        var cellWidth = columnModel.getColumnWidth(col);\n        cols.push({\n          col: col,\n          xPos: x,\n          editable: tableModel.isColumnEditable(col),\n          focusedCol: this.__focusedCol == col,\n          styleLeft: left,\n          styleWidth: cellWidth\n        });\n\n        left += cellWidth;\n      }\n\n      var rowsArr = [];\n      var paneReloadsData = false;\n      for (var row = firstRow; row < firstRow + rowCount; row++) {\n        var selected = selectionModel.isSelectedIndex(row);\n        var focusedRow = this.__focusedRow == row;\n\n        var cachedRow = this.__rowCacheGet(row, selected, focusedRow);\n        if (cachedRow) {\n          rowsArr.push(cachedRow);\n          continue;\n        }\n\n        var rowHtml = [];\n\n        var cellInfo = { table: table };\n        cellInfo.styleHeight = rowHeight;\n\n        cellInfo.row = row;\n        cellInfo.selected = selected;\n        cellInfo.focusedRow = focusedRow;\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        if (!cellInfo.rowData) {\n          paneReloadsData = true;\n        }\n\n        rowHtml.push(\"<div \");\n\n        var rowAttributes = rowRenderer.getRowAttributes(cellInfo);\n        if (rowAttributes) {\n          rowHtml.push(rowAttributes);\n        }\n\n        var rowClass = rowRenderer.getRowClass(cellInfo);\n        if (rowClass) {\n          rowHtml.push('class=\"', rowClass, '\" ');\n        }\n\n        var rowStyle = rowRenderer.createRowStyle(cellInfo);\n        rowStyle +=\n          \";position:relative;\" +\n          rowRenderer.getRowHeightStyle(rowHeight) +\n          \"width:100%;\";\n        if (rowStyle) {\n          rowHtml.push('style=\"', rowStyle, '\" ');\n        }\n        rowHtml.push(\">\");\n\n        var stopLoop = false;\n        for (x = 0; x < colCount && !stopLoop; x++) {\n          var col_def = cols[x];\n          for (var attr in col_def) {\n            cellInfo[attr] = col_def[attr];\n          }\n          var col = cellInfo.col;\n\n          // Use the \"getValue\" method of the tableModel to get the cell's\n          // value working directly on the \"rowData\" object\n          // (-> cellInfo.rowData[col];) is not a solution because you can't\n          // work with the columnIndex -> you have to use the columnId of the\n          // columnIndex This is exactly what the method \"getValue\" does\n          cellInfo.value = tableModel.getValue(col, row);\n          var cellRenderer = columnModel.getDataCellRenderer(col);\n\n          // Retrieve the current default cell style for this column.\n          cellInfo.style = cellRenderer.getDefaultCellStyle();\n\n          // Allow a cell renderer to tell us not to draw any further cells in\n          // the row. Older, or traditional cell renderers don't return a\n          // value, however, from createDataCellHtml, so assume those are\n          // returning false.\n          //\n          // Tested with http://tinyurl.com/333hyhv\n          stopLoop =\n            cellRenderer.createDataCellHtml(cellInfo, rowHtml) || false;\n        }\n        rowHtml.push(\"</div>\");\n\n        var rowString = rowHtml.join(\"\");\n\n        this.__rowCacheSet(row, rowString, selected, focusedRow);\n        rowsArr.push(rowString);\n      }\n      this.fireDataEvent(\"paneReloadsData\", paneReloadsData);\n      return rowsArr.join(\"\");\n    },\n\n    /**\n     * Scrolls the pane's contents by the given offset.\n     *\n     * @param rowOffset {Integer} Number of lines to scroll. Scrolling up is\n     *     represented by a negative offset.\n     */\n    _scrollContent(rowOffset) {\n      var el = this.getContentElement().getDomElement();\n      if (!(el && el.firstChild)) {\n        this._updateAllRows();\n        return;\n      }\n\n      var tableBody = el.firstChild;\n      var tableChildNodes = tableBody.childNodes;\n      var rowCount = this.getVisibleRowCount();\n      var firstRow = this.getFirstVisibleRow();\n\n      var tabelModel = this.getTable().getTableModel();\n      var modelRowCount = 0;\n\n      modelRowCount = tabelModel.getRowCount();\n\n      // don't handle this special case here\n      if (firstRow + rowCount > modelRowCount) {\n        this._updateAllRows();\n        return;\n      }\n\n      // remove old lines\n      var removeRowBase = rowOffset < 0 ? rowCount + rowOffset : 0;\n      var addRowBase = rowOffset < 0 ? 0 : rowCount - rowOffset;\n\n      for (var i = Math.abs(rowOffset) - 1; i >= 0; i--) {\n        var rowElem = tableChildNodes[removeRowBase];\n        try {\n          tableBody.removeChild(rowElem);\n        } catch (exp) {\n          break;\n        }\n      }\n\n      // render new lines\n      if (!this.__tableContainer) {\n        this.__tableContainer = document.createElement(\"div\");\n      }\n      var tableDummy = \"<div>\";\n      tableDummy += this._getRowsHtml(\n        firstRow + addRowBase,\n        Math.abs(rowOffset)\n      );\n\n      tableDummy += \"</div>\";\n      this.__tableContainer.innerHTML = tableDummy;\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\n\n      // append new lines\n      if (rowOffset > 0) {\n        for (var i = newTableRows.length - 1; i >= 0; i--) {\n          var rowElem = newTableRows[0];\n          tableBody.appendChild(rowElem);\n        }\n      } else {\n        for (var i = newTableRows.length - 1; i >= 0; i--) {\n          var rowElem = newTableRows[newTableRows.length - 1];\n          tableBody.insertBefore(rowElem, tableBody.firstChild);\n        }\n      }\n\n      // update focus indicator\n      if (this.__focusedRow !== null) {\n        this._updateRowStyles(this.__focusedRow - rowOffset);\n        this._updateRowStyles(this.__focusedRow);\n      }\n      this.fireEvent(\"paneUpdated\");\n    },\n\n    _updateSingleRow(row) {\n      var elem = this.getContentElement().getDomElement();\n      if (!elem || !elem.firstChild) {\n        // pane has not yet been rendered, just exit\n        return;\n      }\n      var visibleRowCount = this.getVisibleRowCount();\n      var firstRow = this.getFirstVisibleRow();\n\n      if (row < firstRow || row > firstRow + visibleRowCount) {\n        // No need to redraw it\n        return;\n      }\n\n      var modelRowCount = this.getTable().getTableModel().getRowCount();\n\n      var tableBody = elem.firstChild;\n      var tableChildNodes = tableBody.childNodes;\n      var offset = row - firstRow;\n      var rowElem = tableChildNodes[offset];\n\n      // `row` can be too big if rows were deleted. In that case, we\n      // can't update the current single row\n      if (row >= modelRowCount || typeof rowElem == \"undefined\") {\n        this._updateAllRows();\n        return;\n      }\n\n      // render new lines\n      if (!this.__tableContainer) {\n        this.__tableContainer = document.createElement(\"div\");\n      }\n      this.__tableContainer.innerHTML =\n        \"<div>\" + this._getRowsHtml(row, 1) + \"</div>\";\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\n\n      tableBody.replaceChild(newTableRows[0], rowElem);\n\n      // update focus indicator\n      this._updateRowStyles(null);\n\n      this.fireEvent(\"paneUpdated\");\n    },\n\n    /**\n     * Updates the content of the pane (implemented using array joins).\n     */\n    _updateAllRows() {\n      var elem = this.getContentElement().getDomElement();\n      if (!elem) {\n        // pane has not yet been rendered\n        this.addListenerOnce(\"appear\", this._updateAllRows, this);\n        return;\n      }\n\n      var table = this.getTable();\n\n      var tableModel = table.getTableModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n\n      var colCount = paneModel.getColumnCount();\n      var rowHeight = table.getRowHeight();\n      var firstRow = this.getFirstVisibleRow();\n\n      var rowCount = this.getVisibleRowCount();\n      var modelRowCount = tableModel.getRowCount();\n\n      if (firstRow + rowCount > modelRowCount) {\n        rowCount = Math.max(0, modelRowCount - firstRow);\n      }\n\n      var rowWidth = paneModel.getTotalWidth();\n      var htmlArr;\n\n      // If there are any rows...\n      if (rowCount > 0) {\n        // ... then create a div for them and add the rows to it.\n        htmlArr = [\n          \"<div style='\",\n          \"width: 100%;\",\n          table.getForceLineHeight() ? \"line-height: \" + rowHeight + \"px;\" : \"\",\n          \"overflow: hidden;\",\n          \"'>\",\n          this._getRowsHtml(firstRow, rowCount),\n          \"</div>\"\n        ];\n      } else {\n        // Otherwise, don't create the div, as even an empty div creates a\n        // white row in IE.\n        htmlArr = [];\n      }\n\n      var data = htmlArr.join(\"\");\n      elem.innerHTML = data;\n      this.setWidth(rowWidth);\n\n      this.__lastColCount = colCount;\n      this.__lastRowCount = rowCount;\n      this.fireEvent(\"paneUpdated\");\n    },\n\n    getRenderedRowHeight() {\n      var rowHeight = this.getTable().getRowHeight();\n\n      var elem = this.getContentElement().getDomElement();\n      if (elem && elem.firstChild) {\n        // pane has been rendered\n        var tableBody = elem.firstChild;\n        if (tableBody.childNodes && tableBody.childNodes.length > 0) {\n          rowHeight = tableBody.childNodes[0].getBoundingClientRect().height;\n        }\n      }\n      return rowHeight;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__tableContainer = this.__paneScroller = this.__rowCache = null;\n    this.removeListener(\"track\", this._onTrack, this);\n  }\n});\n"
  ],
  "mappings": "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"
}