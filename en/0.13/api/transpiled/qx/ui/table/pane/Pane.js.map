{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "paneScroller",
    "__paneScroller",
    "__lastColCount",
    "__lastRowCount",
    "__rowCache",
    "events",
    "paneReloadsData",
    "paneUpdated",
    "properties",
    "firstVisibleRow",
    "check",
    "init",
    "apply",
    "visibleRowCount",
    "maxCacheLines",
    "allowShrinkX",
    "refine",
    "members",
    "__tableContainer",
    "__focusedRow",
    "__focusedCol",
    "__rowCacheCount",
    "_applyFirstVisibleRow",
    "value",
    "old",
    "updateContent",
    "_applyVisibleRowCount",
    "_getContentHint",
    "width",
    "getPaneScroller",
    "getTablePaneModel",
    "getTotalWidth",
    "height",
    "getTable",
    "setFocusedCell",
    "col",
    "row",
    "massUpdate",
    "oldRow",
    "onSelectionChanged",
    "onFocusChanged",
    "setColumnWidth",
    "onColOrderChanged",
    "onPaneModelChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "__rowCacheClear",
    "paneFirstRow",
    "getFirstVisibleRow",
    "rowCount",
    "getVisibleRowCount",
    "getTableModel",
    "getRowCount",
    "onTableModelMetaDataChanged",
    "_applyMaxCacheLines",
    "__rowCacheGet",
    "selected",
    "focused",
    "__rowCacheSet",
    "rowString",
    "getMaxCacheLines",
    "completeUpdate",
    "scrollOffset",
    "onlyRow",
    "onlySelectionOrFocusChanged",
    "Math",
    "abs",
    "min",
    "_scrollContent",
    "getAlwaysUpdateCells",
    "_updateRowStyles",
    "_updateSingleRow",
    "_updateAllRows",
    "elem",
    "getContentElement",
    "getDomElement",
    "firstChild",
    "table",
    "selectionModel",
    "getSelectionModel",
    "tableModel",
    "rowRenderer",
    "getDataRowRenderer",
    "rowNodes",
    "childNodes",
    "cellInfo",
    "y",
    "end",
    "length",
    "offset",
    "isSelectedIndex",
    "focusedRow",
    "rowData",
    "getRowData",
    "updateDataRowElement",
    "_getRowsHtml",
    "columnModel",
    "getTableColumnModel",
    "paneModel",
    "prefetchRows",
    "rowHeight",
    "getRowHeight",
    "colCount",
    "getColumnCount",
    "left",
    "cols",
    "x",
    "getColumnAtX",
    "cellWidth",
    "getColumnWidth",
    "push",
    "xPos",
    "editable",
    "isColumnEditable",
    "focusedCol",
    "styleLeft",
    "styleWidth",
    "rowsArr",
    "cachedRow",
    "rowHtml",
    "styleHeight",
    "rowAttributes",
    "getRowAttributes",
    "rowClass",
    "getRowClass",
    "rowStyle",
    "createRowStyle",
    "getRowHeightStyle",
    "stopLoop",
    "col_def",
    "attr",
    "getValue",
    "cellRenderer",
    "getDataCellRenderer",
    "style",
    "getDefaultCellStyle",
    "createDataCellHtml",
    "join",
    "fireDataEvent",
    "rowOffset",
    "el",
    "tableBody",
    "tableChildNodes",
    "tabelModel",
    "modelRowCount",
    "removeRowBase",
    "addRowBase",
    "i",
    "rowElem",
    "removeChild",
    "exp",
    "document",
    "createElement",
    "tableDummy",
    "innerHTML",
    "newTableRows",
    "appendChild",
    "insertBefore",
    "fireEvent",
    "replaceChild",
    "addListenerOnce",
    "max",
    "rowWidth",
    "htmlArr",
    "getForceLineHeight",
    "data",
    "setWidth",
    "destruct",
    "removeListener",
    "_onTrack",
    "pane",
    "Pane"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The table pane that shows a certain section from a table. This class handles\n * the display of the data part of a table and is therefore the base for virtual\n * scrolling.\n */\nqx.Class.define(\"qx.ui.table.pane.Pane\", {\n  extend: qx.ui.core.Widget,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\n   */\n  construct(paneScroller) {\n    super();\n\n    this.__paneScroller = paneScroller;\n\n    this.__lastColCount = 0;\n    this.__lastRowCount = 0;\n\n    this.__rowCache = [];\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Whether the current view port of the pane has not loaded data.\n     * The data object of the event indicates if the table pane has to reload\n     * data or not. Can be used to give the user feedback of the loading state\n     * of the rows.\n     */\n    paneReloadsData: \"qx.event.type.Data\",\n\n    /**\n     * Whenever the content of the table pane has been updated (rendered)\n     * trigger a paneUpdated event. This allows the canvas cellrenderer to act\n     * once the new cells have been integrated in the dom.\n     */\n    paneUpdated: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The index of the first row to show. */\n    firstVisibleRow: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyFirstVisibleRow\"\n    },\n\n    /** The number of rows to show. */\n    visibleRowCount: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyVisibleRowCount\"\n    },\n\n    /**\n     * Maximum number of cached rows. If the value is <code>-1</code> the cache\n     * size is unlimited\n     */\n    maxCacheLines: {\n      check: \"Number\",\n      init: 1000,\n      apply: \"_applyMaxCacheLines\"\n    },\n\n    // overridden\n    allowShrinkX: {\n      refine: true,\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lastRowCount: null,\n    __lastColCount: null,\n\n    __paneScroller: null,\n    __tableContainer: null,\n\n    __focusedRow: null,\n    __focusedCol: null,\n\n    // sparse array to cache rendered rows\n    __rowCache: null,\n    __rowCacheCount: 0,\n\n    // property modifier\n    _applyFirstVisibleRow(value, old) {\n      this.updateContent(false, value - old);\n    },\n\n    // property modifier\n    _applyVisibleRowCount(value, old) {\n      this.updateContent(true);\n    },\n\n    // overridden\n    _getContentHint() {\n      // the preferred height is 400 pixel. We don't use rowCount * rowHeight\n      // because this is typically too large.\n      return {\n        width: this.getPaneScroller().getTablePaneModel().getTotalWidth(),\n        height: 400\n      };\n    },\n\n    /**\n     * Returns the TablePaneScroller this pane belongs to.\n     *\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\n     */\n    getPaneScroller() {\n      return this.__paneScroller;\n    },\n\n    /**\n     * Returns the table this pane belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable() {\n      return this.__paneScroller.getTable();\n    },\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param massUpdate {Boolean ? false} Whether other updates are planned as well.\n     *          If true, no repaint will be done.\n     */\n    setFocusedCell(col, row, massUpdate) {\n      if (col != this.__focusedCol || row != this.__focusedRow) {\n        var oldRow = this.__focusedRow;\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        // Update the focused row background\n        if (row != oldRow && !massUpdate) {\n          if (oldRow !== null) {\n            this.updateContent(false, null, oldRow, true);\n          }\n          if (row !== null) {\n            this.updateContent(false, null, row, true);\n          }\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged() {\n      this.updateContent(false, null, null, true);\n    },\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged() {\n      this.updateContent(false, null, null, true);\n    },\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth(col, width) {\n      this.updateContent(true);\n    },\n\n    /**\n     * Event handler. Called the column order has changed.\n     *\n     */\n    onColOrderChanged() {\n      this.updateContent(true);\n    },\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    onPaneModelChanged() {\n      this.updateContent(true);\n    },\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn) {\n      this.__rowCacheClear();\n\n      var paneFirstRow = this.getFirstVisibleRow();\n      var rowCount = this.getVisibleRowCount();\n\n      if (\n        lastRow == -1 ||\n        (lastRow >= paneFirstRow && firstRow < paneFirstRow + rowCount)\n      ) {\n        // The change intersects this pane, check if a full or partial update is required\n        if (\n          firstRow === lastRow &&\n          this.getTable().getTableModel().getRowCount() > 1\n        ) {\n          this.updateContent(false, null, firstRow, false);\n        } else {\n          this.updateContent();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged() {\n      this.updateContent(true);\n    },\n\n    // property apply method\n    _applyMaxCacheLines(value, old) {\n      if (this.__rowCacheCount >= value && value !== -1) {\n        this.__rowCacheClear();\n      }\n    },\n\n    /**\n     * Clear the row cache\n     */\n    __rowCacheClear() {\n      this.__rowCache = [];\n      this.__rowCacheCount = 0;\n    },\n\n    /**\n     * Get a line from the row cache.\n     *\n     * @param row {Integer} Row index to get\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     * @return {String|null} The cached row or null if a row with the given\n     *     index is not cached.\n     */\n    __rowCacheGet(row, selected, focused) {\n      if (!selected && !focused && this.__rowCache[row]) {\n        return this.__rowCache[row];\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Add a line to the row cache.\n     *\n     * @param row {Integer} Row index to set\n     * @param rowString {String} computed row string to cache\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     */\n    __rowCacheSet(row, rowString, selected, focused) {\n      var maxCacheLines = this.getMaxCacheLines();\n      if (!selected && !focused && !this.__rowCache[row] && maxCacheLines > 0) {\n        this._applyMaxCacheLines(maxCacheLines);\n        this.__rowCache[row] = rowString;\n        this.__rowCacheCount += 1;\n      }\n    },\n\n    /**\n     * Updates the content of the pane.\n     *\n     * @param completeUpdate {Boolean ? false} if true a complete update is performed.\n     *      On a complete update all cell widgets are recreated.\n     * @param scrollOffset {Integer ? null} If set specifies how many rows to scroll.\n     * @param onlyRow {Integer ? null} if set only the specified row will be updated.\n     * @param onlySelectionOrFocusChanged {Boolean ? false} if true, cell values won't\n     *          be updated. Only the row background will.\n     */\n    updateContent(\n      completeUpdate,\n      scrollOffset,\n      onlyRow,\n      onlySelectionOrFocusChanged\n    ) {\n      if (completeUpdate) {\n        this.__rowCacheClear();\n      }\n\n      if (\n        scrollOffset &&\n        Math.abs(scrollOffset) <= Math.min(10, this.getVisibleRowCount())\n      ) {\n        this._scrollContent(scrollOffset);\n      } else if (\n        onlySelectionOrFocusChanged &&\n        !this.getTable().getAlwaysUpdateCells()\n      ) {\n        this._updateRowStyles(onlyRow);\n      } else if (typeof onlyRow == \"number\" && onlyRow >= 0) {\n        this._updateSingleRow(onlyRow);\n      } else {\n        this._updateAllRows();\n      }\n    },\n\n    /**\n     * If only focus or selection changes it is sufficient to only update the\n     * row styles. This method updates the row styles of all visible rows or\n     * of just one row.\n     *\n     * @param onlyRow {Integer|null ? null} If this parameter is set only the row\n     *     with this index is updated.\n     */\n    _updateRowStyles(onlyRow) {\n      var elem = this.getContentElement().getDomElement();\n\n      if (!elem || !elem.firstChild) {\n        this._updateAllRows();\n        return;\n      }\n\n      var table = this.getTable();\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var rowRenderer = table.getDataRowRenderer();\n      var rowNodes = elem.firstChild.childNodes;\n      var cellInfo = { table: table };\n\n      // We don't want to execute the row loop below more than necessary. If\n      // onlyRow is not null, we want to do the loop only for that row.\n      // In that case, we start at (set the \"row\" variable to) that row, and\n      // stop at (set the \"end\" variable to the offset of) the next row.\n      var row = this.getFirstVisibleRow();\n      var y = 0;\n\n      // How many rows do we need to update?\n      var end = rowNodes.length;\n\n      if (onlyRow != null) {\n        // How many rows are we skipping?\n        var offset = onlyRow - row;\n        if (offset >= 0 && offset < end) {\n          row = onlyRow;\n          y = offset;\n          end = offset + 1;\n        } else {\n          return;\n        }\n      }\n\n      for (; y < end; y++, row++) {\n        cellInfo.row = row;\n        cellInfo.selected = selectionModel.isSelectedIndex(row);\n        cellInfo.focusedRow = this.__focusedRow == row;\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        rowRenderer.updateDataRowElement(cellInfo, rowNodes[y]);\n      }\n    },\n\n    /**\n     * Get the HTML table fragment for the given row range.\n     *\n     * @param firstRow {Integer} Index of the first row\n     * @param rowCount {Integer} Number of rows\n     * @return {String} The HTML table fragment for the given row range.\n     */\n    _getRowsHtml(firstRow, rowCount) {\n      var table = this.getTable();\n\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var columnModel = table.getTableColumnModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n      var rowRenderer = table.getDataRowRenderer();\n\n      tableModel.prefetchRows(firstRow, firstRow + rowCount - 1);\n\n      var rowHeight = table.getRowHeight();\n      var colCount = paneModel.getColumnCount();\n      var left = 0;\n      var cols = [];\n\n      // precompute column properties\n      for (var x = 0; x < colCount; x++) {\n        var col = paneModel.getColumnAtX(x);\n        var cellWidth = columnModel.getColumnWidth(col);\n        cols.push({\n          col: col,\n          xPos: x,\n          editable: tableModel.isColumnEditable(col),\n          focusedCol: this.__focusedCol == col,\n          styleLeft: left,\n          styleWidth: cellWidth\n        });\n\n        left += cellWidth;\n      }\n\n      var rowsArr = [];\n      var paneReloadsData = false;\n      for (var row = firstRow; row < firstRow + rowCount; row++) {\n        var selected = selectionModel.isSelectedIndex(row);\n        var focusedRow = this.__focusedRow == row;\n\n        var cachedRow = this.__rowCacheGet(row, selected, focusedRow);\n        if (cachedRow) {\n          rowsArr.push(cachedRow);\n          continue;\n        }\n\n        var rowHtml = [];\n\n        var cellInfo = { table: table };\n        cellInfo.styleHeight = rowHeight;\n\n        cellInfo.row = row;\n        cellInfo.selected = selected;\n        cellInfo.focusedRow = focusedRow;\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        if (!cellInfo.rowData) {\n          paneReloadsData = true;\n        }\n\n        rowHtml.push(\"<div \");\n\n        var rowAttributes = rowRenderer.getRowAttributes(cellInfo);\n        if (rowAttributes) {\n          rowHtml.push(rowAttributes);\n        }\n\n        var rowClass = rowRenderer.getRowClass(cellInfo);\n        if (rowClass) {\n          rowHtml.push('class=\"', rowClass, '\" ');\n        }\n\n        var rowStyle = rowRenderer.createRowStyle(cellInfo);\n        rowStyle +=\n          \";position:relative;\" +\n          rowRenderer.getRowHeightStyle(rowHeight) +\n          \"width:100%;\";\n        if (rowStyle) {\n          rowHtml.push('style=\"', rowStyle, '\" ');\n        }\n        rowHtml.push(\">\");\n\n        var stopLoop = false;\n        for (x = 0; x < colCount && !stopLoop; x++) {\n          var col_def = cols[x];\n          for (var attr in col_def) {\n            cellInfo[attr] = col_def[attr];\n          }\n          var col = cellInfo.col;\n\n          // Use the \"getValue\" method of the tableModel to get the cell's\n          // value working directly on the \"rowData\" object\n          // (-> cellInfo.rowData[col];) is not a solution because you can't\n          // work with the columnIndex -> you have to use the columnId of the\n          // columnIndex This is exactly what the method \"getValue\" does\n          cellInfo.value = tableModel.getValue(col, row);\n          var cellRenderer = columnModel.getDataCellRenderer(col);\n\n          // Retrieve the current default cell style for this column.\n          cellInfo.style = cellRenderer.getDefaultCellStyle();\n\n          // Allow a cell renderer to tell us not to draw any further cells in\n          // the row. Older, or traditional cell renderers don't return a\n          // value, however, from createDataCellHtml, so assume those are\n          // returning false.\n          //\n          // Tested with http://tinyurl.com/333hyhv\n          stopLoop =\n            cellRenderer.createDataCellHtml(cellInfo, rowHtml) || false;\n        }\n        rowHtml.push(\"</div>\");\n\n        var rowString = rowHtml.join(\"\");\n\n        this.__rowCacheSet(row, rowString, selected, focusedRow);\n        rowsArr.push(rowString);\n      }\n      this.fireDataEvent(\"paneReloadsData\", paneReloadsData);\n      return rowsArr.join(\"\");\n    },\n\n    /**\n     * Scrolls the pane's contents by the given offset.\n     *\n     * @param rowOffset {Integer} Number of lines to scroll. Scrolling up is\n     *     represented by a negative offset.\n     */\n    _scrollContent(rowOffset) {\n      var el = this.getContentElement().getDomElement();\n      if (!(el && el.firstChild)) {\n        this._updateAllRows();\n        return;\n      }\n\n      var tableBody = el.firstChild;\n      var tableChildNodes = tableBody.childNodes;\n      var rowCount = this.getVisibleRowCount();\n      var firstRow = this.getFirstVisibleRow();\n\n      var tabelModel = this.getTable().getTableModel();\n      var modelRowCount = 0;\n\n      modelRowCount = tabelModel.getRowCount();\n\n      // don't handle this special case here\n      if (firstRow + rowCount > modelRowCount) {\n        this._updateAllRows();\n        return;\n      }\n\n      // remove old lines\n      var removeRowBase = rowOffset < 0 ? rowCount + rowOffset : 0;\n      var addRowBase = rowOffset < 0 ? 0 : rowCount - rowOffset;\n\n      for (var i = Math.abs(rowOffset) - 1; i >= 0; i--) {\n        var rowElem = tableChildNodes[removeRowBase];\n        try {\n          tableBody.removeChild(rowElem);\n        } catch (exp) {\n          break;\n        }\n      }\n\n      // render new lines\n      if (!this.__tableContainer) {\n        this.__tableContainer = document.createElement(\"div\");\n      }\n      var tableDummy = \"<div>\";\n      tableDummy += this._getRowsHtml(\n        firstRow + addRowBase,\n        Math.abs(rowOffset)\n      );\n\n      tableDummy += \"</div>\";\n      this.__tableContainer.innerHTML = tableDummy;\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\n\n      // append new lines\n      if (rowOffset > 0) {\n        for (var i = newTableRows.length - 1; i >= 0; i--) {\n          var rowElem = newTableRows[0];\n          tableBody.appendChild(rowElem);\n        }\n      } else {\n        for (var i = newTableRows.length - 1; i >= 0; i--) {\n          var rowElem = newTableRows[newTableRows.length - 1];\n          tableBody.insertBefore(rowElem, tableBody.firstChild);\n        }\n      }\n\n      // update focus indicator\n      if (this.__focusedRow !== null) {\n        this._updateRowStyles(this.__focusedRow - rowOffset);\n        this._updateRowStyles(this.__focusedRow);\n      }\n      this.fireEvent(\"paneUpdated\");\n    },\n\n    _updateSingleRow(row) {\n      var elem = this.getContentElement().getDomElement();\n      if (!elem || !elem.firstChild) {\n        // pane has not yet been rendered, just exit\n        return;\n      }\n      var visibleRowCount = this.getVisibleRowCount();\n      var firstRow = this.getFirstVisibleRow();\n\n      if (row < firstRow || row > firstRow + visibleRowCount) {\n        // No need to redraw it\n        return;\n      }\n\n      var modelRowCount = this.getTable().getTableModel().getRowCount();\n\n      var tableBody = elem.firstChild;\n      var tableChildNodes = tableBody.childNodes;\n      var offset = row - firstRow;\n      var rowElem = tableChildNodes[offset];\n\n      // `row` can be too big if rows were deleted. In that case, we\n      // can't update the current single row\n      if (row >= modelRowCount || typeof rowElem == \"undefined\") {\n        this._updateAllRows();\n        return;\n      }\n\n      // render new lines\n      if (!this.__tableContainer) {\n        this.__tableContainer = document.createElement(\"div\");\n      }\n      this.__tableContainer.innerHTML =\n        \"<div>\" + this._getRowsHtml(row, 1) + \"</div>\";\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\n\n      tableBody.replaceChild(newTableRows[0], rowElem);\n\n      // update focus indicator\n      this._updateRowStyles(null);\n\n      this.fireEvent(\"paneUpdated\");\n    },\n\n    /**\n     * Updates the content of the pane (implemented using array joins).\n     */\n    _updateAllRows() {\n      var elem = this.getContentElement().getDomElement();\n      if (!elem) {\n        // pane has not yet been rendered\n        this.addListenerOnce(\"appear\", this._updateAllRows, this);\n        return;\n      }\n\n      var table = this.getTable();\n\n      var tableModel = table.getTableModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n\n      var colCount = paneModel.getColumnCount();\n      var rowHeight = table.getRowHeight();\n      var firstRow = this.getFirstVisibleRow();\n\n      var rowCount = this.getVisibleRowCount();\n      var modelRowCount = tableModel.getRowCount();\n\n      if (firstRow + rowCount > modelRowCount) {\n        rowCount = Math.max(0, modelRowCount - firstRow);\n      }\n\n      var rowWidth = paneModel.getTotalWidth();\n      var htmlArr;\n\n      // If there are any rows...\n      if (rowCount > 0) {\n        // ... then create a div for them and add the rows to it.\n        htmlArr = [\n          \"<div style='\",\n          \"width: 100%;\",\n          table.getForceLineHeight() ? \"line-height: \" + rowHeight + \"px;\" : \"\",\n          \"overflow: hidden;\",\n          \"'>\",\n          this._getRowsHtml(firstRow, rowCount),\n          \"</div>\"\n        ];\n      } else {\n        // Otherwise, don't create the div, as even an empty div creates a\n        // white row in IE.\n        htmlArr = [];\n      }\n\n      var data = htmlArr.join(\"\");\n      elem.innerHTML = data;\n      this.setWidth(rowWidth);\n\n      this.__lastColCount = colCount;\n      this.__lastRowCount = rowCount;\n      this.fireEvent(\"paneUpdated\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__tableContainer = this.__paneScroller = this.__rowCache = null;\n    this.removeListener(\"track\", this._onTrack, this);\n  }\n});\n"
  ],
  "mappings": "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"
}