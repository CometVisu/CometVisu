{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "paneScroller",
    "constructor",
    "call",
    "__paneScroller",
    "__lastColCount",
    "__lastRowCount",
    "__rowCache",
    "events",
    "paneReloadsData",
    "paneUpdated",
    "properties",
    "firstVisibleRow",
    "check",
    "init",
    "apply",
    "visibleRowCount",
    "maxCacheLines",
    "allowShrinkX",
    "refine",
    "members",
    "__tableContainer",
    "__focusedRow",
    "__focusedCol",
    "__rowCacheCount",
    "_applyFirstVisibleRow",
    "value",
    "old",
    "updateContent",
    "_applyVisibleRowCount",
    "_getContentHint",
    "width",
    "getPaneScroller",
    "getTablePaneModel",
    "getTotalWidth",
    "height",
    "getTable",
    "setFocusedCell",
    "col",
    "row",
    "massUpdate",
    "oldRow",
    "onSelectionChanged",
    "onFocusChanged",
    "setColumnWidth",
    "onColOrderChanged",
    "onPaneModelChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "__rowCacheClear",
    "paneFirstRow",
    "getFirstVisibleRow",
    "rowCount",
    "getVisibleRowCount",
    "getTableModel",
    "getRowCount",
    "onTableModelMetaDataChanged",
    "_applyMaxCacheLines",
    "__P_452_8",
    "__rowCacheGet",
    "__P_452_9",
    "selected",
    "focused",
    "__rowCacheSet",
    "__P_452_10",
    "rowString",
    "getMaxCacheLines",
    "completeUpdate",
    "scrollOffset",
    "onlyRow",
    "onlySelectionOrFocusChanged",
    "Math",
    "abs",
    "min",
    "_scrollContent",
    "getAlwaysUpdateCells",
    "_updateRowStyles",
    "_updateSingleRow",
    "_updateAllRows",
    "elem",
    "getContentElement",
    "getDomElement",
    "firstChild",
    "table",
    "selectionModel",
    "getSelectionModel",
    "tableModel",
    "rowRenderer",
    "getDataRowRenderer",
    "rowNodes",
    "childNodes",
    "cellInfo",
    "y",
    "end",
    "length",
    "offset",
    "isSelectedIndex",
    "focusedRow",
    "rowData",
    "getRowData",
    "updateDataRowElement",
    "_getRowsHtml",
    "columnModel",
    "getTableColumnModel",
    "paneModel",
    "prefetchRows",
    "rowHeight",
    "getRowHeight",
    "colCount",
    "getColumnCount",
    "left",
    "cols",
    "x",
    "getColumnAtX",
    "cellWidth",
    "getColumnWidth",
    "push",
    "xPos",
    "editable",
    "isColumnEditable",
    "focusedCol",
    "styleLeft",
    "styleWidth",
    "rowsArr",
    "cachedRow",
    "rowHtml",
    "styleHeight",
    "rowAttributes",
    "getRowAttributes",
    "rowClass",
    "getRowClass",
    "rowStyle",
    "createRowStyle",
    "getRowHeightStyle",
    "stopLoop",
    "col_def",
    "attr",
    "getValue",
    "cellRenderer",
    "getDataCellRenderer",
    "style",
    "getDefaultCellStyle",
    "createDataCellHtml",
    "join",
    "fireDataEvent",
    "rowOffset",
    "el",
    "tableBody",
    "tableChildNodes",
    "tabelModel",
    "modelRowCount",
    "removeRowBase",
    "addRowBase",
    "i",
    "rowElem",
    "removeChild",
    "exp",
    "document",
    "createElement",
    "tableDummy",
    "innerHTML",
    "newTableRows",
    "appendChild",
    "insertBefore",
    "fireEvent",
    "replaceChild",
    "addListenerOnce",
    "max",
    "rowWidth",
    "htmlArr",
    "getForceLineHeight",
    "data",
    "setWidth",
    "getRenderedRowHeight",
    "getBoundingClientRect",
    "destruct",
    "removeListener",
    "_onTrack",
    "pane",
    "Pane"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The table pane that shows a certain section from a table. This class handles\r\n * the display of the data part of a table and is therefore the base for virtual\r\n * scrolling.\r\n */\r\nqx.Class.define(\"qx.ui.table.pane.Pane\", {\r\n  extend: qx.ui.core.Widget,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\r\n   */\r\n  construct(paneScroller) {\r\n    super();\r\n\r\n    this.__paneScroller = paneScroller;\r\n\r\n    this.__lastColCount = 0;\r\n    this.__lastRowCount = 0;\r\n\r\n    this.__rowCache = [];\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Whether the current view port of the pane has not loaded data.\r\n     * The data object of the event indicates if the table pane has to reload\r\n     * data or not. Can be used to give the user feedback of the loading state\r\n     * of the rows.\r\n     */\r\n    paneReloadsData: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Whenever the content of the table pane has been updated (rendered)\r\n     * trigger a paneUpdated event. This allows the canvas cellrenderer to act\r\n     * once the new cells have been integrated in the dom.\r\n     */\r\n    paneUpdated: \"qx.event.type.Event\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** The index of the first row to show. */\r\n    firstVisibleRow: {\r\n      check: \"Number\",\r\n      init: 0,\r\n      apply: \"_applyFirstVisibleRow\"\r\n    },\r\n\r\n    /** The number of rows to show. */\r\n    visibleRowCount: {\r\n      check: \"Number\",\r\n      init: 0,\r\n      apply: \"_applyVisibleRowCount\"\r\n    },\r\n\r\n    /**\r\n     * Maximum number of cached rows. If the value is <code>-1</code> the cache\r\n     * size is unlimited\r\n     */\r\n    maxCacheLines: {\r\n      check: \"Number\",\r\n      init: 1000,\r\n      apply: \"_applyMaxCacheLines\"\r\n    },\r\n\r\n    // overridden\r\n    allowShrinkX: {\r\n      refine: true,\r\n      init: false\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __lastRowCount: null,\r\n    __lastColCount: null,\r\n\r\n    __paneScroller: null,\r\n    __tableContainer: null,\r\n\r\n    __focusedRow: null,\r\n    __focusedCol: null,\r\n\r\n    // sparse array to cache rendered rows\r\n    __rowCache: null,\r\n    __rowCacheCount: 0,\r\n\r\n    // property modifier\r\n    _applyFirstVisibleRow(value, old) {\r\n      this.updateContent(false, value - old);\r\n    },\r\n\r\n    // property modifier\r\n    _applyVisibleRowCount(value, old) {\r\n      this.updateContent(true);\r\n    },\r\n\r\n    // overridden\r\n    _getContentHint() {\r\n      // the preferred height is 400 pixel. We don't use rowCount * rowHeight\r\n      // because this is typically too large.\r\n      return {\r\n        width: this.getPaneScroller().getTablePaneModel().getTotalWidth(),\r\n        height: 400\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns the TablePaneScroller this pane belongs to.\r\n     *\r\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\r\n     */\r\n    getPaneScroller() {\r\n      return this.__paneScroller;\r\n    },\r\n\r\n    /**\r\n     * Returns the table this pane belongs to.\r\n     *\r\n     * @return {qx.ui.table.Table} the table.\r\n     */\r\n    getTable() {\r\n      return this.__paneScroller.getTable();\r\n    },\r\n\r\n    /**\r\n     * Sets the currently focused cell.\r\n     *\r\n     * @param col {Integer?null} the model index of the focused cell's column.\r\n     * @param row {Integer?null} the model index of the focused cell's row.\r\n     * @param massUpdate {Boolean ? false} Whether other updates are planned as well.\r\n     *          If true, no repaint will be done.\r\n     */\r\n    setFocusedCell(col, row, massUpdate) {\r\n      if (col != this.__focusedCol || row != this.__focusedRow) {\r\n        var oldRow = this.__focusedRow;\r\n        this.__focusedCol = col;\r\n        this.__focusedRow = row;\r\n\r\n        // Update the focused row background\r\n        if (row != oldRow && !massUpdate) {\r\n          if (oldRow !== null) {\r\n            this.updateContent(false, null, oldRow, true);\r\n          }\r\n          if (row !== null) {\r\n            this.updateContent(false, null, row, true);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the selection has changed.\r\n     */\r\n    onSelectionChanged() {\r\n      this.updateContent(false, null, null, true);\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the table gets or looses the focus.\r\n     */\r\n    onFocusChanged() {\r\n      this.updateContent(false, null, null, true);\r\n    },\r\n\r\n    /**\r\n     * Sets the column width.\r\n     *\r\n     * @param col {Integer} the column to change the width for.\r\n     * @param width {Integer} the new width.\r\n     */\r\n    setColumnWidth(col, width) {\r\n      this.updateContent(true);\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called the column order has changed.\r\n     *\r\n     */\r\n    onColOrderChanged() {\r\n      this.updateContent(true);\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the pane model has changed.\r\n     */\r\n    onPaneModelChanged() {\r\n      this.updateContent(true);\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the table model data has changed.\r\n     *\r\n     * @param firstRow {Integer} The index of the first row that has changed.\r\n     * @param lastRow {Integer} The index of the last row that has changed.\r\n     * @param firstColumn {Integer} The model index of the first column that has changed.\r\n     * @param lastColumn {Integer} The model index of the last column that has changed.\r\n     */\r\n    onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn) {\r\n      this.__rowCacheClear();\r\n\r\n      var paneFirstRow = this.getFirstVisibleRow();\r\n      var rowCount = this.getVisibleRowCount();\r\n\r\n      if (\r\n        lastRow == -1 ||\r\n        (lastRow >= paneFirstRow && firstRow < paneFirstRow + rowCount)\r\n      ) {\r\n        // The change intersects this pane, check if a full or partial update is required\r\n        if (\r\n          firstRow === lastRow &&\r\n          this.getTable().getTableModel().getRowCount() > 1\r\n        ) {\r\n          this.updateContent(false, null, firstRow, false);\r\n        } else {\r\n          this.updateContent();\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the table model meta data has changed.\r\n     *\r\n     */\r\n    onTableModelMetaDataChanged() {\r\n      this.updateContent(true);\r\n    },\r\n\r\n    // property apply method\r\n    _applyMaxCacheLines(value, old) {\r\n      if (this.__rowCacheCount >= value && value !== -1) {\r\n        this.__rowCacheClear();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Clear the row cache\r\n     */\r\n    __rowCacheClear() {\r\n      this.__rowCache = [];\r\n      this.__rowCacheCount = 0;\r\n    },\r\n\r\n    /**\r\n     * Get a line from the row cache.\r\n     *\r\n     * @param row {Integer} Row index to get\r\n     * @param selected {Boolean} Whether the row is currently selected\r\n     * @param focused {Boolean} Whether the row is currently focused\r\n     * @return {String|null} The cached row or null if a row with the given\r\n     *     index is not cached.\r\n     */\r\n    __rowCacheGet(row, selected, focused) {\r\n      if (!selected && !focused && this.__rowCache[row]) {\r\n        return this.__rowCache[row];\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Add a line to the row cache.\r\n     *\r\n     * @param row {Integer} Row index to set\r\n     * @param rowString {String} computed row string to cache\r\n     * @param selected {Boolean} Whether the row is currently selected\r\n     * @param focused {Boolean} Whether the row is currently focused\r\n     */\r\n    __rowCacheSet(row, rowString, selected, focused) {\r\n      var maxCacheLines = this.getMaxCacheLines();\r\n      if (!selected && !focused && !this.__rowCache[row] && maxCacheLines > 0) {\r\n        this._applyMaxCacheLines(maxCacheLines);\r\n        this.__rowCache[row] = rowString;\r\n        this.__rowCacheCount += 1;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Updates the content of the pane.\r\n     *\r\n     * @param completeUpdate {Boolean ? false} if true a complete update is performed.\r\n     *      On a complete update all cell widgets are recreated.\r\n     * @param scrollOffset {Integer ? null} If set specifies how many rows to scroll.\r\n     * @param onlyRow {Integer ? null} if set only the specified row will be updated.\r\n     * @param onlySelectionOrFocusChanged {Boolean ? false} if true, cell values won't\r\n     *          be updated. Only the row background will.\r\n     */\r\n    updateContent(\r\n      completeUpdate,\r\n      scrollOffset,\r\n      onlyRow,\r\n      onlySelectionOrFocusChanged\r\n    ) {\r\n      if (completeUpdate) {\r\n        this.__rowCacheClear();\r\n      }\r\n\r\n      if (\r\n        scrollOffset &&\r\n        Math.abs(scrollOffset) <= Math.min(10, this.getVisibleRowCount())\r\n      ) {\r\n        this._scrollContent(scrollOffset);\r\n      } else if (\r\n        onlySelectionOrFocusChanged &&\r\n        !this.getTable().getAlwaysUpdateCells()\r\n      ) {\r\n        this._updateRowStyles(onlyRow);\r\n      } else if (typeof onlyRow == \"number\" && onlyRow >= 0) {\r\n        this._updateSingleRow(onlyRow);\r\n      } else {\r\n        this._updateAllRows();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * If only focus or selection changes it is sufficient to only update the\r\n     * row styles. This method updates the row styles of all visible rows or\r\n     * of just one row.\r\n     *\r\n     * @param onlyRow {Integer|null ? null} If this parameter is set only the row\r\n     *     with this index is updated.\r\n     */\r\n    _updateRowStyles(onlyRow) {\r\n      var elem = this.getContentElement().getDomElement();\r\n\r\n      if (!elem || !elem.firstChild) {\r\n        this._updateAllRows();\r\n        return;\r\n      }\r\n\r\n      var table = this.getTable();\r\n      var selectionModel = table.getSelectionModel();\r\n      var tableModel = table.getTableModel();\r\n      var rowRenderer = table.getDataRowRenderer();\r\n      var rowNodes = elem.firstChild.childNodes;\r\n      var cellInfo = { table: table };\r\n\r\n      // We don't want to execute the row loop below more than necessary. If\r\n      // onlyRow is not null, we want to do the loop only for that row.\r\n      // In that case, we start at (set the \"row\" variable to) that row, and\r\n      // stop at (set the \"end\" variable to the offset of) the next row.\r\n      var row = this.getFirstVisibleRow();\r\n      var y = 0;\r\n\r\n      // How many rows do we need to update?\r\n      var end = rowNodes.length;\r\n\r\n      if (onlyRow != null) {\r\n        // How many rows are we skipping?\r\n        var offset = onlyRow - row;\r\n        if (offset >= 0 && offset < end) {\r\n          row = onlyRow;\r\n          y = offset;\r\n          end = offset + 1;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n\r\n      for (; y < end; y++, row++) {\r\n        cellInfo.row = row;\r\n        cellInfo.selected = selectionModel.isSelectedIndex(row);\r\n        cellInfo.focusedRow = this.__focusedRow == row;\r\n        cellInfo.rowData = tableModel.getRowData(row);\r\n\r\n        rowRenderer.updateDataRowElement(cellInfo, rowNodes[y]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the HTML table fragment for the given row range.\r\n     *\r\n     * @param firstRow {Integer} Index of the first row\r\n     * @param rowCount {Integer} Number of rows\r\n     * @return {String} The HTML table fragment for the given row range.\r\n     */\r\n    _getRowsHtml(firstRow, rowCount) {\r\n      var table = this.getTable();\r\n\r\n      var selectionModel = table.getSelectionModel();\r\n      var tableModel = table.getTableModel();\r\n      var columnModel = table.getTableColumnModel();\r\n      var paneModel = this.getPaneScroller().getTablePaneModel();\r\n      var rowRenderer = table.getDataRowRenderer();\r\n\r\n      tableModel.prefetchRows(firstRow, firstRow + rowCount - 1);\r\n\r\n      var rowHeight = table.getRowHeight();\r\n      var colCount = paneModel.getColumnCount();\r\n      var left = 0;\r\n      var cols = [];\r\n\r\n      // precompute column properties\r\n      for (var x = 0; x < colCount; x++) {\r\n        var col = paneModel.getColumnAtX(x);\r\n        var cellWidth = columnModel.getColumnWidth(col);\r\n        cols.push({\r\n          col: col,\r\n          xPos: x,\r\n          editable: tableModel.isColumnEditable(col),\r\n          focusedCol: this.__focusedCol == col,\r\n          styleLeft: left,\r\n          styleWidth: cellWidth\r\n        });\r\n\r\n        left += cellWidth;\r\n      }\r\n\r\n      var rowsArr = [];\r\n      var paneReloadsData = false;\r\n      for (var row = firstRow; row < firstRow + rowCount; row++) {\r\n        var selected = selectionModel.isSelectedIndex(row);\r\n        var focusedRow = this.__focusedRow == row;\r\n\r\n        var cachedRow = this.__rowCacheGet(row, selected, focusedRow);\r\n        if (cachedRow) {\r\n          rowsArr.push(cachedRow);\r\n          continue;\r\n        }\r\n\r\n        var rowHtml = [];\r\n\r\n        var cellInfo = { table: table };\r\n        cellInfo.styleHeight = rowHeight;\r\n\r\n        cellInfo.row = row;\r\n        cellInfo.selected = selected;\r\n        cellInfo.focusedRow = focusedRow;\r\n        cellInfo.rowData = tableModel.getRowData(row);\r\n\r\n        if (!cellInfo.rowData) {\r\n          paneReloadsData = true;\r\n        }\r\n\r\n        rowHtml.push(\"<div \");\r\n\r\n        var rowAttributes = rowRenderer.getRowAttributes(cellInfo);\r\n        if (rowAttributes) {\r\n          rowHtml.push(rowAttributes);\r\n        }\r\n\r\n        var rowClass = rowRenderer.getRowClass(cellInfo);\r\n        if (rowClass) {\r\n          rowHtml.push('class=\"', rowClass, '\" ');\r\n        }\r\n\r\n        var rowStyle = rowRenderer.createRowStyle(cellInfo);\r\n        rowStyle +=\r\n          \";position:relative;\" +\r\n          rowRenderer.getRowHeightStyle(rowHeight) +\r\n          \"width:100%;\";\r\n        if (rowStyle) {\r\n          rowHtml.push('style=\"', rowStyle, '\" ');\r\n        }\r\n        rowHtml.push(\">\");\r\n\r\n        var stopLoop = false;\r\n        for (x = 0; x < colCount && !stopLoop; x++) {\r\n          var col_def = cols[x];\r\n          for (var attr in col_def) {\r\n            cellInfo[attr] = col_def[attr];\r\n          }\r\n          var col = cellInfo.col;\r\n\r\n          // Use the \"getValue\" method of the tableModel to get the cell's\r\n          // value working directly on the \"rowData\" object\r\n          // (-> cellInfo.rowData[col];) is not a solution because you can't\r\n          // work with the columnIndex -> you have to use the columnId of the\r\n          // columnIndex This is exactly what the method \"getValue\" does\r\n          cellInfo.value = tableModel.getValue(col, row);\r\n          var cellRenderer = columnModel.getDataCellRenderer(col);\r\n\r\n          // Retrieve the current default cell style for this column.\r\n          cellInfo.style = cellRenderer.getDefaultCellStyle();\r\n\r\n          // Allow a cell renderer to tell us not to draw any further cells in\r\n          // the row. Older, or traditional cell renderers don't return a\r\n          // value, however, from createDataCellHtml, so assume those are\r\n          // returning false.\r\n          //\r\n          // Tested with http://tinyurl.com/333hyhv\r\n          stopLoop =\r\n            cellRenderer.createDataCellHtml(cellInfo, rowHtml) || false;\r\n        }\r\n        rowHtml.push(\"</div>\");\r\n\r\n        var rowString = rowHtml.join(\"\");\r\n\r\n        this.__rowCacheSet(row, rowString, selected, focusedRow);\r\n        rowsArr.push(rowString);\r\n      }\r\n      this.fireDataEvent(\"paneReloadsData\", paneReloadsData);\r\n      return rowsArr.join(\"\");\r\n    },\r\n\r\n    /**\r\n     * Scrolls the pane's contents by the given offset.\r\n     *\r\n     * @param rowOffset {Integer} Number of lines to scroll. Scrolling up is\r\n     *     represented by a negative offset.\r\n     */\r\n    _scrollContent(rowOffset) {\r\n      var el = this.getContentElement().getDomElement();\r\n      if (!(el && el.firstChild)) {\r\n        this._updateAllRows();\r\n        return;\r\n      }\r\n\r\n      var tableBody = el.firstChild;\r\n      var tableChildNodes = tableBody.childNodes;\r\n      var rowCount = this.getVisibleRowCount();\r\n      var firstRow = this.getFirstVisibleRow();\r\n\r\n      var tabelModel = this.getTable().getTableModel();\r\n      var modelRowCount = 0;\r\n\r\n      modelRowCount = tabelModel.getRowCount();\r\n\r\n      // don't handle this special case here\r\n      if (firstRow + rowCount > modelRowCount) {\r\n        this._updateAllRows();\r\n        return;\r\n      }\r\n\r\n      // remove old lines\r\n      var removeRowBase = rowOffset < 0 ? rowCount + rowOffset : 0;\r\n      var addRowBase = rowOffset < 0 ? 0 : rowCount - rowOffset;\r\n\r\n      for (var i = Math.abs(rowOffset) - 1; i >= 0; i--) {\r\n        var rowElem = tableChildNodes[removeRowBase];\r\n        try {\r\n          tableBody.removeChild(rowElem);\r\n        } catch (exp) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // render new lines\r\n      if (!this.__tableContainer) {\r\n        this.__tableContainer = document.createElement(\"div\");\r\n      }\r\n      var tableDummy = \"<div>\";\r\n      tableDummy += this._getRowsHtml(\r\n        firstRow + addRowBase,\r\n        Math.abs(rowOffset)\r\n      );\r\n\r\n      tableDummy += \"</div>\";\r\n      this.__tableContainer.innerHTML = tableDummy;\r\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\r\n\r\n      // append new lines\r\n      if (rowOffset > 0) {\r\n        for (var i = newTableRows.length - 1; i >= 0; i--) {\r\n          var rowElem = newTableRows[0];\r\n          tableBody.appendChild(rowElem);\r\n        }\r\n      } else {\r\n        for (var i = newTableRows.length - 1; i >= 0; i--) {\r\n          var rowElem = newTableRows[newTableRows.length - 1];\r\n          tableBody.insertBefore(rowElem, tableBody.firstChild);\r\n        }\r\n      }\r\n\r\n      // update focus indicator\r\n      if (this.__focusedRow !== null) {\r\n        this._updateRowStyles(this.__focusedRow - rowOffset);\r\n        this._updateRowStyles(this.__focusedRow);\r\n      }\r\n      this.fireEvent(\"paneUpdated\");\r\n    },\r\n\r\n    _updateSingleRow(row) {\r\n      var elem = this.getContentElement().getDomElement();\r\n      if (!elem || !elem.firstChild) {\r\n        // pane has not yet been rendered, just exit\r\n        return;\r\n      }\r\n      var visibleRowCount = this.getVisibleRowCount();\r\n      var firstRow = this.getFirstVisibleRow();\r\n\r\n      if (row < firstRow || row > firstRow + visibleRowCount) {\r\n        // No need to redraw it\r\n        return;\r\n      }\r\n\r\n      var modelRowCount = this.getTable().getTableModel().getRowCount();\r\n\r\n      var tableBody = elem.firstChild;\r\n      var tableChildNodes = tableBody.childNodes;\r\n      var offset = row - firstRow;\r\n      var rowElem = tableChildNodes[offset];\r\n\r\n      // `row` can be too big if rows were deleted. In that case, we\r\n      // can't update the current single row\r\n      if (row >= modelRowCount || typeof rowElem == \"undefined\") {\r\n        this._updateAllRows();\r\n        return;\r\n      }\r\n\r\n      // render new lines\r\n      if (!this.__tableContainer) {\r\n        this.__tableContainer = document.createElement(\"div\");\r\n      }\r\n      this.__tableContainer.innerHTML =\r\n        \"<div>\" + this._getRowsHtml(row, 1) + \"</div>\";\r\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\r\n\r\n      tableBody.replaceChild(newTableRows[0], rowElem);\r\n\r\n      // update focus indicator\r\n      this._updateRowStyles(null);\r\n\r\n      this.fireEvent(\"paneUpdated\");\r\n    },\r\n\r\n    /**\r\n     * Updates the content of the pane (implemented using array joins).\r\n     */\r\n    _updateAllRows() {\r\n      var elem = this.getContentElement().getDomElement();\r\n      if (!elem) {\r\n        // pane has not yet been rendered\r\n        this.addListenerOnce(\"appear\", this._updateAllRows, this);\r\n        return;\r\n      }\r\n\r\n      var table = this.getTable();\r\n\r\n      var tableModel = table.getTableModel();\r\n      var paneModel = this.getPaneScroller().getTablePaneModel();\r\n\r\n      var colCount = paneModel.getColumnCount();\r\n      var rowHeight = table.getRowHeight();\r\n      var firstRow = this.getFirstVisibleRow();\r\n\r\n      var rowCount = this.getVisibleRowCount();\r\n      var modelRowCount = tableModel.getRowCount();\r\n\r\n      if (firstRow + rowCount > modelRowCount) {\r\n        rowCount = Math.max(0, modelRowCount - firstRow);\r\n      }\r\n\r\n      var rowWidth = paneModel.getTotalWidth();\r\n      var htmlArr;\r\n\r\n      // If there are any rows...\r\n      if (rowCount > 0) {\r\n        // ... then create a div for them and add the rows to it.\r\n        htmlArr = [\r\n          \"<div style='\",\r\n          \"width: 100%;\",\r\n          table.getForceLineHeight() ? \"line-height: \" + rowHeight + \"px;\" : \"\",\r\n          \"overflow: hidden;\",\r\n          \"'>\",\r\n          this._getRowsHtml(firstRow, rowCount),\r\n          \"</div>\"\r\n        ];\r\n      } else {\r\n        // Otherwise, don't create the div, as even an empty div creates a\r\n        // white row in IE.\r\n        htmlArr = [];\r\n      }\r\n\r\n      var data = htmlArr.join(\"\");\r\n      elem.innerHTML = data;\r\n      this.setWidth(rowWidth);\r\n\r\n      this.__lastColCount = colCount;\r\n      this.__lastRowCount = rowCount;\r\n      this.fireEvent(\"paneUpdated\");\r\n    },\r\n\r\n    getRenderedRowHeight() {\r\n      var rowHeight = this.getTable().getRowHeight();\r\n\r\n      var elem = this.getContentElement().getDomElement();\r\n      if (elem && elem.firstChild) {\r\n        // pane has been rendered\r\n        var tableBody = elem.firstChild;\r\n        if (tableBody.childNodes && tableBody.childNodes.length > 0) {\r\n          rowHeight = tableBody.childNodes[0].getBoundingClientRect().height;\r\n        }\r\n      }\r\n      return rowHeight;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this.__tableContainer = this.__paneScroller = this.__rowCache = null;\r\n    this.removeListener(\"track\", this._onTrack, this);\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}