{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Model.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "tableColumnModel",
    "setTableColumnModel",
    "events",
    "statics",
    "EVENT_TYPE_MODEL_CHANGED",
    "properties",
    "firstColumnX",
    "check",
    "init",
    "apply",
    "maxColumnCount",
    "members",
    "__columnCount",
    "__tableColumnModel",
    "_applyFirstColumnX",
    "value",
    "old",
    "fireEvent",
    "ui",
    "table",
    "pane",
    "Model",
    "_applyMaxColumnCount",
    "removeListener",
    "_onColVisibilityChanged",
    "_onHeaderCellRendererChanged",
    "addListener",
    "evt",
    "getColumnCount",
    "firstX",
    "getFirstColumnX",
    "maxColCount",
    "getMaxColumnCount",
    "totalColCount",
    "getVisibleColumnCount",
    "getColumnAtX",
    "xPos",
    "getVisibleColumnAtX",
    "getX",
    "col",
    "x",
    "getVisibleX",
    "getColumnLeft",
    "left",
    "colCount",
    "currCol",
    "getColumnWidth",
    "getTotalWidth",
    "totalWidth",
    "destruct"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;;AAME;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,gBAAT,EACZ;AACE;AAEA,WAAKC,mBAAL,CAAyBD,gBAAzB;AACD,KAtBH;;AA2BE;AACF;AACA;AACA;AACA;AAEEE,IAAAA,MAAM,EACN;AACE;AACA,sBAAiB;AAFnB,KAlCF;;AAyCE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AAEE;AACAC,MAAAA,wBAAwB,EAAG;AAH7B,KAhDF;;AAyDE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,UAAU,EACV;AAEE;AACAC,MAAAA,YAAY,EACZ;AACEC,QAAAA,KAAK,EAAG,SADV;AAEEC,QAAAA,IAAI,EAAG,CAFT;AAGEC,QAAAA,KAAK,EAAG;AAHV,OAJF;;AAWE;AACJ;AACA;AACA;AACIC,MAAAA,cAAc,EACd;AACEH,QAAAA,KAAK,EAAG,QADV;AAEEC,QAAAA,IAAI,EAAG,CAAC,CAFV;AAGEC,QAAAA,KAAK,EAAG;AAHV;AAhBF,KAhEF;;AA0FE;AACF;AACA;AACA;AACA;AAEEE,IAAAA,OAAO,EACP;AACEC,MAAAA,SAAa,EAAG,IADlB;AAEEC,MAAAA,SAAkB,EAAG,IAFvB;AAKE;AACAC,MAAAA,kBAAkB,EAAG,4BAASC,KAAT,EAAgBC,GAAhB,EACrB;AACE,aAAKJ,SAAL,GAAqB,IAArB;AACA,aAAKK,SAAL,CAAe3B,EAAE,CAAC4B,EAAH,CAAMC,KAAN,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuBjB,wBAAtC;AACD,OAVH;AAYE;AACAkB,MAAAA,oBAAoB,EAAG,8BAASP,KAAT,EAAgBC,GAAhB,EACvB;AACE,aAAKJ,SAAL,GAAqB,IAArB;AACA,aAAKK,SAAL,CAAe3B,EAAE,CAAC4B,EAAH,CAAMC,KAAN,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuBjB,wBAAtC;AACD,OAjBH;;AAoBE;AACJ;AACA;AACA;AACA;AACIH,MAAAA,mBAAmB,EAAG,6BAASD,gBAAT,EACtB;AACE,YAAI,KAAKa,SAAT,EAA6B;AAC3B,eAAKA,SAAL,CAAwBU,cAAxB,CAAuC,sBAAvC,EAA+D,KAAKC,uBAApE,EAA6F,IAA7F;;AACA,eAAKX,SAAL,CAAwBU,cAAxB,CAAuC,2BAAvC,EAAoE,KAAKE,4BAAzE,EAAuG,IAAvG;AACD;;AACD,aAAKZ,SAAL,GAA0Bb,gBAA1B;;AACA,aAAKa,SAAL,CAAwBa,WAAxB,CAAoC,sBAApC,EAA4D,KAAKF,uBAAjE,EAA0F,IAA1F;;AACA,aAAKX,SAAL,CAAwBa,WAAxB,CAAoC,2BAApC,EAAiE,KAAKD,4BAAtE,EAAoG,IAApG;;AACA,aAAKb,SAAL,GAAqB,IAArB;AACD,OAnCH;;AAsCE;AACJ;AACA;AACA;AACA;AACIY,MAAAA,uBAAuB,EAAG,iCAASG,GAAT,EAC1B;AACE,aAAKf,SAAL,GAAqB,IAArB;AAEA,aAAKK,SAAL,CAAe3B,EAAE,CAAC4B,EAAH,CAAMC,KAAN,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuBjB,wBAAtC;AACD,OAhDH;;AAmDE;AACJ;AACA;AACA;AACA;AACIqB,MAAAA,4BAA4B,EAAG,sCAASE,GAAT,EAC/B;AACE,aAAKV,SAAL,CAAe3B,EAAE,CAAC4B,EAAH,CAAMC,KAAN,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuBjB,wBAAtC;AACD,OA3DH;;AA8DE;AACJ;AACA;AACA;AACA;AACIwB,MAAAA,cAAc,EAAG,0BACjB;AACE,YAAI,KAAKhB,SAAL,IAAsB,IAA1B,EACA;AACE,cAAIiB,MAAM,GAAG,KAAKC,eAAL,EAAb;AACA,cAAIC,WAAW,GAAG,KAAKC,iBAAL,EAAlB;;AACA,cAAIC,aAAa,GAAG,KAAKpB,SAAL,CAAwBqB,qBAAxB,EAApB;;AAEA,cAAIH,WAAW,IAAI,CAAC,CAAhB,IAAsBF,MAAM,GAAGE,WAAV,GAAyBE,aAAlD,EAAiE;AAC/D,iBAAKrB,SAAL,GAAqBqB,aAAa,GAAGJ,MAArC;AACD,WAFD,MAEO;AACL,iBAAKjB,SAAL,GAAqBmB,WAArB;AACD;AACF;;AAED,eAAO,KAAKnB,SAAZ;AACD,OAnFH;;AAsFE;AACJ;AACA;AACA;AACA;AACA;AACIuB,MAAAA,YAAY,EAAG,sBAASC,IAAT,EACf;AACE,YAAIP,MAAM,GAAG,KAAKC,eAAL,EAAb;AACA,eAAO,KAAKjB,SAAL,CAAwBwB,mBAAxB,CAA4CR,MAAM,GAAGO,IAArD,CAAP;AACD,OAhGH;;AAmGE;AACJ;AACA;AACA;AACA;AACA;AACIE,MAAAA,IAAI,EAAG,cAASC,GAAT,EACP;AACE,YAAIV,MAAM,GAAG,KAAKC,eAAL,EAAb;AACA,YAAIC,WAAW,GAAG,KAAKC,iBAAL,EAAlB;AAEA,YAAIQ,CAAC,GAAG,KAAK3B,SAAL,CAAwB4B,WAAxB,CAAoCF,GAApC,IAA2CV,MAAnD;;AAEA,YAAIW,CAAC,IAAI,CAAL,KAAWT,WAAW,IAAI,CAAC,CAAhB,IAAqBS,CAAC,GAAGT,WAApC,CAAJ,EAAsD;AACpD,iBAAOS,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,CAAC,CAAR;AACD;AACF,OArHH;;AAwHE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,MAAAA,aAAa,EAAG,uBAASH,GAAT,EAChB;AACE,YAAII,IAAI,GAAG,CAAX;AACA,YAAIC,QAAQ,GAAG,KAAKhB,cAAL,EAAf;;AAEA,aAAK,IAAIY,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACI,QAAhB,EAA0BJ,CAAC,EAA3B,EACA;AACE,cAAIK,OAAO,GAAG,KAAKV,YAAL,CAAkBK,CAAlB,CAAd;;AAEA,cAAIK,OAAO,IAAIN,GAAf,EAAoB;AAClB,mBAAOI,IAAP;AACD;;AAEDA,UAAAA,IAAI,IAAI,KAAK9B,SAAL,CAAwBiC,cAAxB,CAAuCD,OAAvC,CAAR;AACD;;AAED,eAAO,CAAC,CAAR;AACD,OAnJH;;AAsJE;AACJ;AACA;AACA;AACA;AACIE,MAAAA,aAAa,EAAG,yBAChB;AACE,YAAIC,UAAU,GAAG,CAAjB;AACA,YAAIJ,QAAQ,GAAG,KAAKhB,cAAL,EAAf;;AAEA,aAAK,IAAIY,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACI,QAAhB,EAA0BJ,CAAC,EAA3B,EACA;AACE,cAAID,GAAG,GAAG,KAAKJ,YAAL,CAAkBK,CAAlB,CAAV;AACAQ,UAAAA,UAAU,IAAI,KAAKnC,SAAL,CAAwBiC,cAAxB,CAAuCP,GAAvC,CAAd;AACD;;AAED,eAAOS,UAAP;AACD;AAvKH,KAjGF;;AA8QE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,QAAQ,EAAG,oBAAW;AACpB,UAAI,KAAKpC,SAAT,EACA;AACE,aAAKA,SAAL,CAAwBU,cAAxB,CAAuC,sBAAvC,EAA+D,KAAKC,uBAApE,EAA6F,IAA7F;;AACA,aAAKX,SAAL,CAAwBU,cAAxB,CAAuC,2BAAvC,EAAoE,KAAKE,4BAAzE,EAAuG,IAAvG;AACD;;AACD,WAAKZ,SAAL,GAA0B,IAA1B;AACD;AA3RH,GADA;AAvBAvB,EAAAA,EAAE,CAAC4B,EAAH,CAAMC,KAAN,CAAYC,IAAZ,CAAiBC,KAAjB,CAAuB5B,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * The model of a table pane. This model works as proxy to a\n * {@link qx.ui.table.columnmodel.Basic} and manages the visual order of the columns shown in\n * a {@link Pane}.\n */\nqx.Class.define(\"qx.ui.table.pane.Model\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   *\n   * @param tableColumnModel {qx.ui.table.columnmodel.Basic} The TableColumnModel of which this\n   *    model is the proxy.\n   */\n  construct : function(tableColumnModel)\n  {\n    this.base(arguments);\n\n    this.setTableColumnModel(tableColumnModel);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fired when the model changed. */\n    \"modelChanged\" : \"qx.event.type.Event\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /** @type {string} The type of the event fired when the model changed. */\n    EVENT_TYPE_MODEL_CHANGED : \"modelChanged\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /** The visible x position of the first column this model should contain. */\n    firstColumnX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyFirstColumnX\"\n    },\n\n\n    /**\n     * The maximum number of columns this model should contain. If -1 this model will\n     * contain all remaining columns.\n     */\n    maxColumnCount :\n    {\n      check : \"Number\",\n      init : -1,\n      apply : \"_applyMaxColumnCount\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __columnCount : null,\n    __tableColumnModel : null,\n\n\n    // property modifier\n    _applyFirstColumnX : function(value, old)\n    {\n      this.__columnCount = null;\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n    // property modifier\n    _applyMaxColumnCount : function(value, old)\n    {\n      this.__columnCount = null;\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n\n    /**\n     * Connects the table model to the column model\n     *\n     * @param tableColumnModel {qx.ui.table.columnmodel.Basic} the column model\n     */\n    setTableColumnModel : function(tableColumnModel)\n    {\n      if (this.__tableColumnModel) {\n        this.__tableColumnModel.removeListener(\"visibilityChangedPre\", this._onColVisibilityChanged, this);\n        this.__tableColumnModel.removeListener(\"headerCellRendererChanged\", this._onHeaderCellRendererChanged, this);\n      }\n      this.__tableColumnModel = tableColumnModel;\n      this.__tableColumnModel.addListener(\"visibilityChangedPre\", this._onColVisibilityChanged, this);\n      this.__tableColumnModel.addListener(\"headerCellRendererChanged\", this._onHeaderCellRendererChanged, this);\n      this.__columnCount = null;\n    },\n\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColVisibilityChanged : function(evt)\n    {\n      this.__columnCount = null;\n\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n\n    /**\n     * Event handler. Called when the cell renderer of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onHeaderCellRendererChanged : function(evt)\n    {\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n\n    /**\n     * Returns the number of columns in this model.\n     *\n     * @return {Integer} the number of columns in this model.\n     */\n    getColumnCount : function()\n    {\n      if (this.__columnCount == null)\n      {\n        var firstX = this.getFirstColumnX();\n        var maxColCount = this.getMaxColumnCount();\n        var totalColCount = this.__tableColumnModel.getVisibleColumnCount();\n\n        if (maxColCount == -1 || (firstX + maxColCount) > totalColCount) {\n          this.__columnCount = totalColCount - firstX;\n        } else {\n          this.__columnCount = maxColCount;\n        }\n      }\n\n      return this.__columnCount;\n    },\n\n\n    /**\n     * Returns the model index of the column at the position <code>xPos</code>.\n     *\n     * @param xPos {Integer} the x position in the table pane of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getColumnAtX : function(xPos)\n    {\n      var firstX = this.getFirstColumnX();\n      return this.__tableColumnModel.getVisibleColumnAtX(firstX + xPos);\n    },\n\n\n    /**\n     * Returns the x position of the column <code>col</code>.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the x position in the table pane of the column.\n     */\n    getX : function(col)\n    {\n      var firstX = this.getFirstColumnX();\n      var maxColCount = this.getMaxColumnCount();\n\n      var x = this.__tableColumnModel.getVisibleX(col) - firstX;\n\n      if (x >= 0 && (maxColCount == -1 || x < maxColCount)) {\n        return x;\n      } else {\n        return -1;\n      }\n    },\n\n\n    /**\n     * Gets the position of the left side of a column (in pixels, relative to the\n     * left side of the table pane).\n     *\n     * This value corresponds to the sum of the widths of all columns left of the\n     * column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {var} the position of the left side of the column.\n     */\n    getColumnLeft : function(col)\n    {\n      var left = 0;\n      var colCount = this.getColumnCount();\n\n      for (var x=0; x<colCount; x++)\n      {\n        var currCol = this.getColumnAtX(x);\n\n        if (currCol == col) {\n          return left;\n        }\n\n        left += this.__tableColumnModel.getColumnWidth(currCol);\n      }\n\n      return -1;\n    },\n\n\n    /**\n     * Returns the total width of all columns in the model.\n     *\n     * @return {Integer} the total width of all columns in the model.\n     */\n    getTotalWidth : function()\n    {\n      var totalWidth = 0;\n      var colCount = this.getColumnCount();\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = this.getColumnAtX(x);\n        totalWidth += this.__tableColumnModel.getColumnWidth(col);\n      }\n\n      return totalWidth;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    if (this.__tableColumnModel)\n    {\n      this.__tableColumnModel.removeListener(\"visibilityChangedPre\", this._onColVisibilityChanged, this);\n      this.__tableColumnModel.removeListener(\"headerCellRendererChanged\", this._onHeaderCellRendererChanged, this);\n    }\n    this.__tableColumnModel = null;\n  }\n});\n"
  ]
}