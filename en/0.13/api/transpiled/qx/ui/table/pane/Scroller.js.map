{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "scroll",
    "MScrollBarFactory",
    "construct",
    "table",
    "constructor",
    "call",
    "__table",
    "grid",
    "layout",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "_setLayout",
    "__header",
    "_showChildControl",
    "__tablePane",
    "__top",
    "container",
    "Composite",
    "HBox",
    "set",
    "minWidth",
    "_add",
    "row",
    "column",
    "colSpan",
    "_headerClipper",
    "_createHeaderClipper",
    "add",
    "addListener",
    "_onChangeCaptureHeader",
    "_onPointermoveHeader",
    "_onPointerdownHeader",
    "_onPointerupHeader",
    "_onTapHeader",
    "flex",
    "_paneClipper",
    "_createPaneClipper",
    "_onRoll",
    "_onPointermovePane",
    "_onPointerdownPane",
    "_onTapPane",
    "_onContextMenu",
    "Environment",
    "get",
    "_onDbltapPane",
    "_onResizePane",
    "__clipperContainer",
    "setLayout",
    "Canvas",
    "edge",
    "__horScrollBar",
    "__verScrollBar",
    "__focusIndicator",
    "getChildControl",
    "initShowCellFocusIndicator",
    "hide",
    "_onPointerout",
    "_onAppear",
    "_onDisappear",
    "__timer",
    "event",
    "Timer",
    "_oninterval",
    "initScrollTimeout",
    "statics",
    "MIN_COLUMN_WIDTH",
    "RESIZE_REGION_RADIUS",
    "TAP_TOLERANCE",
    "HORIZONTAL_SCROLLBAR",
    "VERTICAL_SCROLLBAR",
    "events",
    "changeScrollY",
    "changeScrollX",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "beforeSort",
    "properties",
    "horizontalScrollBarVisible",
    "check",
    "init",
    "apply",
    "nullable",
    "verticalScrollBarVisible",
    "tablePaneModel",
    "liveResize",
    "focusCellOnPointerMove",
    "selectBeforeFocus",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "scrollTimeout",
    "appearance",
    "refine",
    "minCellEditHeight",
    "members",
    "__lastRowCount",
    "__updateInterval",
    "__updateContentPlanned",
    "__onintervalWrapper",
    "_moveColumn",
    "__lastMoveColPos",
    "_lastMoveTargetX",
    "_lastMoveTargetScroller",
    "__lastMovePointerPageX",
    "__resizeColumn",
    "__lastResizePointerPageX",
    "__lastResizeWidth",
    "__lastPointerDownCell",
    "__firedTapEvent",
    "__ignoreTap",
    "__lastPointerPageX",
    "__lastPointerPageY",
    "__focusedCol",
    "__focusedRow",
    "_cellEditor",
    "__cellEditorFactory",
    "__topRightWidget",
    "__focusIndicatorPointerDownListener",
    "getPaneInsetRight",
    "topRight",
    "getTopRightWidget",
    "topRightWidth",
    "isVisible",
    "getBounds",
    "width",
    "getMarginLeft",
    "getMarginRight",
    "scrollBar",
    "scrollBarWidth",
    "getVerticalScrollBarVisible",
    "getVerticalScrollBarWidth",
    "Math",
    "max",
    "setPaneWidth",
    "isVerticalScrollBarVisible",
    "setWidth",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "getTable",
    "getNewTablePaneHeader",
    "getNewTablePane",
    "pane",
    "FocusIndicator",
    "setUserBounds",
    "setZIndex",
    "_onPointerupFocusIndicator",
    "show",
    "setDecorator",
    "_createScrollBar",
    "alignY",
    "_onScrollX",
    "setMinHeight",
    "AbstractScrollArea",
    "DEFAULT_SCROLLBAR_WIDTH",
    "bottom",
    "right",
    "left",
    "_onScrollY",
    "top",
    "Scroller",
    "superclass",
    "prototype",
    "_applyHorizontalScrollBarVisible",
    "value",
    "old",
    "setVisibility",
    "_applyVerticalScrollBarVisible",
    "_applyTablePaneModel",
    "removeListener",
    "_onPaneModelChanged",
    "_applyShowCellFocusIndicator",
    "_updateFocusIndicator",
    "getScrollY",
    "getPosition",
    "setScrollY",
    "scrollY",
    "renderSync",
    "scrollTo",
    "_updateContent",
    "getScrollX",
    "setScrollX",
    "scrollX",
    "Clipper",
    "onColVisibilityChanged",
    "updateHorScrollBarMaximum",
    "setColumnWidth",
    "col",
    "paneModel",
    "getTablePaneModel",
    "x",
    "getX",
    "onColOrderChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "rowCount",
    "getTableModel",
    "getRowCount",
    "updateVerScrollBarMaximum",
    "focusedRow",
    "getFocusedRow",
    "setFocusedCell",
    "getFocusedColumn",
    "onSelectionChanged",
    "onFocusChanged",
    "onTableModelMetaDataChanged",
    "onPaneModelChanged",
    "_updateScrollBarVisibility",
    "paneSize",
    "getInnerSize",
    "scrollSize",
    "getTotalWidth",
    "setMaximum",
    "setKnobFactor",
    "pos",
    "setPosition",
    "min",
    "tableModel",
    "getKeepFirstVisibleRowComplete",
    "rowHeight",
    "getRowHeight",
    "height",
    "onKeepFirstVisibleRowCompleteChanged",
    "_startInterval",
    "getScrollTimeout",
    "_stopInterval",
    "e",
    "scrollLeft",
    "getData",
    "fireDataEvent",
    "getOldData",
    "scrollToX",
    "__inOnScrollY",
    "scrollbar",
    "delta",
    "abs",
    "getMaximum",
    "_postponedUpdateContent",
    "getPointerType",
    "getEnabled",
    "getDelta",
    "y",
    "scrollBy",
    "parseInt",
    "scrolled",
    "__isAtEdge",
    "getFocusCellOnPointerMove",
    "_focusCellAtPagePos",
    "stop",
    "stopMomentum",
    "__P_680_29",
    "position",
    "__handleResizeColumn",
    "__P_680_30",
    "pageX",
    "headerCell",
    "getHeaderWidgetAtColumn",
    "minColumnWidth",
    "getSizeHint",
    "newWidth",
    "getLiveResize",
    "columnModel",
    "getTableColumnModel",
    "_showResizeLine",
    "getColumnLeft",
    "__handleMoveColumn",
    "__P_680_31",
    "tapTolerance",
    "isShowingColumnMoveFeedback",
    "showColumnMoveFeedback",
    "targetScroller",
    "getTablePaneScrollerAtPageX",
    "hideColumnMoveFeedback",
    "useResizeCursor",
    "pointerOverColumn",
    "getDocumentLeft",
    "pageY",
    "getDocumentTop",
    "stopPropagation",
    "resizeCol",
    "_getResizeColumnForPageX",
    "_getColumnForPageX",
    "isColumnSortable",
    "cursor",
    "getApplicationRoot",
    "setGlobalCursor",
    "setCursor",
    "setPointerOverColumn",
    "_getRowForPagePos",
    "_startResizeHeader",
    "moveCol",
    "_startMoveHeader",
    "getColumnWidth",
    "capture",
    "isEditing",
    "stopEditing",
    "getRow",
    "getColumn",
    "fireEvent",
    "CellEvent",
    "_stopResizeHeader",
    "_stopMoveHeader",
    "_hideResizeLine",
    "releaseCapture",
    "fromVisXPos",
    "getFirstColumnX",
    "toVisXPos",
    "fromCol",
    "getVisibleColumnAtX",
    "toCol",
    "fromOverXPos",
    "getOverallX",
    "toOverXPos",
    "getOverallColumnCount",
    "moveColumn",
    "sortCol",
    "getSortColumnIndex",
    "ascending",
    "isSortAscending",
    "data",
    "tapEvent",
    "sortByColumn",
    "getResetSelectionOnHeaderTap",
    "getSelectionModel",
    "resetSelection",
    "getSelectBeforeFocus",
    "getSelectionManager",
    "handleTap",
    "isHidden",
    "getResetSelectionOnTapBelowRows",
    "getContextMenuFromDataCellsOnly",
    "getShowCellFocusIndicator",
    "menu",
    "getContextMenu",
    "getChildren",
    "length",
    "openAtPointer",
    "exclude",
    "preventDefault",
    "_onContextMenuOpen",
    "startEditing",
    "resizeLine",
    "getWidth",
    "paneBounds",
    "round",
    "_excludeChildControl",
    "paneLeft",
    "getContentLocation",
    "colCount",
    "getColumnCount",
    "targetXPos",
    "targetX",
    "currX",
    "xPos",
    "getColumnAtX",
    "colWidth",
    "scrollerLeft",
    "scrollerWidth",
    "lang",
    "Number",
    "limit",
    "scrollCellVisible",
    "clipperSize",
    "colLeft",
    "rowTop",
    "minScrollX",
    "maxScrollX",
    "minScrollY",
    "maxScrollY",
    "_this",
    "isColumnEditable",
    "getValue",
    "getCellEditorFactory",
    "cellInfo",
    "createCellEditor",
    "window",
    "Window",
    "setModal",
    "setShowClose",
    "_onCellEditorModalWindowClose",
    "f",
    "getModalCellEditorPreOpenFunction",
    "open",
    "addState",
    "setKeepActive",
    "addListenerOnce",
    "_onFocusinCellEditorAddBlurListener",
    "focus",
    "activate",
    "flushEditor",
    "cancel",
    "getCellEditorValue",
    "oldValue",
    "setValue",
    "cancelEditing",
    "removeState",
    "removeListenerById",
    "destroy",
    "debug",
    "getTarget",
    "$$hash",
    "once",
    "_onBlurCellEditorStopEditing",
    "getCellEditorBlurAction",
    "contentLocation",
    "regionRadius",
    "panePos",
    "getRenderedRowHeight",
    "floor",
    "tableY",
    "headerPos",
    "setTopRightWidget",
    "widget",
    "oldWidget",
    "remove",
    "getHeader",
    "getTablePane",
    "getNeededScrollBars",
    "forceHorizontal",
    "preventVertical",
    "verScrollBar",
    "verBarWidth",
    "horScrollBar",
    "horBarHeight",
    "getMarginTop",
    "getMarginBottom",
    "viewWidth",
    "viewHeight",
    "getHorizontalScrollBarVisible",
    "paneWidth",
    "paneHeight",
    "horNeeded",
    "verNeeded",
    "horBar",
    "verBar",
    "getPaneClipper",
    "getScrollAreaContainer",
    "_applyScrollTimeout",
    "timeout",
    "setInterval",
    "start",
    "GlobalError",
    "observeMethod",
    "_layoutPending",
    "oldFirstRow",
    "getFirstVisibleRow",
    "setFirstVisibleRow",
    "visibleRowCount",
    "ceil",
    "paneOffset",
    "firstVisibleRowComplete",
    "setVisibleRowCount",
    "scrollToY",
    "editing",
    "moveToCell",
    "destruct",
    "dispose",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Scroller.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Shows a whole meta column. This includes a {@link Header},\n * a {@link Pane} and the needed scroll bars. This class handles the\n * virtual scrolling and does all the pointer event handling.\n *\n * @childControl header {qx.ui.table.pane.Header} header pane\n * @childControl pane {qx.ui.table.pane.Pane} table pane to show the data\n * @childControl focus-indicator {qx.ui.table.pane.FocusIndicator} shows the current focused cell\n * @childControl resize-line {qx.ui.core.Widget} resize line widget\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n */\nqx.Class.define(\"qx.ui.table.pane.Scroller\", {\n  extend: qx.ui.core.Widget,\n  include: [qx.ui.core.scroll.MScrollBarFactory],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param table {qx.ui.table.Table} the table the scroller belongs to.\n   */\n  construct(table) {\n    super();\n\n    this.__table = table;\n\n    // init layout\n    var grid = new qx.ui.layout.Grid();\n    grid.setColumnFlex(0, 1);\n    grid.setRowFlex(1, 1);\n    this._setLayout(grid);\n\n    // init child controls\n    this.__header = this._showChildControl(\"header\");\n    this.__tablePane = this._showChildControl(\"pane\");\n\n    // the top line containing the header clipper and the top right widget\n    this.__top = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n      minWidth: 0\n    });\n\n    this._add(this.__top, { row: 0, column: 0, colSpan: 2 });\n\n    // embed header into a scrollable container\n    this._headerClipper = this._createHeaderClipper();\n    this._headerClipper.add(this.__header);\n    this._headerClipper.addListener(\n      \"losecapture\",\n      this._onChangeCaptureHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\n      \"pointermove\",\n      this._onPointermoveHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\n      \"pointerdown\",\n      this._onPointerdownHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\"pointerup\", this._onPointerupHeader, this);\n    this._headerClipper.addListener(\"tap\", this._onTapHeader, this);\n    this.__top.add(this._headerClipper, { flex: 1 });\n\n    // embed pane into a scrollable container\n    this._paneClipper = this._createPaneClipper();\n    this._paneClipper.add(this.__tablePane);\n    this._paneClipper.addListener(\"roll\", this._onRoll, this);\n    this._paneClipper.addListener(\"pointermove\", this._onPointermovePane, this);\n    this._paneClipper.addListener(\"pointerdown\", this._onPointerdownPane, this);\n    this._paneClipper.addListener(\"tap\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onContextMenu, this);\n    if (qx.core.Environment.get(\"device.type\") === \"desktop\") {\n      this._paneClipper.addListener(\"dblclick\", this._onDbltapPane, this);\n    } else {\n      this._paneClipper.addListener(\"dbltap\", this._onDbltapPane, this);\n    }\n    this._paneClipper.addListener(\"resize\", this._onResizePane, this);\n\n    // if we have overlayed scroll bars, we should use a separate container\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      this.__clipperContainer = new qx.ui.container.Composite();\n      this.__clipperContainer.setLayout(new qx.ui.layout.Canvas());\n      this.__clipperContainer.add(this._paneClipper, { edge: 0 });\n      this._add(this.__clipperContainer, { row: 1, column: 0 });\n    } else {\n      this._add(this._paneClipper, { row: 1, column: 0 });\n    }\n\n    // init scroll bars\n    this.__horScrollBar = this._showChildControl(\"scrollbar-x\");\n    this.__verScrollBar = this._showChildControl(\"scrollbar-y\");\n\n    // init focus indicator\n    this.__focusIndicator = this.getChildControl(\"focus-indicator\");\n    // need to run the apply method at least once [BUG #4057]\n    this.initShowCellFocusIndicator();\n\n    // force creation of the resize line\n    this.getChildControl(\"resize-line\").hide();\n\n    this.addListener(\"pointerout\", this._onPointerout, this);\n    this.addListener(\"appear\", this._onAppear, this);\n    this.addListener(\"disappear\", this._onDisappear, this);\n\n    this.__timer = new qx.event.Timer();\n    this.__timer.addListener(\"interval\", this._oninterval, this);\n    this.initScrollTimeout();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {int} The minimum width a column could get in pixels. */\n    MIN_COLUMN_WIDTH: 10,\n\n    /** @type {int} The radius of the resize region in pixels. */\n    RESIZE_REGION_RADIUS: 5,\n\n    /**\n     * (int) The number of pixels the pointer may move between pointer down and pointer up\n     * in order to count as a tap.\n     */\n    TAP_TOLERANCE: 5,\n\n    /**\n     * (int) The mask for the horizontal scroll bar.\n     * May be combined with {@link #VERTICAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    HORIZONTAL_SCROLLBAR: 1,\n\n    /**\n     * (int) The mask for the vertical scroll bar.\n     * May be combined with {@link #HORIZONTAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    VERTICAL_SCROLLBAR: 2\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Dispatched if the pane is scrolled horizontally */\n    changeScrollY: \"qx.event.type.Data\",\n\n    /** Dispatched if the pane is scrolled vertically */\n    changeScrollX: \"qx.event.type.Data\",\n\n    /**See {@link qx.ui.table.Table#cellTap}.*/\n    cellTap: \"qx.ui.table.pane.CellEvent\",\n\n    /*** See {@link qx.ui.table.Table#cellDbltap}.*/\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\n\n    /**See {@link qx.ui.table.Table#cellContextmenu}.*/\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\n\n    /** Dispatched when a sortable header was tapped */\n    beforeSort: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Whether to show the horizontal scroll bar. This is a tri-state\n     * value. `true` means show the scroll bar; `false` means exclude it; null\n     * means hide it so it retains its space but doesn't show a scroll bar.\n     */\n    horizontalScrollBarVisible: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyHorizontalScrollBarVisible\",\n      event: \"changeHorizontalScrollBarVisible\",\n      nullable: true\n    },\n\n    /** Whether to show the vertical scroll bar */\n    verticalScrollBarVisible: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyVerticalScrollBarVisible\",\n      event: \"changeVerticalScrollBarVisible\"\n    },\n\n    /** The table pane model. */\n    tablePaneModel: {\n      check: \"qx.ui.table.pane.Model\",\n      apply: \"_applyTablePaneModel\",\n      event: \"changeTablePaneModel\"\n    },\n\n    /**\n     * Whether column resize should be live. If false, during resize only a line is\n     * shown and the real resize happens when the user releases the pointer button.\n     */\n    liveResize: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to handle selections via the selection manager before setting the\n     * focus.  The traditional behavior is to handle selections after setting the\n     * focus, but setting the focus means redrawing portions of the table, and\n     * some subclasses may want to modify the data to be displayed based on the\n     * selection.\n     */\n    selectBeforeFocus: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Interval time (in milliseconds) for the table update timer.\n     * Setting this to 0 clears the timer.\n     */\n    scrollTimeout: {\n      check: \"Integer\",\n      init: 100,\n      apply: \"_applyScrollTimeout\"\n    },\n\n    appearance: {\n      refine: true,\n      init: \"table-scroller\"\n    },\n\n    /**\n     * If set then defines the minimum height of the focus indicator when editing\n     */\n    minCellEditHeight: {\n      check: \"Integer\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lastRowCount: null,\n    __table: null,\n\n    __updateInterval: null,\n    __updateContentPlanned: null,\n    __onintervalWrapper: null,\n\n    _moveColumn: null,\n    __lastMoveColPos: null,\n    _lastMoveTargetX: null,\n    _lastMoveTargetScroller: null,\n    __lastMovePointerPageX: null,\n\n    __resizeColumn: null,\n    __lastResizePointerPageX: null,\n    __lastResizeWidth: null,\n\n    __lastPointerDownCell: null,\n    __firedTapEvent: false,\n    __ignoreTap: null,\n    __lastPointerPageX: null,\n    __lastPointerPageY: null,\n\n    __focusedCol: null,\n    __focusedRow: null,\n\n    _cellEditor: null,\n    __cellEditorFactory: null,\n\n    __topRightWidget: null,\n    __horScrollBar: null,\n    __verScrollBar: null,\n    __header: null,\n    _headerClipper: null,\n    __tablePane: null,\n    _paneClipper: null,\n    __clipperContainer: null,\n    __focusIndicator: null,\n    __top: null,\n\n    __timer: null,\n\n    __focusIndicatorPointerDownListener: null,\n\n    /**\n     * The right inset of the pane. The right inset is the maximum of the\n     * top right widget width and the scrollbar width (if visible).\n     *\n     * @return {Integer} The right inset of the pane\n     */\n    getPaneInsetRight() {\n      var topRight = this.getTopRightWidget();\n      var topRightWidth =\n        topRight && topRight.isVisible() && topRight.getBounds()\n          ? topRight.getBounds().width +\n            topRight.getMarginLeft() +\n            topRight.getMarginRight()\n          : 0;\n\n      var scrollBar = this.__verScrollBar;\n      var scrollBarWidth = this.getVerticalScrollBarVisible()\n        ? this.getVerticalScrollBarWidth() +\n          scrollBar.getMarginLeft() +\n          scrollBar.getMarginRight()\n        : 0;\n\n      return Math.max(topRightWidth, scrollBarWidth);\n    },\n\n    /**\n     * Set the pane's width\n     *\n     * @param width {Integer} The pane's width\n     */\n    setPaneWidth(width) {\n      if (this.isVerticalScrollBarVisible()) {\n        width += this.getPaneInsetRight();\n      }\n      this.setWidth(width);\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"header\":\n          control = this.getTable().getNewTablePaneHeader()(this);\n          break;\n\n        case \"pane\":\n          control = this.getTable().getNewTablePane()(this);\n          break;\n\n        case \"focus-indicator\":\n          control = new qx.ui.table.pane.FocusIndicator(this);\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          control.addListener(\n            \"pointerup\",\n            this._onPointerupFocusIndicator,\n            this\n          );\n\n          this._paneClipper.add(control);\n          control.show(); // must be active for editor to operate\n          control.setDecorator(null); // it can be initially invisible, though.\n          break;\n\n        case \"resize-line\":\n          control = new qx.ui.core.Widget();\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          this._paneClipper.add(control);\n          break;\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\").set({\n            alignY: \"bottom\"\n          });\n\n          control.addListener(\"scroll\", this._onScrollX, this);\n\n          if (this.__clipperContainer != null) {\n            control.setMinHeight(\n              qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH\n            );\n\n            this.__clipperContainer.add(control, {\n              bottom: 0,\n              right: 0,\n              left: 0\n            });\n          } else {\n            this._add(control, { row: 2, column: 0 });\n          }\n          break;\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.addListener(\"scroll\", this._onScrollY, this);\n\n          if (this.__clipperContainer != null) {\n            this.__clipperContainer.add(control, {\n              right: 0,\n              bottom: 0,\n              top: 0\n            });\n          } else {\n            this._add(control, { row: 1, column: 1 });\n          }\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    // property modifier\n    _applyHorizontalScrollBarVisible(value, old) {\n      if (value === null) {\n        this.__horScrollBar.setVisibility(\"hidden\");\n      } else {\n        this.__horScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n      }\n    },\n\n    // property modifier\n    _applyVerticalScrollBarVisible(value, old) {\n      this.__verScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n    },\n\n    // property modifier\n    _applyTablePaneModel(value, old) {\n      if (old != null) {\n        old.removeListener(\"modelChanged\", this._onPaneModelChanged, this);\n      }\n\n      value.addListener(\"modelChanged\", this._onPaneModelChanged, this);\n    },\n\n    // property modifier\n    _applyShowCellFocusIndicator(value, old) {\n      if (value) {\n        this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n        this._updateFocusIndicator();\n      } else {\n        if (this.__focusIndicator) {\n          this.__focusIndicator.setDecorator(null);\n        }\n      }\n    },\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollY() {\n      return this.__verScrollBar.getPosition();\n    },\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollY {Integer} The new scroll position.\n     * @param renderSync {Boolean?false} Whether the table update should be\n     *     performed synchronously.\n     */\n    setScrollY(scrollY, renderSync) {\n      this.__verScrollBar.scrollTo(scrollY);\n      if (renderSync) {\n        this._updateContent();\n      }\n    },\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollX() {\n      return this.__horScrollBar.getPosition();\n    },\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollX {Integer} The new scroll position.\n     */\n    setScrollX(scrollX) {\n      this.__horScrollBar.scrollTo(scrollX);\n    },\n\n    /**\n     * Returns the table this scroller belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable() {\n      return this.__table;\n    },\n\n    /**\n     * Creates and returns an instance of pane clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createPaneClipper() {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n    /**\n     * Creates and returns an instance of header clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createHeaderClipper() {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     */\n    onColVisibilityChanged() {\n      this.updateHorScrollBarMaximum();\n      this._updateFocusIndicator();\n    },\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth(col, width) {\n      this.__header.setColumnWidth(col, width);\n      this.__tablePane.setColumnWidth(col, width);\n\n      var paneModel = this.getTablePaneModel();\n      var x = paneModel.getX(col);\n\n      if (x != -1) {\n        // The change was in this scroller\n        this.updateHorScrollBarMaximum();\n        this._updateFocusIndicator();\n      }\n    },\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     */\n    onColOrderChanged() {\n      this.__header.onColOrderChanged();\n      this.__tablePane.onColOrderChanged();\n\n      this.updateHorScrollBarMaximum();\n    },\n\n    /**\n     * Event handler. Called when the table model has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn) {\n      this.__tablePane.onTableModelDataChanged(\n        firstRow,\n        lastRow,\n        firstColumn,\n        lastColumn\n      );\n\n      var rowCount = this.getTable().getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount) {\n        this.updateVerScrollBarMaximum();\n\n        const focusedRow = this.getFocusedRow();\n        if (focusedRow !== null && focusedRow >= rowCount) {\n          if (rowCount == 0) {\n            this.setFocusedCell(null, null);\n          } else {\n            this.setFocusedCell(this.getFocusedColumn(), rowCount - 1);\n          }\n        }\n        this.__lastRowCount = rowCount;\n      }\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged() {\n      this.__tablePane.onSelectionChanged();\n    },\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged() {\n      this.__tablePane.onFocusChanged();\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged() {\n      this.__header.onTableModelMetaDataChanged();\n      this.__tablePane.onTableModelMetaDataChanged();\n    },\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    _onPaneModelChanged() {\n      this.__header.onPaneModelChanged();\n      this.__tablePane.onPaneModelChanged();\n    },\n\n    /**\n     * Event listener for the pane clipper's resize event\n     */\n    _onResizePane() {\n      this.updateHorScrollBarMaximum();\n      this.updateVerScrollBarMaximum();\n\n      // The height has changed -> Update content\n      this._updateContent();\n      this.__header._updateContent();\n      this.__table._updateScrollBarVisibility();\n    },\n\n    /**\n     * Updates the maximum of the horizontal scroll bar, so it corresponds to the\n     * total width of the columns in the table pane.\n     */\n    updateHorScrollBarMaximum() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n      var scrollSize = this.getTablePaneModel().getTotalWidth();\n\n      var scrollBar = this.__horScrollBar;\n\n      if (paneSize.width < scrollSize) {\n        var max = Math.max(0, scrollSize - paneSize.width);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.width / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      } else {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n    /**\n     * Updates the maximum of the vertical scroll bar, so it corresponds to the\n     * number of rows in the table.\n     */\n    updateVerScrollBarMaximum() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      if (this.getTable().getKeepFirstVisibleRowComplete()) {\n        rowCount += 1;\n      }\n\n      var rowHeight = this.getTable().getRowHeight();\n      var scrollSize = rowCount * rowHeight;\n      var scrollBar = this.__verScrollBar;\n\n      if (paneSize.height < scrollSize) {\n        var max = Math.max(0, scrollSize - paneSize.height);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.height / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      } else {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n    /**\n     * Event handler. Called when the table property \"keepFirstVisibleRowComplete\"\n     * changed.\n     */\n    onKeepFirstVisibleRowCompleteChanged() {\n      this.updateVerScrollBarMaximum();\n      this._updateContent();\n    },\n\n    /**\n     * Event handler for the scroller's appear event\n     */\n    _onAppear() {\n      // after the Scroller appears we start the interval again\n      this._startInterval(this.getScrollTimeout());\n    },\n\n    /**\n     * Event handler for the disappear event\n     */\n    _onDisappear() {\n      // before the scroller disappears we need to stop it\n      this._stopInterval();\n    },\n\n    /**\n     * Event handler. Called when the horizontal scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    _onScrollX(e) {\n      var scrollLeft = e.getData();\n\n      this.fireDataEvent(\"changeScrollX\", scrollLeft, e.getOldData());\n      this._headerClipper.scrollToX(scrollLeft);\n      this._paneClipper.scrollToX(scrollLeft);\n    },\n\n    /**\n     * Event handler. Called when the vertical scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    __inOnScrollY: false,\n    _onScrollY(e) {\n      if (this.__inOnScrollY) {\n        return;\n      }\n      var scrollbar = this.__verScrollBar;\n      this.__inOnScrollY = true;\n      // calculate delta so that one row is scrolled at a minimum\n      var rowHeight = this.getTable().getRowHeight();\n      var delta = e.getData() - e.getOldData();\n      if (Math.abs(delta) > 1 && Math.abs(delta) < rowHeight) {\n        delta =\n          delta < 0 ? e.getOldData() - rowHeight : e.getOldData() + rowHeight;\n        if (\n          delta >= 0 &&\n          delta <= scrollbar.getMaximum() &&\n          Math.abs(scrollbar.getPosition() - delta) > rowHeight\n        ) {\n          scrollbar.setPosition(delta);\n        }\n      }\n      this.__inOnScrollY = false;\n      this.fireDataEvent(\n        \"changeScrollY\",\n        scrollbar.getPosition(),\n        e.getOldData()\n      );\n\n      this._postponedUpdateContent();\n    },\n\n    /**\n     * Event handler. Called when the user moved the mouse wheel.\n     *\n     * @param e {qx.event.type.Roll} the event.\n     */\n    _onRoll(e) {\n      var table = this.getTable();\n\n      if (e.getPointerType() == \"mouse\" || !table.getEnabled()) {\n        return;\n      }\n\n      // vertical scrolling\n      var delta = e.getDelta();\n      // normalize that at least one step is scrolled at a time\n      if (delta.y > 0 && delta.y < 1) {\n        delta.y = 1;\n      } else if (delta.y < 0 && delta.y > -1) {\n        delta.y = -1;\n      }\n      this.__verScrollBar.scrollBy(parseInt(delta.y, 10));\n\n      var scrolled =\n        delta.y != 0 && !this.__isAtEdge(this.__verScrollBar, delta.y);\n\n      // horizontal scrolling\n      // normalize that at least one step is scrolled at a time\n      if (delta.x > 0 && delta.x < 1) {\n        delta.x = 1;\n      } else if (delta.x < 0 && delta.x > -1) {\n        delta.x = -1;\n      }\n      this.__horScrollBar.scrollBy(parseInt(delta.x, 10));\n\n      // Update the focus\n      if (this.__lastPointerPageX && this.getFocusCellOnPointerMove()) {\n        this._focusCellAtPagePos(\n          this.__lastPointerPageX,\n          this.__lastPointerPageY\n        );\n      }\n\n      scrolled =\n        scrolled ||\n        (delta.x != 0 && !this.__isAtEdge(this.__horScrollBar, delta.x));\n\n      // pass the event to the parent if the scrollbar is at an edge\n      if (scrolled) {\n        e.stop();\n      } else {\n        e.stopMomentum();\n      }\n    },\n\n    /**\n     * Checks if the table has been scrolled.\n     * @param scrollBar {qx.ui.core.scroll.IScrollBar} The scrollbar to check\n     * @param delta {Number} The scroll delta.\n     * @return {Boolean} <code>true</code>, if the scrolling is a the edge\n     */\n    __isAtEdge(scrollBar, delta) {\n      var position = scrollBar.getPosition();\n      return (\n        (delta < 0 && position <= 0) ||\n        (delta > 0 && position >= scrollBar.getMaximum())\n      );\n    },\n\n    /**\n     * Common column resize logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     */\n    __handleResizeColumn(pageX) {\n      var table = this.getTable();\n      // We are currently resizing -> Update the position\n      var headerCell = this.__header.getHeaderWidgetAtColumn(\n        this.__resizeColumn\n      );\n\n      var minColumnWidth = headerCell.getSizeHint().minWidth;\n\n      var newWidth = Math.max(\n        minColumnWidth,\n        this.__lastResizeWidth + pageX - this.__lastResizePointerPageX\n      );\n\n      if (this.getLiveResize()) {\n        var columnModel = table.getTableColumnModel();\n        columnModel.setColumnWidth(this.__resizeColumn, newWidth, true);\n      } else {\n        var paneModel = this.getTablePaneModel();\n        this._showResizeLine(\n          paneModel.getColumnLeft(this.__resizeColumn) + newWidth\n        );\n      }\n\n      this.__lastResizePointerPageX += newWidth - this.__lastResizeWidth;\n      this.__lastResizeWidth = newWidth;\n    },\n\n    /**\n     * Common column move logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     *\n     */\n    __handleMoveColumn(pageX) {\n      // We are moving a column\n\n      // Check whether we moved outside the tap tolerance so we can start\n      // showing the column move feedback\n      // (showing the column move feedback prevents the ontap event)\n      var tapTolerance = qx.ui.table.pane.Scroller.TAP_TOLERANCE;\n      if (\n        this.__header.isShowingColumnMoveFeedback() ||\n        pageX > this.__lastMovePointerPageX + tapTolerance ||\n        pageX < this.__lastMovePointerPageX - tapTolerance\n      ) {\n        this.__lastMoveColPos += pageX - this.__lastMovePointerPageX;\n\n        this.__header.showColumnMoveFeedback(\n          this._moveColumn,\n          this.__lastMoveColPos\n        );\n\n        // Get the responsible scroller\n        var targetScroller = this.__table.getTablePaneScrollerAtPageX(pageX);\n        if (\n          this._lastMoveTargetScroller &&\n          this._lastMoveTargetScroller != targetScroller\n        ) {\n          this._lastMoveTargetScroller.hideColumnMoveFeedback();\n        }\n        if (targetScroller != null) {\n          this._lastMoveTargetX = targetScroller.showColumnMoveFeedback(pageX);\n        } else {\n          this._lastMoveTargetX = null;\n        }\n\n        this._lastMoveTargetScroller = targetScroller;\n        this.__lastMovePointerPageX = pageX;\n      }\n    },\n\n    /**\n     * Event handler. Called when the user moved the pointer over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermoveHeader(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var useResizeCursor = false;\n      var pointerOverColumn = null;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onmousewheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      if (this.__resizeColumn != null) {\n        // We are currently resizing -> Update the position\n        this.__handleResizeColumn(pageX);\n        useResizeCursor = true;\n        e.stopPropagation();\n      } else if (this._moveColumn != null) {\n        // We are moving a column\n        this.__handleMoveColumn(pageX);\n        e.stopPropagation();\n      } else {\n        var resizeCol = this._getResizeColumnForPageX(pageX);\n        if (resizeCol != -1) {\n          // The pointer is over a resize region -> Show the right cursor\n          useResizeCursor = true;\n        } else {\n          var tableModel = table.getTableModel();\n          var col = this._getColumnForPageX(pageX);\n          if (col != null && tableModel.isColumnSortable(col)) {\n            pointerOverColumn = col;\n          }\n        }\n      }\n\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n      this.__header.setPointerOverColumn(pointerOverColumn);\n    },\n\n    /**\n     * Event handler. Called when the user moved the pointer over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermovePane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      //var useResizeCursor = false;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onpointerwheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      var useResizeCursor = false;\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Show the right cursor\n        useResizeCursor = true;\n      }\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n\n      var row = this._getRowForPagePos(pageX, pageY);\n      if (row != null && this._getColumnForPageX(pageX) != null) {\n        // The pointer is over the data -> update the focus\n        if (this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n      }\n      this.__header.setPointerOverColumn(null);\n    },\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownHeader(e) {\n      if (!this.getTable().getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n      } else {\n        // The pointer is not in a resize region\n        var moveCol = this._getColumnForPageX(pageX);\n        if (moveCol != null) {\n          this._startMoveHeader(moveCol, pageX);\n          e.stop();\n        }\n      }\n    },\n\n    /**\n     * Start a resize session of the header.\n     *\n     * @param resizeCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startResizeHeader(resizeCol, pageX) {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // The pointer is over a resize region -> Start resizing\n      this.__resizeColumn = resizeCol;\n      this.__lastResizePointerPageX = pageX;\n      this.__lastResizeWidth = columnModel.getColumnWidth(this.__resizeColumn);\n      this._headerClipper.capture();\n    },\n\n    /**\n     * Start a move session of the header.\n     *\n     * @param moveCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startMoveHeader(moveCol, pageX) {\n      // Prepare column moving\n      this._moveColumn = moveCol;\n      this.__lastMovePointerPageX = pageX;\n      this.__lastMoveColPos = this.getTablePaneModel().getColumnLeft(moveCol);\n      this._headerClipper.capture();\n    },\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownPane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (table.isEditing()) {\n        table.stopEditing();\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n        return;\n      }\n\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row !== null) {\n        // The focus indicator blocks the tap event on the scroller so we\n        // store the current cell and listen for the pointerup event on the\n        // focus indicator\n        //\n        // INVARIANT:\n        //  The members of this object always contain the last position of\n        //  the cell on which the pointerdown event occurred.\n        //  *** These values are never cleared! ***.\n        //  Different browsers/OS combinations issue events in different\n        //  orders, and the context menu event, in particular, can be issued\n        //  early or late (Firefox on Linux issues it early; Firefox on\n        //  Windows issues it late) so no one may clear these values.\n        //\n        this.__lastPointerDownCell = {\n          row: row,\n          col: col\n        };\n\n        // On the other hand, we need to know if we've issued the tap event\n        // so we don't issue it twice, both from pointer-up on the focus\n        // indicator, and from the tap even on the pane. Both possibilities\n        // are necessary, however, to maintain the qooxdoo order of events.\n        this.__firedTapEvent = false;\n      }\n    },\n\n    /**\n     * Event handler for the focus indicator's pointerup event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerupFocusIndicator(e) {\n      if (\n        this.__lastPointerDownCell &&\n        !this.__firedTapEvent &&\n        !this.isEditing() &&\n        this.__focusIndicator.getRow() == this.__lastPointerDownCell.row &&\n        this.__focusIndicator.getColumn() == this.__lastPointerDownCell.col\n      ) {\n        this.fireEvent(\n          \"cellTap\",\n          qx.ui.table.pane.CellEvent,\n          [\n            this,\n            e,\n            this.__lastPointerDownCell.row,\n            this.__lastPointerDownCell.col\n          ],\n\n          true\n        );\n\n        this.__firedTapEvent = true;\n      } else if (!this.isEditing()) {\n        // if no cellTap event should be fired, act like a pointerdown which\n        // invokes the change of the selection e.g. [BUG #1632]\n        this._onPointerdownPane(e);\n      }\n    },\n\n    /**\n     * Event handler. Called when the event capturing of the header changed.\n     * Stops/finishes an active header resize/move session if it lost capturing\n     * during the session to stay in a stable state.\n     *\n     * @param e {qx.event.type.Data} The data event\n     */\n    _onChangeCaptureHeader(e) {\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n      }\n\n      if (this._moveColumn != null) {\n        this._stopMoveHeader();\n      }\n    },\n\n    /**\n     * Stop a resize session of the header.\n     *\n     */\n    _stopResizeHeader() {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // We are currently resizing -> Finish resizing\n      if (!this.getLiveResize()) {\n        this._hideResizeLine();\n        columnModel.setColumnWidth(\n          this.__resizeColumn,\n          this.__lastResizeWidth,\n          true\n        );\n      }\n\n      this.__resizeColumn = null;\n      this._headerClipper.releaseCapture();\n\n      this.getApplicationRoot().setGlobalCursor(null);\n      this.setCursor(null);\n    },\n\n    /**\n     * Stop a move session of the header.\n     *\n     */\n    _stopMoveHeader() {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n\n      // We are moving a column -> Drop the column\n      this.__header.hideColumnMoveFeedback();\n      if (this._lastMoveTargetScroller) {\n        this._lastMoveTargetScroller.hideColumnMoveFeedback();\n      }\n\n      if (this._lastMoveTargetX != null) {\n        var fromVisXPos =\n          paneModel.getFirstColumnX() + paneModel.getX(this._moveColumn);\n        var toVisXPos = this._lastMoveTargetX;\n        if (toVisXPos != fromVisXPos && toVisXPos != fromVisXPos + 1) {\n          // The column was really moved to another position\n          // (and not moved before or after itself, which is a noop)\n\n          // Translate visible positions to overall positions\n          var fromCol = columnModel.getVisibleColumnAtX(fromVisXPos);\n          var toCol = columnModel.getVisibleColumnAtX(toVisXPos);\n          var fromOverXPos = columnModel.getOverallX(fromCol);\n          var toOverXPos =\n            toCol != null\n              ? columnModel.getOverallX(toCol)\n              : columnModel.getOverallColumnCount();\n\n          if (toOverXPos > fromOverXPos) {\n            // Don't count the column itself\n            toOverXPos--;\n          }\n\n          // Move the column\n          columnModel.moveColumn(fromOverXPos, toOverXPos);\n\n          // update the focus indicator including the editor\n          this._updateFocusIndicator();\n        }\n      }\n\n      this._moveColumn = null;\n      this._lastMoveTargetX = null;\n      this._headerClipper.releaseCapture();\n    },\n\n    /**\n     * Event handler. Called when the user released a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerupHeader(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n        this.__ignoreTap = true;\n        e.stop();\n      } else if (this._moveColumn != null) {\n        this._stopMoveHeader();\n        e.stop();\n      }\n    },\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapHeader(e) {\n      if (this.__ignoreTap) {\n        this.__ignoreTap = false;\n        return;\n      }\n\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var tableModel = table.getTableModel();\n\n      var pageX = e.getDocumentLeft();\n\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n\n      if (resizeCol == -1) {\n        // pointer is not in a resize region\n        var col = this._getColumnForPageX(pageX);\n\n        if (col != null && tableModel.isColumnSortable(col)) {\n          // Sort that column\n          var sortCol = tableModel.getSortColumnIndex();\n          var ascending = col != sortCol ? true : !tableModel.isSortAscending();\n\n          var data = {\n            column: col,\n            ascending: ascending,\n            tapEvent: e\n          };\n\n          if (this.fireDataEvent(\"beforeSort\", data, null, true)) {\n            // Stop cell editing\n            if (table.isEditing()) {\n              table.stopEditing();\n            }\n\n            tableModel.sortByColumn(col, ascending);\n            if (this.getResetSelectionOnHeaderTap()) {\n              table.getSelectionModel().resetSelection();\n            }\n          }\n        }\n      }\n\n      e.stop();\n    },\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapPane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row != null && col != null) {\n        var selectBeforeFocus = this.getSelectBeforeFocus();\n\n        if (selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        // The pointer is over the data -> update the focus\n        if (!this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n\n        if (!selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        if (\n          this.__focusIndicator.isHidden() ||\n          (this.__lastPointerDownCell &&\n            !this.__firedTapEvent &&\n            !this.isEditing() &&\n            row == this.__lastPointerDownCell.row &&\n            col == this.__lastPointerDownCell.col)\n        ) {\n          this.fireEvent(\n            \"cellTap\",\n            qx.ui.table.pane.CellEvent,\n            [this, e, row, col],\n            true\n          );\n\n          this.__firedTapEvent = true;\n        }\n      } else {\n        if (row == null && this.getResetSelectionOnTapBelowRows()) {\n          table.getSelectionModel().resetSelection();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when a context menu is invoked in a cell.\n     *\n     * @param e {qx.event.type.Pointer} the event.\n     */\n    _onContextMenu(e) {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      /*\n       * The 'row' value will be null if the right-click was in the blank\n       * area below the last data row. Some applications desire to receive\n       * the context menu event anyway, and can set the property value of\n       * contextMenuFromDataCellsOnly to false to achieve that.\n       */\n      if (row === null && this.getContextMenuFromDataCellsOnly()) {\n        return;\n      }\n\n      if (\n        !this.getShowCellFocusIndicator() ||\n        row === null ||\n        (this.__lastPointerDownCell &&\n          row == this.__lastPointerDownCell.row &&\n          col == this.__lastPointerDownCell.col)\n      ) {\n        this.fireEvent(\n          \"cellContextmenu\",\n          qx.ui.table.pane.CellEvent,\n          [this, e, row, col],\n          true\n        );\n\n        // Now that the cellContextmenu handler has had a chance to build\n        // the menu for this cell, display it (if there is one).\n        var menu = this.getTable().getContextMenu();\n        if (menu) {\n          // A menu with no children means don't display any context menu\n          // including the default context menu even if the default context\n          // menu is allowed to be displayed normally. There's no need to\n          // actually show an empty menu, though.\n          if (menu.getChildren().length > 0) {\n            menu.openAtPointer(e);\n          } else {\n            menu.exclude();\n          }\n\n          // Do not show native menu\n          e.preventDefault();\n        }\n      }\n    },\n\n    // overridden\n    _onContextMenuOpen(e) {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n    /**\n     * Event handler. Called when the user double tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onDbltapPane(e) {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var col = this._getColumnForPageX(pageX);\n\n      if (col !== null) {\n        this._focusCellAtPagePos(pageX, pageY);\n        this.startEditing();\n\n        var row = this._getRowForPagePos(pageX, pageY);\n        if (row != -1 && row != null) {\n          this.fireEvent(\n            \"cellDbltap\",\n            qx.ui.table.pane.CellEvent,\n            [this, e, row],\n            true\n          );\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the pointer moved out.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerout(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      // Reset the resize cursor when the pointer leaves the header\n      // If currently a column is resized then do nothing\n      // (the cursor will be reset on pointerup)\n      if (this.__resizeColumn == null) {\n        this.setCursor(null);\n        this.getApplicationRoot().setGlobalCursor(null);\n      }\n\n      this.__header.setPointerOverColumn(null);\n\n      // in case the focus follows the pointer, it should be remove on pointerout\n      if (this.getFocusCellOnPointerMove()) {\n        this.__table.setFocusedCell();\n      }\n    },\n\n    /**\n     * Shows the resize line.\n     *\n     * @param x {Integer} the position where to show the line (in pixels, relative to\n     *      the left side of the pane).\n     */\n    _showResizeLine(x) {\n      var resizeLine = this._showChildControl(\"resize-line\");\n\n      var width = resizeLine.getWidth();\n      var paneBounds = this._paneClipper.getBounds();\n      resizeLine.setUserBounds(\n        x - Math.round(width / 2),\n        0,\n        width,\n        paneBounds.height\n      );\n    },\n\n    /**\n     * Hides the resize line.\n     */\n    _hideResizeLine() {\n      this._excludeChildControl(\"resize-line\");\n    },\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the visible x position of the column in the whole table.\n     */\n    showColumnMoveFeedback(pageX) {\n      var paneModel = this.getTablePaneModel();\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneLeft = this.__tablePane.getContentLocation().left;\n      var colCount = paneModel.getColumnCount();\n\n      var targetXPos = 0;\n      var targetX = 0;\n      var currX = paneLeft;\n\n      for (var xPos = 0; xPos < colCount; xPos++) {\n        var col = paneModel.getColumnAtX(xPos);\n        var colWidth = columnModel.getColumnWidth(col);\n\n        if (pageX < currX + colWidth / 2) {\n          break;\n        }\n\n        currX += colWidth;\n        targetXPos = xPos + 1;\n        targetX = currX - paneLeft;\n      }\n\n      // Ensure targetX is visible\n      var scrollerLeft = this._paneClipper.getContentLocation().left;\n      var scrollerWidth = this._paneClipper.getBounds().width;\n      var scrollX = scrollerLeft - paneLeft;\n\n      // NOTE: +2/-1 because of feedback width\n      targetX = qx.lang.Number.limit(\n        targetX,\n        scrollX + 2,\n        scrollX + scrollerWidth - 1\n      );\n\n      this._showResizeLine(targetX);\n\n      // Return the overall target x position\n      return paneModel.getFirstColumnX() + targetXPos;\n    },\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback() {\n      this._hideResizeLine();\n    },\n\n    /**\n     * Sets the focus to the cell that's located at the page position\n     * <code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\n     * nothing happens.\n     *\n     * @param pageX {Integer} the x position in the page (in pixels).\n     * @param pageY {Integer} the y position in the page (in pixels).\n     */\n    _focusCellAtPagePos(pageX, pageY) {\n      var row = this._getRowForPagePos(pageX, pageY);\n\n      if (row != -1 && row != null) {\n        // The pointer is over the data -> update the focus\n        var col = this._getColumnForPageX(pageX);\n        this.__table.setFocusedCell(col, row);\n      }\n    },\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer} the model index of the focused cell's column.\n     * @param row {Integer} the model index of the focused cell's row.\n     */\n    setFocusedCell(col, row) {\n      if (!this.isEditing()) {\n        this.__tablePane.setFocusedCell(col, row, this.__updateContentPlanned);\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        this._updateFocusIndicator();\n      }\n    },\n\n    /**\n     * Returns the column of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn() {\n      return this.__focusedCol;\n    },\n\n    /**\n     * Returns the row of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow() {\n      return this.__focusedRow;\n    },\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible(col, row) {\n      var paneModel = this.getTablePaneModel();\n      var xPos = paneModel.getX(col);\n\n      if (xPos != -1) {\n        var clipperSize = this._paneClipper.getInnerSize();\n        if (!clipperSize) {\n          return;\n        }\n\n        var columnModel = this.getTable().getTableColumnModel();\n\n        var colLeft = paneModel.getColumnLeft(col);\n        var colWidth = columnModel.getColumnWidth(col);\n        var rowHeight = this.getTable().getRowHeight();\n        var rowTop = row * rowHeight;\n\n        var scrollX = this.getScrollX();\n        var scrollY = this.getScrollY();\n\n        // NOTE: We don't use qx.lang.Number.limit, because min should win if max < min\n        var minScrollX = Math.min(\n          colLeft,\n          colLeft + colWidth - clipperSize.width\n        );\n\n        var maxScrollX = colLeft;\n        this.setScrollX(Math.max(minScrollX, Math.min(maxScrollX, scrollX)));\n\n        var minScrollY = rowTop + rowHeight - clipperSize.height;\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          minScrollY += rowHeight;\n        }\n\n        var maxScrollY = rowTop;\n        this.setScrollY(\n          Math.max(minScrollY, Math.min(maxScrollY, scrollY)),\n          true\n        );\n      }\n    },\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing() {\n      return this._cellEditor != null;\n    },\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already\n     * editing, if the column is not editable, or if the cell editor for the\n     * column ascertains that the particular cell is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing() {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var col = this.__focusedCol;\n\n      if (\n        !this.isEditing() &&\n        col != null &&\n        tableModel.isColumnEditable(col)\n      ) {\n        var row = this.__focusedRow;\n        var xPos = this.getTablePaneModel().getX(col);\n        var value = tableModel.getValue(col, row);\n\n        // scroll cell into view\n        this.scrollCellVisible(col, row);\n\n        this.__cellEditorFactory = table\n          .getTableColumnModel()\n          .getCellEditorFactory(col);\n\n        var cellInfo = {\n          col: col,\n          row: row,\n          xPos: xPos,\n          value: value,\n          table: table\n        };\n\n        // Get a cell editor\n        this._cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n        // We handle two types of cell editors: the traditional in-place\n        // editor, where the cell editor returned by the factory must fit in\n        // the space of the table cell; and a modal window in which the\n        // editing takes place.  Additionally, if the cell editor determines\n        // that it does not want to edit the particular cell being requested,\n        // it may return null to indicate that that cell is not editable.\n        if (this._cellEditor === null) {\n          // This cell is not editable even though its column is.\n          return false;\n        } else if (this._cellEditor instanceof qx.ui.window.Window) {\n          // It's a window.  Ensure that it's modal.\n          this._cellEditor.setModal(true);\n\n          // At least for the time being, we disallow the close button.  It\n          // acts differently than a cellEditor.close(), and invokes a bug\n          // someplace.  Modal window cell editors should provide their own\n          // buttons or means to activate a cellEditor.close() or equivalently\n          // cellEditor.hide().\n          this._cellEditor.setShowClose(false);\n\n          // Arrange to be notified when it is closed.\n          this._cellEditor.addListener(\n            \"close\",\n            this._onCellEditorModalWindowClose,\n            this\n          );\n\n          // If there's a pre-open function defined for the table...\n          var f = table.getModalCellEditorPreOpenFunction();\n          if (f != null) {\n            f(this._cellEditor, cellInfo);\n          }\n\n          // Open it now.\n          this._cellEditor.open();\n        } else {\n          // prevent tap event from bubbling up to the table\n          this.__focusIndicatorPointerDownListener =\n            this.__focusIndicator.addListener(\"pointerdown\", e => {\n              this.__lastPointerDownCell = {\n                row: this.__focusedRow,\n                col: this.__focusedCol\n              };\n\n              e.stopPropagation();\n            });\n\n          this._updateFocusIndicator(true);\n          this.__focusIndicator.add(this._cellEditor);\n          this.__focusIndicator.addState(\"editing\");\n          this.__focusIndicator.setKeepActive(false);\n\n          // Make the focus indicator visible during editing\n          this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n\n          this._cellEditor.addListenerOnce('focusin', this._onFocusinCellEditorAddBlurListener, this);\n          this._cellEditor.focus();\n          this._cellEditor.activate();\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing() {\n      // If the focus indicator is not being shown normally...\n      if (!this.getShowCellFocusIndicator()) {\n        // ... then hide it again\n        this.__focusIndicator.setDecorator(null);\n      }\n\n      this.flushEditor(true);\n    },\n\n    /**\n     * Writes the editor's value to the model\n     *\n     * @param cancel {Boolean ? false} Whether to also cancel\n     *      editing before firing the 'dateEdited' event.\n     */\n    flushEditor(cancel) {\n      if (this.isEditing()) {\n        var value = this.__cellEditorFactory.getCellEditorValue(\n          this._cellEditor\n        );\n\n        var oldValue = this.getTable()\n          .getTableModel()\n          .getValue(this.__focusedCol, this.__focusedRow);\n        this.getTable()\n          .getTableModel()\n          .setValue(this.__focusedCol, this.__focusedRow, value);\n\n        this.__table.focus();\n\n        if (cancel) {\n          this.cancelEditing();\n        }\n\n        // Fire an event containing the value change.\n        this.__table.fireDataEvent(\"dataEdited\", {\n          row: this.__focusedRow,\n          col: this.__focusedCol,\n          oldValue: oldValue,\n          value: value\n        });\n      }\n    },\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing() {\n      if (this.isEditing()) {\n        if (!(this._cellEditor instanceof qx.ui.window.Window)) {\n          this.__focusIndicator.removeState(\"editing\");\n          this.__focusIndicator.setKeepActive(true);\n\n          if (this.__focusIndicatorPointerDownListener !== null) {\n            this.__focusIndicator.removeListenerById(\n              this.__focusIndicatorPointerDownListener\n            );\n\n            this.__focusIndicatorPointerDownListener = null;\n          }\n          this._updateFocusIndicator();\n        }\n        this._cellEditor.destroy();\n        this._cellEditor = null;\n        this.__cellEditorFactory = null;\n      }\n    },\n\n    /**\n     * Event handler. Called when the modal window of the cell editor closes.\n     *\n     * @param e {Map} the event.\n     */\n    _onCellEditorModalWindowClose(e) {\n      this.stopEditing();\n    },\n\n    /**\n     * Focusin event handler which attaches the blur event listener ot the cell editor\n     * and uses a timer event to allow the focusin event listener execution before\n     * the blur event listener execution\n     */\n    _onFocusinCellEditorAddBlurListener(e) {\n      this.debug(\"executed FOCUSIN event listener for hash: \" + e.getTarget().$$hash);\n      qx.event.Timer.once(function() {\n        this._cellEditor.addListenerOnce('blur', this._onBlurCellEditorStopEditing, this);\n        this.debug('added BLUR listener to hash: ' + this._cellEditor.$$hash);\n      }, this, 0);\n    },\n\n    /**\n     * Stop editing whenever the cell editor blurs.\n     */\n    _onBlurCellEditorStopEditing(e) {\n      this.debug(\"executed BLUR listener for hash \" + e.getTarget().$$hash);\n      if (this._cellEditor === e.getTarget()) {\n        this.debug('hash: ' + this._cellEditor.$$hash);\n        switch (this.getTable().getCellEditorBlurAction()) {\n          case \"save\":\n            this.stopEditing();\n            break;\n          case \"cancel\":\n            this.cancelEditing();\n            break;\n          case \"nothing\":\n          default:\n            // do nothing\n        }\n      }\n    },\n\n    /**\n     * Returns the model index of the column the pointer is over or null if the pointer\n     * is not over a column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the model index of the column the pointer is over.\n     */\n    _getColumnForPageX(pageX) {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n      var colCount = paneModel.getColumnCount();\n      var currX = this.__tablePane.getContentLocation().left;\n\n      for (var x = 0; x < colCount; x++) {\n        var col = paneModel.getColumnAtX(x);\n        var colWidth = columnModel.getColumnWidth(col);\n        currX += colWidth;\n\n        if (pageX < currX) {\n          return col;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns the model index of the column that should be resized when dragging\n     * starts here. Returns -1 if the pointer is in no resize region of any column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the column index.\n     */\n    _getResizeColumnForPageX(pageX) {\n      var contentLocation =\n        this.__header.getContentLocation() ||\n        this.__tablePane.getContentLocation();\n      if (contentLocation) {\n        var currX = contentLocation.left;\n        var columnModel = this.getTable().getTableColumnModel();\n        var paneModel = this.getTablePaneModel();\n        var colCount = paneModel.getColumnCount();\n        var regionRadius = qx.ui.table.pane.Scroller.RESIZE_REGION_RADIUS;\n\n        for (var x = 0; x < colCount; x++) {\n          var col = paneModel.getColumnAtX(x);\n          var colWidth = columnModel.getColumnWidth(col);\n          currX += colWidth;\n\n          if (pageX >= currX - regionRadius && pageX <= currX + regionRadius) {\n            return col;\n          }\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the model index of the row the pointer is currently over. Returns -1 if\n     * the pointer is over the header. Returns null if the pointer is not over any\n     * column.\n     *\n     * @param pageX {Integer} the pointer x position in the page.\n     * @param pageY {Integer} the pointer y position in the page.\n     * @return {Integer} the model index of the row the pointer is currently over.\n     */\n    _getRowForPagePos(pageX, pageY) {\n      var panePos = this.__tablePane.getContentLocation();\n\n      if (panePos === null || pageX < panePos.left || pageX > panePos.right) {\n        // There was no cell or header cell hit\n        return null;\n      }\n\n      if (pageY >= panePos.top && pageY <= panePos.bottom) {\n        // This event is in the pane -> Get the row\n        var rowHeight = this.__tablePane.getRenderedRowHeight();\n\n        var scrollY = this.__verScrollBar.getPosition();\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          scrollY =\n            Math.floor(scrollY / this.getTable().getRowHeight()) * rowHeight;\n        }\n\n        var tableY = scrollY + pageY - panePos.top;\n        var row = Math.floor(tableY / rowHeight);\n\n        var tableModel = this.getTable().getTableModel();\n        var rowCount = tableModel.getRowCount();\n\n        return row < rowCount ? row : null;\n      }\n\n      var headerPos = this.__header.getContentLocation();\n\n      if (\n        headerPos !== null &&\n        pageY >= headerPos.top &&\n        pageY <= headerPos.bottom &&\n        pageX <= headerPos.right\n      ) {\n        // This event is in the pane -> Return -1 for the header\n        return -1;\n      }\n\n      return null;\n    },\n\n    /**\n     * Sets the widget that should be shown in the top right corner.\n     *\n     * The widget will not be disposed, when this table scroller is disposed. So the\n     * caller has to dispose it.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to set. May be null.\n     */\n    setTopRightWidget(widget) {\n      var oldWidget = this.__topRightWidget;\n\n      if (oldWidget != null) {\n        this.__top.remove(oldWidget);\n      }\n\n      if (widget != null) {\n        this.__top.add(widget);\n      }\n\n      this.__topRightWidget = widget;\n    },\n\n    /**\n     * Get the top right widget\n     *\n     * @return {qx.ui.core.Widget} The top right widget.\n     */\n    getTopRightWidget() {\n      return this.__topRightWidget;\n    },\n\n    /**\n     * Returns the header.\n     *\n     * @return {qx.ui.table.pane.Header} the header.\n     */\n    getHeader() {\n      return this.__header;\n    },\n\n    /**\n     * Returns the table pane.\n     *\n     * @return {qx.ui.table.pane.Pane} the table pane.\n     */\n    getTablePane() {\n      return this.__tablePane;\n    },\n\n    /**\n     * Get the rendered width of the vertical scroll bar. The return value is\n     * <code>0</code> if the scroll bar is invisible or not yet rendered.\n     *\n     * @internal\n     * @return {Integer} The width of the vertical scroll bar\n     */\n    getVerticalScrollBarWidth() {\n      var scrollBar = this.__verScrollBar;\n      return scrollBar.isVisible() ? scrollBar.getSizeHint().width || 0 : 0;\n    },\n\n    /**\n     * Returns which scrollbars are needed.\n     *\n     * @param forceHorizontal {Boolean ? false} Whether to show the horizontal\n     *      scrollbar always.\n     * @param preventVertical {Boolean ? false} Whether to show the vertical scrollbar\n     *      never.\n     * @return {Integer} which scrollbars are needed. This may be any combination of\n     *      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n     *      (combined by OR).\n     */\n    getNeededScrollBars(forceHorizontal, preventVertical) {\n      var verScrollBar = this.__verScrollBar;\n      var verBarWidth =\n        verScrollBar.getSizeHint().width +\n        verScrollBar.getMarginLeft() +\n        verScrollBar.getMarginRight();\n\n      var horScrollBar = this.__horScrollBar;\n      var horBarHeight =\n        horScrollBar.getSizeHint().height +\n        horScrollBar.getMarginTop() +\n        horScrollBar.getMarginBottom();\n\n      // Get the width and height of the view (without scroll bars)\n      var clipperSize = this._paneClipper.getInnerSize();\n      var viewWidth = clipperSize ? clipperSize.width : 0;\n\n      if (this.getVerticalScrollBarVisible()) {\n        viewWidth += verBarWidth;\n      }\n\n      var viewHeight = clipperSize ? clipperSize.height : 0;\n\n      if (this.getHorizontalScrollBarVisible()) {\n        viewHeight += horBarHeight;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      // Get the (virtual) width and height of the pane\n      var paneWidth = this.getTablePaneModel().getTotalWidth();\n      var paneHeight = this.getTable().getRowHeight() * rowCount;\n\n      // Check which scrollbars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n\n      if (paneWidth > viewWidth) {\n        horNeeded = true;\n\n        if (paneHeight > viewHeight - horBarHeight) {\n          verNeeded = true;\n        }\n      } else if (paneHeight > viewHeight) {\n        verNeeded = true;\n\n        if (!preventVertical && paneWidth > viewWidth - verBarWidth) {\n          horNeeded = true;\n        }\n      }\n\n      // Create the mask\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      return (\n        (forceHorizontal || horNeeded ? horBar : 0) |\n        (preventVertical || !verNeeded ? 0 : verBar)\n      );\n    },\n\n    /**\n     * Return the pane clipper. It is sometimes required for special activities\n     * such as tracking events for drag&drop.\n     *\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getPaneClipper() {\n      return this._paneClipper;\n    },\n\n    /**\n     * Returns the scroll area container widget (which enables more precise\n     * operations e.g. bounds retrieval for drag session scrolling).\n     *\n     * @see qx.ui.core.MDragDropScrolling#_getBounds\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getScrollAreaContainer() {\n      return this.getPaneClipper();\n    },\n\n    // property apply method\n    _applyScrollTimeout(value, old) {\n      this._startInterval(value);\n    },\n\n    /**\n     * Starts the current running interval\n     *\n     * @param timeout {Integer} The timeout between two table updates\n     */\n    _startInterval(timeout) {\n      this.__timer.setInterval(timeout);\n      this.__timer.start();\n    },\n\n    /**\n     * stops the current running interval\n     */\n    _stopInterval() {\n      this.__timer.stop();\n    },\n\n    /**\n     * Does a postponed update of the content.\n     *\n     * @see #_updateContent\n     */\n    _postponedUpdateContent() {\n      //this.__updateContentPlanned = true;\n      this._updateContent();\n    },\n\n    /**\n     * Timer event handler. Periodically checks whether a table update is\n     * required. The update interval is controlled by the {@link #scrollTimeout}\n     * property.\n     *\n     * @signature function()\n     */\n    _oninterval: qx.event.GlobalError.observeMethod(function () {\n      if (this.__updateContentPlanned && !this.__tablePane._layoutPending) {\n        this.__updateContentPlanned = false;\n        this._updateContent();\n      }\n    }),\n\n    /**\n     * Updates the content. Sets the right section the table pane should show and\n     * does the scrolling.\n     */\n    _updateContent() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        return;\n      }\n      var paneHeight = paneSize.height;\n\n      var scrollX = this.__horScrollBar.getPosition();\n      var scrollY = this.__verScrollBar.getPosition();\n      var rowHeight = this.getTable().getRowHeight();\n\n      var firstRow = Math.floor(scrollY / rowHeight);\n      var oldFirstRow = this.__tablePane.getFirstVisibleRow();\n      this.__tablePane.setFirstVisibleRow(firstRow);\n\n      var visibleRowCount = Math.ceil(paneHeight / rowHeight);\n      var paneOffset = 0;\n      var firstVisibleRowComplete =\n        this.getTable().getKeepFirstVisibleRowComplete();\n\n      if (!firstVisibleRowComplete) {\n        // NOTE: We don't consider paneOffset, because this may cause alternating\n        //       adding and deleting of one row when scrolling. Instead we add one row\n        //       in every case.\n        visibleRowCount++;\n\n        paneOffset = scrollY % rowHeight;\n      }\n\n      this.__tablePane.setVisibleRowCount(visibleRowCount);\n\n      if (firstRow != oldFirstRow) {\n        this._updateFocusIndicator();\n      }\n\n      this._paneClipper.scrollToX(scrollX);\n\n      // Avoid expensive calls to setScrollTop if\n      // scrolling is not needed\n      if (!firstVisibleRowComplete) {\n        this._paneClipper.scrollToY(paneOffset);\n      }\n    },\n\n    /**\n     * Updates the location and the visibility of the focus indicator.\n     *\n     * @param editing {Boolean ? false} True if editing the cell\n     */\n    _updateFocusIndicator(editing) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      this.__focusIndicator.moveToCell(\n        this.__focusedCol,\n        this.__focusedRow,\n        editing\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._stopInterval();\n\n    // this object was created by the table on init so we have to clean it up.\n    var tablePaneModel = this.getTablePaneModel();\n    if (tablePaneModel) {\n      tablePaneModel.dispose();\n    }\n\n    this.__lastPointerDownCell = this.__topRightWidget = this.__table = null;\n    this._disposeObjects(\n      \"__horScrollBar\",\n      \"__verScrollBar\",\n      \"_headerClipper\",\n      \"_paneClipper\",\n      \"__focusIndicator\",\n      \"__header\",\n      \"__tablePane\",\n      \"__top\",\n      \"__timer\",\n      \"__clipperContainer\"\n    );\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}