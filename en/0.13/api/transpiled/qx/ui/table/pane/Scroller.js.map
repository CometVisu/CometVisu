{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "scroll",
    "MScrollBarFactory",
    "construct",
    "table",
    "__table",
    "grid",
    "layout",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "_setLayout",
    "__header",
    "_showChildControl",
    "__tablePane",
    "__top",
    "container",
    "Composite",
    "HBox",
    "set",
    "minWidth",
    "_add",
    "row",
    "column",
    "colSpan",
    "_headerClipper",
    "_createHeaderClipper",
    "add",
    "addListener",
    "_onChangeCaptureHeader",
    "_onPointermoveHeader",
    "_onPointerdownHeader",
    "_onPointerupHeader",
    "_onTapHeader",
    "flex",
    "_paneClipper",
    "_createPaneClipper",
    "_onRoll",
    "_onPointermovePane",
    "_onPointerdownPane",
    "_onTapPane",
    "_onContextMenu",
    "Environment",
    "get",
    "_onDbltapPane",
    "_onResizePane",
    "__clipperContainer",
    "setLayout",
    "Canvas",
    "edge",
    "__horScrollBar",
    "__verScrollBar",
    "__focusIndicator",
    "getChildControl",
    "initShowCellFocusIndicator",
    "hide",
    "_onPointerout",
    "_onAppear",
    "_onDisappear",
    "__timer",
    "event",
    "Timer",
    "_oninterval",
    "initScrollTimeout",
    "statics",
    "MIN_COLUMN_WIDTH",
    "RESIZE_REGION_RADIUS",
    "TAP_TOLERANCE",
    "HORIZONTAL_SCROLLBAR",
    "VERTICAL_SCROLLBAR",
    "events",
    "changeScrollY",
    "changeScrollX",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "beforeSort",
    "properties",
    "horizontalScrollBarVisible",
    "check",
    "init",
    "apply",
    "nullable",
    "verticalScrollBarVisible",
    "tablePaneModel",
    "liveResize",
    "focusCellOnPointerMove",
    "selectBeforeFocus",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "scrollTimeout",
    "appearance",
    "refine",
    "minCellEditHeight",
    "members",
    "__lastRowCount",
    "__updateInterval",
    "__updateContentPlanned",
    "__onintervalWrapper",
    "_moveColumn",
    "__lastMoveColPos",
    "_lastMoveTargetX",
    "_lastMoveTargetScroller",
    "__lastMovePointerPageX",
    "__resizeColumn",
    "__lastResizePointerPageX",
    "__lastResizeWidth",
    "__lastPointerDownCell",
    "__firedTapEvent",
    "__ignoreTap",
    "__lastPointerPageX",
    "__lastPointerPageY",
    "__focusedCol",
    "__focusedRow",
    "_cellEditor",
    "__cellEditorFactory",
    "__topRightWidget",
    "__focusIndicatorPointerDownListener",
    "getPaneInsetRight",
    "topRight",
    "getTopRightWidget",
    "topRightWidth",
    "isVisible",
    "getBounds",
    "width",
    "getMarginLeft",
    "getMarginRight",
    "scrollBar",
    "scrollBarWidth",
    "getVerticalScrollBarVisible",
    "getVerticalScrollBarWidth",
    "Math",
    "max",
    "setPaneWidth",
    "isVerticalScrollBarVisible",
    "setWidth",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "getTable",
    "getNewTablePaneHeader",
    "getNewTablePane",
    "pane",
    "FocusIndicator",
    "setUserBounds",
    "setZIndex",
    "_onPointerupFocusIndicator",
    "show",
    "setDecorator",
    "_createScrollBar",
    "alignY",
    "_onScrollX",
    "setMinHeight",
    "AbstractScrollArea",
    "DEFAULT_SCROLLBAR_WIDTH",
    "bottom",
    "right",
    "left",
    "_onScrollY",
    "top",
    "_applyHorizontalScrollBarVisible",
    "value",
    "old",
    "setVisibility",
    "_applyVerticalScrollBarVisible",
    "_applyTablePaneModel",
    "removeListener",
    "_onPaneModelChanged",
    "_applyShowCellFocusIndicator",
    "_updateFocusIndicator",
    "getScrollY",
    "getPosition",
    "setScrollY",
    "scrollY",
    "renderSync",
    "scrollTo",
    "_updateContent",
    "getScrollX",
    "setScrollX",
    "scrollX",
    "Clipper",
    "onColVisibilityChanged",
    "updateHorScrollBarMaximum",
    "setColumnWidth",
    "col",
    "paneModel",
    "getTablePaneModel",
    "x",
    "getX",
    "onColOrderChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "rowCount",
    "getTableModel",
    "getRowCount",
    "updateVerScrollBarMaximum",
    "focusedRow",
    "getFocusedRow",
    "setFocusedCell",
    "getFocusedColumn",
    "onSelectionChanged",
    "onFocusChanged",
    "onTableModelMetaDataChanged",
    "onPaneModelChanged",
    "_updateScrollBarVisibility",
    "paneSize",
    "getInnerSize",
    "scrollSize",
    "getTotalWidth",
    "setMaximum",
    "setKnobFactor",
    "pos",
    "setPosition",
    "min",
    "tableModel",
    "getKeepFirstVisibleRowComplete",
    "rowHeight",
    "getRowHeight",
    "height",
    "onKeepFirstVisibleRowCompleteChanged",
    "_startInterval",
    "getScrollTimeout",
    "_stopInterval",
    "e",
    "scrollLeft",
    "getData",
    "fireDataEvent",
    "getOldData",
    "scrollToX",
    "__inOnScrollY",
    "scrollbar",
    "delta",
    "abs",
    "getMaximum",
    "_postponedUpdateContent",
    "getPointerType",
    "getEnabled",
    "getDelta",
    "y",
    "scrollBy",
    "parseInt",
    "scrolled",
    "__isAtEdge",
    "getFocusCellOnPointerMove",
    "_focusCellAtPagePos",
    "stop",
    "stopMomentum",
    "position",
    "__handleResizeColumn",
    "pageX",
    "headerCell",
    "getHeaderWidgetAtColumn",
    "minColumnWidth",
    "getSizeHint",
    "newWidth",
    "getLiveResize",
    "columnModel",
    "getTableColumnModel",
    "_showResizeLine",
    "getColumnLeft",
    "__handleMoveColumn",
    "tapTolerance",
    "Scroller",
    "isShowingColumnMoveFeedback",
    "showColumnMoveFeedback",
    "targetScroller",
    "getTablePaneScrollerAtPageX",
    "hideColumnMoveFeedback",
    "useResizeCursor",
    "pointerOverColumn",
    "getDocumentLeft",
    "pageY",
    "getDocumentTop",
    "stopPropagation",
    "resizeCol",
    "_getResizeColumnForPageX",
    "_getColumnForPageX",
    "isColumnSortable",
    "cursor",
    "getApplicationRoot",
    "setGlobalCursor",
    "setCursor",
    "setPointerOverColumn",
    "_getRowForPagePos",
    "_startResizeHeader",
    "moveCol",
    "_startMoveHeader",
    "getColumnWidth",
    "capture",
    "isEditing",
    "stopEditing",
    "getRow",
    "getColumn",
    "fireEvent",
    "CellEvent",
    "_stopResizeHeader",
    "_stopMoveHeader",
    "_hideResizeLine",
    "releaseCapture",
    "fromVisXPos",
    "getFirstColumnX",
    "toVisXPos",
    "fromCol",
    "getVisibleColumnAtX",
    "toCol",
    "fromOverXPos",
    "getOverallX",
    "toOverXPos",
    "getOverallColumnCount",
    "moveColumn",
    "sortCol",
    "getSortColumnIndex",
    "ascending",
    "isSortAscending",
    "data",
    "tapEvent",
    "sortByColumn",
    "getResetSelectionOnHeaderTap",
    "getSelectionModel",
    "resetSelection",
    "getSelectBeforeFocus",
    "getSelectionManager",
    "handleTap",
    "isHidden",
    "getResetSelectionOnTapBelowRows",
    "getContextMenuFromDataCellsOnly",
    "getShowCellFocusIndicator",
    "menu",
    "getContextMenu",
    "getChildren",
    "length",
    "openAtPointer",
    "exclude",
    "preventDefault",
    "_onContextMenuOpen",
    "startEditing",
    "resizeLine",
    "getWidth",
    "paneBounds",
    "round",
    "_excludeChildControl",
    "paneLeft",
    "getContentLocation",
    "colCount",
    "getColumnCount",
    "targetXPos",
    "targetX",
    "currX",
    "xPos",
    "getColumnAtX",
    "colWidth",
    "scrollerLeft",
    "scrollerWidth",
    "lang",
    "Number",
    "limit",
    "scrollCellVisible",
    "clipperSize",
    "colLeft",
    "rowTop",
    "minScrollX",
    "maxScrollX",
    "minScrollY",
    "maxScrollY",
    "isColumnEditable",
    "getValue",
    "getCellEditorFactory",
    "cellInfo",
    "createCellEditor",
    "window",
    "Window",
    "setModal",
    "setShowClose",
    "_onCellEditorModalWindowClose",
    "f",
    "getModalCellEditorPreOpenFunction",
    "open",
    "addState",
    "setKeepActive",
    "focus",
    "activate",
    "flushEditor",
    "cancel",
    "getCellEditorValue",
    "oldValue",
    "setValue",
    "cancelEditing",
    "removeState",
    "removeListenerById",
    "destroy",
    "contentLocation",
    "regionRadius",
    "panePos",
    "getRenderedRowHeight",
    "floor",
    "tableY",
    "headerPos",
    "setTopRightWidget",
    "widget",
    "oldWidget",
    "remove",
    "getHeader",
    "getTablePane",
    "getNeededScrollBars",
    "forceHorizontal",
    "preventVertical",
    "verScrollBar",
    "verBarWidth",
    "horScrollBar",
    "horBarHeight",
    "getMarginTop",
    "getMarginBottom",
    "viewWidth",
    "viewHeight",
    "getHorizontalScrollBarVisible",
    "paneWidth",
    "paneHeight",
    "horNeeded",
    "verNeeded",
    "horBar",
    "verBar",
    "getPaneClipper",
    "getScrollAreaContainer",
    "_applyScrollTimeout",
    "timeout",
    "setInterval",
    "start",
    "GlobalError",
    "observeMethod",
    "_layoutPending",
    "oldFirstRow",
    "getFirstVisibleRow",
    "setFirstVisibleRow",
    "visibleRowCount",
    "ceil",
    "paneOffset",
    "firstVisibleRowComplete",
    "setVisibleRowCount",
    "scrollToY",
    "editing",
    "moveToCell",
    "destruct",
    "dispose",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Scroller.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Shows a whole meta column. This includes a {@link Header},\n * a {@link Pane} and the needed scroll bars. This class handles the\n * virtual scrolling and does all the pointer event handling.\n *\n * @childControl header {qx.ui.table.pane.Header} header pane\n * @childControl pane {qx.ui.table.pane.Pane} table pane to show the data\n * @childControl focus-indicator {qx.ui.table.pane.FocusIndicator} shows the current focused cell\n * @childControl resize-line {qx.ui.core.Widget} resize line widget\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n */\nqx.Class.define(\"qx.ui.table.pane.Scroller\", {\n  extend: qx.ui.core.Widget,\n  include: [qx.ui.core.scroll.MScrollBarFactory],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param table {qx.ui.table.Table} the table the scroller belongs to.\n   */\n  construct(table) {\n    super();\n\n    this.__table = table;\n\n    // init layout\n    var grid = new qx.ui.layout.Grid();\n    grid.setColumnFlex(0, 1);\n    grid.setRowFlex(1, 1);\n    this._setLayout(grid);\n\n    // init child controls\n    this.__header = this._showChildControl(\"header\");\n    this.__tablePane = this._showChildControl(\"pane\");\n\n    // the top line containing the header clipper and the top right widget\n    this.__top = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n      minWidth: 0\n    });\n\n    this._add(this.__top, { row: 0, column: 0, colSpan: 2 });\n\n    // embed header into a scrollable container\n    this._headerClipper = this._createHeaderClipper();\n    this._headerClipper.add(this.__header);\n    this._headerClipper.addListener(\n      \"losecapture\",\n      this._onChangeCaptureHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\n      \"pointermove\",\n      this._onPointermoveHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\n      \"pointerdown\",\n      this._onPointerdownHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\"pointerup\", this._onPointerupHeader, this);\n    this._headerClipper.addListener(\"tap\", this._onTapHeader, this);\n    this.__top.add(this._headerClipper, { flex: 1 });\n\n    // embed pane into a scrollable container\n    this._paneClipper = this._createPaneClipper();\n    this._paneClipper.add(this.__tablePane);\n    this._paneClipper.addListener(\"roll\", this._onRoll, this);\n    this._paneClipper.addListener(\"pointermove\", this._onPointermovePane, this);\n    this._paneClipper.addListener(\"pointerdown\", this._onPointerdownPane, this);\n    this._paneClipper.addListener(\"tap\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onContextMenu, this);\n    if (qx.core.Environment.get(\"device.type\") === \"desktop\") {\n      this._paneClipper.addListener(\"dblclick\", this._onDbltapPane, this);\n    } else {\n      this._paneClipper.addListener(\"dbltap\", this._onDbltapPane, this);\n    }\n    this._paneClipper.addListener(\"resize\", this._onResizePane, this);\n\n    // if we have overlayed scroll bars, we should use a separate container\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      this.__clipperContainer = new qx.ui.container.Composite();\n      this.__clipperContainer.setLayout(new qx.ui.layout.Canvas());\n      this.__clipperContainer.add(this._paneClipper, { edge: 0 });\n      this._add(this.__clipperContainer, { row: 1, column: 0 });\n    } else {\n      this._add(this._paneClipper, { row: 1, column: 0 });\n    }\n\n    // init scroll bars\n    this.__horScrollBar = this._showChildControl(\"scrollbar-x\");\n    this.__verScrollBar = this._showChildControl(\"scrollbar-y\");\n\n    // init focus indicator\n    this.__focusIndicator = this.getChildControl(\"focus-indicator\");\n    // need to run the apply method at least once [BUG #4057]\n    this.initShowCellFocusIndicator();\n\n    // force creation of the resize line\n    this.getChildControl(\"resize-line\").hide();\n\n    this.addListener(\"pointerout\", this._onPointerout, this);\n    this.addListener(\"appear\", this._onAppear, this);\n    this.addListener(\"disappear\", this._onDisappear, this);\n\n    this.__timer = new qx.event.Timer();\n    this.__timer.addListener(\"interval\", this._oninterval, this);\n    this.initScrollTimeout();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {int} The minimum width a column could get in pixels. */\n    MIN_COLUMN_WIDTH: 10,\n\n    /** @type {int} The radius of the resize region in pixels. */\n    RESIZE_REGION_RADIUS: 5,\n\n    /**\n     * (int) The number of pixels the pointer may move between pointer down and pointer up\n     * in order to count as a tap.\n     */\n    TAP_TOLERANCE: 5,\n\n    /**\n     * (int) The mask for the horizontal scroll bar.\n     * May be combined with {@link #VERTICAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    HORIZONTAL_SCROLLBAR: 1,\n\n    /**\n     * (int) The mask for the vertical scroll bar.\n     * May be combined with {@link #HORIZONTAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    VERTICAL_SCROLLBAR: 2\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Dispatched if the pane is scrolled horizontally */\n    changeScrollY: \"qx.event.type.Data\",\n\n    /** Dispatched if the pane is scrolled vertically */\n    changeScrollX: \"qx.event.type.Data\",\n\n    /**See {@link qx.ui.table.Table#cellTap}.*/\n    cellTap: \"qx.ui.table.pane.CellEvent\",\n\n    /*** See {@link qx.ui.table.Table#cellDbltap}.*/\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\n\n    /**See {@link qx.ui.table.Table#cellContextmenu}.*/\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\n\n    /** Dispatched when a sortable header was tapped */\n    beforeSort: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Whether to show the horizontal scroll bar. This is a tri-state\n     * value. `true` means show the scroll bar; `false` means exclude it; null\n     * means hide it so it retains its space but doesn't show a scroll bar.\n     */\n    horizontalScrollBarVisible: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyHorizontalScrollBarVisible\",\n      event: \"changeHorizontalScrollBarVisible\",\n      nullable: true\n    },\n\n    /** Whether to show the vertical scroll bar */\n    verticalScrollBarVisible: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyVerticalScrollBarVisible\",\n      event: \"changeVerticalScrollBarVisible\"\n    },\n\n    /** The table pane model. */\n    tablePaneModel: {\n      check: \"qx.ui.table.pane.Model\",\n      apply: \"_applyTablePaneModel\",\n      event: \"changeTablePaneModel\"\n    },\n\n    /**\n     * Whether column resize should be live. If false, during resize only a line is\n     * shown and the real resize happens when the user releases the pointer button.\n     */\n    liveResize: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to handle selections via the selection manager before setting the\n     * focus.  The traditional behavior is to handle selections after setting the\n     * focus, but setting the focus means redrawing portions of the table, and\n     * some subclasses may want to modify the data to be displayed based on the\n     * selection.\n     */\n    selectBeforeFocus: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Interval time (in milliseconds) for the table update timer.\n     * Setting this to 0 clears the timer.\n     */\n    scrollTimeout: {\n      check: \"Integer\",\n      init: 100,\n      apply: \"_applyScrollTimeout\"\n    },\n\n    appearance: {\n      refine: true,\n      init: \"table-scroller\"\n    },\n\n    /**\n     * If set then defines the minimum height of the focus indicator when editing\n     */\n    minCellEditHeight: {\n      check: \"Integer\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lastRowCount: null,\n    __table: null,\n\n    __updateInterval: null,\n    __updateContentPlanned: null,\n    __onintervalWrapper: null,\n\n    _moveColumn: null,\n    __lastMoveColPos: null,\n    _lastMoveTargetX: null,\n    _lastMoveTargetScroller: null,\n    __lastMovePointerPageX: null,\n\n    __resizeColumn: null,\n    __lastResizePointerPageX: null,\n    __lastResizeWidth: null,\n\n    __lastPointerDownCell: null,\n    __firedTapEvent: false,\n    __ignoreTap: null,\n    __lastPointerPageX: null,\n    __lastPointerPageY: null,\n\n    __focusedCol: null,\n    __focusedRow: null,\n\n    _cellEditor: null,\n    __cellEditorFactory: null,\n\n    __topRightWidget: null,\n    __horScrollBar: null,\n    __verScrollBar: null,\n    __header: null,\n    _headerClipper: null,\n    __tablePane: null,\n    _paneClipper: null,\n    __clipperContainer: null,\n    __focusIndicator: null,\n    __top: null,\n\n    __timer: null,\n\n    __focusIndicatorPointerDownListener: null,\n\n    /**\n     * The right inset of the pane. The right inset is the maximum of the\n     * top right widget width and the scrollbar width (if visible).\n     *\n     * @return {Integer} The right inset of the pane\n     */\n    getPaneInsetRight() {\n      var topRight = this.getTopRightWidget();\n      var topRightWidth =\n        topRight && topRight.isVisible() && topRight.getBounds()\n          ? topRight.getBounds().width +\n            topRight.getMarginLeft() +\n            topRight.getMarginRight()\n          : 0;\n\n      var scrollBar = this.__verScrollBar;\n      var scrollBarWidth = this.getVerticalScrollBarVisible()\n        ? this.getVerticalScrollBarWidth() +\n          scrollBar.getMarginLeft() +\n          scrollBar.getMarginRight()\n        : 0;\n\n      return Math.max(topRightWidth, scrollBarWidth);\n    },\n\n    /**\n     * Set the pane's width\n     *\n     * @param width {Integer} The pane's width\n     */\n    setPaneWidth(width) {\n      if (this.isVerticalScrollBarVisible()) {\n        width += this.getPaneInsetRight();\n      }\n      this.setWidth(width);\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"header\":\n          control = this.getTable().getNewTablePaneHeader()(this);\n          break;\n\n        case \"pane\":\n          control = this.getTable().getNewTablePane()(this);\n          break;\n\n        case \"focus-indicator\":\n          control = new qx.ui.table.pane.FocusIndicator(this);\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          control.addListener(\n            \"pointerup\",\n            this._onPointerupFocusIndicator,\n            this\n          );\n\n          this._paneClipper.add(control);\n          control.show(); // must be active for editor to operate\n          control.setDecorator(null); // it can be initially invisible, though.\n          break;\n\n        case \"resize-line\":\n          control = new qx.ui.core.Widget();\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          this._paneClipper.add(control);\n          break;\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\").set({\n            alignY: \"bottom\"\n          });\n\n          control.addListener(\"scroll\", this._onScrollX, this);\n\n          if (this.__clipperContainer != null) {\n            control.setMinHeight(\n              qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH\n            );\n\n            this.__clipperContainer.add(control, {\n              bottom: 0,\n              right: 0,\n              left: 0\n            });\n          } else {\n            this._add(control, { row: 2, column: 0 });\n          }\n          break;\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.addListener(\"scroll\", this._onScrollY, this);\n\n          if (this.__clipperContainer != null) {\n            this.__clipperContainer.add(control, {\n              right: 0,\n              bottom: 0,\n              top: 0\n            });\n          } else {\n            this._add(control, { row: 1, column: 1 });\n          }\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    // property modifier\n    _applyHorizontalScrollBarVisible(value, old) {\n      if (value === null) {\n        this.__horScrollBar.setVisibility(\"hidden\");\n      } else {\n        this.__horScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n      }\n    },\n\n    // property modifier\n    _applyVerticalScrollBarVisible(value, old) {\n      this.__verScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n    },\n\n    // property modifier\n    _applyTablePaneModel(value, old) {\n      if (old != null) {\n        old.removeListener(\"modelChanged\", this._onPaneModelChanged, this);\n      }\n\n      value.addListener(\"modelChanged\", this._onPaneModelChanged, this);\n    },\n\n    // property modifier\n    _applyShowCellFocusIndicator(value, old) {\n      if (value) {\n        this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n        this._updateFocusIndicator();\n      } else {\n        if (this.__focusIndicator) {\n          this.__focusIndicator.setDecorator(null);\n        }\n      }\n    },\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollY() {\n      return this.__verScrollBar.getPosition();\n    },\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollY {Integer} The new scroll position.\n     * @param renderSync {Boolean?false} Whether the table update should be\n     *     performed synchronously.\n     */\n    setScrollY(scrollY, renderSync) {\n      this.__verScrollBar.scrollTo(scrollY);\n      if (renderSync) {\n        this._updateContent();\n      }\n    },\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollX() {\n      return this.__horScrollBar.getPosition();\n    },\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollX {Integer} The new scroll position.\n     */\n    setScrollX(scrollX) {\n      this.__horScrollBar.scrollTo(scrollX);\n    },\n\n    /**\n     * Returns the table this scroller belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable() {\n      return this.__table;\n    },\n\n    /**\n     * Creates and returns an instance of pane clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createPaneClipper() {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n    /**\n     * Creates and returns an instance of header clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createHeaderClipper() {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     */\n    onColVisibilityChanged() {\n      this.updateHorScrollBarMaximum();\n      this._updateFocusIndicator();\n    },\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth(col, width) {\n      this.__header.setColumnWidth(col, width);\n      this.__tablePane.setColumnWidth(col, width);\n\n      var paneModel = this.getTablePaneModel();\n      var x = paneModel.getX(col);\n\n      if (x != -1) {\n        // The change was in this scroller\n        this.updateHorScrollBarMaximum();\n        this._updateFocusIndicator();\n      }\n    },\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     */\n    onColOrderChanged() {\n      this.__header.onColOrderChanged();\n      this.__tablePane.onColOrderChanged();\n\n      this.updateHorScrollBarMaximum();\n    },\n\n    /**\n     * Event handler. Called when the table model has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn) {\n      this.__tablePane.onTableModelDataChanged(\n        firstRow,\n        lastRow,\n        firstColumn,\n        lastColumn\n      );\n\n      var rowCount = this.getTable().getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount) {\n        this.updateVerScrollBarMaximum();\n\n        const focusedRow = this.getFocusedRow();\n        if (focusedRow !== null && focusedRow >= rowCount) {\n          if (rowCount == 0) {\n            this.setFocusedCell(null, null);\n          } else {\n            this.setFocusedCell(this.getFocusedColumn(), rowCount - 1);\n          }\n        }\n        this.__lastRowCount = rowCount;\n      }\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged() {\n      this.__tablePane.onSelectionChanged();\n    },\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged() {\n      this.__tablePane.onFocusChanged();\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged() {\n      this.__header.onTableModelMetaDataChanged();\n      this.__tablePane.onTableModelMetaDataChanged();\n    },\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    _onPaneModelChanged() {\n      this.__header.onPaneModelChanged();\n      this.__tablePane.onPaneModelChanged();\n    },\n\n    /**\n     * Event listener for the pane clipper's resize event\n     */\n    _onResizePane() {\n      this.updateHorScrollBarMaximum();\n      this.updateVerScrollBarMaximum();\n\n      // The height has changed -> Update content\n      this._updateContent();\n      this.__header._updateContent();\n      this.__table._updateScrollBarVisibility();\n    },\n\n    /**\n     * Updates the maximum of the horizontal scroll bar, so it corresponds to the\n     * total width of the columns in the table pane.\n     */\n    updateHorScrollBarMaximum() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n      var scrollSize = this.getTablePaneModel().getTotalWidth();\n\n      var scrollBar = this.__horScrollBar;\n\n      if (paneSize.width < scrollSize) {\n        var max = Math.max(0, scrollSize - paneSize.width);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.width / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      } else {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n    /**\n     * Updates the maximum of the vertical scroll bar, so it corresponds to the\n     * number of rows in the table.\n     */\n    updateVerScrollBarMaximum() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      if (this.getTable().getKeepFirstVisibleRowComplete()) {\n        rowCount += 1;\n      }\n\n      var rowHeight = this.getTable().getRowHeight();\n      var scrollSize = rowCount * rowHeight;\n      var scrollBar = this.__verScrollBar;\n\n      if (paneSize.height < scrollSize) {\n        var max = Math.max(0, scrollSize - paneSize.height);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.height / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      } else {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n    /**\n     * Event handler. Called when the table property \"keepFirstVisibleRowComplete\"\n     * changed.\n     */\n    onKeepFirstVisibleRowCompleteChanged() {\n      this.updateVerScrollBarMaximum();\n      this._updateContent();\n    },\n\n    /**\n     * Event handler for the scroller's appear event\n     */\n    _onAppear() {\n      // after the Scroller appears we start the interval again\n      this._startInterval(this.getScrollTimeout());\n    },\n\n    /**\n     * Event handler for the disappear event\n     */\n    _onDisappear() {\n      // before the scroller disappears we need to stop it\n      this._stopInterval();\n    },\n\n    /**\n     * Event handler. Called when the horizontal scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    _onScrollX(e) {\n      var scrollLeft = e.getData();\n\n      this.fireDataEvent(\"changeScrollX\", scrollLeft, e.getOldData());\n      this._headerClipper.scrollToX(scrollLeft);\n      this._paneClipper.scrollToX(scrollLeft);\n    },\n\n    /**\n     * Event handler. Called when the vertical scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    __inOnScrollY: false,\n    _onScrollY(e) {\n      if (this.__inOnScrollY) {\n        return;\n      }\n      var scrollbar = this.__verScrollBar;\n      this.__inOnScrollY = true;\n      // calculate delta so that one row is scrolled at a minimum\n      var rowHeight = this.getTable().getRowHeight();\n      var delta = e.getData() - e.getOldData();\n      if (Math.abs(delta) > 1 && Math.abs(delta) < rowHeight) {\n        delta =\n          delta < 0 ? e.getOldData() - rowHeight : e.getOldData() + rowHeight;\n        if (delta >= 0 && delta <= scrollbar.getMaximum()) {\n          scrollbar.setPosition(delta);\n        }\n      }\n      this.__inOnScrollY = false;\n      this.fireDataEvent(\n        \"changeScrollY\",\n        scrollbar.getPosition(),\n        e.getOldData()\n      );\n\n      this._postponedUpdateContent();\n    },\n\n    /**\n     * Event handler. Called when the user moved the mouse wheel.\n     *\n     * @param e {qx.event.type.Roll} the event.\n     */\n    _onRoll(e) {\n      var table = this.getTable();\n\n      if (e.getPointerType() == \"mouse\" || !table.getEnabled()) {\n        return;\n      }\n\n      // vertical scrolling\n      var delta = e.getDelta();\n      // normalize that at least one step is scrolled at a time\n      if (delta.y > 0 && delta.y < 1) {\n        delta.y = 1;\n      } else if (delta.y < 0 && delta.y > -1) {\n        delta.y = -1;\n      }\n      this.__verScrollBar.scrollBy(parseInt(delta.y, 10));\n\n      var scrolled =\n        delta.y != 0 && !this.__isAtEdge(this.__verScrollBar, delta.y);\n\n      // horizontal scrolling\n      // normalize that at least one step is scrolled at a time\n      if (delta.x > 0 && delta.x < 1) {\n        delta.x = 1;\n      } else if (delta.x < 0 && delta.x > -1) {\n        delta.x = -1;\n      }\n      this.__horScrollBar.scrollBy(parseInt(delta.x, 10));\n\n      // Update the focus\n      if (this.__lastPointerPageX && this.getFocusCellOnPointerMove()) {\n        this._focusCellAtPagePos(\n          this.__lastPointerPageX,\n          this.__lastPointerPageY\n        );\n      }\n\n      scrolled =\n        scrolled ||\n        (delta.x != 0 && !this.__isAtEdge(this.__horScrollBar, delta.x));\n\n      // pass the event to the parent if the scrollbar is at an edge\n      if (scrolled) {\n        e.stop();\n      } else {\n        e.stopMomentum();\n      }\n    },\n\n    /**\n     * Checks if the table has been scrolled.\n     * @param scrollBar {qx.ui.core.scroll.IScrollBar} The scrollbar to check\n     * @param delta {Number} The scroll delta.\n     * @return {Boolean} <code>true</code>, if the scrolling is a the edge\n     */\n    __isAtEdge(scrollBar, delta) {\n      var position = scrollBar.getPosition();\n      return (\n        (delta < 0 && position <= 0) ||\n        (delta > 0 && position >= scrollBar.getMaximum())\n      );\n    },\n\n    /**\n     * Common column resize logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     */\n    __handleResizeColumn(pageX) {\n      var table = this.getTable();\n      // We are currently resizing -> Update the position\n      var headerCell = this.__header.getHeaderWidgetAtColumn(\n        this.__resizeColumn\n      );\n\n      var minColumnWidth = headerCell.getSizeHint().minWidth;\n\n      var newWidth = Math.max(\n        minColumnWidth,\n        this.__lastResizeWidth + pageX - this.__lastResizePointerPageX\n      );\n\n      if (this.getLiveResize()) {\n        var columnModel = table.getTableColumnModel();\n        columnModel.setColumnWidth(this.__resizeColumn, newWidth, true);\n      } else {\n        var paneModel = this.getTablePaneModel();\n        this._showResizeLine(\n          paneModel.getColumnLeft(this.__resizeColumn) + newWidth\n        );\n      }\n\n      this.__lastResizePointerPageX += newWidth - this.__lastResizeWidth;\n      this.__lastResizeWidth = newWidth;\n    },\n\n    /**\n     * Common column move logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     *\n     */\n    __handleMoveColumn(pageX) {\n      // We are moving a column\n\n      // Check whether we moved outside the tap tolerance so we can start\n      // showing the column move feedback\n      // (showing the column move feedback prevents the ontap event)\n      var tapTolerance = qx.ui.table.pane.Scroller.TAP_TOLERANCE;\n      if (\n        this.__header.isShowingColumnMoveFeedback() ||\n        pageX > this.__lastMovePointerPageX + tapTolerance ||\n        pageX < this.__lastMovePointerPageX - tapTolerance\n      ) {\n        this.__lastMoveColPos += pageX - this.__lastMovePointerPageX;\n\n        this.__header.showColumnMoveFeedback(\n          this._moveColumn,\n          this.__lastMoveColPos\n        );\n\n        // Get the responsible scroller\n        var targetScroller = this.__table.getTablePaneScrollerAtPageX(pageX);\n        if (\n          this._lastMoveTargetScroller &&\n          this._lastMoveTargetScroller != targetScroller\n        ) {\n          this._lastMoveTargetScroller.hideColumnMoveFeedback();\n        }\n        if (targetScroller != null) {\n          this._lastMoveTargetX = targetScroller.showColumnMoveFeedback(pageX);\n        } else {\n          this._lastMoveTargetX = null;\n        }\n\n        this._lastMoveTargetScroller = targetScroller;\n        this.__lastMovePointerPageX = pageX;\n      }\n    },\n\n    /**\n     * Event handler. Called when the user moved the pointer over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermoveHeader(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var useResizeCursor = false;\n      var pointerOverColumn = null;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onmousewheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      if (this.__resizeColumn != null) {\n        // We are currently resizing -> Update the position\n        this.__handleResizeColumn(pageX);\n        useResizeCursor = true;\n        e.stopPropagation();\n      } else if (this._moveColumn != null) {\n        // We are moving a column\n        this.__handleMoveColumn(pageX);\n        e.stopPropagation();\n      } else {\n        var resizeCol = this._getResizeColumnForPageX(pageX);\n        if (resizeCol != -1) {\n          // The pointer is over a resize region -> Show the right cursor\n          useResizeCursor = true;\n        } else {\n          var tableModel = table.getTableModel();\n          var col = this._getColumnForPageX(pageX);\n          if (col != null && tableModel.isColumnSortable(col)) {\n            pointerOverColumn = col;\n          }\n        }\n      }\n\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n      this.__header.setPointerOverColumn(pointerOverColumn);\n    },\n\n    /**\n     * Event handler. Called when the user moved the pointer over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermovePane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      //var useResizeCursor = false;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onpointerwheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      var useResizeCursor = false;\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Show the right cursor\n        useResizeCursor = true;\n      }\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n\n      var row = this._getRowForPagePos(pageX, pageY);\n      if (row != null && this._getColumnForPageX(pageX) != null) {\n        // The pointer is over the data -> update the focus\n        if (this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n      }\n      this.__header.setPointerOverColumn(null);\n    },\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownHeader(e) {\n      if (!this.getTable().getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n      } else {\n        // The pointer is not in a resize region\n        var moveCol = this._getColumnForPageX(pageX);\n        if (moveCol != null) {\n          this._startMoveHeader(moveCol, pageX);\n          e.stop();\n        }\n      }\n    },\n\n    /**\n     * Start a resize session of the header.\n     *\n     * @param resizeCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startResizeHeader(resizeCol, pageX) {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // The pointer is over a resize region -> Start resizing\n      this.__resizeColumn = resizeCol;\n      this.__lastResizePointerPageX = pageX;\n      this.__lastResizeWidth = columnModel.getColumnWidth(this.__resizeColumn);\n      this._headerClipper.capture();\n    },\n\n    /**\n     * Start a move session of the header.\n     *\n     * @param moveCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startMoveHeader(moveCol, pageX) {\n      // Prepare column moving\n      this._moveColumn = moveCol;\n      this.__lastMovePointerPageX = pageX;\n      this.__lastMoveColPos = this.getTablePaneModel().getColumnLeft(moveCol);\n      this._headerClipper.capture();\n    },\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownPane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (table.isEditing()) {\n        table.stopEditing();\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n        return;\n      }\n\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row !== null) {\n        // The focus indicator blocks the tap event on the scroller so we\n        // store the current cell and listen for the pointerup event on the\n        // focus indicator\n        //\n        // INVARIANT:\n        //  The members of this object always contain the last position of\n        //  the cell on which the pointerdown event occurred.\n        //  *** These values are never cleared! ***.\n        //  Different browsers/OS combinations issue events in different\n        //  orders, and the context menu event, in particular, can be issued\n        //  early or late (Firefox on Linux issues it early; Firefox on\n        //  Windows issues it late) so no one may clear these values.\n        //\n        this.__lastPointerDownCell = {\n          row: row,\n          col: col\n        };\n\n        // On the other hand, we need to know if we've issued the tap event\n        // so we don't issue it twice, both from pointer-up on the focus\n        // indicator, and from the tap even on the pane. Both possibilities\n        // are necessary, however, to maintain the qooxdoo order of events.\n        this.__firedTapEvent = false;\n      }\n    },\n\n    /**\n     * Event handler for the focus indicator's pointerup event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerupFocusIndicator(e) {\n      if (\n        this.__lastPointerDownCell &&\n        !this.__firedTapEvent &&\n        !this.isEditing() &&\n        this.__focusIndicator.getRow() == this.__lastPointerDownCell.row &&\n        this.__focusIndicator.getColumn() == this.__lastPointerDownCell.col\n      ) {\n        this.fireEvent(\n          \"cellTap\",\n          qx.ui.table.pane.CellEvent,\n          [\n            this,\n            e,\n            this.__lastPointerDownCell.row,\n            this.__lastPointerDownCell.col\n          ],\n\n          true\n        );\n\n        this.__firedTapEvent = true;\n      } else if (!this.isEditing()) {\n        // if no cellTap event should be fired, act like a pointerdown which\n        // invokes the change of the selection e.g. [BUG #1632]\n        this._onPointerdownPane(e);\n      }\n    },\n\n    /**\n     * Event handler. Called when the event capturing of the header changed.\n     * Stops/finishes an active header resize/move session if it lost capturing\n     * during the session to stay in a stable state.\n     *\n     * @param e {qx.event.type.Data} The data event\n     */\n    _onChangeCaptureHeader(e) {\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n      }\n\n      if (this._moveColumn != null) {\n        this._stopMoveHeader();\n      }\n    },\n\n    /**\n     * Stop a resize session of the header.\n     *\n     */\n    _stopResizeHeader() {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // We are currently resizing -> Finish resizing\n      if (!this.getLiveResize()) {\n        this._hideResizeLine();\n        columnModel.setColumnWidth(\n          this.__resizeColumn,\n          this.__lastResizeWidth,\n          true\n        );\n      }\n\n      this.__resizeColumn = null;\n      this._headerClipper.releaseCapture();\n\n      this.getApplicationRoot().setGlobalCursor(null);\n      this.setCursor(null);\n    },\n\n    /**\n     * Stop a move session of the header.\n     *\n     */\n    _stopMoveHeader() {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n\n      // We are moving a column -> Drop the column\n      this.__header.hideColumnMoveFeedback();\n      if (this._lastMoveTargetScroller) {\n        this._lastMoveTargetScroller.hideColumnMoveFeedback();\n      }\n\n      if (this._lastMoveTargetX != null) {\n        var fromVisXPos =\n          paneModel.getFirstColumnX() + paneModel.getX(this._moveColumn);\n        var toVisXPos = this._lastMoveTargetX;\n        if (toVisXPos != fromVisXPos && toVisXPos != fromVisXPos + 1) {\n          // The column was really moved to another position\n          // (and not moved before or after itself, which is a noop)\n\n          // Translate visible positions to overall positions\n          var fromCol = columnModel.getVisibleColumnAtX(fromVisXPos);\n          var toCol = columnModel.getVisibleColumnAtX(toVisXPos);\n          var fromOverXPos = columnModel.getOverallX(fromCol);\n          var toOverXPos =\n            toCol != null\n              ? columnModel.getOverallX(toCol)\n              : columnModel.getOverallColumnCount();\n\n          if (toOverXPos > fromOverXPos) {\n            // Don't count the column itself\n            toOverXPos--;\n          }\n\n          // Move the column\n          columnModel.moveColumn(fromOverXPos, toOverXPos);\n\n          // update the focus indicator including the editor\n          this._updateFocusIndicator();\n        }\n      }\n\n      this._moveColumn = null;\n      this._lastMoveTargetX = null;\n      this._headerClipper.releaseCapture();\n    },\n\n    /**\n     * Event handler. Called when the user released a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerupHeader(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n        this.__ignoreTap = true;\n        e.stop();\n      } else if (this._moveColumn != null) {\n        this._stopMoveHeader();\n        e.stop();\n      }\n    },\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapHeader(e) {\n      if (this.__ignoreTap) {\n        this.__ignoreTap = false;\n        return;\n      }\n\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var tableModel = table.getTableModel();\n\n      var pageX = e.getDocumentLeft();\n\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n\n      if (resizeCol == -1) {\n        // pointer is not in a resize region\n        var col = this._getColumnForPageX(pageX);\n\n        if (col != null && tableModel.isColumnSortable(col)) {\n          // Sort that column\n          var sortCol = tableModel.getSortColumnIndex();\n          var ascending = col != sortCol ? true : !tableModel.isSortAscending();\n\n          var data = {\n            column: col,\n            ascending: ascending,\n            tapEvent: e\n          };\n\n          if (this.fireDataEvent(\"beforeSort\", data, null, true)) {\n            // Stop cell editing\n            if (table.isEditing()) {\n              table.stopEditing();\n            }\n\n            tableModel.sortByColumn(col, ascending);\n            if (this.getResetSelectionOnHeaderTap()) {\n              table.getSelectionModel().resetSelection();\n            }\n          }\n        }\n      }\n\n      e.stop();\n    },\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapPane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row != null && col != null) {\n        var selectBeforeFocus = this.getSelectBeforeFocus();\n\n        if (selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        // The pointer is over the data -> update the focus\n        if (!this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n\n        if (!selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        if (\n          this.__focusIndicator.isHidden() ||\n          (this.__lastPointerDownCell &&\n            !this.__firedTapEvent &&\n            !this.isEditing() &&\n            row == this.__lastPointerDownCell.row &&\n            col == this.__lastPointerDownCell.col)\n        ) {\n          this.fireEvent(\n            \"cellTap\",\n            qx.ui.table.pane.CellEvent,\n            [this, e, row, col],\n            true\n          );\n\n          this.__firedTapEvent = true;\n        }\n      } else {\n        if (row == null && this.getResetSelectionOnTapBelowRows()) {\n          table.getSelectionModel().resetSelection();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when a context menu is invoked in a cell.\n     *\n     * @param e {qx.event.type.Pointer} the event.\n     */\n    _onContextMenu(e) {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      /*\n       * The 'row' value will be null if the right-click was in the blank\n       * area below the last data row. Some applications desire to receive\n       * the context menu event anyway, and can set the property value of\n       * contextMenuFromDataCellsOnly to false to achieve that.\n       */\n      if (row === null && this.getContextMenuFromDataCellsOnly()) {\n        return;\n      }\n\n      if (\n        !this.getShowCellFocusIndicator() ||\n        row === null ||\n        (this.__lastPointerDownCell &&\n          row == this.__lastPointerDownCell.row &&\n          col == this.__lastPointerDownCell.col)\n      ) {\n        this.fireEvent(\n          \"cellContextmenu\",\n          qx.ui.table.pane.CellEvent,\n          [this, e, row, col],\n          true\n        );\n\n        // Now that the cellContextmenu handler has had a chance to build\n        // the menu for this cell, display it (if there is one).\n        var menu = this.getTable().getContextMenu();\n        if (menu) {\n          // A menu with no children means don't display any context menu\n          // including the default context menu even if the default context\n          // menu is allowed to be displayed normally. There's no need to\n          // actually show an empty menu, though.\n          if (menu.getChildren().length > 0) {\n            menu.openAtPointer(e);\n          } else {\n            menu.exclude();\n          }\n\n          // Do not show native menu\n          e.preventDefault();\n        }\n      }\n    },\n\n    // overridden\n    _onContextMenuOpen(e) {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n    /**\n     * Event handler. Called when the user double tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onDbltapPane(e) {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var col = this._getColumnForPageX(pageX);\n\n      if (col !== null) {\n        this._focusCellAtPagePos(pageX, pageY);\n        this.startEditing();\n\n        var row = this._getRowForPagePos(pageX, pageY);\n        if (row != -1 && row != null) {\n          this.fireEvent(\n            \"cellDbltap\",\n            qx.ui.table.pane.CellEvent,\n            [this, e, row],\n            true\n          );\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the pointer moved out.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerout(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      // Reset the resize cursor when the pointer leaves the header\n      // If currently a column is resized then do nothing\n      // (the cursor will be reset on pointerup)\n      if (this.__resizeColumn == null) {\n        this.setCursor(null);\n        this.getApplicationRoot().setGlobalCursor(null);\n      }\n\n      this.__header.setPointerOverColumn(null);\n\n      // in case the focus follows the pointer, it should be remove on pointerout\n      if (this.getFocusCellOnPointerMove()) {\n        this.__table.setFocusedCell();\n      }\n    },\n\n    /**\n     * Shows the resize line.\n     *\n     * @param x {Integer} the position where to show the line (in pixels, relative to\n     *      the left side of the pane).\n     */\n    _showResizeLine(x) {\n      var resizeLine = this._showChildControl(\"resize-line\");\n\n      var width = resizeLine.getWidth();\n      var paneBounds = this._paneClipper.getBounds();\n      resizeLine.setUserBounds(\n        x - Math.round(width / 2),\n        0,\n        width,\n        paneBounds.height\n      );\n    },\n\n    /**\n     * Hides the resize line.\n     */\n    _hideResizeLine() {\n      this._excludeChildControl(\"resize-line\");\n    },\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the visible x position of the column in the whole table.\n     */\n    showColumnMoveFeedback(pageX) {\n      var paneModel = this.getTablePaneModel();\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneLeft = this.__tablePane.getContentLocation().left;\n      var colCount = paneModel.getColumnCount();\n\n      var targetXPos = 0;\n      var targetX = 0;\n      var currX = paneLeft;\n\n      for (var xPos = 0; xPos < colCount; xPos++) {\n        var col = paneModel.getColumnAtX(xPos);\n        var colWidth = columnModel.getColumnWidth(col);\n\n        if (pageX < currX + colWidth / 2) {\n          break;\n        }\n\n        currX += colWidth;\n        targetXPos = xPos + 1;\n        targetX = currX - paneLeft;\n      }\n\n      // Ensure targetX is visible\n      var scrollerLeft = this._paneClipper.getContentLocation().left;\n      var scrollerWidth = this._paneClipper.getBounds().width;\n      var scrollX = scrollerLeft - paneLeft;\n\n      // NOTE: +2/-1 because of feedback width\n      targetX = qx.lang.Number.limit(\n        targetX,\n        scrollX + 2,\n        scrollX + scrollerWidth - 1\n      );\n\n      this._showResizeLine(targetX);\n\n      // Return the overall target x position\n      return paneModel.getFirstColumnX() + targetXPos;\n    },\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback() {\n      this._hideResizeLine();\n    },\n\n    /**\n     * Sets the focus to the cell that's located at the page position\n     * <code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\n     * nothing happens.\n     *\n     * @param pageX {Integer} the x position in the page (in pixels).\n     * @param pageY {Integer} the y position in the page (in pixels).\n     */\n    _focusCellAtPagePos(pageX, pageY) {\n      var row = this._getRowForPagePos(pageX, pageY);\n\n      if (row != -1 && row != null) {\n        // The pointer is over the data -> update the focus\n        var col = this._getColumnForPageX(pageX);\n        this.__table.setFocusedCell(col, row);\n      }\n    },\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer} the model index of the focused cell's column.\n     * @param row {Integer} the model index of the focused cell's row.\n     */\n    setFocusedCell(col, row) {\n      if (!this.isEditing()) {\n        this.__tablePane.setFocusedCell(col, row, this.__updateContentPlanned);\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        this._updateFocusIndicator();\n      }\n    },\n\n    /**\n     * Returns the column of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn() {\n      return this.__focusedCol;\n    },\n\n    /**\n     * Returns the row of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow() {\n      return this.__focusedRow;\n    },\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible(col, row) {\n      var paneModel = this.getTablePaneModel();\n      var xPos = paneModel.getX(col);\n\n      if (xPos != -1) {\n        var clipperSize = this._paneClipper.getInnerSize();\n        if (!clipperSize) {\n          return;\n        }\n\n        var columnModel = this.getTable().getTableColumnModel();\n\n        var colLeft = paneModel.getColumnLeft(col);\n        var colWidth = columnModel.getColumnWidth(col);\n        var rowHeight = this.getTable().getRowHeight();\n        var rowTop = row * rowHeight;\n\n        var scrollX = this.getScrollX();\n        var scrollY = this.getScrollY();\n\n        // NOTE: We don't use qx.lang.Number.limit, because min should win if max < min\n        var minScrollX = Math.min(\n          colLeft,\n          colLeft + colWidth - clipperSize.width\n        );\n\n        var maxScrollX = colLeft;\n        this.setScrollX(Math.max(minScrollX, Math.min(maxScrollX, scrollX)));\n\n        var minScrollY = rowTop + rowHeight - clipperSize.height;\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          minScrollY += rowHeight;\n        }\n\n        var maxScrollY = rowTop;\n        this.setScrollY(\n          Math.max(minScrollY, Math.min(maxScrollY, scrollY)),\n          true\n        );\n      }\n    },\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing() {\n      return this._cellEditor != null;\n    },\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already\n     * editing, if the column is not editable, or if the cell editor for the\n     * column ascertains that the particular cell is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing() {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var col = this.__focusedCol;\n\n      if (\n        !this.isEditing() &&\n        col != null &&\n        tableModel.isColumnEditable(col)\n      ) {\n        var row = this.__focusedRow;\n        var xPos = this.getTablePaneModel().getX(col);\n        var value = tableModel.getValue(col, row);\n\n        // scroll cell into view\n        this.scrollCellVisible(col, row);\n\n        this.__cellEditorFactory = table\n          .getTableColumnModel()\n          .getCellEditorFactory(col);\n\n        var cellInfo = {\n          col: col,\n          row: row,\n          xPos: xPos,\n          value: value,\n          table: table\n        };\n\n        // Get a cell editor\n        this._cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n        // We handle two types of cell editors: the traditional in-place\n        // editor, where the cell editor returned by the factory must fit in\n        // the space of the table cell; and a modal window in which the\n        // editing takes place.  Additionally, if the cell editor determines\n        // that it does not want to edit the particular cell being requested,\n        // it may return null to indicate that that cell is not editable.\n        if (this._cellEditor === null) {\n          // This cell is not editable even though its column is.\n          return false;\n        } else if (this._cellEditor instanceof qx.ui.window.Window) {\n          // It's a window.  Ensure that it's modal.\n          this._cellEditor.setModal(true);\n\n          // At least for the time being, we disallow the close button.  It\n          // acts differently than a cellEditor.close(), and invokes a bug\n          // someplace.  Modal window cell editors should provide their own\n          // buttons or means to activate a cellEditor.close() or equivalently\n          // cellEditor.hide().\n          this._cellEditor.setShowClose(false);\n\n          // Arrange to be notified when it is closed.\n          this._cellEditor.addListener(\n            \"close\",\n            this._onCellEditorModalWindowClose,\n            this\n          );\n\n          // If there's a pre-open function defined for the table...\n          var f = table.getModalCellEditorPreOpenFunction();\n          if (f != null) {\n            f(this._cellEditor, cellInfo);\n          }\n\n          // Open it now.\n          this._cellEditor.open();\n        } else {\n          // prevent tap event from bubbling up to the table\n          this.__focusIndicatorPointerDownListener =\n            this.__focusIndicator.addListener(\"pointerdown\", e => {\n              this.__lastPointerDownCell = {\n                row: this.__focusedRow,\n                col: this.__focusedCol\n              };\n\n              e.stopPropagation();\n            });\n\n          this._updateFocusIndicator(true);\n          this.__focusIndicator.add(this._cellEditor);\n          this.__focusIndicator.addState(\"editing\");\n          this.__focusIndicator.setKeepActive(false);\n\n          // Make the focus indicator visible during editing\n          this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n\n          this._cellEditor.focus();\n          this._cellEditor.activate();\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing() {\n      // If the focus indicator is not being shown normally...\n      if (!this.getShowCellFocusIndicator()) {\n        // ... then hide it again\n        this.__focusIndicator.setDecorator(null);\n      }\n\n      this.flushEditor(true);\n    },\n\n    /**\n     * Writes the editor's value to the model\n     *\n     * @param cancel {Boolean ? false} Whether to also cancel\n     *      editing before firing the 'dateEdited' event.\n     */\n    flushEditor(cancel) {\n      if (this.isEditing()) {\n        var value = this.__cellEditorFactory.getCellEditorValue(\n          this._cellEditor\n        );\n\n        var oldValue = this.getTable()\n          .getTableModel()\n          .getValue(this.__focusedCol, this.__focusedRow);\n        this.getTable()\n          .getTableModel()\n          .setValue(this.__focusedCol, this.__focusedRow, value);\n\n        this.__table.focus();\n\n        if (cancel) {\n          this.cancelEditing();\n        }\n\n        // Fire an event containing the value change.\n        this.__table.fireDataEvent(\"dataEdited\", {\n          row: this.__focusedRow,\n          col: this.__focusedCol,\n          oldValue: oldValue,\n          value: value\n        });\n      }\n    },\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing() {\n      if (this.isEditing()) {\n        if (!(this._cellEditor instanceof qx.ui.window.Window)) {\n          this.__focusIndicator.removeState(\"editing\");\n          this.__focusIndicator.setKeepActive(true);\n\n          if (this.__focusIndicatorPointerDownListener !== null) {\n            this.__focusIndicator.removeListenerById(\n              this.__focusIndicatorPointerDownListener\n            );\n\n            this.__focusIndicatorPointerDownListener = null;\n          }\n          this._updateFocusIndicator();\n        }\n        this._cellEditor.destroy();\n        this._cellEditor = null;\n        this.__cellEditorFactory = null;\n      }\n    },\n\n    /**\n     * Event handler. Called when the modal window of the cell editor closes.\n     *\n     * @param e {Map} the event.\n     */\n    _onCellEditorModalWindowClose(e) {\n      this.stopEditing();\n    },\n\n    /**\n     * Returns the model index of the column the pointer is over or null if the pointer\n     * is not over a column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the model index of the column the pointer is over.\n     */\n    _getColumnForPageX(pageX) {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n      var colCount = paneModel.getColumnCount();\n      var currX = this.__tablePane.getContentLocation().left;\n\n      for (var x = 0; x < colCount; x++) {\n        var col = paneModel.getColumnAtX(x);\n        var colWidth = columnModel.getColumnWidth(col);\n        currX += colWidth;\n\n        if (pageX < currX) {\n          return col;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns the model index of the column that should be resized when dragging\n     * starts here. Returns -1 if the pointer is in no resize region of any column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the column index.\n     */\n    _getResizeColumnForPageX(pageX) {\n      var contentLocation =\n        this.__header.getContentLocation() ||\n        this.__tablePane.getContentLocation();\n      if (contentLocation) {\n        var currX = contentLocation.left;\n        var columnModel = this.getTable().getTableColumnModel();\n        var paneModel = this.getTablePaneModel();\n        var colCount = paneModel.getColumnCount();\n        var regionRadius = qx.ui.table.pane.Scroller.RESIZE_REGION_RADIUS;\n\n        for (var x = 0; x < colCount; x++) {\n          var col = paneModel.getColumnAtX(x);\n          var colWidth = columnModel.getColumnWidth(col);\n          currX += colWidth;\n\n          if (pageX >= currX - regionRadius && pageX <= currX + regionRadius) {\n            return col;\n          }\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the model index of the row the pointer is currently over. Returns -1 if\n     * the pointer is over the header. Returns null if the pointer is not over any\n     * column.\n     *\n     * @param pageX {Integer} the pointer x position in the page.\n     * @param pageY {Integer} the pointer y position in the page.\n     * @return {Integer} the model index of the row the pointer is currently over.\n     */\n    _getRowForPagePos(pageX, pageY) {\n      var panePos = this.__tablePane.getContentLocation();\n\n      if (panePos === null || pageX < panePos.left || pageX > panePos.right) {\n        // There was no cell or header cell hit\n        return null;\n      }\n\n      if (pageY >= panePos.top && pageY <= panePos.bottom) {\n        // This event is in the pane -> Get the row\n        var rowHeight = this.__tablePane.getRenderedRowHeight()\n\n        var scrollY = this.__verScrollBar.getPosition();\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          scrollY = Math.floor(scrollY / this.getTable().getRowHeight()) * rowHeight;\n        }\n\n        var tableY = scrollY + pageY - panePos.top;\n        var row = Math.floor(tableY / rowHeight);\n\n        var tableModel = this.getTable().getTableModel();\n        var rowCount = tableModel.getRowCount();\n\n        return row < rowCount ? row : null;\n      }\n\n      var headerPos = this.__header.getContentLocation();\n\n      if (\n        headerPos !== null &&\n        pageY >= headerPos.top &&\n        pageY <= headerPos.bottom &&\n        pageX <= headerPos.right\n      ) {\n        // This event is in the pane -> Return -1 for the header\n        return -1;\n      }\n\n      return null;\n    },\n\n    /**\n     * Sets the widget that should be shown in the top right corner.\n     *\n     * The widget will not be disposed, when this table scroller is disposed. So the\n     * caller has to dispose it.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to set. May be null.\n     */\n    setTopRightWidget(widget) {\n      var oldWidget = this.__topRightWidget;\n\n      if (oldWidget != null) {\n        this.__top.remove(oldWidget);\n      }\n\n      if (widget != null) {\n        this.__top.add(widget);\n      }\n\n      this.__topRightWidget = widget;\n    },\n\n    /**\n     * Get the top right widget\n     *\n     * @return {qx.ui.core.Widget} The top right widget.\n     */\n    getTopRightWidget() {\n      return this.__topRightWidget;\n    },\n\n    /**\n     * Returns the header.\n     *\n     * @return {qx.ui.table.pane.Header} the header.\n     */\n    getHeader() {\n      return this.__header;\n    },\n\n    /**\n     * Returns the table pane.\n     *\n     * @return {qx.ui.table.pane.Pane} the table pane.\n     */\n    getTablePane() {\n      return this.__tablePane;\n    },\n\n    /**\n     * Get the rendered width of the vertical scroll bar. The return value is\n     * <code>0</code> if the scroll bar is invisible or not yet rendered.\n     *\n     * @internal\n     * @return {Integer} The width of the vertical scroll bar\n     */\n    getVerticalScrollBarWidth() {\n      var scrollBar = this.__verScrollBar;\n      return scrollBar.isVisible() ? scrollBar.getSizeHint().width || 0 : 0;\n    },\n\n    /**\n     * Returns which scrollbars are needed.\n     *\n     * @param forceHorizontal {Boolean ? false} Whether to show the horizontal\n     *      scrollbar always.\n     * @param preventVertical {Boolean ? false} Whether to show the vertical scrollbar\n     *      never.\n     * @return {Integer} which scrollbars are needed. This may be any combination of\n     *      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n     *      (combined by OR).\n     */\n    getNeededScrollBars(forceHorizontal, preventVertical) {\n      var verScrollBar = this.__verScrollBar;\n      var verBarWidth =\n        verScrollBar.getSizeHint().width +\n        verScrollBar.getMarginLeft() +\n        verScrollBar.getMarginRight();\n\n      var horScrollBar = this.__horScrollBar;\n      var horBarHeight =\n        horScrollBar.getSizeHint().height +\n        horScrollBar.getMarginTop() +\n        horScrollBar.getMarginBottom();\n\n      // Get the width and height of the view (without scroll bars)\n      var clipperSize = this._paneClipper.getInnerSize();\n      var viewWidth = clipperSize ? clipperSize.width : 0;\n\n      if (this.getVerticalScrollBarVisible()) {\n        viewWidth += verBarWidth;\n      }\n\n      var viewHeight = clipperSize ? clipperSize.height : 0;\n\n      if (this.getHorizontalScrollBarVisible()) {\n        viewHeight += horBarHeight;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      // Get the (virtual) width and height of the pane\n      var paneWidth = this.getTablePaneModel().getTotalWidth();\n      var paneHeight = this.getTable().getRowHeight() * rowCount;\n\n      // Check which scrollbars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n\n      if (paneWidth > viewWidth) {\n        horNeeded = true;\n\n        if (paneHeight > viewHeight - horBarHeight) {\n          verNeeded = true;\n        }\n      } else if (paneHeight > viewHeight) {\n        verNeeded = true;\n\n        if (!preventVertical && paneWidth > viewWidth - verBarWidth) {\n          horNeeded = true;\n        }\n      }\n\n      // Create the mask\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      return (\n        (forceHorizontal || horNeeded ? horBar : 0) |\n        (preventVertical || !verNeeded ? 0 : verBar)\n      );\n    },\n\n    /**\n     * Return the pane clipper. It is sometimes required for special activities\n     * such as tracking events for drag&drop.\n     *\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getPaneClipper() {\n      return this._paneClipper;\n    },\n\n    /**\n     * Returns the scroll area container widget (which enables more precise\n     * operations e.g. bounds retrieval for drag session scrolling).\n     *\n     * @see qx.ui.core.MDragDropScrolling#_getBounds\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getScrollAreaContainer() {\n      return this.getPaneClipper();\n    },\n\n    // property apply method\n    _applyScrollTimeout(value, old) {\n      this._startInterval(value);\n    },\n\n    /**\n     * Starts the current running interval\n     *\n     * @param timeout {Integer} The timeout between two table updates\n     */\n    _startInterval(timeout) {\n      this.__timer.setInterval(timeout);\n      this.__timer.start();\n    },\n\n    /**\n     * stops the current running interval\n     */\n    _stopInterval() {\n      this.__timer.stop();\n    },\n\n    /**\n     * Does a postponed update of the content.\n     *\n     * @see #_updateContent\n     */\n    _postponedUpdateContent() {\n      //this.__updateContentPlanned = true;\n      this._updateContent();\n    },\n\n    /**\n     * Timer event handler. Periodically checks whether a table update is\n     * required. The update interval is controlled by the {@link #scrollTimeout}\n     * property.\n     *\n     * @signature function()\n     */\n    _oninterval: qx.event.GlobalError.observeMethod(function () {\n      if (this.__updateContentPlanned && !this.__tablePane._layoutPending) {\n        this.__updateContentPlanned = false;\n        this._updateContent();\n      }\n    }),\n\n    /**\n     * Updates the content. Sets the right section the table pane should show and\n     * does the scrolling.\n     */\n    _updateContent() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        return;\n      }\n      var paneHeight = paneSize.height;\n\n      var scrollX = this.__horScrollBar.getPosition();\n      var scrollY = this.__verScrollBar.getPosition();\n      var rowHeight = this.getTable().getRowHeight();\n\n      var firstRow = Math.floor(scrollY / rowHeight);\n      var oldFirstRow = this.__tablePane.getFirstVisibleRow();\n      this.__tablePane.setFirstVisibleRow(firstRow);\n\n      var visibleRowCount = Math.ceil(paneHeight / rowHeight);\n      var paneOffset = 0;\n      var firstVisibleRowComplete =\n        this.getTable().getKeepFirstVisibleRowComplete();\n\n      if (!firstVisibleRowComplete) {\n        // NOTE: We don't consider paneOffset, because this may cause alternating\n        //       adding and deleting of one row when scrolling. Instead we add one row\n        //       in every case.\n        visibleRowCount++;\n\n        paneOffset = scrollY % rowHeight;\n      }\n\n      this.__tablePane.setVisibleRowCount(visibleRowCount);\n\n      if (firstRow != oldFirstRow) {\n        this._updateFocusIndicator();\n      }\n\n      this._paneClipper.scrollToX(scrollX);\n\n      // Avoid expensive calls to setScrollTop if\n      // scrolling is not needed\n      if (!firstVisibleRowComplete) {\n        this._paneClipper.scrollToY(paneOffset);\n      }\n    },\n\n    /**\n     * Updates the location and the visibility of the focus indicator.\n     *\n     * @param editing {Boolean ? false} True if editing the cell\n     */\n    _updateFocusIndicator(editing) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      this.__focusIndicator.moveToCell(\n        this.__focusedCol,\n        this.__focusedRow,\n        editing\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._stopInterval();\n\n    // this object was created by the table on init so we have to clean it up.\n    var tablePaneModel = this.getTablePaneModel();\n    if (tablePaneModel) {\n      tablePaneModel.dispose();\n    }\n\n    this.__lastPointerDownCell = this.__topRightWidget = this.__table = null;\n    this._disposeObjects(\n      \"__horScrollBar\",\n      \"__verScrollBar\",\n      \"_headerClipper\",\n      \"_paneClipper\",\n      \"__focusIndicator\",\n      \"__header\",\n      \"__tablePane\",\n      \"__top\",\n      \"__timer\",\n      \"__clipperContainer\"\n    );\n  }\n});\n"
  ],
  "mappings": "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"
}