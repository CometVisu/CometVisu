{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "getChildren",
    "_getChildren",
    "hasChildren",
    "_hasChildren",
    "indexOf",
    "child",
    "_indexOf",
    "add",
    "layoutProperties",
    "_add",
    "addAt",
    "index",
    "options",
    "_addAt",
    "addBefore",
    "before",
    "_addBefore",
    "addAfter",
    "after",
    "_addAfter",
    "remove",
    "_remove",
    "removeAt",
    "_removeAt",
    "removeAll",
    "_removeAll",
    "statics",
    "remap",
    "ui",
    "mobile",
    "core",
    "MChildrenHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/core/MChildrenHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * This mixin exposes all basic methods to manage widget children as public methods.\n * It can only be included into instances of {@link Widget}.\n *\n * To optimize the method calls the including widget should call the method\n * {@link #remap} in its defer function. This will map the protected\n * methods to the public ones and save one method call for each function.\n */\nqx.Mixin.define(\"qx.ui.mobile.core.MChildrenHandling\", {\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Returns the children list\n     *\n     * @return {qx.ui.core.Widget[]} The children array (Arrays are\n     *   reference types, please do not modify them in-place)\n     */\n    getChildren() {\n      return this._getChildren();\n    },\n\n    /**\n     * Whether the widget contains children.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget has children.\n     */\n    hasChildren() {\n      return this._hasChildren();\n    },\n\n    /**\n     * Returns the index position of the given widget if it is\n     * a child widget. Otherwise it returns <code>-1</code>.\n     *\n     * @param child {qx.ui.core.Widget} the widget to query for\n     * @return {Integer} The index position or <code>-1</code> when\n     *   the given widget is no child of this layout.\n     */\n    indexOf(child) {\n      return this._indexOf(child);\n    },\n\n    /**\n     * Adds a new child widget.\n     *\n     * @param child {qx.ui.core.Widget} the widget to add.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    add(child, layoutProperties) {\n      this._add(child, layoutProperties);\n    },\n\n    /**\n     * Add a child widget at the specified index\n     *\n     * @param child {qx.ui.core.Widget} widget to add\n     * @param index {Integer} Index, at which the widget will be inserted\n     * @param options {Map?null} Optional layout data for widget.\n     */\n    addAt(child, index, options) {\n      this._addAt(child, index, options);\n    },\n\n    /**\n     * Add a widget before another already inserted widget\n     *\n     * @param child {qx.ui.core.Widget} Widget to add\n     * @param before {qx.ui.core.Widget} Widget before the new widget will be inserted.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    addBefore(child, before, layoutProperties) {\n      this._addBefore(child, before, layoutProperties);\n    },\n\n    /**\n     * Add a widget after another already inserted widget\n     *\n     * @param child {qx.ui.core.Widget} Widget to add\n     * @param after {qx.ui.core.Widget} Widget, after which the new widget will be inserted\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    addAfter(child, after, layoutProperties) {\n      this._addAfter(child, after, layoutProperties);\n    },\n\n    /**\n     * Remove the given child widget.\n     *\n     * @param child {qx.ui.core.Widget} the widget to remove\n     */\n    remove(child) {\n      this._remove(child);\n    },\n\n    /**\n     * Remove the widget at the specified index.\n     *\n     * @param index {Integer} Index of the widget to remove.\n     */\n    removeAt(index) {\n      this._removeAt(index);\n    },\n\n    /**\n     * Remove all children.\n     */\n    removeAll() {\n      this._removeAll();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Mapping of protected methods to public.\n     * This omits an additional function call when using these methods. Call\n     * this methods in the defer block of the including class.\n     *\n     * @param members {Map} The including classes members map\n     */\n    remap(members) {\n      members.getChildren = members._getChildren;\n      members.hasChildren = members._hasChildren;\n      members.indexOf = members._indexOf;\n\n      members.add = members._add;\n      members.addAt = members._addAt;\n      members.addBefore = members._addBefore;\n      members.addAfter = members._addAfter;\n\n      members.remove = members._remove;\n      members.removeAt = members._removeAt;\n      members.removeAll = members._removeAll;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}