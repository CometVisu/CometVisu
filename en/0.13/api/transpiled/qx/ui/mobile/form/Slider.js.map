{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "mobile",
    "core",
    "Widget",
    "include",
    "form",
    "MValue",
    "MForm",
    "MModelProperty",
    "MState",
    "implement",
    "IForm",
    "IModel",
    "INumberForm",
    "construct",
    "_registerEventListener",
    "_refresh",
    "addCssClass",
    "properties",
    "defaultCssClass",
    "refine",
    "init",
    "minimum",
    "check",
    "apply",
    "event",
    "maximum",
    "step",
    "reverseDirection",
    "displayValue",
    "nullable",
    "members",
    "_knobElement",
    "_containerElementWidth",
    "_containerElementLeft",
    "_pixelPerStep",
    "__value",
    "nextValue",
    "setValue",
    "getValue",
    "getStep",
    "previousValue",
    "_createContainerElement",
    "container",
    "appendChild",
    "_createKnobElement",
    "dom",
    "Element",
    "create",
    "addListener",
    "_onPointerDown",
    "_onTrack",
    "Registration",
    "window",
    "addListenerOnce",
    "_unregisterEventListener",
    "removeListener",
    "_updateSizes",
    "_updateKnobPosition",
    "containerElement",
    "getContainerElement",
    "bom",
    "element",
    "Dimension",
    "getWidth",
    "Location",
    "getLeft",
    "_getPixelPerStep",
    "evt",
    "isPrimary",
    "position",
    "_getPosition",
    "getDocumentLeft",
    "_positionToValue",
    "stopPropagation",
    "preventDefault",
    "documentLeft",
    "_getKnobElement",
    "childNodes",
    "_setValue",
    "value",
    "AnimationFrame",
    "request",
    "_getValue",
    "percent",
    "_valueToPercent",
    "width",
    "Math",
    "floor",
    "_percentToPosition",
    "knobElement",
    "Style",
    "set",
    "Attribute",
    "_applyDisplayValue",
    "old",
    "removeCssClass",
    "min",
    "getMinimum",
    "_limitValue",
    "_getRange",
    "isReverseDirection",
    "round",
    "center",
    "dist",
    "getMaximum",
    "max",
    "_getOverallSteps",
    "destruct",
    "Slider"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/Slider.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * The Slider widget provides horizontal slider.\n *\n * The Slider is the classic widget for controlling a bounded value.\n * It lets the user move a slider handle along a horizontal\n * groove and translates the handle's position into an integer value\n * within the defined range.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *    var slider= new qx.ui.mobile.form.Slider().set({\n *       minimum : 0,\n *       maximum : 10,\n *       step : 2\n *     });\n *     slider.addListener(\"changeValue\", handler, this);\n *\n *   this.getRoot.add(slider);\n * </pre>\n *\n * This example creates a slider and attaches an\n * event listener to the {@link #changeValue} event.\n */\nqx.Class.define(\"qx.ui.mobile.form.Slider\", {\n  extend: qx.ui.mobile.core.Widget,\n  include: [\n    qx.ui.mobile.form.MValue,\n    qx.ui.form.MForm,\n    qx.ui.form.MModelProperty,\n    qx.ui.mobile.form.MState\n  ],\n\n  implement: [qx.ui.form.IForm, qx.ui.form.IModel, qx.ui.form.INumberForm],\n\n  construct() {\n    super();\n    this._registerEventListener();\n    this._refresh();\n\n    this.addCssClass(\"gap\");\n  },\n\n  properties: {\n    // overridden\n    defaultCssClass: {\n      refine: true,\n      init: \"slider\"\n    },\n\n    /**\n     * The minimum slider value (may be negative). This value must be smaller\n     * than {@link #maximum}.\n     */\n    minimum: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_refresh\",\n      event: \"changeMinimum\"\n    },\n\n    /**\n     * The maximum slider value (may be negative). This value must be larger\n     * than {@link #minimum}.\n     */\n    maximum: {\n      check: \"Number\",\n      init: 100,\n      apply: \"_refresh\",\n      event: \"changeMaximum\"\n    },\n\n    /**\n     * The amount to increment on each event. Typically corresponds\n     * to the user moving the knob.\n     */\n    step: {\n      check: \"Number\",\n      init: 1,\n      event: \"changeStep\"\n    },\n\n    /**\n     * Reverses the display direction of the slider knob. If true, the maxmium of\n     * the slider is on the left side and minimum on the right side.\n     */\n    reverseDirection: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_refresh\"\n    },\n\n    /**\n     * Adjusts which slider value should be displayed inside the knob.\n     * If <code>null</code> no value will be displayed.\n     */\n    displayValue: {\n      init: \"percent\",\n      check: [\"value\", \"percent\"],\n      nullable: true,\n      apply: \"_applyDisplayValue\"\n    }\n  },\n\n  members: {\n    _knobElement: null,\n    _containerElementWidth: null,\n    _containerElementLeft: null,\n    _pixelPerStep: null,\n    __value: 0,\n\n    /**\n     * Increments the current value.\n     */\n    nextValue() {\n      this.setValue(this.getValue() + this.getStep());\n    },\n\n    /**\n     * Decrements the current value.\n     */\n    previousValue() {\n      this.setValue(this.getValue() - this.getStep());\n    },\n\n    // overridden\n    _createContainerElement() {\n      var container = super._createContainerElement();\n      container.appendChild(this._createKnobElement());\n      return container;\n    },\n\n    /**\n     * Creates the knob element.\n     *\n     * @return {Element} The created knob element\n     */\n    _createKnobElement() {\n      return qx.dom.Element.create(\"div\");\n    },\n\n    /**\n     * Registers all needed event listener.\n     */\n    _registerEventListener() {\n      this.addListener(\"pointerdown\", this._onPointerDown, this);\n      this.addListener(\"track\", this._onTrack, this);\n      this.addListener(\"appear\", this._refresh, this);\n\n      qx.event.Registration.addListener(window, \"resize\", this._refresh, this);\n      qx.event.Registration.addListener(\n        window,\n        \"orientationchange\",\n        this._refresh,\n        this\n      );\n\n      this.addListenerOnce(\"domupdated\", this._refresh, this);\n    },\n\n    /**\n     * Unregisters all needed event listener.\n     */\n    _unregisterEventListener() {\n      this.removeListener(\"pointerdown\", this._onPointerDown, this);\n      this.removeListener(\"track\", this._onTrack, this);\n      this.removeListener(\"appear\", this._refresh, this);\n\n      qx.event.Registration.removeListener(\n        window,\n        \"resize\",\n        this._refresh,\n        this\n      );\n\n      qx.event.Registration.removeListener(\n        window,\n        \"orientationchange\",\n        this._refresh,\n        this\n      );\n\n      this.removeListener(\"domupdated\", this._refresh, this);\n    },\n\n    /**\n     * Refreshes the slider and the knob position.\n     */\n    _refresh() {\n      this._updateSizes();\n      this._updateKnobPosition();\n    },\n\n    /**\n     * Updates all internal sizes of the slider.\n     */\n    _updateSizes() {\n      var containerElement = this.getContainerElement();\n      if (containerElement) {\n        this._containerElementWidth =\n          qx.bom.element.Dimension.getWidth(containerElement);\n        this._containerElementLeft =\n          qx.bom.element.Location.getLeft(containerElement);\n        this._pixelPerStep = this._getPixelPerStep(this._containerElementWidth);\n      }\n    },\n\n    /**\n     * Event handler. Called when the <code>pointerdown</code> event occurs.\n     *\n     * @param evt {qx.event.type.Pointer} The pointer event.\n     */\n    _onPointerDown(evt) {\n      if (evt.isPrimary()) {\n        this._updateSizes();\n        var position = this._getPosition(evt.getDocumentLeft());\n        this.setValue(this._positionToValue(position));\n\n        evt.stopPropagation();\n      }\n    },\n\n    /**\n     * Event handler. Called when the <code>track</code> event occurs.\n     *\n     * @param evt {qx.event.type.Track} The track event.\n     */\n    _onTrack(evt) {\n      var position = this._getPosition(evt.getDocumentLeft());\n      this.setValue(this._positionToValue(position));\n      evt.stopPropagation();\n      evt.preventDefault();\n    },\n\n    /**\n     * Returns the current position of the knob.\n     *\n     * @param documentLeft {Integer} The left position of the knob\n     * @return {Integer} The current position of the container element.\n     */\n    _getPosition(documentLeft) {\n      return documentLeft - this._containerElementLeft;\n    },\n\n    /**\n     * Returns the knob DOM element.\n     *\n     * @return {Element} The knob DOM element.\n     */\n    _getKnobElement() {\n      if (!this._knobElement) {\n        var element = this.getContainerElement();\n        if (element) {\n          this._knobElement = element.childNodes[0];\n        }\n      }\n      return this._knobElement;\n    },\n\n    /**\n     * Sets the value of this slider.\n     * It is called by setValue method of qx.ui.mobile.form.MValue mixin\n     * @param value {Integer} the new value of the slider\n     */\n    _setValue(value) {\n      this.__value = value;\n      qx.bom.AnimationFrame.request(this._refresh, this);\n    },\n\n    /**\n     * Gets the value [true/false] of this slider.\n     * It is called by getValue method of qx.ui.mobile.form.MValue mixin\n     * @return {Integer} the value of the slider\n     */\n    _getValue() {\n      return this.__value;\n    },\n\n    /**\n     * Updates the knob position based on the current value.\n     */\n    _updateKnobPosition() {\n      var percent = this._valueToPercent(this.getValue());\n\n      var width = this._containerElementWidth;\n      var position = Math.floor(this._percentToPosition(width, percent));\n\n      var knobElement = this._getKnobElement();\n      if (knobElement) {\n        qx.bom.element.Style.set(\n          this._getKnobElement(),\n          \"width\",\n          width - (width - position) + \"px\"\n        );\n\n        qx.bom.element.Attribute.set(\n          this._getKnobElement(),\n          \"data-value\",\n          this.getValue()\n        );\n\n        qx.bom.element.Attribute.set(\n          this._getKnobElement(),\n          \"data-percent\",\n          Math.floor(percent)\n        );\n      }\n    },\n\n    // Property apply\n    _applyDisplayValue(value, old) {\n      if (old != null) {\n        this.removeCssClass(old);\n      }\n      if (value != null) {\n        this.addCssClass(value);\n      }\n    },\n\n    /**\n     * Converts the given value to percent.\n     *\n     * @param value {Integer} The value to convert\n     * @return {Integer} The value in percent\n     */\n    _valueToPercent(value) {\n      var min = this.getMinimum();\n      var value = this._limitValue(value);\n\n      var percent = ((value - min) * 100) / this._getRange();\n\n      if (this.isReverseDirection()) {\n        return 100 - percent;\n      } else {\n        return percent;\n      }\n    },\n\n    /**\n     * Converts the given position to the corresponding value.\n     *\n     * @param position {Integer} The position to convert\n     * @return {Integer} The converted value\n     */\n    _positionToValue(position) {\n      var value =\n        this.getMinimum() +\n        Math.round(position / this._pixelPerStep) * this.getStep();\n      value = this._limitValue(value);\n      if (this.isReverseDirection()) {\n        var center = this.getMinimum() + this._getRange() / 2;\n        var dist = center - value;\n        value = center + dist;\n      }\n\n      return value;\n    },\n\n    /**\n     * Converts the given percent to the position of the knob.\n     *\n     * @param width {Integer} The width of the slider container element\n     * @param percent {Integer} The percent to convert\n     * @return {Integer} The position of the knob\n     */\n    _percentToPosition(width, percent) {\n      return width * (percent / 100);\n    },\n\n    /**\n     * Limits a value to the set {@link #minimum} and {@link #maximum} properties.\n     *\n     * @param value {Integer} The value to limit\n     * @return {Integer} The limited value\n     */\n    _limitValue(value) {\n      value = Math.min(value, this.getMaximum());\n      value = Math.max(value, this.getMinimum());\n      return value;\n    },\n\n    /**\n     * Return the number of pixels per step.\n     *\n     * @param width {Integer} The width of the slider container element\n     * @return {Integer} The pixels per step\n     */\n    _getPixelPerStep(width) {\n      return width / this._getOverallSteps();\n    },\n\n    /**\n     * Return the overall number of steps.\n     *\n     * @return {Integer} The number of steps\n     */\n    _getOverallSteps() {\n      return this._getRange() / this.getStep();\n    },\n\n    /**\n     * Return the range between {@link #maximum} and {@link #minimum}.\n     *\n     * @return {Integer} The range between {@link #maximum} and {@link #minimum}\n     */\n    _getRange() {\n      return this.getMaximum() - this.getMinimum();\n    }\n  },\n\n  destruct() {\n    this._knobElement = null;\n    this._unregisterEventListener();\n  }\n});\n"
  ],
  "mappings": "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"
}