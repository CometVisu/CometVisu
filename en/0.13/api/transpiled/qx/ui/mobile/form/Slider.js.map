{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/Slider.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "mobile",
    "core",
    "Widget",
    "include",
    "form",
    "MValue",
    "MForm",
    "MModelProperty",
    "MState",
    "implement",
    "IForm",
    "IModel",
    "INumberForm",
    "construct",
    "_registerEventListener",
    "_refresh",
    "addCssClass",
    "properties",
    "defaultCssClass",
    "refine",
    "init",
    "minimum",
    "check",
    "apply",
    "event",
    "maximum",
    "step",
    "reverseDirection",
    "displayValue",
    "nullable",
    "members",
    "_knobElement",
    "_containerElementWidth",
    "_containerElementLeft",
    "_pixelPerStep",
    "__value",
    "nextValue",
    "setValue",
    "getValue",
    "getStep",
    "previousValue",
    "_createContainerElement",
    "container",
    "appendChild",
    "_createKnobElement",
    "dom",
    "Element",
    "create",
    "addListener",
    "_onPointerDown",
    "_onTrack",
    "Registration",
    "window",
    "addListenerOnce",
    "_unregisterEventListener",
    "removeListener",
    "_updateSizes",
    "_updateKnobPosition",
    "containerElement",
    "getContainerElement",
    "bom",
    "element",
    "Dimension",
    "getWidth",
    "Location",
    "getLeft",
    "_getPixelPerStep",
    "evt",
    "isPrimary",
    "position",
    "_getPosition",
    "getDocumentLeft",
    "_positionToValue",
    "stopPropagation",
    "preventDefault",
    "documentLeft",
    "_getKnobElement",
    "childNodes",
    "_setValue",
    "value",
    "AnimationFrame",
    "request",
    "_getValue",
    "percent",
    "_valueToPercent",
    "width",
    "Math",
    "floor",
    "_percentToPosition",
    "knobElement",
    "Style",
    "set",
    "Attribute",
    "_applyDisplayValue",
    "old",
    "removeCssClass",
    "min",
    "getMinimum",
    "_limitValue",
    "_getRange",
    "isReverseDirection",
    "round",
    "center",
    "dist",
    "getMaximum",
    "max",
    "_getOverallSteps",
    "destruct",
    "Slider"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * The Slider widget provides horizontal slider.\n *\n * The Slider is the classic widget for controlling a bounded value.\n * It lets the user move a slider handle along a horizontal\n * groove and translates the handle's position into an integer value\n * within the defined range.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *    var slider= new qx.ui.mobile.form.Slider().set({\n *       minimum : 0,\n *       maximum : 10,\n *       step : 2\n *     });\n *     slider.addListener(\"changeValue\", handler, this);\n *\n *   this.getRoot.add(slider);\n * </pre>\n *\n * This example creates a slider and attaches an\n * event listener to the {@link #changeValue} event.\n */\nqx.Class.define(\"qx.ui.mobile.form.Slider\",\n{\n  extend : qx.ui.mobile.core.Widget,\n  include : [\n    qx.ui.mobile.form.MValue,\n    qx.ui.form.MForm,\n    qx.ui.form.MModelProperty,\n    qx.ui.mobile.form.MState\n  ],\n  implement : [\n    qx.ui.form.IForm,\n    qx.ui.form.IModel,\n    qx.ui.form.INumberForm\n  ],\n\n\n  construct : function()\n  {\n    this.base(arguments);\n    this._registerEventListener();\n    this._refresh();\n\n    this.addCssClass(\"gap\");\n  },\n\n\n  properties :\n  {\n    // overridden\n    defaultCssClass :\n    {\n      refine : true,\n      init : \"slider\"\n    },\n\n    /**\n     * The minimum slider value (may be negative). This value must be smaller\n     * than {@link #maximum}.\n     */\n    minimum :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_refresh\",\n      event : \"changeMinimum\"\n    },\n\n\n    /**\n     * The maximum slider value (may be negative). This value must be larger\n     * than {@link #minimum}.\n     */\n    maximum :\n    {\n      check : \"Number\",\n      init : 100,\n      apply : \"_refresh\",\n      event : \"changeMaximum\"\n    },\n\n\n    /**\n     * The amount to increment on each event. Typically corresponds\n     * to the user moving the knob.\n     */\n    step :\n    {\n      check : \"Number\",\n      init : 1,\n      event : \"changeStep\"\n    },\n\n\n    /**\n     * Reverses the display direction of the slider knob. If true, the maxmium of\n     * the slider is on the left side and minimum on the right side.\n     */\n    reverseDirection :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_refresh\"\n    },\n\n\n    /**\n     * Adjusts which slider value should be displayed inside the knob.\n     * If <code>null</code> no value will be displayed.\n     */\n    displayValue :\n    {\n      init : \"percent\",\n      check : [ \"value\", \"percent\" ],\n      nullable : true,\n      apply : \"_applyDisplayValue\"\n    }\n  },\n\n\n  members :\n  {\n    _knobElement : null,\n    _containerElementWidth : null,\n    _containerElementLeft : null,\n    _pixelPerStep : null,\n    __value: 0,\n\n\n\n    /**\n     * Increments the current value.\n     */\n    nextValue : function() {\n      this.setValue(this.getValue() + this.getStep());\n    },\n\n\n    /**\n     * Decrements the current value.\n     */\n    previousValue : function() {\n      this.setValue(this.getValue() - this.getStep());\n    },\n\n\n    // overridden\n    _createContainerElement : function()\n    {\n      var container = this.base(arguments);\n      container.appendChild(this._createKnobElement());\n      return container;\n    },\n\n\n    /**\n     * Creates the knob element.\n     *\n     * @return {Element} The created knob element\n     */\n    _createKnobElement : function()\n    {\n      return qx.dom.Element.create(\"div\");\n    },\n\n\n    /**\n     * Registers all needed event listener.\n     */\n    _registerEventListener : function()\n    {\n      this.addListener(\"pointerdown\", this._onPointerDown, this);\n      this.addListener(\"track\", this._onTrack, this);\n      this.addListener(\"appear\", this._refresh, this);\n\n      qx.event.Registration.addListener(window, \"resize\", this._refresh, this);\n      qx.event.Registration.addListener(window, \"orientationchange\", this._refresh, this);\n      this.addListenerOnce(\"domupdated\", this._refresh, this);\n    },\n\n\n    /**\n     * Unregisters all needed event listener.\n     */\n    _unregisterEventListener : function()\n    {\n      this.removeListener(\"pointerdown\", this._onPointerDown, this);\n      this.removeListener(\"track\", this._onTrack, this);\n      this.removeListener(\"appear\", this._refresh, this);\n\n      qx.event.Registration.removeListener(window, \"resize\", this._refresh, this);\n      qx.event.Registration.removeListener(window, \"orientationchange\", this._refresh, this);\n      this.removeListener(\"domupdated\", this._refresh, this);\n    },\n\n\n    /**\n     * Refreshes the slider and the knob position.\n     */\n    _refresh : function()\n    {\n      this._updateSizes();\n      this._updateKnobPosition();\n    },\n\n\n    /**\n     * Updates all internal sizes of the slider.\n     */\n    _updateSizes : function()\n    {\n      var containerElement = this.getContainerElement();\n      if(containerElement) {\n        this._containerElementWidth = qx.bom.element.Dimension.getWidth(containerElement);\n        this._containerElementLeft = qx.bom.element.Location.getLeft(containerElement);\n        this._pixelPerStep = this._getPixelPerStep(this._containerElementWidth);\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the <code>pointerdown</code> event occurs.\n     *\n     * @param evt {qx.event.type.Pointer} The pointer event.\n     */\n    _onPointerDown: function(evt)\n    {\n      if (evt.isPrimary())\n      {\n        this._updateSizes();\n        var position = this._getPosition(evt.getDocumentLeft());\n        this.setValue(this._positionToValue(position));\n\n        evt.stopPropagation();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the <code>track</code> event occurs.\n     *\n     * @param evt {qx.event.type.Track} The track event.\n     */\n    _onTrack : function(evt)\n    {\n      var position = this._getPosition(evt.getDocumentLeft());\n      this.setValue(this._positionToValue(position));\n      evt.stopPropagation();\n      evt.preventDefault();\n    },\n\n\n    /**\n     * Returns the current position of the knob.\n     *\n     * @param documentLeft {Integer} The left position of the knob\n     * @return {Integer} The current position of the container element.\n     */\n    _getPosition : function(documentLeft)\n    {\n      return documentLeft - this._containerElementLeft;\n    },\n\n\n    /**\n     * Returns the knob DOM element.\n     *\n     * @return {Element} The knob DOM element.\n     */\n    _getKnobElement : function()\n    {\n      if (!this._knobElement) {\n        var element = this.getContainerElement();\n        if (element) {\n          this._knobElement = element.childNodes[0];\n        }\n      }\n      return this._knobElement;\n    },\n\n    /**\n     * Sets the value of this slider.\n     * It is called by setValue method of qx.ui.mobile.form.MValue mixin\n     * @param value {Integer} the new value of the slider\n     */\n    _setValue : function(value)\n    {\n      this.__value = value;\n      qx.bom.AnimationFrame.request(this._refresh, this);\n    },\n\n    /**\n     * Gets the value [true/false] of this slider.\n     * It is called by getValue method of qx.ui.mobile.form.MValue mixin\n     * @return {Integer} the value of the slider\n     */\n    _getValue : function() {\n      return this.__value;\n    },\n\n\n    /**\n     * Updates the knob position based on the current value.\n     */\n    _updateKnobPosition : function()\n    {\n      var percent = this._valueToPercent(this.getValue());\n\n      var width = this._containerElementWidth;\n      var position = Math.floor(this._percentToPosition(width, percent));\n\n      var knobElement = this._getKnobElement();\n      if (knobElement) {\n        qx.bom.element.Style.set(this._getKnobElement(), \"width\", width - (width - position) + \"px\");\n        qx.bom.element.Attribute.set(this._getKnobElement(), \"data-value\", this.getValue());\n        qx.bom.element.Attribute.set(this._getKnobElement(), \"data-percent\", Math.floor(percent));\n      }\n    },\n\n\n    // Property apply\n    _applyDisplayValue : function(value, old ) {\n      if(old != null) {\n        this.removeCssClass(old);\n      }\n      if(value != null) {\n        this.addCssClass(value);\n      }\n    },\n\n\n    /**\n     * Converts the given value to percent.\n     *\n     * @param value {Integer} The value to convert\n     * @return {Integer} The value in percent\n     */\n    _valueToPercent : function(value)\n    {\n      var min = this.getMinimum();\n      var value = this._limitValue(value);\n\n      var percent = ((value - min) * 100) / this._getRange();\n\n      if (this.isReverseDirection()) {\n        return 100 - percent;\n      } else {\n        return percent;\n      }\n    },\n\n\n    /**\n     * Converts the given position to the corresponding value.\n     *\n     * @param position {Integer} The position to convert\n     * @return {Integer} The converted value\n     */\n    _positionToValue : function(position)\n    {\n      var value = this.getMinimum() + (Math.round(position / this._pixelPerStep) * this.getStep());\n      value = this._limitValue(value);\n      if(this.isReverseDirection()) {\n        var center = this.getMinimum() + this._getRange()/2;\n        var dist = center-value;\n        value = center + dist;\n      }\n\n      return value;\n    },\n\n\n    /**\n     * Converts the given percent to the position of the knob.\n     *\n     * @param width {Integer} The width of the slider container element\n     * @param percent {Integer} The percent to convert\n     * @return {Integer} The position of the knob\n     */\n    _percentToPosition : function(width, percent)\n    {\n      return width * (percent / 100);\n    },\n\n\n    /**\n     * Limits a value to the set {@link #minimum} and {@link #maximum} properties.\n     *\n     * @param value {Integer} The value to limit\n     * @return {Integer} The limited value\n     */\n    _limitValue : function(value)\n    {\n      value = Math.min(value, this.getMaximum());\n      value = Math.max(value, this.getMinimum());\n      return value;\n    },\n\n\n    /**\n     * Return the number of pixels per step.\n     *\n     * @param width {Integer} The width of the slider container element\n     * @return {Integer} The pixels per step\n     */\n    _getPixelPerStep : function(width)\n    {\n      return width / this._getOverallSteps();\n    },\n\n\n    /**\n     * Return the overall number of steps.\n     *\n     * @return {Integer} The number of steps\n     */\n    _getOverallSteps : function()\n    {\n      return (this._getRange() / this.getStep());\n    },\n\n\n    /**\n     * Return the range between {@link #maximum} and {@link #minimum}.\n     *\n     * @return {Integer} The range between {@link #maximum} and {@link #minimum}\n     */\n    _getRange : function()\n    {\n      return this.getMaximum() - this.getMinimum();\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._knobElement = null;\n    this._unregisterEventListener();\n  }\n});\n"
  ]
}