{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__states",
    "addState",
    "state",
    "addCssClass",
    "hasState",
    "removeState",
    "removeCssClass",
    "replaceState",
    "oldState",
    "newState",
    "ui",
    "mobile",
    "form",
    "MState"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/MState.js"
  ],
  "sourcesContent": [
    "/**\r\n * The mixin contains all functionality to provide methods\r\n * for form elements to manipulate their state. [usually \"valid\" and \"invalid\"]\r\n *\r\n */\r\nqx.Mixin.define(\"qx.ui.mobile.form.MState\", {\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * The states of the element\r\n     */\r\n    __states: null,\r\n\r\n    /**\r\n     * Adds a state to the element\r\n     * @param state {String} the state to be added\r\n     *\r\n     */\r\n    addState(state) {\r\n      if (this.__states === null) {\r\n        this.__states = {};\r\n      }\r\n      this.__states[state] = true;\r\n      this.addCssClass(state);\r\n    },\r\n\r\n    /**\r\n     * Checks whether the element has the state passed as argument\r\n     * @param state {String} the state to be checked\r\n     * @return {Boolean} true if the element has the state, false if it doesn't.\r\n     *\r\n     */\r\n    hasState(state) {\r\n      return this.__states !== null && this.__states[state];\r\n    },\r\n\r\n    /**\r\n     * Removes a state from the element\r\n     * @param state {String} the state to be removed\r\n     *\r\n     */\r\n    removeState(state) {\r\n      if (this.hasState(state)) {\r\n        delete this.__states[state];\r\n        this.removeCssClass(state);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Replaces a state of the element with a new state.\r\n     * If the element doesn't have the state to be removed, then th new state will\r\n     * just be added.\r\n     * @param oldState {String} the state to be replaced\r\n     * @param newState {String} the state to get injected in the oldState's place\r\n     *\r\n     */\r\n    replaceState(oldState, newState) {\r\n      if (this.hasState(oldState)) {\r\n        delete this.__states[oldState];\r\n        this.__states[newState] = true;\r\n        this.removeCssClass(oldState);\r\n        this.addCssClass(newState);\r\n      } else {\r\n        this.addState(newState);\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,0BAA0B,EAAE;IAC1C;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,SAAQ,EAAE,IAAI;MAEd;AACJ;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAACC,KAAK,EAAE;QACd,IAAI,IAAI,CAACF,SAAQ,KAAK,IAAI,EAAE;UAC1B,IAAI,CAACA,SAAQ,GAAG,CAAC,CAAC;QACpB;QACA,IAAI,CAACA,SAAQ,CAACE,KAAK,CAAC,GAAG,IAAI;QAC3B,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;MACzB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIE,QAAQ,WAAAA,SAACF,KAAK,EAAE;QACd,OAAO,IAAI,CAACF,SAAQ,KAAK,IAAI,IAAI,IAAI,CAACA,SAAQ,CAACE,KAAK,CAAC;MACvD,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,WAAW,WAAAA,YAACH,KAAK,EAAE;QACjB,IAAI,IAAI,CAACE,QAAQ,CAACF,KAAK,CAAC,EAAE;UACxB,OAAO,IAAI,CAACF,SAAQ,CAACE,KAAK,CAAC;UAC3B,IAAI,CAACI,cAAc,CAACJ,KAAK,CAAC;QAC5B;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,YAAY,WAAAA,aAACC,QAAQ,EAAEC,QAAQ,EAAE;QAC/B,IAAI,IAAI,CAACL,QAAQ,CAACI,QAAQ,CAAC,EAAE;UAC3B,OAAO,IAAI,CAACR,SAAQ,CAACQ,QAAQ,CAAC;UAC9B,IAAI,CAACR,SAAQ,CAACS,QAAQ,CAAC,GAAG,IAAI;UAC9B,IAAI,CAACH,cAAc,CAACE,QAAQ,CAAC;UAC7B,IAAI,CAACL,WAAW,CAACM,QAAQ,CAAC;QAC5B,CAAC,MAAM;UACL,IAAI,CAACR,QAAQ,CAACQ,QAAQ,CAAC;QACzB;MACF;IACF;EACF,CAAC,CAAC;EAxEFhB,EAAE,CAACiB,EAAE,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACjB,aAAa,GAAGA,aAAa;AAAC"
}