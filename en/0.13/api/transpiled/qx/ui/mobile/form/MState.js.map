{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__states",
    "addState",
    "state",
    "addCssClass",
    "hasState",
    "removeState",
    "removeCssClass",
    "replaceState",
    "oldState",
    "newState",
    "ui",
    "mobile",
    "form",
    "MState"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/MState.js"
  ],
  "sourcesContent": [
    "/**\n * The mixin contains all functionality to provide methods\n * for form elements to manipulate their state. [usually \"valid\" and \"invalid\"]\n *\n */\nqx.Mixin.define(\"qx.ui.mobile.form.MState\", {\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * The states of the element\n     */\n    __states: null,\n\n    /**\n     * Adds a state to the element\n     * @param state {String} the state to be added\n     *\n     */\n    addState(state) {\n      if (this.__states === null) {\n        this.__states = {};\n      }\n      this.__states[state] = true;\n      this.addCssClass(state);\n    },\n\n    /**\n     * Checks whether the element has the state passed as argument\n     * @param state {String} the state to be checked\n     * @return {Boolean} true if the element has the state, false if it doesn't.\n     *\n     */\n    hasState(state) {\n      return this.__states !== null && this.__states[state];\n    },\n\n    /**\n     * Removes a state from the element\n     * @param state {String} the state to be removed\n     *\n     */\n    removeState(state) {\n      if (this.hasState(state)) {\n        delete this.__states[state];\n        this.removeCssClass(state);\n      }\n    },\n\n    /**\n     * Replaces a state of the element with a new state.\n     * If the element doesn't have the state to be removed, then th new state will\n     * just be added.\n     * @param oldState {String} the state to be replaced\n     * @param newState {String} the state to get injected in the oldState's place\n     *\n     */\n    replaceState(oldState, newState) {\n      if (this.hasState(oldState)) {\n        delete this.__states[oldState];\n        this.__states[newState] = true;\n        this.removeCssClass(oldState);\n        this.addCssClass(newState);\n      } else {\n        this.addState(newState);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,0BAAhB,EAA4C;IAC1C;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,SAAQ,EAAE,IAJH;;MAMP;AACJ;AACA;AACA;AACA;MACIC,QAXO,oBAWEC,KAXF,EAWS;QACd,IAAI,KAAKF,SAAL,KAAkB,IAAtB,EAA4B;UAC1B,KAAKA,SAAL,GAAgB,EAAhB;QACD;;QACD,KAAKA,SAAL,CAAcE,KAAd,IAAuB,IAAvB;QACA,KAAKC,WAAL,CAAiBD,KAAjB;MACD,CAjBM;;MAmBP;AACJ;AACA;AACA;AACA;AACA;MACIE,QAzBO,oBAyBEF,KAzBF,EAyBS;QACd,OAAO,KAAKF,SAAL,KAAkB,IAAlB,IAA0B,KAAKA,SAAL,CAAcE,KAAd,CAAjC;MACD,CA3BM;;MA6BP;AACJ;AACA;AACA;AACA;MACIG,WAlCO,uBAkCKH,KAlCL,EAkCY;QACjB,IAAI,KAAKE,QAAL,CAAcF,KAAd,CAAJ,EAA0B;UACxB,OAAO,KAAKF,SAAL,CAAcE,KAAd,CAAP;UACA,KAAKI,cAAL,CAAoBJ,KAApB;QACD;MACF,CAvCM;;MAyCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,YAjDO,wBAiDMC,QAjDN,EAiDgBC,QAjDhB,EAiD0B;QAC/B,IAAI,KAAKL,QAAL,CAAcI,QAAd,CAAJ,EAA6B;UAC3B,OAAO,KAAKR,SAAL,CAAcQ,QAAd,CAAP;UACA,KAAKR,SAAL,CAAcS,QAAd,IAA0B,IAA1B;UACA,KAAKH,cAAL,CAAoBE,QAApB;UACA,KAAKL,WAAL,CAAiBM,QAAjB;QACD,CALD,MAKO;UACL,KAAKR,QAAL,CAAcQ,QAAd;QACD;MACF;IA1DM;EAPiC,CAA5C;EALAhB,EAAE,CAACiB,EAAH,CAAMC,MAAN,CAAaC,IAAb,CAAkBC,MAAlB,CAAyBjB,aAAzB,GAAyCA,aAAzC"
}