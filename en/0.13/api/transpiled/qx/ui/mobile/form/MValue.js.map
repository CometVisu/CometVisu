{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "value",
    "setValue",
    "_getTagName",
    "event",
    "Registration",
    "addListener",
    "getContentElement",
    "_onChangeContent",
    "_onInput",
    "_onFocus",
    "_onBlur",
    "events",
    "input",
    "changeValue",
    "properties",
    "liveUpdate",
    "check",
    "init",
    "members",
    "__oldValue",
    "__inputTimeoutHandle",
    "__hasFocus",
    "_convertValue",
    "hasFocus",
    "_setValue",
    "_setAttribute",
    "__fireChangeValue",
    "getValue",
    "_getValue",
    "_getAttribute",
    "resetValue",
    "evt",
    "getData",
    "data",
    "fireDataEvent",
    "getLiveUpdate",
    "_getCaretPosition",
    "val",
    "slice",
    "selectionStart",
    "length",
    "_setCaretPosition",
    "position",
    "setSelectionRange",
    "destruct",
    "removeListener",
    "ui",
    "mobile",
    "form",
    "MValue"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/MValue.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * The mixin contains all functionality to provide a value property for input\n * widgets.\n *\n * @require(qx.event.handler.Input)\n */\nqx.Mixin.define(\"qx.ui.mobile.form.MValue\", {\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param value {var?null} The value of the widget.\n   */\n  construct(value) {\n    if (value) {\n      this.setValue(value);\n    }\n\n    if (this._getTagName() == \"input\" || this._getTagName() == \"textarea\") {\n      qx.event.Registration.addListener(\n        this.getContentElement(),\n        \"change\",\n        this._onChangeContent,\n        this\n      );\n\n      qx.event.Registration.addListener(\n        this.getContentElement(),\n        \"input\",\n        this._onInput,\n        this\n      );\n    }\n\n    this.addListener(\"focus\", this._onFocus, this);\n    this.addListener(\"blur\", this._onBlur, this);\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * The event is fired on every keystroke modifying the value of the field.\n     *\n     * The method {@link qx.event.type.Data#getData} returns the\n     * current value of the text field.\n     */\n    input: \"qx.event.type.Data\",\n\n    /**\n     * The event is fired each time the text field looses focus and the\n     * text field values has changed.\n     *\n     * If you change {@link #liveUpdate} to true, the changeValue event will\n     * be fired after every keystroke and not only after every focus loss. In\n     * that mode, the changeValue event is equal to the {@link #input} event.\n     *\n     * The method {@link qx.event.type.Data#getData} returns the\n     * current text value of the field.\n     */\n    changeValue: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Whether the {@link #changeValue} event should be fired on every key\n     * input. If set to true, the changeValue event is equal to the\n     * {@link #input} event.\n     */\n    liveUpdate: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __oldValue: null,\n    __inputTimeoutHandle: null,\n    __hasFocus: null,\n\n    /**\n     * Converts the incoming value.\n     *\n     * @param value {var} The value to convert\n     * @return {var} The converted value\n     */\n    _convertValue(value) {\n      if (typeof value === \"boolean\") {\n        return value;\n      } else if (typeof value === \"number\") {\n        return value;\n      } else {\n        return value || \"\";\n      }\n    },\n\n    /**\n     * Handler for <code>focus</code> event.\n     */\n    _onFocus() {\n      this.__hasFocus = true;\n    },\n\n    /**\n     * Handler for <code>blur</code> event.\n     */\n    _onBlur() {\n      this.__hasFocus = false;\n    },\n\n    /**\n     * Returns whether this widget has focus or not.\n     * @return {Boolean} <code>true</code> or <code>false</code>\n     */\n    hasFocus() {\n      return this.__hasFocus;\n    },\n\n    /**\n     * Sets the value.\n     *\n     * @param value {var} The value to set\n     */\n    setValue(value) {\n      value = this._convertValue(value);\n      if (this.__oldValue != value) {\n        if (this._setValue) {\n          this._setValue(value);\n        } else {\n          this._setAttribute(\"value\", value);\n        }\n        this.__fireChangeValue(value);\n      }\n    },\n\n    /**\n     * Returns the set value.\n     *\n     * @return {var} The set value\n     */\n    getValue() {\n      return this._convertValue(\n        this._getValue ? this._getValue() : this._getAttribute(\"value\")\n      );\n    },\n\n    /**\n     * Resets the value.\n     */\n    resetValue() {\n      this.setValue(null);\n    },\n\n    /**\n     * Event handler. Called when the {@link #changeValue} event occurs.\n     *\n     * @param evt {qx.event.type.Data} The event, containing the changed content.\n     */\n    _onChangeContent(evt) {\n      this.__fireChangeValue(this._convertValue(evt.getData()));\n    },\n\n    /**\n     * Event handler. Called when the {@link #input} event occurs.\n     *\n     * @param evt {qx.event.type.Data} The event, containing the changed content.\n     */\n    _onInput(evt) {\n      var data = evt.getData();\n      this.fireDataEvent(\"input\", data, true);\n      if (this.getLiveUpdate()) {\n        if (this._setValue) {\n          this._setValue(data);\n        } else {\n          this.__fireChangeValue(this._convertValue(data));\n        }\n      }\n    },\n\n    /**\n     * Returns the caret position of this widget.\n     * @return {Integer} the caret position.\n     */\n    _getCaretPosition() {\n      var val = this.getContentElement().value;\n      if (val && this._getAttribute(\"type\") !== \"number\") {\n        return val.slice(0, this.getContentElement().selectionStart).length;\n      } else {\n        return val.length;\n      }\n    },\n\n    /**\n     * Sets the caret position on this widget.\n     * @param position {Integer} the caret position.\n     */\n    _setCaretPosition(position) {\n      if (position != null && this.hasFocus()) {\n        if (\n          this._getAttribute(\"type\") !== \"number\" &&\n          this.getContentElement().setSelectionRange\n        ) {\n          this.getContentElement().setSelectionRange(position, position);\n        }\n      }\n    },\n\n    /**\n     * Fires the {@link #changeValue} event.\n     *\n     * @param value {var} The current value to fire.\n     */\n    __fireChangeValue(value) {\n      if (this.__oldValue != value) {\n        this.__oldValue = value;\n        this.fireDataEvent(\"changeValue\", value);\n      }\n    }\n  },\n\n  destruct() {\n    this.removeListener(\"focus\", this._onFocus, this);\n    this.removeListener(\"blur\", this._onBlur, this);\n  }\n});\n"
  ],
  "mappings": "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"
}