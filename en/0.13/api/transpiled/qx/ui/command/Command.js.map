{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "shortcut",
    "_shortcut",
    "bom",
    "Shortcut",
    "addListener",
    "execute",
    "undefined",
    "setShortcut",
    "events",
    "properties",
    "active",
    "init",
    "check",
    "event",
    "apply",
    "enabled",
    "nullable",
    "label",
    "icon",
    "toolTipText",
    "value",
    "menu",
    "members",
    "_applyActive",
    "setEnabled",
    "getEnabled",
    "_applyEnabled",
    "getActive",
    "_applyShortcut",
    "target",
    "fireDataEvent",
    "toString",
    "destruct",
    "removeListener",
    "_disposeObjects",
    "ui",
    "command",
    "Command"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/command/Command.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Mustafa Sak (msak)\n\n************************************************************************ */\n/**\n * Commands can be used to globally define keyboard shortcuts. They could\n * also be used to assign an execution of a command sequence to multiple\n * widgets. It is possible to use the same Command in a MenuButton and\n * ToolBarButton for example.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.ui.command.Command\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param shortcut {String} Shortcuts can be composed of optional modifier\n   *    keys Control, Alt, Shift, Meta and a non modifier key.\n   *    If no non modifier key is specified, the second parameter is evaluated.\n   *    The key must be separated by a <code>+</code> or <code>-</code> character.\n   *    Examples: Alt+F1, Control+C, Control+Alt+Delete\n   */\n  construct(shortcut) {\n    super();\n    this._shortcut = new qx.bom.Shortcut(shortcut);\n    this._shortcut.addListener(\"execute\", this.execute, this);\n\n    if (shortcut !== undefined) {\n      this.setShortcut(shortcut);\n    }\n  },\n\n  events: {\n    /**\n     * Fired when the command is executed. Sets the \"data\" property of the\n     * event to the object that issued the command.\n     */\n    execute: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /** Whether the command should be activated. If 'false' execute event\n     * wouldn't fire. This property will be used by command groups when\n     * activating/deactivating all commands of the group.*/\n    active: {\n      init: true,\n      check: \"Boolean\",\n      event: \"changeActive\",\n      apply: \"_applyActive\"\n    },\n\n    /** Whether the command should be respected/enabled. If 'false' execute event\n     * wouldn't fire. If value of property {@link qx.ui.command.Command#active}\n     * is 'false', enabled value can be set but has no effect until\n     * {@link qx.ui.command.Command#active} will be set to 'true'.*/\n    enabled: {\n      init: true,\n      check: \"Boolean\",\n      event: \"changeEnabled\",\n      apply: \"_applyEnabled\"\n    },\n\n    /** The command shortcut as a string */\n    shortcut: {\n      check: \"String\",\n      apply: \"_applyShortcut\",\n      nullable: true\n    },\n\n    /** The label, which will be set in all connected widgets (if available) */\n    label: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeLabel\"\n    },\n\n    /** The icon, which will be set in all connected widgets (if available) */\n    icon: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeIcon\"\n    },\n\n    /**\n     * The tooltip text, which will be set in all connected\n     * widgets (if available)\n     */\n    toolTipText: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeToolTipText\"\n    },\n\n    /** The value of the connected widgets */\n    value: {\n      nullable: true,\n      event: \"changeValue\"\n    },\n\n    /** The menu, which will be set in all connected widgets (if available) */\n    menu: {\n      check: \"qx.ui.menu.Menu\",\n      nullable: true,\n      event: \"changeMenu\"\n    }\n  },\n\n  members: {\n    _shortcut: null,\n\n    // property apply\n    _applyActive(value) {\n      if (value === false) {\n        this._shortcut.setEnabled(false);\n      } else {\n        // synchronize value with current \"enabled\" value of this command\n        this._shortcut.setEnabled(this.getEnabled());\n      }\n    },\n\n    // property apply\n    _applyEnabled(value) {\n      if (this.getActive()) {\n        this._shortcut.setEnabled(value);\n      }\n    },\n\n    // property apply\n    _applyShortcut(value) {\n      this._shortcut.setShortcut(value);\n    },\n\n    /**\n     * Fire the \"execute\" event on this command. If property\n     * <code>active</code> and <code>enabled</code> set to\n     * <code>true</code>.\n     * @param target {Object?} Object which issued the execute event\n     */\n    execute(target) {\n      if (this.getActive() && this.getEnabled()) {\n        this.fireDataEvent(\"execute\", target);\n      }\n    },\n\n    /**\n     * Returns the used shortcut as string using the currently selected locale.\n     *\n     * @return {String} shortcut\n     */\n    toString() {\n      if (this._shortcut) {\n        return this._shortcut.toString();\n      }\n      return super.toString();\n    }\n  },\n\n  destruct() {\n    this._shortcut.removeListener(\"execute\", this.execute, this);\n    this._disposeObjects(\"_shortcut\");\n  }\n});\n"
  ],
  "mappings": "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"
}