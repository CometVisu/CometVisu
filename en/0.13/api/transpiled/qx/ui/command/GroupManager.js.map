{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__groups",
    "members",
    "__activeGroup",
    "add",
    "group",
    "includes",
    "push",
    "setActive",
    "has",
    "_getGroup",
    "remove",
    "index",
    "indexOf",
    "getActive",
    "splice",
    "i",
    "length",
    "item",
    "block",
    "unblock",
    "destruct",
    "ui",
    "command",
    "GroupManager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/command/GroupManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   Authors:\n     * Mustafa Sak (msak)\n\n\n************************************************************************ */\n\n/**\n * Registrar for command groups to be able to active or deactive them.\n */\nqx.Class.define(\"qx.ui.command.GroupManager\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    this.__groups = [];\n  },\n\n  members: {\n    __groups: null,\n    __activeGroup: null,\n\n    /**\n     * Add command group.\n     *\n     * @param group {qx.ui.command.Group} Command group\n     *\n     * @return {Boolean} <code>false</code> if group was already added before\n     */\n    add(group) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInstance(\n          group,\n          qx.ui.command.Group,\n          \"Given group is not an instance of qx.ui.command.Group\"\n        );\n      }\n\n      if (this.__groups.includes(group)) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\"Group is already added!\");\n        }\n        return false;\n      }\n\n      this.__groups.push(group);\n\n      // deactivate added group to prevent collusions\n      group.setActive(false);\n\n      return true;\n    },\n\n    /**\n     * Whether a command manager was added.\n     *\n     * @param group {qx.ui.command.Group} Command group\n     *\n     * @return {Boolean} <code>true</code> if group already added\n     */\n    has(group) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInstance(\n          group,\n          qx.ui.command.Group,\n          \"Given group is not an instance of qx.ui.command.Group\"\n        );\n      }\n\n      return !!this._getGroup(group);\n    },\n\n    /**\n     * Removes a command group from group manager. If removed group was the\n     * active group, active group will be set to <code>null</code> Returns the\n     * group.\n     *\n     * @param group {qx.ui.command.Group} Command group\n     *\n     * @return {qx.ui.command.Group|null} Command group or null if group was not added before\n     */\n    remove(group) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInstance(\n          group,\n          qx.ui.command.Group,\n          \"Group must be an instance of qx.ui.command.Group\"\n        );\n      }\n\n      var index = this.__groups.indexOf(group);\n      if (index === -1) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\n            \"Group was not added before. Please use \" +\n              \"'add()' method to add the group.\"\n          );\n        }\n      }\n\n      // reset active group\n      if (this.getActive() === group) {\n        this.__activeGroup = null;\n      }\n\n      // remove group from internal array\n      this.__groups.splice(index, 1);\n\n      return group;\n    },\n\n    /**\n     * Activates a command group and deactivates all other added groups.\n     *\n     * @param group {qx.ui.command.Group} Command group\n     *\n     * @return {Boolean} <code>false</code> if group was not added before\n     */\n    setActive(group) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInstance(\n          group,\n          qx.ui.command.Group,\n          \"Given group is not an instance of qx.ui.command.Group\"\n        );\n      }\n\n      if (!this.has(group)) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\n            \"Group was not added before! You have to use 'addCommand()' method before activating!\"\n          );\n        }\n        return false;\n      }\n\n      // iterate through all groups and deactivate all expect the given one\n      for (var i = 0; i < this.__groups.length; i++) {\n        var item = this.__groups[i];\n        if (item == group) {\n          item.setActive(true);\n          this.__activeGroup = item;\n          continue;\n        }\n        item.setActive(false);\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns active command group.\n     *\n     * @return {qx.ui.command.Group|null} Active command group\n     */\n    getActive() {\n      return this.__activeGroup;\n    },\n\n    /**\n     * Blocks the active command group.\n     */\n    block() {\n      if (this.__activeGroup) {\n        this.__activeGroup.setActive(false);\n      }\n    },\n\n    /**\n     * Unblocks the active command group.\n     */\n    unblock() {\n      if (this.__activeGroup) {\n        this.__activeGroup.setActive(true);\n      }\n    },\n\n    /**\n     * Helper function returns added command group.\n     *\n     * @param group {qx.ui.command.Group} Command group\n     *\n     * @return {qx.ui.command.Group|null} Command group or null\n     */\n    _getGroup(group) {\n      var index = this.__groups.indexOf(group);\n      if (index === -1) {\n        return null;\n      }\n\n      return this.__groups[index];\n    }\n  },\n\n  destruct() {\n    this.__groups = this.__activeGroup = null;\n  }\n});\n"
  ],
  "mappings": "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"
}