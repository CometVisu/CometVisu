{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "_cmds",
    "properties",
    "active",
    "init",
    "check",
    "apply",
    "members",
    "_applyActive",
    "value",
    "cmdkey",
    "setActive",
    "add",
    "key",
    "command",
    "has",
    "getActive",
    "get",
    "cmd",
    "remove",
    "destruct",
    "ui",
    "Group"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/command/Group.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   Copyright:\r\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   Authors:\r\n     * Mustafa Sak (msak)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Registrar for commands to be able to group them.\r\n */\r\nqx.Class.define(\"qx.ui.command.Group\", {\r\n  extend: qx.core.Object,\r\n\r\n  construct() {\r\n    super();\r\n    this._cmds = {};\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * Activates or deactivates all commands in group.\r\n     */\r\n    active: {\r\n      init: true,\r\n      check: \"Boolean\",\r\n      apply: \"_applyActive\"\r\n    }\r\n  },\r\n\r\n  members: {\r\n    _cmds: null,\r\n\r\n    // property apply\r\n    _applyActive(value) {\r\n      for (var cmdkey in this._cmds) {\r\n        this._cmds[cmdkey].setActive(value);\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PUBLIC API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Adds a command with a key to the group.\r\n     *\r\n     * @param key {String} Key to be able to addresses the command\r\n     * @param command {qx.ui.command.Command} Command\r\n     *\r\n     * @return {Boolean} <code>false</code> if key already added before\r\n     */\r\n    add(key, command) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertArgumentsCount(\r\n          arguments,\r\n          2,\r\n          2,\r\n          \"Given parameter count mismatch! Please provide a key as string \" +\r\n            \"and a command intsance.\"\r\n        );\r\n\r\n        this.assertString(key, \"Key parameter must be a string.\");\r\n        this.assertInstance(\r\n          command,\r\n          qx.ui.command.Command,\r\n          \"Given command is not an instance of qx.ui.command.Command\"\r\n        );\r\n      }\r\n\r\n      if (this.has(key)) {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          this.debug(\"Command with key: '\" + key + \"' already exists!\");\r\n        }\r\n        return false;\r\n      }\r\n\r\n      command.setActive(this.getActive());\r\n      this._cmds[key] = command;\r\n\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Returns a command by key.\r\n     *\r\n     * @param key {String} Key which addresses the command\r\n     *\r\n     * @return {qx.ui.command.Command|null} Corresponding command instance or null\r\n     */\r\n    get(key) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertString(key, \"Key parameter must be a string.\");\r\n      }\r\n\r\n      var cmd = this._cmds[key];\r\n      if (!cmd) {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          this.debug(\r\n            \"The key: '\" +\r\n              key +\r\n              \"' was not added before. Please use \" +\r\n              \"'add()' method to add the command.\"\r\n          );\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      return cmd;\r\n    },\r\n\r\n    /**\r\n     * Returns true if a command is registered by key.\r\n     *\r\n     * @param key {String} Key which addresses the command\r\n     *\r\n     * @return {Boolean} Returns <code>true</code> if a command is registered by a key\r\n     */\r\n    has(key) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertString(key, \"Key parameter must be a string.\");\r\n      }\r\n\r\n      return !!this._cmds[key];\r\n    },\r\n\r\n    /**\r\n     * Removes a command by key from group. Returns the command.\r\n     *\r\n     * @param key {String} Key which addresses the command\r\n     *\r\n     * @return {qx.ui.command.Command|null} Corresponding command instance or null\r\n     */\r\n    remove(key) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertString(key, \"Key parameter must be a string.\");\r\n      }\r\n\r\n      var cmd = this._cmds[key];\r\n      if (!cmd) {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          this.debug(\r\n            \"The key: '\" +\r\n              key +\r\n              \"' was not added before. Please use \" +\r\n              \"'add()' method to add the command.\"\r\n          );\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      delete this._cmds[key];\r\n\r\n      return cmd;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._cmds = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,qBAAqB,EAAE;IACrCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtBC,SAAS,WAAAA,UAAA,EAAG;MACVT,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAE,WAAA,CAAAC,IAAA;MACA,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACjB,CAAC;IAEDC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,MAAM,EAAE;QACNC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE;MACT;IACF,CAAC;IAEDC,OAAO,EAAE;MACPN,KAAK,EAAE,IAAI;MAEX;MACAO,YAAY,WAAAA,aAACC,KAAK,EAAE;QAClB,KAAK,IAAIC,MAAM,IAAI,IAAI,CAACT,KAAK,EAAE;UAC7B,IAAI,CAACA,KAAK,CAACS,MAAM,CAAC,CAACC,SAAS,CAACF,KAAK,CAAC;QACrC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,GAAG,WAAAA,IAACC,GAAG,EAAEC,OAAO,EAAE;QAkBhB,IAAI,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,EAAE;UAIjB,OAAO,KAAK;QACd;QAEAC,OAAO,CAACH,SAAS,CAAC,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC;QACnC,IAAI,CAACf,KAAK,CAACY,GAAG,CAAC,GAAGC,OAAO;QAEzB,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIG,GAAG,WAAAA,IAACJ,GAAG,EAAE;QAKP,IAAIK,GAAG,GAAG,IAAI,CAACjB,KAAK,CAACY,GAAG,CAAC;QACzB,IAAI,CAACK,GAAG,EAAE;UAUR,OAAO,IAAI;QACb;QAEA,OAAOA,GAAG;MACZ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIH,GAAG,WAAAA,IAACF,GAAG,EAAE;QAKP,OAAO,CAAC,CAAC,IAAI,CAACZ,KAAK,CAACY,GAAG,CAAC;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIM,MAAM,WAAAA,OAACN,GAAG,EAAE;QAKV,IAAIK,GAAG,GAAG,IAAI,CAACjB,KAAK,CAACY,GAAG,CAAC;QACzB,IAAI,CAACK,GAAG,EAAE;UAUR,OAAO,IAAI;QACb;QAEA,OAAO,IAAI,CAACjB,KAAK,CAACY,GAAG,CAAC;QAEtB,OAAOK,GAAG;MACZ;IACF,CAAC;IAEDE,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACnB,KAAK,GAAG,IAAI;IACnB;EACF,CAAC,CAAC;EAtKFZ,EAAE,CAACgC,EAAE,CAACP,OAAO,CAACQ,KAAK,CAAC9B,aAAa,GAAGA,aAAa;AAAC"
}