{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "_cmds",
    "properties",
    "active",
    "init",
    "check",
    "apply",
    "members",
    "_applyActive",
    "value",
    "cmdkey",
    "setActive",
    "add",
    "key",
    "command",
    "has",
    "getActive",
    "get",
    "cmd",
    "remove",
    "destruct",
    "ui",
    "Group"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/command/Group.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   Authors:\n     * Mustafa Sak (msak)\n\n************************************************************************ */\n\n/**\n * Registrar for commands to be able to group them.\n */\nqx.Class.define(\"qx.ui.command.Group\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    this._cmds = {};\n  },\n\n  properties: {\n    /**\n     * Activates or deactivates all commands in group.\n     */\n    active: {\n      init: true,\n      check: \"Boolean\",\n      apply: \"_applyActive\"\n    }\n  },\n\n  members: {\n    _cmds: null,\n\n    // property apply\n    _applyActive(value) {\n      for (var cmdkey in this._cmds) {\n        this._cmds[cmdkey].setActive(value);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a command with a key to the group.\n     *\n     * @param key {String} Key to be able to addresses the command\n     * @param command {qx.ui.command.Command} Command\n     *\n     * @return {Boolean} <code>false</code> if key already added before\n     */\n    add(key, command) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArgumentsCount(\n          arguments,\n          2,\n          2,\n          \"Given parameter count mismatch! Please provide a key as string \" +\n            \"and a command intsance.\"\n        );\n\n        this.assertString(key, \"Key parameter must be a string.\");\n        this.assertInstance(\n          command,\n          qx.ui.command.Command,\n          \"Given command is not an instance of qx.ui.command.Command\"\n        );\n      }\n\n      if (this.has(key)) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\"Command with key: '\" + key + \"' already exists!\");\n        }\n        return false;\n      }\n\n      command.setActive(this.getActive());\n      this._cmds[key] = command;\n\n      return true;\n    },\n\n    /**\n     * Returns a command by key.\n     *\n     * @param key {String} Key which addresses the command\n     *\n     * @return {qx.ui.command.Command | null} Corresponding command instance or null\n     */\n    get(key) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertString(key, \"Key parameter must be a string.\");\n      }\n\n      var cmd = this._cmds[key];\n      if (!cmd) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\n            \"The key: '\" +\n              key +\n              \"' was not added before. Please use \" +\n              \"'add()' method to add the command.\"\n          );\n        }\n\n        return null;\n      }\n\n      return cmd;\n    },\n\n    /**\n     * Returns true if a command is registered by key.\n     *\n     * @param key {String} Key which addresses the command\n     *\n     * @return {Boolean} Returns <code>true</code> if a command is registered by a key\n     */\n    has(key) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertString(key, \"Key parameter must be a string.\");\n      }\n\n      return !!this._cmds[key];\n    },\n\n    /**\n     * Removes a command by key from group. Returns the command.\n     *\n     * @param key {String} Key which addresses the command\n     *\n     * @return {qx.ui.command.Command | null} Corresponding command instance or null\n     */\n    remove(key) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertString(key, \"Key parameter must be a string.\");\n      }\n\n      var cmd = this._cmds[key];\n      if (!cmd) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\n            \"The key: '\" +\n              key +\n              \"' was not added before. Please use \" +\n              \"'add()' method to add the command.\"\n          );\n        }\n\n        return null;\n      }\n\n      delete this._cmds[key];\n\n      return cmd;\n    }\n  },\n\n  destruct() {\n    this._cmds = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,qBAAqB,EAAE;IACrCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtBC,SAAS,uBAAG;MACV;MACA,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACjB,CAAC;IAEDC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,MAAM,EAAE;QACNC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE;MACT;IACF,CAAC;IAEDC,OAAO,EAAE;MACPN,KAAK,EAAE,IAAI;MAEX;MACAO,YAAY,wBAACC,KAAK,EAAE;QAClB,KAAK,IAAIC,MAAM,IAAI,IAAI,CAACT,KAAK,EAAE;UAC7B,IAAI,CAACA,KAAK,CAACS,MAAM,CAAC,CAACC,SAAS,CAACF,KAAK,CAAC;QACrC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,GAAG,eAACC,GAAG,EAAEC,OAAO,EAAE;QAkBhB,IAAI,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,EAAE;UAIjB,OAAO,KAAK;QACd;QAEAC,OAAO,CAACH,SAAS,CAAC,IAAI,CAACK,SAAS,EAAE,CAAC;QACnC,IAAI,CAACf,KAAK,CAACY,GAAG,CAAC,GAAGC,OAAO;QAEzB,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIG,GAAG,eAACJ,GAAG,EAAE;QAKP,IAAIK,GAAG,GAAG,IAAI,CAACjB,KAAK,CAACY,GAAG,CAAC;QACzB,IAAI,CAACK,GAAG,EAAE;UAUR,OAAO,IAAI;QACb;QAEA,OAAOA,GAAG;MACZ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIH,GAAG,eAACF,GAAG,EAAE;QAKP,OAAO,CAAC,CAAC,IAAI,CAACZ,KAAK,CAACY,GAAG,CAAC;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIM,MAAM,kBAACN,GAAG,EAAE;QAKV,IAAIK,GAAG,GAAG,IAAI,CAACjB,KAAK,CAACY,GAAG,CAAC;QACzB,IAAI,CAACK,GAAG,EAAE;UAUR,OAAO,IAAI;QACb;QAEA,OAAO,IAAI,CAACjB,KAAK,CAACY,GAAG,CAAC;QAEtB,OAAOK,GAAG;MACZ;IACF,CAAC;IAEDE,QAAQ,sBAAG;MACT,IAAI,CAACnB,KAAK,GAAG,IAAI;IACnB;EACF,CAAC,CAAC;EAtKFV,EAAE,CAAC8B,EAAE,CAACP,OAAO,CAACQ,KAAK,CAAC5B,aAAa,GAAGA,aAAa;AAAC"
}