{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "selection",
    "Manager",
    "construct",
    "constructor",
    "call",
    "__table",
    "members",
    "getTable",
    "_handleSelectEvent",
    "index",
    "evt",
    "_this",
    "handleButtonClick",
    "tree",
    "dataModel",
    "getDataModel",
    "treeCol",
    "getTreeColumn",
    "focusedCol",
    "getFocusedColumn",
    "event",
    "type",
    "Mouse",
    "getFocusCellOnPointerMove",
    "scrollers",
    "_getPaneScrollerArr",
    "i",
    "length",
    "_focusCellAtPagePos",
    "getViewportLeft",
    "getViewportTop",
    "node",
    "getNode",
    "getFocusedRow",
    "x",
    "latitude",
    "buttonPos",
    "getOpenCloseButtonPosition",
    "left",
    "width",
    "bHideOpenClose",
    "treevirtual",
    "SimpleTreeDataModel",
    "Type",
    "LEAF",
    "setState",
    "bOpened",
    "getOpenCloseClickSelectsRow",
    "tcm",
    "getTableColumnModel",
    "columnPositions",
    "_getColToXPosMap",
    "bom",
    "element",
    "Location",
    "getLeft",
    "getContentElement",
    "getDomElement",
    "visX",
    "getColumnWidth",
    "_handleExtendedClick",
    "identifier",
    "getKeyIdentifier",
    "bNoSelect",
    "SelectionManager",
    "superclass",
    "prototype",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/SelectionManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A selection manager. This is a helper class that handles all selection\r\n * related events and updates a SelectionModel.\r\n * <p>\r\n * This Selection Manager differs from its superclass in that we do not want\r\n * rows to be selected when moving around with the keyboard.\r\n */\r\nqx.Class.define(\"qx.ui.treevirtual.SelectionManager\", {\r\n  extend: qx.ui.table.selection.Manager,\r\n\r\n  /**\r\n   * @param table {qx.ui.table.Table}\r\n   *    The table whose selections are being managed\r\n   */\r\n  construct(table) {\r\n    super();\r\n\r\n    this.__table = table;\r\n  },\r\n\r\n  members: {\r\n    __table: null,\r\n\r\n    /**\r\n     * Getter for the table being managed\r\n     *\r\n     * @return {qx.ui.table.Table}\r\n     *   Table being managed\r\n     */\r\n    getTable() {\r\n      return this.__table;\r\n    },\r\n\r\n    /**\r\n     * Handles a select event.  First we determine if the click was on the\r\n     * open/close button and toggle the opened/closed state as necessary.\r\n     * Then, if the click was not on the open/close button or if the table's\r\n     * \"openCloseClickSelectsRow\" property so indicates, call our superclass to\r\n     * handle the actual row selection.\r\n     *\r\n     * @param index {Integer} the index the event is pointing at.\r\n     * @param evt {Map} the mouse event.\r\n     */\r\n    _handleSelectEvent(index, evt) {\r\n      var _this = this;\r\n\r\n      function handleButtonClick(tree, index, evt) {\r\n        // Get the data model\r\n        var dataModel = tree.getDataModel();\r\n\r\n        // Determine the column containing the tree\r\n        var treeCol = dataModel.getTreeColumn();\r\n\r\n        // Get the focused column\r\n        var focusedCol = tree.getFocusedColumn();\r\n\r\n        // If the click is not in the tree column, ...\r\n        if (focusedCol != treeCol) {\r\n          // ... then let the Table selection manager deal with it\r\n          return false;\r\n        }\r\n\r\n        // If the cell hasn't been focused automatically...\r\n        if (evt instanceof qx.event.type.Mouse) {\r\n          if (!tree.getFocusCellOnPointerMove()) {\r\n            // ... then focus it now so we can determine the node to open/close\r\n            var scrollers = tree._getPaneScrollerArr();\r\n\r\n            for (var i = 0; i < scrollers.length; i++) {\r\n              scrollers[i]._focusCellAtPagePos(\r\n                evt.getViewportLeft(),\r\n                evt.getViewportTop()\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        // Get the node to which this event applies\r\n        var node = dataModel.getNode(tree.getFocusedRow());\r\n\r\n        if (!node) {\r\n          return false;\r\n        }\r\n\r\n        // Was this a mouse event?\r\n        if (evt instanceof qx.event.type.Mouse) {\r\n          // Was the click on the open/close button? We get the position and add a bit of\r\n          // latitude to that\r\n          var x = evt.getViewportLeft();\r\n          var latitude = 2;\r\n          var buttonPos = tree.getOpenCloseButtonPosition(node);\r\n          if (\r\n            x >= buttonPos.left - latitude &&\r\n            x <= buttonPos.left + buttonPos.width + latitude\r\n          ) {\r\n            // Yup.  Toggle the opened state for this node if open/close is allowed\r\n            if (\r\n              !node.bHideOpenClose &&\r\n              node.type !== qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF\r\n            ) {\r\n              dataModel.setState(node, { bOpened: !node.bOpened });\r\n            }\r\n            return tree.getOpenCloseClickSelectsRow() ? false : true;\r\n          } else {\r\n            // Yup.  Get the order of the columns\r\n            var tcm = tree.getTableColumnModel();\r\n            var columnPositions = tcm._getColToXPosMap();\r\n\r\n            // Calculate the position of the beginning of the tree column\r\n            var left = qx.bom.element.Location.getLeft(\r\n              tree.getContentElement().getDomElement()\r\n            );\r\n\r\n            for (var i = 0; i < columnPositions[treeCol].visX; i++) {\r\n              left += tcm.getColumnWidth(columnPositions[i].visX);\r\n            }\r\n            return _this._handleExtendedClick(tree, evt, node, left);\r\n          }\r\n        } else {\r\n          // See which key generated the event\r\n          var identifier = evt.getKeyIdentifier();\r\n\r\n          switch (identifier) {\r\n            case \"Space\":\r\n              // This should only select the row, not toggle the opened state\r\n              return false;\r\n\r\n            case \"Enter\":\r\n              // Toggle the open state if open/close is allowed\r\n              if (\r\n                !node.bHideOpenClose &&\r\n                node.type != qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF\r\n              ) {\r\n                dataModel.setState(node, { bOpened: !node.bOpened });\r\n              }\r\n\r\n              return tree.getOpenCloseClickSelectsRow() ? false : true;\r\n\r\n            default:\r\n              // Unrecognized key.  Ignore it.\r\n              return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Call our local method to toggle the open/close state, if necessary\r\n      var bNoSelect = handleButtonClick(this.__table, index, evt);\r\n\r\n      // If we haven't been told not to do the selection...\r\n      if (!bNoSelect) {\r\n        // then call the superclass to handle it.\r\n        super._handleSelectEvent(index, evt);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handle a mouse click event that is not normally handled by the simple\r\n     * tree.  This is intended for more sophisticated trees where clicks in\r\n     * different places, e.g. on various icons or on the label itself, should\r\n     * be handled specially.\r\n     *\r\n     * @param tree {qx.ui.treevirtual.TreeVirtual}\r\n     *   The tree on which the event has occurred.\r\n     *\r\n     * @param evt {Map}\r\n     *   The mouse event.  Of particular interest is evt.getViewportLeft()\r\n     *   which is the horizontal offset from the left border of the click.\r\n     *\r\n     * @param node {Map}\r\n     *   The node which the tree row is displaying\r\n     *\r\n     * @param left {Integer}\r\n     *   The offset from the left, of the beginning of the tree column.\r\n     *\r\n     * @return {Boolean}\r\n     *   <i>true</i> if the row should be prevented from being selected;\r\n     *   <i>false</i> otherwise.\r\n     */\r\n    _handleExtendedClick(tree, evt, node, left) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this.__table = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}