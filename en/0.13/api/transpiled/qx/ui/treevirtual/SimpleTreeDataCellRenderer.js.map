{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Abstract",
    "construct",
    "STDCR",
    "treevirtual",
    "SimpleTreeDataCellRenderer",
    "__bVirgin",
    "__preloadImages",
    "constructor",
    "call",
    "__am",
    "util",
    "AliasManager",
    "getInstance",
    "__rm",
    "ResourceManager",
    "__tm",
    "theme",
    "manager",
    "Appearance",
    "BLANK",
    "toUri",
    "resolve",
    "statics",
    "__icon",
    "__P_476_1",
    "ImageLoader",
    "io",
    "am",
    "rm",
    "tm",
    "loadImage",
    "f",
    "load",
    "line",
    "styleFrom",
    "icon",
    "contract",
    "expand",
    "onlyContract",
    "onlyExpand",
    "startContract",
    "startExpand",
    "endContract",
    "endExpand",
    "crossContract",
    "crossExpand",
    "end",
    "cross",
    "properties",
    "useTreeLines",
    "check",
    "init",
    "excludeFirstLevelTreeLines",
    "alwaysShowOpenCloseSymbol",
    "members",
    "_onChangeTheme",
    "superclass",
    "prototype",
    "_getCellStyle",
    "cellInfo",
    "node",
    "value",
    "html",
    "cellStyle",
    "_getContentHtml",
    "pos",
    "extra",
    "_addExtraContentBeforeIndentation",
    "indentation",
    "_addIndentation",
    "_addExtraContentBeforeIcon",
    "_addIcon",
    "_addExtraContentBeforeLabel",
    "labelPos",
    "_addLabel",
    "_addImage",
    "imageInfo",
    "source",
    "url",
    "position",
    "push",
    "core",
    "Environment",
    "get",
    "bom",
    "element",
    "BoxSizing",
    "compile",
    "top",
    "undefined",
    "right",
    "bottom",
    "left",
    "width",
    "height",
    "lang",
    "String",
    "startsWith",
    "content",
    "Decoration",
    "create",
    "imageWidth",
    "imageHeight",
    "tooltip",
    "join",
    "imageData",
    "bUseTreeLines",
    "getUseTreeLines",
    "bExcludeFirstLevelTreeLines",
    "getExcludeFirstLevelTreeLines",
    "bAlwaysShowOpenCloseSymbol",
    "getAlwaysShowOpenCloseSymbol",
    "i",
    "level",
    "_getIndentSymbol",
    "rowHeight",
    "getRowHeight",
    "paddingTop",
    "paddingLeft",
    "imageUrl",
    "bSelected",
    "iconSelected",
    "type",
    "SimpleTreeDataModel",
    "Type",
    "LEAF",
    "o",
    "states",
    "opened",
    "bOpened",
    "label",
    "translate",
    "labelStyle",
    "labelSpanStyle",
    "column",
    "lastChild",
    "bLastChild",
    "length",
    "BRANCH",
    "bHideOpenClose",
    "children",
    "bFirstChild",
    "parentNodeId",
    "getOpenCloseButtonPosition",
    "padding",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/SimpleTreeDataCellRenderer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n     * David Perez Carmona (david-perez)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A data cell renderer for the tree column of a simple tree\r\n *\r\n * This cell renderer has provisions for subclasses to easily extend the\r\n * appearance of the tree. If the tree should contain images, labels,\r\n * etc. before the indentation, the subclass should override the method\r\n * _addExtraContentBeforeIndentation(). Similarly, content can be added before\r\n * the icon by overriding _addExtraContentBeforeIcon(), and before the label\r\n * by overriding _addExtraContentBeforeLabel().\r\n *\r\n * Each of these overridden methods that calls _addImage() can provide, as\r\n * part of the map passed to _addImage(), a member called \"tooltip\" which\r\n * contains the tool tip to present when the mouse is hovered over the image.\r\n *\r\n * If this class is subclassed to form a new cell renderer, an instance of it\r\n * must be provided, via the 'custom' parameter, to the TreeVirtual\r\n * constructor.\r\n */\r\nqx.Class.define(\"qx.ui.treevirtual.SimpleTreeDataCellRenderer\", {\r\n  extend: qx.ui.table.cellrenderer.Abstract,\r\n\r\n  construct() {\r\n    var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\r\n\r\n    // Begin preloading of the tree images, if not already requested.\r\n    if (STDCR.__bVirgin) {\r\n      STDCR.__preloadImages();\r\n      STDCR.__bVirgin = false;\r\n    }\r\n\r\n    super();\r\n\r\n    this.__am = qx.util.AliasManager.getInstance();\r\n    this.__rm = qx.util.ResourceManager.getInstance();\r\n    this.__tm = qx.theme.manager.Appearance.getInstance();\r\n\r\n    // Base URL used for indentation\r\n    this.BLANK = this.__rm.toUri(this.__am.resolve(\"static/blank.png\"));\r\n  },\r\n\r\n  statics: {\r\n    /** File names of each of the tree icons */\r\n    __icon: {},\r\n\r\n    /** Whether we have not yet requested pre-loading of images */\r\n    __bVirgin: true,\r\n\r\n    /**\r\n     * Request preloading of images so they appear immediately upon rendering\r\n     */\r\n    __preloadImages() {\r\n      var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\r\n\r\n      var ImageLoader = qx.io.ImageLoader;\r\n\r\n      var am = qx.util.AliasManager.getInstance();\r\n      var rm = qx.util.ResourceManager.getInstance();\r\n      var tm = qx.theme.manager.Appearance.getInstance();\r\n\r\n      var loadImage = function (f) {\r\n        ImageLoader.load(rm.toUri(am.resolve(f)));\r\n      };\r\n\r\n      STDCR.__icon.line = tm.styleFrom(\"treevirtual-line\");\r\n      loadImage(STDCR.__icon.line.icon);\r\n\r\n      STDCR.__icon.contract = tm.styleFrom(\"treevirtual-contract\");\r\n      loadImage(STDCR.__icon.contract.icon);\r\n\r\n      STDCR.__icon.expand = tm.styleFrom(\"treevirtual-expand\");\r\n      loadImage(STDCR.__icon.expand.icon);\r\n\r\n      STDCR.__icon.onlyContract = tm.styleFrom(\"treevirtual-only-contract\");\r\n      loadImage(STDCR.__icon.onlyContract.icon);\r\n\r\n      STDCR.__icon.onlyExpand = tm.styleFrom(\"treevirtual-only-expand\");\r\n      loadImage(STDCR.__icon.onlyExpand.icon);\r\n\r\n      STDCR.__icon.startContract = tm.styleFrom(\"treevirtual-start-contract\");\r\n      loadImage(STDCR.__icon.startContract.icon);\r\n\r\n      STDCR.__icon.startExpand = tm.styleFrom(\"treevirtual-start-expand\");\r\n      loadImage(STDCR.__icon.startExpand.icon);\r\n\r\n      STDCR.__icon.endContract = tm.styleFrom(\"treevirtual-end-contract\");\r\n      loadImage(STDCR.__icon.endContract.icon);\r\n\r\n      STDCR.__icon.endExpand = tm.styleFrom(\"treevirtual-end-expand\");\r\n      loadImage(STDCR.__icon.endExpand.icon);\r\n\r\n      STDCR.__icon.crossContract = tm.styleFrom(\"treevirtual-cross-contract\");\r\n      loadImage(STDCR.__icon.crossContract.icon);\r\n\r\n      STDCR.__icon.crossExpand = tm.styleFrom(\"treevirtual-cross-expand\");\r\n      loadImage(STDCR.__icon.crossExpand.icon);\r\n\r\n      STDCR.__icon.end = tm.styleFrom(\"treevirtual-end\");\r\n      loadImage(STDCR.__icon.end.icon);\r\n\r\n      STDCR.__icon.cross = tm.styleFrom(\"treevirtual-cross\");\r\n      loadImage(STDCR.__icon.cross.icon);\r\n    }\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * Set whether lines linking tree children shall be drawn on the tree\r\n     * if the theme supports tree lines.\r\n     */\r\n    useTreeLines: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    },\r\n\r\n    /**\r\n     * When true, exclude only the first-level tree lines, creating,\r\n     * effectively, multiple unrelated root nodes.\r\n     */\r\n    excludeFirstLevelTreeLines: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    },\r\n\r\n    /**\r\n     * Set whether the open/close button should be displayed on a branch, even\r\n     * if the branch has no children.\r\n     */\r\n    alwaysShowOpenCloseSymbol: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __am: null,\r\n    __tm: null,\r\n    __rm: null,\r\n\r\n    // overridden\r\n    _onChangeTheme() {\r\n      super._onChangeTheme();\r\n      qx.ui.treevirtual.SimpleTreeDataCellRenderer.__preloadImages();\r\n    },\r\n\r\n    // overridden\r\n    _getCellStyle(cellInfo) {\r\n      var node = cellInfo.value;\r\n\r\n      // Return the style for the div for the cell.  If there's cell-specific\r\n      // style information provided, append it.\r\n      var html =\r\n        super._getCellStyle(cellInfo) +\r\n        (node.cellStyle ? node.cellStyle + \";\" : \"\");\r\n      return html;\r\n    },\r\n\r\n    // overridden\r\n    _getContentHtml(cellInfo) {\r\n      var html = \"\";\r\n\r\n      // Horizontal position\r\n      var pos = 0;\r\n\r\n      // If needed, add extra content before indentation\r\n      var extra = this._addExtraContentBeforeIndentation(cellInfo, pos);\r\n      html += extra.html;\r\n      pos = extra.pos;\r\n\r\n      // Add the indentation (optionally with tree lines)\r\n      var indentation = this._addIndentation(cellInfo, pos);\r\n      html += indentation.html;\r\n      pos = indentation.pos;\r\n\r\n      // If needed, add extra content before icon\r\n      extra = this._addExtraContentBeforeIcon(cellInfo, pos);\r\n      html += extra.html;\r\n      pos = extra.pos;\r\n\r\n      // Add the node icon\r\n      var icon = this._addIcon(cellInfo, pos);\r\n      html += icon.html;\r\n      pos = icon.pos;\r\n\r\n      // If needed, add extra content before label\r\n      extra = this._addExtraContentBeforeLabel(cellInfo, pos);\r\n      html += extra.html;\r\n      pos = extra.pos;\r\n\r\n      // store this position on the node so we can use it for the NodeEditor without recalculation\r\n      cellInfo.value.labelPos = pos;\r\n      // Add the node's label\r\n      html += this._addLabel(cellInfo, pos);\r\n\r\n      return html;\r\n    },\r\n\r\n    /**\r\n     * Add an image to the tree.  This might be a visible icon or it may be\r\n     * part of the indentation.\r\n     *\r\n     * @param imageInfo {Map}\r\n     *   How to display the image.  It optionally includes any of the\r\n     *   following:\r\n     *   <dl>\r\n     *     <dt>position {Map}</dt>\r\n     *     <dd>\r\n     *       If provided, a div is created to hold the image.  The div's top,\r\n     *       right, bottom, left, width, and/or height may be specified with\r\n     *       members of this map.  Each is expected to be an integer value.\r\n     *     </dd>\r\n     *     <dt>imageWidth, imageHeight</dt>\r\n     *     <dd>\r\n     *       The image's width and height.  These are used only if both are\r\n     *       specified.\r\n     *     </dd>\r\n     *   </dl>\r\n     *\r\n     * @return {String}\r\n     *   The html for this image, possibly with a surrounding div (see\r\n     *   'position', above).\r\n     */\r\n    _addImage(imageInfo) {\r\n      var html = [];\r\n\r\n      // Resolve the URI\r\n      var source = this.__rm.toUri(this.__am.resolve(imageInfo.url));\r\n\r\n      // If we've been given positioning attributes, enclose image in a div\r\n      if (imageInfo.position) {\r\n        var pos = imageInfo.position;\r\n\r\n        html.push('<div style=\"position:absolute;');\r\n\r\n        if (qx.core.Environment.get(\"css.boxsizing\")) {\r\n          html.push(qx.bom.element.BoxSizing.compile(\"content-box\"));\r\n        }\r\n\r\n        if (pos.top !== undefined) {\r\n          html.push(\"top:\" + pos.top + \"px;\");\r\n        }\r\n\r\n        if (pos.right !== undefined) {\r\n          html.push(\"right:\" + pos.right + \"px;\");\r\n        }\r\n\r\n        if (pos.bottom !== undefined) {\r\n          html.push(\"bottom:\" + pos.bottom + \"px;\");\r\n        }\r\n\r\n        if (pos.left !== undefined) {\r\n          html.push(\"left:\" + pos.left + \"px;\");\r\n        }\r\n\r\n        if (pos.width !== undefined) {\r\n          html.push(\"width:\" + pos.width + \"px;\");\r\n        }\r\n\r\n        if (pos.height !== undefined) {\r\n          html.push(\"height:\" + pos.height + \"px;\");\r\n        }\r\n\r\n        html.push('\">');\r\n      }\r\n\r\n      if (qx.lang.String.startsWith(source, \"@\")) {\r\n        var content = qx.bom.element.Decoration.create(source, \"no-repeat\", {});\r\n        html.push(content);\r\n      } else {\r\n        // Don't use an image tag.  They render differently in Firefox and IE7\r\n        // even if both are enclosed in a div specified as content box.  Instead,\r\n        // add the image as the background image of a div.\r\n        html.push('<div style=\"');\r\n        html.push(\"background-image:url(\" + source + \");\");\r\n        html.push(\"background-repeat:no-repeat;\");\r\n\r\n        if (imageInfo.imageWidth && imageInfo.imageHeight) {\r\n          html.push(\r\n            \";width:\" +\r\n              imageInfo.imageWidth +\r\n              \"px\" +\r\n              \";height:\" +\r\n              imageInfo.imageHeight +\r\n              \"px\"\r\n          );\r\n        }\r\n\r\n        var tooltip = imageInfo.tooltip;\r\n\r\n        if (tooltip != null) {\r\n          html.push('\" title=\"' + tooltip);\r\n        }\r\n\r\n        html.push('\">&nbsp;</div>');\r\n      }\r\n\r\n      if (imageInfo.position) {\r\n        html.push(\"</div>\");\r\n      }\r\n\r\n      return html.join(\"\");\r\n    },\r\n\r\n    /**\r\n     * Add the indentation for this node of the tree.\r\n     *\r\n     * The indentation optionally includes tree lines.  Whether tree lines are\r\n     * used depends on (a) the properties 'useTreeLines' and\r\n     * 'excludeFirstLevelTreelines' within this class; and (b) the widget\r\n     * theme in use (some themes don't support tree lines).\r\n     *\r\n     * @param cellInfo {Map} The information about the cell.\r\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\r\n     *\r\n     * @param pos {Integer}\r\n     *   The position from the left edge of the column at which to render this\r\n     *   item.\r\n     *\r\n     * @return {Map}\r\n     *   The returned map contains an 'html' member which contains the html for\r\n     *   the indentation, and a 'pos' member which is the starting position\r\n     *   plus the width of the indentation.\r\n     */\r\n    _addIndentation(cellInfo, pos) {\r\n      var node = cellInfo.value;\r\n      var imageData;\r\n      var html = \"\";\r\n\r\n      // Generate the indentation.  Obtain icon determination values once\r\n      // rather than each time through the loop.\r\n      var bUseTreeLines = this.getUseTreeLines();\r\n      var bExcludeFirstLevelTreeLines = this.getExcludeFirstLevelTreeLines();\r\n      var bAlwaysShowOpenCloseSymbol = this.getAlwaysShowOpenCloseSymbol();\r\n\r\n      for (var i = 0; i < node.level; i++) {\r\n        imageData = this._getIndentSymbol(\r\n          i,\r\n          node,\r\n          bUseTreeLines,\r\n          bAlwaysShowOpenCloseSymbol,\r\n          bExcludeFirstLevelTreeLines\r\n        );\r\n\r\n        var rowHeight = cellInfo.table.getRowHeight();\r\n\r\n        html += this._addImage({\r\n          url: imageData.icon,\r\n          position: {\r\n            top: 0 + (imageData.paddingTop || 0),\r\n            left: pos + (imageData.paddingLeft || 0),\r\n            width: rowHeight + 3,\r\n            height: rowHeight\r\n          },\r\n\r\n          imageWidth: rowHeight,\r\n          imageHeight: rowHeight\r\n        });\r\n\r\n        pos += rowHeight + 3;\r\n      }\r\n\r\n      return {\r\n        html: html,\r\n        pos: pos\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Add the icon for this node of the tree.\r\n     *\r\n     * @param cellInfo {Map} The information about the cell.\r\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\r\n     *\r\n     * @param pos {Integer}\r\n     *   The position from the left edge of the column at which to render this\r\n     *   item.\r\n     *\r\n     * @return {Map}\r\n     *   The returned map contains an 'html' member which contains the html for\r\n     *   the icon, and a 'pos' member which is the starting position plus the\r\n     *   width of the icon.\r\n     */\r\n    _addIcon(cellInfo, pos) {\r\n      var node = cellInfo.value;\r\n\r\n      // Add the node's icon\r\n      var imageUrl =\r\n        node.bSelected && node.iconSelected ? node.iconSelected : node.icon;\r\n\r\n      if (!imageUrl) {\r\n        if (node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF) {\r\n          var o = this.__tm.styleFrom(\"treevirtual-file\");\r\n        } else {\r\n          var states = { opened: node.bOpened };\r\n          var o = this.__tm.styleFrom(\"treevirtual-folder\", states);\r\n        }\r\n\r\n        imageUrl = o.icon;\r\n      }\r\n\r\n      var rowHeight = cellInfo.table.getRowHeight();\r\n\r\n      var html = this._addImage({\r\n        url: imageUrl,\r\n        position: {\r\n          top: 0,\r\n          left: pos,\r\n          width: rowHeight + 3,\r\n          height: rowHeight\r\n        },\r\n\r\n        imageWidth: rowHeight,\r\n        imageHeight: rowHeight\r\n      });\r\n\r\n      return {\r\n        html: html,\r\n        pos: pos + rowHeight + 3\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Add the label for this node of the tree.\r\n     *\r\n     * @param cellInfo {Map} The information about the cell.\r\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\r\n     *   Additionally, if defined, the labelSpanStyle member is used to apply\r\n     *   style to the span containing the label.  (This member is for use by\r\n     *   subclasses; it's not otherwise used by this class.)\r\n     *\r\n     * @param pos {Integer}\r\n     *   The position from the left edge of the column at which to render this\r\n     *   item.\r\n     *\r\n     * @return {String}\r\n     *   The html for the label.\r\n     */\r\n    _addLabel(cellInfo, pos) {\r\n      var node = cellInfo.value;\r\n      var label = node.label;\r\n\r\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n        if (label && label.translate) {\r\n          label = label.translate();\r\n        }\r\n      }\r\n\r\n      // Add the node's label.  We calculate the \"left\" property with: each\r\n      // tree line (indentation) icon is 19 pixels wide; the folder icon is 16\r\n      // pixels wide, there are two pixels of padding at the left, and we want\r\n      // 2 pixels between the folder icon and the label\r\n      var html =\r\n        '<div style=\"position:absolute;' +\r\n        \"left:\" +\r\n        pos +\r\n        \"px;\" +\r\n        \"top:0;\" +\r\n        (node.labelStyle ? node.labelStyle + \";\" : \"\") +\r\n        '\">' +\r\n        \"<span\" +\r\n        (cellInfo.labelSpanStyle\r\n          ? 'style=\"' + cellInfo.labelSpanStyle + ';\"'\r\n          : \"\") +\r\n        \">\" +\r\n        label +\r\n        \"</span>\" +\r\n        \"</div>\";\r\n\r\n      return html;\r\n    },\r\n\r\n    /**\r\n     * Adds extra content just before the indentation.\r\n     *\r\n     * @param cellInfo {Map} The information about the cell.\r\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\r\n     *\r\n     * @param pos {Integer}\r\n     *   The position from the left edge of the column at which to render this\r\n     *   item.\r\n     *\r\n     * @return {Map}\r\n     *   The returned map contains an 'html' member which contains the html for\r\n     *   the indentation, and a 'pos' member which is the starting position\r\n     *   plus the width of the indentation.\r\n     */\r\n    _addExtraContentBeforeIndentation(cellInfo, pos) {\r\n      return { html: \"\", pos: pos };\r\n    },\r\n\r\n    /**\r\n     * Adds extra content just before the icon.\r\n     *\r\n     * @param cellInfo {Map} The information about the cell.\r\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\r\n     *\r\n     * @param pos {Integer}\r\n     *   The position from the left edge of the column at which to render this\r\n     *   item.\r\n     *\r\n     * @return {Map}\r\n     *   The returned map contains an 'html' member which contains the html for\r\n     *   the indentation, and a 'pos' member which is the starting position\r\n     *   plus the width of the indentation.\r\n     */\r\n    _addExtraContentBeforeIcon(cellInfo, pos) {\r\n      return { html: \"\", pos: pos };\r\n    },\r\n\r\n    /**\r\n     * Adds extra content just before the label.\r\n     *\r\n     * @param cellInfo {Map} The information about the cell.\r\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\r\n     *\r\n     * @param pos {Integer}\r\n     *   The position from the left edge of the column at which to render this\r\n     *   item.\r\n     *\r\n     * @return {Map}\r\n     *   The returned map contains an 'html' member which contains the html for\r\n     *   the indentation, and a 'pos' member which is the starting position\r\n     *   plus the width of the indentation.\r\n     */\r\n    _addExtraContentBeforeLabel(cellInfo, pos) {\r\n      return { html: \"\", pos: pos };\r\n    },\r\n\r\n    /**\r\n     * Determine the symbol to use for indentation of a tree row, at a\r\n     * particular column.  The indentation to use may be just white space or\r\n     * may be a tree line.  Tree lines come in numerous varieties, so the\r\n     * appropriate one is selected.\r\n     *\r\n     * @param column {Integer}\r\n     *   The column of indentation being requested, zero-relative\r\n     *\r\n     * @param node {Node}\r\n     *   The node being displayed in the row.  The properties of a node are\r\n     *   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}\r\n     *\r\n     * @param bUseTreeLines {Boolean}\r\n     *   Whether to find an appropriate tree line icon, or simply provide\r\n     *   white space.\r\n     *\r\n     * @param bAlwaysShowOpenCloseSymbol {Boolean}\r\n     *   Whether to display the open/close icon for a node even if it has no\r\n     *   children.\r\n     *\r\n     * @param bExcludeFirstLevelTreeLines {Boolean}\r\n     *   If bUseTreeLines is enabled, then further filtering of the left-most\r\n     *   tree line may be specified here.  If <i>true</i> then the left-most\r\n     *   tree line, between top-level siblings, will not be displayed.\r\n     *   If <i>false</i>, then the left-most tree line will be displayed\r\n     *   just like all of the other tree lines.\r\n     *\r\n     * @return {Map} map of image properties.\r\n     */\r\n    _getIndentSymbol(\r\n      column,\r\n      node,\r\n      bUseTreeLines,\r\n      bAlwaysShowOpenCloseSymbol,\r\n      bExcludeFirstLevelTreeLines\r\n    ) {\r\n      var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\r\n\r\n      // If we're in column 0 and excludeFirstLevelTreeLines is enabled, then\r\n      // we treat this as if no tree lines were requested.\r\n      if (column == 0 && bExcludeFirstLevelTreeLines) {\r\n        bUseTreeLines = false;\r\n      }\r\n\r\n      // If we're not on the final column...\r\n      if (column < node.level - 1) {\r\n        // then return either a line or a blank icon, depending on\r\n        // bUseTreeLines\r\n        return bUseTreeLines && !node.lastChild[column]\r\n          ? STDCR.__icon.line\r\n          : { icon: this.BLANK };\r\n      }\r\n\r\n      var bLastChild = node.lastChild[node.lastChild.length - 1];\r\n\r\n      // Is this a branch node that does not have the open/close button hidden?\r\n      if (\r\n        node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\r\n        !node.bHideOpenClose\r\n      ) {\r\n        // Does this node have any children, or do we always want the\r\n        // open/close symbol to be shown?\r\n        if (node.children.length > 0 || bAlwaysShowOpenCloseSymbol) {\r\n          // If we're not showing tree lines...\r\n          if (!bUseTreeLines) {\r\n            // ... then just use an expand or contract\r\n            return node.bOpened ? STDCR.__icon.contract : STDCR.__icon.expand;\r\n          }\r\n\r\n          // Are we looking at a top-level, first child of its parent?\r\n          if (column == 0 && node.bFirstChild) {\r\n            // Yup.  If it's also a last child...\r\n            if (bLastChild) {\r\n              // ... then use no tree lines.\r\n              return node.bOpened\r\n                ? STDCR.__icon.onlyContract\r\n                : STDCR.__icon.onlyExpand;\r\n            } else {\r\n              // otherwise, use descender lines but no ascender.\r\n              return node.bOpened\r\n                ? STDCR.__icon.startContract\r\n                : STDCR.__icon.startExpand;\r\n            }\r\n          }\r\n\r\n          // It's not a top-level, first child.  Is this the last child of its\r\n          // parent?\r\n          if (bLastChild) {\r\n            // Yup.  Return an ending expand or contract.\r\n            return node.bOpened\r\n              ? STDCR.__icon.endContract\r\n              : STDCR.__icon.endExpand;\r\n          }\r\n\r\n          // Otherwise, return a crossing expand or contract.\r\n          return node.bOpened\r\n            ? STDCR.__icon.crossContract\r\n            : STDCR.__icon.crossExpand;\r\n        }\r\n      }\r\n\r\n      // This node does not have any children.  Return an end or cross, if\r\n      // we're using tree lines.\r\n      if (bUseTreeLines) {\r\n        // If this is a child of the root node...\r\n        if (node.parentNodeId == 0) {\r\n          // If this is the only child...\r\n          if (bLastChild && node.bFirstChild) {\r\n            // ... then return a blank.\r\n            return { icon: this.BLANK };\r\n          }\r\n\r\n          // Otherwise, if this is the last child...\r\n          if (bLastChild) {\r\n            // ... then return an end line.\r\n            return STDCR.__icon.end;\r\n          }\r\n\r\n          // Otherwise if this is the first child and is a branch...\r\n          if (\r\n            node.bFirstChild &&\r\n            node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH\r\n          ) {\r\n            // ... then return a start line.\r\n            return node.bOpened\r\n              ? STDCR.__icon.startContract\r\n              : STDCR.__icon.startExpand;\r\n          }\r\n        }\r\n\r\n        // If this is a last child, return and ending line; otherwise cross.\r\n        return bLastChild ? STDCR.__icon.end : STDCR.__icon.cross;\r\n      }\r\n\r\n      return { icon: this.BLANK };\r\n    },\r\n\r\n    /**\r\n     * Determine the position in the cell of the open/close button image\r\n     *\r\n     * @param table {Table}\r\n     *   The column of indentation being requested, zero-relative\r\n     *\r\n     * @param node {Node}\r\n     *   The node being displayed in the row.  The properties of a node are\r\n     *   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}\r\n     *\r\n     * @return {Object} Position of the Open/Close Button\r\n     */\r\n    getOpenCloseButtonPosition(table, node) {\r\n      var padding = 2;\r\n      var width = table.getRowHeight() + 3;\r\n      return {\r\n        top: 0,\r\n        left: (node.level - 1) * width + padding,\r\n        width: width,\r\n        height: table.getRowHeight()\r\n      };\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this.__am = this.__rm = this.__tm = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}