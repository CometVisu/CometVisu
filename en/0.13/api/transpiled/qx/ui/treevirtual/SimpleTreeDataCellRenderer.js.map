{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Abstract",
    "construct",
    "STDCR",
    "treevirtual",
    "SimpleTreeDataCellRenderer",
    "__bVirgin",
    "__preloadImages",
    "__am",
    "util",
    "AliasManager",
    "getInstance",
    "__rm",
    "ResourceManager",
    "__tm",
    "theme",
    "manager",
    "Appearance",
    "BLANK",
    "toUri",
    "resolve",
    "statics",
    "__icon",
    "ImageLoader",
    "io",
    "am",
    "rm",
    "tm",
    "loadImage",
    "f",
    "load",
    "line",
    "styleFrom",
    "icon",
    "contract",
    "expand",
    "onlyContract",
    "onlyExpand",
    "startContract",
    "startExpand",
    "endContract",
    "endExpand",
    "crossContract",
    "crossExpand",
    "end",
    "cross",
    "properties",
    "useTreeLines",
    "check",
    "init",
    "excludeFirstLevelTreeLines",
    "alwaysShowOpenCloseSymbol",
    "members",
    "_onChangeTheme",
    "_getCellStyle",
    "cellInfo",
    "node",
    "value",
    "html",
    "cellStyle",
    "_getContentHtml",
    "pos",
    "extra",
    "_addExtraContentBeforeIndentation",
    "indentation",
    "_addIndentation",
    "_addExtraContentBeforeIcon",
    "_addIcon",
    "_addExtraContentBeforeLabel",
    "labelPos",
    "_addLabel",
    "_addImage",
    "imageInfo",
    "source",
    "url",
    "position",
    "push",
    "core",
    "Environment",
    "get",
    "bom",
    "element",
    "BoxSizing",
    "compile",
    "top",
    "undefined",
    "right",
    "bottom",
    "left",
    "width",
    "height",
    "lang",
    "String",
    "startsWith",
    "content",
    "Decoration",
    "create",
    "imageWidth",
    "imageHeight",
    "tooltip",
    "join",
    "imageData",
    "bUseTreeLines",
    "getUseTreeLines",
    "bExcludeFirstLevelTreeLines",
    "getExcludeFirstLevelTreeLines",
    "bAlwaysShowOpenCloseSymbol",
    "getAlwaysShowOpenCloseSymbol",
    "i",
    "level",
    "_getIndentSymbol",
    "rowHeight",
    "getRowHeight",
    "paddingTop",
    "paddingLeft",
    "imageUrl",
    "bSelected",
    "iconSelected",
    "type",
    "SimpleTreeDataModel",
    "Type",
    "LEAF",
    "o",
    "states",
    "opened",
    "bOpened",
    "label",
    "translate",
    "labelStyle",
    "labelSpanStyle",
    "column",
    "lastChild",
    "bLastChild",
    "length",
    "BRANCH",
    "bHideOpenClose",
    "children",
    "bFirstChild",
    "parentNodeId",
    "getOpenCloseButtonPosition",
    "padding",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/SimpleTreeDataCellRenderer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n     * David Perez Carmona (david-perez)\n\n************************************************************************ */\n\n/**\n * A data cell renderer for the tree column of a simple tree\n *\n * This cell renderer has provisions for subclasses to easily extend the\n * appearance of the tree. If the tree should contain images, labels,\n * etc. before the indentation, the subclass should override the method\n * _addExtraContentBeforeIndentation(). Similarly, content can be added before\n * the icon by overriding _addExtraContentBeforeIcon(), and before the label\n * by overriding _addExtraContentBeforeLabel().\n *\n * Each of these overridden methods that calls _addImage() can provide, as\n * part of the map passed to _addImage(), a member called \"tooltip\" which\n * contains the tool tip to present when the mouse is hovered over the image.\n *\n * If this class is subclassed to form a new cell renderer, an instance of it\n * must be provided, via the 'custom' parameter, to the TreeVirtual\n * constructor.\n */\nqx.Class.define(\"qx.ui.treevirtual.SimpleTreeDataCellRenderer\", {\n  extend: qx.ui.table.cellrenderer.Abstract,\n\n  construct() {\n    var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\n\n    // Begin preloading of the tree images, if not already requested.\n    if (STDCR.__bVirgin) {\n      STDCR.__preloadImages();\n      STDCR.__bVirgin = false;\n    }\n\n    super();\n\n    this.__am = qx.util.AliasManager.getInstance();\n    this.__rm = qx.util.ResourceManager.getInstance();\n    this.__tm = qx.theme.manager.Appearance.getInstance();\n\n    // Base URL used for indentation\n    this.BLANK = this.__rm.toUri(this.__am.resolve(\"static/blank.png\"));\n  },\n\n  statics: {\n    /** File names of each of the tree icons */\n    __icon: {},\n\n    /** Whether we have not yet requested pre-loading of images */\n    __bVirgin: true,\n\n    /**\n     * Request preloading of images so they appear immediately upon rendering\n     */\n    __preloadImages() {\n      var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\n\n      var ImageLoader = qx.io.ImageLoader;\n\n      var am = qx.util.AliasManager.getInstance();\n      var rm = qx.util.ResourceManager.getInstance();\n      var tm = qx.theme.manager.Appearance.getInstance();\n\n      var loadImage = function (f) {\n        ImageLoader.load(rm.toUri(am.resolve(f)));\n      };\n\n      STDCR.__icon.line = tm.styleFrom(\"treevirtual-line\");\n      loadImage(STDCR.__icon.line.icon);\n\n      STDCR.__icon.contract = tm.styleFrom(\"treevirtual-contract\");\n      loadImage(STDCR.__icon.contract.icon);\n\n      STDCR.__icon.expand = tm.styleFrom(\"treevirtual-expand\");\n      loadImage(STDCR.__icon.expand.icon);\n\n      STDCR.__icon.onlyContract = tm.styleFrom(\"treevirtual-only-contract\");\n      loadImage(STDCR.__icon.onlyContract.icon);\n\n      STDCR.__icon.onlyExpand = tm.styleFrom(\"treevirtual-only-expand\");\n      loadImage(STDCR.__icon.onlyExpand.icon);\n\n      STDCR.__icon.startContract = tm.styleFrom(\"treevirtual-start-contract\");\n      loadImage(STDCR.__icon.startContract.icon);\n\n      STDCR.__icon.startExpand = tm.styleFrom(\"treevirtual-start-expand\");\n      loadImage(STDCR.__icon.startExpand.icon);\n\n      STDCR.__icon.endContract = tm.styleFrom(\"treevirtual-end-contract\");\n      loadImage(STDCR.__icon.endContract.icon);\n\n      STDCR.__icon.endExpand = tm.styleFrom(\"treevirtual-end-expand\");\n      loadImage(STDCR.__icon.endExpand.icon);\n\n      STDCR.__icon.crossContract = tm.styleFrom(\"treevirtual-cross-contract\");\n      loadImage(STDCR.__icon.crossContract.icon);\n\n      STDCR.__icon.crossExpand = tm.styleFrom(\"treevirtual-cross-expand\");\n      loadImage(STDCR.__icon.crossExpand.icon);\n\n      STDCR.__icon.end = tm.styleFrom(\"treevirtual-end\");\n      loadImage(STDCR.__icon.end.icon);\n\n      STDCR.__icon.cross = tm.styleFrom(\"treevirtual-cross\");\n      loadImage(STDCR.__icon.cross.icon);\n    }\n  },\n\n  properties: {\n    /**\n     * Set whether lines linking tree children shall be drawn on the tree\n     * if the theme supports tree lines.\n     */\n    useTreeLines: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * When true, exclude only the first-level tree lines, creating,\n     * effectively, multiple unrelated root nodes.\n     */\n    excludeFirstLevelTreeLines: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Set whether the open/close button should be displayed on a branch, even\n     * if the branch has no children.\n     */\n    alwaysShowOpenCloseSymbol: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __am: null,\n    __tm: null,\n    __rm: null,\n\n    // overridden\n    _onChangeTheme() {\n      super._onChangeTheme();\n      qx.ui.treevirtual.SimpleTreeDataCellRenderer.__preloadImages();\n    },\n\n    // overridden\n    _getCellStyle(cellInfo) {\n      var node = cellInfo.value;\n\n      // Return the style for the div for the cell.  If there's cell-specific\n      // style information provided, append it.\n      var html =\n        super._getCellStyle(cellInfo) +\n        (node.cellStyle ? node.cellStyle + \";\" : \"\");\n      return html;\n    },\n\n    // overridden\n    _getContentHtml(cellInfo) {\n      var html = \"\";\n\n      // Horizontal position\n      var pos = 0;\n\n      // If needed, add extra content before indentation\n      var extra = this._addExtraContentBeforeIndentation(cellInfo, pos);\n      html += extra.html;\n      pos = extra.pos;\n\n      // Add the indentation (optionally with tree lines)\n      var indentation = this._addIndentation(cellInfo, pos);\n      html += indentation.html;\n      pos = indentation.pos;\n\n      // If needed, add extra content before icon\n      extra = this._addExtraContentBeforeIcon(cellInfo, pos);\n      html += extra.html;\n      pos = extra.pos;\n\n      // Add the node icon\n      var icon = this._addIcon(cellInfo, pos);\n      html += icon.html;\n      pos = icon.pos;\n\n      // If needed, add extra content before label\n      extra = this._addExtraContentBeforeLabel(cellInfo, pos);\n      html += extra.html;\n      pos = extra.pos;\n\n      // store this position on the node so we can use it for the NodeEditor without recalculation\n      cellInfo.value.labelPos = pos;\n      // Add the node's label\n      html += this._addLabel(cellInfo, pos);\n\n      return html;\n    },\n\n    /**\n     * Add an image to the tree.  This might be a visible icon or it may be\n     * part of the indentation.\n     *\n     * @param imageInfo {Map}\n     *   How to display the image.  It optionally includes any of the\n     *   following:\n     *   <dl>\n     *     <dt>position {Map}</dt>\n     *     <dd>\n     *       If provided, a div is created to hold the image.  The div's top,\n     *       right, bottom, left, width, and/or height may be specified with\n     *       members of this map.  Each is expected to be an integer value.\n     *     </dd>\n     *     <dt>imageWidth, imageHeight</dt>\n     *     <dd>\n     *       The image's width and height.  These are used only if both are\n     *       specified.\n     *     </dd>\n     *   </dl>\n     *\n     * @return {String}\n     *   The html for this image, possibly with a surrounding div (see\n     *   'position', above).\n     */\n    _addImage(imageInfo) {\n      var html = [];\n\n      // Resolve the URI\n      var source = this.__rm.toUri(this.__am.resolve(imageInfo.url));\n\n      // If we've been given positioning attributes, enclose image in a div\n      if (imageInfo.position) {\n        var pos = imageInfo.position;\n\n        html.push('<div style=\"position:absolute;');\n\n        if (qx.core.Environment.get(\"css.boxsizing\")) {\n          html.push(qx.bom.element.BoxSizing.compile(\"content-box\"));\n        }\n\n        if (pos.top !== undefined) {\n          html.push(\"top:\" + pos.top + \"px;\");\n        }\n\n        if (pos.right !== undefined) {\n          html.push(\"right:\" + pos.right + \"px;\");\n        }\n\n        if (pos.bottom !== undefined) {\n          html.push(\"bottom:\" + pos.bottom + \"px;\");\n        }\n\n        if (pos.left !== undefined) {\n          html.push(\"left:\" + pos.left + \"px;\");\n        }\n\n        if (pos.width !== undefined) {\n          html.push(\"width:\" + pos.width + \"px;\");\n        }\n\n        if (pos.height !== undefined) {\n          html.push(\"height:\" + pos.height + \"px;\");\n        }\n\n        html.push('\">');\n      }\n\n      if (qx.lang.String.startsWith(source, \"@\")) {\n        var content = qx.bom.element.Decoration.create(source, \"no-repeat\", {});\n        html.push(content);\n      } else {\n        // Don't use an image tag.  They render differently in Firefox and IE7\n        // even if both are enclosed in a div specified as content box.  Instead,\n        // add the image as the background image of a div.\n        html.push('<div style=\"');\n        html.push(\"background-image:url(\" + source + \");\");\n        html.push(\"background-repeat:no-repeat;\");\n\n        if (imageInfo.imageWidth && imageInfo.imageHeight) {\n          html.push(\n            \";width:\" +\n              imageInfo.imageWidth +\n              \"px\" +\n              \";height:\" +\n              imageInfo.imageHeight +\n              \"px\"\n          );\n        }\n\n        var tooltip = imageInfo.tooltip;\n\n        if (tooltip != null) {\n          html.push('\" title=\"' + tooltip);\n        }\n\n        html.push('\">&nbsp;</div>');\n      }\n\n      if (imageInfo.position) {\n        html.push(\"</div>\");\n      }\n\n      return html.join(\"\");\n    },\n\n    /**\n     * Add the indentation for this node of the tree.\n     *\n     * The indentation optionally includes tree lines.  Whether tree lines are\n     * used depends on (a) the properties 'useTreeLines' and\n     * 'excludeFirstLevelTreelines' within this class; and (b) the widget\n     * theme in use (some themes don't support tree lines).\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addIndentation(cellInfo, pos) {\n      var node = cellInfo.value;\n      var imageData;\n      var html = \"\";\n\n      // Generate the indentation.  Obtain icon determination values once\n      // rather than each time through the loop.\n      var bUseTreeLines = this.getUseTreeLines();\n      var bExcludeFirstLevelTreeLines = this.getExcludeFirstLevelTreeLines();\n      var bAlwaysShowOpenCloseSymbol = this.getAlwaysShowOpenCloseSymbol();\n\n      for (var i = 0; i < node.level; i++) {\n        imageData = this._getIndentSymbol(\n          i,\n          node,\n          bUseTreeLines,\n          bAlwaysShowOpenCloseSymbol,\n          bExcludeFirstLevelTreeLines\n        );\n\n        var rowHeight = cellInfo.table.getRowHeight();\n\n        html += this._addImage({\n          url: imageData.icon,\n          position: {\n            top: 0 + (imageData.paddingTop || 0),\n            left: pos + (imageData.paddingLeft || 0),\n            width: rowHeight + 3,\n            height: rowHeight\n          },\n\n          imageWidth: rowHeight,\n          imageHeight: rowHeight\n        });\n\n        pos += rowHeight + 3;\n      }\n\n      return {\n        html: html,\n        pos: pos\n      };\n    },\n\n    /**\n     * Add the icon for this node of the tree.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the icon, and a 'pos' member which is the starting position plus the\n     *   width of the icon.\n     */\n    _addIcon(cellInfo, pos) {\n      var node = cellInfo.value;\n\n      // Add the node's icon\n      var imageUrl = node.bSelected ? node.iconSelected : node.icon;\n\n      if (!imageUrl) {\n        if (node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF) {\n          var o = this.__tm.styleFrom(\"treevirtual-file\");\n        } else {\n          var states = { opened: node.bOpened };\n          var o = this.__tm.styleFrom(\"treevirtual-folder\", states);\n        }\n\n        imageUrl = o.icon;\n      }\n\n      var rowHeight = cellInfo.table.getRowHeight();\n\n      var html = this._addImage({\n        url: imageUrl,\n        position: {\n          top: 0,\n          left: pos,\n          width: rowHeight + 3,\n          height: rowHeight\n        },\n\n        imageWidth: rowHeight,\n        imageHeight: rowHeight\n      });\n\n      return {\n        html: html,\n        pos: pos + rowHeight + 3\n      };\n    },\n\n    /**\n     * Add the label for this node of the tree.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *   Additionally, if defined, the labelSpanStyle member is used to apply\n     *   style to the span containing the label.  (This member is for use by\n     *   subclasses; it's not otherwise used by this class.)\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {String}\n     *   The html for the label.\n     */\n    _addLabel(cellInfo, pos) {\n      var node = cellInfo.value;\n      var label = node.label;\n\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        if (label && label.translate) {\n          label = label.translate();\n        }\n      }\n\n      // Add the node's label.  We calculate the \"left\" property with: each\n      // tree line (indentation) icon is 19 pixels wide; the folder icon is 16\n      // pixels wide, there are two pixels of padding at the left, and we want\n      // 2 pixels between the folder icon and the label\n      var html =\n        '<div style=\"position:absolute;' +\n        \"left:\" +\n        pos +\n        \"px;\" +\n        \"top:0;\" +\n        (node.labelStyle ? node.labelStyle + \";\" : \"\") +\n        '\">' +\n        \"<span\" +\n        (cellInfo.labelSpanStyle\n          ? 'style=\"' + cellInfo.labelSpanStyle + ';\"'\n          : \"\") +\n        \">\" +\n        label +\n        \"</span>\" +\n        \"</div>\";\n\n      return html;\n    },\n\n    /**\n     * Adds extra content just before the indentation.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addExtraContentBeforeIndentation(cellInfo, pos) {\n      return { html: \"\", pos: pos };\n    },\n\n    /**\n     * Adds extra content just before the icon.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addExtraContentBeforeIcon(cellInfo, pos) {\n      return { html: \"\", pos: pos };\n    },\n\n    /**\n     * Adds extra content just before the label.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addExtraContentBeforeLabel(cellInfo, pos) {\n      return { html: \"\", pos: pos };\n    },\n\n    /**\n     * Determine the symbol to use for indentation of a tree row, at a\n     * particular column.  The indentation to use may be just white space or\n     * may be a tree line.  Tree lines come in numerous varieties, so the\n     * appropriate one is selected.\n     *\n     * @param column {Integer}\n     *   The column of indentation being requested, zero-relative\n     *\n     * @param node {Node}\n     *   The node being displayed in the row.  The properties of a node are\n     *   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     *\n     * @param bUseTreeLines {Boolean}\n     *   Whether to find an appropriate tree line icon, or simply provide\n     *   white space.\n     *\n     * @param bAlwaysShowOpenCloseSymbol {Boolean}\n     *   Whether to display the open/close icon for a node even if it has no\n     *   children.\n     *\n     * @param bExcludeFirstLevelTreeLines {Boolean}\n     *   If bUseTreeLines is enabled, then further filtering of the left-most\n     *   tree line may be specified here.  If <i>true</i> then the left-most\n     *   tree line, between top-level siblings, will not be displayed.\n     *   If <i>false</i>, then the left-most tree line will be displayed\n     *   just like all of the other tree lines.\n     *\n     * @return {Map} map of image properties.\n     */\n    _getIndentSymbol(\n      column,\n      node,\n      bUseTreeLines,\n      bAlwaysShowOpenCloseSymbol,\n      bExcludeFirstLevelTreeLines\n    ) {\n      var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\n\n      // If we're in column 0 and excludeFirstLevelTreeLines is enabled, then\n      // we treat this as if no tree lines were requested.\n      if (column == 0 && bExcludeFirstLevelTreeLines) {\n        bUseTreeLines = false;\n      }\n\n      // If we're not on the final column...\n      if (column < node.level - 1) {\n        // then return either a line or a blank icon, depending on\n        // bUseTreeLines\n        return bUseTreeLines && !node.lastChild[column]\n          ? STDCR.__icon.line\n          : { icon: this.BLANK };\n      }\n\n      var bLastChild = node.lastChild[node.lastChild.length - 1];\n\n      // Is this a branch node that does not have the open/close button hidden?\n      if (\n        node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\n        !node.bHideOpenClose\n      ) {\n        // Does this node have any children, or do we always want the\n        // open/close symbol to be shown?\n        if (node.children.length > 0 || bAlwaysShowOpenCloseSymbol) {\n          // If we're not showing tree lines...\n          if (!bUseTreeLines) {\n            // ... then just use an expand or contract\n            return node.bOpened ? STDCR.__icon.contract : STDCR.__icon.expand;\n          }\n\n          // Are we looking at a top-level, first child of its parent?\n          if (column == 0 && node.bFirstChild) {\n            // Yup.  If it's also a last child...\n            if (bLastChild) {\n              // ... then use no tree lines.\n              return node.bOpened\n                ? STDCR.__icon.onlyContract\n                : STDCR.__icon.onlyExpand;\n            } else {\n              // otherwise, use descender lines but no ascender.\n              return node.bOpened\n                ? STDCR.__icon.startContract\n                : STDCR.__icon.startExpand;\n            }\n          }\n\n          // It's not a top-level, first child.  Is this the last child of its\n          // parent?\n          if (bLastChild) {\n            // Yup.  Return an ending expand or contract.\n            return node.bOpened\n              ? STDCR.__icon.endContract\n              : STDCR.__icon.endExpand;\n          }\n\n          // Otherwise, return a crossing expand or contract.\n          return node.bOpened\n            ? STDCR.__icon.crossContract\n            : STDCR.__icon.crossExpand;\n        }\n      }\n\n      // This node does not have any children.  Return an end or cross, if\n      // we're using tree lines.\n      if (bUseTreeLines) {\n        // If this is a child of the root node...\n        if (node.parentNodeId == 0) {\n          // If this is the only child...\n          if (bLastChild && node.bFirstChild) {\n            // ... then return a blank.\n            return { icon: this.BLANK };\n          }\n\n          // Otherwise, if this is the last child...\n          if (bLastChild) {\n            // ... then return an end line.\n            return STDCR.__icon.end;\n          }\n\n          // Otherwise if this is the first child and is a branch...\n          if (\n            node.bFirstChild &&\n            node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH\n          ) {\n            // ... then return a start line.\n            return node.bOpened\n              ? STDCR.__icon.startContract\n              : STDCR.__icon.startExpand;\n          }\n        }\n\n        // If this is a last child, return and ending line; otherwise cross.\n        return bLastChild ? STDCR.__icon.end : STDCR.__icon.cross;\n      }\n\n      return { icon: this.BLANK };\n    },\n\n    /**\n     * Determine the position in the cell of the open/close button image\n     *\n     * @param table {Table}\n     *   The column of indentation being requested, zero-relative\n     *\n     * @param node {Node}\n     *   The node being displayed in the row.  The properties of a node are\n     *   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     *\n     * @return {Object} Position of the Open/Close Button\n     */\n    getOpenCloseButtonPosition(table, node) {\n      var padding = 2;\n      var width = table.getRowHeight() + 3;\n      return {\n        top: 0,\n        left: (node.level - 1) * width + padding,\n        width: width,\n        height: table.getRowHeight()\n      };\n    }\n  },\n\n  destruct() {\n    this.__am = this.__rm = this.__tm = null;\n  }\n});\n"
  ],
  "mappings": "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"
}