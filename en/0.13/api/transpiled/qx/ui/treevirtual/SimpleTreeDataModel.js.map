{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "include",
    "treevirtual",
    "MTreePrimitive",
    "construct",
    "_rowArr",
    "_nodeArr",
    "_nodeRowMap",
    "_treeColumn",
    "_selections",
    "push",
    "_getEmptyTree",
    "__editableColArr",
    "properties",
    "filter",
    "check",
    "nullable",
    "apply",
    "members",
    "__tree",
    "__tempTreeData",
    "__recalculateLastChildFlags",
    "setTree",
    "tree",
    "getTree",
    "setEditable",
    "editable",
    "col",
    "getColumnCount",
    "fireEvent",
    "setColumnEditable",
    "columnIndex",
    "isColumnEditable",
    "getAllowNodeEdit",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "Error",
    "getSortColumnIndex",
    "setTreeColumn",
    "getTreeColumn",
    "getRowCount",
    "length",
    "getRowData",
    "rowIndex",
    "getValue",
    "setValue",
    "value",
    "node",
    "getNodeFromRow",
    "undefined",
    "updatedNode",
    "lang",
    "Object",
    "clone",
    "label",
    "nodeId",
    "columnData",
    "hasListener",
    "data",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "fireDataEvent",
    "getNode",
    "addBranch",
    "parentNodeId",
    "bOpened",
    "bHideOpenCloseButton",
    "icon",
    "iconSelected",
    "_addNode",
    "Type",
    "BRANCH",
    "addLeaf",
    "LEAF",
    "prune",
    "nodeReference",
    "bSelfAlso",
    "i",
    "children",
    "Array",
    "remove",
    "move",
    "moveNodeReference",
    "parentNodeReference",
    "moveNode",
    "moveNodeId",
    "parentNode",
    "type",
    "oldParent",
    "__inorder",
    "level",
    "getFilter",
    "child",
    "childNodeId",
    "numChildren",
    "index",
    "call",
    "bFirstChild",
    "__setLastChildFlag",
    "rowData",
    "j",
    "bSelected",
    "selected",
    "__calculateLastChildFlags",
    "tempTreeData",
    "hasChildren",
    "isLastChild",
    "lastChild",
    "parent",
    "bLast",
    "unshift",
    "__render",
    "setData",
    "nodeArr",
    "_checkEditing",
    "selectionModel",
    "getSelectionModel",
    "selections",
    "nRowIndex",
    "getRowFromNodeId",
    "setSelectionInterval",
    "getData",
    "clearData",
    "_clearSelections",
    "setColumnData",
    "getColumnData",
    "setState",
    "attributes",
    "suppressRedraw",
    "attribute",
    "TV",
    "TreeVirtual",
    "bChangeSelection",
    "getSelectionMode",
    "SelectionMode",
    "NONE",
    "isSelectedIndex",
    "removeSelectionInterval",
    "bHideOpenClose",
    "_resetSelection",
    "getNodeRowMap",
    "selection",
    "getSelectedNodes",
    "nodes",
    "_applyFilter",
    "old",
    "isNodeEditable",
    "bCanEdit",
    "destruct",
    "defer",
    "statics",
    "SimpleTreeDataModel"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/SimpleTreeDataModel.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2010 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A simple tree data model used as the table model\n *\n * The object structure of a single node of the tree is:\n *\n * <pre class='javascript'>\n * {\n *   // USER-PROVIDED ATTRIBUTES\n *   // ------------------------\n *   type           : qx.ui.treevirtual.MTreePrimitive.Type.LEAF,\n *   parentNodeId   : 23,    // index of the parent node in _nodeArr\n *\n *   label          : \"My Documents\",\n *   bSelected      : true,  // true if node is selected; false otherwise.\n *   bOpened        : true,  // true (-), false (+)\n *   bHideOpenClose : false, // whether to hide the open/close button\n *   bCanEdit       : true,  // true if the node label can be edited, false to prevent edit\n *   icon           : \"images/folder.gif\",\n *   iconSelected   : \"images/folder_selected.gif\",\n *\n *   cellStyle      : \"background-color:cyan\"\n *   labelStyle     : \"background-color:red;color:white\"\n *\n *   // USER-PROVIDED COLUMN DATA\n *   columnData     : [\n *                      null, // null at index of tree column (typically 0)\n *                      \"text of column 1\",\n *                      \"text of column 2\"\n *                    ],\n *\n *   // APPLICATION-, MIXIN-, and SUBCLASS-PROVIDED CUSTOM DATA\n *   data           : {\n *                      application :\n *                      {\n *                          // application-specific user data goes in here\n *                          foo: \"bar\",\n *                          ...\n *                      },\n *                      MDragAndDropSupport :\n *                      {\n *                          // Data required for the Drag & Drop mixin.\n *                          // When a mixin is included, its constructor\n *                          // should create this object, named according\n *                          // to the mixin or subclass name (empty or\n *                          // otherwise)\n *                      },\n *                      ... // Additional mixins or subclasses.\n *                    },\n *\n *   // INTERNALLY-CALCULATED ATTRIBUTES\n *   // --------------------------------\n *   // The following properties need not (and should not) be set by the\n *   // caller, but are automatically calculated.  Some are used internally,\n *   // while others may be of use to event listeners.\n *\n *   nodeId         : 42,   // The index in _nodeArr, useful to event listeners.\n *   children       : [ ],  // each value is an index into _nodeArr\n *\n *   level          : 2,    // The indentation level of this tree node\n *   labelPos       : 40,   // The left position of the label text - stored when the cell is rendered\n *\n *   bFirstChild    : true,\n *   lastChild      : [ false ],  // Array where the index is the column of\n *                                // indentation, and the value is a boolean.\n *                                // These are used to locate the\n *                                // appropriate \"tree line\" icon.\n * }\n * </pre>\n */\nqx.Class.define(\"qx.ui.treevirtual.SimpleTreeDataModel\", {\n  extend: qx.ui.table.model.Abstract,\n\n  include: qx.ui.treevirtual.MTreePrimitive,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this._rowArr = []; // rows, resorted into tree order as necessary\n    this._nodeArr = []; // tree nodes, organized with hierarchy\n\n    this._nodeRowMap = []; // map nodeArr index to rowArr index.  The\n    // index of this array is the index of\n    // _nodeArr, and the values in this array are\n    // the indexes into _rowArr.\n\n    this._treeColumn = 0; // default column for tree nodes\n\n    this._selections = {}; // list of indexes of selected nodes\n\n    // the root node, needed to store its children\n    this._nodeArr.push(qx.ui.treevirtual.MTreePrimitive._getEmptyTree());\n\n    // Track which columns are editable\n    this.__editableColArr = null;\n  },\n\n  properties: {\n    /**\n     * Gives the user the opportunity to filter the model. The filter\n     * function is called for every node in the model. It gets as an argument the\n     * <code>node</code> object and has to return\n     * <code>true</code> if the given data should be shown and\n     * <code>false</code> if the given data should be ignored.\n     */\n    filter: {\n      check: \"Function\",\n      nullable: true,\n      apply: \"_applyFilter\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __tree: null,\n    __editableColArr: null,\n    __tempTreeData: null,\n    __recalculateLastChildFlags: null,\n\n    /** Rows, resorted into tree order as necessary */\n    _rowArr: null,\n\n    /** Tree nodes, organized with hierarchy */\n    _nodeArr: null,\n\n    /**\n     * Map nodeArr index to rowArr index.  The index of this array is the\n     * index of _nodeArr, and the values in this array are the indexes into\n     * _rowArr.\n     */\n    _nodeRowMap: null,\n\n    /** Column for tree nodes */\n    _treeColumn: null,\n\n    /** list of indexes of selected nodes */\n    _selections: null,\n\n    /**\n     * Set the tree object for which this data model is used.\n     *\n     * @param tree {qx.ui.treevirtual.TreeVirtual}\n     *    The tree used to render the data in this model.\n     *\n     */\n    setTree(tree) {\n      this.__tree = tree;\n    },\n\n    /**\n     * Get the tree object for which this data model is used.\n     *\n     * @return {qx.ui.treevirtual.TreeVirtual}\n     */\n    getTree() {\n      return this.__tree;\n    },\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean}\n     *   Whether all columns are editable.\n     *\n     */\n    setEditable(editable) {\n      this.__editableColArr = [];\n\n      for (var col = 0; col < this.getColumnCount(); col++) {\n        this.__editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer}\n     *   The column of which to set the editable state.\n     *\n     * @param editable {Boolean}\n     *   Whether the column should be editable.\n     *\n     */\n    setColumnEditable(columnIndex, editable) {\n      if (editable != this.isColumnEditable(columnIndex)) {\n        if (this.__editableColArr == null) {\n          this.__editableColArr = [];\n        }\n\n        this.__editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable(columnIndex) {\n      if (columnIndex == this._treeColumn) {\n        return this.__tree.getAllowNodeEdit();\n      }\n\n      return this.__editableColArr\n        ? this.__editableColArr[columnIndex] == true\n        : false;\n    },\n\n    // overridden\n    isColumnSortable(columnIndex) {\n      return false;\n    },\n\n    /**\n     * Sorts the model by a column.\n     *\n     * @param columnIndex {Integer} the column to sort by.\n     * @param ascending {Boolean} whether to sort ascending.\n     * @throws {Error} If one tries to sort the tree by column\n     */\n    sortByColumn(columnIndex, ascending) {\n      throw new Error(\"Trees can not be sorted by column\");\n    },\n\n    /**\n     * Returns the column index the model is sorted by. This model is never\n     * sorted, so -1 is returned.\n     *\n     * @return {Integer}\n     *   -1, to indicate that the model is not sorted.\n     */\n    getSortColumnIndex() {\n      return -1;\n    },\n\n    /**\n     * Specifies which column the tree is to be displayed in.  The tree is\n     * displayed using the SimpleTreeDataCellRenderer.  Other columns may be\n     * provided which use different cell renderers.\n     *\n     * Setting the tree column involves more than simply setting this column\n     * index; it also requires setting an appropriate cell renderer for this\n     * column, that knows how to render a tree. The expected and typical\n     * method of setting the tree column is to provide it in the 'custom'\n     * parameter to the TreeVirtual constructor, which also initializes the\n     * proper cell renderers. This method does not set any cell renderers. If\n     * you wish to call this method on your own, you should also manually set\n     * the cell renderer for the specified column, and likely also set the\n     * cell renderer for column 0 (the former tree column) to something\n     * appropriate to your data.\n     *\n     *\n     * @param columnIndex {Integer}\n     *   The index of the column in which the tree should be displayed.\n     *\n     */\n    setTreeColumn(columnIndex) {\n      this._treeColumn = columnIndex;\n    },\n\n    /**\n     * Get the column in which the tree is to be displayed.\n     *\n     * @return {Integer}\n     *   The column in which the tree is to be displayed\n     */\n    getTreeColumn() {\n      return this._treeColumn;\n    },\n\n    // overridden\n    getRowCount() {\n      return this._rowArr.length;\n    },\n\n    // overridden\n    getRowData(rowIndex) {\n      return this._rowArr[rowIndex];\n    },\n\n    /**\n     * Returns a cell value by column index.\n     *\n     * @throws {Error} if the row index is out of bounds.\n     * @param columnIndex {Integer} the index of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @return {var} The value of the cell.\n     * @see #getValueById\n     */\n    getValue(columnIndex, rowIndex) {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\n          \"this._rowArr row \" +\n            \"(\" +\n            rowIndex +\n            \") out of bounds: \" +\n            this._rowArr +\n            \" (0..\" +\n            (this._rowArr.length - 1) +\n            \")\"\n        );\n      }\n\n      if (columnIndex < 0 || columnIndex >= this._rowArr[rowIndex].length) {\n        throw new Error(\n          \"this._rowArr column \" +\n            \"(\" +\n            columnIndex +\n            \") out of bounds: \" +\n            this._rowArr[rowIndex] +\n            \" (0..\" +\n            (this._rowArr[rowIndex].length - 1) +\n            \")\"\n        );\n      }\n\n      return this._rowArr[rowIndex][columnIndex];\n    },\n\n    // overridden\n    setValue(columnIndex, rowIndex, value) {\n      // convert from rowArr to nodeArr, and get the requested node\n      var node = this.getNodeFromRow(rowIndex);\n\n      if (columnIndex === this._treeColumn) {\n        if (!this.__tree.getAllowNodeEdit() || value[\"label\"] === undefined) {\n          return;\n        }\n        // only allow to set the node label via this method, clone the original node\n        var updatedNode = qx.lang.Object.clone(node);\n        updatedNode.label = value.label;\n        this._nodeArr[node.nodeId] = updatedNode;\n      } else {\n        if (node.columnData[columnIndex] == value) {\n          return;\n        }\n        node.columnData[columnIndex] = value;\n        this._rowArr[rowIndex][columnIndex] = value;\n      }\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: rowIndex,\n          lastRow: rowIndex,\n          firstColumn: columnIndex,\n          lastColumn: columnIndex\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Returns the node object specific to a currently visible row. In this\n     * simple tree data model, that's the same as retrieving the value of the\n     * tree column of the specified row.\n     *\n     * @throws {Error}\n     *   Thrown if the row index is out of bounds.\n     *\n     * @param rowIndex {Integer}\n     *   The index of the row.\n     *\n     * @return {Object}\n     *   The node object associated with the specified row.\n     */\n    getNode(rowIndex) {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\n          \"this._rowArr row \" +\n            \"(\" +\n            rowIndex +\n            \") out of bounds: \" +\n            this._rowArr +\n            \" (0..\" +\n            (this._rowArr.length - 1) +\n            \")\"\n        );\n      }\n\n      return this._rowArr[rowIndex][this._treeColumn];\n    },\n\n    /**\n     * Add a branch to the tree.\n     *\n     * @param parentNodeId {Integer}\n     *   The node id of the parent of the node being added\n     *\n     * @param label {String}\n     *   The string to display as the label for this node\n     *\n     * @param bOpened {Boolean}\n     *   <i>True</i> if the branch should be rendered in its opened state;\n     *   <i>false</i> otherwise.\n     *\n     * @param bHideOpenCloseButton {Boolean}\n     *   <i>True</i> if the open/close button should not be displayed;\n     *   <i>false</i> if the open/close button should be displayed\n     *\n     * @param icon {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is not a selected node.\n     *\n     * @param iconSelected {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is a selected node.\n     *\n     * @return {Integer}\n     *   The node id of the newly-added branch.\n     */\n    addBranch(\n      parentNodeId,\n      label,\n      bOpened,\n      bHideOpenCloseButton,\n      icon,\n      iconSelected\n    ) {\n      return qx.ui.treevirtual.MTreePrimitive._addNode(\n        this._nodeArr,\n        parentNodeId,\n        label,\n        bOpened,\n        bHideOpenCloseButton,\n        qx.ui.treevirtual.MTreePrimitive.Type.BRANCH,\n        icon,\n        iconSelected\n      );\n    },\n\n    /**\n     * Add a leaf to the tree.\n     *\n     * @param parentNodeId {Integer}\n     *   The node id of the parent of the node being added\n     *\n     * @param label {String}\n     *   The string to display as the label for this node\n     *\n     * @param icon {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is not a selected node.\n     *\n     * @param iconSelected {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is a selected node.\n     *\n     * @return {Integer} The node id of the newly-added leaf.\n     */\n    addLeaf(parentNodeId, label, icon, iconSelected) {\n      return qx.ui.treevirtual.MTreePrimitive._addNode(\n        this._nodeArr,\n        parentNodeId,\n        label,\n        false,\n        false,\n        qx.ui.treevirtual.MTreePrimitive.Type.LEAF,\n        icon,\n        iconSelected\n      );\n    },\n\n    /**\n     * Prune the tree by removing, recursively, all of a node's children.  If\n     * requested, also remove the node itself.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node to be pruned from the tree.  The node can be represented\n     *   either by the node object, or the node id (as would have been\n     *   returned by addBranch(), addLeaf(), etc.)\n     *\n     * @param bSelfAlso {Boolean}\n     *   If <i>true</i> then remove the node identified by <i>nodeId</i> as\n     *   well as all of the children.\n     *\n     * @throws {Error} If the node object or id is not valid.\n     *\n     */\n    prune(nodeReference, bSelfAlso) {\n      var node;\n      var nodeId;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n        nodeId = node.nodeId;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      // First, recursively remove all children\n      for (var i = this._nodeArr[nodeId].children.length - 1; i >= 0; i--) {\n        this.prune(this._nodeArr[nodeId].children[i], true);\n      }\n\n      // Now remove ourself, if requested. (Don't try to remove the root node)\n      if (bSelfAlso && nodeId != 0) {\n        // Delete ourself from our parent's children list\n        node = this._nodeArr[nodeId];\n        qx.lang.Array.remove(this._nodeArr[node.parentNodeId].children, nodeId);\n\n        // Delete ourself from the selections list, if we're in it.\n        if (this._selections[nodeId]) {\n          delete this._selections[nodeId];\n        }\n\n        // We can't splice the node itself out, because that would muck up the\n        // nodeId == index correspondence.  Instead, just replace the node\n        // with null so its index just becomes unused.\n        this._nodeArr[nodeId] = null;\n      }\n    },\n\n    /**\n     * Move a node in the tree.\n     *\n     * @param moveNodeReference {Object | Integer}\n     *   The node to be moved.  The node can be represented\n     *   either by the node object, or the node id (as would have been\n     *   returned by addBranch(), addLeaf(), etc.)\n     *\n     * @param parentNodeReference {Object | Integer}\n     *   The new parent node, which must not be a LEAF.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @throws {Error} If the node object or id is not valid.\n     * @throws {Error} If one tries to add a child to a non-existent parent.\n     * @throws {Error} If one tries to add a node to a leaf.\n     */\n    move(moveNodeReference, parentNodeReference) {\n      var moveNode;\n      var moveNodeId;\n      var parentNode;\n      var parentNodeId;\n\n      // Replace null parent with node id 0\n      parentNodeReference = parentNodeReference || 0;\n\n      if (typeof moveNodeReference == \"object\") {\n        moveNode = moveNodeReference;\n        moveNodeId = moveNode.nodeId;\n      } else if (typeof moveNodeReference == \"number\") {\n        moveNodeId = moveNodeReference;\n        moveNode = this._nodeArr[moveNodeId];\n      } else {\n        throw new Error(\"Expected move node object or node id\");\n      }\n\n      if (typeof parentNodeReference == \"object\") {\n        parentNode = parentNodeReference;\n        parentNodeId = parentNode.nodeId;\n      } else if (typeof parentNodeReference == \"number\") {\n        parentNodeId = parentNodeReference;\n        parentNode = this._nodeArr[parentNodeId];\n      } else {\n        throw new Error(\"Expected parent node object or node id\");\n      }\n\n      // Ensure parent isn't a leaf\n      if (parentNode.type == qx.ui.treevirtual.MTreePrimitive.Type.LEAF) {\n        throw new Error(\"Sorry, a LEAF may not have children.\");\n      }\n\n      // Remove the node from its current parent's children list\n      var oldParent = this._nodeArr[moveNode.parentNodeId];\n      qx.lang.Array.remove(oldParent.children, moveNodeId);\n\n      // Add the node to its new parent's children list\n      parentNode.children.push(moveNodeId);\n\n      // Replace this node's parent reference\n      this._nodeArr[moveNodeId].parentNodeId = parentNodeId;\n    },\n\n    /**\n     * Orders the node and creates all data needed to render the tree.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     * @param level {Integer} the level in the hierarchy\n     */\n    __inorder(nodeId, level) {\n      var filter = this.getFilter();\n      var child = null;\n      var childNodeId;\n\n      // For each child of the specified node...\n      var numChildren = this._nodeArr[nodeId].children.length;\n      var index = 0;\n      var children = (this.__tempTreeData[nodeId] = []);\n      for (var i = 0; i < numChildren; i++) {\n        // Determine the node id of this child\n        childNodeId = this._nodeArr[nodeId].children[i];\n\n        // Get the child node\n        child = this._nodeArr[childNodeId];\n\n        // Skip deleted nodes or apply the filter\n        if (child == null || (filter && !filter.call(this, child))) {\n          this.__recalculateLastChildFlags = true;\n          continue;\n        }\n\n        // Remember the children so that we can add the lastChild flags later\n        children.push(child);\n\n        // (Re-)assign this node's level\n        child.level = level;\n\n        // Determine if we're the first child of our parent\n        child.bFirstChild = index == 0;\n\n        // Set the last child flag of the node only when no node was skipped.\n        // Otherwise we will have to recalculate the last child flags, as\n        // the parent or sibling node might become the first child.\n        if (!this.__recalculateLastChildFlags) {\n          this.__setLastChildFlag(child, i == numChildren - 1);\n        }\n\n        // Ensure there's an entry in the columnData array for each column\n        if (!child.columnData) {\n          child.columnData = [];\n        }\n\n        if (child.columnData.length < this.getColumnCount()) {\n          child.columnData[this.getColumnCount() - 1] = null;\n        }\n\n        // Add this node to the row array.  Initialize a row data array.\n        var rowData = [];\n\n        // If additional column data is provided...\n        if (child.columnData) {\n          // ... then add each column data.\n          for (var j = 0; j < child.columnData.length; j++) {\n            // Is this the tree column?\n            if (j == this._treeColumn) {\n              // Yup.  Add the tree node data\n              rowData.push(child);\n            } else {\n              // Otherwise, add the column data verbatim.\n              rowData.push(child.columnData[j]);\n            }\n          }\n        } else {\n          // No column data.  Just add the tree node.\n          rowData.push(child);\n        }\n\n        // Track the _rowArr index for each node so we can handle\n        // selections.\n        this._nodeRowMap[child.nodeId] = this._rowArr.length;\n\n        // Add the row data to the row array\n        this._rowArr.push(rowData);\n\n        // If this node is selected, ...\n        if (child.bSelected) {\n          // ... indicate so for the row.\n          rowData.selected = true;\n          this._selections[child.nodeId] = true;\n        }\n\n        // If this child is opened, ...\n        if (child.bOpened) {\n          // ... then add its children too.\n          this.__inorder(childNodeId, level + 1);\n        }\n        index++;\n      }\n    },\n\n    /**\n     * Calculates the lastChild flags to the nodes, so that the tree can render the\n     * tree lines right.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     */\n    __calculateLastChildFlags(nodeId) {\n      var tempTreeData = this.__tempTreeData;\n      var children = tempTreeData[nodeId];\n      var numChildren = children.length;\n      for (var i = 0; i < numChildren; i++) {\n        var child = children[i];\n\n        this.__setLastChildFlag(child, i == numChildren - 1);\n\n        var hasChildren =\n          tempTreeData[child.nodeId] && tempTreeData[child.nodeId].length > 0;\n        if (hasChildren) {\n          this.__calculateLastChildFlags(child.nodeId);\n        }\n      }\n    },\n\n    /**\n     * Sets the last child flag for a node and all it's parents.\n     *\n     * @param node {Object} the node object\n     * @param isLastChild {Boolean} whether the node is the last child\n     */\n    __setLastChildFlag(node, isLastChild) {\n      // Determine if we're the last child of our parent\n      node.lastChild = [isLastChild];\n\n      // Get our parent.\n      var parent = this._nodeArr[node.parentNodeId];\n\n      // For each parent node, determine if it is a last child\n      while (parent.nodeId) {\n        var bLast = parent.lastChild[parent.lastChild.length - 1];\n        node.lastChild.unshift(bLast);\n        parent = this._nodeArr[parent.parentNodeId];\n      }\n    },\n\n    /**\n     * Renders the tree data.\n     */\n    __render() {\n      // Reset the __tempTreeData\n      this.__tempTreeData = [];\n      this.__recalculateLastChildFlags = false;\n\n      // Reset the row array\n      this._rowArr = [];\n\n      // Reset the _nodeArr -> _rowArr map\n      this._nodeRowMap = [];\n\n      // Reset the set of selections\n      this._selections = {};\n\n      // Begin in-order traversal of the tree from the root to regenerate\n      // _rowArr.\n      this.__inorder(0, 1);\n\n      // Reset the lastChild flags when needed, so that the tree can render the\n      // tree lines right.\n      if (this.__recalculateLastChildFlags) {\n        this.__calculateLastChildFlags(0);\n      }\n\n      // Give the memory free\n      this.__tempTreeData = null;\n\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: this._rowArr.length - 1,\n          firstColumn: 0,\n          lastColumn: this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Sets the whole data en bulk, or notifies the data model that node\n     * modifications are complete.\n     *\n     * @param nodeArr {Array?null}\n     *   Pass either an Array of node objects, or null.\n     *\n     *   If non-null, nodeArr is an array of node objects containing the\n     *   entire tree to be displayed.  If loading the whole data en bulk in\n     *   this way, it is assumed that the data is correct!  No error checking\n     *   or validation is done.  You'd better know what you're doing!  Caveat\n     *   emptor.\n     *\n     *\n     *   If nodeArr is null, then this call is a notification that the user\n     *   has completed building or modifying a tree by issuing a series of\n     *   calls to {@link #addBranch} and/or {@link #addLeaf}.\n     *\n     *\n     * @throws {Error} If the parameter has the wrong type.\n     */\n    setData(nodeArr) {\n      this._checkEditing();\n      if (nodeArr instanceof Array) {\n        // Save the user-supplied data.\n        this._nodeArr = nodeArr;\n      } else if (nodeArr !== null && nodeArr !== undefined) {\n        throw new Error(\n          \"Expected array of node objects or null/undefined; \" +\n            \"got \" +\n            typeof nodeArr\n        );\n      }\n\n      // Re-render the row array\n      this.__render();\n\n      // Set selections in the selection model now\n      var selectionModel = this.getTree().getSelectionModel();\n      var selections = this._selections;\n      for (var nodeId in selections) {\n        var nRowIndex = this.getRowFromNodeId(nodeId);\n        selectionModel.setSelectionInterval(nRowIndex, nRowIndex);\n      }\n    },\n\n    /**\n     * Return the array of node data.\n     *\n     * @return {Array}\n     *  Array of node objects.\n     *  See {@link qx.ui.treevirtual.SimpleTreeDataModel} for a description\n     *  nodes in this array.\n     */\n    getData() {\n      return this._nodeArr;\n    },\n\n    /**\n     * Clears the tree of all nodes\n     *\n     */\n    clearData() {\n      this._checkEditing();\n      this._clearSelections();\n      this.setData([qx.ui.treevirtual.MTreePrimitive._getEmptyTree()]);\n    },\n\n    /**\n     * Add data to an additional column (a column other than the tree column)\n     * of the tree.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     *\n     * @param columnIndex {Integer}\n     *   The column number to which the provided data applies\n     *\n     * @param data {var}\n     *   The cell data for the specified column\n     *\n     */\n    setColumnData(nodeId, columnIndex, data) {\n      this._nodeArr[nodeId].columnData[columnIndex] = data;\n    },\n\n    /**\n     * Retrieve the data from an additional column (a column other than the\n     * tree column) of the tree.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     *\n     * @param columnIndex {Integer}\n     *   The column number to which the provided data applies\n     *\n     * @return {var} The cell data for the specified column\n     */\n    getColumnData(nodeId, columnIndex) {\n      return this._nodeArr[nodeId].columnData[columnIndex];\n    },\n\n    /**\n     * Set state attributes of a node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node to have its attributes set.  The node can be represented\n     *   either by the node object, or the node id (as would have been\n     *   returned by addBranch(), addLeaf(), etc.)\n     *\n     * @param attributes {Map}\n     *   Each property name in the map may correspond to the property names of\n     *   a node which are specified as <i>USER-PROVIDED ATTRIBUTES</i> in\n     *   {@link SimpleTreeDataModel}.  Each property value will be assigned\n     *   to the corresponding property of the node specified by nodeId.\n     *\n     * @param suppressRedraw {Boolean}\n     *    If true then prevents redraw; it becomes the caller's responsibility to\n     *    call setData() subsequently, to cause a redraw.\n     *\n     * @throws {Error} If the node object or id is not valid.\n     */\n    setState(nodeReference, attributes, suppressRedraw) {\n      var node;\n      var nodeId;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n        nodeId = node.nodeId;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n        node = this._nodeArr[nodeId];\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      for (var attribute in attributes) {\n        // Do any attribute-specific processing\n        switch (attribute) {\n          case \"bSelected\":\n            var nRowIndex = this.getRowFromNodeId(nodeId);\n            var selectionModel = this.getTree().getSelectionModel();\n            var TV = qx.ui.treevirtual.TreeVirtual;\n            var bChangeSelection =\n              typeof nRowIndex === \"number\" &&\n              this.getTree().getSelectionMode() != TV.SelectionMode.NONE;\n\n            // The selected state is changing. Keep track of what is selected\n            if (attributes[attribute]) {\n              this._selections[nodeId] = true;\n\n              // Add selection range for node\n              if (\n                bChangeSelection &&\n                !selectionModel.isSelectedIndex(nRowIndex)\n              ) {\n                selectionModel.setSelectionInterval(nRowIndex, nRowIndex);\n              }\n            } else {\n              delete this._selections[nodeId];\n\n              // Delete selection range for node\n              if (\n                bChangeSelection &&\n                selectionModel.isSelectedIndex(nRowIndex)\n              ) {\n                selectionModel.removeSelectionInterval(nRowIndex, nRowIndex);\n              }\n            }\n            break;\n\n          case \"bOpened\":\n            // Don't do anything if this is a leaf, leaf has no opened/closed\n            if (node.type === qx.ui.treevirtual.MTreePrimitive.Type.LEAF) {\n              break;\n            }\n\n            // Don't do anything if the requested state is the same as the\n            // current state.\n            if (attributes[attribute] == node.bOpened) {\n              break;\n            }\n\n            // Get the tree to which this data model is attached\n            var tree = this.__tree;\n\n            // Are we opening or closing?\n            if (node.bOpened) {\n              // We're closing.  If there are listeners, generate a treeClose\n              // event.\n              tree.fireDataEvent(\"treeClose\", node);\n            } else {\n              // We're opening.  Are there any children?\n              if (node.children.length > 0) {\n                // Yup.  If there any listeners, generate a \"treeOpenWithContent\"\n                // event.\n                tree.fireDataEvent(\"treeOpenWithContent\", node);\n              } else {\n                // No children.  If there are listeners, generate a\n                // \"treeOpenWhileEmpty\" event.\n                tree.fireDataEvent(\"treeOpenWhileEmpty\", node);\n              }\n            }\n\n            // Event handler may have modified the opened state.  Check before\n            // toggling.\n            if (!node.bHideOpenClose) {\n              // It's still boolean.  Toggle the state\n              node.bOpened = !node.bOpened;\n\n              // Clear the old selections in the tree\n              tree.getSelectionModel()._resetSelection();\n            }\n\n            // Re-render the row data since formerly visible rows may now be\n            // invisible, or vice versa.\n            if (!suppressRedraw) {\n              this.setData();\n            }\n            break;\n\n          default:\n            // no attribute-specific processing required\n            break;\n        }\n\n        // Set the new attribute value\n        node[attribute] = attributes[attribute];\n      }\n    },\n\n    /**\n     * Return the mapping of nodes to rendered rows.  This function is intended\n     * for use by the cell renderer, not by users of this class.\n     * It is also useful to select a node.\n     *\n     * @return {Array}\n     *   The array containing mappings of nodes to rendered rows.\n     */\n    getNodeRowMap() {\n      return this._nodeRowMap;\n    },\n\n    /**\n     * This operation maps nodes to rowIndexes.  It does the opposite job to {@link #getNodeFromRow}.\n     *\n     * @param nodeId {Integer}\n     *   The id of the node (as would have been returned by addBranch(),\n     *   addLeaf(), etc.) to get the row index for.\n     * @return {Integer} row index for the given node ID\n     */\n    getRowFromNodeId(nodeId) {\n      return this._nodeRowMap[nodeId];\n    },\n\n    /**\n     * This operation maps rowIndexes to nodes.  It does the opposite job to {@link #getRowFromNodeId}.\n     * This function is useful to map selection (row based) to nodes.\n     *\n     * @param rowIndex {Integer} zero-based row index.\n     * @return {Object} node associated to <tt>rowIndex</tt>.\n     */\n    getNodeFromRow(rowIndex) {\n      return this._nodeArr[this._rowArr[rowIndex][this._treeColumn].nodeId];\n    },\n\n    /**\n     * Clear all selections in the data model.  This method does not clear\n     * selections displayed in the widget, and is intended for internal use,\n     * not by users of this class.\n     *\n     */\n    _clearSelections() {\n      // Clear selected state for any selected nodes.\n      for (var selection in this._selections) {\n        this._nodeArr[selection].bSelected = false;\n      }\n\n      // Reinitialize selections array.\n      this._selections = {};\n    },\n\n    /**\n     * Return the nodes that are currently selected.\n     *\n     * @return {Array}\n     *   An array containing the nodes that are currently selected.\n     */\n    getSelectedNodes() {\n      var nodes = [];\n\n      for (var nodeId in this._selections) {\n        nodes.push(this._nodeArr[nodeId]);\n      }\n\n      return nodes;\n    },\n\n    // property apply\n    _applyFilter(value, old) {\n      this.setData();\n    },\n\n    /**\n     * This checks whether a node label is editable\n     * Used in the NodeEditor to check if edit is permitted\n     *\n     * @param rowIndex {Integer} zero-based row index.\n     * @return {Boolean} If the node has edit permitted\n     */\n    isNodeEditable(rowIndex) {\n      return (\n        this.__tree.getAllowNodeEdit() && this.getNodeFromRow(rowIndex).bCanEdit\n      );\n    }\n  },\n\n  destruct() {\n    this._rowArr =\n      this._nodeArr =\n      this._nodeRowMap =\n      this._selections =\n      this.__tree =\n      this.__tempTreeData =\n        null;\n  },\n\n  defer(statics) {\n    // For backward compatibility, ensure the Type values are available from\n    // this class as well as from the mixin.\n    statics.Type = qx.ui.treevirtual.MTreePrimitive.Type;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,uCAAhB,EAAyD;IACvDC,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,KAAN,CAAYC,KAAZ,CAAkBC,QAD6B;IAGvDC,OAAO,EAAEX,EAAE,CAACO,EAAH,CAAMK,WAAN,CAAkBC,cAH4B;;IAKvD;AACF;AACA;AACA;AACA;IAEEC,SAXuD,uBAW3C;MACV;MAEA,KAAKC,OAAL,GAAe,EAAf,CAHU,CAGS;;MACnB,KAAKC,QAAL,GAAgB,EAAhB,CAJU,CAIU;;MAEpB,KAAKC,WAAL,GAAmB,EAAnB,CANU,CAMa;MACvB;MACA;MACA;;MAEA,KAAKC,WAAL,GAAmB,CAAnB,CAXU,CAWY;;MAEtB,KAAKC,WAAL,GAAmB,EAAnB,CAbU,CAaa;MAEvB;;MACA,KAAKH,QAAL,CAAcI,IAAd,CAAmBpB,EAAE,CAACO,EAAH,CAAMK,WAAN,CAAkBC,cAAlB,CAAiCQ,aAAjC,EAAnB,EAhBU,CAkBV;;;MACA,KAAKC,SAAL,GAAwB,IAAxB;IACD,CA/BsD;IAiCvDC,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE;QACNC,KAAK,EAAE,UADD;QAENC,QAAQ,E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"
}