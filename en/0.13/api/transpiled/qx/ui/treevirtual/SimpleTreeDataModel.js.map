{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "include",
    "treevirtual",
    "MTreePrimitive",
    "construct",
    "constructor",
    "call",
    "_rowArr",
    "_nodeArr",
    "_nodeRowMap",
    "_treeColumn",
    "_selections",
    "push",
    "_getEmptyTree",
    "__editableColArr",
    "properties",
    "filter",
    "check",
    "nullable",
    "apply",
    "members",
    "__tree",
    "__tempTreeData",
    "__recalculateLastChildFlags",
    "setTree",
    "tree",
    "getTree",
    "setEditable",
    "editable",
    "col",
    "getColumnCount",
    "fireEvent",
    "setColumnEditable",
    "columnIndex",
    "isColumnEditable",
    "getAllowNodeEdit",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "Error",
    "getSortColumnIndex",
    "setTreeColumn",
    "getTreeColumn",
    "getRowCount",
    "length",
    "getRowData",
    "rowIndex",
    "getValue",
    "setValue",
    "value",
    "node",
    "getNodeFromRow",
    "undefined",
    "updatedNode",
    "lang",
    "Object",
    "clone",
    "label",
    "nodeId",
    "columnData",
    "hasListener",
    "data",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "fireDataEvent",
    "getNode",
    "addBranch",
    "parentNodeId",
    "bOpened",
    "bHideOpenCloseButton",
    "icon",
    "iconSelected",
    "_addNode",
    "Type",
    "BRANCH",
    "addLeaf",
    "LEAF",
    "prune",
    "nodeReference",
    "bSelfAlso",
    "_typeof",
    "i",
    "children",
    "Array",
    "remove",
    "move",
    "moveNodeReference",
    "parentNodeReference",
    "moveNode",
    "moveNodeId",
    "parentNode",
    "type",
    "oldParent",
    "__inorder",
    "level",
    "getFilter",
    "child",
    "childNodeId",
    "numChildren",
    "index",
    "bFirstChild",
    "__setLastChildFlag",
    "rowData",
    "j",
    "bSelected",
    "selected",
    "__calculateLastChildFlags",
    "tempTreeData",
    "hasChildren",
    "isLastChild",
    "lastChild",
    "parent",
    "bLast",
    "unshift",
    "__render",
    "setData",
    "nodeArr",
    "bRerender",
    "arguments",
    "_checkEditing",
    "selectionModel",
    "getSelectionModel",
    "selections",
    "setBatchMode",
    "resetSelection",
    "nRowIndex",
    "getRowFromNodeId",
    "addSelectionInterval",
    "getData",
    "clearData",
    "_clearSelections",
    "setColumnData",
    "getColumnData",
    "setState",
    "attributes",
    "suppressRedraw",
    "attribute",
    "TV",
    "TreeVirtual",
    "bChangeSelection",
    "getSelectionMode",
    "SelectionMode",
    "NONE",
    "isSelectedIndex",
    "setSelectionInterval",
    "removeSelectionInterval",
    "bHideOpenClose",
    "_resetSelection",
    "getNodeRowMap",
    "selection",
    "getSelectedNodes",
    "nodes",
    "_applyFilter",
    "old",
    "isNodeEditable",
    "bCanEdit",
    "destruct",
    "defer",
    "statics",
    "SimpleTreeDataModel"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/SimpleTreeDataModel.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2010 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A simple tree data model used as the table model\n *\n * The object structure of a single node of the tree is:\n *\n * <pre class='javascript'>\n * {\n *   // USER-PROVIDED ATTRIBUTES\n *   // ------------------------\n *   type           : qx.ui.treevirtual.MTreePrimitive.Type.LEAF,\n *   parentNodeId   : 23,    // index of the parent node in _nodeArr\n *\n *   label          : \"My Documents\",\n *   bSelected      : true,  // true if node is selected; false otherwise.\n *   bOpened        : true,  // true (-), false (+)\n *   bHideOpenClose : false, // whether to hide the open/close button\n *   bCanEdit       : true,  // true if the node label can be edited, false to prevent edit\n *   icon           : \"images/folder.gif\",\n *   iconSelected   : \"images/folder_selected.gif\",\n *\n *   cellStyle      : \"background-color:cyan\"\n *   labelStyle     : \"background-color:red;color:white\"\n *\n *   // USER-PROVIDED COLUMN DATA\n *   columnData     : [\n *                      null, // null at index of tree column (typically 0)\n *                      \"text of column 1\",\n *                      \"text of column 2\"\n *                    ],\n *\n *   // APPLICATION-, MIXIN-, and SUBCLASS-PROVIDED CUSTOM DATA\n *   data           : {\n *                      application :\n *                      {\n *                          // application-specific user data goes in here\n *                          foo: \"bar\",\n *                          ...\n *                      },\n *                      MDragAndDropSupport :\n *                      {\n *                          // Data required for the Drag & Drop mixin.\n *                          // When a mixin is included, its constructor\n *                          // should create this object, named according\n *                          // to the mixin or subclass name (empty or\n *                          // otherwise)\n *                      },\n *                      ... // Additional mixins or subclasses.\n *                    },\n *\n *   // INTERNALLY-CALCULATED ATTRIBUTES\n *   // --------------------------------\n *   // The following properties need not (and should not) be set by the\n *   // caller, but are automatically calculated.  Some are used internally,\n *   // while others may be of use to event listeners.\n *\n *   nodeId         : 42,   // The index in _nodeArr, useful to event listeners.\n *   children       : [ ],  // each value is an index into _nodeArr\n *\n *   level          : 2,    // The indentation level of this tree node\n *   labelPos       : 40,   // The left position of the label text - stored when the cell is rendered\n *\n *   bFirstChild    : true,\n *   lastChild      : [ false ],  // Array where the index is the column of\n *                                // indentation, and the value is a boolean.\n *                                // These are used to locate the\n *                                // appropriate \"tree line\" icon.\n * }\n * </pre>\n */\nqx.Class.define(\"qx.ui.treevirtual.SimpleTreeDataModel\", {\n  extend: qx.ui.table.model.Abstract,\n\n  include: qx.ui.treevirtual.MTreePrimitive,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this._rowArr = []; // rows, resorted into tree order as necessary\n    this._nodeArr = []; // tree nodes, organized with hierarchy\n\n    this._nodeRowMap = []; // map nodeArr index to rowArr index.  The\n    // index of this array is the index of\n    // _nodeArr, and the values in this array are\n    // the indexes into _rowArr.\n\n    this._treeColumn = 0; // default column for tree nodes\n\n    this._selections = {}; // list of indexes of selected nodes\n\n    // the root node, needed to store its children\n    this._nodeArr.push(qx.ui.treevirtual.MTreePrimitive._getEmptyTree());\n\n    // Track which columns are editable\n    this.__editableColArr = null;\n  },\n\n  properties: {\n    /**\n     * Gives the user the opportunity to filter the model. The filter\n     * function is called for every node in the model. It gets as an argument the\n     * <code>node</code> object and has to return\n     * <code>true</code> if the given data should be shown and\n     * <code>false</code> if the given data should be ignored.\n     */\n    filter: {\n      check: \"Function\",\n      nullable: true,\n      apply: \"_applyFilter\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __tree: null,\n    __editableColArr: null,\n    __tempTreeData: null,\n    __recalculateLastChildFlags: null,\n\n    /** Rows, resorted into tree order as necessary */\n    _rowArr: null,\n\n    /** Tree nodes, organized with hierarchy */\n    _nodeArr: null,\n\n    /**\n     * Map nodeArr index to rowArr index.  The index of this array is the\n     * index of _nodeArr, and the values in this array are the indexes into\n     * _rowArr.\n     */\n    _nodeRowMap: null,\n\n    /** Column for tree nodes */\n    _treeColumn: null,\n\n    /** list of indexes of selected nodes */\n    _selections: null,\n\n    /**\n     * Set the tree object for which this data model is used.\n     *\n     * @param tree {qx.ui.treevirtual.TreeVirtual}\n     *    The tree used to render the data in this model.\n     *\n     */\n    setTree(tree) {\n      this.__tree = tree;\n    },\n\n    /**\n     * Get the tree object for which this data model is used.\n     *\n     * @return {qx.ui.treevirtual.TreeVirtual}\n     */\n    getTree() {\n      return this.__tree;\n    },\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean}\n     *   Whether all columns are editable.\n     *\n     */\n    setEditable(editable) {\n      this.__editableColArr = [];\n\n      for (var col = 0; col < this.getColumnCount(); col++) {\n        this.__editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer}\n     *   The column of which to set the editable state.\n     *\n     * @param editable {Boolean}\n     *   Whether the column should be editable.\n     *\n     */\n    setColumnEditable(columnIndex, editable) {\n      if (editable != this.isColumnEditable(columnIndex)) {\n        if (this.__editableColArr == null) {\n          this.__editableColArr = [];\n        }\n\n        this.__editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable(columnIndex) {\n      if (columnIndex == this._treeColumn) {\n        return this.__tree.getAllowNodeEdit();\n      }\n\n      return this.__editableColArr\n        ? this.__editableColArr[columnIndex] == true\n        : false;\n    },\n\n    // overridden\n    isColumnSortable(columnIndex) {\n      return false;\n    },\n\n    /**\n     * Sorts the model by a column.\n     *\n     * @param columnIndex {Integer} the column to sort by.\n     * @param ascending {Boolean} whether to sort ascending.\n     * @throws {Error} If one tries to sort the tree by column\n     */\n    sortByColumn(columnIndex, ascending) {\n      throw new Error(\"Trees can not be sorted by column\");\n    },\n\n    /**\n     * Returns the column index the model is sorted by. This model is never\n     * sorted, so -1 is returned.\n     *\n     * @return {Integer}\n     *   -1, to indicate that the model is not sorted.\n     */\n    getSortColumnIndex() {\n      return -1;\n    },\n\n    /**\n     * Specifies which column the tree is to be displayed in.  The tree is\n     * displayed using the SimpleTreeDataCellRenderer.  Other columns may be\n     * provided which use different cell renderers.\n     *\n     * Setting the tree column involves more than simply setting this column\n     * index; it also requires setting an appropriate cell renderer for this\n     * column, that knows how to render a tree. The expected and typical\n     * method of setting the tree column is to provide it in the 'custom'\n     * parameter to the TreeVirtual constructor, which also initializes the\n     * proper cell renderers. This method does not set any cell renderers. If\n     * you wish to call this method on your own, you should also manually set\n     * the cell renderer for the specified column, and likely also set the\n     * cell renderer for column 0 (the former tree column) to something\n     * appropriate to your data.\n     *\n     *\n     * @param columnIndex {Integer}\n     *   The index of the column in which the tree should be displayed.\n     *\n     */\n    setTreeColumn(columnIndex) {\n      this._treeColumn = columnIndex;\n    },\n\n    /**\n     * Get the column in which the tree is to be displayed.\n     *\n     * @return {Integer}\n     *   The column in which the tree is to be displayed\n     */\n    getTreeColumn() {\n      return this._treeColumn;\n    },\n\n    // overridden\n    getRowCount() {\n      return this._rowArr.length;\n    },\n\n    // overridden\n    getRowData(rowIndex) {\n      return this._rowArr[rowIndex];\n    },\n\n    /**\n     * Returns a cell value by column index.\n     *\n     * @throws {Error} if the row index is out of bounds.\n     * @param columnIndex {Integer} the index of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @return {var} The value of the cell.\n     * @see #getValueById\n     */\n    getValue(columnIndex, rowIndex) {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\n          \"this._rowArr row \" +\n            \"(\" +\n            rowIndex +\n            \") out of bounds: \" +\n            this._rowArr +\n            \" (0..\" +\n            (this._rowArr.length - 1) +\n            \")\"\n        );\n      }\n\n      if (columnIndex < 0 || columnIndex >= this._rowArr[rowIndex].length) {\n        throw new Error(\n          \"this._rowArr column \" +\n            \"(\" +\n            columnIndex +\n            \") out of bounds: \" +\n            this._rowArr[rowIndex] +\n            \" (0..\" +\n            (this._rowArr[rowIndex].length - 1) +\n            \")\"\n        );\n      }\n\n      return this._rowArr[rowIndex][columnIndex];\n    },\n\n    // overridden\n    setValue(columnIndex, rowIndex, value) {\n      // convert from rowArr to nodeArr, and get the requested node\n      var node = this.getNodeFromRow(rowIndex);\n\n      if (columnIndex === this._treeColumn) {\n        if (!this.__tree.getAllowNodeEdit() || value[\"label\"] === undefined) {\n          return;\n        }\n        // only allow to set the node label via this method, clone the original node\n        var updatedNode = qx.lang.Object.clone(node);\n        updatedNode.label = value.label;\n        this._nodeArr[node.nodeId] = updatedNode;\n      } else {\n        if (node.columnData[columnIndex] == value) {\n          return;\n        }\n        node.columnData[columnIndex] = value;\n        this._rowArr[rowIndex][columnIndex] = value;\n      }\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: rowIndex,\n          lastRow: rowIndex,\n          firstColumn: columnIndex,\n          lastColumn: columnIndex\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Returns the node object specific to a currently visible row. In this\n     * simple tree data model, that's the same as retrieving the value of the\n     * tree column of the specified row.\n     *\n     * @throws {Error}\n     *   Thrown if the row index is out of bounds.\n     *\n     * @param rowIndex {Integer}\n     *   The index of the row.\n     *\n     * @return {Object}\n     *   The node object associated with the specified row.\n     */\n    getNode(rowIndex) {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\n          \"this._rowArr row \" +\n            \"(\" +\n            rowIndex +\n            \") out of bounds: \" +\n            this._rowArr +\n            \" (0..\" +\n            (this._rowArr.length - 1) +\n            \")\"\n        );\n      }\n\n      return this._rowArr[rowIndex][this._treeColumn];\n    },\n\n    /**\n     * Add a branch to the tree.\n     *\n     * @param parentNodeId {Integer}\n     *   The node id of the parent of the node being added\n     *\n     * @param label {String}\n     *   The string to display as the label for this node\n     *\n     * @param bOpened {Boolean}\n     *   <i>True</i> if the branch should be rendered in its opened state;\n     *   <i>false</i> otherwise.\n     *\n     * @param bHideOpenCloseButton {Boolean}\n     *   <i>True</i> if the open/close button should not be displayed;\n     *   <i>false</i> if the open/close button should be displayed\n     *\n     * @param icon {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is not a selected node.\n     *\n     * @param iconSelected {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is a selected node.\n     *\n     * @return {Integer}\n     *   The node id of the newly-added branch.\n     */\n    addBranch(\n      parentNodeId,\n      label,\n      bOpened,\n      bHideOpenCloseButton,\n      icon,\n      iconSelected\n    ) {\n      return qx.ui.treevirtual.MTreePrimitive._addNode(\n        this._nodeArr,\n        parentNodeId,\n        label,\n        bOpened,\n        bHideOpenCloseButton,\n        qx.ui.treevirtual.MTreePrimitive.Type.BRANCH,\n        icon,\n        iconSelected\n      );\n    },\n\n    /**\n     * Add a leaf to the tree.\n     *\n     * @param parentNodeId {Integer}\n     *   The node id of the parent of the node being added\n     *\n     * @param label {String}\n     *   The string to display as the label for this node\n     *\n     * @param icon {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is not a selected node.\n     *\n     * @param iconSelected {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is a selected node.\n     *\n     * @return {Integer} The node id of the newly-added leaf.\n     */\n    addLeaf(parentNodeId, label, icon, iconSelected) {\n      return qx.ui.treevirtual.MTreePrimitive._addNode(\n        this._nodeArr,\n        parentNodeId,\n        label,\n        false,\n        false,\n        qx.ui.treevirtual.MTreePrimitive.Type.LEAF,\n        icon,\n        iconSelected\n      );\n    },\n\n    /**\n     * Prune the tree by removing, recursively, all of a node's children.  If\n     * requested, also remove the node itself.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node to be pruned from the tree.  The node can be represented\n     *   either by the node object, or the node id (as would have been\n     *   returned by addBranch(), addLeaf(), etc.)\n     *\n     * @param bSelfAlso {Boolean}\n     *   If <i>true</i> then remove the node identified by <i>nodeId</i> as\n     *   well as all of the children.\n     *\n     * @throws {Error} If the node object or id is not valid.\n     *\n     */\n    prune(nodeReference, bSelfAlso) {\n      var node;\n      var nodeId;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n        nodeId = node.nodeId;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      // First, recursively remove all children\n      for (var i = this._nodeArr[nodeId].children.length - 1; i >= 0; i--) {\n        this.prune(this._nodeArr[nodeId].children[i], true);\n      }\n\n      // Now remove ourself, if requested. (Don't try to remove the root node)\n      if (bSelfAlso && nodeId != 0) {\n        // Delete ourself from our parent's children list\n        node = this._nodeArr[nodeId];\n        qx.lang.Array.remove(this._nodeArr[node.parentNodeId].children, nodeId);\n\n        // Delete ourself from the selections list, if we're in it.\n        if (this._selections[nodeId]) {\n          delete this._selections[nodeId];\n        }\n\n        // We can't splice the node itself out, because that would muck up the\n        // nodeId == index correspondence.  Instead, just replace the node\n        // with null so its index just becomes unused.\n        this._nodeArr[nodeId] = null;\n      }\n    },\n\n    /**\n     * Move a node in the tree.\n     *\n     * @param moveNodeReference {Object | Integer}\n     *   The node to be moved.  The node can be represented\n     *   either by the node object, or the node id (as would have been\n     *   returned by addBranch(), addLeaf(), etc.)\n     *\n     * @param parentNodeReference {Object | Integer}\n     *   The new parent node, which must not be a LEAF.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @throws {Error} If the node object or id is not valid.\n     * @throws {Error} If one tries to add a child to a non-existent parent.\n     * @throws {Error} If one tries to add a node to a leaf.\n     */\n    move(moveNodeReference, parentNodeReference) {\n      var moveNode;\n      var moveNodeId;\n      var parentNode;\n      var parentNodeId;\n\n      // Replace null parent with node id 0\n      parentNodeReference = parentNodeReference || 0;\n\n      if (typeof moveNodeReference == \"object\") {\n        moveNode = moveNodeReference;\n        moveNodeId = moveNode.nodeId;\n      } else if (typeof moveNodeReference == \"number\") {\n        moveNodeId = moveNodeReference;\n        moveNode = this._nodeArr[moveNodeId];\n      } else {\n        throw new Error(\"Expected move node object or node id\");\n      }\n\n      if (typeof parentNodeReference == \"object\") {\n        parentNode = parentNodeReference;\n        parentNodeId = parentNode.nodeId;\n      } else if (typeof parentNodeReference == \"number\") {\n        parentNodeId = parentNodeReference;\n        parentNode = this._nodeArr[parentNodeId];\n      } else {\n        throw new Error(\"Expected parent node object or node id\");\n      }\n\n      // Ensure parent isn't a leaf\n      if (parentNode.type == qx.ui.treevirtual.MTreePrimitive.Type.LEAF) {\n        throw new Error(\"Sorry, a LEAF may not have children.\");\n      }\n\n      // Remove the node from its current parent's children list\n      var oldParent = this._nodeArr[moveNode.parentNodeId];\n      qx.lang.Array.remove(oldParent.children, moveNodeId);\n\n      // Add the node to its new parent's children list\n      parentNode.children.push(moveNodeId);\n\n      // Replace this node's parent reference\n      this._nodeArr[moveNodeId].parentNodeId = parentNodeId;\n    },\n\n    /**\n     * Orders the node and creates all data needed to render the tree.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     * @param level {Integer} the level in the hierarchy\n     */\n    __inorder(nodeId, level) {\n      var filter = this.getFilter();\n      var child = null;\n      var childNodeId;\n\n      // For each child of the specified node...\n      var numChildren = this._nodeArr[nodeId].children.length;\n      var index = 0;\n      var children = (this.__tempTreeData[nodeId] = []);\n      for (var i = 0; i < numChildren; i++) {\n        // Determine the node id of this child\n        childNodeId = this._nodeArr[nodeId].children[i];\n\n        // Get the child node\n        child = this._nodeArr[childNodeId];\n\n        // Skip deleted nodes or apply the filter\n        if (child == null || (filter && !filter.call(this, child))) {\n          this.__recalculateLastChildFlags = true;\n          continue;\n        }\n\n        // Remember the children so that we can add the lastChild flags later\n        children.push(child);\n\n        // (Re-)assign this node's level\n        child.level = level;\n\n        // Determine if we're the first child of our parent\n        child.bFirstChild = index == 0;\n\n        // Set the last child flag of the node only when no node was skipped.\n        // Otherwise we will have to recalculate the last child flags, as\n        // the parent or sibling node might become the first child.\n        if (!this.__recalculateLastChildFlags) {\n          this.__setLastChildFlag(child, i == numChildren - 1);\n        }\n\n        // Ensure there's an entry in the columnData array for each column\n        if (!child.columnData) {\n          child.columnData = [];\n        }\n\n        if (child.columnData.length < this.getColumnCount()) {\n          child.columnData[this.getColumnCount() - 1] = null;\n        }\n\n        // Add this node to the row array.  Initialize a row data array.\n        var rowData = [];\n\n        // If additional column data is provided...\n        if (child.columnData) {\n          // ... then add each column data.\n          for (var j = 0; j < child.columnData.length; j++) {\n            // Is this the tree column?\n            if (j == this._treeColumn) {\n              // Yup.  Add the tree node data\n              rowData.push(child);\n            } else {\n              // Otherwise, add the column data verbatim.\n              rowData.push(child.columnData[j]);\n            }\n          }\n        } else {\n          // No column data.  Just add the tree node.\n          rowData.push(child);\n        }\n\n        // Track the _rowArr index for each node so we can handle\n        // selections.\n        this._nodeRowMap[child.nodeId] = this._rowArr.length;\n\n        // Add the row data to the row array\n        this._rowArr.push(rowData);\n\n        // If this node is selected, ...\n        if (child.bSelected) {\n          // ... indicate so for the row.\n          rowData.selected = true;\n          this._selections[child.nodeId] = true;\n        }\n\n        // If this child is opened, ...\n        if (child.bOpened) {\n          // ... then add its children too.\n          this.__inorder(childNodeId, level + 1);\n        }\n        index++;\n      }\n    },\n\n    /**\n     * Calculates the lastChild flags to the nodes, so that the tree can render the\n     * tree lines right.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     */\n    __calculateLastChildFlags(nodeId) {\n      var tempTreeData = this.__tempTreeData;\n      var children = tempTreeData[nodeId];\n      var numChildren = children.length;\n      for (var i = 0; i < numChildren; i++) {\n        var child = children[i];\n\n        this.__setLastChildFlag(child, i == numChildren - 1);\n\n        var hasChildren =\n          tempTreeData[child.nodeId] && tempTreeData[child.nodeId].length > 0;\n        if (hasChildren) {\n          this.__calculateLastChildFlags(child.nodeId);\n        }\n      }\n    },\n\n    /**\n     * Sets the last child flag for a node and all it's parents.\n     *\n     * @param node {Object} the node object\n     * @param isLastChild {Boolean} whether the node is the last child\n     */\n    __setLastChildFlag(node, isLastChild) {\n      // Determine if we're the last child of our parent\n      node.lastChild = [isLastChild];\n\n      // Get our parent.\n      var parent = this._nodeArr[node.parentNodeId];\n\n      // For each parent node, determine if it is a last child\n      while (parent.nodeId) {\n        var bLast = parent.lastChild[parent.lastChild.length - 1];\n        node.lastChild.unshift(bLast);\n        parent = this._nodeArr[parent.parentNodeId];\n      }\n    },\n\n    /**\n     * Renders the tree data.\n     */\n    __render() {\n      // Reset the __tempTreeData\n      this.__tempTreeData = [];\n      this.__recalculateLastChildFlags = false;\n\n      // Reset the row array\n      this._rowArr = [];\n\n      // Reset the _nodeArr -> _rowArr map\n      this._nodeRowMap = [];\n\n      // Reset the set of selections\n      this._selections = {};\n\n      // Begin in-order traversal of the tree from the root to regenerate\n      // _rowArr.\n      this.__inorder(0, 1);\n\n      // Reset the lastChild flags when needed, so that the tree can render the\n      // tree lines right.\n      if (this.__recalculateLastChildFlags) {\n        this.__calculateLastChildFlags(0);\n      }\n\n      // Give the memory free\n      this.__tempTreeData = null;\n\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: this._rowArr.length - 1,\n          firstColumn: 0,\n          lastColumn: this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Sets the whole data en bulk, or notifies the data model that node\n     * modifications are complete.\n     *\n     * @param nodeArr {Array?null}\n     *   Pass either an Array of node objects, or null.\n     *\n     *   If non-null, nodeArr is an array of node objects containing the\n     *   entire tree to be displayed.  If loading the whole data en bulk in\n     *   this way, it is assumed that the data is correct!  No error checking\n     *   or validation is done.  You'd better know what you're doing!  Caveat\n     *   emptor.\n     *\n     *\n     *   If nodeArr is null, then this call is a notification that the user\n     *   has completed building or modifying a tree by issuing a series of\n     *   calls to {@link #addBranch} and/or {@link #addLeaf}.\n     *\n     * @param bRerender {Boolean?true}\n     *  Rerender the tree data after setting the data. If set false it becomes the caller's responsibility to\n     *    call setData() subsequently to cause a redraw.\n     *\n     * @throws {Error} If the parameter has the wrong type.\n     */\n    setData(nodeArr, bRerender = true) {\n      this._checkEditing();\n      if (nodeArr instanceof Array) {\n        // Save the user-supplied data.\n        this._nodeArr = nodeArr;\n      } else if (nodeArr !== null && nodeArr !== undefined) {\n        throw new Error(\n          \"Expected array of node objects or null/undefined; \" +\n            \"got \" +\n            typeof nodeArr\n        );\n      }\n\n      // Re-render the row array, if so requested\n      if (bRerender) {\n        this.__render();\n      }\n\n      // Set selections in the selection model now\n      var selectionModel = this.getTree().getSelectionModel();\n      var selections = this._selections;\n\n      selectionModel.setBatchMode(true);\n      try {\n        selectionModel.resetSelection();\n        for (var nodeId in selections) {\n          var nRowIndex = this.getRowFromNodeId(nodeId);\n          selectionModel.addSelectionInterval(nRowIndex, nRowIndex);\n        }\n      } finally {\n        selectionModel.setBatchMode(false);\n      }\n    },\n\n    /**\n     * Return the array of node data.\n     *\n     * @return {Array}\n     *  Array of node objects.\n     *  See {@link qx.ui.treevirtual.SimpleTreeDataModel} for a description\n     *  nodes in this array.\n     */\n    getData() {\n      return this._nodeArr;\n    },\n\n    /**\n     * Clears the tree of all nodes\n     *\n     * @param bRerender {Boolean?true}\n     *   Rerender the tree data after clearing. If set false it becomes the caller's responsibility to\n     *    call setData() subsequently to cause a redraw.\n     */\n    clearData(bRerender = true) {\n      this._checkEditing();\n      this._clearSelections();\n      this.setData([qx.ui.treevirtual.MTreePrimitive._getEmptyTree()], bRerender);\n    },\n\n    /**\n     * Add data to an additional column (a column other than the tree column)\n     * of the tree.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     *\n     * @param columnIndex {Integer}\n     *   The column number to which the provided data applies\n     *\n     * @param data {var}\n     *   The cell data for the specified column\n     *\n     */\n    setColumnData(nodeId, columnIndex, data) {\n      this._nodeArr[nodeId].columnData[columnIndex] = data;\n    },\n\n    /**\n     * Retrieve the data from an additional column (a column other than the\n     * tree column) of the tree.\n     *\n     * @param nodeId {Integer}\n     *   A node identifier, as previously returned by {@link #addBranch} or\n     *   {@link #addLeaf}.\n     *\n     * @param columnIndex {Integer}\n     *   The column number to which the provided data applies\n     *\n     * @return {var} The cell data for the specified column\n     */\n    getColumnData(nodeId, columnIndex) {\n      return this._nodeArr[nodeId].columnData[columnIndex];\n    },\n\n    /**\n     * Set state attributes of a node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node to have its attributes set.  The node can be represented\n     *   either by the node object, or the node id (as would have been\n     *   returned by addBranch(), addLeaf(), etc.)\n     *\n     * @param attributes {Map}\n     *   Each property name in the map may correspond to the property names of\n     *   a node which are specified as <i>USER-PROVIDED ATTRIBUTES</i> in\n     *   {@link SimpleTreeDataModel}.  Each property value will be assigned\n     *   to the corresponding property of the node specified by nodeId.\n     *\n     * @param suppressRedraw {Boolean}\n     *    If true then prevents redraw; it becomes the caller's responsibility to\n     *    call setData() subsequently, to cause a redraw.\n     *\n     * @throws {Error} If the node object or id is not valid.\n     */\n    setState(nodeReference, attributes, suppressRedraw) {\n      var node;\n      var nodeId;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n        nodeId = node.nodeId;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n        node = this._nodeArr[nodeId];\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      for (var attribute in attributes) {\n        // Do any attribute-specific processing\n        switch (attribute) {\n          case \"bSelected\":\n            var nRowIndex = this.getRowFromNodeId(nodeId);\n            var selectionModel = this.getTree().getSelectionModel();\n            var TV = qx.ui.treevirtual.TreeVirtual;\n            var bChangeSelection =\n              typeof nRowIndex === \"number\" &&\n              this.getTree().getSelectionMode() != TV.SelectionMode.NONE;\n\n            // The selected state is changing. Keep track of what is selected\n            if (attributes[attribute]) {\n              this._selections[nodeId] = true;\n\n              // Add selection range for node\n              if (\n                bChangeSelection &&\n                !selectionModel.isSelectedIndex(nRowIndex)\n              ) {\n                selectionModel.setSelectionInterval(nRowIndex, nRowIndex);\n              }\n            } else {\n              delete this._selections[nodeId];\n\n              // Delete selection range for node\n              if (\n                bChangeSelection &&\n                selectionModel.isSelectedIndex(nRowIndex)\n              ) {\n                selectionModel.removeSelectionInterval(nRowIndex, nRowIndex);\n              }\n            }\n            break;\n\n          case \"bOpened\":\n            // Don't do anything if this is a leaf, leaf has no opened/closed\n            if (node.type === qx.ui.treevirtual.MTreePrimitive.Type.LEAF) {\n              break;\n            }\n\n            // Don't do anything if the requested state is the same as the\n            // current state.\n            if (attributes[attribute] == node.bOpened) {\n              break;\n            }\n\n            // Get the tree to which this data model is attached\n            var tree = this.__tree;\n\n            // Are we opening or closing?\n            if (node.bOpened) {\n              // We're closing.  If there are listeners, generate a treeClose\n              // event.\n              tree.fireDataEvent(\"treeClose\", node);\n            } else {\n              // We're opening.  Are there any children?\n              if (node.children.length > 0) {\n                // Yup.  If there any listeners, generate a \"treeOpenWithContent\"\n                // event.\n                tree.fireDataEvent(\"treeOpenWithContent\", node);\n              } else {\n                // No children.  If there are listeners, generate a\n                // \"treeOpenWhileEmpty\" event.\n                tree.fireDataEvent(\"treeOpenWhileEmpty\", node);\n              }\n            }\n\n            // Event handler may have modified the opened state.  Check before\n            // toggling.\n            if (!node.bHideOpenClose) {\n              // It's still boolean.  Toggle the state\n              node.bOpened = !node.bOpened;\n\n              // Clear the old selections in the tree\n              tree.getSelectionModel()._resetSelection();\n            }\n\n            // Re-render the row data since formerly visible rows may now be\n            // invisible, or vice versa.\n            if (!suppressRedraw) {\n              this.setData();\n            }\n            break;\n\n          default:\n            // no attribute-specific processing required\n            break;\n        }\n\n        // Set the new attribute value\n        node[attribute] = attributes[attribute];\n      }\n    },\n\n    /**\n     * Return the mapping of nodes to rendered rows.  This function is intended\n     * for use by the cell renderer, not by users of this class.\n     * It is also useful to select a node.\n     *\n     * @return {Array}\n     *   The array containing mappings of nodes to rendered rows.\n     */\n    getNodeRowMap() {\n      return this._nodeRowMap;\n    },\n\n    /**\n     * This operation maps nodes to rowIndexes.  It does the opposite job to {@link #getNodeFromRow}.\n     *\n     * @param nodeId {Integer}\n     *   The id of the node (as would have been returned by addBranch(),\n     *   addLeaf(), etc.) to get the row index for.\n     * @return {Integer} row index for the given node ID\n     */\n    getRowFromNodeId(nodeId) {\n      return this._nodeRowMap[nodeId];\n    },\n\n    /**\n     * This operation maps rowIndexes to nodes.  It does the opposite job to {@link #getRowFromNodeId}.\n     * This function is useful to map selection (row based) to nodes.\n     *\n     * @param rowIndex {Integer} zero-based row index.\n     * @return {Object} node associated to <tt>rowIndex</tt>.\n     */\n    getNodeFromRow(rowIndex) {\n      return this._nodeArr[this._rowArr[rowIndex][this._treeColumn].nodeId];\n    },\n\n    /**\n     * Clear all selections in the data model.  This method does not clear\n     * selections displayed in the widget, and is intended for internal use,\n     * not by users of this class.\n     *\n     */\n    _clearSelections() {\n      // Clear selected state for any selected nodes.\n      for (var selection in this._selections) {\n        this._nodeArr[selection].bSelected = false;\n      }\n\n      // Reinitialize selections array.\n      this._selections = {};\n    },\n\n    /**\n     * Return the nodes that are currently selected.\n     *\n     * @return {Array}\n     *   An array containing the nodes that are currently selected.\n     */\n    getSelectedNodes() {\n      var nodes = [];\n\n      for (var nodeId in this._selections) {\n        nodes.push(this._nodeArr[nodeId]);\n      }\n\n      return nodes;\n    },\n\n    // property apply\n    _applyFilter(value, old) {\n      this.setData();\n    },\n\n    /**\n     * This checks whether a node label is editable\n     * Used in the NodeEditor to check if edit is permitted\n     *\n     * @param rowIndex {Integer} zero-based row index.\n     * @return {Boolean} If the node has edit permitted\n     */\n    isNodeEditable(rowIndex) {\n      return (\n        this.__tree.getAllowNodeEdit() && this.getNodeFromRow(rowIndex).bCanEdit\n      );\n    }\n  },\n\n  destruct() {\n    this._rowArr =\n      this._nodeArr =\n      this._nodeRowMap =\n      this._selections =\n      this.__tree =\n      this.__tempTreeData =\n        null;\n  },\n\n  defer(statics) {\n    // For backward compatibility, ensure the Type values are available from\n    // this class as well as from the mixin.\n    statics.Type = qx.ui.treevirtual.MTreePrimitive.Type;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uCAAuC,EAAE;IACvDC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,KAAK,CAACC,QAAQ;IAElCC,OAAO,EAAEX,EAAE,CAACO,EAAE,CAACK,WAAW,CAACC,cAAc;IAEzC;AACF;AACA;AACA;AACA;IAEEC,SAAS,WAATA,SAASA,CAAA,EAAG;MACVd,EAAA,CAAAO,EAAA,CAAAC,KAAA,CAAAC,KAAA,CAAAC,QAAA,CAAAK,WAAA,CAAAC,IAAA;MAEA,IAAI,CAACC,OAAO,GAAG,EAAE,CAAC,CAAC;MACnB,IAAI,CAACC,QAAQ,GAAG,EAAE,CAAC,CAAC;;MAEpB,IAAI,CAACC,WAAW,GAAG,EAAE,CAAC,CAAC;MACvB;MACA;MACA;;MAEA,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC;;MAEtB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;;MAEvB;MACA,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACtB,EAAE,CAACO,EAAE,CAACK,WAAW,CAACC,cAAc,CAACU,aAAa,CAAC,CAAC,CAAC;;MAEpE;MACA,IAAI,CAACC,SAAgB,GAAG,IAAI;IAC9B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",
  "ignoreList": []
}