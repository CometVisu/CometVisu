{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "rowrenderer",
    "Default",
    "construct",
    "constructor",
    "call",
    "members",
    "updateDataRowElement",
    "rowInfo",
    "rowElem",
    "tree",
    "rowData",
    "tableModel",
    "getTableModel",
    "treeCol",
    "getTreeColumn",
    "node",
    "selected",
    "bSelected",
    "row",
    "selModel",
    "getSelectionModel",
    "isSelectedIndex",
    "_addSelectionInterval",
    "treevirtual",
    "SimpleTreeDataRowRenderer",
    "superclass",
    "prototype"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/SimpleTreeDataRowRenderer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A data row renderer for a simple tree row\n */\nqx.Class.define(\"qx.ui.treevirtual.SimpleTreeDataRowRenderer\", {\n  extend: qx.ui.table.rowrenderer.Default,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // overridden\n    updateDataRowElement(rowInfo, rowElem) {\n      // If the node is selected, select the row\n      var tree = rowInfo.table;\n      var rowData = rowInfo.rowData;\n      var tableModel = tree.getTableModel();\n      var treeCol = tableModel.getTreeColumn();\n      var node = rowData[treeCol];\n\n      // Set the row's selected state based on the data model\n      rowInfo.selected = node.bSelected;\n\n      if (node.bSelected) {\n        // Ensure that the selection model knows it's selected\n        var row = rowInfo.row;\n        var selModel = tree.getSelectionModel();\n        if (!selModel.isSelectedIndex(row)) {\n          selModel._addSelectionInterval(row, row);\n        }\n      }\n\n      // Now call our superclass\n      super.updateDataRowElement(rowInfo, rowElem);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,6CAA6C,EAAE;IAC7DC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,WAAW,CAACC,OAAO;IAEvC;AACF;AACA;AACA;AACA;IAEEC,SAAS,WAAAA,UAAA,EAAG;MACVX,EAAA,CAAAO,EAAA,CAAAC,KAAA,CAAAC,WAAA,CAAAC,OAAA,CAAAE,WAAA,CAAAC,IAAA;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;MACAC,oBAAoB,WAAAA,qBAACC,OAAO,EAAEC,OAAO,EAAE;QACrC;QACA,IAAIC,IAAI,GAAGF,OAAO,CAACR,KAAK;QACxB,IAAIW,OAAO,GAAGH,OAAO,CAACG,OAAO;QAC7B,IAAIC,UAAU,GAAGF,IAAI,CAACG,aAAa,EAAE;QACrC,IAAIC,OAAO,GAAGF,UAAU,CAACG,aAAa,EAAE;QACxC,IAAIC,IAAI,GAAGL,OAAO,CAACG,OAAO,CAAC;;QAE3B;QACAN,OAAO,CAACS,QAAQ,GAAGD,IAAI,CAACE,SAAS;QAEjC,IAAIF,IAAI,CAACE,SAAS,EAAE;UAClB;UACA,IAAIC,GAAG,GAAGX,OAAO,CAACW,GAAG;UACrB,IAAIC,QAAQ,GAAGV,IAAI,CAACW,iBAAiB,EAAE;UACvC,IAAI,CAACD,QAAQ,CAACE,eAAe,CAACH,GAAG,CAAC,EAAE;YAClCC,QAAQ,CAACG,qBAAqB,CAACJ,GAAG,EAAEA,GAAG,CAAC;UAC1C;QACF;;QAEA;QACA3B,EAAA,CAAAO,EAAA,CAAAyB,WAAA,CAAAC,yBAAA,CAAAC,UAAA,CAAAC,SAAA,CAAApB,oBAAA,CAAAF,IAAA,OAA2BG,OAAO,EAAEC,OAAO;MAC7C;IACF;EACF,CAAC,CAAC;EAlEFjB,EAAE,CAACO,EAAE,CAACyB,WAAW,CAACC,yBAAyB,CAAC9B,aAAa,GAAGA,aAAa;AAAC"
}