{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "Table",
    "construct",
    "headings",
    "custom",
    "_this2",
    "dataModel",
    "treevirtual",
    "SimpleTreeDataModel",
    "treeColumn",
    "undefined",
    "setTreeColumn",
    "treeDataCellRenderer",
    "SimpleTreeDataCellRenderer",
    "defaultDataCellRenderer",
    "DefaultDataCellRenderer",
    "dataRowRenderer",
    "SimpleTreeDataRowRenderer",
    "selectionManager",
    "obj",
    "SelectionManager",
    "tableColumnModel",
    "columnmodel",
    "Resize",
    "tablePaneScroller",
    "pane",
    "Scroller",
    "lang",
    "Type",
    "isString",
    "setColumns",
    "setTree",
    "constructor",
    "call",
    "addListener",
    "e",
    "getDataModel",
    "setData",
    "setColumnVisibilityButtonVisible",
    "length",
    "setRowHeight",
    "setMetaColumnCounts",
    "setOverflow",
    "stdcr",
    "ddcr",
    "tcm",
    "getTableColumnModel",
    "treeCol",
    "getTreeColumn",
    "i",
    "setDataCellRenderer",
    "setDataRowRenderer",
    "setCellEditorFactory",
    "celleditor",
    "NodeEditor",
    "setFocusCellOnPointerMove",
    "setShowCellFocusIndicator",
    "scrollers",
    "_getPaneScrollerArr",
    "setSelectBeforeFocus",
    "events",
    "treeOpenWithContent",
    "treeOpenWhileEmpty",
    "treeClose",
    "changeSelection",
    "statics",
    "SelectionMode",
    "NONE",
    "selection",
    "Model",
    "NO_SELECTION",
    "SINGLE",
    "SINGLE_SELECTION",
    "SINGLE_INTERVAL",
    "SINGLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL",
    "MULTIPLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_TOGGLE",
    "MULTIPLE_INTERVAL_SELECTION_TOGGLE",
    "properties",
    "openCloseClickSelectsRow",
    "check",
    "init",
    "appearance",
    "refine",
    "allowNodeEdit",
    "members",
    "getTableModel",
    "setUseTreeLines",
    "b",
    "dcr",
    "getDataCellRenderer",
    "hasListener",
    "data",
    "firstRow",
    "lastRow",
    "getRowCount",
    "firstColumn",
    "lastColumn",
    "getColumnCount",
    "fireDataEvent",
    "getUseTreeLines",
    "setAlwaysShowOpenCloseSymbol",
    "setExcludeFirstLevelTreeLines",
    "getExcludeFirstLevelTreeLines",
    "getAlwaysShowOpenCloseSymbol",
    "getOpenCloseButtonPosition",
    "node",
    "rowPos",
    "columnPositions",
    "_getColToXPosMap",
    "left",
    "bom",
    "element",
    "Location",
    "getLeft",
    "getContentElement",
    "getDomElement",
    "visX",
    "getColumnWidth",
    "setSelectionMode",
    "mode",
    "getSelectionModel",
    "getSelectionMode",
    "getHierarchy",
    "nodeReference",
    "_this",
    "components",
    "nodeId",
    "_typeof",
    "Error",
    "addHierarchy",
    "getData",
    "unshift",
    "label",
    "parentNodeId",
    "getSelectedNodes",
    "_onKeyDown",
    "evt",
    "getEnabled",
    "identifier",
    "getKeyIdentifier",
    "consumed",
    "modifiers",
    "getModifiers",
    "dm",
    "focusedCol",
    "getFocusedColumn",
    "focusedRow",
    "getFocusedRow",
    "getNode",
    "bHideOpenClose",
    "type",
    "LEAF",
    "setState",
    "bOpened",
    "moveFocusedCell",
    "event",
    "Dom",
    "CTRL_MASK",
    "BRANCH",
    "setFocusedCell",
    "SHIFT_MASK",
    "rowIndex",
    "getRowFromNodeId",
    "_focusedCol",
    "children",
    "preventDefault",
    "stopPropagation",
    "TreeVirtual",
    "superclass",
    "prototype",
    "_onSelectionChanged",
    "_clearSelections",
    "selectedNodes",
    "_calculateSelectedNodes",
    "stdcm",
    "selectedRanges",
    "getSelectedRanges",
    "j",
    "minIndex",
    "maxIndex",
    "bSelected",
    "push",
    "s"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/TreeVirtual.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A \"virtual\" tree\r\n * <p>\r\n *   A number of convenience methods are available in the following mixins:\r\n *   <ul>\r\n *     <li>{@link qx.ui.treevirtual.MNode}</li>\r\n *     <li>{@link qx.ui.treevirtual.MFamily}</li>\r\n *   </ul>\r\n * </p>\r\n */\r\nqx.Class.define(\"qx.ui.treevirtual.TreeVirtual\", {\r\n  extend: qx.ui.table.Table,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param headings {Array | String}\r\n   *   An array containing a list of strings, one for each column, representing\r\n   *   the headings for each column.  As a special case, if only one column is\r\n   *   to exist, the string representing its heading need not be enclosed in an\r\n   *   array.\r\n   *\r\n   * @param custom {Map ? null}\r\n   *   A map provided (typically) by subclasses, to override the various\r\n   *   supplemental classes allocated within this constructor.  For normal\r\n   *   usage, this parameter may be omitted.  Each property must be an object\r\n   *   instance or a function which returns an object instance, as indicated by\r\n   *   the defaults listed here:\r\n   *\r\n   *   <dl>\r\n   *     <dt>initiallyHiddenColumns</dt>\r\n   *       <dd>\r\n   *         {Array?}\r\n   *         A list of column numbers that should be initially invisible. Any\r\n   *         column not mentioned will be initially visible, and if no array\r\n   *         is provided, all columns will be initially visible.\r\n   *       </dd>\r\n   *     <dt>dataModel</dt>\r\n   *       <dd>new qx.ui.treevirtual.SimpleTreeDataModel()</dd>\r\n   *     <dt>treeDataCellRenderer</dt>\r\n   *       <dd>\r\n   *         Instance of {@link qx.ui.treevirtual.SimpleTreeDataCellRenderer}.\r\n   *         Custom data cell renderer for the tree column.\r\n   *       </dd>\r\n   *     <dt>treeColumn</dt>\r\n   *       <dd>\r\n   *         The column number in which the tree is to reside, i.e., which\r\n   *         column uses the SimpleTreeDataCellRenderer or a subclass of it.\r\n   *       </dd>\r\n   *     <dt>defaultDataCellRenderer</dt>\r\n   *       <dd>\r\n   *         Instance of {@link qx.ui.treevirtual.DefaultDataCellRenderer}.\r\n   *         Custom data cell renderer for all columns other than the tree\r\n   *         column.\r\n   *       </dd>\r\n   *     <dt>dataRowRenderer</dt>\r\n   *       <dd>new qx.ui.treevirtual.SimpleTreeDataRowRenderer()</dd>\r\n   *     <dt>selectionManager</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.treevirtual.SelectionManager(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tableColumnModel</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.columnmodel.Resize(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tablePaneScroller</dt>\r\n   *       <dd>\r\n   *         Instance of {@link qx.ui.treevirtual.pane.Scroller}.\r\n   *         Custom table pane scroller for the tree\r\n   *         <pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.columnmodel.Resize(obj);\r\n   *         }\r\n   *       </pre>\r\n   *       </dd>\r\n   *   </dl>\r\n   */\r\n  construct(headings, custom) {\r\n    //\r\n    // Allocate default objects if custom objects are not specified\r\n    //\r\n    if (!custom) {\r\n      custom = {};\r\n    }\r\n\r\n    if (!custom.dataModel) {\r\n      custom.dataModel = new qx.ui.treevirtual.SimpleTreeDataModel();\r\n    }\r\n\r\n    if (custom.treeColumn === undefined) {\r\n      custom.treeColumn = 0;\r\n      custom.dataModel.setTreeColumn(custom.treeColumn);\r\n    }\r\n\r\n    if (!custom.treeDataCellRenderer) {\r\n      custom.treeDataCellRenderer =\r\n        new qx.ui.treevirtual.SimpleTreeDataCellRenderer();\r\n    }\r\n\r\n    if (!custom.defaultDataCellRenderer) {\r\n      custom.defaultDataCellRenderer =\r\n        new qx.ui.treevirtual.DefaultDataCellRenderer();\r\n    }\r\n\r\n    if (!custom.dataRowRenderer) {\r\n      custom.dataRowRenderer =\r\n        new qx.ui.treevirtual.SimpleTreeDataRowRenderer();\r\n    }\r\n\r\n    if (!custom.selectionManager) {\r\n      custom.selectionManager = function (obj) {\r\n        return new qx.ui.treevirtual.SelectionManager(obj);\r\n      };\r\n    }\r\n\r\n    if (!custom.tableColumnModel) {\r\n      custom.tableColumnModel = function (obj) {\r\n        return new qx.ui.table.columnmodel.Resize(obj);\r\n      };\r\n    }\r\n\r\n    if (!custom.tablePaneScroller) {\r\n      custom.tablePaneScroller = function (obj) {\r\n        return new qx.ui.treevirtual.pane.Scroller(obj);\r\n      };\r\n    }\r\n\r\n    // Specify the column headings.  We accept a single string (one single\r\n    // column) or an array of strings (one or more columns).\r\n    if (qx.lang.Type.isString(headings)) {\r\n      headings = [headings];\r\n    }\r\n\r\n    custom.dataModel.setColumns(headings);\r\n    custom.dataModel.setTreeColumn(custom.treeColumn);\r\n\r\n    // Save a reference to the tree with the data model\r\n    custom.dataModel.setTree(this);\r\n\r\n    // Call our superclass constructor\r\n    super(custom.dataModel, custom);\r\n\r\n    // Arrange to redisplay edited data following editing\r\n    this.addListener(\"dataEdited\", e => {\r\n      this.getDataModel().setData();\r\n    });\r\n\r\n    // By default, present the column visibility button only if there are\r\n    // multiple columns.\r\n    this.setColumnVisibilityButtonVisible(headings.length > 1);\r\n\r\n    // Set sizes\r\n    this.setRowHeight(16);\r\n    this.setMetaColumnCounts(headings.length > 1 ? [1, -1] : [1]);\r\n\r\n    // Overflow on trees is always hidden.  The internal elements scroll.\r\n    this.setOverflow(\"hidden\");\r\n\r\n    // Set the data cell render.  We use the SimpleTreeDataCellRenderer for the\r\n    // tree column, and our DefaultDataCellRenderer for all other columns.\r\n    var stdcr = custom.treeDataCellRenderer;\r\n    var ddcr = custom.defaultDataCellRenderer;\r\n    var tcm = this.getTableColumnModel();\r\n    var treeCol = this.getDataModel().getTreeColumn();\r\n\r\n    for (var i = 0; i < headings.length; i++) {\r\n      tcm.setDataCellRenderer(i, i == treeCol ? stdcr : ddcr);\r\n    }\r\n\r\n    // Set the data row renderer.\r\n    this.setDataRowRenderer(custom.dataRowRenderer);\r\n\r\n    // Set the editor for the tree column, for use if allowNodeEdit is true\r\n    tcm.setCellEditorFactory(\r\n      treeCol,\r\n      new qx.ui.treevirtual.celleditor.NodeEditor()\r\n    );\r\n\r\n    // Move the focus with the mouse.  This controls the ROW focus indicator.\r\n    this.setFocusCellOnPointerMove(true);\r\n\r\n    // In a tree we don't typically want a visible cell focus indicator\r\n    this.setShowCellFocusIndicator(false);\r\n\r\n    // Get the list of pane scrollers\r\n    var scrollers = this._getPaneScrollerArr();\r\n\r\n    // For each scroller...\r\n    for (var i = 0; i < scrollers.length; i++) {\r\n      // Set the pane scrollers to handle the selection before\r\n      // displaying the focus, so we can manipulate the selected icon.\r\n      scrollers[i].setSelectBeforeFocus(true);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Fired when a tree branch which already has content is opened.\r\n     *\r\n     * Event data: the node object from the data model (of the node\r\n     * being opened) as described in\r\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\r\n     */\r\n    treeOpenWithContent: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired when an empty tree branch is opened.\r\n     *\r\n     * Event data: the node object from the data model (of the node\r\n     * being opened) as described in\r\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\r\n     */\r\n    treeOpenWhileEmpty: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired when a tree branch is closed.\r\n     *\r\n     * Event data: the node object from the data model (of the node\r\n     * being closed) as described in\r\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\r\n     */\r\n    treeClose: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired when the selected rows change.\r\n     *\r\n     * Event data: An array of node objects (the selected rows' nodes)\r\n     * from the data model.  Each node object is described in\r\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\r\n     */\r\n    changeSelection: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /**\r\n     * Selection Modes {int}\r\n     *\r\n     *   NONE\r\n     *     Nothing can ever be selected.\r\n     *\r\n     *   SINGLE\r\n     *     Allow only one selected item.\r\n     *\r\n     *   SINGLE_INTERVAL\r\n     *     Allow one contiguous interval of selected items.\r\n     *\r\n     *   MULTIPLE_INTERVAL\r\n     *     Allow any set of selected items, whether contiguous or not.\r\n     *\r\n     *   MULTIPLE_INTERVAL_TOGGLE\r\n     *     Like MULTIPLE_INTERVAL, but clicking on an item toggles its selection state.\r\n     */\r\n    SelectionMode: {\r\n      NONE: qx.ui.table.selection.Model.NO_SELECTION,\r\n      SINGLE: qx.ui.table.selection.Model.SINGLE_SELECTION,\r\n      SINGLE_INTERVAL: qx.ui.table.selection.Model.SINGLE_INTERVAL_SELECTION,\r\n      MULTIPLE_INTERVAL:\r\n        qx.ui.table.selection.Model.MULTIPLE_INTERVAL_SELECTION,\r\n      MULTIPLE_INTERVAL_TOGGLE:\r\n        qx.ui.table.selection.Model.MULTIPLE_INTERVAL_SELECTION_TOGGLE\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * Whether a click on the open/close button should also cause selection of\r\n     * the row.\r\n     */\r\n    openCloseClickSelectsRow: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    },\r\n\r\n    appearance: {\r\n      refine: true,\r\n      init: \"treevirtual\"\r\n    },\r\n\r\n    allowNodeEdit: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Return the data model for this tree.\r\n     *\r\n     * @return {qx.ui.table.ITableModel} The data model.\r\n     */\r\n    getDataModel() {\r\n      return this.getTableModel();\r\n    },\r\n\r\n    /**\r\n     * Set whether lines linking tree children shall be drawn on the tree.\r\n     * Note that not all themes support tree lines.  As of the time of this\r\n     * writing, the Classic theme supports tree lines (and uses +/- icons\r\n     * which lend themselves to tree lines), while the Modern theme, which\r\n     * uses right-facing and downward-facing arrows instead of +/-, does not.\r\n     *\r\n     * @param b {Boolean}\r\n     *   <i>true</i> if tree lines should be shown; <i>false</i> otherwise.\r\n     *\r\n     */\r\n    setUseTreeLines(b) {\r\n      var dataModel = this.getDataModel();\r\n      var treeCol = dataModel.getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      dcr.setUseTreeLines(b);\r\n\r\n      // Inform the listeners\r\n      if (dataModel.hasListener(\"dataChanged\")) {\r\n        var data = {\r\n          firstRow: 0,\r\n          lastRow: dataModel.getRowCount() - 1,\r\n          firstColumn: 0,\r\n          lastColumn: dataModel.getColumnCount() - 1\r\n        };\r\n\r\n        dataModel.fireDataEvent(\"dataChanged\", data);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get whether lines linking tree children shall be drawn on the tree.\r\n     *\r\n     * @return {Boolean}\r\n     *   <i>true</i> if tree lines are in use;\r\n     *   <i>false</i> otherwise.\r\n     */\r\n    getUseTreeLines() {\r\n      var treeCol = this.getDataModel().getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      return dcr.getUseTreeLines();\r\n    },\r\n\r\n    /**\r\n     * Set whether the open/close button should be displayed on a branch,\r\n     * even if the branch has no children.\r\n     *\r\n     * @param b {Boolean}\r\n     *   <i>true</i> if the open/close button should be shown;\r\n     *   <i>false</i> otherwise.\r\n     *\r\n     */\r\n    setAlwaysShowOpenCloseSymbol(b) {\r\n      var dataModel = this.getDataModel();\r\n      var treeCol = dataModel.getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      dcr.setAlwaysShowOpenCloseSymbol(b);\r\n\r\n      // Inform the listeners\r\n      if (dataModel.hasListener(\"dataChanged\")) {\r\n        var data = {\r\n          firstRow: 0,\r\n          lastRow: dataModel.getRowCount() - 1,\r\n          firstColumn: 0,\r\n          lastColumn: dataModel.getColumnCount() - 1\r\n        };\r\n\r\n        dataModel.fireDataEvent(\"dataChanged\", data);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set whether drawing of first-level tree-node lines are disabled even\r\n     * if drawing of tree lines is enabled.\r\n     *\r\n     * @param b {Boolean}\r\n     *   <i>true</i> if first-level tree lines should be disabled;\r\n     *   <i>false</i> for normal operation.\r\n     *\r\n     */\r\n    setExcludeFirstLevelTreeLines(b) {\r\n      var dataModel = this.getDataModel();\r\n      var treeCol = dataModel.getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      dcr.setExcludeFirstLevelTreeLines(b);\r\n\r\n      // Inform the listeners\r\n      if (dataModel.hasListener(\"dataChanged\")) {\r\n        var data = {\r\n          firstRow: 0,\r\n          lastRow: dataModel.getRowCount() - 1,\r\n          firstColumn: 0,\r\n          lastColumn: dataModel.getColumnCount() - 1\r\n        };\r\n\r\n        dataModel.fireDataEvent(\"dataChanged\", data);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get whether drawing of first-level tree lines should be disabled even\r\n     * if drawing of tree lines is enabled.\r\n     * (See also {@link #getUseTreeLines})\r\n     *\r\n     * @return {Boolean}\r\n     *   <i>true</i> if tree lines are in use;\r\n     *   <i>false</i> otherwise.\r\n     */\r\n    getExcludeFirstLevelTreeLines() {\r\n      var treeCol = this.getDataModel().getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      return dcr.getExcludeFirstLevelTreeLines();\r\n    },\r\n\r\n    /**\r\n     * Set whether the open/close button should be displayed on a branch,\r\n     * even if the branch has no children.\r\n     *\r\n     * @return {Boolean}\r\n     *   <i>true</i> if tree lines are in use;\r\n     *   <i>false</i> otherwise.\r\n     */\r\n    getAlwaysShowOpenCloseSymbol() {\r\n      var treeCol = this.getDataModel().getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      return dcr.getAlwaysShowOpenCloseSymbol();\r\n    },\r\n\r\n    /**\r\n     * Returns the position of the open/close button for a node\r\n     *\r\n     * @return {Object} The position of the open/close button within the tree row\r\n     */\r\n    getOpenCloseButtonPosition(node) {\r\n      var treeCol = this.getDataModel().getTreeColumn();\r\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\r\n      var rowPos = dcr.getOpenCloseButtonPosition(this, node);\r\n\r\n      // Get the order of the columns\r\n      var tcm = this.getTableColumnModel();\r\n      var columnPositions = tcm._getColToXPosMap();\r\n\r\n      // Calculate the position of the beginning of the tree column\r\n      var left = qx.bom.element.Location.getLeft(\r\n        this.getContentElement().getDomElement()\r\n      );\r\n\r\n      for (var i = 0; i < columnPositions[treeCol].visX; i++) {\r\n        left += tcm.getColumnWidth(columnPositions[i].visX);\r\n      }\r\n      rowPos.left += left;\r\n      return rowPos;\r\n    },\r\n\r\n    /**\r\n     * Set the selection mode.\r\n     *\r\n     * @param mode {Integer}\r\n     *   The selection mode to be used.  It may be any of:\r\n     *     <pre>\r\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:\r\n     *          Nothing can ever be selected.\r\n     *\r\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE\r\n     *          Allow only one selected item.\r\n     *\r\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL\r\n     *          Allow one contiguous interval of selected items.\r\n     *\r\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL\r\n     *          Allow any selected items, whether contiguous or not.\r\n     *     </pre>\r\n     *\r\n     */\r\n    setSelectionMode(mode) {\r\n      this.getSelectionModel().setSelectionMode(mode);\r\n    },\r\n\r\n    /**\r\n     * Get the selection mode currently in use.\r\n     *\r\n     * @return {Integer}\r\n     *   One of the values documented in {@link #setSelectionMode}\r\n     */\r\n    getSelectionMode() {\r\n      return this.getSelectionModel().getSelectionMode();\r\n    },\r\n\r\n    /**\r\n     * Obtain the entire hierarchy of labels from the root down to the\r\n     * specified node.\r\n     *\r\n     * @param nodeReference {Object | Integer}\r\n     *   The node for which the hierarchy is desired.  The node can be\r\n     *   represented either by the node object, or the node id (as would have\r\n     *   been returned by addBranch(), addLeaf(), etc.)\r\n     *\r\n     * @return {Array}\r\n     *   The returned array contains one string for each label in the\r\n     *   hierarchy of the node specified by the parameter.  Element 0 of the\r\n     *   array contains the label of the root node, element 1 contains the\r\n     *   label of the node immediately below root in the specified node's\r\n     *   hierarchy, etc., down to the last element in the array contain the\r\n     *   label of the node referenced by the parameter.\r\n     */\r\n    getHierarchy(nodeReference) {\r\n      var _this = this;\r\n      var components = [];\r\n      var node;\r\n      var nodeId;\r\n\r\n      if (typeof nodeReference == \"object\") {\r\n        node = nodeReference;\r\n        nodeId = node.nodeId;\r\n      } else if (typeof nodeReference == \"number\") {\r\n        nodeId = nodeReference;\r\n      } else {\r\n        throw new Error(\"Expected node object or node id\");\r\n      }\r\n\r\n      function addHierarchy(nodeId) {\r\n        // If we're at the root...\r\n        if (!nodeId) {\r\n          // ... then we're done\r\n          return;\r\n        }\r\n\r\n        // Get the requested node\r\n        var node = _this.getDataModel().getData()[nodeId];\r\n\r\n        // Add its label to the hierarchy components\r\n        components.unshift(node.label);\r\n\r\n        // Call recursively to our parent node.\r\n        addHierarchy(node.parentNodeId);\r\n      }\r\n\r\n      addHierarchy(nodeId);\r\n      return components;\r\n    },\r\n\r\n    /**\r\n     * Return the nodes that are currently selected.\r\n     *\r\n     * @return {Array}\r\n     *   An array containing the nodes that are currently selected.\r\n     */\r\n    getSelectedNodes() {\r\n      return this.getDataModel().getSelectedNodes();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when a key was pressed.\r\n     *\r\n     * We handle the Enter key to toggle opened/closed tree state.  All\r\n     * other keydown events are passed to our superclass.\r\n     *\r\n     * @param evt {Map}\r\n     *   The event.\r\n     *\r\n     */\r\n    _onKeyDown(evt) {\r\n      if (!this.getEnabled()) {\r\n        return;\r\n      }\r\n\r\n      var identifier = evt.getKeyIdentifier();\r\n\r\n      var consumed = false;\r\n      var modifiers = evt.getModifiers();\r\n\r\n      if (modifiers == 0) {\r\n        switch (identifier) {\r\n          case \"Enter\":\r\n            // Get the data model\r\n            var dm = this.getDataModel();\r\n\r\n            var focusedCol = this.getFocusedColumn();\r\n            var treeCol = dm.getTreeColumn();\r\n\r\n            if (focusedCol == treeCol) {\r\n              // Get the focused node\r\n              var focusedRow = this.getFocusedRow();\r\n              var node = dm.getNode(focusedRow);\r\n\r\n              if (\r\n                !node.bHideOpenClose &&\r\n                node.type != qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF\r\n              ) {\r\n                dm.setState(node, { bOpened: !node.bOpened });\r\n              }\r\n\r\n              consumed = true;\r\n            }\r\n            break;\r\n\r\n          case \"Left\":\r\n            this.moveFocusedCell(-1, 0);\r\n            break;\r\n\r\n          case \"Right\":\r\n            this.moveFocusedCell(1, 0);\r\n            break;\r\n        }\r\n      } else if (modifiers == qx.event.type.Dom.CTRL_MASK) {\r\n        switch (identifier) {\r\n          case \"Left\":\r\n            // Get the data model\r\n            var dm = this.getDataModel();\r\n\r\n            // Get the focused node\r\n            var focusedRow = this.getFocusedRow();\r\n            var treeCol = dm.getTreeColumn();\r\n            var node = dm.getNode(focusedRow);\r\n\r\n            // If it's an open branch and open/close is allowed...\r\n            if (\r\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\r\n              !node.bHideOpenClose &&\r\n              node.bOpened\r\n            ) {\r\n              // ... then close it\r\n              dm.setState(node, { bOpened: !node.bOpened });\r\n            }\r\n\r\n            // Reset the focus to the current node\r\n            this.setFocusedCell(treeCol, focusedRow, true);\r\n\r\n            consumed = true;\r\n            break;\r\n\r\n          case \"Right\":\r\n            // Get the data model\r\n            var dm = this.getDataModel();\r\n\r\n            // Get the focused node\r\n            focusedRow = this.getFocusedRow();\r\n            treeCol = dm.getTreeColumn();\r\n            node = dm.getNode(focusedRow);\r\n\r\n            // If it's a closed branch and open/close is allowed...\r\n            if (\r\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\r\n              !node.bHideOpenClose &&\r\n              !node.bOpened\r\n            ) {\r\n              // ... then open it\r\n              dm.setState(node, { bOpened: !node.bOpened });\r\n            }\r\n\r\n            // Reset the focus to the current node\r\n            this.setFocusedCell(treeCol, focusedRow, true);\r\n\r\n            consumed = true;\r\n            break;\r\n        }\r\n      } else if (modifiers == qx.event.type.Dom.SHIFT_MASK) {\r\n        switch (identifier) {\r\n          case \"Left\":\r\n            // Get the data model\r\n            var dm = this.getDataModel();\r\n\r\n            // Get the focused node\r\n            var focusedRow = this.getFocusedRow();\r\n            var treeCol = dm.getTreeColumn();\r\n            var node = dm.getNode(focusedRow);\r\n\r\n            // If we're not at the top-level already...\r\n            if (node.parentNodeId) {\r\n              // Find out what rendered row our parent node is at\r\n              var rowIndex = dm.getRowFromNodeId(node.parentNodeId);\r\n\r\n              // Set the focus to our parent\r\n              this.setFocusedCell(this._focusedCol, rowIndex, true);\r\n            }\r\n\r\n            consumed = true;\r\n            break;\r\n\r\n          case \"Right\":\r\n            // Get the data model\r\n            var dm = this.getDataModel();\r\n\r\n            // Get the focused node\r\n            focusedRow = this.getFocusedRow();\r\n            treeCol = dm.getTreeColumn();\r\n            node = dm.getNode(focusedRow);\r\n\r\n            // If we're on a branch and open/close is allowed...\r\n            if (\r\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\r\n              !node.bHideOpenClose\r\n            ) {\r\n              // ... then first ensure the branch is open\r\n              if (!node.bOpened) {\r\n                dm.setState(node, { bOpened: !node.bOpened });\r\n              }\r\n\r\n              // If this node has children...\r\n              if (node.children.length > 0) {\r\n                // ... then move the focus to the first child\r\n                this.moveFocusedCell(0, 1);\r\n              }\r\n            }\r\n\r\n            consumed = true;\r\n            break;\r\n        }\r\n      }\r\n\r\n      // Was this one of our events that we handled?\r\n      if (consumed) {\r\n        // Yup.  Don't propagate it.\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      } else {\r\n        // It's not one of ours.  Let our superclass handle this event\r\n        super._onKeyDown(evt);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the selection has changed.\r\n     *\r\n     * @param evt {Map}\r\n     *   The event.\r\n     *\r\n     */\r\n    _onSelectionChanged(evt) {\r\n      // Clear the old list of selected nodes\r\n      this.getDataModel()._clearSelections();\r\n\r\n      // If selections are allowed, pass an event to our listeners\r\n      if (\r\n        this.getSelectionMode() !=\r\n        qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE\r\n      ) {\r\n        var selectedNodes = this._calculateSelectedNodes();\r\n\r\n        // Get the now-focused\r\n        this.fireDataEvent(\"changeSelection\", selectedNodes);\r\n      }\r\n\r\n      // Call the superclass method\r\n      super._onSelectionChanged(evt);\r\n    },\r\n\r\n    /**\r\n     * Calculate and return the set of nodes which are currently selected by\r\n     * the user, on the screen.  In the process of calculating which nodes\r\n     * are selected, the nodes corresponding to the selected rows on the\r\n     * screen are marked as selected by setting their <i>bSelected</i>\r\n     * property to true, and all previously-selected nodes have their\r\n     * <i>bSelected</i> property reset to false.\r\n     *\r\n     * @return {Array}\r\n     *   An array of nodes matching the set of rows which are selected on the\r\n     *   screen.\r\n     */\r\n    _calculateSelectedNodes() {\r\n      // Create an array of nodes that are now selected\r\n      var stdcm = this.getDataModel();\r\n      var selectedRanges = this.getSelectionModel().getSelectedRanges();\r\n      var selectedNodes = [];\r\n      var node;\r\n\r\n      for (var i = 0; i < selectedRanges.length; i++) {\r\n        for (\r\n          var j = selectedRanges[i].minIndex;\r\n          j <= selectedRanges[i].maxIndex;\r\n          j++\r\n        ) {\r\n          node = stdcm.getNode(j);\r\n          stdcm.setState(node, { bSelected: true });\r\n          selectedNodes.push(node);\r\n        }\r\n      }\r\n\r\n      return selectedNodes;\r\n    },\r\n\r\n    /**\r\n     * Set the overflow mode.\r\n     *\r\n     * @param s {String}\r\n     *   Overflow mode.  The only allowable mode is \"hidden\".\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error if tree overflow mode is other than \"hidden\"\r\n     */\r\n    setOverflow(s) {\r\n      if (s != \"hidden\") {\r\n        throw new Error(\r\n          \"Tree overflow must be hidden.  \" +\r\n            \"The internal elements of it will scroll.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,+BAA+B,EAAE;IAC/CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,KAAK;IAEzB;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,QAAQ,EAAEC,MAAM,EAAE;MAAA,IAAAC,MAAA;MAC1B;MACA;MACA;MACA,IAAI,CAACD,MAAM,EAAE;QACXA,MAAM,GAAG,CAAC,CAAC;MACb;MAEA,IAAI,CAACA,MAAM,CAACE,SAAS,EAAE;QACrBF,MAAM,CAACE,SAAS,GAAG,IAAId,EAAE,CAACO,EAAE,CAACQ,WAAW,CAACC,mBAAmB,CAAC,CAAC;MAChE;MAEA,IAAIJ,MAAM,CAACK,UAAU,KAAKC,SAAS,EAAE;QACnCN,MAAM,CAACK,UAAU,GAAG,CAAC;QACrBL,MAAM,CAACE,SAAS,CAACK,aAAa,CAACP,MAAM,CAACK,UAAU,CAAC;MACnD;MAEA,IAAI,CAACL,MAAM,CAACQ,oBAAoB,EAAE;QAChCR,MAAM,CAACQ,oBAAoB,GACzB,IAAIpB,EAAE,CAAC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"
}