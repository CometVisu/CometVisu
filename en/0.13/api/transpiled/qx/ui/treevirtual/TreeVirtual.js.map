{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "Table",
    "construct",
    "headings",
    "custom",
    "dataModel",
    "treevirtual",
    "SimpleTreeDataModel",
    "treeColumn",
    "undefined",
    "setTreeColumn",
    "treeDataCellRenderer",
    "SimpleTreeDataCellRenderer",
    "defaultDataCellRenderer",
    "DefaultDataCellRenderer",
    "dataRowRenderer",
    "SimpleTreeDataRowRenderer",
    "selectionManager",
    "obj",
    "SelectionManager",
    "tableColumnModel",
    "columnmodel",
    "Resize",
    "tablePaneScroller",
    "pane",
    "Scroller",
    "lang",
    "Type",
    "isString",
    "setColumns",
    "setTree",
    "addListener",
    "e",
    "getDataModel",
    "setData",
    "setColumnVisibilityButtonVisible",
    "length",
    "setRowHeight",
    "setMetaColumnCounts",
    "setOverflow",
    "stdcr",
    "ddcr",
    "tcm",
    "getTableColumnModel",
    "treeCol",
    "getTreeColumn",
    "i",
    "setDataCellRenderer",
    "setDataRowRenderer",
    "setCellEditorFactory",
    "celleditor",
    "NodeEditor",
    "setFocusCellOnPointerMove",
    "setShowCellFocusIndicator",
    "scrollers",
    "_getPaneScrollerArr",
    "setSelectBeforeFocus",
    "events",
    "treeOpenWithContent",
    "treeOpenWhileEmpty",
    "treeClose",
    "changeSelection",
    "statics",
    "SelectionMode",
    "NONE",
    "selection",
    "Model",
    "NO_SELECTION",
    "SINGLE",
    "SINGLE_SELECTION",
    "SINGLE_INTERVAL",
    "SINGLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL",
    "MULTIPLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_TOGGLE",
    "MULTIPLE_INTERVAL_SELECTION_TOGGLE",
    "properties",
    "openCloseClickSelectsRow",
    "check",
    "init",
    "appearance",
    "refine",
    "allowNodeEdit",
    "members",
    "getTableModel",
    "setUseTreeLines",
    "b",
    "dcr",
    "getDataCellRenderer",
    "hasListener",
    "data",
    "firstRow",
    "lastRow",
    "getRowCount",
    "firstColumn",
    "lastColumn",
    "getColumnCount",
    "fireDataEvent",
    "getUseTreeLines",
    "setAlwaysShowOpenCloseSymbol",
    "setExcludeFirstLevelTreeLines",
    "getExcludeFirstLevelTreeLines",
    "getAlwaysShowOpenCloseSymbol",
    "getOpenCloseButtonPosition",
    "node",
    "rowPos",
    "columnPositions",
    "_getColToXPosMap",
    "left",
    "bom",
    "element",
    "Location",
    "getLeft",
    "getContentElement",
    "getDomElement",
    "visX",
    "getColumnWidth",
    "setSelectionMode",
    "mode",
    "getSelectionModel",
    "getSelectionMode",
    "getHierarchy",
    "nodeReference",
    "_this",
    "components",
    "nodeId",
    "Error",
    "addHierarchy",
    "getData",
    "unshift",
    "label",
    "parentNodeId",
    "getSelectedNodes",
    "_onKeyDown",
    "evt",
    "getEnabled",
    "identifier",
    "getKeyIdentifier",
    "consumed",
    "modifiers",
    "getModifiers",
    "dm",
    "focusedCol",
    "getFocusedColumn",
    "focusedRow",
    "getFocusedRow",
    "getNode",
    "bHideOpenClose",
    "type",
    "LEAF",
    "setState",
    "bOpened",
    "moveFocusedCell",
    "event",
    "Dom",
    "CTRL_MASK",
    "BRANCH",
    "setFocusedCell",
    "SHIFT_MASK",
    "rowIndex",
    "getRowFromNodeId",
    "_focusedCol",
    "children",
    "preventDefault",
    "stopPropagation",
    "_onSelectionChanged",
    "_clearSelections",
    "TreeVirtual",
    "selectedNodes",
    "_calculateSelectedNodes",
    "stdcm",
    "selectedRanges",
    "getSelectedRanges",
    "j",
    "minIndex",
    "maxIndex",
    "bSelected",
    "push",
    "s"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/TreeVirtual.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A \"virtual\" tree\n * <p>\n *   A number of convenience methods are available in the following mixins:\n *   <ul>\n *     <li>{@link qx.ui.treevirtual.MNode}</li>\n *     <li>{@link qx.ui.treevirtual.MFamily}</li>\n *   </ul>\n * </p>\n */\nqx.Class.define(\"qx.ui.treevirtual.TreeVirtual\", {\n  extend: qx.ui.table.Table,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param headings {Array | String}\n   *   An array containing a list of strings, one for each column, representing\n   *   the headings for each column.  As a special case, if only one column is\n   *   to exist, the string representing its heading need not be enclosed in an\n   *   array.\n   *\n   * @param custom {Map ? null}\n   *   A map provided (typically) by subclasses, to override the various\n   *   supplemental classes allocated within this constructor.  For normal\n   *   usage, this parameter may be omitted.  Each property must be an object\n   *   instance or a function which returns an object instance, as indicated by\n   *   the defaults listed here:\n   *\n   *   <dl>\n   *     <dt>initiallyHiddenColumns</dt>\n   *       <dd>\n   *         {Array?}\n   *         A list of column numbers that should be initially invisible. Any\n   *         column not mentioned will be initially visible, and if no array\n   *         is provided, all columns will be initially visible.\n   *       </dd>\n   *     <dt>dataModel</dt>\n   *       <dd>new qx.ui.treevirtual.SimpleTreeDataModel()</dd>\n   *     <dt>treeDataCellRenderer</dt>\n   *       <dd>\n   *         Instance of {@link qx.ui.treevirtual.SimpleTreeDataCellRenderer}.\n   *         Custom data cell renderer for the tree column.\n   *       </dd>\n   *     <dt>treeColumn</dt>\n   *       <dd>\n   *         The column number in which the tree is to reside, i.e., which\n   *         column uses the SimpleTreeDataCellRenderer or a subclass of it.\n   *       </dd>\n   *     <dt>defaultDataCellRenderer</dt>\n   *       <dd>\n   *         Instance of {@link qx.ui.treevirtual.DefaultDataCellRenderer}.\n   *         Custom data cell renderer for all columns other than the tree\n   *         column.\n   *       </dd>\n   *     <dt>dataRowRenderer</dt>\n   *       <dd>new qx.ui.treevirtual.SimpleTreeDataRowRenderer()</dd>\n   *     <dt>selectionManager</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.treevirtual.SelectionManager(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tableColumnModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Resize(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneScroller</dt>\n   *       <dd>\n   *         Instance of {@link qx.ui.treevirtual.pane.Scroller}.\n   *         Custom table pane scroller for the tree\n   *         <pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Resize(obj);\n   *         }\n   *       </pre>\n   *       </dd>\n   *   </dl>\n   */\n  construct(headings, custom) {\n    //\n    // Allocate default objects if custom objects are not specified\n    //\n    if (!custom) {\n      custom = {};\n    }\n\n    if (!custom.dataModel) {\n      custom.dataModel = new qx.ui.treevirtual.SimpleTreeDataModel();\n    }\n\n    if (custom.treeColumn === undefined) {\n      custom.treeColumn = 0;\n      custom.dataModel.setTreeColumn(custom.treeColumn);\n    }\n\n    if (!custom.treeDataCellRenderer) {\n      custom.treeDataCellRenderer =\n        new qx.ui.treevirtual.SimpleTreeDataCellRenderer();\n    }\n\n    if (!custom.defaultDataCellRenderer) {\n      custom.defaultDataCellRenderer =\n        new qx.ui.treevirtual.DefaultDataCellRenderer();\n    }\n\n    if (!custom.dataRowRenderer) {\n      custom.dataRowRenderer =\n        new qx.ui.treevirtual.SimpleTreeDataRowRenderer();\n    }\n\n    if (!custom.selectionManager) {\n      custom.selectionManager = function (obj) {\n        return new qx.ui.treevirtual.SelectionManager(obj);\n      };\n    }\n\n    if (!custom.tableColumnModel) {\n      custom.tableColumnModel = function (obj) {\n        return new qx.ui.table.columnmodel.Resize(obj);\n      };\n    }\n\n    if (!custom.tablePaneScroller) {\n      custom.tablePaneScroller = function (obj) {\n        return new qx.ui.treevirtual.pane.Scroller(obj);\n      };\n    }\n\n    // Specify the column headings.  We accept a single string (one single\n    // column) or an array of strings (one or more columns).\n    if (qx.lang.Type.isString(headings)) {\n      headings = [headings];\n    }\n\n    custom.dataModel.setColumns(headings);\n    custom.dataModel.setTreeColumn(custom.treeColumn);\n\n    // Save a reference to the tree with the data model\n    custom.dataModel.setTree(this);\n\n    // Call our superclass constructor\n    super(custom.dataModel, custom);\n\n    // Arrange to redisplay edited data following editing\n    this.addListener(\"dataEdited\", e => {\n      this.getDataModel().setData();\n    });\n\n    // By default, present the column visibility button only if there are\n    // multiple columns.\n    this.setColumnVisibilityButtonVisible(headings.length > 1);\n\n    // Set sizes\n    this.setRowHeight(16);\n    this.setMetaColumnCounts(headings.length > 1 ? [1, -1] : [1]);\n\n    // Overflow on trees is always hidden.  The internal elements scroll.\n    this.setOverflow(\"hidden\");\n\n    // Set the data cell render.  We use the SimpleTreeDataCellRenderer for the\n    // tree column, and our DefaultDataCellRenderer for all other columns.\n    var stdcr = custom.treeDataCellRenderer;\n    var ddcr = custom.defaultDataCellRenderer;\n    var tcm = this.getTableColumnModel();\n    var treeCol = this.getDataModel().getTreeColumn();\n\n    for (var i = 0; i < headings.length; i++) {\n      tcm.setDataCellRenderer(i, i == treeCol ? stdcr : ddcr);\n    }\n\n    // Set the data row renderer.\n    this.setDataRowRenderer(custom.dataRowRenderer);\n\n    // Set the editor for the tree column, for use if allowNodeEdit is true\n    tcm.setCellEditorFactory(\n      treeCol,\n      new qx.ui.treevirtual.celleditor.NodeEditor()\n    );\n\n    // Move the focus with the mouse.  This controls the ROW focus indicator.\n    this.setFocusCellOnPointerMove(true);\n\n    // In a tree we don't typically want a visible cell focus indicator\n    this.setShowCellFocusIndicator(false);\n\n    // Get the list of pane scrollers\n    var scrollers = this._getPaneScrollerArr();\n\n    // For each scroller...\n    for (var i = 0; i < scrollers.length; i++) {\n      // Set the pane scrollers to handle the selection before\n      // displaying the focus, so we can manipulate the selected icon.\n      scrollers[i].setSelectBeforeFocus(true);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when a tree branch which already has content is opened.\n     *\n     * Event data: the node object from the data model (of the node\n     * being opened) as described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    treeOpenWithContent: \"qx.event.type.Data\",\n\n    /**\n     * Fired when an empty tree branch is opened.\n     *\n     * Event data: the node object from the data model (of the node\n     * being opened) as described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    treeOpenWhileEmpty: \"qx.event.type.Data\",\n\n    /**\n     * Fired when a tree branch is closed.\n     *\n     * Event data: the node object from the data model (of the node\n     * being closed) as described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    treeClose: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the selected rows change.\n     *\n     * Event data: An array of node objects (the selected rows' nodes)\n     * from the data model.  Each node object is described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Selection Modes {int}\n     *\n     *   NONE\n     *     Nothing can ever be selected.\n     *\n     *   SINGLE\n     *     Allow only one selected item.\n     *\n     *   SINGLE_INTERVAL\n     *     Allow one contiguous interval of selected items.\n     *\n     *   MULTIPLE_INTERVAL\n     *     Allow any set of selected items, whether contiguous or not.\n     *\n     *   MULTIPLE_INTERVAL_TOGGLE\n     *     Like MULTIPLE_INTERVAL, but clicking on an item toggles its selection state.\n     */\n    SelectionMode: {\n      NONE: qx.ui.table.selection.Model.NO_SELECTION,\n      SINGLE: qx.ui.table.selection.Model.SINGLE_SELECTION,\n      SINGLE_INTERVAL: qx.ui.table.selection.Model.SINGLE_INTERVAL_SELECTION,\n      MULTIPLE_INTERVAL:\n        qx.ui.table.selection.Model.MULTIPLE_INTERVAL_SELECTION,\n      MULTIPLE_INTERVAL_TOGGLE:\n        qx.ui.table.selection.Model.MULTIPLE_INTERVAL_SELECTION_TOGGLE\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Whether a click on the open/close button should also cause selection of\n     * the row.\n     */\n    openCloseClickSelectsRow: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    appearance: {\n      refine: true,\n      init: \"treevirtual\"\n    },\n\n    allowNodeEdit: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Return the data model for this tree.\n     *\n     * @return {qx.ui.table.ITableModel} The data model.\n     */\n    getDataModel() {\n      return this.getTableModel();\n    },\n\n    /**\n     * Set whether lines linking tree children shall be drawn on the tree.\n     * Note that not all themes support tree lines.  As of the time of this\n     * writing, the Classic theme supports tree lines (and uses +/- icons\n     * which lend themselves to tree lines), while the Modern theme, which\n     * uses right-facing and downward-facing arrows instead of +/-, does not.\n     *\n     * @param b {Boolean}\n     *   <i>true</i> if tree lines should be shown; <i>false</i> otherwise.\n     *\n     */\n    setUseTreeLines(b) {\n      var dataModel = this.getDataModel();\n      var treeCol = dataModel.getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      dcr.setUseTreeLines(b);\n\n      // Inform the listeners\n      if (dataModel.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: dataModel.getRowCount() - 1,\n          firstColumn: 0,\n          lastColumn: dataModel.getColumnCount() - 1\n        };\n\n        dataModel.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Get whether lines linking tree children shall be drawn on the tree.\n     *\n     * @return {Boolean}\n     *   <i>true</i> if tree lines are in use;\n     *   <i>false</i> otherwise.\n     */\n    getUseTreeLines() {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      return dcr.getUseTreeLines();\n    },\n\n    /**\n     * Set whether the open/close button should be displayed on a branch,\n     * even if the branch has no children.\n     *\n     * @param b {Boolean}\n     *   <i>true</i> if the open/close button should be shown;\n     *   <i>false</i> otherwise.\n     *\n     */\n    setAlwaysShowOpenCloseSymbol(b) {\n      var dataModel = this.getDataModel();\n      var treeCol = dataModel.getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      dcr.setAlwaysShowOpenCloseSymbol(b);\n\n      // Inform the listeners\n      if (dataModel.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: dataModel.getRowCount() - 1,\n          firstColumn: 0,\n          lastColumn: dataModel.getColumnCount() - 1\n        };\n\n        dataModel.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Set whether drawing of first-level tree-node lines are disabled even\n     * if drawing of tree lines is enabled.\n     *\n     * @param b {Boolean}\n     *   <i>true</i> if first-level tree lines should be disabled;\n     *   <i>false</i> for normal operation.\n     *\n     */\n    setExcludeFirstLevelTreeLines(b) {\n      var dataModel = this.getDataModel();\n      var treeCol = dataModel.getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      dcr.setExcludeFirstLevelTreeLines(b);\n\n      // Inform the listeners\n      if (dataModel.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: dataModel.getRowCount() - 1,\n          firstColumn: 0,\n          lastColumn: dataModel.getColumnCount() - 1\n        };\n\n        dataModel.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n    /**\n     * Get whether drawing of first-level tree lines should be disabled even\n     * if drawing of tree lines is enabled.\n     * (See also {@link #getUseTreeLines})\n     *\n     * @return {Boolean}\n     *   <i>true</i> if tree lines are in use;\n     *   <i>false</i> otherwise.\n     */\n    getExcludeFirstLevelTreeLines() {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      return dcr.getExcludeFirstLevelTreeLines();\n    },\n\n    /**\n     * Set whether the open/close button should be displayed on a branch,\n     * even if the branch has no children.\n     *\n     * @return {Boolean}\n     *   <i>true</i> if tree lines are in use;\n     *   <i>false</i> otherwise.\n     */\n    getAlwaysShowOpenCloseSymbol() {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      return dcr.getAlwaysShowOpenCloseSymbol();\n    },\n\n    /**\n     * Returns the position of the open/close button for a node\n     *\n     * @return {Object} The position of the open/close button within the tree row\n     */\n    getOpenCloseButtonPosition(node) {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      var rowPos = dcr.getOpenCloseButtonPosition(this, node);\n\n      // Get the order of the columns\n      var tcm = this.getTableColumnModel();\n      var columnPositions = tcm._getColToXPosMap();\n\n      // Calculate the position of the beginning of the tree column\n      var left = qx.bom.element.Location.getLeft(\n        this.getContentElement().getDomElement()\n      );\n\n      for (var i = 0; i < columnPositions[treeCol].visX; i++) {\n        left += tcm.getColumnWidth(columnPositions[i].visX);\n      }\n      rowPos.left += left;\n      return rowPos;\n    },\n\n    /**\n     * Set the selection mode.\n     *\n     * @param mode {Integer}\n     *   The selection mode to be used.  It may be any of:\n     *     <pre>\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:\n     *          Nothing can ever be selected.\n     *\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE\n     *          Allow only one selected item.\n     *\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL\n     *          Allow one contiguous interval of selected items.\n     *\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL\n     *          Allow any selected items, whether contiguous or not.\n     *     </pre>\n     *\n     */\n    setSelectionMode(mode) {\n      this.getSelectionModel().setSelectionMode(mode);\n    },\n\n    /**\n     * Get the selection mode currently in use.\n     *\n     * @return {Integer}\n     *   One of the values documented in {@link #setSelectionMode}\n     */\n    getSelectionMode() {\n      return this.getSelectionModel().getSelectionMode();\n    },\n\n    /**\n     * Obtain the entire hierarchy of labels from the root down to the\n     * specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the hierarchy is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Array}\n     *   The returned array contains one string for each label in the\n     *   hierarchy of the node specified by the parameter.  Element 0 of the\n     *   array contains the label of the root node, element 1 contains the\n     *   label of the node immediately below root in the specified node's\n     *   hierarchy, etc., down to the last element in the array contain the\n     *   label of the node referenced by the parameter.\n     */\n    getHierarchy(nodeReference) {\n      var _this = this;\n      var components = [];\n      var node;\n      var nodeId;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n        nodeId = node.nodeId;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      function addHierarchy(nodeId) {\n        // If we're at the root...\n        if (!nodeId) {\n          // ... then we're done\n          return;\n        }\n\n        // Get the requested node\n        var node = _this.getDataModel().getData()[nodeId];\n\n        // Add its label to the hierarchy components\n        components.unshift(node.label);\n\n        // Call recursively to our parent node.\n        addHierarchy(node.parentNodeId);\n      }\n\n      addHierarchy(nodeId);\n      return components;\n    },\n\n    /**\n     * Return the nodes that are currently selected.\n     *\n     * @return {Array}\n     *   An array containing the nodes that are currently selected.\n     */\n    getSelectedNodes() {\n      return this.getDataModel().getSelectedNodes();\n    },\n\n    /**\n     * Event handler. Called when a key was pressed.\n     *\n     * We handle the Enter key to toggle opened/closed tree state.  All\n     * other keydown events are passed to our superclass.\n     *\n     * @param evt {Map}\n     *   The event.\n     *\n     */\n    _onKeyDown(evt) {\n      if (!this.getEnabled()) {\n        return;\n      }\n\n      var identifier = evt.getKeyIdentifier();\n\n      var consumed = false;\n      var modifiers = evt.getModifiers();\n\n      if (modifiers == 0) {\n        switch (identifier) {\n          case \"Enter\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            var focusedCol = this.getFocusedColumn();\n            var treeCol = dm.getTreeColumn();\n\n            if (focusedCol == treeCol) {\n              // Get the focused node\n              var focusedRow = this.getFocusedRow();\n              var node = dm.getNode(focusedRow);\n\n              if (\n                !node.bHideOpenClose &&\n                node.type != qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF\n              ) {\n                dm.setState(node, { bOpened: !node.bOpened });\n              }\n\n              consumed = true;\n            }\n            break;\n\n          case \"Left\":\n            this.moveFocusedCell(-1, 0);\n            break;\n\n          case \"Right\":\n            this.moveFocusedCell(1, 0);\n            break;\n        }\n      } else if (modifiers == qx.event.type.Dom.CTRL_MASK) {\n        switch (identifier) {\n          case \"Left\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            var focusedRow = this.getFocusedRow();\n            var treeCol = dm.getTreeColumn();\n            var node = dm.getNode(focusedRow);\n\n            // If it's an open branch and open/close is allowed...\n            if (\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\n              !node.bHideOpenClose &&\n              node.bOpened\n            ) {\n              // ... then close it\n              dm.setState(node, { bOpened: !node.bOpened });\n            }\n\n            // Reset the focus to the current node\n            this.setFocusedCell(treeCol, focusedRow, true);\n\n            consumed = true;\n            break;\n\n          case \"Right\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            focusedRow = this.getFocusedRow();\n            treeCol = dm.getTreeColumn();\n            node = dm.getNode(focusedRow);\n\n            // If it's a closed branch and open/close is allowed...\n            if (\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\n              !node.bHideOpenClose &&\n              !node.bOpened\n            ) {\n              // ... then open it\n              dm.setState(node, { bOpened: !node.bOpened });\n            }\n\n            // Reset the focus to the current node\n            this.setFocusedCell(treeCol, focusedRow, true);\n\n            consumed = true;\n            break;\n        }\n      } else if (modifiers == qx.event.type.Dom.SHIFT_MASK) {\n        switch (identifier) {\n          case \"Left\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            var focusedRow = this.getFocusedRow();\n            var treeCol = dm.getTreeColumn();\n            var node = dm.getNode(focusedRow);\n\n            // If we're not at the top-level already...\n            if (node.parentNodeId) {\n              // Find out what rendered row our parent node is at\n              var rowIndex = dm.getRowFromNodeId(node.parentNodeId);\n\n              // Set the focus to our parent\n              this.setFocusedCell(this._focusedCol, rowIndex, true);\n            }\n\n            consumed = true;\n            break;\n\n          case \"Right\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            focusedRow = this.getFocusedRow();\n            treeCol = dm.getTreeColumn();\n            node = dm.getNode(focusedRow);\n\n            // If we're on a branch and open/close is allowed...\n            if (\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\n              !node.bHideOpenClose\n            ) {\n              // ... then first ensure the branch is open\n              if (!node.bOpened) {\n                dm.setState(node, { bOpened: !node.bOpened });\n              }\n\n              // If this node has children...\n              if (node.children.length > 0) {\n                // ... then move the focus to the first child\n                this.moveFocusedCell(0, 1);\n              }\n            }\n\n            consumed = true;\n            break;\n        }\n      }\n\n      // Was this one of our events that we handled?\n      if (consumed) {\n        // Yup.  Don't propagate it.\n        evt.preventDefault();\n        evt.stopPropagation();\n      } else {\n        // It's not one of ours.  Let our superclass handle this event\n        super._onKeyDown(evt);\n      }\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     *\n     * @param evt {Map}\n     *   The event.\n     *\n     */\n    _onSelectionChanged(evt) {\n      // Clear the old list of selected nodes\n      this.getDataModel()._clearSelections();\n\n      // If selections are allowed, pass an event to our listeners\n      if (\n        this.getSelectionMode() !=\n        qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE\n      ) {\n        var selectedNodes = this._calculateSelectedNodes();\n\n        // Get the now-focused\n        this.fireDataEvent(\"changeSelection\", selectedNodes);\n      }\n\n      // Call the superclass method\n      super._onSelectionChanged(evt);\n    },\n\n    /**\n     * Calculate and return the set of nodes which are currently selected by\n     * the user, on the screen.  In the process of calculating which nodes\n     * are selected, the nodes corresponding to the selected rows on the\n     * screen are marked as selected by setting their <i>bSelected</i>\n     * property to true, and all previously-selected nodes have their\n     * <i>bSelected</i> property reset to false.\n     *\n     * @return {Array}\n     *   An array of nodes matching the set of rows which are selected on the\n     *   screen.\n     */\n    _calculateSelectedNodes() {\n      // Create an array of nodes that are now selected\n      var stdcm = this.getDataModel();\n      var selectedRanges = this.getSelectionModel().getSelectedRanges();\n      var selectedNodes = [];\n      var node;\n\n      for (var i = 0; i < selectedRanges.length; i++) {\n        for (\n          var j = selectedRanges[i].minIndex;\n          j <= selectedRanges[i].maxIndex;\n          j++\n        ) {\n          node = stdcm.getNode(j);\n          stdcm.setState(node, { bSelected: true });\n          selectedNodes.push(node);\n        }\n      }\n\n      return selectedNodes;\n    },\n\n    /**\n     * Set the overflow mode.\n     *\n     * @param s {String}\n     *   Overflow mode.  The only allowable mode is \"hidden\".\n     *\n     *\n     * @throws {Error}\n     *   Error if tree overflow mode is other than \"hidden\"\n     */\n    setOverflow(s) {\n      if (s != \"hidden\") {\n        throw new Error(\n          \"Tree overflow must be hidden.  \" +\n            \"The internal elements of it will scroll.\"\n        );\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,+BAA+B,EAAE;IAC/CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,KAAK;IAEzB;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,QAAQ,EAAEC,MAAM,EAAE;MAAA;MAC1B;MACA;MACA;MACA,IAAI,CAACA,MAAM,EAAE;QACXA,MAAM,GAAG,CAAC,CAAC;MACb;MAEA,IAAI,CAACA,MAAM,CAACC,SAAS,EAAE;QACrBD,MAAM,CAACC,SAAS,GAAG,IAAIb,EAAE,CAACO,EAAE,CAACO,WAAW,CAACC,mBAAmB,EAAE;MAChE;MAEA,IAAIH,MAAM,CAACI,UAAU,KAAKC,SAAS,EAAE;QACnCL,MAAM,CAACI,UAAU,GAAG,CAAC;QACrBJ,MAAM,CAACC,SAAS,CAACK,aAAa,CAACN,MAAM,CAACI,UAAU,CAAC;MACnD;MAEA,IAAI,CAACJ,MAAM,CAACO,oBAAoB,EAAE;QAChCP,MAAM,CAACO,oBAAoB,GACzB,IAAInB,EAAE,CAACO,EAAE,CAACO,WAAW,CAA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,IAAI,CAAC;MACzC;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,mBAAmB,EAAE,oBAAoB;MAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,EAAE,oBAAoB;MAExC;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,EAAE,oBAAoB;MAE/B;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,eAAe,EAAE;IACnB,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,EAAE;QACbC,IAAI,EAAExE,EAAE,CAACO,EAAE,CAACC,KAAK,CAACiE,SAAS,CAACC,KAAK,CAACC,YAAY;QAC9CC,MAAM,EAAE5E,EAAE,CAACO,EAAE,CAACC,KAAK,CAACiE,SAAS,CAACC,KAAK,CAACG,gBAAgB;QACpDC,eAAe,EAAE9E,EAAE,CAACO,EAAE,CAACC,KAAK,CAACiE,SAAS,CAACC,KAAK,CAACK,yBAAyB;QACtEC,iBAAiB,EACfhF,EAAE,CAACO,EAAE,CAACC,KAAK,CAACiE,SAAS,CAACC,KAAK,CAACO,2BAA2B;QACzDC,wBAAwB,EACtBlF,EAAE,CAACO,EAAE,CAACC,KAAK,CAACiE,SAAS,CAACC,KAAK,CAACS;MAChC;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;AACA;MACIC,wBAAwB,EAAE;QACxBC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE;MACR,CAAC;MAEDC,UAAU,EAAE;QACVC,MAAM,EAAE,IAAI;QACZF,IAAI,EAAE;MACR,CAAC;MAEDG,aAAa,EAAE;QACbJ,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE;MACR;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEI,OAAO,EAAE;MACP;AACJ;AACA;A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"
}