{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "familyGetFirstChild",
    "nodeReference",
    "node",
    "_typeof",
    "getTableModel",
    "getData",
    "Error",
    "children",
    "length",
    "familyGetLastChild",
    "familyGetNextSibling",
    "nodeId",
    "nodes",
    "myNodeId",
    "parentChildren",
    "parentNodeId",
    "i",
    "familyGetPrevSibling",
    "ui",
    "treevirtual",
    "MFamily"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/MFamily.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A set of methods which may be used to retrieve various siblings of nodes.\r\n */\r\nqx.Mixin.define(\"qx.ui.treevirtual.MFamily\", {\r\n  members: {\r\n    /**\r\n     * Get the first child of the specified node.\r\n     *\r\n     * @param nodeReference {Object | Integer}\r\n     *   The node for which the first child is desired.  The node can be\r\n     *   represented either by the node object, or the node id (as would have\r\n     *   been returned by addBranch(), addLeaf(), etc.)\r\n     *\r\n     * @return {Integer}\r\n     *   The node id of the first child.\r\n     */\r\n    familyGetFirstChild(nodeReference) {\r\n      var node;\r\n\r\n      if (typeof nodeReference == \"object\") {\r\n        node = nodeReference;\r\n      } else if (typeof nodeReference == \"number\") {\r\n        node = this.getTableModel().getData()[nodeReference];\r\n      } else {\r\n        throw new Error(\"Expected node object or node id\");\r\n      }\r\n\r\n      if (node.children.length > 0) {\r\n        return node.children[0];\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Get the last child of the specified node.\r\n     *\r\n     * @param nodeReference {Object | Integer}\r\n     *   The node for which the last child is desired.  The node can be\r\n     *   represented either by the node object, or the node id (as would have\r\n     *   been returned by addBranch(), addLeaf(), etc.)\r\n     *\r\n     * @return {Integer}\r\n     *   The node id of the last child.\r\n     */\r\n    familyGetLastChild(nodeReference) {\r\n      var node;\r\n\r\n      if (typeof nodeReference == \"object\") {\r\n        node = nodeReference;\r\n      } else if (typeof nodeReference == \"number\") {\r\n        node = this.getTableModel().getData()[nodeReference];\r\n      } else {\r\n        throw new Error(\"Expected node object or node id\");\r\n      }\r\n\r\n      if (node.children.length > 0) {\r\n        return node.children[node.children.length - 1];\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Get the next sibling of the specified node.\r\n     *\r\n     * @param nodeReference {Object | Integer}\r\n     *   The node for which the next sibling is desired.  The node can be\r\n     *   represented either by the node object, or the node id (as would have\r\n     *   been returned by addBranch(), addLeaf(), etc.)\r\n     *\r\n     * @return {Integer}\r\n     *   The node id of the next sibling.\r\n     */\r\n    familyGetNextSibling(nodeReference) {\r\n      var node;\r\n      var nodeId;\r\n      var nodes = this.getTableModel().getData();\r\n\r\n      if (typeof nodeReference == \"object\") {\r\n        node = nodeReference;\r\n      } else if (typeof nodeReference == \"number\") {\r\n        nodeId = nodeReference;\r\n        node = nodes[nodeId];\r\n      } else {\r\n        throw new Error(\"Expected node object or node id\");\r\n      }\r\n\r\n      var myNodeId = node.nodeId;\r\n      var parentChildren = nodes[node.parentNodeId].children;\r\n\r\n      // Find this node id in our parent's children array\r\n      for (var i = 0; i < parentChildren.length; i++) {\r\n        // Is this our id?\r\n        if (parentChildren[i] == myNodeId) {\r\n          // Yup.  Ensure there is a next sibling.\r\n          if (i < parentChildren.length - 1) {\r\n            // There is.  Return the next sibling.\r\n            return parentChildren[i + 1];\r\n          }\r\n\r\n          // There's no next sibling\r\n          return null;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the previous sibling of the specified node.\r\n     *\r\n     * @param nodeReference {Object | Integer}\r\n     *   The node for which the previous sibling is desired.  The node can be\r\n     *   represented either by the node object, or the node id (as would have\r\n     *   been returned by addBranch(), addLeaf(), etc.)\r\n     *\r\n     * @return {Integer}\r\n     *   The node id of the previous sibling.\r\n     */\r\n    familyGetPrevSibling(nodeReference) {\r\n      var node;\r\n      var nodeId;\r\n      var nodes = this.getTableModel().getData();\r\n\r\n      if (typeof nodeReference == \"object\") {\r\n        node = nodeReference;\r\n      } else if (typeof nodeReference == \"number\") {\r\n        nodeId = nodeReference;\r\n        node = nodes[nodeId];\r\n      } else {\r\n        throw new Error(\"Expected node object or node id\");\r\n      }\r\n\r\n      var myNodeId = node.nodeId;\r\n      var parentChildren = nodes[node.parentNodeId].children;\r\n\r\n      // Find this node id in our parent's children array\r\n      for (var i = 0; i < parentChildren.length; i++) {\r\n        // Is this our id?\r\n        if (parentChildren[i] == myNodeId) {\r\n          // Yup.  Ensure there is a previous sibling.\r\n          if (i > 0) {\r\n            // There is.  Return the previous sibling.\r\n            return parentChildren[i - 1];\r\n          }\r\n\r\n          // There's no previous sibling\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}