{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "familyGetFirstChild",
    "nodeReference",
    "node",
    "getTableModel",
    "getData",
    "Error",
    "children",
    "length",
    "familyGetLastChild",
    "familyGetNextSibling",
    "nodeId",
    "nodes",
    "myNodeId",
    "parentChildren",
    "parentNodeId",
    "i",
    "familyGetPrevSibling",
    "ui",
    "treevirtual",
    "MFamily"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/MFamily.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A set of methods which may be used to retrieve various siblings of nodes.\n */\nqx.Mixin.define(\"qx.ui.treevirtual.MFamily\", {\n  members: {\n    /**\n     * Get the first child of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the first child is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the first child.\n     */\n    familyGetFirstChild(nodeReference) {\n      var node;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n      } else if (typeof nodeReference == \"number\") {\n        node = this.getTableModel().getData()[nodeReference];\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      if (node.children.length > 0) {\n        return node.children[0];\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the last child of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the last child is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the last child.\n     */\n    familyGetLastChild(nodeReference) {\n      var node;\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n      } else if (typeof nodeReference == \"number\") {\n        node = this.getTableModel().getData()[nodeReference];\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      if (node.children.length > 0) {\n        return node.children[node.children.length - 1];\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the next sibling of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the next sibling is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the next sibling.\n     */\n    familyGetNextSibling(nodeReference) {\n      var node;\n      var nodeId;\n      var nodes = this.getTableModel().getData();\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n        node = nodes[nodeId];\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      var myNodeId = node.nodeId;\n      var parentChildren = nodes[node.parentNodeId].children;\n\n      // Find this node id in our parent's children array\n      for (var i = 0; i < parentChildren.length; i++) {\n        // Is this our id?\n        if (parentChildren[i] == myNodeId) {\n          // Yup.  Ensure there is a next sibling.\n          if (i < parentChildren.length - 1) {\n            // There is.  Return the next sibling.\n            return parentChildren[i + 1];\n          }\n\n          // There's no next sibling\n          return null;\n        }\n      }\n    },\n\n    /**\n     * Get the previous sibling of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the previous sibling is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the previous sibling.\n     */\n    familyGetPrevSibling(nodeReference) {\n      var node;\n      var nodeId;\n      var nodes = this.getTableModel().getData();\n\n      if (typeof nodeReference == \"object\") {\n        node = nodeReference;\n      } else if (typeof nodeReference == \"number\") {\n        nodeId = nodeReference;\n        node = nodes[nodeId];\n      } else {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      var myNodeId = node.nodeId;\n      var parentChildren = nodes[node.parentNodeId].children;\n\n      // Find this node id in our parent's children array\n      for (var i = 0; i < parentChildren.length; i++) {\n        // Is this our id?\n        if (parentChildren[i] == myNodeId) {\n          // Yup.  Ensure there is a previous sibling.\n          if (i > 0) {\n            // There is.  Return the previous sibling.\n            return parentChildren[i - 1];\n          }\n\n          // There's no previous sibling\n          return null;\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}