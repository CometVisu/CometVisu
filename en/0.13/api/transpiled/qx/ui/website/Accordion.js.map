{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Tabs",
    "statics",
    "_templates",
    "button",
    "accordion",
    "preselected",
    "Accordion",
    "setConfig",
    "init",
    "construct",
    "selector",
    "context",
    "defer",
    "qxWeb",
    "$attach"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/website/Accordion.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * The Accordion is a group of vertically stacked panels (here called pages),\n * each with a header.\n * By default, only one page is visible while the others are collapsed.\n * Clicking or tapping a collapsed page's header will expand it while collapsing the\n * previously expanded page.\n *\n * <h2>Markup</h2>\n * The Accordion contains an unordered list element (<code>ul</code>), which\n * will be created if not already present.\n * Headers and pages are list items (<code>li</code>). Each header must contain\n * a button with an <code>accordionPage</code> data attribute where the value is a\n * CSS selector string identifying the corresponding page. Headers and pages\n * will not be created automatically. They can be predefined in the DOM before\n * the <code>q().accordion()</code> factory method is called, or added programmatically.\n *\n * <h2>CSS Classes</h2>\n * <table>\n *   <thead>\n *     <tr>\n *       <td>Class Name</td>\n *       <td>Applied to</td>\n *       <td>Description</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td><code>qx-accordion</code></td>\n *       <td>Container element</td>\n *       <td>Identifies the Accordion widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-accordion-button</code></td>\n *       <td>Page header (<code>li</code>)</td>\n *       <td>Identifies and styles the page headers</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-accordion-button-active</code></td>\n *       <td>Page header (<code>li</code>)</td>\n *       <td>Identifies and styles the header of the currently expanded page. Applied in addition to <code>qx-accordion-button</code></td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-accordion-page</code></td>\n *       <td>Page (<code>li</code>)</td>\n *       <td>Identifies and styles the pages</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * <h2 class=\"widget-markup\">Generated DOM Structure</h2>\n *\n * @require(qx.module.util.Object)\n *\n * @group (Widget)\n */\nqx.Bootstrap.define(\"qx.ui.website.Accordion\", {\n  extend: qx.ui.website.Tabs,\n\n  statics: {\n    /**\n     * *button*\n     *\n     * Template used by {@link qx.ui.website.Tabs#addButton} to create a new button.\n     *\n     * Default value: <pre><li><button>{{{content}}}</button></li></pre>\n     */\n    _templates: {\n      button: \"<li><button>{{{content}}}</button></li>\"\n    },\n\n    /**\n     * Factory method which converts the current collection into a collection of\n     * accordion widgets.\n     *\n     * @param preselected {Integer?} The (zero-based) index of the panel that\n     * should initially be opened\n     * @return {qx.ui.website.Accordion} A new Accordion collection.\n     * @attach {qxWeb}\n     */\n    accordion(preselected) {\n      var accordion = new qx.ui.website.Accordion(this);\n      accordion.setConfig(\"orientation\", \"vertical\");\n      if (preselected) {\n        accordion.setConfig(\"preselected\", preselected);\n      }\n      accordion.init();\n\n      return accordion;\n    }\n  },\n\n  construct(selector, context) {\n    super(selector, context);\n  },\n\n  defer(statics) {\n    qxWeb.$attach({\n      accordion: statics.accordion\n    });\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,yBAApB,EAA+C;IAC7CC,MAAM,EAAEL,EAAE,CAACM,EAAH,CAAMC,OAAN,CAAcC,IADuB;IAG7CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,EAAE;QACVC,MAAM,EAAE;MADE,CARL;;MAYP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SArBO,qBAqBGC,WArBH,EAqBgB;QACrB,IAAID,SAAS,GAAG,IAAIZ,EAAE,CAACM,EAAH,CAAMC,OAAN,CAAcO,SAAlB,CAA4B,IAA5B,CAAhB;QACAF,SAAS,CAACG,SAAV,CAAoB,aAApB,EAAmC,UAAnC;;QACA,IAAIF,WAAJ,EAAiB;UACfD,SAAS,CAACG,SAAV,CAAoB,aAApB,EAAmCF,WAAnC;QACD;;QACDD,SAAS,CAACI,IAAV;QAEA,OAAOJ,SAAP;MACD;IA9BM,CAHoC;IAoC7CK,SApC6C,qBAoCnCC,QApCmC,EAoCzBC,OApCyB,EAoChB;MAC3B,0CAAMD,QAAN,EAAgBC,OAAhB;IACD,CAtC4C;IAwC7CC,KAxC6C,iBAwCvCX,OAxCuC,EAwC9B;MACbY,KAAK,CAACC,OAAN,CAAc;QACZV,SAAS,EAAEH,OAAO,CAACG;MADP,CAAd;IAGD;EA5C4C,CAA/C;EAzEAZ,EAAE,CAACM,EAAH,CAAMC,OAAN,CAAcO,SAAd,CAAwBX,aAAxB,GAAwCA,aAAxC"
}