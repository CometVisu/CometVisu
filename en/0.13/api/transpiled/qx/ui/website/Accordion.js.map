{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Tabs",
    "statics",
    "_templates",
    "button",
    "accordion",
    "preselected",
    "Accordion",
    "setConfig",
    "init",
    "construct",
    "selector",
    "context",
    "constructor",
    "call",
    "defer",
    "qxWeb",
    "$attach"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/website/Accordion.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The Accordion is a group of vertically stacked panels (here called pages),\r\n * each with a header.\r\n * By default, only one page is visible while the others are collapsed.\r\n * Clicking or tapping a collapsed page's header will expand it while collapsing the\r\n * previously expanded page.\r\n *\r\n * <h2>Markup</h2>\r\n * The Accordion contains an unordered list element (<code>ul</code>), which\r\n * will be created if not already present.\r\n * Headers and pages are list items (<code>li</code>). Each header must contain\r\n * a button with an <code>accordionPage</code> data attribute where the value is a\r\n * CSS selector string identifying the corresponding page. Headers and pages\r\n * will not be created automatically. They can be predefined in the DOM before\r\n * the <code>q().accordion()</code> factory method is called, or added programmatically.\r\n *\r\n * <h2>CSS Classes</h2>\r\n * <table>\r\n *   <thead>\r\n *     <tr>\r\n *       <td>Class Name</td>\r\n *       <td>Applied to</td>\r\n *       <td>Description</td>\r\n *     </tr>\r\n *   </thead>\r\n *   <tbody>\r\n *     <tr>\r\n *       <td><code>qx-accordion</code></td>\r\n *       <td>Container element</td>\r\n *       <td>Identifies the Accordion widget</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-accordion-button</code></td>\r\n *       <td>Page header (<code>li</code>)</td>\r\n *       <td>Identifies and styles the page headers</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-accordion-button-active</code></td>\r\n *       <td>Page header (<code>li</code>)</td>\r\n *       <td>Identifies and styles the header of the currently expanded page. Applied in addition to <code>qx-accordion-button</code></td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-accordion-page</code></td>\r\n *       <td>Page (<code>li</code>)</td>\r\n *       <td>Identifies and styles the pages</td>\r\n *     </tr>\r\n *   </tbody>\r\n * </table>\r\n *\r\n * <h2 class=\"widget-markup\">Generated DOM Structure</h2>\r\n *\r\n * @require(qx.module.util.Object)\r\n *\r\n * @group (Widget)\r\n */\r\nqx.Bootstrap.define(\"qx.ui.website.Accordion\", {\r\n  extend: qx.ui.website.Tabs,\r\n\r\n  statics: {\r\n    /**\r\n     * *button*\r\n     *\r\n     * Template used by {@link qx.ui.website.Tabs#addButton} to create a new button.\r\n     *\r\n     * Default value: <pre><li><button>{{{content}}}</button></li></pre>\r\n     */\r\n    _templates: {\r\n      button: \"<li><button>{{{content}}}</button></li>\"\r\n    },\r\n\r\n    /**\r\n     * Factory method which converts the current collection into a collection of\r\n     * accordion widgets.\r\n     *\r\n     * @param preselected {Integer?} The (zero-based) index of the panel that\r\n     * should initially be opened\r\n     * @return {qx.ui.website.Accordion} A new Accordion collection.\r\n     * @attach {qxWeb}\r\n     */\r\n    accordion(preselected) {\r\n      var accordion = new qx.ui.website.Accordion(this);\r\n      accordion.setConfig(\"orientation\", \"vertical\");\r\n      if (preselected) {\r\n        accordion.setConfig(\"preselected\", preselected);\r\n      }\r\n      accordion.init();\r\n\r\n      return accordion;\r\n    }\r\n  },\r\n\r\n  construct(selector, context) {\r\n    super(selector, context);\r\n  },\r\n\r\n  defer(statics) {\r\n    qxWeb.$attach({\r\n      accordion: statics.accordion\r\n    });\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,yBAAyB,EAAE;IAC7CC,MAAM,EAAEL,EAAE,CAACM,EAAE,CAACC,OAAO,CAACC,IAAI;IAE1BC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,EAAE;QACVC,MAAM,EAAE;MACV,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,WAAAA,UAACC,WAAW,EAAE;QACrB,IAAID,SAAS,GAAG,IAAIZ,EAAE,CAACM,EAAE,CAACC,OAAO,CAACO,SAAS,CAAC,IAAI,CAAC;QACjDF,SAAS,CAACG,SAAS,CAAC,aAAa,EAAE,UAAU,CAAC;QAC9C,IAAIF,WAAW,EAAE;UACfD,SAAS,CAACG,SAAS,CAAC,aAAa,EAAEF,WAAW,CAAC;QACjD;QACAD,SAAS,CAACI,IAAI,CAAC,CAAC;QAEhB,OAAOJ,SAAS;MAClB;IACF,CAAC;IAEDK,SAAS,WAAAA,UAACC,QAAQ,EAAEC,OAAO,EAAE;MAC3BnB,EAAA,CAAAM,EAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAY,WAAA,CAAAC,IAAA,OAAMH,QAAQ,EAAEC,OAAO;IACzB,CAAC;IAEDG,KAAK,WAAAA,MAACb,OAAO,EAAE;MACbc,KAAK,CAACC,OAAO,CAAC;QACZZ,SAAS,EAAEH,OAAO,CAACG;MACrB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAtHFZ,EAAE,CAACM,EAAE,CAACC,OAAO,CAACO,SAAS,CAACX,aAAa,GAAGA,aAAa;AAAC"
}