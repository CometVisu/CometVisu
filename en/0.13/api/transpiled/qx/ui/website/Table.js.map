{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Widget",
    "construct",
    "selector",
    "context",
    "constructor",
    "call",
    "events",
    "modelChange",
    "selectionChange",
    "cellClick",
    "cellHover",
    "cellOut",
    "modelApplied",
    "cellRender",
    "sort",
    "filter",
    "statics",
    "_config",
    "caseSensitive",
    "rowSelection",
    "sortable",
    "_templates",
    "columnDefault",
    "table",
    "model",
    "Table",
    "__model",
    "init",
    "__isNumber",
    "__P_500_1",
    "n",
    "Object",
    "prototype",
    "toString",
    "isNaN",
    "parseFloat",
    "isFinite",
    "replace",
    "__isDate",
    "__P_500_2",
    "val",
    "d",
    "Date",
    "valueOf",
    "__getIndex",
    "__P_500_3",
    "htmlCollection",
    "htmlElement",
    "index",
    "i",
    "l",
    "length",
    "item",
    "__getUID",
    "__P_500_4",
    "getTime",
    "Math",
    "floor",
    "random",
    "substr",
    "__selectionTypes",
    "__internalCellClass",
    "__internalHeaderClass",
    "__internalSelectionClass",
    "__internalInputClass",
    "__allColumnSelector",
    "__dataColName",
    "__dataColType",
    "__dataSortingKey",
    "__modelSortingKey",
    "__inputLabelClass",
    "__selectedRowClass",
    "__ascSortingClass",
    "__descSortingClass",
    "members",
    "__columnMeta",
    "__sortingFunction",
    "__filterFunction",
    "__filterFunc",
    "__filters",
    "__inputName",
    "__hovered",
    "__sortingData",
    "superclass",
    "qxWeb",
    "getNodeName",
    "toUpperCase",
    "Error",
    "tHead",
    "find",
    "addClass",
    "__getColumnMetaData",
    "setModel",
    "setSortingFunction",
    "__defaultColumnSort",
    "__registerEvents",
    "lang",
    "Type",
    "isArray",
    "emit",
    "setColumnType",
    "columnName",
    "type",
    "__checkColumnExistance",
    "getColumnType",
    "eq",
    "getCell",
    "row",
    "col",
    "__getRoot",
    "rows",
    "cells",
    "getRows",
    "setCompareFunction",
    "compareFunc",
    "string",
    "firstUp",
    "setProperty",
    "unsetCompareFunction",
    "_compareString",
    "getCompareFunction",
    "getProperty",
    "func",
    "unsetSortingFunction",
    "setFilterFunction",
    "unsetFilterFunction",
    "__defaultColumnFilter",
    "setColumnFilter",
    "getColumnFilter",
    "setRowFilter",
    "getRowFilter",
    "dir",
    "setSortingClass",
    "__sortDOM",
    "__sort",
    "columName",
    "direction",
    "keyword",
    "resetFilter",
    "appendChild",
    "document",
    "createDocumentFragment",
    "__filterDom",
    "filters",
    "setContent",
    "tableData",
    "__extractTableRows",
    "tbody",
    "empty",
    "appendTo",
    "render",
    "appendContent",
    "__P_500_36",
    "data",
    "markup",
    "create",
    "isNode",
    "nodeName",
    "__P_500_35",
    "colIndex",
    "__getColumnIndex",
    "filterFunc",
    "__getDataRows",
    "columnIndex",
    "cell",
    "bind",
    "getSortingData",
    "sortingData",
    "getConfig",
    "__applyTemplate",
    "indexOf",
    "__processSelectionInputs",
    "__P_500_40",
    "remove",
    "__createInputs",
    "__P_500_41",
    "__createInput",
    "__getHeaderRow",
    "getElementsByTagName",
    "__P_500_42",
    "cssPrefix",
    "getCssPrefix",
    "clazz",
    "headerInput",
    "selectionMode",
    "checked",
    "inputName",
    "className",
    "currentInput",
    "id",
    "inputNode",
    "insertBefore",
    "__P_500_30",
    "__P_500_43",
    "tHeadOrFoot",
    "__P_500_27",
    "__addClassToHeaderAndFooter",
    "tFoot",
    "colName",
    "headerRow",
    "__getColumName",
    "getAttribute",
    "setAttribute",
    "name",
    "__P_500_44",
    "footOrHead",
    "hasClass",
    "__P_500_33",
    "dataRows",
    "insertAfter",
    "__P_500_29",
    "on",
    "__detectClickedCell",
    "__cellHover",
    "__cellOut",
    "__selectionRendered",
    "__P_500_49",
    "__processSelection",
    "__P_500_50",
    "inputs",
    "clickedInput",
    "selection",
    "toArray",
    "array",
    "input",
    "push",
    "selectedRows",
    "map",
    "elem",
    "parentNode",
    "removeClass",
    "__fireEvent",
    "__P_500_51",
    "eventType",
    "target",
    "colNumber",
    "headCell",
    "__P_500_46",
    "e",
    "getTarget",
    "classname",
    "getParents",
    "window",
    "setTimeout",
    "__P_500_47",
    "hovered",
    "getClosest",
    "__P_500_48",
    "relatedTarget",
    "getRelatedTarget",
    "isChildOf",
    "__P_500_39",
    "createdRow",
    "colMeta",
    "renderedRow",
    "inputType",
    "__deleteRows",
    "renderedColIndex",
    "templateApplied",
    "coltemplate",
    "getTemplate",
    "rowCount",
    "__isRowRendered",
    "insertRow",
    "j",
    "colCount",
    "__getDataForColumn",
    "template",
    "__isCellRendered",
    "replaceChild",
    "value",
    "__P_500_52",
    "renderedRows",
    "deleteRow",
    "__P_500_54",
    "__P_500_31",
    "tBodies",
    "__P_500_53",
    "__P_500_55",
    "rowIndex",
    "__addSortingClassToCol",
    "__P_500_56",
    "HeaderOrFooter",
    "removeClasses",
    "__P_500_34",
    "meta",
    "columnType",
    "a",
    "b",
    "x",
    "__getSortingKey",
    "y",
    "_compareNumber",
    "Number",
    "__P_500_45",
    "headerCell",
    "_compareDate",
    "toLowerCase",
    "__P_500_57",
    "__getCellValue",
    "__P_500_58",
    "textContent",
    "innerText",
    "__P_500_38",
    "len",
    "__P_500_28",
    "sortedData",
    "__P_500_32",
    "cellValue",
    "__P_500_37",
    "defer",
    "$attach"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/website/Table.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Romeo Kenfack Tsakem (rkenfack)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This is a widget that enhances an HTML table with some basic features like\r\n * Sorting and Filtering.\r\n *\r\n * <h2>CSS Classes</h2>\r\n * <table>\r\n *   <thead>\r\n *     <tr>\r\n *       <td>Class Name</td>\r\n *       <td>Applied to</td>\r\n *       <td>Description</td>\r\n *     </tr>\r\n *   </thead>\r\n *   <tbody>\r\n *     <tr>\r\n *       <td><code>qx-table</code></td>\r\n *       <td>Table element</td>\r\n *       <td>Identifies the Table widget</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-cell</code></td>\r\n *       <td>Table cell (<code>td</code>)</td>\r\n *       <td>Identifies and styles a cell of the widget</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-header</code></td>\r\n *       <td>Table header (<code>th</code>)</td>\r\n *       <td>Identifies and styles a header of the table widget</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-row-selection</code></td>\r\n *       <td>Table cell (<code>td</code>)</td>\r\n *       <td>Identifies and styles the cells containing the inputs for the row selection</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-selection-input</code></td>\r\n *       <td><code>input</code></td>\r\n *       <td>Identifies and styles input element to select a table row</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-input-label</code></td>\r\n *       <td>Label element (<code>label</code>)</td>\r\n *       <td>Identifies and styles label contained in the selection cell. This label can be used to create custom inputs</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-row-selected</code></td>\r\n *       <td>Selected row (<code>tr</code>)</td>\r\n *       <td>Identifies and styles the selected table rows</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-sort-asc</code></td>\r\n *       <td>Table header (<code>th</code>)</td>\r\n *       <td>Identifies and styles the header of the current ascendant sorted column</td>\r\n *     </tr>\r\n *     <tr>\r\n *       <td><code>qx-table-sort-desc</code></td>\r\n *       <td>Table header (<code>th</code>)</td>\r\n *       <td>Identifies and styles the header of the current descendant sorted column</td>\r\n *     </tr>\r\n *   </tbody>\r\n * </table>\r\n *\r\n * @group (Widget)\r\n *\r\n */\r\nqx.Bootstrap.define(\"qx.ui.website.Table\", {\r\n  extend: qx.ui.website.Widget,\r\n\r\n  construct(selector, context) {\r\n    super(selector, context);\r\n  },\r\n\r\n  events: {\r\n    /** Fires at each model change */\r\n    modelChange: \"Array\",\r\n    /** Fires at each selection change */\r\n    selectionChange: \"qxWeb\",\r\n    /** Fires each time a cell of the widget is clicked */\r\n    cellClick: \"Object\",\r\n    /** Fires each time a cell of the widget is hovered */\r\n    cellHover: \"Object\",\r\n    /** Fires each time the mouse leave a cell of the table widget */\r\n    cellOut: \"Object\",\r\n    /** Fires after the model has been applied to the widget */\r\n    modelApplied: \"Array\",\r\n    /** Fires each time the value of a cell is rendered into the cell */\r\n    cellRender: \"Object\",\r\n    /** Fires after the table rows have been sorted */\r\n    sort: \"Object\",\r\n    /** Fires after the table rows have been filtered */\r\n    filter: \"Object\"\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * *caseSensitive*\r\n     * Determines if the string sorting/filtering should be case sensitive or not. Default value : <code>false</code>.\r\n     *\r\n     * *rowSelection*\r\n     * Defines the row selection type. Possible values are : 'none', 'single', 'multiple'. Default value : <code>none</code>.\r\n     *\r\n     */\r\n    _config: {\r\n      caseSensitive: false,\r\n      rowSelection: \"none\",\r\n      sortable: false\r\n    },\r\n\r\n    /**\r\n     * *columnDefault*\r\n     * The Default cell template for all the table columns. Default value :\r\n     *\r\n     * <pre>\r\n     *   <td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\r\n     *     <div class='qx-table-cell-wrapper'>\r\n     *       <label>{{& value }}</label>\r\n     *     </div>\r\n     *   <td>\"\r\n     * </pre>\r\n     *\r\n     * To define a custom template for a specific name use <code>setTemplate('colname', template)</code> or use <br>\r\n     * <code>setTemplate('columnDefault', template)</code> to set one template for all your table columns.\r\n     *\r\n     */\r\n    _templates: {\r\n      columnDefault:\r\n        \"<td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\" +\r\n        \"<div class='qx-table-cell-wrapper'>\" +\r\n        \"<label>{{& value }}</label>\" +\r\n        \"</div>\" +\r\n        \"<td>\"\r\n    },\r\n\r\n    /**\r\n     * Factory method which converts the current collection into a collection of\r\n     * table widgets.\r\n     * @param model {Array} The model of the widgets in the collection\r\n     * @return {qx.ui.website.Table} A new table collection.\r\n     * @attach {qxWeb}\r\n     */\r\n    table(model) {\r\n      var table = new qx.ui.website.Table(this);\r\n      table.__model = model;\r\n      table.init();\r\n      return table;\r\n    },\r\n\r\n    /**\r\n     * Checks if a given string is a number\r\n     * @param n {String} The String to check the type for\r\n     * @return {Boolean} The result of the check\r\n     */\r\n    __isNumber(n) {\r\n      return (\r\n        (Object.prototype.toString.call(n) === \"[object Number]\" ||\r\n          Object.prototype.toString.call(n) === \"[object String]\") &&\r\n        !isNaN(parseFloat(n)) &&\r\n        isFinite(n.toString().replace(/^-/, \"\"))\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Checks if a given string is a Date\r\n     * @param val {String} The String to check the type for\r\n     * @return {Boolean} The result of the check\r\n     */\r\n    __isDate(val) {\r\n      var d = new Date(val);\r\n      return !isNaN(d.valueOf());\r\n    },\r\n\r\n    /**\r\n     * Gets the index of an HTMLElement inside of an HTMLCollection\r\n     * @param htmlCollection {HTMLCollection} The HTMLCollection\r\n     * @param htmlElement {HTMLElement} The HTMLElement\r\n     * @return {Integer} The position of the htmlElement or -1\r\n     */\r\n    __getIndex(htmlCollection, htmlElement) {\r\n      var index = -1;\r\n      for (var i = 0, l = htmlCollection.length; i < l; i++) {\r\n        if (htmlCollection.item(i) == htmlElement) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n      return index;\r\n    },\r\n\r\n    /**\r\n     * Generates an unique id\r\n     * @return {String} The generated id\r\n     */\r\n    __getUID() {\r\n      return (\r\n        new Date().getTime() +\r\n        \"\" +\r\n        Math.floor(Math.random() * 1000000)\r\n      ).substr(0, 18);\r\n    },\r\n\r\n    /** */\r\n    __selectionTypes: [\"single\", \"multiple\", \"none\"],\r\n    /** */\r\n    __internalCellClass: \"qx-table-cell\",\r\n    /** */\r\n    __internalHeaderClass: \"qx-table-header\",\r\n    /** */\r\n    __internalSelectionClass: \"qx-table-row-selection\",\r\n    /** */\r\n    __internalInputClass: \"qx-table-selection-input\",\r\n    /** */\r\n    __allColumnSelector: \"qx-table-all-columns\",\r\n    /** */\r\n    __dataColName: \"data-qx-table-col-name\",\r\n    /** */\r\n    __dataColType: \"data-qx-table-col-type\",\r\n    /** */\r\n    __dataSortingKey: \"data-qx-table-cell-key\",\r\n    /** */\r\n    __modelSortingKey: \"cellKey\",\r\n    /** */\r\n    __inputLabelClass: \"qx-table-input-label\",\r\n    /** */\r\n    __selectedRowClass: \"qx-table-row-selected\",\r\n    /** */\r\n    __ascSortingClass: \"qx-table-sort-asc\",\r\n    /** */\r\n    __descSortingClass: \"qqx-table-sort-desc\"\r\n  },\r\n\r\n  members: {\r\n    __model: null,\r\n    __columnMeta: null,\r\n    __sortingFunction: null,\r\n    __filterFunction: null,\r\n    __filterFunc: null,\r\n    __filters: null,\r\n    __inputName: null,\r\n    __hovered: null,\r\n    __sortingData: null,\r\n\r\n    // overridden\r\n    init() {\r\n      if (!super.init()) {\r\n        return false;\r\n      }\r\n\r\n      var model = this.__model;\r\n\r\n      if (qxWeb.getNodeName(this).toUpperCase() !== \"TABLE\") {\r\n        throw new Error(\"collection should contains only table elements !!\");\r\n      }\r\n\r\n      if (!this[0].tHead) {\r\n        throw new Error(\"A Table header element is required for this widget.\");\r\n      }\r\n\r\n      this.find(\"tbody td\").addClass(\"qx-table-cell\");\r\n\r\n      this.__inputName = \"input\" + qx.ui.website.Table.__getUID();\r\n      this.__getColumnMetaData(model);\r\n      this.setModel(model);\r\n      this.setSortingFunction(this.__defaultColumnSort);\r\n\r\n      this.__registerEvents();\r\n\r\n      this.__hovered = null;\r\n\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Sets the given model to the widgets in the collection\r\n     *\r\n     * @param model {Array} The model to be set\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setModel(model) {\r\n      if (typeof model != \"undefined\") {\r\n        if (qx.lang.Type.isArray(model)) {\r\n          this.__model = model;\r\n          this.emit(\"modelChange\", model);\r\n        } else {\r\n          throw new Error(\"model must be an Array !!\");\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Set the column types for the table widgets in the collection\r\n     * @param columnName {String} The column name\r\n     * @param type {String} The type of the column\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setColumnType(columnName, type) {\r\n      this.__checkColumnExistance(columnName);\r\n      this.__columnMeta[columnName].type = type;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the type of the specified column\r\n     * @param columnName {String} The column name\r\n     * @return {String} The type of the specified column\r\n     */\r\n    getColumnType(columnName) {\r\n      this.eq(0).__checkColumnExistance(columnName);\r\n      return this.eq(0).__columnMeta[columnName].type;\r\n    },\r\n\r\n    /**\r\n     * Returns the cell at the given position for the first widget in the collection\r\n     * @param row {Integer} The row number\r\n     * @param col {Integer} The column number\r\n     * @return {qxWeb} The cell found at the given position\r\n     */\r\n    getCell(row, col) {\r\n      return qxWeb(this.eq(0).__getRoot().rows.item(row).cells.item(col));\r\n    },\r\n\r\n    /**\r\n     * Returns a collection containing the rows of the first table in the collection.\r\n     * @return {qxWeb} The collection containing the table rows\r\n     */\r\n    getRows() {\r\n      return qxWeb(this.eq(0).__getRoot().rows);\r\n    },\r\n\r\n    /**\r\n     * Defines the comparison function to use to sort columns of the given type\r\n     * @param type {String} The type to define the function for\r\n     * @param compareFunc {Function} The comparison function\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setCompareFunction(type, compareFunc) {\r\n      type = qxWeb.string.firstUp(type);\r\n      this.setProperty([\"_compare\" + type], compareFunc);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Unset the compare function for the given type\r\n     *\r\n     * @param type {String} The type to unset the function for\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    unsetCompareFunction(type) {\r\n      type = qxWeb.string.firstUp(type);\r\n      var compareFunc = this[\"_compare\" + type] || this._compareString;\r\n      this.setProperty([\"_compare\" + type], compareFunc);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the comparison function for the given type\r\n     * @param type {String} The type to get the comparison function for\r\n     * @return {Function} The comparison function\r\n     */\r\n    getCompareFunction(type) {\r\n      type = qxWeb.string.firstUp(type);\r\n      return this.getProperty(\"_compare\" + type) || this[\"_compare\" + type];\r\n    },\r\n\r\n    /**\r\n     * Set the function that control the sorting process\r\n     * @param func {Function} The sorting function\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setSortingFunction(func) {\r\n      func = func || function () {};\r\n      this.__sortingFunction = func;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Unset the function that control the sorting process\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    unsetSortingFunction() {\r\n      this.__sortingFunction = this.__defaultColumnSort;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Set the function that will be used to process the column filtering\r\n     * @param func {Function} The filter function\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setFilterFunction(func) {\r\n      this.__filterFunction = func;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Unset the filter function\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    unsetFilterFunction() {\r\n      this.__filterFunction = this.__defaultColumnFilter;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Set the filter function to use to filter a specific column\r\n     * @param columnName {String} The name of the column\r\n     * @param func {Function} The filter\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     *\r\n     */\r\n    setColumnFilter(columnName, func) {\r\n      this.__checkColumnExistance(columnName);\r\n      if (!this.__filterFunc) {\r\n        this.__filterFunc = {};\r\n      }\r\n      this.__filterFunc[columnName] = func;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the filter function set on a specific column\r\n     *\r\n     * @param columnName {String} The name of the column\r\n     * @return {Function} The filter function\r\n     *\r\n     */\r\n    getColumnFilter(columnName) {\r\n      if (this.__filterFunc) {\r\n        return this.__filterFunc[columnName];\r\n      }\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Set the filter function to use to filter the table rows\r\n     * @param func {Function} The filter\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setRowFilter(func) {\r\n      if (!this.__filterFunc) {\r\n        this.__filterFunc = {};\r\n      }\r\n      this.__filterFunc.row = func;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the filter function set on a specific column\r\n     * @return {Function} The filter function\r\n     *\r\n     */\r\n    getRowFilter() {\r\n      if (this.__filterFunc) {\r\n        return this.__filterFunc.row;\r\n      }\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Sort the column with the given name according to the specified direction\r\n     * @param columnName {String} The name of the column to sort\r\n     * @param dir {String} The sorting direction (asc or desc)\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    sort(columnName, dir) {\r\n      this.__checkColumnExistance(columnName);\r\n\r\n      this.setSortingClass(columnName, dir);\r\n      this.__sortDOM(this.__sort(columnName, dir));\r\n\r\n      this.emit(\"sort\", { columName: columnName, direction: dir });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Filters rows or columns according to the given parameters\r\n     * @param keyword {String} The keyword to use to filter\r\n     * @param columnName {String ?} The column name\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    filter(keyword, columnName) {\r\n      if (columnName) {\r\n        this.__checkColumnExistance(columnName);\r\n        if (keyword == \"\") {\r\n          this.resetFilter(columnName);\r\n        }\r\n      } else {\r\n        columnName = qx.ui.website.Table.__allColumnSelector;\r\n      }\r\n\r\n      if (!this.__filters) {\r\n        this.__filters = {};\r\n      }\r\n\r\n      if (this.__filters[columnName]) {\r\n        this.__filters[columnName].keyword = keyword;\r\n        this.__getRoot().appendChild(this.__filters[columnName].rows);\r\n      } else {\r\n        this.__filters[columnName] = {\r\n          keyword: keyword,\r\n          rows: document.createDocumentFragment()\r\n        };\r\n      }\r\n\r\n      this.__filterDom(keyword, columnName);\r\n\r\n      this.emit(\"filter\", { columName: columnName, keyword: keyword });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the filter applied on a specific column\r\n     * @param columnName {String ?} The column name\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    resetFilter(columnName) {\r\n      var filters = null;\r\n      filters = this.__filters;\r\n      if (filters) {\r\n        if (columnName) {\r\n          this.__getRoot().appendChild(filters[columnName].rows);\r\n        } else {\r\n          for (var col in filters) {\r\n            this.__getRoot().appendChild(filters[col].rows);\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the rows of in the table body\r\n     * @param tableData {String|qxWeb} Html string or collection containing the rows to be added\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    setContent(tableData) {\r\n      var rows = this.__extractTableRows(tableData);\r\n      var tbody = this.find(\"tbody\");\r\n      tbody.empty();\r\n      rows.appendTo(tbody);\r\n      this.render();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Appends new rows to the table\r\n     * @param tableData {String|qxWeb} Html string or collection containing the rows to be appended\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    appendContent(tableData) {\r\n      var rows = this.__extractTableRows(tableData);\r\n      var tbody = this.find(\"tbody\");\r\n      rows.appendTo(tbody);\r\n      this.render();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Extracts table rows from a given HTML String or qxWeb collection\r\n     * @param data {qxWeb|String} Data containing the rows to be extracted\r\n     * @return {qxWeb} Collection containing extracted rows\r\n     */\r\n    __extractTableRows(data) {\r\n      var rows = qxWeb();\r\n      if (typeof data == \"string\") {\r\n        var markup = data;\r\n        data = qxWeb.create(data);\r\n        if (qxWeb.getNodeName(data) != \"table\") {\r\n          data = qxWeb.create(\"<table>\" + markup + \"</table>\");\r\n        }\r\n        rows = data.find(\"tbody tr\");\r\n      } else if (qxWeb.isNode(data) || data instanceof qxWeb) {\r\n        data = qxWeb(data);\r\n        var nodeName = qxWeb.getNodeName(data);\r\n        switch (nodeName) {\r\n          case \"table\":\r\n            rows = qxWeb(data).find(\"tbody tr\");\r\n            break;\r\n          case \"tr\":\r\n            rows = data;\r\n            break;\r\n          case \"tbody\":\r\n            rows = qxWeb(data).find(\"tr\");\r\n            break;\r\n        }\r\n      }\r\n      return rows;\r\n    },\r\n\r\n    /**\r\n     * Filters the rendered table cells\r\n     * @param keyword {String} The keyword to use to filter\r\n     * @param columnName {String ?} The column name\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __filterDom(keyword, columnName) {\r\n      var colIndex = this.__getColumnIndex(columnName);\r\n      var filterFunc =\r\n        columnName == qx.ui.website.Table.__allColumnSelector\r\n          ? this.getRowFilter()\r\n          : this.getColumnFilter(columnName);\r\n      filterFunc = filterFunc || this.__defaultColumnFilter;\r\n\r\n      var rows = this.__getDataRows(),\r\n        data = {};\r\n\r\n      for (var i = 0; i < rows.length; i++) {\r\n        data = {\r\n          columnName: columnName,\r\n          columnIndex: colIndex,\r\n          cell: colIndex > -1 ? qxWeb(rows[i].cells.item(colIndex)) : null,\r\n          row: qxWeb(rows[i]),\r\n          keyword: keyword\r\n        };\r\n\r\n        if (!filterFunc.bind(this)(data)) {\r\n          this.__filters[columnName].rows.appendChild(rows[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the current column sorting information for the first widget in the collection\r\n     * @return {Map} The map containing the current sorting information\r\n     */\r\n    getSortingData() {\r\n      return this.__sortingData;\r\n    },\r\n\r\n    //overridden\r\n    render() {\r\n      var sortingData = this.getSortingData();\r\n      var rowSelection = this.getConfig(\"rowSelection\");\r\n\r\n      this.__applyTemplate(this.__model);\r\n\r\n      if (qx.ui.website.Table.__selectionTypes.indexOf(rowSelection) != -1) {\r\n        this.__processSelectionInputs(rowSelection);\r\n      }\r\n\r\n      if (sortingData) {\r\n        this.__sortDOM(\r\n          this.__sort(sortingData.columnName, sortingData.direction)\r\n        );\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    //Private API\r\n\r\n    /**\r\n     * Renders or removes the selection inputs according to the specified widget selection mode\r\n     * @param rowSelection {String} The selection mode\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __processSelectionInputs(rowSelection) {\r\n      switch (rowSelection) {\r\n        case \"none\":\r\n          qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).remove();\r\n          break;\r\n        case \"multiple\":\r\n        case \"single\":\r\n          this.__createInputs(\"checkbox\");\r\n          break;\r\n\r\n        case \"single\":\r\n          this.__createInputs(\"radio\");\r\n          break;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Creates input nodes for the row selection\r\n     * @param type {String} The type of the inputs to creates\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __createInputs(type) {\r\n      this.__createInput(this.__getHeaderRow(), type);\r\n      var rows = this.find(\"tbody\")[0].getElementsByTagName(\"tr\");\r\n      for (var i = 0; i < rows.length; i++) {\r\n        this.__createInput(rows.item(i), type);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Creates an input an input node for a specific row\r\n     * @param row {HTMLTableRowElement} The row to create the input for\r\n     * @param type {String} The type of the input tom create (radio or checkbox)\r\n     * @param nodeName {String} The nodename of the table cell that will contain the input\r\n     */\r\n    __createInput(row, type, nodeName) {\r\n      var cssPrefix = this.getCssPrefix();\r\n\r\n      var clazz = qx.ui.website.Table;\r\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\r\n      var selectionMode = this.getConfig(\"rowSelection\");\r\n\r\n      var checked = \"\";\r\n      if (headerInput.length > 0) {\r\n        checked =\r\n          selectionMode == \"multiple\" && headerInput[0].checked\r\n            ? \"checked\"\r\n            : \"\";\r\n      }\r\n\r\n      if (typeof nodeName == \"undefined\") {\r\n        nodeName = qxWeb.getNodeName(qxWeb(row.cells.item(0)));\r\n      }\r\n\r\n      var inputName = this.__inputName;\r\n      var className =\r\n        nodeName == \"th\"\r\n          ? clazz.__internalSelectionClass + \" \" + clazz.__internalHeaderClass\r\n          : clazz.__internalSelectionClass;\r\n\r\n      var currentInput = qxWeb(row).find(\".\" + clazz.__internalSelectionClass);\r\n\r\n      if (currentInput.length > 0) {\r\n        if (currentInput[0].type != type) {\r\n          currentInput[0].type = type;\r\n        }\r\n      } else {\r\n        var id = qx.ui.website.Table.__getUID();\r\n        var inputNode = qxWeb.create(\r\n          \"<\" +\r\n            nodeName +\r\n            \" class='\" +\r\n            className +\r\n            \"'><input id='\" +\r\n            id +\r\n            \"' name='\" +\r\n            inputName +\r\n            \"' \" +\r\n            checked +\r\n            \" class='\" +\r\n            cssPrefix +\r\n            \"-\" +\r\n            type +\r\n            \" \" +\r\n            clazz.__internalInputClass +\r\n            \"' type='\" +\r\n            type +\r\n            \"' /><label class='\" +\r\n            clazz.__inputLabelClass +\r\n            \"' for='\" +\r\n            id +\r\n            \"'></label></\" +\r\n            nodeName +\r\n            \">\"\r\n        );\r\n\r\n        if (row.cells.item(0)) {\r\n          inputNode.insertBefore(qxWeb(row.cells.item(0)));\r\n        } else {\r\n          inputNode.appendTo(qxWeb(row));\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Checks if a column with the specified name exists\r\n     * @param columnName {String} The name of the column to check\r\n     */\r\n    __checkColumnExistance(columnName) {\r\n      var data = this.__columnMeta;\r\n      if (data && !data[columnName]) {\r\n        throw new Error(\"Column \" + columnName + \" does not exists !\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the row containing the cells with the column names\r\n     * @return {HTMLTableRowElement} The row with meta information\r\n     */\r\n    __getHeaderRow() {\r\n      var tHeadOrFoot = this[0].tHead;\r\n      if (!tHeadOrFoot) {\r\n        throw new Error(\"A Table header element is required for this widget.\");\r\n      }\r\n      var rows = tHeadOrFoot.rows;\r\n      if (rows.length == 1) {\r\n        return rows.item(0);\r\n      } else {\r\n        rows = qxWeb(\".qx-table-header-row\");\r\n        if (rows.length > 0) {\r\n          return rows[0];\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Initializes columns metadata\r\n     * @param model {Array} The widget's model\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __getColumnMetaData(model) {\r\n      this.__addClassToHeaderAndFooter(this[0].tHead);\r\n      this.__addClassToHeaderAndFooter(this[0].tFoot);\r\n\r\n      var data = {},\r\n        cells = null,\r\n        colName = null,\r\n        cell = null;\r\n      var headerRow = this.__getHeaderRow();\r\n\r\n      cells = headerRow.cells;\r\n\r\n      for (var i = 0, l = cells.length; i < l; i++) {\r\n        cell = qxWeb(cells.item(i));\r\n        colName =\r\n          this.__getColumName(cell[0]) || qx.ui.website.Table.__getUID();\r\n        if (!cell[0].getAttribute(qx.ui.website.Table.__dataColName)) {\r\n          cell.setAttribute(qx.ui.website.Table.__dataColName, colName);\r\n        }\r\n\r\n        data[colName] = {\r\n          type:\r\n            cell[0].getAttribute(qx.ui.website.Table.__dataColType) || \"String\",\r\n          name: colName\r\n        };\r\n      }\r\n\r\n      this.__columnMeta = data;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Adds the internal css class to the header and footer cells\r\n     * @param footOrHead {HTMLElement} Html element representing the header or footer of the table\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __addClassToHeaderAndFooter(footOrHead) {\r\n      if (footOrHead && footOrHead.rows.length > 0) {\r\n        if (footOrHead.rows.item(0).cells.length > 0) {\r\n          var row = this.__getHeaderRow();\r\n          if (\r\n            !qxWeb(row.cells.item(0)).hasClass(\r\n              qx.ui.website.Table.__internalHeaderClass\r\n            )\r\n          ) {\r\n            qxWeb(row.cells).addClass(\r\n              qx.ui.website.Table.__internalHeaderClass\r\n            );\r\n          }\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sorts the rows of the table widget\r\n     * @param dataRows {Array} Array containing the sorted rows\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __sortDOM(dataRows) {\r\n      for (var i = 0, l = dataRows.length; i < l; i++) {\r\n        if (i) {\r\n          qxWeb(dataRows[i]).insertAfter(dataRows[i - 1]);\r\n        } else {\r\n          qxWeb(dataRows[i]).insertBefore(qxWeb(this.__getRoot().rows.item(0)));\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * registers global events\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __registerEvents() {\r\n      this.on(\"tap\", this.__detectClickedCell);\r\n\r\n      this.on(\r\n        \"cellClick\",\r\n        function (data) {\r\n          if (\r\n            data.cell &&\r\n            data.cell.hasClass(qx.ui.website.Table.__internalHeaderClass)\r\n          ) {\r\n            this.__sortingFunction.bind(this)(data);\r\n          }\r\n        },\r\n        this\r\n      );\r\n\r\n      this.on(\"pointerover\", this.__cellHover, this);\r\n      this.on(\"pointerout\", this.__cellOut, this);\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if the selection inputs are already rendered\r\n     * @return {Boolean} True if the inputs are rendered and false otherwise\r\n     */\r\n    __selectionRendered() {\r\n      return (\r\n        qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).length > 0\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Handles clicks that happen on the selection inputs\r\n     * @param cell {qxWeb} The table cell containing the clicked input\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __processSelection(cell) {\r\n      var clazz = qx.ui.website.Table;\r\n      var inputs = qxWeb(\".\" + clazz.__internalInputClass);\r\n      var clickedInput = cell.find(\"input\");\r\n      var selectionMode = this.getConfig(\"rowSelection\");\r\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\r\n      var selection = [];\r\n\r\n      if (selectionMode == \"multiple\") {\r\n        if (cell.hasClass(clazz.__internalHeaderClass)) {\r\n          inputs.setAttribute(\"checked\", clickedInput[0].checked);\r\n        }\r\n\r\n        var checked = true;\r\n        for (var i = 0; i < inputs.length; i++) {\r\n          if (inputs[i] != headerInput[0] && !inputs[i].checked) {\r\n            checked = false;\r\n            break;\r\n          }\r\n        }\r\n\r\n        headerInput.setAttribute(\"checked\", checked);\r\n        inputs = inputs.toArray();\r\n\r\n        if (checked) {\r\n          qxWeb.array.remove(inputs, headerInput[0]);\r\n          selection = inputs;\r\n        } else {\r\n          selection = inputs.filter(function (input) {\r\n            return input.checked;\r\n          });\r\n        }\r\n      } else {\r\n        if (clickedInput[0] != headerInput[0]) {\r\n          selection.push(clickedInput[0]);\r\n        }\r\n      }\r\n\r\n      var selectedRows = selection.map(function (elem) {\r\n        return elem.parentNode.parentNode;\r\n      });\r\n\r\n      selectedRows = qxWeb(selectedRows);\r\n      qxWeb(\".\" + clazz.__selectedRowClass).removeClass(\r\n        clazz.__selectedRowClass\r\n      );\r\n\r\n      selectedRows.addClass(clazz.__selectedRowClass);\r\n\r\n      this.emit(\"selectionChange\", { rows: qxWeb(selectedRows) });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Fires a custom table events\r\n     * @param eventType {String} The event type\r\n     * @param cell {HTMLTableCellElement} The event target\r\n     * @param target {HTMLElement} The native event target\r\n     * @return {Map} Map containing the event data\r\n     */\r\n    __fireEvent(eventType, cell, target) {\r\n      var row = cell[0].parentNode,\r\n        cells = row.cells;\r\n      var colNumber = qx.ui.website.Table.__getIndex(cells, cell[0]);\r\n      var tHead = this.__getHeaderRow();\r\n      var headCell = tHead.cells.item(colNumber);\r\n      var colName = this.__getColumName(headCell);\r\n      var columnIndex =\r\n        this.getConfig(\"rowSelection\") != \"none\"\r\n          ? this.__getColumnIndex(colName) - 1\r\n          : this.__getColumnIndex(colName);\r\n\r\n      var data = {\r\n        cell: qxWeb(cell),\r\n        row: qxWeb(row),\r\n        target: target,\r\n        columnIndex: columnIndex,\r\n        columnName: colName\r\n      };\r\n\r\n      this.emit(eventType, data);\r\n\r\n      return data;\r\n    },\r\n\r\n    /**\r\n     * Click callback\r\n     *\r\n     * @param e {Event} The native click event.\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __detectClickedCell(e) {\r\n      var target = e.getTarget();\r\n\r\n      var cell = qxWeb(target);\r\n      var clazz = qx.ui.website.Table;\r\n\r\n      while (\r\n        !(\r\n          cell.hasClass(clazz.__internalCellClass) ||\r\n          cell.hasClass(clazz.__internalHeaderClass) ||\r\n          cell.hasClass(clazz.__internalSelectionClass)\r\n        )\r\n      ) {\r\n        if (cell.hasClass(this.classname)) {\r\n          cell = null;\r\n          break;\r\n        }\r\n        cell = cell.getParents().eq(0);\r\n      }\r\n\r\n      if (cell.hasClass(clazz.__internalSelectionClass)) {\r\n        window.setTimeout(\r\n          function () {\r\n            this.__processSelection(cell);\r\n          }.bind(this),\r\n          5\r\n        );\r\n      } else {\r\n        if (cell && cell.length > 0) {\r\n          this.__fireEvent(\"cellClick\", cell, target);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Pointerover callback\r\n     *\r\n     * @param e {Event} The native over event.\r\n     */\r\n    __cellHover(e) {\r\n      var target = e.getTarget();\r\n      var cell = qxWeb(target);\r\n      var hovered = this.__hovered;\r\n\r\n      if (\r\n        !cell.hasClass(\"qx-table-cell\") &&\r\n        !cell.hasClass(\"qx-table-header\")\r\n      ) {\r\n        cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\r\n      }\r\n\r\n      if (\r\n        cell &&\r\n        cell.length > 0 &&\r\n        ((hovered && hovered.cell[0] != cell[0]) || !hovered) &&\r\n        !cell.hasClass(\"qx-table-row-selection\")\r\n      ) {\r\n        if (hovered) {\r\n          this.emit(\"cellOut\", hovered);\r\n        }\r\n\r\n        this.__hovered = this.__fireEvent(\"cellHover\", cell, target);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * pointerout callback\r\n     *\r\n     * @param e {Event} The native over event.\r\n     */\r\n    __cellOut(e) {\r\n      var relatedTarget = e.getRelatedTarget();\r\n      var cell = qxWeb(relatedTarget);\r\n\r\n      if (this.__hovered) {\r\n        if (!cell.isChildOf(this)) {\r\n          this.emit(\"cellOut\", this.__hovered);\r\n          this.__hovered = null;\r\n        } else {\r\n          if (\r\n            !cell.hasClass(\"qx-table-cell\") &&\r\n            !cell.hasClass(\"qx-table-header\")\r\n          ) {\r\n            cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\r\n            if (cell.hasClass(\"qx-table-row-selection\")) {\r\n              this.emit(\"cellOut\", this.__hovered);\r\n              this.__hovered = null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Applies the given model to the table cells depending on\r\n     * the mustache template specified before\r\n     * @param model {Array} The model to apply\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __applyTemplate(model) {\r\n      if (model && model.length > 0) {\r\n        var cell, row;\r\n        var tHead = this.__getHeaderRow();\r\n        var createdRow = null,\r\n          colMeta = null;\r\n        var renderedRow = null;\r\n\r\n        var inputType =\r\n          this.getConfig(\"rowSelection\") == \"single\" ? \"radio\" : \"checkbox\";\r\n\r\n        if (this.__getRoot().rows.length > model.length) {\r\n          this.__deleteRows(model.length);\r\n        }\r\n\r\n        var renderedColIndex = 0,\r\n          templateApplied = false;\r\n        var coltemplate = this.getTemplate(\"columnDefault\");\r\n        var colName = null;\r\n\r\n        for (var i = 0, rowCount = model.length; i < rowCount; i++) {\r\n          row = model[i];\r\n\r\n          if (!this.__isRowRendered(i)) {\r\n            createdRow = this.__getRoot().insertRow(i);\r\n            if (this.__selectionRendered()) {\r\n              this.__createInput(createdRow, inputType, \"td\");\r\n            }\r\n          }\r\n\r\n          for (var j = 0, colCount = row.length; j < colCount; j++) {\r\n            renderedColIndex = this.__selectionRendered() ? j + 1 : j;\r\n            colName = this.__getColumName(tHead.cells.item(renderedColIndex));\r\n            colMeta = this.__getDataForColumn(colName);\r\n            coltemplate = this.getTemplate(colName) || coltemplate;\r\n            renderedRow = this.__getRoot().rows.item(i);\r\n            cell = qxWeb.create(\r\n              qxWeb.template.render(coltemplate, model[i][j])\r\n            )[0];\r\n\r\n            if (cell.nodeName.toUpperCase() != \"TD\") {\r\n              break;\r\n            }\r\n\r\n            if (!this.__isCellRendered(i, renderedColIndex)) {\r\n              renderedRow.appendChild(cell);\r\n            } else {\r\n              renderedRow.replaceChild(\r\n                cell,\r\n                this.getCell(i, renderedColIndex)[0]\r\n              );\r\n            }\r\n            this.emit(\"cellRender\", {\r\n              cell: cell,\r\n              row: i,\r\n              col: j,\r\n              value: model[i][j]\r\n            });\r\n          }\r\n\r\n          if (i == rowCount - 1) {\r\n            templateApplied = true;\r\n          }\r\n        }\r\n\r\n        if (templateApplied) {\r\n          this.emit(\"modelApplied\", model);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Removes row from the DOM starting from the specified index\r\n     * @param  rowCount {Integer} The number of rows the kept\r\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\r\n     */\r\n    __deleteRows(rowCount) {\r\n      var renderedRows = this.__getRoot().rows;\r\n      while (renderedRows.length > rowCount) {\r\n        this[0].deleteRow(renderedRows.length);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the metadata of the column width the specified name\r\n     * @param columName {String} The name of the column to get the metadata for\r\n     * @return {Map} Map containing the metadata\r\n     */\r\n    __getDataForColumn(columName) {\r\n      return this.__columnMeta[columName];\r\n    },\r\n\r\n    /**\r\n     * Gets the Root element containing the data rows\r\n     * @return {HTMLElement} The element containing the data rows\r\n     */\r\n    __getRoot() {\r\n      return this[0].tBodies.item(0) || this[0];\r\n    },\r\n\r\n    /**\r\n     * Checks if the row with the given index is rendered\r\n     * @param index {Integer} The index of the row to check\r\n     * @return {Boolean} The result of the check\r\n     */\r\n    __isRowRendered(index) {\r\n      if (this.__getRoot().rows.item(index)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Checks if the cell with the given row and column indexes is rendered\r\n     * @param rowIndex {Integer} The index of the row to check\r\n     * @param colIndex {Integer} The index of the column\r\n     * @return {Boolean} The result of the check\r\n     */\r\n    __isCellRendered(rowIndex, colIndex) {\r\n      if (!this.__isRowRendered(rowIndex)) {\r\n        return false;\r\n      }\r\n      if (this.__getRoot().rows.item(rowIndex).cells.item(colIndex)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Adds a class to the head and footer of the current sorted column\r\n     * @param columnName {String} The name of the sorted column\r\n     * @param dir {String} The sorting direction\r\n     */\r\n    setSortingClass(columnName, dir) {\r\n      var data = {\r\n        columnName: columnName,\r\n        direction: dir\r\n      };\r\n\r\n      this.__sortingData = data;\r\n      this.__addSortingClassToCol(this[0].tHead, columnName, dir);\r\n    },\r\n\r\n    /**\r\n     * Adds a class to the head or footer of the current sorted column\r\n     * @param HeaderOrFooter {Node} The n\r\n     * @param columnName {String} The name of the sorted column\r\n     * @param dir {String} The sorting direction\r\n     */\r\n    __addSortingClassToCol(HeaderOrFooter, columnName, dir) {\r\n      var rows = this.__getHeaderRow();\r\n      if (HeaderOrFooter && rows) {\r\n        qxWeb(rows.cells).removeClasses([\r\n          \"qx-table-sort-asc\",\r\n          \"qx-table-sort-desc\"\r\n        ]);\r\n\r\n        var cell = qxWeb(\r\n          \"[\" +\r\n            qx.ui.website.Table.__dataColName +\r\n            \"='\" +\r\n            columnName +\r\n            \"'], #\" +\r\n            columnName\r\n        );\r\n\r\n        cell.addClass(\"qx-table-sort-\" + dir);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sorts the table rows for the given row and direction\r\n     * @param columnName {String} The name of the column to be sorted\r\n     * @param direction {String} The sorting direction\r\n     * @return {Array} Array containing the sorted rows\r\n     */\r\n    __sort(columnName, direction) {\r\n      var meta = this.__getDataForColumn(columnName);\r\n      var columnType = qxWeb.string.firstUp(meta.type);\r\n\r\n      if (\r\n        !this[\"_compare\" + columnType] &&\r\n        !this.getProperty(\"_compare\" + columnType)\r\n      ) {\r\n        columnType = \"String\";\r\n      }\r\n\r\n      var compareFunc = this.getCompareFunction(columnType).bind(this);\r\n      var model = this.__getDataRows();\r\n      var columnIndex = this.__getColumnIndex(columnName);\r\n\r\n      return model.sort(\r\n        function (a, b) {\r\n          var x = this.__getSortingKey(qxWeb(a.cells.item(columnIndex)));\r\n          var y = this.__getSortingKey(qxWeb(b.cells.item(columnIndex)));\r\n          return compareFunc(x, y, direction);\r\n        }.bind(this)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Compares two number\r\n     * @param x {String} The String value of the first number to compare\r\n     * @param y {String} The String value of the second number to compare\r\n     * @param direction {String} The sorting direction\r\n     * @return {Integer} The result of the comparison\r\n     */\r\n    _compareNumber(x, y, direction) {\r\n      x = qx.ui.website.Table.__isNumber(x) ? Number(x) : 0;\r\n      y = qx.ui.website.Table.__isNumber(y) ? Number(y) : 0;\r\n      if (direction == \"asc\") {\r\n        return x - y;\r\n      } else if (direction == \"desc\") {\r\n        return y - x;\r\n      }\r\n      return 0;\r\n    },\r\n\r\n    /**\r\n     * Gets the name of the column containing the given cell\r\n     * @param headerCell {HTMLTableCellElement} The cell to get the column name for\r\n     * @return {String} The column name\r\n     */\r\n    __getColumName(headerCell) {\r\n      return (\r\n        headerCell.getAttribute(qx.ui.website.Table.__dataColName) ||\r\n        headerCell.getAttribute(\"id\")\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Compares two Dates\r\n     * @param x {String} The String value of the first date to compare\r\n     * @param y {String} The String value of the second date to compare\r\n     * @param direction {String} The sorting direction\r\n     * @return {Integer} The result of the comparison\r\n     */\r\n    _compareDate(x, y, direction) {\r\n      x = qx.ui.website.Table.__isDate(x) ? new Date(x) : new Date(0);\r\n      y = qx.ui.website.Table.__isDate(y) ? new Date(y) : new Date(0);\r\n\r\n      if (direction == \"asc\") {\r\n        return x - y;\r\n      } else if (direction == \"desc\") {\r\n        return y - x;\r\n      }\r\n      return 0;\r\n    },\r\n\r\n    /**\r\n     * Compares two Strings\r\n     * @param x {String} The first string to compare\r\n     * @param y {String} The second string to compare\r\n     * @param direction {String} The sorting direction\r\n     * @return {Integer} The result of the comparison\r\n     */\r\n    _compareString(x, y, direction) {\r\n      if (!this.getConfig(\"caseSensitive\")) {\r\n        x = x.toLowerCase();\r\n        y = y.toLowerCase();\r\n      }\r\n      if (direction == \"asc\") {\r\n        return x < y ? -1 : x > y ? 1 : 0;\r\n      } else if (direction == \"desc\") {\r\n        return x > y ? -1 : x < y ? 1 : 0;\r\n      }\r\n      return 0;\r\n    },\r\n\r\n    /**\r\n     * Returns the value of the cell to use for sorting\r\n     * @param cell {qxWeb} The cell to get the value of.\r\n     * @return {String} The sorting key\r\n     */\r\n    __getSortingKey(cell) {\r\n      return (\r\n        cell.getAttribute(qx.ui.website.Table.__dataSortingKey) ||\r\n        this.__getCellValue(cell)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Returns the value of the cell that will be used for sorting\r\n     * @param cell {qxWeb} The cell to get the value of\r\n     * @return {String} The text content of the cell\r\n     */\r\n    __getCellValue(cell) {\r\n      return cell[0].textContent || cell[0].innerText || \"\";\r\n    },\r\n\r\n    /**\r\n     * Gets the table's data rows from the DOM\r\n     * @return {Array} Array containing the rows of the table\r\n     */\r\n    __getDataRows() {\r\n      var rows = this.find(\"tbody\")[0].rows,\r\n        model = [],\r\n        cell = null,\r\n        cells = [];\r\n\r\n      for (var i = 0, l = rows.length; i < l; i++) {\r\n        cells = rows.item(i).cells;\r\n        if (cells.length > 0 && cells[0].nodeName.toUpperCase() != \"TD\") {\r\n          continue;\r\n        }\r\n\r\n        for (var j = 0, len = cells.length; j < len; j++) {\r\n          cell = qxWeb(cells[j]);\r\n          if (!cell.hasClass(qx.ui.website.Table.__internalCellClass)) {\r\n            cell.addClass(qx.ui.website.Table.__internalCellClass);\r\n          }\r\n        }\r\n\r\n        model.push(rows.item(i));\r\n      }\r\n      return model;\r\n    },\r\n\r\n    /**\r\n     * Default sorting processing\r\n     * @param data {Map} Sorting data\r\n     */\r\n    __defaultColumnSort(data) {\r\n      var dir = \"asc\";\r\n      var sortedData = this.getSortingData();\r\n\r\n      if (sortedData) {\r\n        if (data.columnName == sortedData.columnName) {\r\n          if (sortedData.direction == dir) {\r\n            dir = \"desc\";\r\n          }\r\n        }\r\n      }\r\n      if (data.cell.hasClass(\"qx-table-header\")) {\r\n        this.sort(data.columnName, dir);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Default column filter function\r\n     * @param data {Map} Map containing the filter data\r\n     * @return {Boolean} True wenn the row containing the current cell should be kept\r\n     */\r\n    __defaultColumnFilter(data) {\r\n      var caseSensitive = this.getConfig(\"caseSensitive\");\r\n      var cell =\r\n        data.columnName == qx.ui.website.Table.__allColumnSelector\r\n          ? data.row\r\n          : data.cell;\r\n      var cellValue = this.__getCellValue(cell);\r\n\r\n      if (caseSensitive) {\r\n        return cellValue.indexOf(data.keyword) != -1;\r\n      } else {\r\n        return (\r\n          cellValue.toLowerCase().indexOf(data.keyword.toLowerCase()) != -1\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the column with the specified name\r\n     * @param columnName {String} The colukn name\r\n     * @return {Integer} The index of the column or -1 if the column doesn't exists\r\n     */\r\n    __getColumnIndex(columnName) {\r\n      var tHead = this.__getHeaderRow();\r\n      var cells = tHead.cells;\r\n      for (var i = 0; i < cells.length; i++) {\r\n        if (columnName == this.__getColumName(cells.item(i))) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    qxWeb.$attach({\r\n      table: statics.table\r\n    });\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,qBAAqB,EAAE;IACzCC,MAAM,EAAEL,EAAE,CAACM,EAAE,CAACC,OAAO,CAACC,MAAM;IAE5BC,SAAS,WAAAA,UAACC,QAAQ,EAAEC,OAAO,EAAE;MAC3BX,EAAA,CAAAM,EAAA,CAAAC,OAAA,CAAAC,MAAA,CAAAI,WAAA,CAAAC,IAAA,OAAMH,QAAQ,EAAEC,OAAO;IACzB,CAAC;IAEDG,MAAM,EAAE;MACN;MACAC,WAAW,EAAE,OAAO;MACpB;MACAC,eAAe,EAAE,OAAO;MACxB;MACAC,SAAS,EAAE,QAAQ;MACnB;MACAC,SAAS,EAAE,QAAQ;MACnB;MACAC,OAAO,EAAE,QAAQ;MACjB;MACAC,YAAY,EAAE,OAAO;MACrB;MACAC,UAAU,EAAE,QAAQ;MACpB;MACAC,IAAI,EAAE,QAAQ;MACd;MACAC,MAAM,EAAE;IACV,CAAC;IAEDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE;QACPC,aAAa,EAAE,KAAK;QACpBC,YAAY,EAAE,MAAM;QACpBC,QAAQ,EAAE;MACZ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"
}