{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Widget",
    "construct",
    "selector",
    "context",
    "events",
    "modelChange",
    "selectionChange",
    "cellClick",
    "cellHover",
    "cellOut",
    "modelApplied",
    "cellRender",
    "sort",
    "filter",
    "statics",
    "_config",
    "caseSensitive",
    "rowSelection",
    "sortable",
    "_templates",
    "columnDefault",
    "table",
    "model",
    "Table",
    "__model",
    "init",
    "__isNumber",
    "n",
    "Object",
    "prototype",
    "toString",
    "call",
    "isNaN",
    "parseFloat",
    "isFinite",
    "replace",
    "__isDate",
    "val",
    "d",
    "Date",
    "valueOf",
    "__getIndex",
    "htmlCollection",
    "htmlElement",
    "index",
    "i",
    "l",
    "length",
    "item",
    "__getUID",
    "getTime",
    "Math",
    "floor",
    "random",
    "substr",
    "__selectionTypes",
    "__internalCellClass",
    "__internalHeaderClass",
    "__internalSelectionClass",
    "__internalInputClass",
    "__allColumnSelector",
    "__dataColName",
    "__dataColType",
    "__dataSortingKey",
    "__modelSortingKey",
    "__inputLabelClass",
    "__selectedRowClass",
    "__ascSortingClass",
    "__descSortingClass",
    "members",
    "__columnMeta",
    "__sortingFunction",
    "__filterFunction",
    "__filterFunc",
    "__filters",
    "__inputName",
    "__hovered",
    "__sortingData",
    "qxWeb",
    "getNodeName",
    "toUpperCase",
    "Error",
    "tHead",
    "find",
    "addClass",
    "__getColumnMetaData",
    "setModel",
    "setSortingFunction",
    "__defaultColumnSort",
    "__registerEvents",
    "lang",
    "Type",
    "isArray",
    "emit",
    "setColumnType",
    "columnName",
    "type",
    "__checkColumnExistance",
    "getColumnType",
    "eq",
    "getCell",
    "row",
    "col",
    "__getRoot",
    "rows",
    "cells",
    "getRows",
    "setCompareFunction",
    "compareFunc",
    "string",
    "firstUp",
    "setProperty",
    "unsetCompareFunction",
    "_compareString",
    "getCompareFunction",
    "getProperty",
    "func",
    "unsetSortingFunction",
    "setFilterFunction",
    "unsetFilterFunction",
    "__defaultColumnFilter",
    "setColumnFilter",
    "getColumnFilter",
    "setRowFilter",
    "getRowFilter",
    "dir",
    "setSortingClass",
    "__sortDOM",
    "__sort",
    "columName",
    "direction",
    "keyword",
    "resetFilter",
    "appendChild",
    "document",
    "createDocumentFragment",
    "__filterDom",
    "filters",
    "setContent",
    "tableData",
    "__extractTableRows",
    "tbody",
    "empty",
    "appendTo",
    "render",
    "appendContent",
    "data",
    "markup",
    "create",
    "isNode",
    "nodeName",
    "colIndex",
    "__getColumnIndex",
    "filterFunc",
    "__getDataRows",
    "columnIndex",
    "cell",
    "bind",
    "getSortingData",
    "sortingData",
    "getConfig",
    "__applyTemplate",
    "indexOf",
    "__processSelectionInputs",
    "remove",
    "__createInputs",
    "__createInput",
    "__getHeaderRow",
    "getElementsByTagName",
    "cssPrefix",
    "getCssPrefix",
    "clazz",
    "headerInput",
    "selectionMode",
    "checked",
    "inputName",
    "className",
    "currentInput",
    "id",
    "inputNode",
    "insertBefore",
    "tHeadOrFoot",
    "__addClassToHeaderAndFooter",
    "tFoot",
    "colName",
    "headerRow",
    "__getColumName",
    "getAttribute",
    "setAttribute",
    "name",
    "footOrHead",
    "hasClass",
    "dataRows",
    "insertAfter",
    "on",
    "__detectClickedCell",
    "__cellHover",
    "__cellOut",
    "__selectionRendered",
    "__processSelection",
    "inputs",
    "clickedInput",
    "selection",
    "toArray",
    "array",
    "input",
    "push",
    "selectedRows",
    "map",
    "elem",
    "parentNode",
    "removeClass",
    "__fireEvent",
    "eventType",
    "target",
    "colNumber",
    "headCell",
    "e",
    "getTarget",
    "classname",
    "getParents",
    "window",
    "setTimeout",
    "hovered",
    "getClosest",
    "relatedTarget",
    "getRelatedTarget",
    "isChildOf",
    "createdRow",
    "colMeta",
    "renderedRow",
    "inputType",
    "__deleteRows",
    "renderedColIndex",
    "templateApplied",
    "coltemplate",
    "getTemplate",
    "rowCount",
    "__isRowRendered",
    "insertRow",
    "j",
    "colCount",
    "__getDataForColumn",
    "template",
    "__isCellRendered",
    "replaceChild",
    "value",
    "renderedRows",
    "deleteRow",
    "tBodies",
    "rowIndex",
    "__addSortingClassToCol",
    "HeaderOrFooter",
    "removeClasses",
    "meta",
    "columnType",
    "a",
    "b",
    "x",
    "__getSortingKey",
    "y",
    "_compareNumber",
    "Number",
    "headerCell",
    "_compareDate",
    "toLowerCase",
    "__getCellValue",
    "textContent",
    "innerText",
    "len",
    "sortedData",
    "cellValue",
    "defer",
    "$attach"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/website/Table.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Romeo Kenfack Tsakem (rkenfack)\n\n************************************************************************ */\n\n/**\n * This is a widget that enhances an HTML table with some basic features like\n * Sorting and Filtering.\n *\n * <h2>CSS Classes</h2>\n * <table>\n *   <thead>\n *     <tr>\n *       <td>Class Name</td>\n *       <td>Applied to</td>\n *       <td>Description</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td><code>qx-table</code></td>\n *       <td>Table element</td>\n *       <td>Identifies the Table widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-cell</code></td>\n *       <td>Table cell (<code>td</code>)</td>\n *       <td>Identifies and styles a cell of the widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-header</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles a header of the table widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-row-selection</code></td>\n *       <td>Table cell (<code>td</code>)</td>\n *       <td>Identifies and styles the cells containing the inputs for the row selection</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-selection-input</code></td>\n *       <td><code>input</code></td>\n *       <td>Identifies and styles input element to select a table row</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-input-label</code></td>\n *       <td>Label element (<code>label</code>)</td>\n *       <td>Identifies and styles label contained in the selection cell. This label can be used to create custom inputs</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-row-selected</code></td>\n *       <td>Selected row (<code>tr</code>)</td>\n *       <td>Identifies and styles the selected table rows</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-sort-asc</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles the header of the current ascendant sorted column</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-sort-desc</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles the header of the current descendant sorted column</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * @group (Widget)\n *\n */\nqx.Bootstrap.define(\"qx.ui.website.Table\", {\n  extend: qx.ui.website.Widget,\n\n  construct(selector, context) {\n    super(selector, context);\n  },\n\n  events: {\n    /** Fires at each model change */\n    modelChange: \"Array\",\n    /** Fires at each selection change */\n    selectionChange: \"qxWeb\",\n    /** Fires each time a cell of the widget is clicked */\n    cellClick: \"Object\",\n    /** Fires each time a cell of the widget is hovered */\n    cellHover: \"Object\",\n    /** Fires each time the mouse leave a cell of the table widget */\n    cellOut: \"Object\",\n    /** Fires after the model has been applied to the widget */\n    modelApplied: \"Array\",\n    /** Fires each time the value of a cell is rendered into the cell */\n    cellRender: \"Object\",\n    /** Fires after the table rows have been sorted */\n    sort: \"Object\",\n    /** Fires after the table rows have been filtered */\n    filter: \"Object\"\n  },\n\n  statics: {\n    /**\n     * *caseSensitive*\n     * Determines if the string sorting/filtering should be case sensitive or not. Default value : <code>false</code>.\n     *\n     * *rowSelection*\n     * Defines the row selection type. Possible values are : 'none', 'single', 'multiple'. Default value : <code>none</code>.\n     *\n     */\n    _config: {\n      caseSensitive: false,\n      rowSelection: \"none\",\n      sortable: false\n    },\n\n    /**\n     * *columnDefault*\n     * The Default cell template for all the table columns. Default value :\n     *\n     * <pre>\n     *   <td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\n     *     <div class='qx-table-cell-wrapper'>\n     *       <label>{{& value }}</label>\n     *     </div>\n     *   <td>\"\n     * </pre>\n     *\n     * To define a custom template for a specific name use <code>setTemplate('colname', template)</code> or use <br>\n     * <code>setTemplate('columnDefault', template)</code> to set one template for all your table columns.\n     *\n     */\n    _templates: {\n      columnDefault:\n        \"<td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\" +\n        \"<div class='qx-table-cell-wrapper'>\" +\n        \"<label>{{& value }}</label>\" +\n        \"</div>\" +\n        \"<td>\"\n    },\n\n    /**\n     * Factory method which converts the current collection into a collection of\n     * table widgets.\n     * @param model {Array} The model of the widgets in the collection\n     * @return {qx.ui.website.Table} A new table collection.\n     * @attach {qxWeb}\n     */\n    table(model) {\n      var table = new qx.ui.website.Table(this);\n      table.__model = model;\n      table.init();\n      return table;\n    },\n\n    /**\n     * Checks if a given string is a number\n     * @param n {String} The String to check the type for\n     * @return {Boolean} The result of the check\n     */\n    __isNumber(n) {\n      return (\n        (Object.prototype.toString.call(n) === \"[object Number]\" ||\n          Object.prototype.toString.call(n) === \"[object String]\") &&\n        !isNaN(parseFloat(n)) &&\n        isFinite(n.toString().replace(/^-/, \"\"))\n      );\n    },\n\n    /**\n     * Checks if a given string is a Date\n     * @param val {String} The String to check the type for\n     * @return {Boolean} The result of the check\n     */\n    __isDate(val) {\n      var d = new Date(val);\n      return !isNaN(d.valueOf());\n    },\n\n    /**\n     * Gets the index of an HTMLElement inside of an HTMLCollection\n     * @param htmlCollection {HTMLCollection} The HTMLCollection\n     * @param htmlElement {HTMLElement} The HTMLElement\n     * @return {Integer} The position of the htmlElement or -1\n     */\n    __getIndex(htmlCollection, htmlElement) {\n      var index = -1;\n      for (var i = 0, l = htmlCollection.length; i < l; i++) {\n        if (htmlCollection.item(i) == htmlElement) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n\n    /**\n     * Generates an unique id\n     * @return {String} The generated id\n     */\n    __getUID() {\n      return (\n        new Date().getTime() +\n        \"\" +\n        Math.floor(Math.random() * 1000000)\n      ).substr(0, 18);\n    },\n\n    /** */\n    __selectionTypes: [\"single\", \"multiple\", \"none\"],\n    /** */\n    __internalCellClass: \"qx-table-cell\",\n    /** */\n    __internalHeaderClass: \"qx-table-header\",\n    /** */\n    __internalSelectionClass: \"qx-table-row-selection\",\n    /** */\n    __internalInputClass: \"qx-table-selection-input\",\n    /** */\n    __allColumnSelector: \"qx-table-all-columns\",\n    /** */\n    __dataColName: \"data-qx-table-col-name\",\n    /** */\n    __dataColType: \"data-qx-table-col-type\",\n    /** */\n    __dataSortingKey: \"data-qx-table-cell-key\",\n    /** */\n    __modelSortingKey: \"cellKey\",\n    /** */\n    __inputLabelClass: \"qx-table-input-label\",\n    /** */\n    __selectedRowClass: \"qx-table-row-selected\",\n    /** */\n    __ascSortingClass: \"qx-table-sort-asc\",\n    /** */\n    __descSortingClass: \"qqx-table-sort-desc\"\n  },\n\n  members: {\n    __model: null,\n    __columnMeta: null,\n    __sortingFunction: null,\n    __filterFunction: null,\n    __filterFunc: null,\n    __filters: null,\n    __inputName: null,\n    __hovered: null,\n    __sortingData: null,\n\n    // overridden\n    init() {\n      if (!super.init()) {\n        return false;\n      }\n\n      var model = this.__model;\n\n      if (qxWeb.getNodeName(this).toUpperCase() !== \"TABLE\") {\n        throw new Error(\"collection should contains only table elements !!\");\n      }\n\n      if (!this[0].tHead) {\n        throw new Error(\"A Table header element is required for this widget.\");\n      }\n\n      this.find(\"tbody td\").addClass(\"qx-table-cell\");\n\n      this.__inputName = \"input\" + qx.ui.website.Table.__getUID();\n      this.__getColumnMetaData(model);\n      this.setModel(model);\n      this.setSortingFunction(this.__defaultColumnSort);\n\n      this.__registerEvents();\n\n      this.__hovered = null;\n\n      return true;\n    },\n\n    /**\n     * Sets the given model to the widgets in the collection\n     *\n     * @param model {Array} The model to be set\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setModel(model) {\n      if (typeof model != \"undefined\") {\n        if (qx.lang.Type.isArray(model)) {\n          this.__model = model;\n          this.emit(\"modelChange\", model);\n        } else {\n          throw new Error(\"model must be an Array !!\");\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Set the column types for the table widgets in the collection\n     * @param columnName {String} The column name\n     * @param type {String} The type of the column\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setColumnType(columnName, type) {\n      this.__checkColumnExistance(columnName);\n      this.__columnMeta[columnName].type = type;\n\n      return this;\n    },\n\n    /**\n     * Returns the type of the specified column\n     * @param columnName {String} The column name\n     * @return {String} The type of the specified column\n     */\n    getColumnType(columnName) {\n      this.eq(0).__checkColumnExistance(columnName);\n      return this.eq(0).__columnMeta[columnName].type;\n    },\n\n    /**\n     * Returns the cell at the given position for the first widget in the collection\n     * @param row {Integer} The row number\n     * @param col {Integer} The column number\n     * @return {qxWeb} The cell found at the given position\n     */\n    getCell(row, col) {\n      return qxWeb(this.eq(0).__getRoot().rows.item(row).cells.item(col));\n    },\n\n    /**\n     * Returns a collection containing the rows of the first table in the collection.\n     * @return {qxWeb} The collection containing the table rows\n     */\n    getRows() {\n      return qxWeb(this.eq(0).__getRoot().rows);\n    },\n\n    /**\n     * Defines the comparison function to use to sort columns of the given type\n     * @param type {String} The type to define the function for\n     * @param compareFunc {Function} The comparison function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setCompareFunction(type, compareFunc) {\n      type = qxWeb.string.firstUp(type);\n      this.setProperty([\"_compare\" + type], compareFunc);\n      return this;\n    },\n\n    /**\n     * Unset the compare function for the given type\n     *\n     * @param type {String} The type to unset the function for\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetCompareFunction(type) {\n      type = qxWeb.string.firstUp(type);\n      var compareFunc = this[\"_compare\" + type] || this._compareString;\n      this.setProperty([\"_compare\" + type], compareFunc);\n      return this;\n    },\n\n    /**\n     * Returns the comparison function for the given type\n     * @param type {String} The type to get the comparison function for\n     * @return {Function} The comparison function\n     */\n    getCompareFunction(type) {\n      type = qxWeb.string.firstUp(type);\n      return this.getProperty(\"_compare\" + type) || this[\"_compare\" + type];\n    },\n\n    /**\n     * Set the function that control the sorting process\n     * @param func {Function} The sorting function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setSortingFunction(func) {\n      func = func || function () {};\n      this.__sortingFunction = func;\n\n      return this;\n    },\n\n    /**\n     * Unset the function that control the sorting process\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetSortingFunction() {\n      this.__sortingFunction = this.__defaultColumnSort;\n\n      return this;\n    },\n\n    /**\n     * Set the function that will be used to process the column filtering\n     * @param func {Function} The filter function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setFilterFunction(func) {\n      this.__filterFunction = func;\n\n      return this;\n    },\n\n    /**\n     * Unset the filter function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetFilterFunction() {\n      this.__filterFunction = this.__defaultColumnFilter;\n\n      return this;\n    },\n\n    /**\n     * Set the filter function to use to filter a specific column\n     * @param columnName {String} The name of the column\n     * @param func {Function} The filter\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     *\n     */\n    setColumnFilter(columnName, func) {\n      this.__checkColumnExistance(columnName);\n      if (!this.__filterFunc) {\n        this.__filterFunc = {};\n      }\n      this.__filterFunc[columnName] = func;\n\n      return this;\n    },\n\n    /**\n     * Returns the filter function set on a specific column\n     *\n     * @param columnName {String} The name of the column\n     * @return {Function} The filter function\n     *\n     */\n    getColumnFilter(columnName) {\n      if (this.__filterFunc) {\n        return this.__filterFunc[columnName];\n      }\n      return null;\n    },\n\n    /**\n     * Set the filter function to use to filter the table rows\n     * @param func {Function} The filter\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setRowFilter(func) {\n      if (!this.__filterFunc) {\n        this.__filterFunc = {};\n      }\n      this.__filterFunc.row = func;\n\n      return this;\n    },\n\n    /**\n     * Returns the filter function set on a specific column\n     * @return {Function} The filter function\n     *\n     */\n    getRowFilter() {\n      if (this.__filterFunc) {\n        return this.__filterFunc.row;\n      }\n      return null;\n    },\n\n    /**\n     * Sort the column with the given name according to the specified direction\n     * @param columnName {String} The name of the column to sort\n     * @param dir {String} The sorting direction (asc or desc)\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    sort(columnName, dir) {\n      this.__checkColumnExistance(columnName);\n\n      this.setSortingClass(columnName, dir);\n      this.__sortDOM(this.__sort(columnName, dir));\n\n      this.emit(\"sort\", { columName: columnName, direction: dir });\n\n      return this;\n    },\n\n    /**\n     * Filters rows or columns according to the given parameters\n     * @param keyword {String} The keyword to use to filter\n     * @param columnName {String ?} The column name\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    filter(keyword, columnName) {\n      if (columnName) {\n        this.__checkColumnExistance(columnName);\n        if (keyword == \"\") {\n          this.resetFilter(columnName);\n        }\n      } else {\n        columnName = qx.ui.website.Table.__allColumnSelector;\n      }\n\n      if (!this.__filters) {\n        this.__filters = {};\n      }\n\n      if (this.__filters[columnName]) {\n        this.__filters[columnName].keyword = keyword;\n        this.__getRoot().appendChild(this.__filters[columnName].rows);\n      } else {\n        this.__filters[columnName] = {\n          keyword: keyword,\n          rows: document.createDocumentFragment()\n        };\n      }\n\n      this.__filterDom(keyword, columnName);\n\n      this.emit(\"filter\", { columName: columnName, keyword: keyword });\n\n      return this;\n    },\n\n    /**\n     * Resets the filter applied on a specific column\n     * @param columnName {String ?} The column name\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    resetFilter(columnName) {\n      var filters = null;\n      filters = this.__filters;\n      if (filters) {\n        if (columnName) {\n          this.__getRoot().appendChild(filters[columnName].rows);\n        } else {\n          for (var col in filters) {\n            this.__getRoot().appendChild(filters[col].rows);\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes the rows of in the table body\n     * @param tableData {String|qxWeb} Html string or collection containing the rows to be added\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setContent(tableData) {\n      var rows = this.__extractTableRows(tableData);\n      var tbody = this.find(\"tbody\");\n      tbody.empty();\n      rows.appendTo(tbody);\n      this.render();\n      return this;\n    },\n\n    /**\n     * Appends new rows to the table\n     * @param tableData {String|qxWeb} Html string or collection containing the rows to be appended\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    appendContent(tableData) {\n      var rows = this.__extractTableRows(tableData);\n      var tbody = this.find(\"tbody\");\n      rows.appendTo(tbody);\n      this.render();\n      return this;\n    },\n\n    /**\n     * Extracts table rows from a given HTML String or qxWeb collection\n     * @param data {qxWeb|String} Data containing the rows to be extracted\n     * @return {qxWeb} Collection containing extracted rows\n     */\n    __extractTableRows(data) {\n      var rows = qxWeb();\n      if (typeof data == \"string\") {\n        var markup = data;\n        data = qxWeb.create(data);\n        if (qxWeb.getNodeName(data) != \"table\") {\n          data = qxWeb.create(\"<table>\" + markup + \"</table>\");\n        }\n        rows = data.find(\"tbody tr\");\n      } else if (qxWeb.isNode(data) || data instanceof qxWeb) {\n        data = qxWeb(data);\n        var nodeName = qxWeb.getNodeName(data);\n        switch (nodeName) {\n          case \"table\":\n            rows = qxWeb(data).find(\"tbody tr\");\n            break;\n          case \"tr\":\n            rows = data;\n            break;\n          case \"tbody\":\n            rows = qxWeb(data).find(\"tr\");\n            break;\n        }\n      }\n      return rows;\n    },\n\n    /**\n     * Filters the rendered table cells\n     * @param keyword {String} The keyword to use to filter\n     * @param columnName {String ?} The column name\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __filterDom(keyword, columnName) {\n      var colIndex = this.__getColumnIndex(columnName);\n      var filterFunc =\n        columnName == qx.ui.website.Table.__allColumnSelector\n          ? this.getRowFilter()\n          : this.getColumnFilter(columnName);\n      filterFunc = filterFunc || this.__defaultColumnFilter;\n\n      var rows = this.__getDataRows(),\n        data = {};\n\n      for (var i = 0; i < rows.length; i++) {\n        data = {\n          columnName: columnName,\n          columnIndex: colIndex,\n          cell: colIndex > -1 ? qxWeb(rows[i].cells.item(colIndex)) : null,\n          row: qxWeb(rows[i]),\n          keyword: keyword\n        };\n\n        if (!filterFunc.bind(this)(data)) {\n          this.__filters[columnName].rows.appendChild(rows[i]);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the current column sorting information for the first widget in the collection\n     * @return {Map} The map containing the current sorting information\n     */\n    getSortingData() {\n      return this.__sortingData;\n    },\n\n    //overridden\n    render() {\n      var sortingData = this.getSortingData();\n      var rowSelection = this.getConfig(\"rowSelection\");\n\n      this.__applyTemplate(this.__model);\n\n      if (qx.ui.website.Table.__selectionTypes.indexOf(rowSelection) != -1) {\n        this.__processSelectionInputs(rowSelection);\n      }\n\n      if (sortingData) {\n        this.__sortDOM(\n          this.__sort(sortingData.columnName, sortingData.direction)\n        );\n      }\n\n      return this;\n    },\n\n    //Private API\n\n    /**\n     * Renders or removes the selection inputs according to the specified widget selection mode\n     * @param rowSelection {String} The selection mode\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __processSelectionInputs(rowSelection) {\n      switch (rowSelection) {\n        case \"none\":\n          qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).remove();\n          break;\n        case \"multiple\":\n        case \"single\":\n          this.__createInputs(\"checkbox\");\n          break;\n\n        case \"single\":\n          this.__createInputs(\"radio\");\n          break;\n      }\n\n      return this;\n    },\n\n    /**\n     * Creates input nodes for the row selection\n     * @param type {String} The type of the inputs to creates\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __createInputs(type) {\n      this.__createInput(this.__getHeaderRow(), type);\n      var rows = this.find(\"tbody\")[0].getElementsByTagName(\"tr\");\n      for (var i = 0; i < rows.length; i++) {\n        this.__createInput(rows.item(i), type);\n      }\n      return this;\n    },\n\n    /**\n     * Creates an input an input node for a specific row\n     * @param row {HTMLTableRowElement} The row to create the input for\n     * @param type {String} The type of the input tom create (radio or checkbox)\n     * @param nodeName {String} The nodename of the table cell that will contain the input\n     */\n    __createInput(row, type, nodeName) {\n      var cssPrefix = this.getCssPrefix();\n\n      var clazz = qx.ui.website.Table;\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\n      var selectionMode = this.getConfig(\"rowSelection\");\n\n      var checked = \"\";\n      if (headerInput.length > 0) {\n        checked =\n          selectionMode == \"multiple\" && headerInput[0].checked\n            ? \"checked\"\n            : \"\";\n      }\n\n      if (typeof nodeName == \"undefined\") {\n        nodeName = qxWeb.getNodeName(qxWeb(row.cells.item(0)));\n      }\n\n      var inputName = this.__inputName;\n      var className =\n        nodeName == \"th\"\n          ? clazz.__internalSelectionClass + \" \" + clazz.__internalHeaderClass\n          : clazz.__internalSelectionClass;\n\n      var currentInput = qxWeb(row).find(\".\" + clazz.__internalSelectionClass);\n\n      if (currentInput.length > 0) {\n        if (currentInput[0].type != type) {\n          currentInput[0].type = type;\n        }\n      } else {\n        var id = qx.ui.website.Table.__getUID();\n        var inputNode = qxWeb.create(\n          \"<\" +\n            nodeName +\n            \" class='\" +\n            className +\n            \"'><input id='\" +\n            id +\n            \"' name='\" +\n            inputName +\n            \"' \" +\n            checked +\n            \" class='\" +\n            cssPrefix +\n            \"-\" +\n            type +\n            \" \" +\n            clazz.__internalInputClass +\n            \"' type='\" +\n            type +\n            \"' /><label class='\" +\n            clazz.__inputLabelClass +\n            \"' for='\" +\n            id +\n            \"'></label></\" +\n            nodeName +\n            \">\"\n        );\n\n        if (row.cells.item(0)) {\n          inputNode.insertBefore(qxWeb(row.cells.item(0)));\n        } else {\n          inputNode.appendTo(qxWeb(row));\n        }\n      }\n    },\n\n    /**\n     * Checks if a column with the specified name exists\n     * @param columnName {String} The name of the column to check\n     */\n    __checkColumnExistance(columnName) {\n      var data = this.__columnMeta;\n      if (data && !data[columnName]) {\n        throw new Error(\"Column \" + columnName + \" does not exists !\");\n      }\n    },\n\n    /**\n     * Returns the row containing the cells with the column names\n     * @return {HTMLTableRowElement} The row with meta information\n     */\n    __getHeaderRow() {\n      var tHeadOrFoot = this[0].tHead;\n      if (!tHeadOrFoot) {\n        throw new Error(\"A Table header element is required for this widget.\");\n      }\n      var rows = tHeadOrFoot.rows;\n      if (rows.length == 1) {\n        return rows.item(0);\n      } else {\n        rows = qxWeb(\".qx-table-header-row\");\n        if (rows.length > 0) {\n          return rows[0];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Initializes columns metadata\n     * @param model {Array} The widget's model\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __getColumnMetaData(model) {\n      this.__addClassToHeaderAndFooter(this[0].tHead);\n      this.__addClassToHeaderAndFooter(this[0].tFoot);\n\n      var data = {},\n        cells = null,\n        colName = null,\n        cell = null;\n      var headerRow = this.__getHeaderRow();\n\n      cells = headerRow.cells;\n\n      for (var i = 0, l = cells.length; i < l; i++) {\n        cell = qxWeb(cells.item(i));\n        colName =\n          this.__getColumName(cell[0]) || qx.ui.website.Table.__getUID();\n        if (!cell[0].getAttribute(qx.ui.website.Table.__dataColName)) {\n          cell.setAttribute(qx.ui.website.Table.__dataColName, colName);\n        }\n\n        data[colName] = {\n          type:\n            cell[0].getAttribute(qx.ui.website.Table.__dataColType) || \"String\",\n          name: colName\n        };\n      }\n\n      this.__columnMeta = data;\n\n      return this;\n    },\n\n    /**\n     * Adds the internal css class to the header and footer cells\n     * @param footOrHead {HTMLElement} Html element representing the header or footer of the table\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __addClassToHeaderAndFooter(footOrHead) {\n      if (footOrHead && footOrHead.rows.length > 0) {\n        if (footOrHead.rows.item(0).cells.length > 0) {\n          var row = this.__getHeaderRow();\n          if (\n            !qxWeb(row.cells.item(0)).hasClass(\n              qx.ui.website.Table.__internalHeaderClass\n            )\n          ) {\n            qxWeb(row.cells).addClass(\n              qx.ui.website.Table.__internalHeaderClass\n            );\n          }\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Sorts the rows of the table widget\n     * @param dataRows {Array} Array containing the sorted rows\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __sortDOM(dataRows) {\n      for (var i = 0, l = dataRows.length; i < l; i++) {\n        if (i) {\n          qxWeb(dataRows[i]).insertAfter(dataRows[i - 1]);\n        } else {\n          qxWeb(dataRows[i]).insertBefore(qxWeb(this.__getRoot().rows.item(0)));\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * registers global events\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __registerEvents() {\n      this.on(\"tap\", this.__detectClickedCell);\n\n      this.on(\n        \"cellClick\",\n        function (data) {\n          if (\n            data.cell &&\n            data.cell.hasClass(qx.ui.website.Table.__internalHeaderClass)\n          ) {\n            this.__sortingFunction.bind(this)(data);\n          }\n        },\n        this\n      );\n\n      this.on(\"pointerover\", this.__cellHover, this);\n      this.on(\"pointerout\", this.__cellOut, this);\n\n      return this;\n    },\n\n    /**\n     * Checks if the selection inputs are already rendered\n     * @return {Boolean} True if the inputs are rendered and false otherwise\n     */\n    __selectionRendered() {\n      return (\n        qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).length > 0\n      );\n    },\n\n    /**\n     * Handles clicks that happen on the selection inputs\n     * @param cell {qxWeb} The table cell containing the clicked input\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __processSelection(cell) {\n      var clazz = qx.ui.website.Table;\n      var inputs = qxWeb(\".\" + clazz.__internalInputClass);\n      var clickedInput = cell.find(\"input\");\n      var selectionMode = this.getConfig(\"rowSelection\");\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\n      var selection = [];\n\n      if (selectionMode == \"multiple\") {\n        if (cell.hasClass(clazz.__internalHeaderClass)) {\n          inputs.setAttribute(\"checked\", clickedInput[0].checked);\n        }\n\n        var checked = true;\n        for (var i = 0; i < inputs.length; i++) {\n          if (inputs[i] != headerInput[0] && !inputs[i].checked) {\n            checked = false;\n            break;\n          }\n        }\n\n        headerInput.setAttribute(\"checked\", checked);\n        inputs = inputs.toArray();\n\n        if (checked) {\n          qxWeb.array.remove(inputs, headerInput[0]);\n          selection = inputs;\n        } else {\n          selection = inputs.filter(function (input) {\n            return input.checked;\n          });\n        }\n      } else {\n        if (clickedInput[0] != headerInput[0]) {\n          selection.push(clickedInput[0]);\n        }\n      }\n\n      var selectedRows = selection.map(function (elem) {\n        return elem.parentNode.parentNode;\n      });\n\n      selectedRows = qxWeb(selectedRows);\n      qxWeb(\".\" + clazz.__selectedRowClass).removeClass(\n        clazz.__selectedRowClass\n      );\n\n      selectedRows.addClass(clazz.__selectedRowClass);\n\n      this.emit(\"selectionChange\", { rows: qxWeb(selectedRows) });\n\n      return this;\n    },\n\n    /**\n     * Fires a custom table events\n     * @param eventType {String} The event type\n     * @param cell {HTMLTableCellElement} The event target\n     * @param target {HTMLElement} The native event target\n     * @return {Map} Map containing the event data\n     */\n    __fireEvent(eventType, cell, target) {\n      var row = cell[0].parentNode,\n        cells = row.cells;\n      var colNumber = qx.ui.website.Table.__getIndex(cells, cell[0]);\n      var tHead = this.__getHeaderRow();\n      var headCell = tHead.cells.item(colNumber);\n      var colName = this.__getColumName(headCell);\n      var columnIndex =\n        this.getConfig(\"rowSelection\") != \"none\"\n          ? this.__getColumnIndex(colName) - 1\n          : this.__getColumnIndex(colName);\n\n      var data = {\n        cell: qxWeb(cell),\n        row: qxWeb(row),\n        target: target,\n        columnIndex: columnIndex,\n        columnName: colName\n      };\n\n      this.emit(eventType, data);\n\n      return data;\n    },\n\n    /**\n     * Click callback\n     *\n     * @param e {Event} The native click event.\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __detectClickedCell(e) {\n      var target = e.getTarget();\n\n      var cell = qxWeb(target);\n      var clazz = qx.ui.website.Table;\n\n      while (\n        !(\n          cell.hasClass(clazz.__internalCellClass) ||\n          cell.hasClass(clazz.__internalHeaderClass) ||\n          cell.hasClass(clazz.__internalSelectionClass)\n        )\n      ) {\n        if (cell.hasClass(this.classname)) {\n          cell = null;\n          break;\n        }\n        cell = cell.getParents().eq(0);\n      }\n\n      if (cell.hasClass(clazz.__internalSelectionClass)) {\n        window.setTimeout(\n          function () {\n            this.__processSelection(cell);\n          }.bind(this),\n          5\n        );\n      } else {\n        if (cell && cell.length > 0) {\n          this.__fireEvent(\"cellClick\", cell, target);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Pointerover callback\n     *\n     * @param e {Event} The native over event.\n     */\n    __cellHover(e) {\n      var target = e.getTarget();\n      var cell = qxWeb(target);\n      var hovered = this.__hovered;\n\n      if (\n        !cell.hasClass(\"qx-table-cell\") &&\n        !cell.hasClass(\"qx-table-header\")\n      ) {\n        cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\n      }\n\n      if (\n        cell &&\n        cell.length > 0 &&\n        ((hovered && hovered.cell[0] != cell[0]) || !hovered) &&\n        !cell.hasClass(\"qx-table-row-selection\")\n      ) {\n        if (hovered) {\n          this.emit(\"cellOut\", hovered);\n        }\n\n        this.__hovered = this.__fireEvent(\"cellHover\", cell, target);\n      }\n    },\n\n    /**\n     * pointerout callback\n     *\n     * @param e {Event} The native over event.\n     */\n    __cellOut(e) {\n      var relatedTarget = e.getRelatedTarget();\n      var cell = qxWeb(relatedTarget);\n\n      if (this.__hovered) {\n        if (!cell.isChildOf(this)) {\n          this.emit(\"cellOut\", this.__hovered);\n          this.__hovered = null;\n        } else {\n          if (\n            !cell.hasClass(\"qx-table-cell\") &&\n            !cell.hasClass(\"qx-table-header\")\n          ) {\n            cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\n            if (cell.hasClass(\"qx-table-row-selection\")) {\n              this.emit(\"cellOut\", this.__hovered);\n              this.__hovered = null;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Applies the given model to the table cells depending on\n     * the mustache template specified before\n     * @param model {Array} The model to apply\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __applyTemplate(model) {\n      if (model && model.length > 0) {\n        var cell, row;\n        var tHead = this.__getHeaderRow();\n        var createdRow = null,\n          colMeta = null;\n        var renderedRow = null;\n\n        var inputType =\n          this.getConfig(\"rowSelection\") == \"single\" ? \"radio\" : \"checkbox\";\n\n        if (this.__getRoot().rows.length > model.length) {\n          this.__deleteRows(model.length);\n        }\n\n        var renderedColIndex = 0,\n          templateApplied = false;\n        var coltemplate = this.getTemplate(\"columnDefault\");\n        var colName = null;\n\n        for (var i = 0, rowCount = model.length; i < rowCount; i++) {\n          row = model[i];\n\n          if (!this.__isRowRendered(i)) {\n            createdRow = this.__getRoot().insertRow(i);\n            if (this.__selectionRendered()) {\n              this.__createInput(createdRow, inputType, \"td\");\n            }\n          }\n\n          for (var j = 0, colCount = row.length; j < colCount; j++) {\n            renderedColIndex = this.__selectionRendered() ? j + 1 : j;\n            colName = this.__getColumName(tHead.cells.item(renderedColIndex));\n            colMeta = this.__getDataForColumn(colName);\n            coltemplate = this.getTemplate(colName) || coltemplate;\n            renderedRow = this.__getRoot().rows.item(i);\n            cell = qxWeb.create(\n              qxWeb.template.render(coltemplate, model[i][j])\n            )[0];\n\n            if (cell.nodeName.toUpperCase() != \"TD\") {\n              break;\n            }\n\n            if (!this.__isCellRendered(i, renderedColIndex)) {\n              renderedRow.appendChild(cell);\n            } else {\n              renderedRow.replaceChild(\n                cell,\n                this.getCell(i, renderedColIndex)[0]\n              );\n            }\n            this.emit(\"cellRender\", {\n              cell: cell,\n              row: i,\n              col: j,\n              value: model[i][j]\n            });\n          }\n\n          if (i == rowCount - 1) {\n            templateApplied = true;\n          }\n        }\n\n        if (templateApplied) {\n          this.emit(\"modelApplied\", model);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes row from the DOM starting from the specified index\n     * @param  rowCount {Integer} The number of rows the kept\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __deleteRows(rowCount) {\n      var renderedRows = this.__getRoot().rows;\n      while (renderedRows.length > rowCount) {\n        this[0].deleteRow(renderedRows.length);\n      }\n      return this;\n    },\n\n    /**\n     * Gets the metadata of the column width the specified name\n     * @param columName {String} The name of the column to get the metadata for\n     * @return {Map} Map containing the metadata\n     */\n    __getDataForColumn(columName) {\n      return this.__columnMeta[columName];\n    },\n\n    /**\n     * Gets the Root element containing the data rows\n     * @return {HTMLElement} The element containing the data rows\n     */\n    __getRoot() {\n      return this[0].tBodies.item(0) || this[0];\n    },\n\n    /**\n     * Checks if the row with the given index is rendered\n     * @param index {Integer} The index of the row to check\n     * @return {Boolean} The result of the check\n     */\n    __isRowRendered(index) {\n      if (this.__getRoot().rows.item(index)) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Checks if the cell with the given row and column indexes is rendered\n     * @param rowIndex {Integer} The index of the row to check\n     * @param colIndex {Integer} The index of the column\n     * @return {Boolean} The result of the check\n     */\n    __isCellRendered(rowIndex, colIndex) {\n      if (!this.__isRowRendered(rowIndex)) {\n        return false;\n      }\n      if (this.__getRoot().rows.item(rowIndex).cells.item(colIndex)) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Adds a class to the head and footer of the current sorted column\n     * @param columnName {String} The name of the sorted column\n     * @param dir {String} The sorting direction\n     */\n    setSortingClass(columnName, dir) {\n      var data = {\n        columnName: columnName,\n        direction: dir\n      };\n\n      this.__sortingData = data;\n      this.__addSortingClassToCol(this[0].tHead, columnName, dir);\n    },\n\n    /**\n     * Adds a class to the head or footer of the current sorted column\n     * @param HeaderOrFooter {Node} The n\n     * @param columnName {String} The name of the sorted column\n     * @param dir {String} The sorting direction\n     */\n    __addSortingClassToCol(HeaderOrFooter, columnName, dir) {\n      var rows = this.__getHeaderRow();\n      if (HeaderOrFooter && rows) {\n        qxWeb(rows.cells).removeClasses([\n          \"qx-table-sort-asc\",\n          \"qx-table-sort-desc\"\n        ]);\n\n        var cell = qxWeb(\n          \"[\" +\n            qx.ui.website.Table.__dataColName +\n            \"='\" +\n            columnName +\n            \"'], #\" +\n            columnName\n        );\n\n        cell.addClass(\"qx-table-sort-\" + dir);\n      }\n    },\n\n    /**\n     * Sorts the table rows for the given row and direction\n     * @param columnName {String} The name of the column to be sorted\n     * @param direction {String} The sorting direction\n     * @return {Array} Array containing the sorted rows\n     */\n    __sort(columnName, direction) {\n      var meta = this.__getDataForColumn(columnName);\n      var columnType = qxWeb.string.firstUp(meta.type);\n\n      if (\n        !this[\"_compare\" + columnType] &&\n        !this.getProperty(\"_compare\" + columnType)\n      ) {\n        columnType = \"String\";\n      }\n\n      var compareFunc = this.getCompareFunction(columnType).bind(this);\n      var model = this.__getDataRows();\n      var columnIndex = this.__getColumnIndex(columnName);\n\n      return model.sort(\n        function (a, b) {\n          var x = this.__getSortingKey(qxWeb(a.cells.item(columnIndex)));\n          var y = this.__getSortingKey(qxWeb(b.cells.item(columnIndex)));\n          return compareFunc(x, y, direction);\n        }.bind(this)\n      );\n    },\n\n    /**\n     * Compares two number\n     * @param x {String} The String value of the first number to compare\n     * @param y {String} The String value of the second number to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareNumber(x, y, direction) {\n      x = qx.ui.website.Table.__isNumber(x) ? Number(x) : 0;\n      y = qx.ui.website.Table.__isNumber(y) ? Number(y) : 0;\n      if (direction == \"asc\") {\n        return x - y;\n      } else if (direction == \"desc\") {\n        return y - x;\n      }\n      return 0;\n    },\n\n    /**\n     * Gets the name of the column containing the given cell\n     * @param headerCell {HTMLTableCellElement} The cell to get the column name for\n     * @return {String} The column name\n     */\n    __getColumName(headerCell) {\n      return (\n        headerCell.getAttribute(qx.ui.website.Table.__dataColName) ||\n        headerCell.getAttribute(\"id\")\n      );\n    },\n\n    /**\n     * Compares two Dates\n     * @param x {String} The String value of the first date to compare\n     * @param y {String} The String value of the second date to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareDate(x, y, direction) {\n      x = qx.ui.website.Table.__isDate(x) ? new Date(x) : new Date(0);\n      y = qx.ui.website.Table.__isDate(y) ? new Date(y) : new Date(0);\n\n      if (direction == \"asc\") {\n        return x - y;\n      } else if (direction == \"desc\") {\n        return y - x;\n      }\n      return 0;\n    },\n\n    /**\n     * Compares two Strings\n     * @param x {String} The first string to compare\n     * @param y {String} The second string to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareString(x, y, direction) {\n      if (!this.getConfig(\"caseSensitive\")) {\n        x = x.toLowerCase();\n        y = y.toLowerCase();\n      }\n      if (direction == \"asc\") {\n        return x < y ? -1 : x > y ? 1 : 0;\n      } else if (direction == \"desc\") {\n        return x > y ? -1 : x < y ? 1 : 0;\n      }\n      return 0;\n    },\n\n    /**\n     * Returns the value of the cell to use for sorting\n     * @param cell {qxWeb} The cell to get the value of.\n     * @return {String} The sorting key\n     */\n    __getSortingKey(cell) {\n      return (\n        cell.getAttribute(qx.ui.website.Table.__dataSortingKey) ||\n        this.__getCellValue(cell)\n      );\n    },\n\n    /**\n     * Returns the value of the cell that will be used for sorting\n     * @param cell {qxWeb} The cell to get the value of\n     * @return {String} The text content of the cell\n     */\n    __getCellValue(cell) {\n      return cell[0].textContent || cell[0].innerText || \"\";\n    },\n\n    /**\n     * Gets the table's data rows from the DOM\n     * @return {Array} Array containing the rows of the table\n     */\n    __getDataRows() {\n      var rows = this.find(\"tbody\")[0].rows,\n        model = [],\n        cell = null,\n        cells = [];\n\n      for (var i = 0, l = rows.length; i < l; i++) {\n        cells = rows.item(i).cells;\n        if (cells.length > 0 && cells[0].nodeName.toUpperCase() != \"TD\") {\n          continue;\n        }\n\n        for (var j = 0, len = cells.length; j < len; j++) {\n          cell = qxWeb(cells[j]);\n          if (!cell.hasClass(qx.ui.website.Table.__internalCellClass)) {\n            cell.addClass(qx.ui.website.Table.__internalCellClass);\n          }\n        }\n\n        model.push(rows.item(i));\n      }\n      return model;\n    },\n\n    /**\n     * Default sorting processing\n     * @param data {Map} Sorting data\n     */\n    __defaultColumnSort(data) {\n      var dir = \"asc\";\n      var sortedData = this.getSortingData();\n\n      if (sortedData) {\n        if (data.columnName == sortedData.columnName) {\n          if (sortedData.direction == dir) {\n            dir = \"desc\";\n          }\n        }\n      }\n      if (data.cell.hasClass(\"qx-table-header\")) {\n        this.sort(data.columnName, dir);\n      }\n    },\n\n    /**\n     * Default column filter function\n     * @param data {Map} Map containing the filter data\n     * @return {Boolean} True wenn the row containing the current cell should be kept\n     */\n    __defaultColumnFilter(data) {\n      var caseSensitive = this.getConfig(\"caseSensitive\");\n      var cell =\n        data.columnName == qx.ui.website.Table.__allColumnSelector\n          ? data.row\n          : data.cell;\n      var cellValue = this.__getCellValue(cell);\n\n      if (caseSensitive) {\n        return cellValue.indexOf(data.keyword) != -1;\n      } else {\n        return (\n          cellValue.toLowerCase().indexOf(data.keyword.toLowerCase()) != -1\n        );\n      }\n    },\n\n    /**\n     * Gets the index of the column with the specified name\n     * @param columnName {String} The colukn name\n     * @return {Integer} The index of the column or -1 if the column doesn't exists\n     */\n    __getColumnIndex(columnName) {\n      var tHead = this.__getHeaderRow();\n      var cells = tHead.cells;\n      for (var i = 0; i < cells.length; i++) {\n        if (columnName == this.__getColumName(cells.item(i))) {\n          return i;\n        }\n      }\n      return -1;\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$attach({\n      table: statics.table\n    });\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,qBAApB,EAA2C;IACzCC,MAAM,EAAEL,EAAE,CAACM,EAAH,CAAMC,OAAN,CAAcC,MADmB;IAGzCC,SAHyC,qBAG/BC,QAH+B,EAGrBC,OAHqB,EAGZ;MAC3B,4CAAMD,QAAN,EAAgBC,OAAhB;IACD,CALwC;IAOzCC,MAAM,EAAE;MACN;MACAC,WAAW,EAAE,OAFP;;MAGN;MACAC,eAAe,EAAE,OAJX;;MAKN;MACAC,SAAS,EAAE,QANL;;MAON;MACAC,SAAS,EAAE,QARL;;MASN;MACAC,OAAO,EAAE,QAVH;;MAWN;MACAC,YAAY,EAAE,OAZR;;MAaN;MACAC,UAAU,EAAE,QAdN;;MAeN;MACAC,IAAI,EAAE,QAhBA;;MAiBN;MACAC,MAAM,EAAE;IAlBF,CAPiC;IA4BzCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE;QACPC,aAAa,EAAE,KADR;QAEPC,YAAY,EAAE,MAFP;QAGPC,QAAQ,EAAE;MAHH,CATF;;MAeP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,EAAE;QACVC,aAAa;MADH,CA/BL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"
}