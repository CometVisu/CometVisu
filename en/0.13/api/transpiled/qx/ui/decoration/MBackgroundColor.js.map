{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "backgroundColor",
    "check",
    "nullable",
    "apply",
    "members",
    "_styleBackgroundColor",
    "styles",
    "bgcolor",
    "getBackgroundColor",
    "core",
    "Environment",
    "get",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "resolve",
    "_applyBackgroundColor",
    "ui",
    "decoration",
    "MBackgroundColor"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/decoration/MBackgroundColor.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n/**\r\n * Mixin responsible for setting the background color of a widget.\r\n * This mixin is usually used by {@link qx.ui.decoration.Decorator}.\r\n */\r\nqx.Mixin.define(\"qx.ui.decoration.MBackgroundColor\", {\r\n  properties: {\r\n    /** Color of the background */\r\n    backgroundColor: {\r\n      check: \"Color\",\r\n      nullable: true,\r\n      apply: \"_applyBackgroundColor\"\r\n    }\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Adds the background-color styles to the given map\r\n     * @param styles {Map} CSS style map\r\n     */\r\n    _styleBackgroundColor(styles) {\r\n      var bgcolor = this.getBackgroundColor();\r\n\r\n      if (bgcolor && qx.core.Environment.get(\"qx.theme\")) {\r\n        bgcolor = qx.theme.manager.Color.getInstance().resolve(bgcolor);\r\n      }\r\n\r\n      if (bgcolor) {\r\n        styles[\"background-color\"] = bgcolor;\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyBackgroundColor() {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        if (this._isInitialized()) {\r\n          throw new Error(\r\n            \"This decorator is already in-use. Modification is not possible anymore!\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mCAAmC,EAAE;IACnDC,UAAU,EAAE;MACV;MACAC,eAAe,EAAE;QACfC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE;MACT;IACF,CAAC;IAEDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;MACIC,qBAAqB,WAAAA,sBAACC,MAAM,EAAE;QAC5B,IAAIC,OAAO,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;QAEvC,IAAID,OAAO,IAAId,EAAE,CAACgB,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,UAAU,CAAC,EAAE;UAClDJ,OAAO,GAAGd,EAAE,CAACmB,KAAK,CAACC,OAAO,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAACT,OAAO,CAAC;QACjE;QAEA,IAAIA,OAAO,EAAE;UACXD,MAAM,CAAC,kBAAkB,CAAC,GAAGC,OAAO;QACtC;MACF,CAAC;MAED;MACAU,qBAAqB,WAAAA,sBAAA,EAAG,CAQxB;IACF;EACF,CAAC,CAAC;EA3DFxB,EAAE,CAACyB,EAAE,CAACC,UAAU,CAACC,gBAAgB,CAACxB,aAAa,GAAGA,aAAa;AAAC"
}