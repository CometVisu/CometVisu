{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "decoration",
    "IDecorator",
    "type",
    "members",
    "__insets",
    "_getDefaultInsets",
    "Error",
    "_isInitialized",
    "_resetInsets",
    "getInsets",
    "destruct",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/decoration/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n/**\n * This class acts as abstract class for all decorators. It offers the\n * properties for the insets handling. Each decorator has to define its own\n * default insets by implementing the template method\n * (http://en.wikipedia.org/wiki/Template_Method) <code>_getDefaultInsets</code>\n */\nqx.Class.define(\"qx.ui.decoration.Abstract\", {\n  extend: qx.core.Object,\n  implement: [qx.ui.decoration.IDecorator],\n  type: \"abstract\",\n\n  members: {\n    __insets: null,\n\n    /**\n     * Abstract method. Should return a map containing the default insets of\n     * the decorator. This could look like this:\n     * <pre>\n     * return {\n     *   top : 0,\n     *   right : 0,\n     *   bottom : 0,\n     *   left : 0\n     * };\n     * </pre>\n     * @return {Map} Map containing the insets.\n     */\n    _getDefaultInsets() {\n      throw new Error(\"Abstract method called.\");\n    },\n\n    /**\n     * Abstract method. Should return an boolean value if the decorator is\n     * already initialized or not.\n     * @return {Boolean} True, if the decorator is initialized.\n     */\n    _isInitialized() {\n      throw new Error(\"Abstract method called.\");\n    },\n\n    /**\n     * Resets the insets.\n     */\n    _resetInsets() {\n      this.__insets = null;\n    },\n\n    // interface implementation\n    getInsets() {\n      if (!this.__insets) {\n        this.__insets = this._getDefaultInsets();\n      }\n\n      return this.__insets;\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    this.__insets = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC3CC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,SAAS,EAAE,CAACT,EAAE,CAACU,EAAE,CAACC,UAAU,CAACC,UAAU,CAAC;IACxCC,IAAI,EAAE,UAAU;IAEhBC,OAAO,EAAE;MACPC,SAAQ,EAAE,IAAI;MAEd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,iBAAiB,WAAAA,kBAAA,EAAG;QAClB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAAA,EAAG;QACf,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC;MAED;AACJ;AACA;MACIE,YAAY,WAAAA,aAAA,EAAG;QACb,IAAI,CAACJ,SAAQ,GAAG,IAAI;MACtB,CAAC;MAED;MACAK,SAAS,WAAAA,UAAA,EAAG;QACV,IAAI,CAAC,IAAI,CAACL,SAAQ,EAAE;UAClB,IAAI,CAACA,SAAQ,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;QAC1C;QAEA,OAAO,IAAI,CAACD,SAAQ;MACtB;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEM,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACN,SAAQ,GAAG,IAAI;IACtB;EACF,CAAC,CAAC;EApFFf,EAAE,CAACU,EAAE,CAACC,UAAU,CAACW,QAAQ,CAACnB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}