{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "borderImage",
    "check",
    "nullable",
    "apply",
    "sliceTop",
    "init",
    "sliceRight",
    "sliceBottom",
    "sliceLeft",
    "slice",
    "group",
    "mode",
    "repeatX",
    "repeatY",
    "repeat",
    "fill",
    "borderImageMode",
    "members",
    "_styleBorderImage",
    "styles",
    "getBorderImage",
    "resolvedImage",
    "util",
    "AliasManager",
    "getInstance",
    "resolve",
    "source",
    "ResourceManager",
    "toUri",
    "computedSlices",
    "_getDefaultInsetsForBorderImage",
    "top",
    "right",
    "bottom",
    "left",
    "getRepeatX",
    "getRepeatY",
    "join",
    "getFill",
    "core",
    "Environment",
    "get",
    "styleName",
    "bom",
    "Style",
    "getPropertyName",
    "cssName",
    "getCssName",
    "__getSlices",
    "getSliceTop",
    "getSliceRight",
    "getSliceBottom",
    "getSliceLeft",
    "_applyBorderImage",
    "__P_335_0",
    "baseImage",
    "getBorderImageMode",
    "topSlice",
    "rightSlice",
    "bottomSlice",
    "leftSlice",
    "split",
    "exec",
    "prefix",
    "ext",
    "getImageHeight",
    "getImageWidth",
    "ui",
    "decoration",
    "MBorderImage"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/decoration/MBorderImage.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Decorator which uses the CSS3 border image properties.\r\n */\r\nqx.Mixin.define(\"qx.ui.decoration.MBorderImage\", {\r\n  properties: {\r\n    /**\r\n     * Base image URL.\r\n     */\r\n    borderImage: {\r\n      check: \"String\",\r\n      nullable: true,\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * The top slice line of the base image. The slice properties divide the\r\n     * image into nine regions, which define the corner, edge and the center\r\n     * images.\r\n     */\r\n    sliceTop: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      init: null,\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * The right slice line of the base image. The slice properties divide the\r\n     * image into nine regions, which define the corner, edge and the center\r\n     * images.\r\n     */\r\n    sliceRight: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      init: null,\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * The bottom slice line of the base image. The slice properties divide the\r\n     * image into nine regions, which define the corner, edge and the center\r\n     * images.\r\n     */\r\n    sliceBottom: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      init: null,\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * The left slice line of the base image. The slice properties divide the\r\n     * image into nine regions, which define the corner, edge and the center\r\n     * images.\r\n     */\r\n    sliceLeft: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      init: null,\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * The slice properties divide the image into nine regions, which define the\r\n     * corner, edge and the center images.\r\n     */\r\n    slice: {\r\n      group: [\"sliceTop\", \"sliceRight\", \"sliceBottom\", \"sliceLeft\"],\r\n      mode: \"shorthand\"\r\n    },\r\n\r\n    /**\r\n     * This property specifies how the images for the sides and the middle part\r\n     * of the border image are scaled and tiled horizontally.\r\n     *\r\n     * Values have the following meanings:\r\n     * <ul>\r\n     *   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>\r\n     *   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>\r\n     *   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not\r\n     *    fill the area with a whole number of tiles, the image is rescaled so\r\n     *    that it does.</li>\r\n     * </ul>\r\n     */\r\n    repeatX: {\r\n      check: [\"stretch\", \"repeat\", \"round\"],\r\n      init: \"stretch\",\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * This property specifies how the images for the sides and the middle part\r\n     * of the border image are scaled and tiled vertically.\r\n     *\r\n     * Values have the following meanings:\r\n     * <ul>\r\n     *   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>\r\n     *   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>\r\n     *   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not\r\n     *    fill the area with a whole number of tiles, the image is rescaled so\r\n     *    that it does.</li>\r\n     * </ul>\r\n     */\r\n    repeatY: {\r\n      check: [\"stretch\", \"repeat\", \"round\"],\r\n      init: \"stretch\",\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * This property specifies how the images for the sides and the middle part\r\n     * of the border image are scaled and tiled.\r\n     */\r\n    repeat: {\r\n      group: [\"repeatX\", \"repeatY\"],\r\n      mode: \"shorthand\"\r\n    },\r\n\r\n    /**\r\n     * If set to <code>false</code>, the center image will be omitted and only\r\n     * the border will be drawn.\r\n     */\r\n    fill: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyBorderImage\"\r\n    },\r\n\r\n    /**\r\n     * Configures the border image mode. Supported values:\r\n     * <ul>\r\n     *   <li>horizontal: left and right border images</li>\r\n     *   <li>vertical: top and bottom border images</li>\r\n     *   <li>grid: border images for all edges</li>\r\n     * </ul>\r\n     */\r\n    borderImageMode: {\r\n      check: [\"horizontal\", \"vertical\", \"grid\"],\r\n      init: \"grid\"\r\n    }\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Adds the border-image styles to the given map\r\n     * @param styles {Map} CSS style map\r\n     */\r\n    _styleBorderImage(styles) {\r\n      if (!this.getBorderImage()) {\r\n        return;\r\n      }\r\n      var resolvedImage = qx.util.AliasManager.getInstance().resolve(\r\n        this.getBorderImage()\r\n      );\r\n\r\n      var source = qx.util.ResourceManager.getInstance().toUri(resolvedImage);\r\n\r\n      var computedSlices = this._getDefaultInsetsForBorderImage();\r\n\r\n      var slice = [\r\n        computedSlices.top,\r\n        computedSlices.right,\r\n        computedSlices.bottom,\r\n        computedSlices.left\r\n      ];\r\n\r\n      var repeat = [this.getRepeatX(), this.getRepeatY()].join(\" \");\r\n\r\n      var fill =\r\n        this.getFill() &&\r\n        qx.core.Environment.get(\"css.borderimage.standardsyntax\")\r\n          ? \" fill\"\r\n          : \"\";\r\n\r\n      var styleName = qx.bom.Style.getPropertyName(\"borderImage\");\r\n      if (styleName) {\r\n        var cssName = qx.bom.Style.getCssName(styleName);\r\n        styles[cssName] =\r\n          'url(\"' + source + '\") ' + slice.join(\" \") + fill + \" \" + repeat;\r\n      }\r\n      // Apply border styles even if we couldn't determine the borderImage property name\r\n      // (e.g. because the browser doesn't support it). This is needed to keep\r\n      // the layout intact.\r\n      styles[\"border-style\"] = \"solid\";\r\n      styles[\"border-color\"] = \"transparent\";\r\n      styles[\"border-width\"] = slice.join(\"px \") + \"px\";\r\n    },\r\n\r\n    /**\r\n     * Computes the inset values based on the border image slices (defined in the\r\n     * decoration theme or computed from the fallback image sizes).\r\n     *\r\n     * @return {Map} Map with the top, right, bottom and left insets\r\n     */\r\n    _getDefaultInsetsForBorderImage() {\r\n      if (!this.getBorderImage()) {\r\n        return {\r\n          top: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          left: 0\r\n        };\r\n      }\r\n\r\n      var resolvedImage = qx.util.AliasManager.getInstance().resolve(\r\n        this.getBorderImage()\r\n      );\r\n\r\n      var computedSlices = this.__getSlices(resolvedImage);\r\n\r\n      return {\r\n        top: this.getSliceTop() || computedSlices[0],\r\n        right: this.getSliceRight() || computedSlices[1],\r\n        bottom: this.getSliceBottom() || computedSlices[2],\r\n        left: this.getSliceLeft() || computedSlices[3]\r\n      };\r\n    },\r\n\r\n    _applyBorderImage() {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        if (this._isInitialized()) {\r\n          throw new Error(\r\n            \"This decorator is already in-use. Modification is not possible anymore!\"\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Gets the slice sizes from the fallback border images.\r\n     *\r\n     * @param baseImage {String} Resource Id of the base border image\r\n     * @return {Integer[]} Array with the top, right, bottom and left slice widths\r\n     */\r\n    __getSlices(baseImage) {\r\n      var mode = this.getBorderImageMode();\r\n      var topSlice = 0;\r\n      var rightSlice = 0;\r\n      var bottomSlice = 0;\r\n      var leftSlice = 0;\r\n\r\n      var split = /(.*)(\\.[a-z]+)$/.exec(baseImage);\r\n      var prefix = split[1];\r\n      var ext = split[2];\r\n\r\n      var ResourceManager = qx.util.ResourceManager.getInstance();\r\n\r\n      if (mode == \"grid\" || mode == \"vertical\") {\r\n        topSlice = ResourceManager.getImageHeight(prefix + \"-t\" + ext);\r\n        bottomSlice = ResourceManager.getImageHeight(prefix + \"-b\" + ext);\r\n      }\r\n\r\n      if (mode == \"grid\" || mode == \"horizontal\") {\r\n        rightSlice = ResourceManager.getImageWidth(prefix + \"-r\" + ext);\r\n        leftSlice = ResourceManager.getImageWidth(prefix + \"-l\" + ext);\r\n      }\r\n\r\n      return [topSlice, rightSlice, bottomSlice, leftSlice];\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}