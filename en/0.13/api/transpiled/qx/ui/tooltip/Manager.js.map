{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "event",
    "Registration",
    "addListener",
    "document",
    "body",
    "__onPointerOverRoot",
    "__showTimer",
    "Timer",
    "__onShowInterval",
    "__hideTimer",
    "__onHideInterval",
    "__pointerPosition",
    "left",
    "top",
    "properties",
    "current",
    "check",
    "nullable",
    "apply",
    "showInvalidToolTips",
    "init",
    "showToolTips",
    "members",
    "__sharedToolTip",
    "__sharedErrorToolTip",
    "getSharedTooltip",
    "ui",
    "tooltip",
    "ToolTip",
    "set",
    "rich",
    "getSharedErrorTooltip",
    "appearance",
    "setLabel",
    "syncAppearance",
    "_applyCurrent",
    "value",
    "old",
    "Widget",
    "contains",
    "isDisposed",
    "exclude",
    "stop",
    "el",
    "startWith",
    "getShowTimeout",
    "__onPointerOutRoot",
    "__onFocusOutRoot",
    "__onPointerMoveRoot",
    "removeListener",
    "__P_468_2",
    "e",
    "getCurrent",
    "getHideTimeout",
    "getPlaceMethod",
    "placeToWidget",
    "getOpener",
    "placeToPoint",
    "show",
    "__P_468_4",
    "getAutoHide",
    "resetCurrent",
    "__P_468_10",
    "pos",
    "Math",
    "round",
    "getDocumentLeft",
    "getDocumentTop",
    "__P_468_0",
    "target",
    "getWidgetByElement",
    "getTarget",
    "showToolTip",
    "tooltipText",
    "tooltipIcon",
    "invalidMessage",
    "getToolTip",
    "getToolTipText",
    "getToolTipIcon",
    "hasInterface",
    "form",
    "IForm",
    "isValid",
    "getInvalidMessage",
    "getLayoutParent",
    "getEnabled",
    "isShowToolTipWhenDisabled",
    "isBlockToolTip",
    "getShowToolTips",
    "getShowInvalidToolTips",
    "label",
    "icon",
    "setCurrent",
    "setOpener",
    "__P_468_8",
    "related",
    "getRelatedTarget",
    "getPointerType",
    "__P_468_9",
    "destruct",
    "_disposeObjects",
    "Manager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tooltip/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Adrian Olaru (adrianolaru)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The tooltip manager globally manages the tooltips of all widgets. It will\r\n * display tooltips if the user hovers a widgets with a tooltip and hides all\r\n * other tooltips.\r\n */\r\nqx.Class.define(\"qx.ui.tooltip.Manager\", {\r\n  type: \"singleton\",\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    super();\r\n\r\n    // Register events\r\n    qx.event.Registration.addListener(\r\n      document.body,\r\n      \"pointerover\",\r\n      this.__onPointerOverRoot,\r\n      this,\r\n      true\r\n    );\r\n\r\n    // Instantiate timers\r\n    this.__showTimer = new qx.event.Timer();\r\n    this.__showTimer.addListener(\"interval\", this.__onShowInterval, this);\r\n\r\n    this.__hideTimer = new qx.event.Timer();\r\n    this.__hideTimer.addListener(\"interval\", this.__onHideInterval, this);\r\n\r\n    // Init pointer position\r\n    this.__pointerPosition = { left: 0, top: 0 };\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** Holds the current ToolTip instance */\r\n    current: {\r\n      check: \"qx.ui.tooltip.ToolTip\",\r\n      nullable: true,\r\n      apply: \"_applyCurrent\"\r\n    },\r\n\r\n    /** Show all invalid form fields tooltips . */\r\n    showInvalidToolTips: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    },\r\n\r\n    /** Show all tooltips. */\r\n    showToolTips: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __pointerPosition: null,\r\n    __hideTimer: null,\r\n    __showTimer: null,\r\n    __sharedToolTip: null,\r\n    __sharedErrorToolTip: null,\r\n\r\n    /**\r\n     * Get the shared tooltip, which is used to display the\r\n     * {@link qx.ui.core.Widget#toolTipText} and\r\n     * {@link qx.ui.core.Widget#toolTipIcon} properties of widgets.\r\n     * You can use this public shared instance to e.g. customize the\r\n     * look and feel.\r\n     *\r\n     * @return {qx.ui.tooltip.ToolTip} The shared tooltip\r\n     */\r\n    getSharedTooltip() {\r\n      if (!this.__sharedToolTip) {\r\n        this.__sharedToolTip = new qx.ui.tooltip.ToolTip().set({\r\n          rich: true\r\n        });\r\n      }\r\n      return this.__sharedToolTip;\r\n    },\r\n\r\n    /**\r\n     * Get the shared tooltip, which is used to display the\r\n     * {@link qx.ui.core.Widget#toolTipText} and\r\n     * {@link qx.ui.core.Widget#toolTipIcon} properties of widgets.\r\n     * You can use this public shared instance to e.g. customize the\r\n     * look and feel of the validation tooltips like\r\n     * <code>getSharedErrorTooltip().getChildControl(\"atom\").getChildControl(\"label\").set({rich: true, wrap: true, width: 80})</code>\r\n     *\r\n     * @return {qx.ui.tooltip.ToolTip} The shared tooltip\r\n     */\r\n    getSharedErrorTooltip() {\r\n      if (!this.__sharedErrorToolTip) {\r\n        this.__sharedErrorToolTip = new qx.ui.tooltip.ToolTip().set({\r\n          appearance: \"tooltip-error\",\r\n          rich: true\r\n        });\r\n\r\n        this.__sharedErrorToolTip.setLabel(\"\"); // trigger label widget creation\r\n        this.__sharedErrorToolTip.syncAppearance();\r\n      }\r\n\r\n      return this.__sharedErrorToolTip;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PROPERTY APPLY ROUTINES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // property apply\r\n    _applyCurrent(value, old) {\r\n      // Return if the new tooltip is a child of the old one\r\n      if (old && qx.ui.core.Widget.contains(old, value)) {\r\n        return;\r\n      }\r\n\r\n      // If old tooltip existing, hide it and clear widget binding\r\n      if (old) {\r\n        if (!old.isDisposed()) {\r\n          old.exclude();\r\n        }\r\n\r\n        this.__showTimer.stop();\r\n        this.__hideTimer.stop();\r\n      }\r\n\r\n      var Registration = qx.event.Registration;\r\n      var el = document.body;\r\n      // If new tooltip is not null, set it up and start the timer\r\n      if (value) {\r\n        this.__showTimer.startWith(value.getShowTimeout());\r\n\r\n        // Register hide handler\r\n        Registration.addListener(\r\n          el,\r\n          \"pointerout\",\r\n          this.__onPointerOutRoot,\r\n          this,\r\n          true\r\n        );\r\n\r\n        Registration.addListener(\r\n          el,\r\n          \"focusout\",\r\n          this.__onFocusOutRoot,\r\n          this,\r\n          true\r\n        );\r\n\r\n        Registration.addListener(\r\n          el,\r\n          \"pointermove\",\r\n          this.__onPointerMoveRoot,\r\n          this,\r\n          true\r\n        );\r\n      } else {\r\n        // Deregister hide handler\r\n        Registration.removeListener(\r\n          el,\r\n          \"pointerout\",\r\n          this.__onPointerOutRoot,\r\n          this,\r\n          true\r\n        );\r\n\r\n        Registration.removeListener(\r\n          el,\r\n          \"focusout\",\r\n          this.__onFocusOutRoot,\r\n          this,\r\n          true\r\n        );\r\n\r\n        Registration.removeListener(\r\n          el,\r\n          \"pointermove\",\r\n          this.__onPointerMoveRoot,\r\n          this,\r\n          true\r\n        );\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      TIMER EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Event listener for the interval event of the show timer.\r\n     *\r\n     * @param e {qx.event.type.Event} Event object\r\n     */\r\n    __onShowInterval(e) {\r\n      var current = this.getCurrent();\r\n      if (current && !current.isDisposed()) {\r\n        this.__hideTimer.startWith(current.getHideTimeout());\r\n\r\n        if (current.getPlaceMethod() == \"widget\") {\r\n          current.placeToWidget(current.getOpener());\r\n        } else {\r\n          current.placeToPoint(this.__pointerPosition);\r\n        }\r\n\r\n        current.show();\r\n      }\r\n\r\n      this.__showTimer.stop();\r\n    },\r\n\r\n    /**\r\n     * Event listener for the interval event of the hide timer.\r\n     *\r\n     * @param e {qx.event.type.Event} Event object\r\n     */\r\n    __onHideInterval(e) {\r\n      var current = this.getCurrent();\r\n\r\n      if (current && !current.getAutoHide()) {\r\n        return;\r\n      }\r\n\r\n      if (current && !current.isDisposed()) {\r\n        current.exclude();\r\n      }\r\n\r\n      this.__hideTimer.stop();\r\n      this.resetCurrent();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      POINTER EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Global pointer move event handler\r\n     *\r\n     * @param e {qx.event.type.Pointer} The move pointer event\r\n     */\r\n    __onPointerMoveRoot(e) {\r\n      var pos = this.__pointerPosition;\r\n\r\n      pos.left = Math.round(e.getDocumentLeft());\r\n      pos.top = Math.round(e.getDocumentTop());\r\n    },\r\n\r\n    /**\r\n     * Searches for the tooltip of the target widget. If any tooltip instance\r\n     * is found this instance is bound to the target widget and the tooltip is\r\n     * set as {@link #current}\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointerover event\r\n     */\r\n    __onPointerOverRoot(e) {\r\n      var target = qx.ui.core.Widget.getWidgetByElement(e.getTarget());\r\n      // take first coordinates as backup if no move event will be fired (e.g. touch devices)\r\n      this.__onPointerMoveRoot(e);\r\n      this.showToolTip(target);\r\n    },\r\n\r\n    /**\r\n     * Explicitly show tooltip for particular form item.\r\n     *\r\n     * @param target {Object | null} widget to show tooltip for\r\n     */\r\n    showToolTip(target) {\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      var tooltip, tooltipText, tooltipIcon, invalidMessage;\r\n\r\n      // Search first parent which has a tooltip\r\n      while (target != null) {\r\n        tooltip = target.getToolTip();\r\n        tooltipText = target.getToolTipText() || null;\r\n        tooltipIcon = target.getToolTipIcon() || null;\r\n        if (\r\n          qx.Class.hasInterface(target.constructor, qx.ui.form.IForm) &&\r\n          !target.isValid()\r\n        ) {\r\n          invalidMessage = target.getInvalidMessage();\r\n        }\r\n\r\n        if (tooltip || tooltipText || tooltipIcon || invalidMessage) {\r\n          break;\r\n        }\r\n\r\n        target = target.getLayoutParent();\r\n      }\r\n\r\n      //do nothing if\r\n      if (\r\n        !target || //don't have a target\r\n        // tooltip is disabled and the value of showToolTipWhenDisabled is false\r\n        (!target.getEnabled() && !target.isShowToolTipWhenDisabled()) ||\r\n        //tooltip is blocked\r\n        target.isBlockToolTip() ||\r\n        //an invalid message isn't set and tooltips are disabled\r\n        (!invalidMessage && !this.getShowToolTips()) ||\r\n        //an invalid message is set and invalid tooltips are disabled\r\n        (invalidMessage && !this.getShowInvalidToolTips())\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (invalidMessage) {\r\n        tooltip = this.getSharedErrorTooltip().set({\r\n          label: invalidMessage\r\n        });\r\n      }\r\n      if (!tooltip) {\r\n        tooltip = this.getSharedTooltip().set({\r\n          label: tooltipText,\r\n          icon: tooltipIcon\r\n        });\r\n      }\r\n      this.setCurrent(tooltip);\r\n      tooltip.setOpener(target);\r\n    },\r\n\r\n    /**\r\n     * Resets the property {@link #current} if there was a\r\n     * tooltip and no new one is created.\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointerout event\r\n     */\r\n    __onPointerOutRoot(e) {\r\n      var target = qx.ui.core.Widget.getWidgetByElement(e.getTarget());\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      var related = qx.ui.core.Widget.getWidgetByElement(e.getRelatedTarget());\r\n      if (!related && e.getPointerType() == \"mouse\") {\r\n        return;\r\n      }\r\n\r\n      var tooltip = this.getCurrent();\r\n\r\n      // If there was a tooltip and\r\n      // - the destination target is the current tooltip\r\n      //   or\r\n      // - the current tooltip contains the destination target\r\n      if (\r\n        tooltip &&\r\n        (related == tooltip || qx.ui.core.Widget.contains(tooltip, related))\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // If the destination target exists and the target contains it\r\n      if (related && target && qx.ui.core.Widget.contains(target, related)) {\r\n        return;\r\n      }\r\n\r\n      if (tooltip && !tooltip.getAutoHide()) {\r\n        return;\r\n      }\r\n\r\n      // If there was a tooltip and there is no new one\r\n      if (tooltip && !related) {\r\n        this.setCurrent(null);\r\n      } else {\r\n        this.resetCurrent();\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      FOCUS EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Reset the property {@link #current} if the\r\n     * current tooltip is the tooltip of the target widget.\r\n     *\r\n     * @param e {qx.event.type.Focus} blur event\r\n     */\r\n    __onFocusOutRoot(e) {\r\n      var target = qx.ui.core.Widget.getWidgetByElement(e.getTarget());\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      var tooltip = this.getCurrent();\r\n\r\n      if (tooltip && !tooltip.getAutoHide()) {\r\n        return;\r\n      }\r\n\r\n      // Only set to null if blurred widget is the\r\n      // one which has created the current tooltip\r\n      if (tooltip && tooltip == target.getToolTip()) {\r\n        this.setCurrent(null);\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    // Deregister events\r\n    qx.event.Registration.removeListener(\r\n      document.body,\r\n      \"pointerover\",\r\n      this.__onPointerOverRoot,\r\n      this,\r\n      true\r\n    );\r\n\r\n    // Dispose timers\r\n    this._disposeObjects(\"__showTimer\", \"__hideTimer\", \"__sharedToolTip\");\r\n    this.__pointerPosition = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}