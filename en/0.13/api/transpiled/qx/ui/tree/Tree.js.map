{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "scroll",
    "AbstractScrollArea",
    "implement",
    "IMultiSelection",
    "form",
    "IModelSelection",
    "IField",
    "IForm",
    "include",
    "MMultiSelectionHandling",
    "MContentPadding",
    "MModelSelection",
    "MForm",
    "construct",
    "constructor",
    "call",
    "__content",
    "container",
    "Composite",
    "layout",
    "VBox",
    "set",
    "allowShrinkY",
    "allowGrowX",
    "getChildControl",
    "add",
    "initOpenMode",
    "initRootOpenClose",
    "addListener",
    "_onChangeSelection",
    "_onKeyPress",
    "events",
    "addItem",
    "removeItem",
    "properties",
    "openMode",
    "check",
    "init",
    "apply",
    "event",
    "themeable",
    "root",
    "nullable",
    "hideRoot",
    "rootOpenClose",
    "appearance",
    "refine",
    "focusable",
    "members",
    "SELECTION_MANAGER",
    "tree",
    "selection",
    "SelectionManager",
    "getChildrenContainer",
    "_applyRoot",
    "value",
    "old",
    "isDisposed",
    "remove",
    "hasChildren",
    "setVisibility",
    "getHideRoot",
    "recursiveAddToWidgetQueue",
    "_applyHideRoot",
    "getRoot",
    "_applyRootOpenClose",
    "_getContentPaddingTarget",
    "getNextNodeOf",
    "treeItem",
    "invisible",
    "isOpen",
    "getChildren",
    "parent",
    "getParent",
    "parentChildren",
    "index",
    "indexOf",
    "length",
    "getPreviousNodeOf",
    "folder",
    "children",
    "getNextSiblingOf",
    "siblings",
    "getPreviousSiblingOf",
    "getItems",
    "recursive",
    "getTreeItem",
    "widget",
    "AbstractTreeItem",
    "getLayoutParent",
    "_applyOpenMode",
    "removeListener",
    "_onOpen",
    "e",
    "getTarget",
    "isOpenable",
    "setOpen",
    "stopPropagation",
    "getData",
    "i",
    "item",
    "_getLeadItem",
    "getKeyIdentifier",
    "setSelection",
    "toggleOpen",
    "destruct",
    "_disposeObjects",
    "Tree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/Tree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Derrell Lipman (derrell)\r\n     * Christian Hagendorn (chris_schmidt)\r\n     * Daniel Wagner (d_wagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The Tree class implements a tree widget, with collapsible and expandable\r\n * container nodes and terminal leaf nodes. You instantiate a Tree object and\r\n * then assign the tree a root folder using the {@link #root} property.\r\n *\r\n * If you don't want to show the root item, you can hide it with the\r\n * {@link #hideRoot} property.\r\n *\r\n * The handling of <b>selections</b> within a tree is somewhat distributed\r\n * between the root tree object and the attached {@link qx.ui.tree.selection.SelectionManager}.\r\n * To get the currently selected element of a tree use the tree {@link #getSelection}\r\n * method and tree {@link #setSelection} to set it. The TreeSelectionManager\r\n * handles more coarse-grained issues like providing {@link #selectAll} and\r\n * {@link #resetSelection} methods.\r\n */\r\nqx.Class.define(\"qx.ui.tree.Tree\", {\r\n  extend: qx.ui.core.scroll.AbstractScrollArea,\r\n  implement: [\r\n    qx.ui.core.IMultiSelection,\r\n    qx.ui.form.IModelSelection,\r\n    qx.ui.form.IField,\r\n    qx.ui.form.IForm\r\n  ],\r\n\r\n  include: [\r\n    qx.ui.core.MMultiSelectionHandling,\r\n    qx.ui.core.MContentPadding,\r\n    qx.ui.form.MModelSelection,\r\n    qx.ui.form.MForm\r\n  ],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    super();\r\n\r\n    this.__content = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set(\r\n      {\r\n        allowShrinkY: false,\r\n        allowGrowX: true\r\n      }\r\n    );\r\n\r\n    this.getChildControl(\"pane\").add(this.__content);\r\n\r\n    this.initOpenMode();\r\n    this.initRootOpenClose();\r\n\r\n    this.addListener(\"changeSelection\", this._onChangeSelection, this);\r\n    this.addListener(\"keypress\", this._onKeyPress, this);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * This event is fired after a tree item was added to the tree. The\r\n     * {@link qx.event.type.Data#getData} method of the event returns the\r\n     * added item.\r\n     */\r\n    addItem: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * This event is fired after a tree item has been removed from the tree.\r\n     * The {@link qx.event.type.Data#getData} method of the event returns the\r\n     * removed item.\r\n     */\r\n    removeItem: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * Control whether tap or double tap should open or close the tapped\r\n     * folder.\r\n     */\r\n    openMode: {\r\n      check: [\"tap\", \"dbltap\", \"none\"],\r\n      init: \"dbltap\",\r\n      apply: \"_applyOpenMode\",\r\n      event: \"changeOpenMode\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The root tree item of the tree to display\r\n     */\r\n    root: {\r\n      check: \"qx.ui.tree.core.AbstractTreeItem\",\r\n      init: null,\r\n      nullable: true,\r\n      event: \"changeRoot\",\r\n      apply: \"_applyRoot\"\r\n    },\r\n\r\n    /**\r\n     * Hide the root (Tree) node.  This differs from the visibility property in\r\n     * that this property hides *only* the root node, not the node's children.\r\n     */\r\n    hideRoot: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyHideRoot\"\r\n    },\r\n\r\n    /**\r\n     * Whether the Root should have an open/close button.  This may also be\r\n     * used in conjunction with the hideNode property to provide for virtual root\r\n     * nodes.  In the latter case, be very sure that the virtual root nodes are\r\n     * expanded programmatically, since there will be no open/close button for the\r\n     * user to open them.\r\n     */\r\n    rootOpenClose: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyRootOpenClose\"\r\n    },\r\n\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"tree\"\r\n    },\r\n\r\n    // overridden\r\n    focusable: {\r\n      refine: true,\r\n      init: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __content: null,\r\n\r\n    /** @type {Class} Pointer to the selection manager to use */\r\n    SELECTION_MANAGER: qx.ui.tree.selection.SelectionManager,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      WIDGET API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Get the widget, which contains the root tree item. This widget must\r\n     * have a vertical box layout.\r\n     *\r\n     * @return {qx.ui.core.Widget} the children container\r\n     */\r\n    getChildrenContainer() {\r\n      return this.__content;\r\n    },\r\n\r\n    // property apply\r\n    _applyRoot(value, old) {\r\n      var container = this.getChildrenContainer();\r\n\r\n      if (old && !old.isDisposed()) {\r\n        container.remove(old);\r\n        if (old.hasChildren()) {\r\n          container.remove(old.getChildrenContainer());\r\n        }\r\n      }\r\n\r\n      if (value) {\r\n        container.add(value);\r\n        if (value.hasChildren()) {\r\n          container.add(value.getChildrenContainer());\r\n        }\r\n\r\n        value.setVisibility(this.getHideRoot() ? \"excluded\" : \"visible\");\r\n        value.recursiveAddToWidgetQueue();\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyHideRoot(value, old) {\r\n      var root = this.getRoot();\r\n      if (!root) {\r\n        return;\r\n      }\r\n\r\n      root.setVisibility(value ? \"excluded\" : \"visible\");\r\n      root.recursiveAddToWidgetQueue();\r\n    },\r\n\r\n    // property apply\r\n    _applyRootOpenClose(value, old) {\r\n      var root = this.getRoot();\r\n      if (!root) {\r\n        return;\r\n      }\r\n      root.recursiveAddToWidgetQueue();\r\n    },\r\n\r\n    /**\r\n     * Returns the element, to which the content padding should be applied.\r\n     *\r\n     * @return {qx.ui.core.Widget} The content padding target.\r\n     */\r\n    _getContentPaddingTarget() {\r\n      return this.__content;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      SELECTION MANAGER API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Get the tree item following the given item in the tree hierarchy.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the item after\r\n     * @param invisible {Boolean?true} Whether invisible/closed tree items\r\n     *     should be returned as well.\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item after the given item. May be\r\n     *     <code>null</code> if the item is the last item.\r\n     */\r\n    getNextNodeOf(treeItem, invisible) {\r\n      if (\r\n        (invisible !== false || treeItem.isOpen()) &&\r\n        treeItem.hasChildren()\r\n      ) {\r\n        return treeItem.getChildren()[0];\r\n      }\r\n\r\n      while (treeItem) {\r\n        var parent = treeItem.getParent();\r\n        if (!parent) {\r\n          return null;\r\n        }\r\n\r\n        var parentChildren = parent.getChildren();\r\n        var index = parentChildren.indexOf(treeItem);\r\n        if (index > -1 && index < parentChildren.length - 1) {\r\n          return parentChildren[index + 1];\r\n        }\r\n\r\n        treeItem = parent;\r\n      }\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Get the tree item preceding the given item in the tree hierarchy.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the item before\r\n     * @param invisible {Boolean?true} Whether invisible/closed tree items\r\n     *     should be returned as well.\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item before the given item. May be\r\n     *     <code>null</code> if the given item is the tree's root.\r\n     */\r\n    getPreviousNodeOf(treeItem, invisible) {\r\n      var parent = treeItem.getParent();\r\n      if (!parent) {\r\n        return null;\r\n      }\r\n\r\n      if (this.getHideRoot()) {\r\n        if (parent == this.getRoot()) {\r\n          if (parent.getChildren()[0] == treeItem) {\r\n            return null;\r\n          }\r\n        }\r\n      } else {\r\n        if (treeItem == this.getRoot()) {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      var parentChildren = parent.getChildren();\r\n      var index = parentChildren.indexOf(treeItem);\r\n      if (index > 0) {\r\n        var folder = parentChildren[index - 1];\r\n        while (\r\n          (invisible !== false || folder.isOpen()) &&\r\n          folder.hasChildren()\r\n        ) {\r\n          var children = folder.getChildren();\r\n          folder = children[children.length - 1];\r\n        }\r\n        return folder;\r\n      } else {\r\n        return parent;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the tree item's next sibling.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the following\r\n     * sibling of.\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item following the given item. May be\r\n     *     <code>null</code> if the given item is the last in it's nesting\r\n     *     level.\r\n     */\r\n    getNextSiblingOf(treeItem) {\r\n      if (treeItem == this.getRoot()) {\r\n        return null;\r\n      }\r\n\r\n      var parent = treeItem.getParent();\r\n      var siblings = parent.getChildren();\r\n      var index = siblings.indexOf(treeItem);\r\n\r\n      if (index < siblings.length - 1) {\r\n        return siblings[index + 1];\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Get the tree item's previous sibling.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the previous\r\n     * sibling of.\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item preceding the given item. May be\r\n     *     <code>null</code> if the given item is the first in it's nesting\r\n     *     level.\r\n     */\r\n    getPreviousSiblingOf(treeItem) {\r\n      if (treeItem == this.getRoot()) {\r\n        return null;\r\n      }\r\n\r\n      var parent = treeItem.getParent();\r\n      var siblings = parent.getChildren();\r\n      var index = siblings.indexOf(treeItem);\r\n\r\n      if (index > 0) {\r\n        return siblings[index - 1];\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns all children of the tree.\r\n     *\r\n     * @param recursive {Boolean ? false} whether children of subfolder should be\r\n     *     included\r\n     * @param invisible {Boolean ? true} whether invisible children should be\r\n     *     included\r\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} list of children\r\n     */\r\n    getItems(recursive, invisible) {\r\n      if (this.getRoot() != null) {\r\n        return this.getRoot().getItems(\r\n          recursive,\r\n          invisible,\r\n          this.getHideRoot()\r\n        );\r\n      } else {\r\n        return [];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the tree's only \"external\" child, namely the root node.\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} Array containing the root node\r\n     */\r\n    getChildren() {\r\n      if (this.getRoot() != null) {\r\n        return [this.getRoot()];\r\n      } else {\r\n        return [];\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      POINTER EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns the tree item, which contains the given widget.\r\n     *\r\n     * @param widget {qx.ui.core.Widget} The widget to get the containing tree\r\n     *   item for.\r\n     * @return {qx.ui.tree.core.AbstractTreeItem|null} The tree item containing the widget. If the\r\n     *     widget is not inside of any tree item <code>null</code> is returned.\r\n     */\r\n    getTreeItem(widget) {\r\n      while (widget) {\r\n        if (widget == this) {\r\n          return null;\r\n        }\r\n\r\n        if (widget instanceof qx.ui.tree.core.AbstractTreeItem) {\r\n          return widget;\r\n        }\r\n\r\n        widget = widget.getLayoutParent();\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    // property apply\r\n    _applyOpenMode(value, old) {\r\n      if (old == \"tap\") {\r\n        this.removeListener(\"tap\", this._onOpen, this);\r\n      } else if (old == \"dbltap\") {\r\n        this.removeListener(\"dbltap\", this._onOpen, this);\r\n      }\r\n\r\n      if (value == \"tap\") {\r\n        this.addListener(\"tap\", this._onOpen, this);\r\n      } else if (value == \"dbltap\") {\r\n        this.addListener(\"dbltap\", this._onOpen, this);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler for tap events, which could change a tree item's open\r\n     * state.\r\n     *\r\n     * @param e {qx.event.type.Pointer} The tap event object\r\n     */\r\n    _onOpen(e) {\r\n      var treeItem = this.getTreeItem(e.getTarget());\r\n      if (!treeItem || !treeItem.isOpenable()) {\r\n        return;\r\n      }\r\n\r\n      treeItem.setOpen(!treeItem.isOpen());\r\n      e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Event handler for changeSelection events, which opens all parent folders\r\n     * of the selected folders.\r\n     *\r\n     * @param e {qx.event.type.Data} The selection data event.\r\n     */\r\n    _onChangeSelection(e) {\r\n      var selection = e.getData();\r\n      // for every selected folder\r\n      for (var i = 0; i < selection.length; i++) {\r\n        var folder = selection[i];\r\n        // go up all parents and open them\r\n        while (folder.getParent() != null) {\r\n          folder = folder.getParent();\r\n          folder.setOpen(true);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler for key press events. Open and close the current selected\r\n     * item on key left and right press. Jump to parent on key left if already\r\n     * closed.\r\n     *\r\n     * @param e {qx.event.type.KeySequence} key event.\r\n     */\r\n    _onKeyPress(e) {\r\n      var item = this._getLeadItem();\r\n\r\n      if (item !== null) {\r\n        switch (e.getKeyIdentifier()) {\r\n          case \"Left\":\r\n            if (item.isOpenable() && item.isOpen()) {\r\n              item.setOpen(false);\r\n            } else if (item.getParent()) {\r\n              this.setSelection([item.getParent()]);\r\n            }\r\n            break;\r\n\r\n          case \"Right\":\r\n            if (item.isOpenable() && !item.isOpen()) {\r\n              item.setOpen(true);\r\n            }\r\n            break;\r\n\r\n          case \"Enter\":\r\n          case \"Space\":\r\n            if (item.isOpenable()) {\r\n              item.toggleOpen();\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this._disposeObjects(\"__content\");\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}