{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "tree",
    "core",
    "AbstractItem",
    "type",
    "construct",
    "label",
    "constructor",
    "call",
    "__children",
    "properties",
    "parent",
    "check",
    "nullable",
    "members",
    "__childrenContainer",
    "getTree",
    "treeItem",
    "getParent",
    "getLayoutParent",
    "scroll",
    "ScrollPane",
    "_applyOpen",
    "value",
    "old",
    "hasChildren",
    "getChildrenContainer",
    "setVisibility",
    "AbstractTreeItem",
    "superclass",
    "prototype",
    "_shouldShowOpenSymbol",
    "open",
    "getChildControl",
    "getRootOpenClose",
    "getHideRoot",
    "getRoot",
    "isOpenable",
    "_updateIndent",
    "getLevel",
    "level",
    "addState",
    "state",
    "children",
    "_getChildren",
    "i",
    "l",
    "length",
    "child",
    "removeState",
    "container",
    "Composite",
    "layout",
    "VBox",
    "set",
    "visibility",
    "isOpen",
    "hasChildrenContainer",
    "getParentChildrenContainer",
    "getChildren",
    "getItems",
    "recursive",
    "invisible",
    "ignoreFirst",
    "items",
    "addChildren",
    "concat",
    "chl",
    "recursiveAddToWidgetQueue",
    "queue",
    "Widget",
    "add",
    "__addChildrenToParent",
    "__P_464_2",
    "_addAfter",
    "varargs",
    "arguments",
    "oldParent",
    "remove",
    "setParent",
    "push",
    "fireNonBubblingEvent",
    "event",
    "Data",
    "addAt",
    "index",
    "nextItem",
    "addBefore",
    "addAfter",
    "lang",
    "Array",
    "insertAt",
    "before",
    "indexOf",
    "after",
    "addAtBegin",
    "warn",
    "treeItemChildContainer",
    "removeAt",
    "item",
    "removeAll",
    "destruct",
    "_disposeArray",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/AbstractTreeItem.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The AbstractTreeItem serves as a common superclass for the {@link\r\n * qx.ui.tree.TreeFile} and {@link qx.ui.tree.TreeFolder} classes.\r\n *\r\n * @childControl label {qx.ui.basic.Label} label of the tree item\r\n * @childControl icon {qx.ui.basic.Image} icon of the tree item\r\n * @childControl open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree\r\n */\r\nqx.Class.define(\"qx.ui.tree.core.AbstractTreeItem\", {\r\n  extend: qx.ui.tree.core.AbstractItem,\r\n  type: \"abstract\",\r\n\r\n  construct(label) {\r\n    super(label);\r\n\r\n    this.__children = [];\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * The parent tree folder.\r\n     */\r\n    parent: {\r\n      check: \"qx.ui.tree.core.AbstractTreeItem\",\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __children: null,\r\n    __childrenContainer: null,\r\n\r\n    /**\r\n     * Returns the tree the tree item is connected to. If the item is not part of\r\n     * a tree <code>null</code> will be returned.\r\n     *\r\n     * @return {qx.ui.tree.Tree|null} The item's tree or <code>null</code>.\r\n     */\r\n    getTree() {\r\n      var treeItem = this;\r\n      while (treeItem.getParent()) {\r\n        treeItem = treeItem.getParent();\r\n      }\r\n\r\n      var tree = treeItem.getLayoutParent()\r\n        ? treeItem.getLayoutParent().getLayoutParent()\r\n        : 0;\r\n      if (tree && tree instanceof qx.ui.core.scroll.ScrollPane) {\r\n        return tree.getLayoutParent();\r\n      }\r\n      return null;\r\n    },\r\n\r\n    // property apply\r\n    _applyOpen(value, old) {\r\n      if (this.hasChildren()) {\r\n        this.getChildrenContainer().setVisibility(\r\n          value ? \"visible\" : \"excluded\"\r\n        );\r\n      }\r\n\r\n      super._applyOpen(value, old);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      INDENT HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // overridden\r\n    _shouldShowOpenSymbol() {\r\n      var open = this.getChildControl(\"open\", true);\r\n      if (!open) {\r\n        return false;\r\n      }\r\n\r\n      var tree = this.getTree();\r\n      if (!tree.getRootOpenClose()) {\r\n        if (tree.getHideRoot()) {\r\n          if (tree.getRoot() == this.getParent()) {\r\n            return false;\r\n          }\r\n        } else {\r\n          if (tree.getRoot() == this) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return this.isOpenable();\r\n    },\r\n\r\n    // overridden\r\n    _updateIndent() {\r\n      if (!this.getTree()) {\r\n        return;\r\n      }\r\n\r\n      super._updateIndent();\r\n    },\r\n\r\n    // overridden\r\n    getLevel() {\r\n      var tree = this.getTree();\r\n      if (!tree) {\r\n        return;\r\n      }\r\n\r\n      var treeItem = this;\r\n      var level = -1;\r\n\r\n      while (treeItem) {\r\n        treeItem = treeItem.getParent();\r\n        level += 1;\r\n      }\r\n\r\n      // don't count the hidden root node in the tree widget\r\n      if (tree.getHideRoot()) {\r\n        level -= 1;\r\n      }\r\n\r\n      if (!tree.getRootOpenClose()) {\r\n        level -= 1;\r\n      }\r\n\r\n      return level;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      STATE HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // overridden\r\n    addState(state) {\r\n      super.addState(state);\r\n\r\n      var children = this._getChildren();\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        var child = children[i];\r\n        if (child.addState) {\r\n          children[i].addState(state);\r\n        }\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    removeState(state) {\r\n      super.removeState(state);\r\n\r\n      var children = this._getChildren();\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        var child = children[i];\r\n        if (child.removeState) {\r\n          children[i].removeState(state);\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      CHILDREN CONTAINER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns the widget, which acts as container for the child items.\r\n     * This widget must have a vertical box layout.\r\n     *\r\n     * @return {qx.ui.core.Widget} The children container\r\n     */\r\n    getChildrenContainer() {\r\n      if (!this.__childrenContainer) {\r\n        this.__childrenContainer = new qx.ui.container.Composite(\r\n          new qx.ui.layout.VBox()\r\n        ).set({\r\n          visibility: this.isOpen() ? \"visible\" : \"excluded\"\r\n        });\r\n      }\r\n\r\n      return this.__childrenContainer;\r\n    },\r\n\r\n    /**\r\n     * Whether the tree item has a children container\r\n     *\r\n     * @return {Boolean} Whether it has a children container\r\n     */\r\n    hasChildrenContainer() {\r\n      return this.__childrenContainer;\r\n    },\r\n\r\n    /**\r\n     * Get the children container of the item's parent. This function will return\r\n     * <code>null</code>, if the item does not have a parent or is not the root\r\n     * item.\r\n     *\r\n     * @return {qx.ui.core.Widget} The parent's children container.\r\n     */\r\n    getParentChildrenContainer() {\r\n      if (this.getParent()) {\r\n        return this.getParent().getChildrenContainer();\r\n      } else if (this.getLayoutParent()) {\r\n        return this.getLayoutParent();\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      CHILDREN HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Get all child items.\r\n     *\r\n     * Note: Don not modify the returned array, since this function does not\r\n     * return a copy!\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} An array of all child items.\r\n     */\r\n    getChildren() {\r\n      return this.__children;\r\n    },\r\n\r\n    // overridden\r\n    hasChildren() {\r\n      return this.__children ? this.__children.length > 0 : false;\r\n    },\r\n\r\n    /**\r\n     * Returns all children of the folder.\r\n     *\r\n     * @param recursive {Boolean ? true} whether children of subfolder should be\r\n     *     included\r\n     * @param invisible {Boolean ? true} whether invisible children should be\r\n     *     included\r\n     * @param ignoreFirst {Boolean ? true} Whether the current treeItem should\r\n     *     be excluded from the list.\r\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} list of children\r\n     */\r\n    getItems(recursive, invisible, ignoreFirst) {\r\n      if (ignoreFirst !== false) {\r\n        var items = [];\r\n      } else {\r\n        var items = [this];\r\n      }\r\n\r\n      var addChildren =\r\n        this.hasChildren() && (invisible !== false || this.isOpen());\r\n\r\n      if (addChildren) {\r\n        var children = this.getChildren();\r\n        if (recursive === false) {\r\n          items = items.concat(children);\r\n        } else {\r\n          for (var i = 0, chl = children.length; i < chl; i++) {\r\n            items = items.concat(\r\n              children[i].getItems(recursive, invisible, false)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      return items;\r\n    },\r\n\r\n    /**\r\n     * Adds this item and recursively all sub items to the widget queue to\r\n     * update the indentation.\r\n     *\r\n     * @internal\r\n     */\r\n    recursiveAddToWidgetQueue() {\r\n      var children = this.getItems(true, true, false);\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        qx.ui.core.queue.Widget.add(children[i]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Adds the item's children container to the parent's children container.\r\n     */\r\n    __addChildrenToParent() {\r\n      if (this.getParentChildrenContainer()) {\r\n        this.getParentChildrenContainer()._addAfter(\r\n          this.getChildrenContainer(),\r\n          this\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Adds the passed tree items to the end of this item's children list.\r\n     *\r\n     * @param varargs {qx.ui.tree.core.AbstractTreeItem} variable number of tree items to add\r\n     */\r\n    add(varargs) {\r\n      var container = this.getChildrenContainer();\r\n      var tree = this.getTree();\r\n\r\n      for (var i = 0, l = arguments.length; i < l; i++) {\r\n        var treeItem = arguments[i];\r\n\r\n        var oldParent = treeItem.getParent();\r\n        if (oldParent) {\r\n          oldParent.remove(treeItem);\r\n        }\r\n\r\n        treeItem.setParent(this);\r\n        var hasChildren = this.hasChildren();\r\n\r\n        container.add(treeItem);\r\n\r\n        if (treeItem.hasChildren()) {\r\n          container.add(treeItem.getChildrenContainer());\r\n        }\r\n        this.__children.push(treeItem);\r\n\r\n        if (!hasChildren) {\r\n          this.__addChildrenToParent();\r\n        }\r\n\r\n        if (tree) {\r\n          treeItem.recursiveAddToWidgetQueue();\r\n          tree.fireNonBubblingEvent(\"addItem\", qx.event.type.Data, [treeItem]);\r\n        }\r\n      }\r\n      if (tree) {\r\n        qx.ui.core.queue.Widget.add(this);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Adds the tree item to the current item, at the given index.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} new tree item to insert\r\n     * @param index {Integer} position to insert into\r\n     */\r\n    addAt(treeItem, index) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assert(\r\n          index <= this.__children.length && index >= 0,\r\n          \"Invalid child index: \" + index\r\n        );\r\n      }\r\n\r\n      if (index == this.__children.length) {\r\n        this.add(treeItem);\r\n        return;\r\n      }\r\n\r\n      var oldParent = treeItem.getParent();\r\n      if (oldParent) {\r\n        oldParent.remove(treeItem);\r\n      }\r\n\r\n      var container = this.getChildrenContainer();\r\n\r\n      treeItem.setParent(this);\r\n      var hasChildren = this.hasChildren();\r\n\r\n      var nextItem = this.__children[index];\r\n      container.addBefore(treeItem, nextItem);\r\n\r\n      if (treeItem.hasChildren()) {\r\n        container.addAfter(treeItem.getChildrenContainer(), treeItem);\r\n      }\r\n      qx.lang.Array.insertAt(this.__children, treeItem, index);\r\n\r\n      if (!hasChildren) {\r\n        this.__addChildrenToParent();\r\n      }\r\n\r\n      if (this.getTree()) {\r\n        treeItem.recursiveAddToWidgetQueue();\r\n        qx.ui.core.queue.Widget.add(this);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Add a tree item to this item before the existing child <code>before</code>.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\r\n     * @param before {qx.ui.tree.core.AbstractTreeItem} existing child to add the item before\r\n     */\r\n    addBefore(treeItem, before) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assert(this.__children.indexOf(before) >= 0);\r\n      }\r\n\r\n      // It's important to remove the item before the addAt is called\r\n      // otherwise the index calculation could be wrong\r\n      var oldParent = treeItem.getParent();\r\n      if (oldParent) {\r\n        oldParent.remove(treeItem);\r\n      }\r\n\r\n      this.addAt(treeItem, this.__children.indexOf(before));\r\n    },\r\n\r\n    /**\r\n     * Add a tree item to this item after the existing child <code>before</code>.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\r\n     * @param after {qx.ui.tree.core.AbstractTreeItem} existing child to add the item after\r\n     */\r\n    addAfter(treeItem, after) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assert(this.__children.indexOf(after) >= 0);\r\n      }\r\n\r\n      // It's important to remove the item before the addAt is called\r\n      // otherwise the index calculation could be wrong\r\n      var oldParent = treeItem.getParent();\r\n      if (oldParent) {\r\n        oldParent.remove(treeItem);\r\n      }\r\n\r\n      this.addAt(treeItem, this.__children.indexOf(after) + 1);\r\n    },\r\n\r\n    /**\r\n     * Add a tree item as the first child of this item.\r\n     *\r\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\r\n     */\r\n    addAtBegin(treeItem) {\r\n      this.addAt(treeItem, 0);\r\n    },\r\n\r\n    /**\r\n     * Removes the passed tree items from this item.\r\n     *\r\n     * @param varargs {qx.ui.tree.core.AbstractTreeItem} variable number of tree items to remove\r\n     */\r\n    remove(varargs) {\r\n      for (var i = 0, l = arguments.length; i < l; i++) {\r\n        var treeItem = arguments[i];\r\n        if (this.__children.indexOf(treeItem) == -1) {\r\n          this.warn(\r\n            \"Cannot remove treeitem '\" +\r\n              treeItem +\r\n              \"'. It is not a child of this tree item.\"\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        var container = this.getChildrenContainer();\r\n\r\n        if (treeItem.hasChildrenContainer()) {\r\n          var treeItemChildContainer = treeItem.getChildrenContainer();\r\n          if (container.getChildren().indexOf(treeItemChildContainer) >= 0) {\r\n            // Sometimes not, see bug #3038\r\n            container.remove(treeItemChildContainer);\r\n          }\r\n        }\r\n        qx.lang.Array.remove(this.__children, treeItem);\r\n\r\n        treeItem.setParent(null);\r\n        container.remove(treeItem);\r\n      }\r\n\r\n      var tree = this.getTree();\r\n      if (tree) {\r\n        tree.fireNonBubblingEvent(\"removeItem\", qx.event.type.Data, [treeItem]);\r\n      }\r\n\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /**\r\n     * Remove the child with the given child index.\r\n     *\r\n     * @param index {Integer} Index of the child to remove\r\n     */\r\n    removeAt(index) {\r\n      var item = this.__children[index];\r\n      if (item) {\r\n        this.remove(item);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Remove all child items from this item.\r\n     */\r\n    removeAll() {\r\n      // create a copy for returning\r\n      var children = this.__children.concat();\r\n      for (var i = this.__children.length - 1; i >= 0; i--) {\r\n        this.remove(this.__children[i]);\r\n      }\r\n      return children;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._disposeArray(\"__children\");\r\n    this._disposeObjects(\"__childrenContainer\");\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}