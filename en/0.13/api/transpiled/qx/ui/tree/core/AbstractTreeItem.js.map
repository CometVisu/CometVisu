{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "tree",
    "core",
    "AbstractItem",
    "type",
    "construct",
    "label",
    "__children",
    "properties",
    "parent",
    "check",
    "nullable",
    "members",
    "__childrenContainer",
    "getTree",
    "treeItem",
    "getParent",
    "getLayoutParent",
    "scroll",
    "ScrollPane",
    "_applyOpen",
    "value",
    "old",
    "hasChildren",
    "getChildrenContainer",
    "setVisibility",
    "_shouldShowOpenSymbol",
    "open",
    "getChildControl",
    "getRootOpenClose",
    "getHideRoot",
    "getRoot",
    "isOpenable",
    "_updateIndent",
    "getLevel",
    "level",
    "addState",
    "state",
    "children",
    "_getChildren",
    "i",
    "l",
    "length",
    "child",
    "removeState",
    "container",
    "Composite",
    "layout",
    "VBox",
    "set",
    "visibility",
    "isOpen",
    "hasChildrenContainer",
    "getParentChildrenContainer",
    "getChildren",
    "getItems",
    "recursive",
    "invisible",
    "ignoreFirst",
    "items",
    "addChildren",
    "concat",
    "chl",
    "recursiveAddToWidgetQueue",
    "queue",
    "Widget",
    "add",
    "__addChildrenToParent",
    "_addAfter",
    "varargs",
    "arguments",
    "oldParent",
    "remove",
    "setParent",
    "push",
    "fireNonBubblingEvent",
    "event",
    "Data",
    "addAt",
    "index",
    "nextItem",
    "addBefore",
    "addAfter",
    "lang",
    "Array",
    "insertAt",
    "before",
    "indexOf",
    "after",
    "addAtBegin",
    "warn",
    "treeItemChildContainer",
    "removeAt",
    "item",
    "removeAll",
    "destruct",
    "_disposeArray",
    "_disposeObjects",
    "AbstractTreeItem"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/AbstractTreeItem.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * The AbstractTreeItem serves as a common superclass for the {@link\n * qx.ui.tree.TreeFile} and {@link qx.ui.tree.TreeFolder} classes.\n *\n * @childControl label {qx.ui.basic.Label} label of the tree item\n * @childControl icon {qx.ui.basic.Image} icon of the tree item\n * @childControl open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree\n */\nqx.Class.define(\"qx.ui.tree.core.AbstractTreeItem\", {\n  extend: qx.ui.tree.core.AbstractItem,\n  type: \"abstract\",\n\n  construct(label) {\n    super(label);\n\n    this.__children = [];\n  },\n\n  properties: {\n    /**\n     * The parent tree folder.\n     */\n    parent: {\n      check: \"qx.ui.tree.core.AbstractTreeItem\",\n      nullable: true\n    }\n  },\n\n  members: {\n    __children: null,\n    __childrenContainer: null,\n\n    /**\n     * Returns the tree the tree item is connected to. If the item is not part of\n     * a tree <code>null</code> will be returned.\n     *\n     * @return {qx.ui.tree.Tree|null} The item's tree or <code>null</code>.\n     */\n    getTree() {\n      var treeItem = this;\n      while (treeItem.getParent()) {\n        treeItem = treeItem.getParent();\n      }\n\n      var tree = treeItem.getLayoutParent()\n        ? treeItem.getLayoutParent().getLayoutParent()\n        : 0;\n      if (tree && tree instanceof qx.ui.core.scroll.ScrollPane) {\n        return tree.getLayoutParent();\n      }\n      return null;\n    },\n\n    // property apply\n    _applyOpen(value, old) {\n      if (this.hasChildren()) {\n        this.getChildrenContainer().setVisibility(\n          value ? \"visible\" : \"excluded\"\n        );\n      }\n\n      super._applyOpen(value, old);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INDENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _shouldShowOpenSymbol() {\n      var open = this.getChildControl(\"open\", true);\n      if (!open) {\n        return false;\n      }\n\n      var tree = this.getTree();\n      if (!tree.getRootOpenClose()) {\n        if (tree.getHideRoot()) {\n          if (tree.getRoot() == this.getParent()) {\n            return false;\n          }\n        } else {\n          if (tree.getRoot() == this) {\n            return false;\n          }\n        }\n      }\n\n      return this.isOpenable();\n    },\n\n    // overridden\n    _updateIndent() {\n      if (!this.getTree()) {\n        return;\n      }\n\n      super._updateIndent();\n    },\n\n    // overridden\n    getLevel() {\n      var tree = this.getTree();\n      if (!tree) {\n        return;\n      }\n\n      var treeItem = this;\n      var level = -1;\n\n      while (treeItem) {\n        treeItem = treeItem.getParent();\n        level += 1;\n      }\n\n      // don't count the hidden root node in the tree widget\n      if (tree.getHideRoot()) {\n        level -= 1;\n      }\n\n      if (!tree.getRootOpenClose()) {\n        level -= 1;\n      }\n\n      return level;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STATE HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    addState(state) {\n      super.addState(state);\n\n      var children = this._getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        if (child.addState) {\n          children[i].addState(state);\n        }\n      }\n    },\n\n    // overridden\n    removeState(state) {\n      super.removeState(state);\n\n      var children = this._getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        if (child.removeState) {\n          children[i].removeState(state);\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN CONTAINER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the widget, which acts as container for the child items.\n     * This widget must have a vertical box layout.\n     *\n     * @return {qx.ui.core.Widget} The children container\n     */\n    getChildrenContainer() {\n      if (!this.__childrenContainer) {\n        this.__childrenContainer = new qx.ui.container.Composite(\n          new qx.ui.layout.VBox()\n        ).set({\n          visibility: this.isOpen() ? \"visible\" : \"excluded\"\n        });\n      }\n\n      return this.__childrenContainer;\n    },\n\n    /**\n     * Whether the tree item has a children container\n     *\n     * @return {Boolean} Whether it has a children container\n     */\n    hasChildrenContainer() {\n      return this.__childrenContainer;\n    },\n\n    /**\n     * Get the children container of the item's parent. This function will return\n     * <code>null</code>, if the item does not have a parent or is not the root\n     * item.\n     *\n     * @return {qx.ui.core.Widget} The parent's children container.\n     */\n    getParentChildrenContainer() {\n      if (this.getParent()) {\n        return this.getParent().getChildrenContainer();\n      } else if (this.getLayoutParent()) {\n        return this.getLayoutParent();\n      } else {\n        return null;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get all child items.\n     *\n     * Note: Don not modify the returned array, since this function does not\n     * return a copy!\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} An array of all child items.\n     */\n    getChildren() {\n      return this.__children;\n    },\n\n    // overridden\n    hasChildren() {\n      return this.__children ? this.__children.length > 0 : false;\n    },\n\n    /**\n     * Returns all children of the folder.\n     *\n     * @param recursive {Boolean ? true} whether children of subfolder should be\n     *     included\n     * @param invisible {Boolean ? true} whether invisible children should be\n     *     included\n     * @param ignoreFirst {Boolean ? true} Whether the current treeItem should\n     *     be excluded from the list.\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} list of children\n     */\n    getItems(recursive, invisible, ignoreFirst) {\n      if (ignoreFirst !== false) {\n        var items = [];\n      } else {\n        var items = [this];\n      }\n\n      var addChildren =\n        this.hasChildren() && (invisible !== false || this.isOpen());\n\n      if (addChildren) {\n        var children = this.getChildren();\n        if (recursive === false) {\n          items = items.concat(children);\n        } else {\n          for (var i = 0, chl = children.length; i < chl; i++) {\n            items = items.concat(\n              children[i].getItems(recursive, invisible, false)\n            );\n          }\n        }\n      }\n      return items;\n    },\n\n    /**\n     * Adds this item and recursively all sub items to the widget queue to\n     * update the indentation.\n     *\n     * @internal\n     */\n    recursiveAddToWidgetQueue() {\n      var children = this.getItems(true, true, false);\n      for (var i = 0, l = children.length; i < l; i++) {\n        qx.ui.core.queue.Widget.add(children[i]);\n      }\n    },\n\n    /**\n     * Adds the item's children container to the parent's children container.\n     */\n    __addChildrenToParent() {\n      if (this.getParentChildrenContainer()) {\n        this.getParentChildrenContainer()._addAfter(\n          this.getChildrenContainer(),\n          this\n        );\n      }\n    },\n\n    /**\n     * Adds the passed tree items to the end of this item's children list.\n     *\n     * @param varargs {qx.ui.tree.core.AbstractTreeItem} variable number of tree items to add\n     */\n    add(varargs) {\n      var container = this.getChildrenContainer();\n      var tree = this.getTree();\n\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        var treeItem = arguments[i];\n\n        var oldParent = treeItem.getParent();\n        if (oldParent) {\n          oldParent.remove(treeItem);\n        }\n\n        treeItem.setParent(this);\n        var hasChildren = this.hasChildren();\n\n        container.add(treeItem);\n\n        if (treeItem.hasChildren()) {\n          container.add(treeItem.getChildrenContainer());\n        }\n        this.__children.push(treeItem);\n\n        if (!hasChildren) {\n          this.__addChildrenToParent();\n        }\n\n        if (tree) {\n          treeItem.recursiveAddToWidgetQueue();\n          tree.fireNonBubblingEvent(\"addItem\", qx.event.type.Data, [treeItem]);\n        }\n      }\n      if (tree) {\n        qx.ui.core.queue.Widget.add(this);\n      }\n    },\n\n    /**\n     * Adds the tree item to the current item, at the given index.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} new tree item to insert\n     * @param index {Integer} position to insert into\n     */\n    addAt(treeItem, index) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assert(\n          index <= this.__children.length && index >= 0,\n          \"Invalid child index: \" + index\n        );\n      }\n\n      if (index == this.__children.length) {\n        this.add(treeItem);\n        return;\n      }\n\n      var oldParent = treeItem.getParent();\n      if (oldParent) {\n        oldParent.remove(treeItem);\n      }\n\n      var container = this.getChildrenContainer();\n\n      treeItem.setParent(this);\n      var hasChildren = this.hasChildren();\n\n      var nextItem = this.__children[index];\n      container.addBefore(treeItem, nextItem);\n\n      if (treeItem.hasChildren()) {\n        container.addAfter(treeItem.getChildrenContainer(), treeItem);\n      }\n      qx.lang.Array.insertAt(this.__children, treeItem, index);\n\n      if (!hasChildren) {\n        this.__addChildrenToParent();\n      }\n\n      if (this.getTree()) {\n        treeItem.recursiveAddToWidgetQueue();\n        qx.ui.core.queue.Widget.add(this);\n      }\n    },\n\n    /**\n     * Add a tree item to this item before the existing child <code>before</code>.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\n     * @param before {qx.ui.tree.core.AbstractTreeItem} existing child to add the item before\n     */\n    addBefore(treeItem, before) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assert(this.__children.indexOf(before) >= 0);\n      }\n\n      // It's important to remove the item before the addAt is called\n      // otherwise the index calculation could be wrong\n      var oldParent = treeItem.getParent();\n      if (oldParent) {\n        oldParent.remove(treeItem);\n      }\n\n      this.addAt(treeItem, this.__children.indexOf(before));\n    },\n\n    /**\n     * Add a tree item to this item after the existing child <code>before</code>.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\n     * @param after {qx.ui.tree.core.AbstractTreeItem} existing child to add the item after\n     */\n    addAfter(treeItem, after) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assert(this.__children.indexOf(after) >= 0);\n      }\n\n      // It's important to remove the item before the addAt is called\n      // otherwise the index calculation could be wrong\n      var oldParent = treeItem.getParent();\n      if (oldParent) {\n        oldParent.remove(treeItem);\n      }\n\n      this.addAt(treeItem, this.__children.indexOf(after) + 1);\n    },\n\n    /**\n     * Add a tree item as the first child of this item.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\n     */\n    addAtBegin(treeItem) {\n      this.addAt(treeItem, 0);\n    },\n\n    /**\n     * Removes the passed tree items from this item.\n     *\n     * @param varargs {qx.ui.tree.core.AbstractTreeItem} variable number of tree items to remove\n     */\n    remove(varargs) {\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        var treeItem = arguments[i];\n        if (this.__children.indexOf(treeItem) == -1) {\n          this.warn(\n            \"Cannot remove treeitem '\" +\n              treeItem +\n              \"'. It is not a child of this tree item.\"\n          );\n\n          return;\n        }\n\n        var container = this.getChildrenContainer();\n\n        if (treeItem.hasChildrenContainer()) {\n          var treeItemChildContainer = treeItem.getChildrenContainer();\n          if (container.getChildren().indexOf(treeItemChildContainer) >= 0) {\n            // Sometimes not, see bug #3038\n            container.remove(treeItemChildContainer);\n          }\n        }\n        qx.lang.Array.remove(this.__children, treeItem);\n\n        treeItem.setParent(null);\n        container.remove(treeItem);\n      }\n\n      var tree = this.getTree();\n      if (tree) {\n        tree.fireNonBubblingEvent(\"removeItem\", qx.event.type.Data, [treeItem]);\n      }\n\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * Remove the child with the given child index.\n     *\n     * @param index {Integer} Index of the child to remove\n     */\n    removeAt(index) {\n      var item = this.__children[index];\n      if (item) {\n        this.remove(item);\n      }\n    },\n\n    /**\n     * Remove all child items from this item.\n     */\n    removeAll() {\n      // create a copy for returning\n      var children = this.__children.concat();\n      for (var i = this.__children.length - 1; i >= 0; i--) {\n        this.remove(this.__children[i]);\n      }\n      return children;\n    }\n  },\n\n  destruct() {\n    this._disposeArray(\"__children\");\n    this._disposeObjects(\"__childrenContainer\");\n  }\n});\n"
  ],
  "mappings": "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"
}