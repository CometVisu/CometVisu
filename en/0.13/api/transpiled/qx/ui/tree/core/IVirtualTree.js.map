{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "isShowTopLevelOpenCloseIcons",
    "getLookupTable",
    "isNode",
    "item",
    "assertArgumentsCount",
    "arguments",
    "assertInterface",
    "core",
    "Object",
    "isNodeOpen",
    "node",
    "getLevel",
    "row",
    "assertInteger",
    "hasChildren",
    "openNode",
    "openNodeWithoutScrolling",
    "closeNode",
    "closeNodeWithoutScrolling",
    "getSelection",
    "ui",
    "tree",
    "IVirtualTree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/IVirtualTree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Interface describes the methods which the {@link qx.ui.tree.provider.WidgetProvider}\n * uses for communication.\n */\nqx.Interface.define(\"qx.ui.tree.core.IVirtualTree\", {\n  members: {\n    /**\n     * Return whether top level items should have an open/close button. The top\n     * level item item is normally the root item, but when the root is hidden,\n     * the root children are the top level items.\n     *\n     * @return {Boolean} Returns <code>true</code> when top level items should\n     *   show open/close buttons, <code>false</code> otherwise.\n     */\n    isShowTopLevelOpenCloseIcons() {},\n\n    /**\n     * Returns the internal data structure. The Array index is the row and the\n     * value is the model item.\n     *\n     * @internal\n     * @return {qx.data.Array} The internal data structure.\n     */\n    getLookupTable() {},\n\n    /**\n     * Returns if the passed item is a note or a leaf.\n     *\n     * @internal\n     * @param item {qx.core.Object} Item to check.\n     * @return {Boolean} <code>True</code> when item is a node,\n     *   </code>false</code> when item is a leaf.\n     */\n    isNode(item) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(item, qx.core.Object);\n    },\n\n    /**\n     * Return whether the node is opened or closed.\n     *\n     * @param node {qx.core.Object} Node to check.\n     * @return {Boolean} Returns <code>true</code> when the node is opened,\n     *   <code>false</code> otherwise.\n     */\n    isNodeOpen(node) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(node, qx.core.Object);\n    },\n\n    /**\n     * Returns the row's nesting level.\n     *\n     * @param row {Integer} The row to get the nesting level.\n     * @return {Integer} The row's nesting level or <code>null</code>.\n     */\n    getLevel(row) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInteger(row);\n    },\n\n    /**\n     * Return whether the node has visible children or not.\n     *\n     * @internal\n     * @param node {qx.core.Object} Node to check.\n     * @return {Boolean} <code>True</code> when the node has visible children,\n     *   <code>false</code> otherwise.\n     */\n    hasChildren(node) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(node, qx.core.Object);\n    },\n\n    /**\n     * Opens the passed node.\n     *\n     * @param node {qx.core.Object} Node to open.\n     */\n    openNode(node) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(node, qx.core.Object);\n    },\n\n    /**\n     * Opens the passed node without scrolling selected item into view.\n     *\n     * @param node {qx.core.Object} Node to open.\n     */\n    openNodeWithoutScrolling(node) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(node, qx.core.Object);\n    },\n\n    /**\n     * Closes the passed node.\n     *\n     * @param node {qx.core.Object} Node to close.\n     */\n    closeNode(node) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(node, qx.core.Object);\n    },\n\n    /**\n     * Closes the passed node without scrolling selected item into view.\n     *\n     * @param node {qx.core.Object} Node to close.\n     */\n    closeNodeWithoutScrolling(node) {\n      this.assertArgumentsCount(arguments, 1, 1);\n      this.assertInterface(node, qx.core.Object);\n    },\n\n    /**\n     * Returns the current selection.\n     *\n     * @return {qx.data.Array} The current selected elements.\n     */\n    getSelection() {}\n  }\n});\n"
  ],
  "mappings": "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"
}