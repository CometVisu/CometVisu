{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "isShowTopLevelOpenCloseIcons",
    "getLookupTable",
    "isNode",
    "item",
    "assertArgumentsCount",
    "arguments",
    "assertInterface",
    "core",
    "Object",
    "isNodeOpen",
    "node",
    "getLevel",
    "row",
    "assertInteger",
    "hasChildren",
    "openNode",
    "openNodeWithoutScrolling",
    "closeNode",
    "closeNodeWithoutScrolling",
    "getSelection",
    "ui",
    "tree",
    "IVirtualTree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/IVirtualTree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Hagendorn (chris_schmidt)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Interface describes the methods which the {@link qx.ui.tree.provider.WidgetProvider}\r\n * uses for communication.\r\n */\r\nqx.Interface.define(\"qx.ui.tree.core.IVirtualTree\", {\r\n  members: {\r\n    /**\r\n     * Return whether top level items should have an open/close button. The top\r\n     * level item item is normally the root item, but when the root is hidden,\r\n     * the root children are the top level items.\r\n     *\r\n     * @return {Boolean} Returns <code>true</code> when top level items should\r\n     *   show open/close buttons, <code>false</code> otherwise.\r\n     */\r\n    isShowTopLevelOpenCloseIcons() {},\r\n\r\n    /**\r\n     * Returns the internal data structure. The Array index is the row and the\r\n     * value is the model item.\r\n     *\r\n     * @internal\r\n     * @return {qx.data.Array} The internal data structure.\r\n     */\r\n    getLookupTable() {},\r\n\r\n    /**\r\n     * Returns if the passed item is a note or a leaf.\r\n     *\r\n     * @internal\r\n     * @param item {qx.core.Object} Item to check.\r\n     * @return {Boolean} <code>True</code> when item is a node,\r\n     *   </code>false</code> when item is a leaf.\r\n     */\r\n    isNode(item) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(item, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Return whether the node is opened or closed.\r\n     *\r\n     * @param node {qx.core.Object} Node to check.\r\n     * @return {Boolean} Returns <code>true</code> when the node is opened,\r\n     *   <code>false</code> otherwise.\r\n     */\r\n    isNodeOpen(node) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(node, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Returns the row's nesting level.\r\n     *\r\n     * @param row {Integer} The row to get the nesting level.\r\n     * @return {Integer} The row's nesting level or <code>null</code>.\r\n     */\r\n    getLevel(row) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInteger(row);\r\n    },\r\n\r\n    /**\r\n     * Return whether the node has visible children or not.\r\n     *\r\n     * @internal\r\n     * @param node {qx.core.Object} Node to check.\r\n     * @return {Boolean} <code>True</code> when the node has visible children,\r\n     *   <code>false</code> otherwise.\r\n     */\r\n    hasChildren(node) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(node, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Opens the passed node.\r\n     *\r\n     * @param node {qx.core.Object} Node to open.\r\n     */\r\n    openNode(node) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(node, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Opens the passed node without scrolling selected item into view.\r\n     *\r\n     * @param node {qx.core.Object} Node to open.\r\n     */\r\n    openNodeWithoutScrolling(node) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(node, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Closes the passed node.\r\n     *\r\n     * @param node {qx.core.Object} Node to close.\r\n     */\r\n    closeNode(node) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(node, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Closes the passed node without scrolling selected item into view.\r\n     *\r\n     * @param node {qx.core.Object} Node to close.\r\n     */\r\n    closeNodeWithoutScrolling(node) {\r\n      this.assertArgumentsCount(arguments, 1, 1);\r\n      this.assertInterface(node, qx.core.Object);\r\n    },\r\n\r\n    /**\r\n     * Returns the current selection.\r\n     *\r\n     * @return {qx.data.Array} The current selected elements.\r\n     */\r\n    getSelection() {}\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}