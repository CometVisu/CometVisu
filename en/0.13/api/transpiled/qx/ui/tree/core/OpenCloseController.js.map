{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "tree",
    "rootModel",
    "openProperty",
    "getOpenProperty",
    "_tree",
    "_lids",
    "sync",
    "node",
    "hasProperty",
    "constructor",
    "getChildren",
    "forEach",
    "get",
    "openNode",
    "closeNode",
    "bind",
    "lid",
    "addListener",
    "_onOpen",
    "push",
    "_onClose",
    "_onChangeBubble",
    "members",
    "ev",
    "getData",
    "set",
    "index",
    "item",
    "isOpen",
    "bubble",
    "name",
    "replace",
    "getItem",
    "isNodeOpen",
    "refresh",
    "destruct",
    "data",
    "removeListenerById",
    "ui",
    "OpenCloseController"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/OpenCloseController.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Cajus Pollmeier\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Cajus Pollmeier\n     * Derrell Lipman\n\n************************************************************************ */\n\n/**\n * Because of the virtual nature of the VirtualTree, and the fact that\n * rendering occurs asynchronously, it is not a simple matter to bind a\n * property in the model that will open or close branches in the\n * tree. Instead, this controller listens to both the model and the tree, and\n * synchronizes the openness of branches in the tree.\n *\n * To use this controller, simply instantiate it with the requisite\n * constructor arguments.\n */\nqx.Class.define(\"qx.ui.tree.core.OpenCloseController\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param tree {qx.ui.tree.VirtualTree}\n   *   The tree whose branch open or closed state is to be synchronized to a\n   *   model property.\n   *\n   * @param rootModel {qx.data.Array}\n   *   The tree root model wherein a property is to be synchronized to the\n   *   tree branches' open or closed states\n   */\n  construct(tree, rootModel) {\n    var openProperty = tree.getOpenProperty();\n\n    super();\n\n    // Save the tree and initialize storage of listener IDs\n    this._tree = tree;\n    this._lids = [];\n\n    // Sync tree nodes\n    var sync = function (node) {\n      if (qx.Class.hasProperty(node.constructor, \"children\")) {\n        node.getChildren().forEach(sync);\n      }\n\n      if (qx.Class.hasProperty(node.constructor, openProperty)) {\n        if (node.get(openProperty)) {\n          tree.openNode(node);\n        } else {\n          tree.closeNode(node);\n        }\n      }\n    }.bind(this);\n    sync(rootModel);\n\n    // Wire change listeners\n    var lid = tree.addListener(\"open\", this._onOpen, this);\n    this._lids.push([tree, lid]);\n    lid = tree.addListener(\"close\", this._onClose, this);\n    this._lids.push([tree, lid]);\n    lid = rootModel.addListener(\"changeBubble\", this._onChangeBubble, this);\n    this._lids.push([rootModel, lid]);\n  },\n\n  members: {\n    /** The tree which is synced to the model */\n    _tree: null,\n\n    /** Listener IDs that we manage */\n    _lids: null,\n\n    // event listener for \"open\" on the tree\n    _onOpen(ev) {\n      ev.getData().set(this._tree.getOpenProperty(), true);\n    },\n\n    // event listener for \"close\" on the tree\n    _onClose(ev) {\n      ev.getData().set(this._tree.getOpenProperty(), false);\n    },\n\n    // event listener for model changes\n    _onChangeBubble(ev) {\n      var index;\n      var item;\n      var isOpen;\n      var bubble = ev.getData();\n\n      // Extract the index of the current item\n      index = bubble.name.replace(/.*\\[([0-9]+)\\]$/, \"$1\");\n\n      // Retrieve that indexed array item if it's an array; otherwise the item itself\n      item = bubble.item.getItem ? bubble.item.getItem(index) : bubble.item;\n\n      // If this item isn't being deleted and has an open property...\n      if (\n        item &&\n        qx.Class.hasProperty(item.constructor, this._tree.getOpenProperty())\n      ) {\n        // ... then find out if this branch is open\n        isOpen = item.get(this._tree.getOpenProperty());\n\n        // Open or close the tree branch as necessary\n        if (isOpen && !this._tree.isNodeOpen(item)) {\n          this._tree.openNode(item);\n        } else if (!isOpen && this._tree.isNodeOpen(item)) {\n          this._tree.closeNode(item);\n        }\n      }\n\n      // Rebuild the internal lookup table\n      this._tree.refresh();\n    }\n  },\n\n  destruct() {\n    this._tree = null;\n    this._lids.forEach(function (data) {\n      data[0].removeListenerById(data[1]);\n    });\n  }\n});\n"
  ],
  "mappings": "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"
}