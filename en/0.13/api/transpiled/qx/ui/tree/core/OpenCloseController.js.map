{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "tree",
    "rootModel",
    "openProperty",
    "getOpenProperty",
    "_tree",
    "_lids",
    "sync",
    "node",
    "hasProperty",
    "constructor",
    "getChildren",
    "forEach",
    "get",
    "openNode",
    "closeNode",
    "bind",
    "lid",
    "addListener",
    "_onOpen",
    "push",
    "_onClose",
    "_onChangeBubble",
    "members",
    "ev",
    "getData",
    "set",
    "index",
    "item",
    "isOpen",
    "bubble",
    "name",
    "replace",
    "getItem",
    "isNodeOpen",
    "refresh",
    "destruct",
    "data",
    "removeListenerById",
    "ui",
    "OpenCloseController"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/OpenCloseController.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Cajus Pollmeier\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Cajus Pollmeier\n     * Derrell Lipman\n\n************************************************************************ */\n\n/**\n * Because of the virtual nature of the VirtualTree, and the fact that\n * rendering occurs asynchronously, it is not a simple matter to bind a\n * property in the model that will open or close branches in the\n * tree. Instead, this controller listens to both the model and the tree, and\n * synchronizes the openness of branches in the tree.\n *\n * To use this controller, simply instantiate it with the requisite\n * constructor arguments.\n */\nqx.Class.define(\"qx.ui.tree.core.OpenCloseController\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param tree {qx.ui.tree.VirtualTree}\n   *   The tree whose branch open or closed state is to be synchronized to a\n   *   model property.\n   *\n   * @param rootModel {qx.data.Array}\n   *   The tree root model wherein a property is to be synchronized to the\n   *   tree branches' open or closed states\n   */\n  construct(tree, rootModel) {\n    var openProperty = tree.getOpenProperty();\n\n    super();\n\n    // Save the tree and initialize storage of listener IDs\n    this._tree = tree;\n    this._lids = [];\n\n    // Sync tree nodes\n    var sync = function (node) {\n      if (qx.Class.hasProperty(node.constructor, \"children\")) {\n        node.getChildren().forEach(sync);\n      }\n\n      if (qx.Class.hasProperty(node.constructor, openProperty)) {\n        if (node.get(openProperty)) {\n          tree.openNode(node);\n        } else {\n          tree.closeNode(node);\n        }\n      }\n    }.bind(this);\n    sync(rootModel);\n\n    // Wire change listeners\n    var lid = tree.addListener(\"open\", this._onOpen, this);\n    this._lids.push([tree, lid]);\n    lid = tree.addListener(\"close\", this._onClose, this);\n    this._lids.push([tree, lid]);\n    lid = rootModel.addListener(\"changeBubble\", this._onChangeBubble, this);\n    this._lids.push([rootModel, lid]);\n  },\n\n  members: {\n    /** The tree which is synced to the model */\n    _tree: null,\n\n    /** Listener IDs that we manage */\n    _lids: null,\n\n    // event listener for \"open\" on the tree\n    _onOpen(ev) {\n      ev.getData().set(this._tree.getOpenProperty(), true);\n    },\n\n    // event listener for \"close\" on the tree\n    _onClose(ev) {\n      ev.getData().set(this._tree.getOpenProperty(), false);\n    },\n\n    // event listener for model changes\n    _onChangeBubble(ev) {\n      var index;\n      var item;\n      var isOpen;\n      var bubble = ev.getData();\n\n      // Extract the index of the current item\n      index = bubble.name.replace(/.*\\[([0-9]+)\\]$/, \"$1\");\n\n      // Retrieve that indexed array item if it's an array; otherwise the item itself\n      item = bubble.item.getItem ? bubble.item.getItem(index) : bubble.item;\n\n      // If this item isn't being deleted and has an open property...\n      if (\n        item &&\n        qx.Class.hasProperty(item.constructor, this._tree.getOpenProperty())\n      ) {\n        // ... then find out if this branch is open\n        isOpen = item.get(this._tree.getOpenProperty());\n\n        // Open or close the tree branch as necessary\n        if (isOpen && !this._tree.isNodeOpen(item)) {\n          this._tree.openNode(item);\n        } else if (!isOpen && this._tree.isNodeOpen(item)) {\n          this._tree.closeNode(item);\n        }\n      }\n\n      // Rebuild the internal lookup table\n      this._tree.refresh();\n    }\n  },\n\n  destruct() {\n    this._tree = null;\n    this._lids.forEach(function (data) {\n      data[0].removeListenerById(data[1]);\n    });\n  }\n});\n"
  ],
  "mappings": "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"
}