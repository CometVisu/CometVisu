{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "core",
    "Scroller",
    "implement",
    "tree",
    "IVirtualTree",
    "data",
    "controller",
    "ISelection",
    "include",
    "selection",
    "MModel",
    "MContentPadding",
    "construct",
    "rootModel",
    "labelPath",
    "childProperty",
    "openProperty",
    "_init",
    "setLabelPath",
    "setChildProperty",
    "initModel",
    "initItemHeight",
    "initOpenMode",
    "addListener",
    "_onKeyPress",
    "openViaModelChanges",
    "events",
    "open",
    "close",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "width",
    "height",
    "itemHeight",
    "check",
    "apply",
    "themeable",
    "openMode",
    "event",
    "hideRoot",
    "showTopLevelOpenCloseIcons",
    "showLeafs",
    "nullable",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "model",
    "deferredInit",
    "delegate",
    "members",
    "_provider",
    "_layer",
    "__lookupTable",
    "__openNodes",
    "__nestingLevel",
    "__deferredCall",
    "_itemWidth",
    "__parentChain",
    "__openProperty",
    "syncWidget",
    "jobs",
    "firstRow",
    "getFirstRow",
    "rowSize",
    "getRowSizes",
    "length",
    "row",
    "widget",
    "getRenderedCellWidget",
    "Math",
    "max",
    "getSizeHint",
    "paneWidth",
    "getPane",
    "getInnerSize",
    "getColumnConfig",
    "setItemSize",
    "openNode",
    "node",
    "__openNode",
    "buildLookupTable",
    "openNodeWithoutScrolling",
    "autoscroll",
    "getAutoScrollIntoView",
    "setAutoScrollIntoView",
    "refresh",
    "openNodeAndParents",
    "__openNodeAndAllParents",
    "getModel",
    "closeNode",
    "includes",
    "lang",
    "Array",
    "remove",
    "fireDataEvent",
    "closeNodeWithoutScrolling",
    "isNodeOpen",
    "_openCloseController",
    "dispose",
    "OpenCloseController",
    "getOpenProperty",
    "_initLayer",
    "provider",
    "WidgetProvider",
    "createLayer",
    "_onUpdated",
    "addLayer",
    "addListenerOnce",
    "e",
    "getData",
    "getLookupTable",
    "_reverseLookup",
    "index",
    "_getDataFromRow",
    "getItem",
    "_getSelectables",
    "getOpenNodes",
    "isNode",
    "item",
    "Util",
    "getChildProperty",
    "getLevel",
    "hasChildren",
    "isShowLeafs",
    "_getContentPaddingTarget",
    "_applyRowHeight",
    "value",
    "old",
    "getRowConfig",
    "setDefaultItemSize",
    "_applyOpenMode",
    "pane",
    "_onOpen",
    "removeListener",
    "_applyHideRoot",
    "_applyShowTopLevelOpenCloseIcons",
    "removeAll",
    "_applyShowLeafs",
    "_applyChildProperty",
    "_applyLabelPath",
    "_applyIconPath",
    "setIconPath",
    "_applyLabelOptions",
    "setLabelOptions",
    "_applyIconOptions",
    "setIconOptions",
    "_applyModel",
    "_onChangeBubble",
    "__applyModelChanges",
    "_applyDelegate",
    "setDelegate",
    "propertyName",
    "name",
    "lastIndexOf",
    "substr",
    "startsWith",
    "isSubClassOf",
    "constructor",
    "propertyChain",
    "SingleValueBinding",
    "resolvePropertyChain",
    "indexOf",
    "util",
    "DeferredCall",
    "queue",
    "Widget",
    "add",
    "schedule",
    "getRow",
    "getSelection",
    "getLength",
    "getKeyIdentifier",
    "parent",
    "getParent",
    "splice",
    "children",
    "get",
    "_beforeApplySelection",
    "newSelection",
    "getSelectionMode",
    "visibleParent",
    "__getVisibleParent",
    "push",
    "_afterApplySelection",
    "__buildParentChain",
    "_applyDefaultSelection",
    "getLabelPath",
    "Error",
    "lookupTable",
    "nestedLevel",
    "root",
    "isHideRoot",
    "visibleChildren",
    "__getVisibleChildrenFrom",
    "concat",
    "equals",
    "toArray",
    "removeBindings",
    "append",
    "__updateRowCount",
    "_updateSelection",
    "visible",
    "copy",
    "getDelegate",
    "filter",
    "Delegate",
    "getMethod",
    "sorter",
    "sort",
    "i",
    "child",
    "startNode",
    "targetNode",
    "result",
    "setItemCount",
    "fullUpdate",
    "level",
    "levelBefore",
    "unshift",
    "pop",
    "contains",
    "destruct",
    "hasListener",
    "ObjectRegistry",
    "inShutDown",
    "cancel",
    "destroy",
    "VirtualTree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/VirtualTree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/*\n * Virtual tree implementation.\n *\n * The virtual tree can be used to render node and leafs. Nodes and leafs are\n * both items for a tree. The difference between a node and a leaf is that a\n * node has child items, but a leaf not.\n *\n * With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\n * to configure the tree's behavior (item renderer configuration, etc.).\n *\n * Here's an example of how to use the widget, including using a model\n * property to open/close branches. See the two timers at the end. The first\n * one opens all branches after two seconds; the second cleans up the tree\n * after five seconds.\n *\n * <pre class=\"javascript\">\n *   var nodes =\n *   [\n *     {\n *       name : \"Root\",\n *       open : false,\n *       children :\n *       [\n *         {\n *           name : \"Branch 1\",\n *           open : false,\n *           children :\n *           [\n *             {\n *               name : \"Leaf 1.1\"\n *             },\n *             {\n *               name : \"Leaf 1.2\"\n *             },\n *             {\n *               name : \"Branch 1.3\",\n *               open : false,\n *               children :\n *               [\n *                 {\n *                   name : \"Branch 1.3.1\",\n *                   open : false,\n *                   children :\n *                   [\n *                     {\n *                       name : \"Leaf 1.3.1.1\"\n *                     }\n *                   ]\n *                 }\n *               ]\n *             }\n *           ]\n *         }\n *       ]\n *     }\n *   ];\n *\n *   // convert the raw nodes to qooxdoo objects\n *   nodes = qx.data.marshal.Json.createModel(nodes, true);\n *\n *   // create the tree and synchronize the model property 'open'\n *   // to nodes being open\n *   var tree =\n *     new qx.ui.tree.VirtualTree(\n *       nodes.getItem(0), \"name\", \"children\", \"open\").set({\n *         width : 200,\n *         height : 400\n *       });\n *\n *   //log selection changes\n *   tree.getSelection().addListener(\"change\", function(e) {\n *     this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\n *   }, this);\n *\n *   tree.set(\n *     {\n *       width : 200,\n *       height : 400,\n *       showTopLevelOpenCloseIcons : true\n *     });\n *\n *   var doc = this.getRoot();\n *   doc.add(tree,\n *   {\n *     left : 100,\n *     top  : 50\n *   });\n *\n *   // After two seconds, open up all branches by setting their open\n *   // property to true.\n *   qx.event.Timer.once(\n *     function()\n *     {\n *       ;(function allOpen(root)\n *         {\n *           if (root.setOpen)     root.setOpen(true);\n *           if (root.getChildren) root.getChildren().forEach(allOpen);\n *         })(nodes.getItem(0));\n *     },\n *     this,\n *     2000);\n *\n *   // After five seconds, remove and dispose the tree.\n *   qx.event.Timer.once(\n *     function()\n *     {\n *       doc.remove(tree);\n *       tree.dispose();\n *       console.warn(\"All cleaned up.\");\n *     },\n *     this,\n *     5000);\n * </pre>\n */\nqx.Class.define(\"qx.ui.tree.VirtualTree\", {\n  extend: qx.ui.virtual.core.Scroller,\n  implement: [qx.ui.tree.core.IVirtualTree, qx.data.controller.ISelection],\n  include: [qx.ui.virtual.selection.MModel, qx.ui.core.MContentPadding],\n\n  /**\n   * @param rootModel {qx.core.Object?null} The model structure representing\n   *   the root of the tree, for more details have a look at the 'model'\n   *   property.\n   * @param labelPath {String?null} The name of the label property, for more\n   *   details have a look at the 'labelPath' property.\n   * @param childProperty {String?null} The name of the child property, for\n   *   more details have a look at the 'childProperty' property.\n   * @param openProperty {String|null} the name of the model property which\n   *   represents the open state of a branch. If this value is provided, so,\n   *   too, must be rootModel.\n   */\n  construct(rootModel, labelPath, childProperty, openProperty) {\n    super(0, 1, 20, 100);\n\n    this._init();\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n\n    if (childProperty != null) {\n      this.setChildProperty(childProperty);\n    }\n\n    if (rootModel != null) {\n      this.initModel(rootModel);\n    }\n\n    this.initItemHeight();\n    this.initOpenMode();\n\n    this.addListener(\"keypress\", this._onKeyPress, this);\n\n    // If an open property and root model are provided, start up the open-close controller.\n    if (openProperty && rootModel) {\n      this.openViaModelChanges(openProperty);\n    }\n  },\n\n  events: {\n    /**\n     * Fired when a node is opened.\n     */\n    open: \"qx.event.type.Data\",\n\n    /**\n     * Fired when a node is closed.\n     */\n    close: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"virtual-tree\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    // overridden\n    width: {\n      refine: true,\n      init: 100\n    },\n\n    // overridden\n    height: {\n      refine: true,\n      init: 200\n    },\n\n    /** Default item height. */\n    itemHeight: {\n      check: \"Integer\",\n      init: 25,\n      apply: \"_applyRowHeight\",\n      themeable: true\n    },\n\n    /**\n     * Control whether tap or double tap should open or close the tapped\n     * item.\n     */\n    openMode: {\n      check: [\"tap\", \"dbltap\", \"none\"],\n      init: \"dbltap\",\n      apply: \"_applyOpenMode\",\n      event: \"changeOpenMode\",\n      themeable: true\n    },\n\n    /**\n     * Hides *only* the root node, not the node's children when the property is\n     * set to <code>true</code>.\n     */\n    hideRoot: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyHideRoot\"\n    },\n\n    /**\n     * Whether top level items should have an open/close button. The top level\n     * item item is normally the root item, but when the root is hidden, the\n     * root children are the top level items.\n     */\n    showTopLevelOpenCloseIcons: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyShowTopLevelOpenCloseIcons\"\n    },\n\n    /**\n     * Configures the tree to show also the leafs. When the property is set to\n     * <code>false</code> *only* the nodes are shown.\n     */\n    showLeafs: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowLeafs\"\n    },\n\n    /**\n     * The name of the property, where the children are stored in the model.\n     * Instead of the {@link #labelPath} must the child property a direct\n     * property form the model instance.\n     */\n    childProperty: {\n      check: \"String\",\n      apply: \"_applyChildProperty\",\n      nullable: true\n    },\n\n    /**\n     * The name of the property, where the value for the tree folders label\n     * is stored in the model classes.\n     */\n    labelPath: {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon.\n     */\n    iconPath: {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions: {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions: {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n    /**\n     * The model containing the data (nodes and/or leafs) which should be shown\n     * in the tree.\n     */\n    model: {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      deferredInit: true\n    },\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.\n     */\n    delegate: {\n      event: \"changeDelegate\",\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  members: {\n    /** @type {qx.ui.tree.provider.WidgetProvider} Provider for widget rendering. */\n    _provider: null,\n\n    /** @type {qx.ui.virtual.layer.Abstract} Layer which contains the items. */\n    _layer: null,\n\n    /**\n     * @type {qx.data.Array} The internal lookup table data structure to get the model item\n     * from a row.\n     */\n    __lookupTable: null,\n\n    /** @type {Array} HashMap which contains all open nodes. */\n    __openNodes: null,\n\n    /**\n     * @type {Array} The internal data structure to get the nesting level from a\n     * row.\n     */\n    __nestingLevel: null,\n\n    /**\n     * @type {qx.util.DeferredCall} Adds this instance to the widget queue on a\n     * deferred call.\n     */\n    __deferredCall: null,\n\n    /** @type {Integer} Holds the max item width from a rendered widget. */\n    _itemWidth: 0,\n\n    /** @type {Array} internal parent chain form the last selected node */\n    __parentChain: null,\n\n    /**\n     * @type {String|null} the name of the model property which represents the\n     *   open state of a branch.\n     */\n    __openProperty: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    syncWidget(jobs) {\n      var firstRow = this._layer.getFirstRow();\n      var rowSize = this._layer.getRowSizes().length;\n\n      for (var row = firstRow; row < firstRow + rowSize; row++) {\n        var widget = this._layer.getRenderedCellWidget(row, 0);\n        if (widget != null) {\n          this._itemWidth = Math.max(\n            this._itemWidth,\n            widget.getSizeHint().width\n          );\n        }\n      }\n      var paneWidth = this.getPane().getInnerSize().width;\n      this.getPane()\n        .getColumnConfig()\n        .setItemSize(0, Math.max(this._itemWidth, paneWidth));\n    },\n\n    // Interface implementation\n    openNode(node) {\n      this.__openNode(node);\n      this.buildLookupTable();\n    },\n\n    // Interface implementation\n    openNodeWithoutScrolling(node) {\n      var autoscroll = this.getAutoScrollIntoView();\n      // suspend automatically scrolling selection into view\n      this.setAutoScrollIntoView(false);\n\n      this.openNode(node);\n\n      // re set to original value\n      this.setAutoScrollIntoView(autoscroll);\n    },\n\n    /**\n     * Trigger a rebuild from the internal data structure.\n     */\n    refresh() {\n      this.buildLookupTable();\n    },\n\n    /**\n     * Opens the passed node and all his parents. *Note!* The algorithm\n     * implements a depth-first search with a complexity: <code>O(n)</code> and\n     * <code>n</code> are all model items.\n     *\n     * @param node {qx.core.Object} Node to open.\n     */\n    openNodeAndParents(node) {\n      this.__openNodeAndAllParents(this.getModel(), node);\n      this.buildLookupTable();\n    },\n\n    // Interface implementation\n    closeNode(node) {\n      if (this.__openNodes.includes(node)) {\n        qx.lang.Array.remove(this.__openNodes, node);\n        this.fireDataEvent(\"close\", node);\n        this.buildLookupTable();\n      }\n    },\n\n    // Interface implementation\n    closeNodeWithoutScrolling(node) {\n      var autoscroll = this.getAutoScrollIntoView();\n      // suspend automatically scrolling selection into view\n      this.setAutoScrollIntoView(false);\n\n      this.closeNode(node);\n\n      // re set to original value\n      this.setAutoScrollIntoView(autoscroll);\n    },\n\n    // Interface implementation\n    isNodeOpen(node) {\n      return this.__openNodes.includes(node);\n    },\n\n    /**\n     * Open and close branches via changes to a property in the model.\n     *\n     * @param openProperty {String|null}\n     *   The name of the open property, which determines the open state of a\n     *   branch in the tree. If null, turn off opening and closing branches\n     *   via changes to the model.\n     */\n    openViaModelChanges(openProperty) {\n      // Save the open property\n      this.__openProperty = openProperty;\n\n      // if no name is provided, just remove any prior open-close controller\n      if (!openProperty) {\n        if (this._openCloseController) {\n          this._openCloseController.dispose();\n          this._openCloseController = null;\n        }\n\n        return;\n      }\n\n      // we have a property name, so create controller\n      this._openCloseController = new qx.ui.tree.core.OpenCloseController(\n        this,\n        this.getModel(),\n        openProperty\n      );\n    },\n\n    /**\n     * Getter for the open property\n     */\n    getOpenProperty() {\n      return this.__openProperty;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the virtual tree.\n     */\n    _init() {\n      this.__lookupTable = new qx.data.Array();\n      this.__openNodes = [];\n      this.__nestingLevel = [];\n      this._initLayer();\n    },\n\n    /**\n     * Initializes the virtual tree layer.\n     */\n    _initLayer() {\n      this._provider = new qx.ui.tree.provider.WidgetProvider(this);\n      this._layer = this._provider.createLayer();\n      this._layer.addListener(\"updated\", this._onUpdated, this);\n      this.getPane().addLayer(this._layer);\n      this.getPane().addListenerOnce(\"resize\", e => {\n        // apply width to pane on first rendering pass\n        // to avoid visible flickering\n        this.getPane().getColumnConfig().setItemSize(0, e.getData().width);\n      });\n    },\n\n    // Interface implementation\n    getLookupTable() {\n      return this.__lookupTable;\n    },\n\n    /**\n     * Performs a lookup from model index to row.\n     *\n     * @param index {Number} The index to look at.\n     * @return {Number} The row or <code>-1</code>\n     *  if the index is not a model index.\n     */\n    _reverseLookup(index) {\n      return index;\n    },\n\n    /**\n     * Returns the model data for the given row.\n     *\n     * @param row {Integer} row to get data for.\n     * @return {var|null} the row's model data.\n     */\n    _getDataFromRow(row) {\n      return this.__lookupTable.getItem(row);\n    },\n\n    /**\n     * Returns the selectable model items.\n     *\n     * @return {qx.data.Array} The selectable items.\n     */\n    _getSelectables() {\n      return this.__lookupTable;\n    },\n\n    /**\n     * Returns all open nodes.\n     *\n     * @internal\n     * @return {Array} All open nodes.\n     */\n    getOpenNodes() {\n      return this.__openNodes;\n    },\n\n    // Interface implementation\n    isNode(item) {\n      return qx.ui.tree.core.Util.isNode(item, this.getChildProperty());\n    },\n\n    // Interface implementation\n    getLevel(row) {\n      return this.__nestingLevel[row];\n    },\n\n    // Interface implementation\n    hasChildren(node) {\n      return qx.ui.tree.core.Util.hasChildren(\n        node,\n        this.getChildProperty(),\n        !this.isShowLeafs()\n      );\n    },\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget() {\n      return this.getPane();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyRowHeight(value, old) {\n      this.getPane().getRowConfig().setDefaultItemSize(value);\n    },\n\n    // property apply\n    _applyOpenMode(value, old) {\n      var pane = this.getPane();\n\n      //\"tap\", \"dbltap\", \"none\"\n      if (value === \"dbltap\") {\n        pane.addListener(\"cellDbltap\", this._onOpen, this);\n      } else if (value === \"tap\") {\n        pane.addListener(\"cellTap\", this._onOpen, this);\n      }\n\n      if (old === \"dbltap\") {\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\n      } else if (old === \"tap\") {\n        pane.removeListener(\"cellTap\", this._onOpen, this);\n      }\n    },\n\n    // property apply\n    _applyHideRoot(value, old) {\n      this.buildLookupTable();\n    },\n\n    // property apply\n    _applyShowTopLevelOpenCloseIcons(value, old) {\n      // force rebuild of the lookup table\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\n      this.getLookupTable().removeAll();\n      this.buildLookupTable();\n    },\n\n    // property apply\n    _applyShowLeafs(value, old) {\n      // force rebuild of the lookup table\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\n      this.getLookupTable().removeAll();\n      this.buildLookupTable();\n    },\n\n    // property apply\n    _applyChildProperty(value, old) {\n      this._provider.setChildProperty(value);\n    },\n\n    // property apply\n    _applyLabelPath(value, old) {\n      this._provider.setLabelPath(value);\n    },\n\n    // property apply\n    _applyIconPath(value, old) {\n      this._provider.setIconPath(value);\n    },\n\n    // property apply\n    _applyLabelOptions(value, old) {\n      this._provider.setLabelOptions(value);\n    },\n\n    // property apply\n    _applyIconOptions(value, old) {\n      this._provider.setIconOptions(value);\n    },\n\n    // property apply\n    _applyModel(value, old) {\n      this.__openNodes = [];\n\n      if (value != null) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (\n            !qx.Class.hasMixin(\n              value.constructor,\n              qx.data.marshal.MEventBubbling\n            )\n          ) {\n            this.warn(\n              \"The model item doesn't support the Mixin 'qx.data.\" +\n                \"marshal.MEventBubbling'. Therefore the tree can not update \" +\n                \"the view automatically on model changes.\"\n            );\n          }\n        }\n        value.addListener(\"changeBubble\", this._onChangeBubble, this);\n        this.__openNode(value);\n      }\n\n      // If the model changes, an existing OpenCloseController is no longer\n      // valid, so dispose it. The user should call openViaModelChanges again.\n      if (this._openCloseController) {\n        this._openCloseController.dispose();\n        this._openCloseController = null;\n      }\n\n      if (old != null) {\n        old.removeListener(\"changeBubble\", this._onChangeBubble, this);\n      }\n\n      this.__applyModelChanges();\n    },\n\n    // property apply\n    _applyDelegate(value, old) {\n      this._provider.setDelegate(value);\n      this.buildLookupTable();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for the changeBubble event. The handler rebuild the lookup\n     * table when the child structure changed.\n     *\n     * @param event {qx.event.type.Data} The data event.\n     */\n    _onChangeBubble(event) {\n      var data = event.getData();\n      var propertyName = data.name;\n      var index = propertyName.lastIndexOf(\".\");\n\n      if (index != -1) {\n        propertyName = propertyName.substr(index + 1, propertyName.length);\n      }\n\n      // only continue when the effected property is the child property\n      if (propertyName.startsWith(this.getChildProperty())) {\n        var item = data.item;\n\n        if (qx.Class.isSubClassOf(item.constructor, qx.data.Array)) {\n          if (index === -1) {\n            item = this.getModel();\n          } else {\n            var propertyChain = data.name.substr(0, index);\n            item = qx.data.SingleValueBinding.resolvePropertyChain(\n              this.getModel(),\n              propertyChain\n            );\n          }\n        }\n\n        if (this.__lookupTable.indexOf(item) != -1) {\n          this.__applyModelChanges();\n        }\n      }\n    },\n\n    /**\n     * Event handler for the update event.\n     *\n     * @param event {qx.event.type.Event} The event.\n     */\n    _onUpdated(event) {\n      if (this.__deferredCall == null) {\n        this.__deferredCall = new qx.util.DeferredCall(function () {\n          qx.ui.core.queue.Widget.add(this);\n        }, this);\n      }\n      this.__deferredCall.schedule();\n    },\n\n    /**\n     * Event handler to open/close tapped nodes.\n     *\n     * @param event {qx.ui.virtual.core.CellEvent} The cell tap event.\n     */\n    _onOpen(event) {\n      var row = event.getRow();\n      var item = this.__lookupTable.getItem(row);\n\n      if (this.isNode(item)) {\n        if (this.isNodeOpen(item)) {\n          this.closeNode(item);\n        } else {\n          this.openNode(item);\n        }\n      }\n    },\n\n    /**\n     * Event handler for key press events. Open and close the current selected\n     * item on key left and right press. Jump to parent on key left if already\n     * closed.\n     *\n     * @param e {qx.event.type.KeySequence} key event.\n     */\n    _onKeyPress(e) {\n      var selection = this.getSelection();\n\n      if (selection.getLength() > 0) {\n        var item = selection.getItem(0);\n        var isNode = this.isNode(item);\n\n        switch (e.getKeyIdentifier()) {\n          case \"Left\":\n            if (isNode && this.isNodeOpen(item)) {\n              this.closeNode(item);\n            } else {\n              var parent = this.getParent(item);\n              if (parent != null) {\n                selection.splice(0, 1, parent);\n              }\n            }\n            break;\n\n          case \"Right\":\n            if (isNode && !this.isNodeOpen(item)) {\n              this.openNode(item);\n            } else {\n              if (isNode) {\n                var children = item.get(this.getChildProperty());\n                if (children != null && children.getLength() > 0) {\n                  selection.splice(0, 1, children.getItem(0));\n                }\n              }\n            }\n            break;\n\n          case \"Enter\":\n          case \"Space\":\n            if (!isNode) {\n              return;\n            }\n            if (this.isNodeOpen(item)) {\n              this.closeNode(item);\n            } else {\n              this.openNode(item);\n            }\n            break;\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION HOOK METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n     * The hook method sets the first visible parent not as new selection when\n     * the current selection is empty and the selection mode is one selection.\n     *\n     * @param newSelection {Array} The newSelection which will be set to the selection manager.\n     */\n    _beforeApplySelection(newSelection) {\n      if (newSelection.length === 0 && this.getSelectionMode() === \"one\") {\n        var visibleParent = this.__getVisibleParent();\n        var row = this.getLookupTable().indexOf(visibleParent);\n\n        if (row >= 0) {\n          newSelection.push(row);\n        }\n      }\n    },\n\n    /**\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n     * The hook method builds the parent chain form the current selected item.\n     */\n    _afterApplySelection() {\n      var selection = this.getSelection();\n\n      if (selection.getLength() > 0 && this.getSelectionMode() === \"one\") {\n        this.__buildParentChain(selection.getItem(0));\n      } else {\n        this.__parentChain = [];\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Helper method to apply model changes. Normally build the lookup table and\n     * apply the default selection.\n     */\n    __applyModelChanges() {\n      this.buildLookupTable();\n      this._applyDefaultSelection();\n    },\n\n    /**\n     * Helper method to build the internal data structure.\n     *\n     * @internal\n     */\n    buildLookupTable() {\n      if (\n        this.getModel() != null &&\n        (this.getChildProperty() == null || this.getLabelPath() == null)\n      ) {\n        throw new Error(\n          \"Could not build tree, because 'childProperty' and/\" +\n            \"or 'labelPath' is 'null'!\"\n        );\n      }\n\n      this._itemWidth = 0;\n      var lookupTable = [];\n      this.__nestingLevel = [];\n      var nestedLevel = -1;\n\n      var root = this.getModel();\n      if (root != null) {\n        if (!this.isHideRoot()) {\n          nestedLevel++;\n          lookupTable.push(root);\n          this.__nestingLevel.push(nestedLevel);\n        }\n\n        if (this.isNodeOpen(root)) {\n          var visibleChildren = this.__getVisibleChildrenFrom(\n            root,\n            nestedLevel\n          );\n\n          lookupTable = lookupTable.concat(visibleChildren);\n        }\n      }\n\n      if (!qx.lang.Array.equals(this.__lookupTable.toArray(), lookupTable)) {\n        this._provider.removeBindings();\n        this.__lookupTable.removeAll();\n        this.__lookupTable.append(lookupTable);\n        this.__updateRowCount();\n        this._updateSelection();\n      }\n    },\n\n    /**\n     * Helper method to get all visible children form the passed parent node.\n     * The algorithm implements a depth-first search with a complexity:\n     * <code>O(n)</code> and <code>n</code> are all visible items.\n     *\n     * @param node {qx.core.Object} The start node to start search.\n     * @param nestedLevel {Integer} The nested level from the start node.\n     * @return {Array} All visible children form the parent.\n     */\n    __getVisibleChildrenFrom(node, nestedLevel) {\n      var visible = [];\n      nestedLevel++;\n\n      if (!this.isNode(node)) {\n        return visible;\n      }\n\n      var children = node.get(this.getChildProperty());\n      if (children == null) {\n        return visible;\n      }\n\n      // clone children to keep original model unmodified\n      children = children.copy();\n\n      var delegate = this.getDelegate();\n      var filter = qx.util.Delegate.getMethod(delegate, \"filter\");\n      var sorter = qx.util.Delegate.getMethod(delegate, \"sorter\");\n\n      if (sorter != null) {\n        children.sort(sorter);\n      }\n\n      for (var i = 0; i < children.getLength(); i++) {\n        var child = children.getItem(i);\n\n        if (filter && !filter(child)) {\n          continue;\n        }\n\n        if (this.isNode(child)) {\n          this.__nestingLevel.push(nestedLevel);\n          visible.push(child);\n\n          if (this.isNodeOpen(child)) {\n            var visibleChildren = this.__getVisibleChildrenFrom(\n              child,\n              nestedLevel\n            );\n\n            visible = visible.concat(visibleChildren);\n          }\n        } else {\n          if (this.isShowLeafs()) {\n            this.__nestingLevel.push(nestedLevel);\n            visible.push(child);\n          }\n        }\n      }\n\n      // dispose children clone\n      children.dispose();\n\n      return visible;\n    },\n\n    /**\n     * Helper method to set the node to the open nodes data structure when it\n     * is not included.\n     *\n     * @param node {qx.core.Object} Node to set to open nodes.\n     */\n    __openNode(node) {\n      if (!this.__openNodes.includes(node)) {\n        this.__openNodes.push(node);\n        this.fireDataEvent(\"open\", node);\n      }\n    },\n\n    /**\n     * Helper method to set the target node and all his parents to the open\n     * nodes data structure. The algorithm implements a depth-first search with\n     * a complexity: <code>O(n)</code> and <code>n</code> are all model items.\n     *\n     * @param startNode {qx.core.Object} Start (root) node to search.\n     * @param targetNode {qx.core.Object} Target node to open (and his parents).\n     * @return {Boolean} <code>True</code> when the targetNode and his\n     *  parents could opened, <code>false</code> otherwise.\n     */\n    __openNodeAndAllParents(startNode, targetNode) {\n      if (startNode === targetNode) {\n        this.__openNode(targetNode);\n        return true;\n      }\n\n      if (!this.isNode(startNode)) {\n        return false;\n      }\n\n      var children = startNode.get(this.getChildProperty());\n      if (children == null) {\n        return false;\n      }\n\n      for (var i = 0; i < children.getLength(); i++) {\n        var child = children.getItem(i);\n        var result = this.__openNodeAndAllParents(child, targetNode);\n\n        if (result === true) {\n          this.__openNode(child);\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Helper method to update the row count.\n     */\n    __updateRowCount() {\n      this.getPane()\n        .getRowConfig()\n        .setItemCount(this.__lookupTable.getLength());\n      this.getPane().fullUpdate();\n    },\n\n    /**\n     * Helper method to get the parent node. Node! This only works with leaf and\n     * nodes which are in the internal lookup table.\n     *\n     * @param item {qx.core.Object} Node or leaf to get parent.\n     * @return {qx.core.Object|null} The parent note or <code>null</code> when\n     *   no parent found.\n     *\n     * @internal\n     */\n    getParent(item) {\n      var index = this.__lookupTable.indexOf(item);\n      if (index < 0) {\n        return null;\n      }\n\n      var level = this.__nestingLevel[index];\n      while (index > 0) {\n        index--;\n        var levelBefore = this.__nestingLevel[index];\n        if (levelBefore < level) {\n          return this.__lookupTable.getItem(index);\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Builds the parent chain form the passed item.\n     *\n     * @param item {var} Item to build parent chain.\n     */\n    __buildParentChain(item) {\n      this.__parentChain = [];\n      var parent = this.getParent(item);\n      while (parent != null) {\n        this.__parentChain.unshift(parent);\n        parent = this.getParent(parent);\n      }\n    },\n\n    /**\n     * Return the first visible parent node from the last selected node.\n     *\n     * @return {var} The first visible node.\n     */\n    __getVisibleParent() {\n      if (this.__parentChain == null) {\n        return this.getModel();\n      }\n\n      var lookupTable = this.getLookupTable();\n      var parent = this.__parentChain.pop();\n\n      while (parent != null) {\n        if (lookupTable.contains(parent)) {\n          return parent;\n        }\n        parent = this.__parentChain.pop();\n      }\n      return this.getModel();\n    }\n  },\n\n  destruct() {\n    if (this._openCloseController) {\n      this._openCloseController.dispose();\n    }\n\n    var pane = this.getPane();\n    if (pane != null) {\n      if (pane.hasListener(\"cellDbltap\")) {\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\n      }\n      if (pane.hasListener(\"cellTap\")) {\n        pane.removeListener(\"cellTap\", this._onOpen, this);\n      }\n    }\n\n    if (!qx.core.ObjectRegistry.inShutDown && this.__deferredCall != null) {\n      this.__deferredCall.cancel();\n      this.__deferredCall.dispose();\n    }\n\n    var model = this.getModel();\n    if (model != null) {\n      model.removeListener(\"changeBubble\", this._onChangeBubble, this);\n    }\n\n    this._layer.removeListener(\"updated\", this._onUpdated, this);\n    this._layer.destroy();\n    this._provider.dispose();\n    this.__lookupTable.dispose();\n\n    this._layer =\n      this._provider =\n      this.__lookupTable =\n      this.__openNodes =\n      this.__deferredCall =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}