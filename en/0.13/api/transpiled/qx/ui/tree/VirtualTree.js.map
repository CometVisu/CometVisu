{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "core",
    "Scroller",
    "implement",
    "tree",
    "IVirtualTree",
    "data",
    "controller",
    "ISelection",
    "include",
    "selection",
    "MModel",
    "MContentPadding",
    "construct",
    "rootModel",
    "labelPath",
    "childProperty",
    "openProperty",
    "constructor",
    "call",
    "_init",
    "setLabelPath",
    "setChildProperty",
    "initModel",
    "initItemHeight",
    "initOpenMode",
    "addListener",
    "_onKeyPress",
    "openViaModelChanges",
    "events",
    "open",
    "close",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "width",
    "height",
    "itemHeight",
    "check",
    "apply",
    "themeable",
    "openMode",
    "event",
    "hideRoot",
    "showTopLevelOpenCloseIcons",
    "showLeafs",
    "nullable",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "model",
    "deferredInit",
    "delegate",
    "members",
    "_provider",
    "_layer",
    "__lookupTable",
    "__openNodes",
    "__nestingLevel",
    "__deferredCall",
    "_itemWidth",
    "__parentChain",
    "__openProperty",
    "syncWidget",
    "jobs",
    "firstRow",
    "getFirstRow",
    "rowSize",
    "getRowSizes",
    "length",
    "row",
    "widget",
    "getRenderedCellWidget",
    "Math",
    "max",
    "getSizeHint",
    "paneWidth",
    "getPane",
    "getInnerSize",
    "getColumnConfig",
    "setItemSize",
    "openNode",
    "node",
    "__openNode",
    "buildLookupTable",
    "openNodeWithoutScrolling",
    "autoscroll",
    "getAutoScrollIntoView",
    "setAutoScrollIntoView",
    "refresh",
    "openNodeAndParents",
    "__openNodeAndAllParents",
    "getModel",
    "closeNode",
    "includes",
    "lang",
    "Array",
    "remove",
    "fireDataEvent",
    "closeNodeWithoutScrolling",
    "isNodeOpen",
    "_openCloseController",
    "dispose",
    "OpenCloseController",
    "getOpenProperty",
    "_initLayer",
    "_this",
    "provider",
    "WidgetProvider",
    "createLayer",
    "_onUpdated",
    "addLayer",
    "addListenerOnce",
    "e",
    "getData",
    "getLookupTable",
    "_reverseLookup",
    "index",
    "_getDataFromRow",
    "getItem",
    "_getSelectables",
    "getOpenNodes",
    "isNode",
    "item",
    "Util",
    "getChildProperty",
    "getLevel",
    "hasChildren",
    "isShowLeafs",
    "_getContentPaddingTarget",
    "_applyRowHeight",
    "value",
    "old",
    "getRowConfig",
    "setDefaultItemSize",
    "_applyOpenMode",
    "pane",
    "_onOpen",
    "removeListener",
    "_applyHideRoot",
    "_applyShowTopLevelOpenCloseIcons",
    "removeAll",
    "_applyShowLeafs",
    "_applyChildProperty",
    "_applyLabelPath",
    "_applyIconPath",
    "setIconPath",
    "_applyLabelOptions",
    "setLabelOptions",
    "_applyIconOptions",
    "setIconOptions",
    "_applyModel",
    "_onChangeBubble",
    "__applyModelChanges",
    "_applyDelegate",
    "setDelegate",
    "propertyName",
    "name",
    "lastIndexOf",
    "substr",
    "startsWith",
    "isSubClassOf",
    "propertyChain",
    "SingleValueBinding",
    "resolvePropertyChain",
    "indexOf",
    "util",
    "DeferredCall",
    "queue",
    "Widget",
    "add",
    "schedule",
    "getRow",
    "getSelection",
    "getLength",
    "getKeyIdentifier",
    "parent",
    "getParent",
    "splice",
    "children",
    "get",
    "_beforeApplySelection",
    "newSelection",
    "getSelectionMode",
    "visibleParent",
    "__getVisibleParent",
    "push",
    "_afterApplySelection",
    "__buildParentChain",
    "__P_462_8",
    "_applyDefaultSelection",
    "getLabelPath",
    "Error",
    "lookupTable",
    "nestedLevel",
    "root",
    "isHideRoot",
    "visibleChildren",
    "__getVisibleChildrenFrom",
    "concat",
    "equals",
    "toArray",
    "removeBindings",
    "append",
    "__updateRowCount",
    "_updateSelection",
    "__P_462_11",
    "visible",
    "copy",
    "getDelegate",
    "filter",
    "Delegate",
    "getMethod",
    "sorter",
    "sort",
    "i",
    "child",
    "__P_462_6",
    "__P_462_7",
    "startNode",
    "targetNode",
    "result",
    "__P_462_12",
    "setItemCount",
    "fullUpdate",
    "level",
    "levelBefore",
    "__P_462_10",
    "unshift",
    "__P_462_9",
    "pop",
    "contains",
    "destruct",
    "hasListener",
    "ObjectRegistry",
    "inShutDown",
    "cancel",
    "destroy",
    "VirtualTree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/VirtualTree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Hagendorn (chris_schmidt)\r\n\r\n************************************************************************ */\r\n\r\n/*\r\n * Virtual tree implementation.\r\n *\r\n * The virtual tree can be used to render node and leafs. Nodes and leafs are\r\n * both items for a tree. The difference between a node and a leaf is that a\r\n * node has child items, but a leaf not.\r\n *\r\n * With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\r\n * to configure the tree's behavior (item renderer configuration, etc.).\r\n *\r\n * Here's an example of how to use the widget, including using a model\r\n * property to open/close branches. See the two timers at the end. The first\r\n * one opens all branches after two seconds; the second cleans up the tree\r\n * after five seconds.\r\n *\r\n * <pre class=\"javascript\">\r\n *   var nodes =\r\n *   [\r\n *     {\r\n *       name : \"Root\",\r\n *       open : false,\r\n *       children :\r\n *       [\r\n *         {\r\n *           name : \"Branch 1\",\r\n *           open : false,\r\n *           children :\r\n *           [\r\n *             {\r\n *               name : \"Leaf 1.1\"\r\n *             },\r\n *             {\r\n *               name : \"Leaf 1.2\"\r\n *             },\r\n *             {\r\n *               name : \"Branch 1.3\",\r\n *               open : false,\r\n *               children :\r\n *               [\r\n *                 {\r\n *                   name : \"Branch 1.3.1\",\r\n *                   open : false,\r\n *                   children :\r\n *                   [\r\n *                     {\r\n *                       name : \"Leaf 1.3.1.1\"\r\n *                     }\r\n *                   ]\r\n *                 }\r\n *               ]\r\n *             }\r\n *           ]\r\n *         }\r\n *       ]\r\n *     }\r\n *   ];\r\n *\r\n *   // convert the raw nodes to qooxdoo objects\r\n *   nodes = qx.data.marshal.Json.createModel(nodes, true);\r\n *\r\n *   // create the tree and synchronize the model property 'open'\r\n *   // to nodes being open\r\n *   var tree =\r\n *     new qx.ui.tree.VirtualTree(\r\n *       nodes.getItem(0), \"name\", \"children\", \"open\").set({\r\n *         width : 200,\r\n *         height : 400\r\n *       });\r\n *\r\n *   //log selection changes\r\n *   tree.getSelection().addListener(\"change\", function(e) {\r\n *     this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\r\n *   }, this);\r\n *\r\n *   tree.set(\r\n *     {\r\n *       width : 200,\r\n *       height : 400,\r\n *       showTopLevelOpenCloseIcons : true\r\n *     });\r\n *\r\n *   var doc = this.getRoot();\r\n *   doc.add(tree,\r\n *   {\r\n *     left : 100,\r\n *     top  : 50\r\n *   });\r\n *\r\n *   // After two seconds, open up all branches by setting their open\r\n *   // property to true.\r\n *   qx.event.Timer.once(\r\n *     function()\r\n *     {\r\n *       ;(function allOpen(root)\r\n *         {\r\n *           if (root.setOpen)     root.setOpen(true);\r\n *           if (root.getChildren) root.getChildren().forEach(allOpen);\r\n *         })(nodes.getItem(0));\r\n *     },\r\n *     this,\r\n *     2000);\r\n *\r\n *   // After five seconds, remove and dispose the tree.\r\n *   qx.event.Timer.once(\r\n *     function()\r\n *     {\r\n *       doc.remove(tree);\r\n *       tree.dispose();\r\n *       console.warn(\"All cleaned up.\");\r\n *     },\r\n *     this,\r\n *     5000);\r\n * </pre>\r\n */\r\nqx.Class.define(\"qx.ui.tree.VirtualTree\", {\r\n  extend: qx.ui.virtual.core.Scroller,\r\n  implement: [qx.ui.tree.core.IVirtualTree, qx.data.controller.ISelection],\r\n  include: [qx.ui.virtual.selection.MModel, qx.ui.core.MContentPadding],\r\n\r\n  /**\r\n   * @param rootModel {qx.core.Object?null} The model structure representing\r\n   *   the root of the tree, for more details have a look at the 'model'\r\n   *   property.\r\n   * @param labelPath {String?null} The name of the label property, for more\r\n   *   details have a look at the 'labelPath' property.\r\n   * @param childProperty {String?null} The name of the child property, for\r\n   *   more details have a look at the 'childProperty' property.\r\n   * @param openProperty {String|null} the name of the model property which\r\n   *   represents the open state of a branch. If this value is provided, so,\r\n   *   too, must be rootModel.\r\n   */\r\n  construct(rootModel, labelPath, childProperty, openProperty) {\r\n    super(0, 1, 20, 100);\r\n\r\n    this._init();\r\n\r\n    if (labelPath != null) {\r\n      this.setLabelPath(labelPath);\r\n    }\r\n\r\n    if (childProperty != null) {\r\n      this.setChildProperty(childProperty);\r\n    }\r\n\r\n    if (rootModel != null) {\r\n      this.initModel(rootModel);\r\n    }\r\n\r\n    this.initItemHeight();\r\n    this.initOpenMode();\r\n\r\n    this.addListener(\"keypress\", this._onKeyPress, this);\r\n\r\n    // If an open property and root model are provided, start up the open-close controller.\r\n    if (openProperty && rootModel) {\r\n      this.openViaModelChanges(openProperty);\r\n    }\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Fired when a node is opened.\r\n     */\r\n    open: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired when a node is closed.\r\n     */\r\n    close: \"qx.event.type.Data\"\r\n  },\r\n\r\n  properties: {\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"virtual-tree\"\r\n    },\r\n\r\n    // overridden\r\n    focusable: {\r\n      refine: true,\r\n      init: true\r\n    },\r\n\r\n    // overridden\r\n    width: {\r\n      refine: true,\r\n      init: 100\r\n    },\r\n\r\n    // overridden\r\n    height: {\r\n      refine: true,\r\n      init: 200\r\n    },\r\n\r\n    /** Default item height. */\r\n    itemHeight: {\r\n      check: \"Integer\",\r\n      init: 25,\r\n      apply: \"_applyRowHeight\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * Control whether tap or double tap should open or close the tapped\r\n     * item.\r\n     */\r\n    openMode: {\r\n      check: [\"tap\", \"dbltap\", \"none\"],\r\n      init: \"dbltap\",\r\n      apply: \"_applyOpenMode\",\r\n      event: \"changeOpenMode\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * Hides *only* the root node, not the node's children when the property is\r\n     * set to <code>true</code>.\r\n     */\r\n    hideRoot: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyHideRoot\"\r\n    },\r\n\r\n    /**\r\n     * Whether top level items should have an open/close button. The top level\r\n     * item item is normally the root item, but when the root is hidden, the\r\n     * root children are the top level items.\r\n     */\r\n    showTopLevelOpenCloseIcons: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyShowTopLevelOpenCloseIcons\"\r\n    },\r\n\r\n    /**\r\n     * Configures the tree to show also the leafs. When the property is set to\r\n     * <code>false</code> *only* the nodes are shown.\r\n     */\r\n    showLeafs: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyShowLeafs\"\r\n    },\r\n\r\n    /**\r\n     * The name of the property, where the children are stored in the model.\r\n     * Instead of the {@link #labelPath} must the child property a direct\r\n     * property form the model instance.\r\n     */\r\n    childProperty: {\r\n      check: \"String\",\r\n      apply: \"_applyChildProperty\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The name of the property, where the value for the tree folders label\r\n     * is stored in the model classes.\r\n     */\r\n    labelPath: {\r\n      check: \"String\",\r\n      apply: \"_applyLabelPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The path to the property which holds the information that should be\r\n     * shown as an icon.\r\n     */\r\n    iconPath: {\r\n      check: \"String\",\r\n      apply: \"_applyIconPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the label binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    labelOptions: {\r\n      apply: \"_applyLabelOptions\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the icon binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    iconOptions: {\r\n      apply: \"_applyIconOptions\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The model containing the data (nodes and/or leafs) which should be shown\r\n     * in the tree.\r\n     */\r\n    model: {\r\n      check: \"qx.core.Object\",\r\n      apply: \"_applyModel\",\r\n      event: \"changeModel\",\r\n      nullable: true,\r\n      deferredInit: true\r\n    },\r\n\r\n    /**\r\n     * Delegation object, which can have one or more functions defined by the\r\n     * {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.\r\n     */\r\n    delegate: {\r\n      event: \"changeDelegate\",\r\n      apply: \"_applyDelegate\",\r\n      init: null,\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  members: {\r\n    /** @type {qx.ui.tree.provider.WidgetProvider} Provider for widget rendering. */\r\n    _provider: null,\r\n\r\n    /** @type {qx.ui.virtual.layer.Abstract} Layer which contains the items. */\r\n    _layer: null,\r\n\r\n    /**\r\n     * @type {qx.data.Array} The internal lookup table data structure to get the model item\r\n     * from a row.\r\n     */\r\n    __lookupTable: null,\r\n\r\n    /** @type {Array} HashMap which contains all open nodes. */\r\n    __openNodes: null,\r\n\r\n    /**\r\n     * @type {Array} The internal data structure to get the nesting level from a\r\n     * row.\r\n     */\r\n    __nestingLevel: null,\r\n\r\n    /**\r\n     * @type {qx.util.DeferredCall} Adds this instance to the widget queue on a\r\n     * deferred call.\r\n     */\r\n    __deferredCall: null,\r\n\r\n    /** @type {Integer} Holds the max item width from a rendered widget. */\r\n    _itemWidth: 0,\r\n\r\n    /** @type {Array} internal parent chain form the last selected node */\r\n    __parentChain: null,\r\n\r\n    /**\r\n     * @type {String|null} the name of the model property which represents the\r\n     *   open state of a branch.\r\n     */\r\n    __openProperty: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PUBLIC API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // overridden\r\n    syncWidget(jobs) {\r\n      var firstRow = this._layer.getFirstRow();\r\n      var rowSize = this._layer.getRowSizes().length;\r\n\r\n      for (var row = firstRow; row < firstRow + rowSize; row++) {\r\n        var widget = this._layer.getRenderedCellWidget(row, 0);\r\n        if (widget != null) {\r\n          this._itemWidth = Math.max(\r\n            this._itemWidth,\r\n            widget.getSizeHint().width\r\n          );\r\n        }\r\n      }\r\n      var paneWidth = this.getPane().getInnerSize().width;\r\n      this.getPane()\r\n        .getColumnConfig()\r\n        .setItemSize(0, Math.max(this._itemWidth, paneWidth));\r\n    },\r\n\r\n    // Interface implementation\r\n    openNode(node) {\r\n      this.__openNode(node);\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    // Interface implementation\r\n    openNodeWithoutScrolling(node) {\r\n      var autoscroll = this.getAutoScrollIntoView();\r\n      // suspend automatically scrolling selection into view\r\n      this.setAutoScrollIntoView(false);\r\n\r\n      this.openNode(node);\r\n\r\n      // re set to original value\r\n      this.setAutoScrollIntoView(autoscroll);\r\n    },\r\n\r\n    /**\r\n     * Trigger a rebuild from the internal data structure.\r\n     */\r\n    refresh() {\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    /**\r\n     * Opens the passed node and all his parents. *Note!* The algorithm\r\n     * implements a depth-first search with a complexity: <code>O(n)</code> and\r\n     * <code>n</code> are all model items.\r\n     *\r\n     * @param node {qx.core.Object} Node to open.\r\n     */\r\n    openNodeAndParents(node) {\r\n      this.__openNodeAndAllParents(this.getModel(), node);\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    // Interface implementation\r\n    closeNode(node) {\r\n      if (this.__openNodes.includes(node)) {\r\n        qx.lang.Array.remove(this.__openNodes, node);\r\n        this.fireDataEvent(\"close\", node);\r\n        this.buildLookupTable();\r\n      }\r\n    },\r\n\r\n    // Interface implementation\r\n    closeNodeWithoutScrolling(node) {\r\n      var autoscroll = this.getAutoScrollIntoView();\r\n      // suspend automatically scrolling selection into view\r\n      this.setAutoScrollIntoView(false);\r\n\r\n      this.closeNode(node);\r\n\r\n      // re set to original value\r\n      this.setAutoScrollIntoView(autoscroll);\r\n    },\r\n\r\n    // Interface implementation\r\n    isNodeOpen(node) {\r\n      return this.__openNodes.includes(node);\r\n    },\r\n\r\n    /**\r\n     * Open and close branches via changes to a property in the model.\r\n     *\r\n     * @param openProperty {String|null}\r\n     *   The name of the open property, which determines the open state of a\r\n     *   branch in the tree. If null, turn off opening and closing branches\r\n     *   via changes to the model.\r\n     */\r\n    openViaModelChanges(openProperty) {\r\n      // Save the open property\r\n      this.__openProperty = openProperty;\r\n\r\n      // if no name is provided, just remove any prior open-close controller\r\n      if (!openProperty) {\r\n        if (this._openCloseController) {\r\n          this._openCloseController.dispose();\r\n          this._openCloseController = null;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // we have a property name, so create controller\r\n      this._openCloseController = new qx.ui.tree.core.OpenCloseController(\r\n        this,\r\n        this.getModel(),\r\n        openProperty\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Getter for the open property\r\n     */\r\n    getOpenProperty() {\r\n      return this.__openProperty;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      INTERNAL API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Initializes the virtual tree.\r\n     */\r\n    _init() {\r\n      this.__lookupTable = new qx.data.Array();\r\n      this.__openNodes = [];\r\n      this.__nestingLevel = [];\r\n      this._initLayer();\r\n    },\r\n\r\n    /**\r\n     * Initializes the virtual tree layer.\r\n     */\r\n    _initLayer() {\r\n      this._provider = new qx.ui.tree.provider.WidgetProvider(this);\r\n      this._layer = this._provider.createLayer();\r\n      this._layer.addListener(\"updated\", this._onUpdated, this);\r\n      this.getPane().addLayer(this._layer);\r\n      this.getPane().addListenerOnce(\"resize\", e => {\r\n        // apply width to pane on first rendering pass\r\n        // to avoid visible flickering\r\n        this.getPane().getColumnConfig().setItemSize(0, e.getData().width);\r\n      });\r\n    },\r\n\r\n    // Interface implementation\r\n    getLookupTable() {\r\n      return this.__lookupTable;\r\n    },\r\n\r\n    /**\r\n     * Performs a lookup from model index to row.\r\n     *\r\n     * @param index {Number} The index to look at.\r\n     * @return {Number} The row or <code>-1</code>\r\n     *  if the index is not a model index.\r\n     */\r\n    _reverseLookup(index) {\r\n      return index;\r\n    },\r\n\r\n    /**\r\n     * Returns the model data for the given row.\r\n     *\r\n     * @param row {Integer} row to get data for.\r\n     * @return {var|null} the row's model data.\r\n     */\r\n    _getDataFromRow(row) {\r\n      return this.__lookupTable.getItem(row);\r\n    },\r\n\r\n    /**\r\n     * Returns the selectable model items.\r\n     *\r\n     * @return {qx.data.Array} The selectable items.\r\n     */\r\n    _getSelectables() {\r\n      return this.__lookupTable;\r\n    },\r\n\r\n    /**\r\n     * Returns all open nodes.\r\n     *\r\n     * @internal\r\n     * @return {Array} All open nodes.\r\n     */\r\n    getOpenNodes() {\r\n      return this.__openNodes;\r\n    },\r\n\r\n    // Interface implementation\r\n    isNode(item) {\r\n      return qx.ui.tree.core.Util.isNode(item, this.getChildProperty());\r\n    },\r\n\r\n    // Interface implementation\r\n    getLevel(row) {\r\n      return this.__nestingLevel[row];\r\n    },\r\n\r\n    // Interface implementation\r\n    hasChildren(node) {\r\n      return qx.ui.tree.core.Util.hasChildren(\r\n        node,\r\n        this.getChildProperty(),\r\n        !this.isShowLeafs()\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Returns the element, to which the content padding should be applied.\r\n     *\r\n     * @return {qx.ui.core.Widget} The content padding target.\r\n     */\r\n    _getContentPaddingTarget() {\r\n      return this.getPane();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PROPERTY APPLY METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // property apply\r\n    _applyRowHeight(value, old) {\r\n      this.getPane().getRowConfig().setDefaultItemSize(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyOpenMode(value, old) {\r\n      var pane = this.getPane();\r\n\r\n      //\"tap\", \"dbltap\", \"none\"\r\n      if (value === \"dbltap\") {\r\n        pane.addListener(\"cellDbltap\", this._onOpen, this);\r\n      } else if (value === \"tap\") {\r\n        pane.addListener(\"cellTap\", this._onOpen, this);\r\n      }\r\n\r\n      if (old === \"dbltap\") {\r\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\r\n      } else if (old === \"tap\") {\r\n        pane.removeListener(\"cellTap\", this._onOpen, this);\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyHideRoot(value, old) {\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    // property apply\r\n    _applyShowTopLevelOpenCloseIcons(value, old) {\r\n      // force rebuild of the lookup table\r\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\r\n      this.getLookupTable().removeAll();\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    // property apply\r\n    _applyShowLeafs(value, old) {\r\n      // force rebuild of the lookup table\r\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\r\n      this.getLookupTable().removeAll();\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    // property apply\r\n    _applyChildProperty(value, old) {\r\n      this._provider.setChildProperty(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyLabelPath(value, old) {\r\n      this._provider.setLabelPath(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyIconPath(value, old) {\r\n      this._provider.setIconPath(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyLabelOptions(value, old) {\r\n      this._provider.setLabelOptions(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyIconOptions(value, old) {\r\n      this._provider.setIconOptions(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyModel(value, old) {\r\n      this.__openNodes = [];\r\n\r\n      if (value != null) {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          if (\r\n            !qx.Class.hasMixin(\r\n              value.constructor,\r\n              qx.data.marshal.MEventBubbling\r\n            )\r\n          ) {\r\n            this.warn(\r\n              \"The model item doesn't support the Mixin 'qx.data.\" +\r\n                \"marshal.MEventBubbling'. Therefore the tree can not update \" +\r\n                \"the view automatically on model changes.\"\r\n            );\r\n          }\r\n        }\r\n        value.addListener(\"changeBubble\", this._onChangeBubble, this);\r\n        this.__openNode(value);\r\n      }\r\n\r\n      // If the model changes, an existing OpenCloseController is no longer\r\n      // valid, so dispose it. The user should call openViaModelChanges again.\r\n      if (this._openCloseController) {\r\n        this._openCloseController.dispose();\r\n        this._openCloseController = null;\r\n      }\r\n\r\n      if (old != null) {\r\n        old.removeListener(\"changeBubble\", this._onChangeBubble, this);\r\n      }\r\n\r\n      this.__applyModelChanges();\r\n    },\r\n\r\n    // property apply\r\n    _applyDelegate(value, old) {\r\n      this._provider.setDelegate(value);\r\n      this.buildLookupTable();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      EVENT HANDLERS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Event handler for the changeBubble event. The handler rebuild the lookup\r\n     * table when the child structure changed.\r\n     *\r\n     * @param event {qx.event.type.Data} The data event.\r\n     */\r\n    _onChangeBubble(event) {\r\n      var data = event.getData();\r\n      var propertyName = data.name;\r\n      var index = propertyName.lastIndexOf(\".\");\r\n\r\n      if (index != -1) {\r\n        propertyName = propertyName.substr(index + 1, propertyName.length);\r\n      }\r\n\r\n      // only continue when the effected property is the child property\r\n      if (propertyName.startsWith(this.getChildProperty())) {\r\n        var item = data.item;\r\n\r\n        if (qx.Class.isSubClassOf(item.constructor, qx.data.Array)) {\r\n          if (index === -1) {\r\n            item = this.getModel();\r\n          } else {\r\n            var propertyChain = data.name.substr(0, index);\r\n            item = qx.data.SingleValueBinding.resolvePropertyChain(\r\n              this.getModel(),\r\n              propertyChain\r\n            );\r\n          }\r\n        }\r\n\r\n        if (this.__lookupTable.indexOf(item) != -1) {\r\n          this.__applyModelChanges();\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler for the update event.\r\n     *\r\n     * @param event {qx.event.type.Event} The event.\r\n     */\r\n    _onUpdated(event) {\r\n      if (this.__deferredCall == null) {\r\n        this.__deferredCall = new qx.util.DeferredCall(function () {\r\n          qx.ui.core.queue.Widget.add(this);\r\n        }, this);\r\n      }\r\n      this.__deferredCall.schedule();\r\n    },\r\n\r\n    /**\r\n     * Event handler to open/close tapped nodes.\r\n     *\r\n     * @param event {qx.ui.virtual.core.CellEvent} The cell tap event.\r\n     */\r\n    _onOpen(event) {\r\n      var row = event.getRow();\r\n      var item = this.__lookupTable.getItem(row);\r\n\r\n      if (this.isNode(item)) {\r\n        if (this.isNodeOpen(item)) {\r\n          this.closeNode(item);\r\n        } else {\r\n          this.openNode(item);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler for key press events. Open and close the current selected\r\n     * item on key left and right press. Jump to parent on key left if already\r\n     * closed.\r\n     *\r\n     * @param e {qx.event.type.KeySequence} key event.\r\n     */\r\n    _onKeyPress(e) {\r\n      var selection = this.getSelection();\r\n\r\n      if (selection.getLength() > 0) {\r\n        var item = selection.getItem(0);\r\n        var isNode = this.isNode(item);\r\n\r\n        switch (e.getKeyIdentifier()) {\r\n          case \"Left\":\r\n            if (isNode && this.isNodeOpen(item)) {\r\n              this.closeNode(item);\r\n            } else {\r\n              var parent = this.getParent(item);\r\n              if (parent != null) {\r\n                selection.splice(0, 1, parent);\r\n              }\r\n            }\r\n            break;\r\n\r\n          case \"Right\":\r\n            if (isNode && !this.isNodeOpen(item)) {\r\n              this.openNode(item);\r\n            } else {\r\n              if (isNode) {\r\n                var children = item.get(this.getChildProperty());\r\n                if (children != null && children.getLength() > 0) {\r\n                  selection.splice(0, 1, children.getItem(0));\r\n                }\r\n              }\r\n            }\r\n            break;\r\n\r\n          case \"Enter\":\r\n          case \"Space\":\r\n            if (!isNode) {\r\n              return;\r\n            }\r\n            if (this.isNodeOpen(item)) {\r\n              this.closeNode(item);\r\n            } else {\r\n              this.openNode(item);\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      SELECTION HOOK METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\r\n     * The hook method sets the first visible parent not as new selection when\r\n     * the current selection is empty and the selection mode is one selection.\r\n     *\r\n     * @param newSelection {Array} The newSelection which will be set to the selection manager.\r\n     */\r\n    _beforeApplySelection(newSelection) {\r\n      if (newSelection.length === 0 && this.getSelectionMode() === \"one\") {\r\n        var visibleParent = this.__getVisibleParent();\r\n        var row = this.getLookupTable().indexOf(visibleParent);\r\n\r\n        if (row >= 0) {\r\n          newSelection.push(row);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\r\n     * The hook method builds the parent chain form the current selected item.\r\n     */\r\n    _afterApplySelection() {\r\n      var selection = this.getSelection();\r\n\r\n      if (selection.getLength() > 0 && this.getSelectionMode() === \"one\") {\r\n        this.__buildParentChain(selection.getItem(0));\r\n      } else {\r\n        this.__parentChain = [];\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      HELPER METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Helper method to apply model changes. Normally build the lookup table and\r\n     * apply the default selection.\r\n     */\r\n    __applyModelChanges() {\r\n      this.buildLookupTable();\r\n      this._applyDefaultSelection();\r\n    },\r\n\r\n    /**\r\n     * Helper method to build the internal data structure.\r\n     *\r\n     * @internal\r\n     */\r\n    buildLookupTable() {\r\n      if (\r\n        this.getModel() != null &&\r\n        (this.getChildProperty() == null || this.getLabelPath() == null)\r\n      ) {\r\n        throw new Error(\r\n          \"Could not build tree, because 'childProperty' and/\" +\r\n            \"or 'labelPath' is 'null'!\"\r\n        );\r\n      }\r\n\r\n      this._itemWidth = 0;\r\n      var lookupTable = [];\r\n      this.__nestingLevel = [];\r\n      var nestedLevel = -1;\r\n\r\n      var root = this.getModel();\r\n      if (root != null) {\r\n        if (!this.isHideRoot()) {\r\n          nestedLevel++;\r\n          lookupTable.push(root);\r\n          this.__nestingLevel.push(nestedLevel);\r\n        }\r\n\r\n        if (this.isNodeOpen(root)) {\r\n          var visibleChildren = this.__getVisibleChildrenFrom(\r\n            root,\r\n            nestedLevel\r\n          );\r\n\r\n          lookupTable = lookupTable.concat(visibleChildren);\r\n        }\r\n      }\r\n\r\n      if (!qx.lang.Array.equals(this.__lookupTable.toArray(), lookupTable)) {\r\n        this._provider.removeBindings();\r\n        this.__lookupTable.removeAll();\r\n        this.__lookupTable.append(lookupTable);\r\n        this.__updateRowCount();\r\n        this._updateSelection();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method to get all visible children form the passed parent node.\r\n     * The algorithm implements a depth-first search with a complexity:\r\n     * <code>O(n)</code> and <code>n</code> are all visible items.\r\n     *\r\n     * @param node {qx.core.Object} The start node to start search.\r\n     * @param nestedLevel {Integer} The nested level from the start node.\r\n     * @return {Array} All visible children form the parent.\r\n     */\r\n    __getVisibleChildrenFrom(node, nestedLevel) {\r\n      var visible = [];\r\n      nestedLevel++;\r\n\r\n      if (!this.isNode(node)) {\r\n        return visible;\r\n      }\r\n\r\n      var children = node.get(this.getChildProperty());\r\n      if (children == null) {\r\n        return visible;\r\n      }\r\n\r\n      // clone children to keep original model unmodified\r\n      children = children.copy();\r\n\r\n      var delegate = this.getDelegate();\r\n      var filter = qx.util.Delegate.getMethod(delegate, \"filter\");\r\n      var sorter = qx.util.Delegate.getMethod(delegate, \"sorter\");\r\n\r\n      if (sorter != null) {\r\n        children.sort(sorter);\r\n      }\r\n\r\n      for (var i = 0; i < children.getLength(); i++) {\r\n        var child = children.getItem(i);\r\n\r\n        if (filter && !filter(child)) {\r\n          continue;\r\n        }\r\n\r\n        if (this.isNode(child)) {\r\n          this.__nestingLevel.push(nestedLevel);\r\n          visible.push(child);\r\n\r\n          if (this.isNodeOpen(child)) {\r\n            var visibleChildren = this.__getVisibleChildrenFrom(\r\n              child,\r\n              nestedLevel\r\n            );\r\n\r\n            visible = visible.concat(visibleChildren);\r\n          }\r\n        } else {\r\n          if (this.isShowLeafs()) {\r\n            this.__nestingLevel.push(nestedLevel);\r\n            visible.push(child);\r\n          }\r\n        }\r\n      }\r\n\r\n      // dispose children clone\r\n      children.dispose();\r\n\r\n      return visible;\r\n    },\r\n\r\n    /**\r\n     * Helper method to set the node to the open nodes data structure when it\r\n     * is not included.\r\n     *\r\n     * @param node {qx.core.Object} Node to set to open nodes.\r\n     */\r\n    __openNode(node) {\r\n      if (!this.__openNodes.includes(node)) {\r\n        this.__openNodes.push(node);\r\n        this.fireDataEvent(\"open\", node);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method to set the target node and all his parents to the open\r\n     * nodes data structure. The algorithm implements a depth-first search with\r\n     * a complexity: <code>O(n)</code> and <code>n</code> are all model items.\r\n     *\r\n     * @param startNode {qx.core.Object} Start (root) node to search.\r\n     * @param targetNode {qx.core.Object} Target node to open (and his parents).\r\n     * @return {Boolean} <code>True</code> when the targetNode and his\r\n     *  parents could opened, <code>false</code> otherwise.\r\n     */\r\n    __openNodeAndAllParents(startNode, targetNode) {\r\n      if (startNode === targetNode) {\r\n        this.__openNode(targetNode);\r\n        return true;\r\n      }\r\n\r\n      if (!this.isNode(startNode)) {\r\n        return false;\r\n      }\r\n\r\n      var children = startNode.get(this.getChildProperty());\r\n      if (children == null) {\r\n        return false;\r\n      }\r\n\r\n      for (var i = 0; i < children.getLength(); i++) {\r\n        var child = children.getItem(i);\r\n        var result = this.__openNodeAndAllParents(child, targetNode);\r\n\r\n        if (result === true) {\r\n          this.__openNode(child);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Helper method to update the row count.\r\n     */\r\n    __updateRowCount() {\r\n      this.getPane()\r\n        .getRowConfig()\r\n        .setItemCount(this.__lookupTable.getLength());\r\n      this.getPane().fullUpdate();\r\n    },\r\n\r\n    /**\r\n     * Helper method to get the parent node. Node! This only works with leaf and\r\n     * nodes which are in the internal lookup table.\r\n     *\r\n     * @param item {qx.core.Object} Node or leaf to get parent.\r\n     * @return {qx.core.Object|null} The parent note or <code>null</code> when\r\n     *   no parent found.\r\n     *\r\n     * @internal\r\n     */\r\n    getParent(item) {\r\n      var index = this.__lookupTable.indexOf(item);\r\n      if (index < 0) {\r\n        return null;\r\n      }\r\n\r\n      var level = this.__nestingLevel[index];\r\n      while (index > 0) {\r\n        index--;\r\n        var levelBefore = this.__nestingLevel[index];\r\n        if (levelBefore < level) {\r\n          return this.__lookupTable.getItem(index);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Builds the parent chain form the passed item.\r\n     *\r\n     * @param item {var} Item to build parent chain.\r\n     */\r\n    __buildParentChain(item) {\r\n      this.__parentChain = [];\r\n      var parent = this.getParent(item);\r\n      while (parent != null) {\r\n        this.__parentChain.unshift(parent);\r\n        parent = this.getParent(parent);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return the first visible parent node from the last selected node.\r\n     *\r\n     * @return {var} The first visible node.\r\n     */\r\n    __getVisibleParent() {\r\n      if (this.__parentChain == null) {\r\n        return this.getModel();\r\n      }\r\n\r\n      var lookupTable = this.getLookupTable();\r\n      var parent = this.__parentChain.pop();\r\n\r\n      while (parent != null) {\r\n        if (lookupTable.contains(parent)) {\r\n          return parent;\r\n        }\r\n        parent = this.__parentChain.pop();\r\n      }\r\n      return this.getModel();\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    if (this._openCloseController) {\r\n      this._openCloseController.dispose();\r\n    }\r\n\r\n    var pane = this.getPane();\r\n    if (pane != null) {\r\n      if (pane.hasListener(\"cellDbltap\")) {\r\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\r\n      }\r\n      if (pane.hasListener(\"cellTap\")) {\r\n        pane.removeListener(\"cellTap\", this._onOpen, this);\r\n      }\r\n    }\r\n\r\n    if (!qx.core.ObjectRegistry.inShutDown && this.__deferredCall != null) {\r\n      this.__deferredCall.cancel();\r\n      this.__deferredCall.dispose();\r\n    }\r\n\r\n    var model = this.getModel();\r\n    if (model != null) {\r\n      model.removeListener(\"changeBubble\", this._onChangeBubble, this);\r\n    }\r\n\r\n    this._layer.removeListener(\"updated\", this._onUpdated, this);\r\n    this._layer.destroy();\r\n    this._provider.dispose();\r\n    this.__lookupTable.dispose();\r\n\r\n    this._layer =\r\n      this._provider =\r\n      this.__lookupTable =\r\n      this.__openNodes =\r\n      this.__deferredCall =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ;IACnCC,SAAS,EAAE,CAACX,EAAE,CAACO,EAAE,CAACK,IAAI,CAACH,IAAI,CAACI,YAAY,EAAEb,EAAE,CAACc,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC;IACxEC,OAAO,EAAE,CAACjB,EAAE,CAACO,EAAE,CAACC,OAAO,CAACU,SAAS,CAACC,MAAM,EAAEnB,EAAE,CAACO,EAAE,CAACE,IAAI,CAACW,eAAe,CAAC;IAErE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,SAAS,EAAEC,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"
}