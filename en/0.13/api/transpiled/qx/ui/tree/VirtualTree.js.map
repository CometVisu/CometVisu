{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "core",
    "Scroller",
    "implement",
    "tree",
    "IVirtualTree",
    "data",
    "controller",
    "ISelection",
    "include",
    "selection",
    "MModel",
    "MContentPadding",
    "construct",
    "rootModel",
    "labelPath",
    "childProperty",
    "openProperty",
    "_init",
    "setLabelPath",
    "setChildProperty",
    "initModel",
    "initItemHeight",
    "initOpenMode",
    "addListener",
    "_onKeyPress",
    "openViaModelChanges",
    "events",
    "open",
    "close",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "width",
    "height",
    "itemHeight",
    "check",
    "apply",
    "themeable",
    "openMode",
    "event",
    "hideRoot",
    "showTopLevelOpenCloseIcons",
    "showLeafs",
    "nullable",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "model",
    "deferredInit",
    "delegate",
    "members",
    "_provider",
    "_layer",
    "__lookupTable",
    "__openNodes",
    "__nestingLevel",
    "__deferredCall",
    "_itemWidth",
    "__parentChain",
    "__openProperty",
    "syncWidget",
    "jobs",
    "firstRow",
    "getFirstRow",
    "rowSize",
    "getRowSizes",
    "length",
    "row",
    "widget",
    "getRenderedCellWidget",
    "Math",
    "max",
    "getSizeHint",
    "paneWidth",
    "getPane",
    "getInnerSize",
    "getColumnConfig",
    "setItemSize",
    "openNode",
    "node",
    "__openNode",
    "buildLookupTable",
    "openNodeWithoutScrolling",
    "autoscroll",
    "getAutoScrollIntoView",
    "setAutoScrollIntoView",
    "refresh",
    "openNodeAndParents",
    "__openNodeAndAllParents",
    "getModel",
    "closeNode",
    "includes",
    "lang",
    "Array",
    "remove",
    "fireDataEvent",
    "closeNodeWithoutScrolling",
    "isNodeOpen",
    "_openCloseController",
    "dispose",
    "OpenCloseController",
    "getOpenProperty",
    "_initLayer",
    "provider",
    "WidgetProvider",
    "createLayer",
    "_onUpdated",
    "addLayer",
    "addListenerOnce",
    "e",
    "getData",
    "getLookupTable",
    "_reverseLookup",
    "index",
    "_getDataFromRow",
    "getItem",
    "_getSelectables",
    "getOpenNodes",
    "isNode",
    "item",
    "Util",
    "getChildProperty",
    "getLevel",
    "hasChildren",
    "isShowLeafs",
    "_getContentPaddingTarget",
    "_applyRowHeight",
    "value",
    "old",
    "getRowConfig",
    "setDefaultItemSize",
    "_applyOpenMode",
    "pane",
    "_onOpen",
    "removeListener",
    "_applyHideRoot",
    "_applyShowTopLevelOpenCloseIcons",
    "removeAll",
    "_applyShowLeafs",
    "_applyChildProperty",
    "_applyLabelPath",
    "_applyIconPath",
    "setIconPath",
    "_applyLabelOptions",
    "setLabelOptions",
    "_applyIconOptions",
    "setIconOptions",
    "_applyModel",
    "_onChangeBubble",
    "__applyModelChanges",
    "_applyDelegate",
    "setDelegate",
    "propertyName",
    "name",
    "lastIndexOf",
    "substr",
    "startsWith",
    "isSubClassOf",
    "constructor",
    "propertyChain",
    "SingleValueBinding",
    "resolvePropertyChain",
    "indexOf",
    "util",
    "DeferredCall",
    "queue",
    "Widget",
    "add",
    "schedule",
    "getRow",
    "getSelection",
    "getLength",
    "getKeyIdentifier",
    "parent",
    "getParent",
    "splice",
    "children",
    "get",
    "_beforeApplySelection",
    "newSelection",
    "getSelectionMode",
    "visibleParent",
    "__getVisibleParent",
    "push",
    "_afterApplySelection",
    "__buildParentChain",
    "_applyDefaultSelection",
    "getLabelPath",
    "Error",
    "lookupTable",
    "nestedLevel",
    "root",
    "isHideRoot",
    "visibleChildren",
    "__getVisibleChildrenFrom",
    "concat",
    "equals",
    "toArray",
    "removeBindings",
    "append",
    "__updateRowCount",
    "_updateSelection",
    "visible",
    "copy",
    "getDelegate",
    "filter",
    "Delegate",
    "getMethod",
    "sorter",
    "sort",
    "i",
    "child",
    "startNode",
    "targetNode",
    "result",
    "setItemCount",
    "fullUpdate",
    "level",
    "levelBefore",
    "unshift",
    "pop",
    "contains",
    "destruct",
    "hasListener",
    "ObjectRegistry",
    "inShutDown",
    "cancel",
    "destroy",
    "VirtualTree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/VirtualTree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/*\n * Virtual tree implementation.\n *\n * The virtual tree can be used to render node and leafs. Nodes and leafs are\n * both items for a tree. The difference between a node and a leaf is that a\n * node has child items, but a leaf not.\n *\n * With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\n * to configure the tree's behavior (item renderer configuration, etc.).\n *\n * Here's an example of how to use the widget, including using a model\n * property to open/close branches. See the two timers at the end. The first\n * one opens all branches after two seconds; the second cleans up the tree\n * after five seconds.\n *\n * <pre class=\"javascript\">\n *   var nodes =\n *   [\n *     {\n *       name : \"Root\",\n *       open : false,\n *       children :\n *       [\n *         {\n *           name : \"Branch 1\",\n *           open : false,\n *           children :\n *           [\n *             {\n *               name : \"Leaf 1.1\"\n *             },\n *             {\n *               name : \"Leaf 1.2\"\n *             },\n *             {\n *               name : \"Branch 1.3\",\n *               open : false,\n *               children :\n *               [\n *                 {\n *                   name : \"Branch 1.3.1\",\n *                   open : false,\n *                   children :\n *                   [\n *                     {\n *                       name : \"Leaf 1.3.1.1\"\n *                     }\n *                   ]\n *                 }\n *               ]\n *             }\n *           ]\n *         }\n *       ]\n *     }\n *   ];\n *\n *   // convert the raw nodes to qooxdoo objects\n *   nodes = qx.data.marshal.Json.createModel(nodes, true);\n *\n *   // create the tree and synchronize the model property 'open'\n *   // to nodes being open\n *   var tree =\n *     new qx.ui.tree.VirtualTree(\n *       nodes.getItem(0), \"name\", \"children\", \"open\").set({\n *         width : 200,\n *         height : 400\n *       });\n *\n *   //log selection changes\n *   tree.getSelection().addListener(\"change\", function(e) {\n *     this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\n *   }, this);\n *\n *   tree.set(\n *     {\n *       width : 200,\n *       height : 400,\n *       showTopLevelOpenCloseIcons : true\n *     });\n *\n *   var doc = this.getRoot();\n *   doc.add(tree,\n *   {\n *     left : 100,\n *     top  : 50\n *   });\n *\n *   // After two seconds, open up all branches by setting their open\n *   // property to true.\n *   qx.event.Timer.once(\n *     function()\n *     {\n *       ;(function allOpen(root)\n *         {\n *           if (root.setOpen)     root.setOpen(true);\n *           if (root.getChildren) root.getChildren().forEach(allOpen);\n *         })(nodes.getItem(0));\n *     },\n *     this,\n *     2000);\n *\n *   // After five seconds, remove and dispose the tree.\n *   qx.event.Timer.once(\n *     function()\n *     {\n *       doc.remove(tree);\n *       tree.dispose();\n *       console.warn(\"All cleaned up.\");\n *     },\n *     this,\n *     5000);\n * </pre>\n */\nqx.Class.define(\"qx.ui.tree.VirtualTree\", {\n  extend: qx.ui.virtual.core.Scroller,\n  implement: [qx.ui.tree.core.IVirtualTree, qx.data.controller.ISelection],\n  include: [qx.ui.virtual.selection.MModel, qx.ui.core.MContentPadding],\n\n  /**\n   * @param rootModel {qx.core.Object?null} The model structure representing\n   *   the root of the tree, for more details have a look at the 'model'\n   *   property.\n   * @param labelPath {String?null} The name of the label property, for more\n   *   details have a look at the 'labelPath' property.\n   * @param childProperty {String?null} The name of the child property, for\n   *   more details have a look at the 'childProperty' property.\n   * @param openProperty {String|null} the name of the model property which\n   *   represents the open state of a branch. If this value is provided, so,\n   *   too, must be rootModel.\n   */\n  construct(rootModel, labelPath, childProperty, openProperty) {\n    super(0, 1, 20, 100);\n\n    this._init();\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n\n    if (childProperty != null) {\n      this.setChildProperty(childProperty);\n    }\n\n    if (rootModel != null) {\n      this.initModel(rootModel);\n    }\n\n    this.initItemHeight();\n    this.initOpenMode();\n\n    this.addListener(\"keypress\", this._onKeyPress, this);\n\n    // If an open property and root model are provided, start up the open-close controller.\n    if (openProperty && rootModel) {\n      this.openViaModelChanges(openProperty);\n    }\n  },\n\n  events: {\n    /**\n     * Fired when a node is opened.\n     */\n    open: \"qx.event.type.Data\",\n\n    /**\n     * Fired when a node is closed.\n     */\n    close: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"virtual-tree\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    // overridden\n    width: {\n      refine: true,\n      init: 100\n    },\n\n    // overridden\n    height: {\n      refine: true,\n      init: 200\n    },\n\n    /** Default item height. */\n    itemHeight: {\n      check: \"Integer\",\n      init: 25,\n      apply: \"_applyRowHeight\",\n      themeable: true\n    },\n\n    /**\n     * Control whether tap or double tap should open or close the tapped\n     * item.\n     */\n    openMode: {\n      check: [\"tap\", \"dbltap\", \"none\"],\n      init: \"dbltap\",\n      apply: \"_applyOpenMode\",\n      event: \"changeOpenMode\",\n      themeable: true\n    },\n\n    /**\n     * Hides *only* the root node, not the node's children when the property is\n     * set to <code>true</code>.\n     */\n    hideRoot: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyHideRoot\"\n    },\n\n    /**\n     * Whether top level items should have an open/close button. The top level\n     * item item is normally the root item, but when the root is hidden, the\n     * root children are the top level items.\n     */\n    showTopLevelOpenCloseIcons: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyShowTopLevelOpenCloseIcons\"\n    },\n\n    /**\n     * Configures the tree to show also the leafs. When the property is set to\n     * <code>false</code> *only* the nodes are shown.\n     */\n    showLeafs: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowLeafs\"\n    },\n\n    /**\n     * The name of the property, where the children are stored in the model.\n     * Instead of the {@link #labelPath} must the child property a direct\n     * property form the model instance.\n     */\n    childProperty: {\n      check: \"String\",\n      apply: \"_applyChildProperty\",\n      nullable: true\n    },\n\n    /**\n     * The name of the property, where the value for the tree folders label\n     * is stored in the model classes.\n     */\n    labelPath: {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon.\n     */\n    iconPath: {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions: {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions: {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n    /**\n     * The model containing the data (nodes and/or leafs) which should be shown\n     * in the tree.\n     */\n    model: {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      deferredInit: true\n    },\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.\n     */\n    delegate: {\n      event: \"changeDelegate\",\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  members: {\n    /** @type {qx.ui.tree.provider.WidgetProvider} Provider for widget rendering. */\n    _provider: null,\n\n    /** @type {qx.ui.virtual.layer.Abstract} Layer which contains the items. */\n    _layer: null,\n\n    /**\n     * @type {qx.data.Array} The internal lookup table data structure to get the model item\n     * from a row.\n     */\n    __lookupTable: null,\n\n    /** @type {Array} HashMap which contains all open nodes. */\n    __openNodes: null,\n\n    /**\n     * @type {Array} The internal data structure to get the nesting level from a\n     * row.\n     */\n    __nestingLevel: null,\n\n    /**\n     * @type {qx.util.DeferredCall} Adds this instance to the widget queue on a\n     * deferred call.\n     */\n    __deferredCall: null,\n\n    /** @type {Integer} Holds the max item width from a rendered widget. */\n    _itemWidth: 0,\n\n    /** @type {Array} internal parent chain form the last selected node */\n    __parentChain: null,\n\n    /**\n     * @type {String|null} the name of the model property which represents the\n     *   open state of a branch.\n     */\n    __openProperty: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    syncWidget(jobs) {\n      var firstRow = this._layer.getFirstRow();\n      var rowSize = this._layer.getRowSizes().length;\n\n      for (var row = firstRow; row < firstRow + rowSize; row++) {\n        var widget = this._layer.getRenderedCellWidget(row, 0);\n        if (widget != null) {\n          this._itemWidth = Math.max(\n            this._itemWidth,\n            widget.getSizeHint().width\n          );\n        }\n      }\n      var paneWidth = this.getPane().getInnerSize().width;\n      this.getPane()\n        .getColumnConfig()\n        .setItemSize(0, Math.max(this._itemWidth, paneWidth));\n    },\n\n    // Interface implementation\n    openNode(node) {\n      this.__openNode(node);\n      this.buildLookupTable();\n    },\n\n    // Interface implementation\n    openNodeWithoutScrolling(node) {\n      var autoscroll = this.getAutoScrollIntoView();\n      // suspend automatically scrolling selection into view\n      this.setAutoScrollIntoView(false);\n\n      this.openNode(node);\n\n      // re set to original value\n      this.setAutoScrollIntoView(autoscroll);\n    },\n\n    /**\n     * Trigger a rebuild from the internal data structure.\n     */\n    refresh() {\n      this.buildLookupTable();\n    },\n\n    /**\n     * Opens the passed node and all his parents. *Note!* The algorithm\n     * implements a depth-first search with a complexity: <code>O(n)</code> and\n     * <code>n</code> are all model items.\n     *\n     * @param node {qx.core.Object} Node to open.\n     */\n    openNodeAndParents(node) {\n      this.__openNodeAndAllParents(this.getModel(), node);\n      this.buildLookupTable();\n    },\n\n    // Interface implementation\n    closeNode(node) {\n      if (this.__openNodes.includes(node)) {\n        qx.lang.Array.remove(this.__openNodes, node);\n        this.fireDataEvent(\"close\", node);\n        this.buildLookupTable();\n      }\n    },\n\n    // Interface implementation\n    closeNodeWithoutScrolling(node) {\n      var autoscroll = this.getAutoScrollIntoView();\n      // suspend automatically scrolling selection into view\n      this.setAutoScrollIntoView(false);\n\n      this.closeNode(node);\n\n      // re set to original value\n      this.setAutoScrollIntoView(autoscroll);\n    },\n\n    // Interface implementation\n    isNodeOpen(node) {\n      return this.__openNodes.includes(node);\n    },\n\n    /**\n     * Open and close branches via changes to a property in the model.\n     *\n     * @param openProperty {String|null}\n     *   The name of the open property, which determines the open state of a\n     *   branch in the tree. If null, turn off opening and closing branches\n     *   via changes to the model.\n     */\n    openViaModelChanges(openProperty) {\n      // Save the open property\n      this.__openProperty = openProperty;\n\n      // if no name is provided, just remove any prior open-close controller\n      if (!openProperty) {\n        if (this._openCloseController) {\n          this._openCloseController.dispose();\n          this._openCloseController = null;\n        }\n\n        return;\n      }\n\n      // we have a property name, so create controller\n      this._openCloseController = new qx.ui.tree.core.OpenCloseController(\n        this,\n        this.getModel(),\n        openProperty\n      );\n    },\n\n    /**\n     * Getter for the open property\n     */\n    getOpenProperty() {\n      return this.__openProperty;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the virtual tree.\n     */\n    _init() {\n      this.__lookupTable = new qx.data.Array();\n      this.__openNodes = [];\n      this.__nestingLevel = [];\n      this._initLayer();\n    },\n\n    /**\n     * Initializes the virtual tree layer.\n     */\n    _initLayer() {\n      this._provider = new qx.ui.tree.provider.WidgetProvider(this);\n      this._layer = this._provider.createLayer();\n      this._layer.addListener(\"updated\", this._onUpdated, this);\n      this.getPane().addLayer(this._layer);\n      this.getPane().addListenerOnce(\"resize\", e => {\n        // apply width to pane on first rendering pass\n        // to avoid visible flickering\n        this.getPane().getColumnConfig().setItemSize(0, e.getData().width);\n      });\n    },\n\n    // Interface implementation\n    getLookupTable() {\n      return this.__lookupTable;\n    },\n\n    /**\n     * Performs a lookup from model index to row.\n     *\n     * @param index {Number} The index to look at.\n     * @return {Number} The row or <code>-1</code>\n     *  if the index is not a model index.\n     */\n    _reverseLookup(index) {\n      return index;\n    },\n\n    /**\n     * Returns the model data for the given row.\n     *\n     * @param row {Integer} row to get data for.\n     * @return {var|null} the row's model data.\n     */\n    _getDataFromRow(row) {\n      return this.__lookupTable.getItem(row);\n    },\n\n    /**\n     * Returns the selectable model items.\n     *\n     * @return {qx.data.Array} The selectable items.\n     */\n    _getSelectables() {\n      return this.__lookupTable;\n    },\n\n    /**\n     * Returns all open nodes.\n     *\n     * @internal\n     * @return {Array} All open nodes.\n     */\n    getOpenNodes() {\n      return this.__openNodes;\n    },\n\n    // Interface implementation\n    isNode(item) {\n      return qx.ui.tree.core.Util.isNode(item, this.getChildProperty());\n    },\n\n    // Interface implementation\n    getLevel(row) {\n      return this.__nestingLevel[row];\n    },\n\n    // Interface implementation\n    hasChildren(node) {\n      return qx.ui.tree.core.Util.hasChildren(\n        node,\n        this.getChildProperty(),\n        !this.isShowLeafs()\n      );\n    },\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget() {\n      return this.getPane();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyRowHeight(value, old) {\n      this.getPane().getRowConfig().setDefaultItemSize(value);\n    },\n\n    // property apply\n    _applyOpenMode(value, old) {\n      var pane = this.getPane();\n\n      //\"tap\", \"dbltap\", \"none\"\n      if (value === \"dbltap\") {\n        pane.addListener(\"cellDbltap\", this._onOpen, this);\n      } else if (value === \"tap\") {\n        pane.addListener(\"cellTap\", this._onOpen, this);\n      }\n\n      if (old === \"dbltap\") {\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\n      } else if (old === \"tap\") {\n        pane.removeListener(\"cellTap\", this._onOpen, this);\n      }\n    },\n\n    // property apply\n    _applyHideRoot(value, old) {\n      this.buildLookupTable();\n    },\n\n    // property apply\n    _applyShowTopLevelOpenCloseIcons(value, old) {\n      // force rebuild of the lookup table\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\n      this.getLookupTable().removeAll();\n      this.buildLookupTable();\n    },\n\n    // property apply\n    _applyShowLeafs(value, old) {\n      // force rebuild of the lookup table\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\n      this.getLookupTable().removeAll();\n      this.buildLookupTable();\n    },\n\n    // property apply\n    _applyChildProperty(value, old) {\n      this._provider.setChildProperty(value);\n    },\n\n    // property apply\n    _applyLabelPath(value, old) {\n      this._provider.setLabelPath(value);\n    },\n\n    // property apply\n    _applyIconPath(value, old) {\n      this._provider.setIconPath(value);\n    },\n\n    // property apply\n    _applyLabelOptions(value, old) {\n      this._provider.setLabelOptions(value);\n    },\n\n    // property apply\n    _applyIconOptions(value, old) {\n      this._provider.setIconOptions(value);\n    },\n\n    // property apply\n    _applyModel(value, old) {\n      this.__openNodes = [];\n\n      if (value != null) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (\n            !qx.Class.hasMixin(\n              value.constructor,\n              qx.data.marshal.MEventBubbling\n            )\n          ) {\n            this.warn(\n              \"The model item doesn't support the Mixin 'qx.data.\" +\n                \"marshal.MEventBubbling'. Therefore the tree can not update \" +\n                \"the view automatically on model changes.\"\n            );\n          }\n        }\n        value.addListener(\"changeBubble\", this._onChangeBubble, this);\n        this.__openNode(value);\n      }\n\n      // If the model changes, an existing OpenCloseController is no longer\n      // valid, so dispose it. The user should call openViaModelChanges again.\n      if (this._openCloseController) {\n        this._openCloseController.dispose();\n        this._openCloseController = null;\n      }\n\n      if (old != null) {\n        old.removeListener(\"changeBubble\", this._onChangeBubble, this);\n      }\n\n      this.__applyModelChanges();\n    },\n\n    // property apply\n    _applyDelegate(value, old) {\n      this._provider.setDelegate(value);\n      this.buildLookupTable();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for the changeBubble event. The handler rebuild the lookup\n     * table when the child structure changed.\n     *\n     * @param event {qx.event.type.Data} The data event.\n     */\n    _onChangeBubble(event) {\n      var data = event.getData();\n      var propertyName = data.name;\n      var index = propertyName.lastIndexOf(\".\");\n\n      if (index != -1) {\n        propertyName = propertyName.substr(index + 1, propertyName.length);\n      }\n\n      // only continue when the effected property is the child property\n      if (propertyName.startsWith(this.getChildProperty())) {\n        var item = data.item;\n\n        if (qx.Class.isSubClassOf(item.constructor, qx.data.Array)) {\n          if (index === -1) {\n            item = this.getModel();\n          } else {\n            var propertyChain = data.name.substr(0, index);\n            item = qx.data.SingleValueBinding.resolvePropertyChain(\n              this.getModel(),\n              propertyChain\n            );\n          }\n        }\n\n        if (this.__lookupTable.indexOf(item) != -1) {\n          this.__applyModelChanges();\n        }\n      }\n    },\n\n    /**\n     * Event handler for the update event.\n     *\n     * @param event {qx.event.type.Event} The event.\n     */\n    _onUpdated(event) {\n      if (this.__deferredCall == null) {\n        this.__deferredCall = new qx.util.DeferredCall(function () {\n          qx.ui.core.queue.Widget.add(this);\n        }, this);\n      }\n      this.__deferredCall.schedule();\n    },\n\n    /**\n     * Event handler to open/close tapped nodes.\n     *\n     * @param event {qx.ui.virtual.core.CellEvent} The cell tap event.\n     */\n    _onOpen(event) {\n      var row = event.getRow();\n      var item = this.__lookupTable.getItem(row);\n\n      if (this.isNode(item)) {\n        if (this.isNodeOpen(item)) {\n          this.closeNode(item);\n        } else {\n          this.openNode(item);\n        }\n      }\n    },\n\n    /**\n     * Event handler for key press events. Open and close the current selected\n     * item on key left and right press. Jump to parent on key left if already\n     * closed.\n     *\n     * @param e {qx.event.type.KeySequence} key event.\n     */\n    _onKeyPress(e) {\n      var selection = this.getSelection();\n\n      if (selection.getLength() > 0) {\n        var item = selection.getItem(0);\n        var isNode = this.isNode(item);\n\n        switch (e.getKeyIdentifier()) {\n          case \"Left\":\n            if (isNode && this.isNodeOpen(item)) {\n              this.closeNode(item);\n            } else {\n              var parent = this.getParent(item);\n              if (parent != null) {\n                selection.splice(0, 1, parent);\n              }\n            }\n            break;\n\n          case \"Right\":\n            if (isNode && !this.isNodeOpen(item)) {\n              this.openNode(item);\n            } else {\n              if (isNode) {\n                var children = item.get(this.getChildProperty());\n                if (children != null && children.getLength() > 0) {\n                  selection.splice(0, 1, children.getItem(0));\n                }\n              }\n            }\n            break;\n\n          case \"Enter\":\n          case \"Space\":\n            if (!isNode) {\n              return;\n            }\n            if (this.isNodeOpen(item)) {\n              this.closeNode(item);\n            } else {\n              this.openNode(item);\n            }\n            break;\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION HOOK METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n     * The hook method sets the first visible parent not as new selection when\n     * the current selection is empty and the selection mode is one selection.\n     *\n     * @param newSelection {Array} The newSelection which will be set to the selection manager.\n     */\n    _beforeApplySelection(newSelection) {\n      if (newSelection.length === 0 && this.getSelectionMode() === \"one\") {\n        var visibleParent = this.__getVisibleParent();\n        var row = this.getLookupTable().indexOf(visibleParent);\n\n        if (row >= 0) {\n          newSelection.push(row);\n        }\n      }\n    },\n\n    /**\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n     * The hook method builds the parent chain form the current selected item.\n     */\n    _afterApplySelection() {\n      var selection = this.getSelection();\n\n      if (selection.getLength() > 0 && this.getSelectionMode() === \"one\") {\n        this.__buildParentChain(selection.getItem(0));\n      } else {\n        this.__parentChain = [];\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Helper method to apply model changes. Normally build the lookup table and\n     * apply the default selection.\n     */\n    __applyModelChanges() {\n      this.buildLookupTable();\n      this._applyDefaultSelection();\n    },\n\n    /**\n     * Helper method to build the internal data structure.\n     *\n     * @internal\n     */\n    buildLookupTable() {\n      if (\n        this.getModel() != null &&\n        (this.getChildProperty() == null || this.getLabelPath() == null)\n      ) {\n        throw new Error(\n          \"Could not build tree, because 'childProperty' and/\" +\n            \"or 'labelPath' is 'null'!\"\n        );\n      }\n\n      this._itemWidth = 0;\n      var lookupTable = [];\n      this.__nestingLevel = [];\n      var nestedLevel = -1;\n\n      var root = this.getModel();\n      if (root != null) {\n        if (!this.isHideRoot()) {\n          nestedLevel++;\n          lookupTable.push(root);\n          this.__nestingLevel.push(nestedLevel);\n        }\n\n        if (this.isNodeOpen(root)) {\n          var visibleChildren = this.__getVisibleChildrenFrom(\n            root,\n            nestedLevel\n          );\n\n          lookupTable = lookupTable.concat(visibleChildren);\n        }\n      }\n\n      if (!qx.lang.Array.equals(this.__lookupTable.toArray(), lookupTable)) {\n        this._provider.removeBindings();\n        this.__lookupTable.removeAll();\n        this.__lookupTable.append(lookupTable);\n        this.__updateRowCount();\n        this._updateSelection();\n      }\n    },\n\n    /**\n     * Helper method to get all visible children form the passed parent node.\n     * The algorithm implements a depth-first search with a complexity:\n     * <code>O(n)</code> and <code>n</code> are all visible items.\n     *\n     * @param node {qx.core.Object} The start node to start search.\n     * @param nestedLevel {Integer} The nested level from the start node.\n     * @return {Array} All visible children form the parent.\n     */\n    __getVisibleChildrenFrom(node, nestedLevel) {\n      var visible = [];\n      nestedLevel++;\n\n      if (!this.isNode(node)) {\n        return visible;\n      }\n\n      var children = node.get(this.getChildProperty());\n      if (children == null) {\n        return visible;\n      }\n\n      // clone children to keep original model unmodified\n      children = children.copy();\n\n      var delegate = this.getDelegate();\n      var filter = qx.util.Delegate.getMethod(delegate, \"filter\");\n      var sorter = qx.util.Delegate.getMethod(delegate, \"sorter\");\n\n      if (sorter != null) {\n        children.sort(sorter);\n      }\n\n      for (var i = 0; i < children.getLength(); i++) {\n        var child = children.getItem(i);\n\n        if (filter && !filter(child)) {\n          continue;\n        }\n\n        if (this.isNode(child)) {\n          this.__nestingLevel.push(nestedLevel);\n          visible.push(child);\n\n          if (this.isNodeOpen(child)) {\n            var visibleChildren = this.__getVisibleChildrenFrom(\n              child,\n              nestedLevel\n            );\n\n            visible = visible.concat(visibleChildren);\n          }\n        } else {\n          if (this.isShowLeafs()) {\n            this.__nestingLevel.push(nestedLevel);\n            visible.push(child);\n          }\n        }\n      }\n\n      // dispose children clone\n      children.dispose();\n\n      return visible;\n    },\n\n    /**\n     * Helper method to set the node to the open nodes data structure when it\n     * is not included.\n     *\n     * @param node {qx.core.Object} Node to set to open nodes.\n     */\n    __openNode(node) {\n      if (!this.__openNodes.includes(node)) {\n        this.__openNodes.push(node);\n        this.fireDataEvent(\"open\", node);\n      }\n    },\n\n    /**\n     * Helper method to set the target node and all his parents to the open\n     * nodes data structure. The algorithm implements a depth-first search with\n     * a complexity: <code>O(n)</code> and <code>n</code> are all model items.\n     *\n     * @param startNode {qx.core.Object} Start (root) node to search.\n     * @param targetNode {qx.core.Object} Target node to open (and his parents).\n     * @return {Boolean} <code>True</code> when the targetNode and his\n     *  parents could opened, <code>false</code> otherwise.\n     */\n    __openNodeAndAllParents(startNode, targetNode) {\n      if (startNode === targetNode) {\n        this.__openNode(targetNode);\n        return true;\n      }\n\n      if (!this.isNode(startNode)) {\n        return false;\n      }\n\n      var children = startNode.get(this.getChildProperty());\n      if (children == null) {\n        return false;\n      }\n\n      for (var i = 0; i < children.getLength(); i++) {\n        var child = children.getItem(i);\n        var result = this.__openNodeAndAllParents(child, targetNode);\n\n        if (result === true) {\n          this.__openNode(child);\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Helper method to update the row count.\n     */\n    __updateRowCount() {\n      this.getPane()\n        .getRowConfig()\n        .setItemCount(this.__lookupTable.getLength());\n      this.getPane().fullUpdate();\n    },\n\n    /**\n     * Helper method to get the parent node. Node! This only works with leaf and\n     * nodes which are in the internal lookup table.\n     *\n     * @param item {qx.core.Object} Node or leaf to get parent.\n     * @return {qx.core.Object|null} The parent note or <code>null</code> when\n     *   no parent found.\n     *\n     * @internal\n     */\n    getParent(item) {\n      var index = this.__lookupTable.indexOf(item);\n      if (index < 0) {\n        return null;\n      }\n\n      var level = this.__nestingLevel[index];\n      while (index > 0) {\n        index--;\n        var levelBefore = this.__nestingLevel[index];\n        if (levelBefore < level) {\n          return this.__lookupTable.getItem(index);\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Builds the parent chain form the passed item.\n     *\n     * @param item {var} Item to build parent chain.\n     */\n    __buildParentChain(item) {\n      this.__parentChain = [];\n      var parent = this.getParent(item);\n      while (parent != null) {\n        this.__parentChain.unshift(parent);\n        parent = this.getParent(parent);\n      }\n    },\n\n    /**\n     * Return the first visible parent node from the last selected node.\n     *\n     * @return {var} The first visible node.\n     */\n    __getVisibleParent() {\n      if (this.__parentChain == null) {\n        return this.getModel();\n      }\n\n      var lookupTable = this.getLookupTable();\n      var parent = this.__parentChain.pop();\n\n      while (parent != null) {\n        if (lookupTable.contains(parent)) {\n          return parent;\n        }\n        parent = this.__parentChain.pop();\n      }\n      return this.getModel();\n    }\n  },\n\n  destruct() {\n    if (this._openCloseController) {\n      this._openCloseController.dispose();\n    }\n\n    var pane = this.getPane();\n    if (pane != null) {\n      if (pane.hasListener(\"cellDbltap\")) {\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\n      }\n      if (pane.hasListener(\"cellTap\")) {\n        pane.removeListener(\"cellTap\", this._onOpen, this);\n      }\n    }\n\n    if (!qx.core.ObjectRegistry.inShutDown && this.__deferredCall != null) {\n      this.__deferredCall.cancel();\n      this.__deferredCall.dispose();\n    }\n\n    var model = this.getModel();\n    if (model != null) {\n      model.removeListener(\"changeBubble\", this._onChangeBubble, this);\n    }\n\n    this._layer.removeListener(\"updated\", this._onUpdated, this);\n    this._layer.destroy();\n    this._provider.dispose();\n    this.__lookupTable.dispose();\n\n    this._layer =\n      this._provider =\n      this.__lookupTable =\n      this.__openNodes =\n      this.__deferredCall =\n        null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ;IACnCC,SAAS,EAAE,CAACX,EAAE,CAACO,EAAE,CAACK,IAAI,CAACH,IAAI,CAACI,YAAY,EAAEb,EAAE,CAACc,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC;IACxEC,OAAO,EAAE,CAACjB,EAAE,CAACO,EAAE,CAACC,OAAO,CAACU,SAAS,CAACC,MAAM,EAAEnB,EAAE,CAACO,EAAE,CAACE,IAAI,CAACW,eAAe,CAAC;IAErE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,SAAS,EAAEC,SAAS,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"
}