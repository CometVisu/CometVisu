{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "orientation",
    "__children",
    "setOrientation",
    "initOrientation",
    "__blocker",
    "addListener",
    "_onPointerDown",
    "_onPointerUp",
    "_onPointerMove",
    "_onPointerOut",
    "properties",
    "appearance",
    "refine",
    "init",
    "offset",
    "check",
    "apply",
    "members",
    "__splitterOffset",
    "__activeDragSession",
    "__lastPointerX",
    "__lastPointerY",
    "__isHorizontal",
    "__beginSize",
    "__endSize",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "splitpane",
    "Slider",
    "exclude",
    "_add",
    "type",
    "Splitter",
    "__onSplitterMove",
    "e",
    "__setBlockerPosition",
    "getData",
    "__createBlocker",
    "Blocker",
    "getContentElement",
    "add",
    "splitter",
    "getChildControl",
    "splitterWidth",
    "getWidth",
    "addListenerOnce",
    "bounds",
    "isKnobVisible",
    "height",
    "width",
    "hide",
    "show",
    "getBlocker",
    "_applyOrientation",
    "value",
    "old",
    "setAttribute",
    "slider",
    "oldLayout",
    "_getLayout",
    "dispose",
    "newLayout",
    "VLayout",
    "HLayout",
    "_setLayout",
    "removeState",
    "addState",
    "queue",
    "Manager",
    "flush",
    "_applyOffset",
    "getOffset",
    "splitterBounds",
    "getBounds",
    "splitterElem",
    "getDomElement",
    "left",
    "isNaN",
    "bom",
    "element",
    "Location",
    "getPosition",
    "setWidth",
    "setLeft",
    "top",
    "setHeight",
    "setTop",
    "widget",
    "flex",
    "undefined",
    "push",
    "remove",
    "_remove",
    "lang",
    "Array",
    "getChildren",
    "isLeftPressed",
    "splitterLocation",
    "getContentLocation",
    "paneLocation",
    "getDocumentLeft",
    "getDocumentTop",
    "setUserBounds",
    "setZIndex",
    "getZIndex",
    "capture",
    "stop",
    "_setLastPointerPosition",
    "__computeSizes",
    "pos",
    "setDomLeft",
    "setStyle",
    "setDomTop",
    "_finalizeSizes",
    "releaseCapture",
    "beginSize",
    "endSize",
    "children",
    "_getChildren",
    "firstWidget",
    "secondWidget",
    "firstFlexValue",
    "getLayoutProperties",
    "secondFlexValue",
    "setLayoutProperties",
    "min",
    "size",
    "max",
    "pointer",
    "beginHint",
    "getSizeHint",
    "endHint",
    "allocatedSize",
    "_isActiveDragSession",
    "x",
    "y",
    "destruct",
    "Pane"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/splitpane/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Jonathan WeiÃŸ (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A split panes divides an area into two panes. The ratio between the two\n * panes is configurable by the user using the splitter.\n *\n * @childControl slider {qx.ui.splitpane.Slider} shown during resizing the splitpane\n * @childControl splitter {qx.ui.splitpane.Splitter} splitter to resize the splitpane\n */\nqx.Class.define(\"qx.ui.splitpane.Pane\", {\n  extend: qx.ui.core.Widget,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new instance of a SplitPane. It allows the user to dynamically\n   * resize the areas dropping the border between.\n   *\n   * @param orientation {String} The orientation of the split pane control.\n   * Allowed values are \"horizontal\" (default) and \"vertical\".\n   */\n  construct(orientation) {\n    super();\n\n    this.__children = [];\n\n    // Initialize orientation\n    if (orientation) {\n      this.setOrientation(orientation);\n    } else {\n      this.initOrientation();\n    }\n\n    // add all pointer listener to the blocker\n    this.__blocker.addListener(\"pointerdown\", this._onPointerDown, this);\n    this.__blocker.addListener(\"pointerup\", this._onPointerUp, this);\n    this.__blocker.addListener(\"pointermove\", this._onPointerMove, this);\n    this.__blocker.addListener(\"pointerout\", this._onPointerOut, this);\n    this.__blocker.addListener(\"losecapture\", this._onPointerUp, this);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"splitpane\"\n    },\n\n    /**\n     * Distance between pointer and splitter when the cursor should change\n     * and enable resizing.\n     */\n    offset: {\n      check: \"Integer\",\n      init: 6,\n      apply: \"_applyOffset\"\n    },\n\n    /**\n     * The orientation of the splitpane control.\n     */\n    orientation: {\n      init: \"horizontal\",\n      check: [\"horizontal\", \"vertical\"],\n      apply: \"_applyOrientation\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __splitterOffset: null,\n    __activeDragSession: false,\n    __lastPointerX: null,\n    __lastPointerY: null,\n    __isHorizontal: null,\n    __beginSize: null,\n    __endSize: null,\n    __children: null,\n    __blocker: null,\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        // Create and add slider\n        case \"slider\":\n          control = new qx.ui.splitpane.Slider(this);\n          control.exclude();\n          this._add(control, { type: id });\n          break;\n\n        // Create splitter\n        case \"splitter\":\n          control = new qx.ui.splitpane.Splitter(this);\n          this._add(control, { type: id });\n          control.addListener(\"move\", this.__onSplitterMove, this);\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /**\n     * Move handler for the splitter which takes care of the external\n     * triggered resize of children.\n     *\n     * @param e {qx.event.type.Data} The data even of move.\n     */\n    __onSplitterMove(e) {\n      this.__setBlockerPosition(e.getData());\n    },\n\n    /**\n     * Creates a blocker for the splitter which takes all bouse events and\n     * also handles the offset and cursor.\n     *\n     * @param orientation {String} The orientation of the pane.\n     */\n    __createBlocker(orientation) {\n      this.__blocker = new qx.ui.splitpane.Blocker(orientation);\n      this.getContentElement().add(this.__blocker);\n\n      var splitter = this.getChildControl(\"splitter\");\n      var splitterWidth = splitter.getWidth();\n      if (!splitterWidth) {\n        splitter.addListenerOnce(\"appear\", () => {\n          this.__setBlockerPosition();\n        });\n      }\n\n      // resize listener to remove the blocker in case the splitter\n      // is removed.\n      splitter.addListener(\"resize\", e => {\n        var bounds = e.getData();\n        if (\n          this.getChildControl(\"splitter\").isKnobVisible() &&\n          (bounds.height == 0 || bounds.width == 0)\n        ) {\n          this.__blocker.hide();\n        } else {\n          this.__blocker.show();\n        }\n      });\n    },\n\n    /**\n     * Returns the blocker used over the splitter. this could be used for\n     * adding event listeners like tap or dbltap.\n     *\n     * @return {qx.ui.splitpane.Blocker} The used blocker element.\n     *\n     * @internal\n     */\n    getBlocker() {\n      return this.__blocker;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply routine for the orientation property.\n     *\n     * Sets the pane's layout to vertical or horizontal split layout.\n     *\n     * @param value {String} The new value of the orientation property\n     * @param old {String} The old value of the orientation property\n     */\n    _applyOrientation(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-orientation\", value);\n\n      var slider = this.getChildControl(\"slider\");\n      var splitter = this.getChildControl(\"splitter\");\n\n      // Store boolean flag for faster access\n      this.__isHorizontal = value === \"horizontal\";\n\n      if (!this.__blocker) {\n        this.__createBlocker(value);\n      }\n\n      // update the blocker\n      this.__blocker.setOrientation(value);\n\n      // Dispose old layout\n      var oldLayout = this._getLayout();\n      if (oldLayout) {\n        oldLayout.dispose();\n      }\n\n      // Create new layout\n      var newLayout =\n        value === \"vertical\"\n          ? new qx.ui.splitpane.VLayout()\n          : new qx.ui.splitpane.HLayout();\n      this._setLayout(newLayout);\n\n      // Update states for splitter and slider\n      splitter.removeState(old);\n      splitter.addState(value);\n      splitter.getChildControl(\"knob\").removeState(old);\n      splitter.getChildControl(\"knob\").addState(value);\n      slider.removeState(old);\n      slider.addState(value);\n\n      // flush (needs to be done for the blocker update) and update the blocker\n      qx.ui.core.queue.Manager.flush();\n      this.__setBlockerPosition();\n    },\n\n    // property apply\n    _applyOffset(value, old) {\n      this.__setBlockerPosition();\n    },\n\n    /**\n     * Helper for setting the blocker to the right position, which depends on\n     * the offset, orientation and the current position of the splitter.\n     *\n     * @param bounds {Map?null} If the bounds of the splitter are known,\n     *   they can be added.\n     */\n    __setBlockerPosition(bounds) {\n      var splitter = this.getChildControl(\"splitter\");\n      var offset = this.getOffset();\n      var splitterBounds = splitter.getBounds();\n      var splitterElem = splitter.getContentElement().getDomElement();\n\n      // do nothing if the splitter is not ready\n      if (!splitterElem) {\n        return;\n      }\n\n      // recalculate the dimensions of the blocker\n      if (this.__isHorizontal) {\n        // get the width either of the given bounds or of the read bounds\n        var width = null;\n        if (bounds) {\n          width = bounds.width;\n        } else if (splitterBounds) {\n          width = splitterBounds.width;\n        }\n        var left = bounds && bounds.left;\n\n        if (width || !this.getChildControl(\"splitter\").isKnobVisible()) {\n          if (isNaN(left)) {\n            left = qx.bom.element.Location.getPosition(splitterElem).left;\n          }\n          this.__blocker.setWidth(offset, width || 6);\n          this.__blocker.setLeft(offset, left);\n        }\n\n        // vertical case\n      } else {\n        // get the height either of the given bounds or of the read bounds\n        var height = null;\n        if (bounds) {\n          height = bounds.height;\n        } else if (splitterBounds) {\n          height = splitterBounds.height;\n        }\n        var top = bounds && bounds.top;\n\n        if (height || !this.getChildControl(\"splitter\").isKnobVisible()) {\n          if (isNaN(top)) {\n            top = qx.bom.element.Location.getPosition(splitterElem).top;\n          }\n          this.__blocker.setHeight(offset, height || 6);\n          this.__blocker.setTop(offset, top);\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a widget to the pane.\n     *\n     * Sets the pane's layout to vertical or horizontal split layout. Depending on the\n     * pane's layout the first widget will be the left or top widget, the second one\n     * the bottom or right widget. Adding more than two widgets will overwrite the\n     * existing ones.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to be inserted into pane.\n     * @param flex {Number} The (optional) layout property for the widget's flex value.\n     */\n    add(widget, flex) {\n      if (flex === undefined) {\n        this._add(widget);\n      } else {\n        this._add(widget, { flex: flex });\n      }\n      this.__children.push(widget);\n    },\n\n    /**\n     * Removes the given widget from the pane.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to be removed.\n     */\n    remove(widget) {\n      this._remove(widget);\n      qx.lang.Array.remove(this.__children, widget);\n    },\n\n    /**\n     * Returns an array containing the pane's content.\n     *\n     * @return {qx.ui.core.Widget[]} The pane's child widgets\n     */\n    getChildren() {\n      return this.__children;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for pointerdown event.\n     *\n     * Shows slider widget and starts drag session if pointer is near/on splitter widget.\n     *\n     * @param e {qx.event.type.Pointer} pointerdown event\n     */\n    _onPointerDown(e) {\n      // Only proceed if left pointer button is pressed and the splitter is active\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      var splitter = this.getChildControl(\"splitter\");\n\n      // Store offset between pointer event coordinates and splitter\n      var splitterLocation = splitter.getContentLocation();\n      var paneLocation = this.getContentLocation();\n      this.__splitterOffset = this.__isHorizontal\n        ? e.getDocumentLeft() - splitterLocation.left + paneLocation.left\n        : e.getDocumentTop() - splitterLocation.top + paneLocation.top;\n\n      // Synchronize slider to splitter size and show it\n      var slider = this.getChildControl(\"slider\");\n      var splitterBounds = splitter.getBounds();\n      slider.setUserBounds(\n        splitterBounds.left,\n        splitterBounds.top,\n        splitterBounds.width || 6,\n        splitterBounds.height || 6\n      );\n\n      slider.setZIndex(splitter.getZIndex() + 1);\n      slider.show();\n\n      // Enable session\n      this.__activeDragSession = true;\n      this.__blocker.capture();\n\n      e.stop();\n    },\n\n    /**\n     * Handler for pointermove event.\n     *\n     * @param e {qx.event.type.Pointer} pointermove event\n     */\n    _onPointerMove(e) {\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\n\n      // Check if slider is already being dragged\n      if (this.__activeDragSession) {\n        // Compute new children sizes\n        this.__computeSizes();\n\n        // Update slider position\n        var slider = this.getChildControl(\"slider\");\n        var pos = this.__beginSize;\n\n        if (this.__isHorizontal) {\n          slider.setDomLeft(pos);\n          this.__blocker.setStyle(\"left\", pos - this.getOffset() + \"px\");\n        } else {\n          slider.setDomTop(pos);\n          this.__blocker.setStyle(\"top\", pos - this.getOffset() + \"px\");\n        }\n\n        e.stop();\n      }\n    },\n\n    /**\n     * Handler for pointerout event\n     *\n     * @param e {qx.event.type.Pointer} pointerout event\n     */\n    _onPointerOut(e) {\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\n    },\n\n    /**\n     * Handler for pointerup event\n     *\n     * Sets widget sizes if dragging session has been active.\n     *\n     * @param e {qx.event.type.Pointer} pointerup event\n     */\n    _onPointerUp(e) {\n      if (!this.__activeDragSession) {\n        return;\n      }\n\n      // Set sizes to both widgets\n      this._finalizeSizes();\n\n      // Hide the slider\n      var slider = this.getChildControl(\"slider\");\n      slider.exclude();\n\n      // Cleanup\n      this.__activeDragSession = false;\n      this.releaseCapture();\n\n      e.stop();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERVAL HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Updates widgets' sizes based on the slider position.\n     */\n    _finalizeSizes() {\n      var beginSize = this.__beginSize;\n      var endSize = this.__endSize;\n\n      if (beginSize == null) {\n        return;\n      }\n\n      var children = this._getChildren();\n      var firstWidget = children[2];\n      var secondWidget = children[3];\n\n      // Read widgets' flex values\n      var firstFlexValue = firstWidget.getLayoutProperties().flex;\n      var secondFlexValue = secondWidget.getLayoutProperties().flex;\n\n      // Both widgets have flex values\n      if (firstFlexValue != 0 && secondFlexValue != 0) {\n        firstWidget.setLayoutProperties({ flex: beginSize });\n        secondWidget.setLayoutProperties({ flex: endSize });\n      }\n\n      // Update both sizes\n      else {\n        // Set widths to static widgets\n        if (this.__isHorizontal) {\n          firstWidget.setWidth(beginSize);\n          secondWidget.setWidth(endSize);\n        } else {\n          firstWidget.setHeight(beginSize);\n          secondWidget.setHeight(endSize);\n        }\n      }\n    },\n\n    /**\n     * Computes widgets' sizes based on the pointer coordinate.\n     */\n    __computeSizes() {\n      if (this.__isHorizontal) {\n        var min = \"minWidth\",\n          size = \"width\",\n          max = \"maxWidth\",\n          pointer = this.__lastPointerX;\n      } else {\n        var min = \"minHeight\",\n          size = \"height\",\n          max = \"maxHeight\",\n          pointer = this.__lastPointerY;\n      }\n\n      var children = this._getChildren();\n      var beginHint = children[2].getSizeHint();\n      var endHint = children[3].getSizeHint();\n\n      // Area given to both widgets\n      var allocatedSize =\n        children[2].getBounds()[size] + children[3].getBounds()[size];\n\n      // Calculate widget sizes\n      var beginSize = pointer - this.__splitterOffset;\n      var endSize = allocatedSize - beginSize;\n\n      // Respect minimum limits\n      if (beginSize < beginHint[min]) {\n        endSize -= beginHint[min] - beginSize;\n        beginSize = beginHint[min];\n      } else if (endSize < endHint[min]) {\n        beginSize -= endHint[min] - endSize;\n        endSize = endHint[min];\n      }\n\n      // Respect maximum limits\n      if (beginSize > beginHint[max]) {\n        endSize += beginSize - beginHint[max];\n        beginSize = beginHint[max];\n      } else if (endSize > endHint[max]) {\n        beginSize += endSize - endHint[max];\n        endSize = endHint[max];\n      }\n\n      // Store sizes\n      this.__beginSize = beginSize;\n      this.__endSize = endSize;\n    },\n\n    /**\n     * Determines whether this is an active drag session\n     *\n     * @return {Boolean} True if active drag session, otherwise false.\n     */\n    _isActiveDragSession() {\n      return this.__activeDragSession;\n    },\n\n    /**\n     * Sets the last pointer position.\n     *\n     * @param x {Integer} the x position of the pointer.\n     * @param y {Integer} the y position of the pointer.\n     */\n    _setLastPointerPosition(x, y) {\n      this.__lastPointerX = x;\n      this.__lastPointerY = y;\n    }\n  },\n\n  destruct() {\n    this.__children = null;\n  }\n});\n"
  ],
  "mappings": "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"
}