{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "orientation",
    "constructor",
    "call",
    "__children",
    "setOrientation",
    "initOrientation",
    "__blocker",
    "addListener",
    "_onPointerDown",
    "_onPointerUp",
    "_onPointerMove",
    "_onPointerOut",
    "properties",
    "appearance",
    "refine",
    "init",
    "offset",
    "check",
    "apply",
    "members",
    "__splitterOffset",
    "__activeDragSession",
    "__lastPointerX",
    "__lastPointerY",
    "__isHorizontal",
    "__beginSize",
    "__endSize",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "splitpane",
    "Slider",
    "exclude",
    "_add",
    "type",
    "Splitter",
    "__onSplitterMove",
    "Pane",
    "superclass",
    "prototype",
    "e",
    "__setBlockerPosition",
    "getData",
    "__createBlocker",
    "_this",
    "Blocker",
    "getContentElement",
    "add",
    "splitter",
    "getChildControl",
    "splitterWidth",
    "getWidth",
    "addListenerOnce",
    "bounds",
    "isKnobVisible",
    "height",
    "width",
    "hide",
    "show",
    "getBlocker",
    "_applyOrientation",
    "value",
    "old",
    "setAttribute",
    "slider",
    "oldLayout",
    "_getLayout",
    "dispose",
    "newLayout",
    "VLayout",
    "HLayout",
    "_setLayout",
    "removeState",
    "addState",
    "queue",
    "Manager",
    "flush",
    "_applyOffset",
    "getOffset",
    "splitterBounds",
    "getBounds",
    "splitterElem",
    "getDomElement",
    "left",
    "isNaN",
    "bom",
    "element",
    "Location",
    "getPosition",
    "setWidth",
    "setLeft",
    "top",
    "setHeight",
    "setTop",
    "widget",
    "flex",
    "undefined",
    "push",
    "remove",
    "_remove",
    "lang",
    "Array",
    "getChildren",
    "isLeftPressed",
    "splitterLocation",
    "getContentLocation",
    "paneLocation",
    "getDocumentLeft",
    "getDocumentTop",
    "setUserBounds",
    "setZIndex",
    "getZIndex",
    "capture",
    "stop",
    "_setLastPointerPosition",
    "__computeSizes",
    "pos",
    "setDomLeft",
    "setStyle",
    "setDomTop",
    "_finalizeSizes",
    "releaseCapture",
    "beginSize",
    "endSize",
    "children",
    "_getChildren",
    "firstWidget",
    "secondWidget",
    "firstFlexValue",
    "getLayoutProperties",
    "secondFlexValue",
    "setLayoutProperties",
    "min",
    "size",
    "max",
    "pointer",
    "beginHint",
    "getSizeHint",
    "endHint",
    "allocatedSize",
    "_isActiveDragSession",
    "x",
    "y",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/splitpane/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Jonathan WeiÃŸ (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A split panes divides an area into two panes. The ratio between the two\n * panes is configurable by the user using the splitter.\n *\n * @childControl slider {qx.ui.splitpane.Slider} shown during resizing the splitpane\n * @childControl splitter {qx.ui.splitpane.Splitter} splitter to resize the splitpane\n */\nqx.Class.define(\"qx.ui.splitpane.Pane\", {\n  extend: qx.ui.core.Widget,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new instance of a SplitPane. It allows the user to dynamically\n   * resize the areas dropping the border between.\n   *\n   * @param orientation {String} The orientation of the split pane control.\n   * Allowed values are \"horizontal\" (default) and \"vertical\".\n   */\n  construct(orientation) {\n    super();\n\n    this.__children = [];\n\n    // Initialize orientation\n    if (orientation) {\n      this.setOrientation(orientation);\n    } else {\n      this.initOrientation();\n    }\n\n    // add all pointer listener to the blocker\n    this.__blocker.addListener(\"pointerdown\", this._onPointerDown, this);\n    this.__blocker.addListener(\"pointerup\", this._onPointerUp, this);\n    this.__blocker.addListener(\"pointermove\", this._onPointerMove, this);\n    this.__blocker.addListener(\"pointerout\", this._onPointerOut, this);\n    this.__blocker.addListener(\"losecapture\", this._onPointerUp, this);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"splitpane\"\n    },\n\n    /**\n     * Distance between pointer and splitter when the cursor should change\n     * and enable resizing.\n     */\n    offset: {\n      check: \"Integer\",\n      init: 6,\n      apply: \"_applyOffset\"\n    },\n\n    /**\n     * The orientation of the splitpane control.\n     */\n    orientation: {\n      init: \"horizontal\",\n      check: [\"horizontal\", \"vertical\"],\n      apply: \"_applyOrientation\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __splitterOffset: null,\n    __activeDragSession: false,\n    __lastPointerX: null,\n    __lastPointerY: null,\n    __isHorizontal: null,\n    __beginSize: null,\n    __endSize: null,\n    __children: null,\n    __blocker: null,\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        // Create and add slider\n        case \"slider\":\n          control = new qx.ui.splitpane.Slider(this);\n          control.exclude();\n          this._add(control, { type: id });\n          break;\n\n        // Create splitter\n        case \"splitter\":\n          control = new qx.ui.splitpane.Splitter(this);\n          this._add(control, { type: id });\n          control.addListener(\"move\", this.__onSplitterMove, this);\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /**\n     * Move handler for the splitter which takes care of the external\n     * triggered resize of children.\n     *\n     * @param e {qx.event.type.Data} The data even of move.\n     */\n    __onSplitterMove(e) {\n      this.__setBlockerPosition(e.getData());\n    },\n\n    /**\n     * Creates a blocker for the splitter which takes all bouse events and\n     * also handles the offset and cursor.\n     *\n     * @param orientation {String} The orientation of the pane.\n     */\n    __createBlocker(orientation) {\n      this.__blocker = new qx.ui.splitpane.Blocker(orientation);\n      this.getContentElement().add(this.__blocker);\n\n      var splitter = this.getChildControl(\"splitter\");\n      var splitterWidth = splitter.getWidth();\n      if (!splitterWidth) {\n        splitter.addListenerOnce(\"appear\", () => {\n          this.__setBlockerPosition();\n        });\n      }\n\n      // resize listener to remove the blocker in case the splitter\n      // is removed.\n      splitter.addListener(\"resize\", e => {\n        var bounds = e.getData();\n        if (\n          this.getChildControl(\"splitter\").isKnobVisible() &&\n          (bounds.height == 0 || bounds.width == 0)\n        ) {\n          this.__blocker.hide();\n        } else {\n          this.__blocker.show();\n        }\n      });\n    },\n\n    /**\n     * Returns the blocker used over the splitter. this could be used for\n     * adding event listeners like tap or dbltap.\n     *\n     * @return {qx.ui.splitpane.Blocker} The used blocker element.\n     *\n     * @internal\n     */\n    getBlocker() {\n      return this.__blocker;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply routine for the orientation property.\n     *\n     * Sets the pane's layout to vertical or horizontal split layout.\n     *\n     * @param value {String} The new value of the orientation property\n     * @param old {String} The old value of the orientation property\n     */\n    _applyOrientation(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-orientation\", value);\n\n      var slider = this.getChildControl(\"slider\");\n      var splitter = this.getChildControl(\"splitter\");\n\n      // Store boolean flag for faster access\n      this.__isHorizontal = value === \"horizontal\";\n\n      if (!this.__blocker) {\n        this.__createBlocker(value);\n      }\n\n      // update the blocker\n      this.__blocker.setOrientation(value);\n\n      // Dispose old layout\n      var oldLayout = this._getLayout();\n      if (oldLayout) {\n        oldLayout.dispose();\n      }\n\n      // Create new layout\n      var newLayout =\n        value === \"vertical\"\n          ? new qx.ui.splitpane.VLayout()\n          : new qx.ui.splitpane.HLayout();\n      this._setLayout(newLayout);\n\n      // Update states for splitter and slider\n      splitter.removeState(old);\n      splitter.addState(value);\n      splitter.getChildControl(\"knob\").removeState(old);\n      splitter.getChildControl(\"knob\").addState(value);\n      slider.removeState(old);\n      slider.addState(value);\n\n      // flush (needs to be done for the blocker update) and update the blocker\n      qx.ui.core.queue.Manager.flush();\n      this.__setBlockerPosition();\n    },\n\n    // property apply\n    _applyOffset(value, old) {\n      this.__setBlockerPosition();\n    },\n\n    /**\n     * Helper for setting the blocker to the right position, which depends on\n     * the offset, orientation and the current position of the splitter.\n     *\n     * @param bounds {Map?null} If the bounds of the splitter are known,\n     *   they can be added.\n     */\n    __setBlockerPosition(bounds) {\n      var splitter = this.getChildControl(\"splitter\");\n      var offset = this.getOffset();\n      var splitterBounds = splitter.getBounds();\n      var splitterElem = splitter.getContentElement().getDomElement();\n\n      // do nothing if the splitter is not ready\n      if (!splitterElem) {\n        return;\n      }\n\n      // recalculate the dimensions of the blocker\n      if (this.__isHorizontal) {\n        // get the width either of the given bounds or of the read bounds\n        var width = null;\n        if (bounds) {\n          width = bounds.width;\n        } else if (splitterBounds) {\n          width = splitterBounds.width;\n        }\n        var left = bounds && bounds.left;\n\n        if (width || !this.getChildControl(\"splitter\").isKnobVisible()) {\n          if (isNaN(left)) {\n            left = qx.bom.element.Location.getPosition(splitterElem).left;\n          }\n          this.__blocker.setWidth(offset, width || 6);\n          this.__blocker.setLeft(offset, left);\n        }\n\n        // vertical case\n      } else {\n        // get the height either of the given bounds or of the read bounds\n        var height = null;\n        if (bounds) {\n          height = bounds.height;\n        } else if (splitterBounds) {\n          height = splitterBounds.height;\n        }\n        var top = bounds && bounds.top;\n\n        if (height || !this.getChildControl(\"splitter\").isKnobVisible()) {\n          if (isNaN(top)) {\n            top = qx.bom.element.Location.getPosition(splitterElem).top;\n          }\n          this.__blocker.setHeight(offset, height || 6);\n          this.__blocker.setTop(offset, top);\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a widget to the pane.\n     *\n     * Sets the pane's layout to vertical or horizontal split layout. Depending on the\n     * pane's layout the first widget will be the left or top widget, the second one\n     * the bottom or right widget. Adding more than two widgets will overwrite the\n     * existing ones.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to be inserted into pane.\n     * @param flex {Number} The (optional) layout property for the widget's flex value.\n     */\n    add(widget, flex) {\n      if (flex === undefined) {\n        this._add(widget);\n      } else {\n        this._add(widget, { flex: flex });\n      }\n      this.__children.push(widget);\n    },\n\n    /**\n     * Removes the given widget from the pane.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to be removed.\n     */\n    remove(widget) {\n      this._remove(widget);\n      qx.lang.Array.remove(this.__children, widget);\n    },\n\n    /**\n     * Returns an array containing the pane's content.\n     *\n     * @return {qx.ui.core.Widget[]} The pane's child widgets\n     */\n    getChildren() {\n      return this.__children;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for pointerdown event.\n     *\n     * Shows slider widget and starts drag session if pointer is near/on splitter widget.\n     *\n     * @param e {qx.event.type.Pointer} pointerdown event\n     */\n    _onPointerDown(e) {\n      // Only proceed if left pointer button is pressed and the splitter is active\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      var splitter = this.getChildControl(\"splitter\");\n\n      // Store offset between pointer event coordinates and splitter\n      var splitterLocation = splitter.getContentLocation();\n      var paneLocation = this.getContentLocation();\n      this.__splitterOffset = this.__isHorizontal\n        ? e.getDocumentLeft() - splitterLocation.left + paneLocation.left\n        : e.getDocumentTop() - splitterLocation.top + paneLocation.top;\n\n      // Synchronize slider to splitter size and show it\n      var slider = this.getChildControl(\"slider\");\n      var splitterBounds = splitter.getBounds();\n      slider.setUserBounds(\n        splitterBounds.left,\n        splitterBounds.top,\n        splitterBounds.width || 6,\n        splitterBounds.height || 6\n      );\n\n      slider.setZIndex(splitter.getZIndex() + 1);\n      slider.show();\n\n      // Enable session\n      this.__activeDragSession = true;\n      this.__blocker.capture();\n\n      e.stop();\n    },\n\n    /**\n     * Handler for pointermove event.\n     *\n     * @param e {qx.event.type.Pointer} pointermove event\n     */\n    _onPointerMove(e) {\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\n\n      // Check if slider is already being dragged\n      if (this.__activeDragSession) {\n        // Compute new children sizes\n        this.__computeSizes();\n\n        // Update slider position\n        var slider = this.getChildControl(\"slider\");\n        var pos = this.__beginSize;\n\n        if (this.__isHorizontal) {\n          slider.setDomLeft(pos);\n          this.__blocker.setStyle(\"left\", pos - this.getOffset() + \"px\");\n        } else {\n          slider.setDomTop(pos);\n          this.__blocker.setStyle(\"top\", pos - this.getOffset() + \"px\");\n        }\n\n        e.stop();\n      }\n    },\n\n    /**\n     * Handler for pointerout event\n     *\n     * @param e {qx.event.type.Pointer} pointerout event\n     */\n    _onPointerOut(e) {\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\n    },\n\n    /**\n     * Handler for pointerup event\n     *\n     * Sets widget sizes if dragging session has been active.\n     *\n     * @param e {qx.event.type.Pointer} pointerup event\n     */\n    _onPointerUp(e) {\n      if (!this.__activeDragSession) {\n        return;\n      }\n\n      // Set sizes to both widgets\n      this._finalizeSizes();\n\n      // Hide the slider\n      var slider = this.getChildControl(\"slider\");\n      slider.exclude();\n\n      // Cleanup\n      this.__activeDragSession = false;\n      this.releaseCapture();\n\n      e.stop();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERVAL HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Updates widgets' sizes based on the slider position.\n     */\n    _finalizeSizes() {\n      var beginSize = this.__beginSize;\n      var endSize = this.__endSize;\n\n      if (beginSize == null) {\n        return;\n      }\n\n      var children = this._getChildren();\n      var firstWidget = children[2];\n      var secondWidget = children[3];\n\n      // Read widgets' flex values\n      var firstFlexValue = firstWidget.getLayoutProperties().flex;\n      var secondFlexValue = secondWidget.getLayoutProperties().flex;\n\n      // Both widgets have flex values\n      if (firstFlexValue != 0 && secondFlexValue != 0) {\n        firstWidget.setLayoutProperties({ flex: beginSize });\n        secondWidget.setLayoutProperties({ flex: endSize });\n      }\n\n      // Update both sizes\n      else {\n        // Set widths to static widgets\n        if (this.__isHorizontal) {\n          firstWidget.setWidth(beginSize);\n          secondWidget.setWidth(endSize);\n        } else {\n          firstWidget.setHeight(beginSize);\n          secondWidget.setHeight(endSize);\n        }\n      }\n    },\n\n    /**\n     * Computes widgets' sizes based on the pointer coordinate.\n     */\n    __computeSizes() {\n      if (this.__isHorizontal) {\n        var min = \"minWidth\",\n          size = \"width\",\n          max = \"maxWidth\",\n          pointer = this.__lastPointerX;\n      } else {\n        var min = \"minHeight\",\n          size = \"height\",\n          max = \"maxHeight\",\n          pointer = this.__lastPointerY;\n      }\n\n      var children = this._getChildren();\n      var beginHint = children[2].getSizeHint();\n      var endHint = children[3].getSizeHint();\n\n      // Area given to both widgets\n      var allocatedSize =\n        children[2].getBounds()[size] + children[3].getBounds()[size];\n\n      // Calculate widget sizes\n      var beginSize = pointer - this.__splitterOffset;\n      var endSize = allocatedSize - beginSize;\n\n      // Respect minimum limits\n      if (beginSize < beginHint[min]) {\n        endSize -= beginHint[min] - beginSize;\n        beginSize = beginHint[min];\n      } else if (endSize < endHint[min]) {\n        beginSize -= endHint[min] - endSize;\n        endSize = endHint[min];\n      }\n\n      // Respect maximum limits\n      if (beginSize > beginHint[max]) {\n        endSize += beginSize - beginHint[max];\n        beginSize = beginHint[max];\n      } else if (endSize > endHint[max]) {\n        beginSize += endSize - endHint[max];\n        endSize = endHint[max];\n      }\n\n      // Store sizes\n      this.__beginSize = beginSize;\n      this.__endSize = endSize;\n    },\n\n    /**\n     * Determines whether this is an active drag session\n     *\n     * @return {Boolean} True if active drag session, otherwise false.\n     */\n    _isActiveDragSession() {\n      return this.__activeDragSession;\n    },\n\n    /**\n     * Sets the last pointer position.\n     *\n     * @param x {Integer} the x position of the pointer.\n     * @param y {Integer} the y position of the pointer.\n     */\n    _setLastPointerPosition(x, y) {\n      this.__lastPointerX = x;\n      this.__lastPointerY = y;\n    }\n  },\n\n  destruct() {\n    this.__children = null;\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}