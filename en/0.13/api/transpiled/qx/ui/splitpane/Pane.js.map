{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "orientation",
    "constructor",
    "call",
    "__children",
    "setOrientation",
    "initOrientation",
    "__blocker",
    "addListener",
    "_onPointerDown",
    "_onPointerUp",
    "_onPointerMove",
    "_onPointerOut",
    "properties",
    "appearance",
    "refine",
    "init",
    "offset",
    "check",
    "apply",
    "members",
    "__splitterOffset",
    "__activeDragSession",
    "__lastPointerX",
    "__lastPointerY",
    "__isHorizontal",
    "__beginSize",
    "__endSize",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "splitpane",
    "Slider",
    "exclude",
    "_add",
    "type",
    "Splitter",
    "__onSplitterMove",
    "Pane",
    "superclass",
    "prototype",
    "__P_432_9",
    "e",
    "__setBlockerPosition",
    "getData",
    "__createBlocker",
    "__P_432_11",
    "_this",
    "Blocker",
    "getContentElement",
    "add",
    "splitter",
    "getChildControl",
    "splitterWidth",
    "getWidth",
    "addListenerOnce",
    "bounds",
    "isKnobVisible",
    "height",
    "width",
    "hide",
    "show",
    "getBlocker",
    "_applyOrientation",
    "value",
    "old",
    "setAttribute",
    "slider",
    "oldLayout",
    "_getLayout",
    "dispose",
    "newLayout",
    "VLayout",
    "HLayout",
    "_setLayout",
    "removeState",
    "addState",
    "queue",
    "Manager",
    "flush",
    "_applyOffset",
    "__P_432_10",
    "getOffset",
    "splitterBounds",
    "getBounds",
    "splitterElem",
    "getDomElement",
    "left",
    "isNaN",
    "bom",
    "element",
    "Location",
    "getPosition",
    "setWidth",
    "setLeft",
    "top",
    "setHeight",
    "setTop",
    "widget",
    "flex",
    "undefined",
    "push",
    "remove",
    "_remove",
    "lang",
    "Array",
    "getChildren",
    "isLeftPressed",
    "splitterLocation",
    "getContentLocation",
    "paneLocation",
    "getDocumentLeft",
    "getDocumentTop",
    "setUserBounds",
    "setZIndex",
    "getZIndex",
    "capture",
    "stop",
    "_setLastPointerPosition",
    "__computeSizes",
    "pos",
    "setDomLeft",
    "setStyle",
    "setDomTop",
    "_finalizeSizes",
    "releaseCapture",
    "beginSize",
    "endSize",
    "children",
    "_getChildren",
    "firstWidget",
    "secondWidget",
    "firstFlexValue",
    "getLayoutProperties",
    "secondFlexValue",
    "setLayoutProperties",
    "__P_432_12",
    "min",
    "size",
    "max",
    "pointer",
    "beginHint",
    "getSizeHint",
    "endHint",
    "allocatedSize",
    "_isActiveDragSession",
    "x",
    "y",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/splitpane/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Jonathan WeiÃŸ (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A split panes divides an area into two panes. The ratio between the two\r\n * panes is configurable by the user using the splitter.\r\n *\r\n * @childControl slider {qx.ui.splitpane.Slider} shown during resizing the splitpane\r\n * @childControl splitter {qx.ui.splitpane.Splitter} splitter to resize the splitpane\r\n */\r\nqx.Class.define(\"qx.ui.splitpane.Pane\", {\r\n  extend: qx.ui.core.Widget,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * Creates a new instance of a SplitPane. It allows the user to dynamically\r\n   * resize the areas dropping the border between.\r\n   *\r\n   * @param orientation {String} The orientation of the split pane control.\r\n   * Allowed values are \"horizontal\" (default) and \"vertical\".\r\n   */\r\n  construct(orientation) {\r\n    super();\r\n\r\n    this.__children = [];\r\n\r\n    // Initialize orientation\r\n    if (orientation) {\r\n      this.setOrientation(orientation);\r\n    } else {\r\n      this.initOrientation();\r\n    }\r\n\r\n    // add all pointer listener to the blocker\r\n    this.__blocker.addListener(\"pointerdown\", this._onPointerDown, this);\r\n    this.__blocker.addListener(\"pointerup\", this._onPointerUp, this);\r\n    this.__blocker.addListener(\"pointermove\", this._onPointerMove, this);\r\n    this.__blocker.addListener(\"pointerout\", this._onPointerOut, this);\r\n    this.__blocker.addListener(\"losecapture\", this._onPointerUp, this);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"splitpane\"\r\n    },\r\n\r\n    /**\r\n     * Distance between pointer and splitter when the cursor should change\r\n     * and enable resizing.\r\n     */\r\n    offset: {\r\n      check: \"Integer\",\r\n      init: 6,\r\n      apply: \"_applyOffset\"\r\n    },\r\n\r\n    /**\r\n     * The orientation of the splitpane control.\r\n     */\r\n    orientation: {\r\n      init: \"horizontal\",\r\n      check: [\"horizontal\", \"vertical\"],\r\n      apply: \"_applyOrientation\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __splitterOffset: null,\r\n    __activeDragSession: false,\r\n    __lastPointerX: null,\r\n    __lastPointerY: null,\r\n    __isHorizontal: null,\r\n    __beginSize: null,\r\n    __endSize: null,\r\n    __children: null,\r\n    __blocker: null,\r\n\r\n    // overridden\r\n    _createChildControlImpl(id, hash) {\r\n      var control;\r\n\r\n      switch (id) {\r\n        // Create and add slider\r\n        case \"slider\":\r\n          control = new qx.ui.splitpane.Slider(this);\r\n          control.exclude();\r\n          this._add(control, { type: id });\r\n          break;\r\n\r\n        // Create splitter\r\n        case \"splitter\":\r\n          control = new qx.ui.splitpane.Splitter(this);\r\n          this._add(control, { type: id });\r\n          control.addListener(\"move\", this.__onSplitterMove, this);\r\n          break;\r\n      }\r\n\r\n      return control || super._createChildControlImpl(id);\r\n    },\r\n\r\n    /**\r\n     * Move handler for the splitter which takes care of the external\r\n     * triggered resize of children.\r\n     *\r\n     * @param e {qx.event.type.Data} The data even of move.\r\n     */\r\n    __onSplitterMove(e) {\r\n      this.__setBlockerPosition(e.getData());\r\n    },\r\n\r\n    /**\r\n     * Creates a blocker for the splitter which takes all bouse events and\r\n     * also handles the offset and cursor.\r\n     *\r\n     * @param orientation {String} The orientation of the pane.\r\n     */\r\n    __createBlocker(orientation) {\r\n      this.__blocker = new qx.ui.splitpane.Blocker(orientation);\r\n      this.getContentElement().add(this.__blocker);\r\n\r\n      var splitter = this.getChildControl(\"splitter\");\r\n      var splitterWidth = splitter.getWidth();\r\n      if (!splitterWidth) {\r\n        splitter.addListenerOnce(\"appear\", () => {\r\n          this.__setBlockerPosition();\r\n        });\r\n      }\r\n\r\n      // resize listener to remove the blocker in case the splitter\r\n      // is removed.\r\n      splitter.addListener(\"resize\", e => {\r\n        var bounds = e.getData();\r\n        if (\r\n          this.getChildControl(\"splitter\").isKnobVisible() &&\r\n          (bounds.height == 0 || bounds.width == 0)\r\n        ) {\r\n          this.__blocker.hide();\r\n        } else {\r\n          this.__blocker.show();\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Returns the blocker used over the splitter. this could be used for\r\n     * adding event listeners like tap or dbltap.\r\n     *\r\n     * @return {qx.ui.splitpane.Blocker} The used blocker element.\r\n     *\r\n     * @internal\r\n     */\r\n    getBlocker() {\r\n      return this.__blocker;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PROPERTY APPLY METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Apply routine for the orientation property.\r\n     *\r\n     * Sets the pane's layout to vertical or horizontal split layout.\r\n     *\r\n     * @param value {String} The new value of the orientation property\r\n     * @param old {String} The old value of the orientation property\r\n     */\r\n    _applyOrientation(value, old) {\r\n      // ARIA attrs\r\n      this.getContentElement().setAttribute(\"aria-orientation\", value);\r\n\r\n      var slider = this.getChildControl(\"slider\");\r\n      var splitter = this.getChildControl(\"splitter\");\r\n\r\n      // Store boolean flag for faster access\r\n      this.__isHorizontal = value === \"horizontal\";\r\n\r\n      if (!this.__blocker) {\r\n        this.__createBlocker(value);\r\n      }\r\n\r\n      // update the blocker\r\n      this.__blocker.setOrientation(value);\r\n\r\n      // Dispose old layout\r\n      var oldLayout = this._getLayout();\r\n      if (oldLayout) {\r\n        oldLayout.dispose();\r\n      }\r\n\r\n      // Create new layout\r\n      var newLayout =\r\n        value === \"vertical\"\r\n          ? new qx.ui.splitpane.VLayout()\r\n          : new qx.ui.splitpane.HLayout();\r\n      this._setLayout(newLayout);\r\n\r\n      // Update states for splitter and slider\r\n      splitter.removeState(old);\r\n      splitter.addState(value);\r\n      splitter.getChildControl(\"knob\").removeState(old);\r\n      splitter.getChildControl(\"knob\").addState(value);\r\n      slider.removeState(old);\r\n      slider.addState(value);\r\n\r\n      // flush (needs to be done for the blocker update) and update the blocker\r\n      qx.ui.core.queue.Manager.flush();\r\n      this.__setBlockerPosition();\r\n    },\r\n\r\n    // property apply\r\n    _applyOffset(value, old) {\r\n      this.__setBlockerPosition();\r\n    },\r\n\r\n    /**\r\n     * Helper for setting the blocker to the right position, which depends on\r\n     * the offset, orientation and the current position of the splitter.\r\n     *\r\n     * @param bounds {Map?null} If the bounds of the splitter are known,\r\n     *   they can be added.\r\n     */\r\n    __setBlockerPosition(bounds) {\r\n      var splitter = this.getChildControl(\"splitter\");\r\n      var offset = this.getOffset();\r\n      var splitterBounds = splitter.getBounds();\r\n      var splitterElem = splitter.getContentElement().getDomElement();\r\n\r\n      // do nothing if the splitter is not ready\r\n      if (!splitterElem) {\r\n        return;\r\n      }\r\n\r\n      // recalculate the dimensions of the blocker\r\n      if (this.__isHorizontal) {\r\n        // get the width either of the given bounds or of the read bounds\r\n        var width = null;\r\n        if (bounds) {\r\n          width = bounds.width;\r\n        } else if (splitterBounds) {\r\n          width = splitterBounds.width;\r\n        }\r\n        var left = bounds && bounds.left;\r\n\r\n        if (width || !this.getChildControl(\"splitter\").isKnobVisible()) {\r\n          if (isNaN(left)) {\r\n            left = qx.bom.element.Location.getPosition(splitterElem).left;\r\n          }\r\n          this.__blocker.setWidth(offset, width || 6);\r\n          this.__blocker.setLeft(offset, left);\r\n        }\r\n\r\n        // vertical case\r\n      } else {\r\n        // get the height either of the given bounds or of the read bounds\r\n        var height = null;\r\n        if (bounds) {\r\n          height = bounds.height;\r\n        } else if (splitterBounds) {\r\n          height = splitterBounds.height;\r\n        }\r\n        var top = bounds && bounds.top;\r\n\r\n        if (height || !this.getChildControl(\"splitter\").isKnobVisible()) {\r\n          if (isNaN(top)) {\r\n            top = qx.bom.element.Location.getPosition(splitterElem).top;\r\n          }\r\n          this.__blocker.setHeight(offset, height || 6);\r\n          this.__blocker.setTop(offset, top);\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PUBLIC METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Adds a widget to the pane.\r\n     *\r\n     * Sets the pane's layout to vertical or horizontal split layout. Depending on the\r\n     * pane's layout the first widget will be the left or top widget, the second one\r\n     * the bottom or right widget. Adding more than two widgets will overwrite the\r\n     * existing ones.\r\n     *\r\n     * @param widget {qx.ui.core.Widget} The widget to be inserted into pane.\r\n     * @param flex {Number} The (optional) layout property for the widget's flex value.\r\n     */\r\n    add(widget, flex) {\r\n      if (flex === undefined) {\r\n        this._add(widget);\r\n      } else {\r\n        this._add(widget, { flex: flex });\r\n      }\r\n      this.__children.push(widget);\r\n    },\r\n\r\n    /**\r\n     * Removes the given widget from the pane.\r\n     *\r\n     * @param widget {qx.ui.core.Widget} The widget to be removed.\r\n     */\r\n    remove(widget) {\r\n      this._remove(widget);\r\n      qx.lang.Array.remove(this.__children, widget);\r\n    },\r\n\r\n    /**\r\n     * Returns an array containing the pane's content.\r\n     *\r\n     * @return {qx.ui.core.Widget[]} The pane's child widgets\r\n     */\r\n    getChildren() {\r\n      return this.__children;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      POINTER LISTENERS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Handler for pointerdown event.\r\n     *\r\n     * Shows slider widget and starts drag session if pointer is near/on splitter widget.\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointerdown event\r\n     */\r\n    _onPointerDown(e) {\r\n      // Only proceed if left pointer button is pressed and the splitter is active\r\n      if (!e.isLeftPressed()) {\r\n        return;\r\n      }\r\n\r\n      var splitter = this.getChildControl(\"splitter\");\r\n\r\n      // Store offset between pointer event coordinates and splitter\r\n      var splitterLocation = splitter.getContentLocation();\r\n      var paneLocation = this.getContentLocation();\r\n      this.__splitterOffset = this.__isHorizontal\r\n        ? e.getDocumentLeft() - splitterLocation.left + paneLocation.left\r\n        : e.getDocumentTop() - splitterLocation.top + paneLocation.top;\r\n\r\n      // Synchronize slider to splitter size and show it\r\n      var slider = this.getChildControl(\"slider\");\r\n      var splitterBounds = splitter.getBounds();\r\n      slider.setUserBounds(\r\n        splitterBounds.left,\r\n        splitterBounds.top,\r\n        splitterBounds.width || 6,\r\n        splitterBounds.height || 6\r\n      );\r\n\r\n      slider.setZIndex(splitter.getZIndex() + 1);\r\n      slider.show();\r\n\r\n      // Enable session\r\n      this.__activeDragSession = true;\r\n      this.__blocker.capture();\r\n\r\n      e.stop();\r\n    },\r\n\r\n    /**\r\n     * Handler for pointermove event.\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointermove event\r\n     */\r\n    _onPointerMove(e) {\r\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\r\n\r\n      // Check if slider is already being dragged\r\n      if (this.__activeDragSession) {\r\n        // Compute new children sizes\r\n        this.__computeSizes();\r\n\r\n        // Update slider position\r\n        var slider = this.getChildControl(\"slider\");\r\n        var pos = this.__beginSize;\r\n\r\n        if (this.__isHorizontal) {\r\n          slider.setDomLeft(pos);\r\n          this.__blocker.setStyle(\"left\", pos - this.getOffset() + \"px\");\r\n        } else {\r\n          slider.setDomTop(pos);\r\n          this.__blocker.setStyle(\"top\", pos - this.getOffset() + \"px\");\r\n        }\r\n\r\n        e.stop();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handler for pointerout event\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointerout event\r\n     */\r\n    _onPointerOut(e) {\r\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\r\n    },\r\n\r\n    /**\r\n     * Handler for pointerup event\r\n     *\r\n     * Sets widget sizes if dragging session has been active.\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointerup event\r\n     */\r\n    _onPointerUp(e) {\r\n      if (!this.__activeDragSession) {\r\n        return;\r\n      }\r\n\r\n      // Set sizes to both widgets\r\n      this._finalizeSizes();\r\n\r\n      // Hide the slider\r\n      var slider = this.getChildControl(\"slider\");\r\n      slider.exclude();\r\n\r\n      // Cleanup\r\n      this.__activeDragSession = false;\r\n      this.releaseCapture();\r\n\r\n      e.stop();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      INTERVAL HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Updates widgets' sizes based on the slider position.\r\n     */\r\n    _finalizeSizes() {\r\n      var beginSize = this.__beginSize;\r\n      var endSize = this.__endSize;\r\n\r\n      if (beginSize == null) {\r\n        return;\r\n      }\r\n\r\n      var children = this._getChildren();\r\n      var firstWidget = children[2];\r\n      var secondWidget = children[3];\r\n\r\n      // Read widgets' flex values\r\n      var firstFlexValue = firstWidget.getLayoutProperties().flex;\r\n      var secondFlexValue = secondWidget.getLayoutProperties().flex;\r\n\r\n      // Both widgets have flex values\r\n      if (firstFlexValue != 0 && secondFlexValue != 0) {\r\n        firstWidget.setLayoutProperties({ flex: beginSize });\r\n        secondWidget.setLayoutProperties({ flex: endSize });\r\n      }\r\n\r\n      // Update both sizes\r\n      else {\r\n        // Set widths to static widgets\r\n        if (this.__isHorizontal) {\r\n          firstWidget.setWidth(beginSize);\r\n          secondWidget.setWidth(endSize);\r\n        } else {\r\n          firstWidget.setHeight(beginSize);\r\n          secondWidget.setHeight(endSize);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Computes widgets' sizes based on the pointer coordinate.\r\n     */\r\n    __computeSizes() {\r\n      if (this.__isHorizontal) {\r\n        var min = \"minWidth\",\r\n          size = \"width\",\r\n          max = \"maxWidth\",\r\n          pointer = this.__lastPointerX;\r\n      } else {\r\n        var min = \"minHeight\",\r\n          size = \"height\",\r\n          max = \"maxHeight\",\r\n          pointer = this.__lastPointerY;\r\n      }\r\n\r\n      var children = this._getChildren();\r\n      var beginHint = children[2].getSizeHint();\r\n      var endHint = children[3].getSizeHint();\r\n\r\n      // Area given to both widgets\r\n      var allocatedSize =\r\n        children[2].getBounds()[size] + children[3].getBounds()[size];\r\n\r\n      // Calculate widget sizes\r\n      var beginSize = pointer - this.__splitterOffset;\r\n      var endSize = allocatedSize - beginSize;\r\n\r\n      // Respect minimum limits\r\n      if (beginSize < beginHint[min]) {\r\n        endSize -= beginHint[min] - beginSize;\r\n        beginSize = beginHint[min];\r\n      } else if (endSize < endHint[min]) {\r\n        beginSize -= endHint[min] - endSize;\r\n        endSize = endHint[min];\r\n      }\r\n\r\n      // Respect maximum limits\r\n      if (beginSize > beginHint[max]) {\r\n        endSize += beginSize - beginHint[max];\r\n        beginSize = beginHint[max];\r\n      } else if (endSize > endHint[max]) {\r\n        beginSize += endSize - endHint[max];\r\n        endSize = endHint[max];\r\n      }\r\n\r\n      // Store sizes\r\n      this.__beginSize = beginSize;\r\n      this.__endSize = endSize;\r\n    },\r\n\r\n    /**\r\n     * Determines whether this is an active drag session\r\n     *\r\n     * @return {Boolean} True if active drag session, otherwise false.\r\n     */\r\n    _isActiveDragSession() {\r\n      return this.__activeDragSession;\r\n    },\r\n\r\n    /**\r\n     * Sets the last pointer position.\r\n     *\r\n     * @param x {Integer} the x position of the pointer.\r\n     * @param y {Integer} the y position of the pointer.\r\n     */\r\n    _setLastPointerPosition(x, y) {\r\n      this.__lastPointerX = x;\r\n      this.__lastPointerY = y;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this.__children = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,sBAAsB,EAAE;IACtCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,IAAI,CAACC,MAAM;IAEzB;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,WAAW,EAAE;MACrBX,EAAA,CAAAO,EAAA,CAAAC,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MAEA,IAAI,CAACC,SAAU,GAAG,EAAE;;MAEpB;MACA,IAAIH,WAAW,EAAE;QACf,IAAI,CAACI,cAAc,CAACJ,WAAW,CAAC;MAClC,CAAC,MAAM;QACL,IAAI,CAACK,eAAe,CAAC,CAAC;MACxB;;MAEA;MACA,IAAI,CAACC,SAAS,CAACC,WAAW,CAAC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;MACpE,IAAI,CAACF,SAAS,CAACC,WAAW,CAAC,WAAW,EAAE,IAAI,CAACE,YAAY,EAAE,IAAI,CAAC;MAChE,IAAI,CAACH,SAAS,CAACC,WAAW,CAAC,aAAa,EAAE,IAAI,CAACG,cAAc,EAAE,IAAI,CAAC;MACpE,IAAI,CAACJ,SAAS,CAACC,WAAW,CAAC,YAAY,EAAE,IAAI,CAACI,aAAa,EAAE,IAAI,CAAC;MAClE,IAAI,CAACL,SAAS,CAACC,WAAW,CAAC,aAAa,EAAE,IAAI,CAACE,YAAY,EAAE,IAAI,CAAC;IACpE,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEG,UAAU,EAAE;MACV;MACAC,UAAU,EAAE;QACVC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;MACIC,MAAM,EAAE;QACNC,KAAK,EAAE,SAAS;QAChBF,IAAI,EAAE,CAAC;QACPG,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIlB,WAAW,EAAE;QACXe,IAAI,EAAE,YAAY;QAClBE,KAAK,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;QACjCC,KAAK,EAAE;MACT;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,SAAgB,EAAE,IAAI;MACtBC,SAAmB,EAAE,KAAK;MAC1BC,SAAc,EAAE,IAAI;MACpBC,SAAc,EAAE,IAAI;MACpBC,SAAc,EAAE,IAAI;MACpBC,SAAW,EAAE,IAAI;MACjBC,SAAS,EAAE,IAAI;MACfvB,SAAU,EAAE,IAAI;MAChBG,SAAS,EAAE,IAAI;MAEf;MACAqB,uBAAuB,WAAAA,wBAACC,EAAE,EAAEC,IAAI,EAAE;QAChC,IAAIC,OAAO;QAEX,QAAQF,EAAE;UACR;UACA,KAAK,QAAQ;YACXE,OAAO,GAAG,IAAIzC,EAAE,CAACO,EAAE,CAACmC,SAAS,CAACC,MAAM,CAAC,IAAI,CAAC;YAC1CF,OAAO,CAACG,OAAO,CAAC,CAAC;YACjB,IAAI,CAACC,IAAI,CAACJ,OAAO,EAAE;cAAEK,IAAI,EAAEP;YAAG,CAAC,CAAC;YAChC;;UAEF;UACA,KAAK,UAAU;YACbE,OAAO,GAAG,IAAIzC,EAAE,CAACO,EAAE,CAACmC,SAAS,CAACK,QAAQ,CAAC,IAAI,CAAC;YAC5C,IAAI,CAACF,IAAI,CAACJ,OAAO,EAAE;cAAEK,IAAI,EAAEP;YAAG,CAAC,CAAC;YAChCE,OAAO,CAACvB,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC8B,SAAgB,EAAE,IAAI,CAAC;YACxD;QACJ;QAEA,OAAOP,OAAO,IAAAzC,EAAA,CAAAO,EAAA,CAAAmC,SAAA,CAAAO,IAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAb,uBAAA,CAAAzB,IAAA,OAAkC0B,EAAE,CAAC;MACrD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIS,SAAgB,WAAAI,UAACC,CAAC,EAAE;QAClB,IAAI,CAACC,UAAoB,CAACD,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,UAAe,WAAAC,WAAC9C,WAAW,EAAE;QAAA,IAAA+C,KAAA;QAC3B,IAAI,CAACzC,SAAS,GAAG,IAAIjB,EAAE,CAACO,EAAE,CAACmC,SAAS,CAACiB,OAAO,CAAChD,WAAW,CAAC;QACzD,IAAI,CAACiD,iBAAiB,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,CAAC5C,SAAS,CAAC;QAE5C,IAAI6C,QAAQ,GAAG,IAAI,CAACC,eAAe,CAAC,UAAU,CAAC;QAC/C,IAAIC,aAAa,GAAGF,QAAQ,CAACG,QAAQ,CAAC,CAAC;QACvC,IAAI,CAACD,aAAa,EAAE;UAClBF,QAAQ,CAACI,eAAe,CAAC,QAAQ,EAAE,YAAM;YACvCR,KAAI,CAACJ,UAAoB,CAAC,CAAC;UAC7B,CAAC,CAAC;QACJ;;QAEA;QACA;QACAQ,QAAQ,CAAC5C,WAAW,CAAC,QAAQ,EAAE,UAAAmC,CAAC,EAAI;UAClC,IAAIc,MAAM,GAAGd,CAAC,CAACE,OAAO,CAAC,CAAC;UACxB,IACEG,KAAI,CAACK,eAAe,CAAC,UAAU,CAAC,CAACK,aAAa,CAAC,CAAC,KAC/CD,MAAM,CAACE,MAAM,IAAI,CAAC,IAAIF,MAAM,CAACG,KAAK,IAAI,CAAC,CAAC,EACzC;YACAZ,KAAI,CAACzC,SAAS,CAACsD,IAAI,CAAC,CAAC;UACvB,CAAC,MAAM;YACLb,KAAI,CAACzC,SAAS,CAACuD,IAAI,CAAC,CAAC;UACvB;QACF,CAAC,CAAC;MACJ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAAA,EAAG;QACX,OAAO,IAAI,CAACxD,SAAS;MACvB,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIyD,iBAAiB,WAAAA,kBAACC,KAAK,EAAEC,GAAG,EAAE;QAC5B;QACA,IAAI,CAAChB,iBAAiB,CAAC,CAAC,CAACiB,YAAY,CAAC,kBAAkB,EAAEF,KAAK,CAAC;QAEhE,IAAIG,MAAM,GAAG,IAAI,CAACf,eAAe,CAAC,QAAQ,CAAC;QAC3C,IAAID,QAAQ,GAAG,IAAI,CAACC,eAAe,CAAC,UAAU,CAAC;;QAE/C;QACA,IAAI,CAAC5B,SAAc,GAAGwC,KAAK,KAAK,YAAY;QAE5C,IAAI,CAAC,IAAI,CAAC1D,SAAS,EAAE;UACnB,IAAI,CAACuC,UAAe,CAACmB,KAAK,CAAC;QAC7B;;QAEA;QACA,IAAI,CAAC1D,SAAS,CAACF,cAAc,CAAC4D,KAAK,CAAC;;QAEpC;QACA,IAAII,SAAS,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;QACjC,IAAID,SAAS,EAAE;UACbA,SAAS,CAACE,OAAO,CAAC,CAAC;QACrB;;QAEA;QACA,IAAIC,SAAS,GACXP,KAAK,KAAK,UAAU,GAChB,IAAI3E,EAAE,CAACO,EAAE,CAACmC,SAAS,CAACyC,OAAO,CAAC,CAAC,GAC7B,IAAInF,EAAE,CAACO,EAAE,CAACmC,SAAS,CAAC0C,OAAO,CAAC,CAAC;QACnC,IAAI,CAACC,UAAU,CAACH,SAAS,CAAC;;QAE1B;QACApB,QAAQ,CAACwB,WAAW,CAACV,GAAG,CAAC;QACzBd,QAAQ,CAACyB,QAAQ,CAACZ,KAAK,CAAC;QACxBb,QAAQ,CAACC,eAAe,CAAC,MAAM,CAAC,CAACuB,WAAW,CAACV,GAAG,CAAC;QACjDd,QAAQ,CAACC,eAAe,CAAC,MAAM,CAAC,CAACwB,QAAQ,CAACZ,KAAK,CAAC;QAChDG,MAAM,CAACQ,WAAW,CAACV,GAAG,CAAC;QACvBE,MAAM,CAACS,QAAQ,CAACZ,KAAK,CAAC;;QAEtB;QACA3E,EAAE,CAACO,EAAE,CAACC,IAAI,CAACgF,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;QAChC,IAAI,CAACpC,UAAoB,CAAC,CAAC;MAC7B,CAAC;MAED;MACAqC,YAAY,WAAAA,aAAChB,KAAK,EAAEC,GAAG,EAAE;QACvB,IAAI,CAACtB,UAAoB,CAAC,CAAC;MAC7B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIA,UAAoB,WAAAsC,WAACzB,MAAM,EAAE;QAC3B,IAAIL,QAAQ,GAAG,IAAI,CAACC,eAAe,CAAC,UAAU,CAAC;QAC/C,IAAIpC,MAAM,GAAG,IAAI,CAACkE,SAAS,CAAC,CAAC;QAC7B,IAAIC,cAAc,GAAGhC,QAAQ,CAACiC,SAAS,CAAC,CAAC;QACzC,IAAIC,YAAY,GAAGlC,QAAQ,CAACF,iBAAiB,CAAC,CAAC,CAACqC,aAAa,CAAC,CAAC;;QAE/D;QACA,IAAI,CAACD,YAAY,EAAE;UACjB;QACF;;QAEA;QACA,IAAI,IAAI,CAAC7D,SAAc,EAAE;UACvB;UACA,IAAImC,KAAK,GAAG,IAAI;UAChB,IAAIH,MAAM,EAAE;YACVG,KAAK,GAAGH,MAAM,CAACG,KAAK;UACtB,CAAC,MAAM,IAAIwB,cAAc,EAAE;YACzBxB,KAAK,GAAGwB,cAAc,CAACxB,KAAK;UAC9B;UACA,IAAI4B,IAAI,GAAG/B,MAAM,IAAIA,MAAM,CAAC+B,IAAI;UAEhC,IAAI5B,KAAK,IAAI,CAAC,IAAI,CAACP,eAAe,CAAC,UAAU,CAAC,CAACK,aAAa,CAAC,CAAC,EAAE;YAC9D,IAAI+B,KAAK,CAACD,IAAI,CAAC,EAAE;cACfA,IAAI,GAAGlG,EAAE,CAACoG,GAAG,CAACC,OAAO,CAACC,QAAQ,CAACC,WAAW,CAACP,YAAY,CAAC,CAACE,IAAI;YAC/D;YACA,IAAI,CAACjF,SAAS,CAACuF,QAAQ,CAAC7E,MAAM,EAAE2C,KAAK,IAAI,CAAC,CAAC;YAC3C,IAAI,CAACrD,SAAS,CAACwF,OAAO,CAAC9E,MAAM,EAAEuE,IAAI,CAAC;UACtC;;UAEA;QACF,CAAC,MAAM;UACL;UACA,IAAI7B,MAAM,GAAG,IAAI;UACjB,IAAIF,MAAM,EAAE;YACVE,MAAM,GAAGF,MAAM,CAACE,MAAM;UACxB,CAAC,MAAM,IAAIyB,cAAc,EAAE;YACzBzB,MAAM,GAAGyB,cAAc,CAACzB,MAAM;UAChC;UACA,IAAIqC,GAAG,GAAGvC,MAAM,IAAIA,MAAM,CAACuC,GAAG;UAE9B,IAAIrC,MAAM,IAAI,CAAC,IAAI,CAACN,eAAe,CAAC,UAAU,CAAC,CAACK,aAAa,CAAC,CAAC,EAAE;YAC/D,IAAI+B,KAAK,CAACO,GAAG,CAAC,EAAE;cACdA,GAAG,GAAG1G,EAAE,CAACoG,GAAG,CAACC,OAAO,CAACC,QAAQ,CAACC,WAAW,CAACP,YAAY,CAAC,CAACU,GAAG;YAC7D;YACA,IAAI,CAACzF,SAAS,CAAC0F,SAAS,CAAChF,MAAM,EAAE0C,MAAM,IAAI,CAAC,CAAC;YAC7C,IAAI,CAACpD,SAAS,CAAC2F,MAAM,CAACjF,MAAM,EAAE+E,GAAG,CAAC;UACpC;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI7C,GAAG,WAAAA,IAACgD,MAAM,EAAEC,IAAI,EAAE;QAChB,IAAIA,IAAI,KAAKC,SAAS,EAAE;UACtB,IAAI,CAAClE,IAAI,CAACgE,MAAM,CAAC;QACnB,CAAC,MAAM;UACL,IAAI,CAAChE,IAAI,CAACgE,MAAM,EAAE;YAAEC,IAAI,EAAEA;UAAK,CAAC,CAAC;QACnC;QACA,IAAI,CAAChG,SAAU,CAACkG,IAAI,CAACH,MAAM,CAAC;MAC9B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACII,MAAM,WAAAA,OAACJ,MAAM,EAAE;QACb,IAAI,CAACK,OAAO,CAACL,MAAM,CAAC;QACpB7G,EAAE,CAACmH,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,IAAI,CAACnG,SAAU,EAAE+F,MAAM,CAAC;MAC/C,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIQ,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACvG,SAAU;MACxB,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;MACIK,cAAc,WAAAA,eAACkC,CAAC,EAAE;QAChB;QACA,IAAI,CAACA,CAAC,CAACiE,aAAa,CAAC,CAAC,EAAE;UACtB;QACF;QAEA,IAAIxD,QAAQ,GAAG,IAAI,CAACC,eAAe,CAAC,UAAU,CAAC;;QAE/C;QACA,IAAIwD,gBAAgB,GAAGzD,QAAQ,CAAC0D,kBAAkB,CAAC,CAAC;QACpD,IAAIC,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;QAC5C,IAAI,CAACzF,SAAgB,GAAG,IAAI,CAACI,SAAc,GACvCkB,CAAC,CAACqE,eAAe,CAAC,CAAC,GAAGH,gBAAgB,CAACrB,IAAI,GAAGuB,YAAY,CAACvB,IAAI,GAC/D7C,CAAC,CAACsE,cAAc,CAAC,CAAC,GAAGJ,gBAAgB,CAACb,GAAG,GAAGe,YAAY,CAACf,GAAG;;QAEhE;QACA,IAAI5B,MAAM,GAAG,IAAI,CAACf,eAAe,CAAC,QAAQ,CAAC;QAC3C,IAAI+B,cAAc,GAAGhC,QAAQ,CAACiC,SAAS,CAAC,CAAC;QACzCjB,MAAM,CAAC8C,aAAa,CAClB9B,cAAc,CAACI,IAAI,EACnBJ,cAAc,CAACY,GAAG,EAClBZ,cAAc,CAACxB,KAAK,IAAI,CAAC,EACzBwB,cAAc,CAACzB,MAAM,IAAI,CAC3B,CAAC;QAEDS,MAAM,CAAC+C,SAAS,CAAC/D,QAAQ,CAACgE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;QAC1ChD,MAAM,CAACN,IAAI,CAAC,CAAC;;QAEb;QACA,IAAI,CAACxC,SAAmB,GAAG,IAAI;QAC/B,IAAI,CAACf,SAAS,CAAC8G,OAAO,CAAC,CAAC;QAExB1E,CAAC,CAAC2E,IAAI,CAAC,CAAC;MACV,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI3G,cAAc,WAAAA,eAACgC,CAAC,EAAE;QAChB,IAAI,CAAC4E,uBAAuB,CAAC5E,CAAC,CAACqE,eAAe,CAAC,CAAC,EAAErE,CAAC,CAACsE,cAAc,CAAC,CAAC,CAAC;;QAErE;QACA,IAAI,IAAI,CAAC3F,SAAmB,EAAE;UAC5B;UACA,IAAI,CAACkG,UAAc,CAAC,CAAC;;UAErB;UACA,IAAIpD,MAAM,GAAG,IAAI,CAACf,eAAe,CAAC,QAAQ,CAAC;UAC3C,IAAIoE,GAAG,GAAG,IAAI,CAAC/F,SAAW;UAE1B,IAAI,IAAI,CAACD,SAAc,EAAE;YACvB2C,MAAM,CAACsD,UAAU,CAACD,GAAG,CAAC;YACtB,IAAI,CAAClH,SAAS,CAACoH,QAAQ,CAAC,MAAM,EAAEF,GAAG,GAAG,IAAI,CAACtC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC;UAChE,CAAC,MAAM;YACLf,MAAM,CAACwD,SAAS,CAACH,GAAG,CAAC;YACrB,IAAI,CAAClH,SAAS,CAACoH,QAAQ,CAAC,KAAK,EAAEF,GAAG,GAAG,IAAI,CAACtC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC;UAC/D;UAEAxC,CAAC,CAAC2E,IAAI,CAAC,CAAC;QACV;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI1G,aAAa,WAAAA,cAAC+B,CAAC,EAAE;QACf,IAAI,CAAC4E,uBAAuB,CAAC5E,CAAC,CAACqE,eAAe,CAAC,CAAC,EAAErE,CAAC,CAACsE,cAAc,CAAC,CAAC,CAAC;MACvE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIvG,YAAY,WAAAA,aAACiC,CAAC,EAAE;QACd,IAAI,CAAC,IAAI,CAACrB,SAAmB,EAAE;UAC7B;QACF;;QAEA;QACA,IAAI,CAACuG,cAAc,CAAC,CAAC;;QAErB;QACA,IAAIzD,MAAM,GAAG,IAAI,CAACf,eAAe,CAAC,QAAQ,CAAC;QAC3Ce,MAAM,CAAClC,OAAO,CAAC,CAAC;;QAEhB;QACA,IAAI,CAACZ,SAAmB,GAAG,KAAK;QAChC,IAAI,CAACwG,cAAc,CAAC,CAAC;QAErBnF,CAAC,CAAC2E,IAAI,CAAC,CAAC;MACV,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;MACIO,cAAc,WAAAA,eAAA,EAAG;QACf,IAAIE,SAAS,GAAG,IAAI,CAACrG,SAAW;QAChC,IAAIsG,OAAO,GAAG,IAAI,CAACrG,SAAS;QAE5B,IAAIoG,SAAS,IAAI,IAAI,EAAE;UACrB;QACF;QAEA,IAAIE,QAAQ,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;QAClC,IAAIC,WAAW,GAAGF,QAAQ,CAAC,CAAC,CAAC;QAC7B,IAAIG,YAAY,GAAGH,QAAQ,CAAC,CAAC,CAAC;;QAE9B;QACA,IAAII,cAAc,GAAGF,WAAW,CAACG,mBAAmB,CAAC,CAAC,CAAClC,IAAI;QAC3D,IAAImC,eAAe,GAAGH,YAAY,CAACE,mBAAmB,CAAC,CAAC,CAAClC,IAAI;;QAE7D;QACA,IAAIiC,cAAc,IAAI,CAAC,IAAIE,eAAe,IAAI,CAAC,EAAE;UAC/CJ,WAAW,CAACK,mBAAmB,CAAC;YAAEpC,IAAI,EAAE2B;UAAU,CAAC,CAAC;UACpDK,YAAY,CAACI,mBAAmB,CAAC;YAAEpC,IAAI,EAAE4B;UAAQ,CAAC,CAAC;QACrD;;QAEA;QAAA,KACK;UACH;UACA,IAAI,IAAI,CAACvG,SAAc,EAAE;YACvB0G,WAAW,CAACrC,QAAQ,CAACiC,SAAS,CAAC;YAC/BK,YAAY,CAACtC,QAAQ,CAACkC,OAAO,CAAC;UAChC,CAAC,MAAM;YACLG,WAAW,CAAClC,SAAS,CAAC8B,SAAS,CAAC;YAChCK,YAAY,CAACnC,SAAS,CAAC+B,OAAO,CAAC;UACjC;QACF;MACF,CAAC;MAED;AACJ;AACA;MACIR,UAAc,WAAAiB,WAAA,EAAG;QACf,IAAI,IAAI,CAAChH,SAAc,EAAE;UACvB,IAAIiH,GAAG,GAAG,UAAU;YAClBC,IAAI,GAAG,OAAO;YACdC,GAAG,GAAG,UAAU;YAChBC,OAAO,GAAG,IAAI,CAACtH,SAAc;QACjC,CAAC,MAAM;UACL,IAAImH,GAAG,GAAG,WAAW;YACnBC,IAAI,GAAG,QAAQ;YACfC,GAAG,GAAG,WAAW;YACjBC,OAAO,GAAG,IAAI,CAACrH,SAAc;QACjC;QAEA,IAAIyG,QAAQ,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;QAClC,IAAIY,SAAS,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;QACzC,IAAIC,OAAO,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;;QAEvC;QACA,IAAIE,aAAa,GACfhB,QAAQ,CAAC,CAAC,CAAC,CAAC5C,SAAS,CAAC,CAAC,CAACsD,IAAI,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC5C,SAAS,CAAC,CAAC,CAACsD,IAAI,CAAC;;QAE/D;QACA,IAAIZ,SAAS,GAAGc,OAAO,GAAG,IAAI,CAACxH,SAAgB;QAC/C,IAAI2G,OAAO,GAAGiB,aAAa,GAAGlB,SAAS;;QAEvC;QACA,IAAIA,SAAS,GAAGe,SAAS,CAACJ,GAAG,CAAC,EAAE;UAC9BV,OAAO,IAAIc,SAAS,CAACJ,GAAG,CAAC,GAAGX,SAAS;UACrCA,SAAS,GAAGe,SAAS,CAACJ,GAAG,CAAC;QAC5B,CAAC,MAAM,IAAIV,OAAO,GAAGgB,OAAO,CAACN,GAAG,CAAC,EAAE;UACjCX,SAAS,IAAIiB,OAAO,CAACN,GAAG,CAAC,GAAGV,OAAO;UACnCA,OAAO,GAAGgB,OAAO,CAACN,GAAG,CAAC;QACxB;;QAEA;QACA,IAAIX,SAAS,GAAGe,SAAS,CAACF,GAAG,CAAC,EAAE;UAC9BZ,OAAO,IAAID,SAAS,GAAGe,SAAS,CAACF,GAAG,CAAC;UACrCb,SAAS,GAAGe,SAAS,CAACF,GAAG,CAAC;QAC5B,CAAC,MAAM,IAAIZ,OAAO,GAAGgB,OAAO,CAACJ,GAAG,CAAC,EAAE;UACjCb,SAAS,IAAIC,OAAO,GAAGgB,OAAO,CAACJ,GAAG,CAAC;UACnCZ,OAAO,GAAGgB,OAAO,CAACJ,GAAG,CAAC;QACxB;;QAEA;QACA,IAAI,CAAClH,SAAW,GAAGqG,SAAS;QAC5B,IAAI,CAACpG,SAAS,GAAGqG,OAAO;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIkB,oBAAoB,WAAAA,qBAAA,EAAG;QACrB,OAAO,IAAI,CAAC5H,SAAmB;MACjC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIiG,uBAAuB,WAAAA,wBAAC4B,CAAC,EAAEC,CAAC,EAAE;QAC5B,IAAI,CAAC7H,SAAc,GAAG4H,CAAC;QACvB,IAAI,CAAC3H,SAAc,GAAG4H,CAAC;MACzB;IACF,CAAC;IAEDC,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACjJ,SAAU,GAAG,IAAI;IACxB;EACF,CAAC,CAAC;EA1kBFd,EAAE,CAACO,EAAE,CAACmC,SAAS,CAACO,IAAI,CAAC9C,aAAa,GAAGA,aAAa;AAAC"
}