{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "__messaging",
    "event",
    "Messaging",
    "__navigationHandler",
    "bom",
    "History",
    "getInstance",
    "addListener",
    "__onChangeHash",
    "statics",
    "DEFAULT_PATH",
    "__back",
    "__forward",
    "members",
    "__currentGetPath",
    "init",
    "defaultPath",
    "path",
    "getState",
    "_getPathOrFallback",
    "_executeGet",
    "has",
    "application",
    "Routing",
    "onGet",
    "route",
    "handler",
    "scope",
    "on",
    "onPost",
    "onPut",
    "onDelete",
    "onAny",
    "remove",
    "id",
    "__P_106_2",
    "evt",
    "getData",
    "customData",
    "fromEvent",
    "history",
    "__getFromHistory",
    "data",
    "fromHistory",
    "action",
    "__replaceCustomData",
    "__addToHistory",
    "setState",
    "emit",
    "executeGet",
    "execute",
    "executePost",
    "params",
    "executePut",
    "executeDelete",
    "__P_106_8",
    "unshift",
    "__P_106_7",
    "register",
    "i",
    "length",
    "j",
    "__P_106_6",
    "back",
    "forward",
    "found",
    "entry",
    "toForward",
    "splice",
    "a",
    "toBack",
    "shift",
    "state",
    "dispose",
    "removeListener"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/application/Routing.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (wittemann)\r\n     * Tino Butz (tbtz)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n *\r\n * Basic application routing manager.\r\n *\r\n * Define routes to react on certain GET / POST / DELETE / PUT operations.\r\n *\r\n * * GET is triggered when the hash value of the url is changed. Can be called\r\n *   manually by calling the {@link #executeGet} method.\r\n * * POST / DELETE / PUT has to be triggered manually right now (will be changed later)\r\n *    by calling the {@link #executePost}, {@link #executeDelete}, {@link #executePut} method.\r\n *\r\n * This manager can also be used to provide browser history.\r\n *\r\n * *Example*\r\n *\r\n * Here is a little example of how to use the widget.\r\n *\r\n * <pre class='javascript'>\r\n *   var r = new qx.application.Routing();\r\n *\r\n *   // show the start page, when no hash is given or the hash is \"#/\"\r\n *   r.onGet(\"/\", function(data) {\r\n *     startPage.show();\r\n *   }, this);\r\n *\r\n *   // whenever the url /address is called show the address book page.\r\n *   r.onGet(\"/address\", function(data) {\r\n *     addressBookPage.show();\r\n *   }, this);\r\n *\r\n *   // address with the parameter \"id\"\r\n *   r.onGet(\"/address/{id}\", function(data) {\r\n *     addressPage.show();\r\n *     model.loadAddress(data.params.id);\r\n *   }, this);\r\n *\r\n *   // Alternative you can use regExp for a route\r\n *   r.onGet(/address\\/(.*)/, function(data) {\r\n *     addressPage.show();\r\n *     model.loadAddress(data.params.0);\r\n *   }, this);\r\n *\r\n *   // make sure that the data is always loaded\r\n *   r.onGet(\"/address.*\", function(data) {\r\n *     if (!model.isLoaded()) {\r\n *       model.loadAddresses();\r\n *     }\r\n *   }, this);\r\n *\r\n *   // update the address\r\n *   r.onPost(\"/address/{id}\", function(data) {\r\n *     model.updateAddress(data.params.id);\r\n *   }, this);\r\n *\r\n *   // delete the address and navigate back\r\n *   r.onDelete(\"/address/{id}\", function(data) {\r\n *     model.deleteAddress(data.params.id);\r\n *     r.executeGet(\"/address\", {reverse:true});\r\n *   }, this);\r\n * </pre>\r\n *\r\n * This example defines different routes to handle navigation events.\r\n *\r\n * Note this class must be disposed after use\r\n */\r\nqx.Bootstrap.define(\"qx.application.Routing\", {\r\n  implement: [qx.core.IDisposable],\r\n\r\n  construct() {\r\n    this.__messaging = new qx.event.Messaging();\r\n\r\n    this.__navigationHandler = qx.bom.History.getInstance();\r\n    this.__navigationHandler.addListener(\r\n      \"changeState\",\r\n      this.__onChangeHash,\r\n      this\r\n    );\r\n  },\r\n\r\n  statics: {\r\n    DEFAULT_PATH: \"/\",\r\n\r\n    __back: [],\r\n    __forward: []\r\n  },\r\n\r\n  members: {\r\n    __navigationHandler: null,\r\n    __messaging: null,\r\n\r\n    __currentGetPath: null,\r\n\r\n    /**\r\n     * Initialization method used to execute the get route for the currently set history path.\r\n     * If no path is set, either the given argument named <code>defaultPath</code>\r\n     * or the {@link #DEFAULT_PATH} will be used for initialization.\r\n     *\r\n     * @param defaultPath {String?} Optional default path for initialization.\r\n     */\r\n    init(defaultPath) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        if (defaultPath != null) {\r\n          qx.core.Assert.assertString(\r\n            defaultPath,\r\n            \"Invalid argument 'defaultPath'\"\r\n          );\r\n        }\r\n      }\r\n\r\n      var path = this.getState();\r\n      path = this._getPathOrFallback(path, defaultPath);\r\n      this._executeGet(path, null, true);\r\n    },\r\n\r\n    /**\r\n     * Checks if path is valid and registered in channel \"get\" and then just returns it.\r\n     * If the path is not valid either the <code>defaultPath</code> (if given) or the\r\n     * {@link #DEFAULT_PATH} will be returned.\r\n     *\r\n     * @param path {String} Path which gets checked.\r\n     * @param defaultPath {String?} Optional default path.\r\n     * @return {String} A valid path.\r\n     */\r\n    _getPathOrFallback(path, defaultPath) {\r\n      if (path == \"\" || path == null || !this.__messaging.has(\"get\", path)) {\r\n        path = defaultPath || qx.application.Routing.DEFAULT_PATH;\r\n      }\r\n      return path;\r\n    },\r\n\r\n    /**\r\n     * Adds a route handler for the \"get\" operation. The route gets called\r\n     * when the {@link #executeGet} method found a match.\r\n     *\r\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\r\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\r\n     * @param scope {Object} The scope of the handler.\r\n     * @return {String} Event listener ID\r\n     */\r\n    onGet(route, handler, scope) {\r\n      return this.__messaging.on(\"get\", route, handler, scope);\r\n    },\r\n\r\n    /**\r\n     * This is a shorthand for {@link #onGet}.\r\n     *\r\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\r\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\r\n     * @param scope {Object} The scope of the handler.\r\n     * @return {String} Event listener ID\r\n     */\r\n    on(route, handler, scope) {\r\n      return this.onGet(route, handler, scope);\r\n    },\r\n\r\n    /**\r\n     * Adds a route handler for the \"post\" operation. The route gets called\r\n     * when the {@link #executePost} method found a match.\r\n     *\r\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\r\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\r\n     * @param scope {Object} The scope of the handler.\r\n     * @return {String} Event listener ID\r\n     */\r\n    onPost(route, handler, scope) {\r\n      return this.__messaging.on(\"post\", route, handler, scope);\r\n    },\r\n\r\n    /**\r\n     * Adds a route handler for the \"put\" operation. The route gets called\r\n     * when the {@link #executePut} method found a match.\r\n     *\r\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\r\n     * @param handler {Function} The handler to call, when the route matches with the executed path\r\n     * @param scope {Object} The scope of the handler\r\n     * @return {String} Event listener ID\r\n     */\r\n    onPut(route, handler, scope) {\r\n      return this.__messaging.on(\"put\", route, handler, scope);\r\n    },\r\n\r\n    /**\r\n     * Adds a route handler for the \"delete\" operation. The route gets called\r\n     * when the {@link #executeDelete} method found a match.\r\n     *\r\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\r\n     * @param handler {Function} The handler to call, when the route matches with the executed path\r\n     * @param scope {Object} The scope of the handler\r\n     * @return {String} Event listener ID\r\n     */\r\n    onDelete(route, handler, scope) {\r\n      return this.__messaging.on(\"delete\", route, handler, scope);\r\n    },\r\n\r\n    /**\r\n     * Adds a route handler for the \"any\" operation. The \"any\" operation is called\r\n     * before all other operations.\r\n     *\r\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\r\n     * @param handler {Function} The handler to call, when the route matches with the executed path\r\n     * @param scope {Object} The scope of the handler\r\n     * @return {String} Event listener ID\r\n     */\r\n    onAny(route, handler, scope) {\r\n      return this.__messaging.onAny(route, handler, scope);\r\n    },\r\n\r\n    /**\r\n     * Removes a registered route by the given id.\r\n     *\r\n     * @param id {String} The id of the registered route\r\n     */\r\n    remove(id) {\r\n      this.__messaging.remove(id);\r\n    },\r\n\r\n    /**\r\n     * Hash change event handler.\r\n     *\r\n     * @param evt {qx.event.type.Data} The changeHash event.\r\n     */\r\n    __onChangeHash(evt) {\r\n      var path = evt.getData();\r\n      path = this._getPathOrFallback(path);\r\n\r\n      if (path != this.__currentGetPath) {\r\n        this._executeGet(path, null, true);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Executes the get operation and informs all matching route handler.\r\n     *\r\n     * @param path {String} The path to execute\r\n     * @param customData {var} The given custom data that should be propagated\r\n     * @param fromEvent {var} Determines whether this method was called from history\r\n     *\r\n     */\r\n    _executeGet(path, customData, fromEvent) {\r\n      this.__currentGetPath = path;\r\n\r\n      var history = this.__getFromHistory(path);\r\n      if (history) {\r\n        if (!customData) {\r\n          customData = history.data.customData || {};\r\n          customData.fromHistory = true;\r\n          customData.action = history.action;\r\n          customData.fromEvent = fromEvent;\r\n        } else {\r\n          this.__replaceCustomData(path, customData);\r\n        }\r\n      } else {\r\n        this.__addToHistory(path, customData);\r\n        qx.application.Routing.__forward = [];\r\n      }\r\n\r\n      this.__navigationHandler.setState(path);\r\n      this.__messaging.emit(\"get\", path, null, customData);\r\n    },\r\n\r\n    /**\r\n     * Executes the get operation and informs all matching route handler.\r\n     *\r\n     * @param path {String} The path to execute\r\n     * @param customData {var} The given custom data that should be propagated\r\n     */\r\n    executeGet(path, customData) {\r\n      this._executeGet(path, customData);\r\n    },\r\n\r\n    /**\r\n     * This is a shorthand for {@link #executeGet}.\r\n     *\r\n     * @param path {String} The path to execute\r\n     * @param customData {var} The given custom data that should be propagated\r\n     */\r\n    execute(path, customData) {\r\n      this.executeGet(path, customData);\r\n    },\r\n\r\n    /**\r\n     * Executes the post operation and informs all matching route handler.\r\n     *\r\n     * @param path {String} The path to execute\r\n     * @param params {Map} The given parameters that should be propagated\r\n     * @param customData {var} The given custom data that should be propagated\r\n     */\r\n    executePost(path, params, customData) {\r\n      this.__messaging.emit(\"post\", path, params, customData);\r\n    },\r\n\r\n    /**\r\n     * Executes the put operation and informs all matching route handler.\r\n     *\r\n     * @param path {String} The path to execute\r\n     * @param params {Map} The given parameters that should be propagated\r\n     * @param customData {var} The given custom data that should be propagated\r\n     */\r\n    executePut(path, params, customData) {\r\n      this.__messaging.emit(\"put\", path, params, customData);\r\n    },\r\n\r\n    /**\r\n     * Executes the delete operation and informs all matching route handler.\r\n     *\r\n     * @param path {String} The path to execute\r\n     * @param params {Map} The given parameters that should be propagated\r\n     * @param customData {var} The given custom data that should be propagated\r\n     */\r\n    executeDelete(path, params, customData) {\r\n      this.__messaging.emit(\"delete\", path, params, customData);\r\n    },\r\n\r\n    /**\r\n     * Returns state value (history hash) of the navigation handler.\r\n     * @return {String} State of history navigation handler\r\n     */\r\n    getState() {\r\n      return this.__navigationHandler.getState();\r\n    },\r\n\r\n    /**\r\n     * Adds the custom data of a given path to the history.\r\n     *\r\n     * @param path {String} The path to store.\r\n     * @param customData {var} The custom data to store\r\n     */\r\n    __addToHistory(path, customData) {\r\n      qx.application.Routing.__back.unshift({\r\n        path: path,\r\n        customData: customData\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Replaces the customData in the history objects with the recent custom data.\r\n     * @param path {String} The path to replace.\r\n     * @param customData {var} The custom data to store.\r\n     */\r\n    __replaceCustomData(path, customData) {\r\n      var register = [\r\n        qx.application.Routing.__back,\r\n        qx.application.Routing.__forward\r\n      ];\r\n\r\n      for (var i = 0; i < register.length; i++) {\r\n        for (var j = 0; j < register[i].length; j++) {\r\n          if (register[i][j].path == path) {\r\n            register[i][j].customData = customData;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns a history entry for a certain path.\r\n     *\r\n     * @param path {String} The path of the entry\r\n     * @return {Map|null} The retrieved entry. <code>null</code> when no entry was found.\r\n     */\r\n    __getFromHistory(path) {\r\n      var back = qx.application.Routing.__back;\r\n      var forward = qx.application.Routing.__forward;\r\n      var found = false;\r\n\r\n      var entry = null;\r\n      var length = back.length;\r\n      for (var i = 0; i < length; i++) {\r\n        if (back[i].path == path) {\r\n          entry = back[i];\r\n          var toForward = back.splice(0, i);\r\n          for (var a = 0; a < toForward.length; a++) {\r\n            forward.unshift(toForward[a]);\r\n          }\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found) {\r\n        return {\r\n          data: entry,\r\n          action: \"back\"\r\n        };\r\n      }\r\n\r\n      var length = forward.length;\r\n      for (var i = 0; i < length; i++) {\r\n        if (forward[i].path == path) {\r\n          entry = forward[i];\r\n          var toBack = forward.splice(0, i + 1);\r\n          for (var a = 0; a < toBack.length; a++) {\r\n            back.unshift(toBack[a]);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (entry) {\r\n        return {\r\n          data: entry,\r\n          action: \"forward\"\r\n        };\r\n      }\r\n      return entry;\r\n    },\r\n\r\n    /**\r\n     * Navigates back to the previously executed path.\r\n     *\r\n     * @param customData {Map?} The given custom data that should be propagated.\r\n     *   If it contains a key <code>defaultPath</code> and no history data is\r\n     *   available, its value is used as a target path. If it does not include\r\n     *   such a key, the routing's default path is used instead (again only for\r\n     *   empty history).\r\n     *   This behavior is useful for instance when reloading a page during\r\n     *   development but expecting the page's back button always to work.\r\n     */\r\n    back(customData) {\r\n      var data = customData;\r\n      if (data) {\r\n        data[\"action\"] = \"back\";\r\n      } else {\r\n        data = {\r\n          action: \"back\"\r\n        };\r\n      }\r\n\r\n      var path,\r\n        back = qx.application.Routing.__back;\r\n\r\n      if (back.length > 0) {\r\n        // Remove current state\r\n        back.shift();\r\n      }\r\n\r\n      if (back.length > 0) {\r\n        // Get previous state\r\n        var state = back.shift();\r\n\r\n        this._executeGet(state.path, data);\r\n      } else if (data.defaultPath) {\r\n        path = data.defaultPath;\r\n        delete data.defaultPath;\r\n        this._executeGet(path, data);\r\n      } else if (qx.application.Routing.DEFAULT_PATH) {\r\n        this._executeGet(qx.application.Routing.DEFAULT_PATH, data);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Decouples the Routing from the navigation handler.\r\n     */\r\n    dispose() {\r\n      this.__navigationHandler.removeListener(\r\n        \"changeState\",\r\n        this.__onChangeHash,\r\n        this\r\n      );\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,wBAAwB,EAAE;IAC5CC,SAAS,EAAE,CAACL,EAAE,CAACM,IAAI,CAACC,WAAW,CAAC;IAEhCC,SAAS,WAAAA,UAAA,EAAG;MACV,IAAI,CAACC,SAAW,GAAG,IAAIT,EAAE,CAACU,KAAK,CAACC,SAAS,CAAC,CAAC;MAE3C,IAAI,CAACC,SAAmB,GAAGZ,EAAE,CAACa,GAAG,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC;MACvD,IAAI,CAACH,SAAmB,CAACI,WAAW,CAClC,aAAa,EACb,IAAI,CAACC,SAAc,EACnB,IACF,CAAC;IACH,CAAC;IAEDC,OAAO,EAAE;MACPC,YAAY,EAAE,GAAG;MAEjBC,SAAM,EAAE,EAAE;MACVC,SAAS,EAAE;IACb,CAAC;IAEDC,OAAO,EAAE;MACPV,SAAmB,EAAE,IAAI;MACzBH,SAAW,EAAE,IAAI;MAEjBc,SAAgB,EAAE,IAAI;MAEtB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,WAAW,EAAE;QAUhB,IAAIC,IAAI,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;QAC1BD,IAAI,GAAG,IAAI,CAACE,kBAAkB,CAACF,IAAI,EAAED,WAAW,C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"
}