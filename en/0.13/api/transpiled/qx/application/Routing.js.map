{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "__messaging",
    "event",
    "Messaging",
    "__navigationHandler",
    "bom",
    "History",
    "getInstance",
    "addListener",
    "__onChangeHash",
    "statics",
    "DEFAULT_PATH",
    "__back",
    "__forward",
    "members",
    "__currentGetPath",
    "init",
    "defaultPath",
    "path",
    "getState",
    "_getPathOrFallback",
    "_executeGet",
    "has",
    "application",
    "Routing",
    "onGet",
    "route",
    "handler",
    "scope",
    "on",
    "onPost",
    "onPut",
    "onDelete",
    "onAny",
    "remove",
    "id",
    "evt",
    "getData",
    "customData",
    "fromEvent",
    "history",
    "__getFromHistory",
    "data",
    "fromHistory",
    "action",
    "__replaceCustomData",
    "__addToHistory",
    "setState",
    "emit",
    "executeGet",
    "execute",
    "executePost",
    "params",
    "executePut",
    "executeDelete",
    "unshift",
    "register",
    "i",
    "length",
    "j",
    "back",
    "forward",
    "found",
    "entry",
    "toForward",
    "splice",
    "a",
    "toBack",
    "shift",
    "state",
    "dispose",
    "removeListener"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/application/Routing.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n *\n * Basic application routing manager.\n *\n * Define routes to react on certain GET / POST / DELETE / PUT operations.\n *\n * * GET is triggered when the hash value of the url is changed. Can be called\n *   manually by calling the {@link #executeGet} method.\n * * POST / DELETE / PUT has to be triggered manually right now (will be changed later)\n *    by calling the {@link #executePost}, {@link #executeDelete}, {@link #executePut} method.\n *\n * This manager can also be used to provide browser history.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var r = new qx.application.Routing();\n *\n *   // show the start page, when no hash is given or the hash is \"#/\"\n *   r.onGet(\"/\", function(data) {\n *     startPage.show();\n *   }, this);\n *\n *   // whenever the url /address is called show the address book page.\n *   r.onGet(\"/address\", function(data) {\n *     addressBookPage.show();\n *   }, this);\n *\n *   // address with the parameter \"id\"\n *   r.onGet(\"/address/{id}\", function(data) {\n *     addressPage.show();\n *     model.loadAddress(data.params.id);\n *   }, this);\n *\n *   // Alternative you can use regExp for a route\n *   r.onGet(/address\\/(.*)/, function(data) {\n *     addressPage.show();\n *     model.loadAddress(data.params.0);\n *   }, this);\n *\n *   // make sure that the data is always loaded\n *   r.onGet(\"/address.*\", function(data) {\n *     if (!model.isLoaded()) {\n *       model.loadAddresses();\n *     }\n *   }, this);\n *\n *   // update the address\n *   r.onPost(\"/address/{id}\", function(data) {\n *     model.updateAddress(data.params.id);\n *   }, this);\n *\n *   // delete the address and navigate back\n *   r.onDelete(\"/address/{id}\", function(data) {\n *     model.deleteAddress(data.params.id);\n *     r.executeGet(\"/address\", {reverse:true});\n *   }, this);\n * </pre>\n *\n * This example defines different routes to handle navigation events.\n *\n * Note this class must be disposed after use\n */\nqx.Bootstrap.define(\"qx.application.Routing\", {\n  implement: [qx.core.IDisposable],\n\n  construct() {\n    this.__messaging = new qx.event.Messaging();\n\n    this.__navigationHandler = qx.bom.History.getInstance();\n    this.__navigationHandler.addListener(\n      \"changeState\",\n      this.__onChangeHash,\n      this\n    );\n  },\n\n  statics: {\n    DEFAULT_PATH: \"/\",\n\n    __back: [],\n    __forward: []\n  },\n\n  members: {\n    __navigationHandler: null,\n    __messaging: null,\n\n    __currentGetPath: null,\n\n    /**\n     * Initialization method used to execute the get route for the currently set history path.\n     * If no path is set, either the given argument named <code>defaultPath</code>\n     * or the {@link #DEFAULT_PATH} will be used for initialization.\n     *\n     * @param defaultPath {String?} Optional default path for initialization.\n     */\n    init(defaultPath) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (defaultPath != null) {\n          qx.core.Assert.assertString(\n            defaultPath,\n            \"Invalid argument 'defaultPath'\"\n          );\n        }\n      }\n\n      var path = this.getState();\n      path = this._getPathOrFallback(path, defaultPath);\n      this._executeGet(path, null, true);\n    },\n\n    /**\n     * Checks if path is valid and registered in channel \"get\" and then just returns it.\n     * If the path is not valid either the <code>defaultPath</code> (if given) or the\n     * {@link #DEFAULT_PATH} will be returned.\n     *\n     * @param path {String} Path which gets checked.\n     * @param defaultPath {String?} Optional default path.\n     * @return {String} A valid path.\n     */\n    _getPathOrFallback(path, defaultPath) {\n      if (path == \"\" || path == null || !this.__messaging.has(\"get\", path)) {\n        path = defaultPath || qx.application.Routing.DEFAULT_PATH;\n      }\n      return path;\n    },\n\n    /**\n     * Adds a route handler for the \"get\" operation. The route gets called\n     * when the {@link #executeGet} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    onGet(route, handler, scope) {\n      return this.__messaging.on(\"get\", route, handler, scope);\n    },\n\n    /**\n     * This is a shorthand for {@link #onGet}.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    on(route, handler, scope) {\n      return this.onGet(route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"post\" operation. The route gets called\n     * when the {@link #executePost} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    onPost(route, handler, scope) {\n      return this.__messaging.on(\"post\", route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"put\" operation. The route gets called\n     * when the {@link #executePut} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onPut(route, handler, scope) {\n      return this.__messaging.on(\"put\", route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"delete\" operation. The route gets called\n     * when the {@link #executeDelete} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onDelete(route, handler, scope) {\n      return this.__messaging.on(\"delete\", route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"any\" operation. The \"any\" operation is called\n     * before all other operations.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onAny(route, handler, scope) {\n      return this.__messaging.onAny(route, handler, scope);\n    },\n\n    /**\n     * Removes a registered route by the given id.\n     *\n     * @param id {String} The id of the registered route\n     */\n    remove(id) {\n      this.__messaging.remove(id);\n    },\n\n    /**\n     * Hash change event handler.\n     *\n     * @param evt {qx.event.type.Data} The changeHash event.\n     */\n    __onChangeHash(evt) {\n      var path = evt.getData();\n      path = this._getPathOrFallback(path);\n\n      if (path != this.__currentGetPath) {\n        this._executeGet(path, null, true);\n      }\n    },\n\n    /**\n     * Executes the get operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     * @param fromEvent {var} Determines whether this method was called from history\n     *\n     */\n    _executeGet(path, customData, fromEvent) {\n      this.__currentGetPath = path;\n\n      var history = this.__getFromHistory(path);\n      if (history) {\n        if (!customData) {\n          customData = history.data.customData || {};\n          customData.fromHistory = true;\n          customData.action = history.action;\n          customData.fromEvent = fromEvent;\n        } else {\n          this.__replaceCustomData(path, customData);\n        }\n      } else {\n        this.__addToHistory(path, customData);\n        qx.application.Routing.__forward = [];\n      }\n\n      this.__navigationHandler.setState(path);\n      this.__messaging.emit(\"get\", path, null, customData);\n    },\n\n    /**\n     * Executes the get operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executeGet(path, customData) {\n      this._executeGet(path, customData);\n    },\n\n    /**\n     * This is a shorthand for {@link #executeGet}.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     */\n    execute(path, customData) {\n      this.executeGet(path, customData);\n    },\n\n    /**\n     * Executes the post operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executePost(path, params, customData) {\n      this.__messaging.emit(\"post\", path, params, customData);\n    },\n\n    /**\n     * Executes the put operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executePut(path, params, customData) {\n      this.__messaging.emit(\"put\", path, params, customData);\n    },\n\n    /**\n     * Executes the delete operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executeDelete(path, params, customData) {\n      this.__messaging.emit(\"delete\", path, params, customData);\n    },\n\n    /**\n     * Returns state value (history hash) of the navigation handler.\n     * @return {String} State of history navigation handler\n     */\n    getState() {\n      return this.__navigationHandler.getState();\n    },\n\n    /**\n     * Adds the custom data of a given path to the history.\n     *\n     * @param path {String} The path to store.\n     * @param customData {var} The custom data to store\n     */\n    __addToHistory(path, customData) {\n      qx.application.Routing.__back.unshift({\n        path: path,\n        customData: customData\n      });\n    },\n\n    /**\n     * Replaces the customData in the history objects with the recent custom data.\n     * @param path {String} The path to replace.\n     * @param customData {var} The custom data to store.\n     */\n    __replaceCustomData(path, customData) {\n      var register = [\n        qx.application.Routing.__back,\n        qx.application.Routing.__forward\n      ];\n\n      for (var i = 0; i < register.length; i++) {\n        for (var j = 0; j < register[i].length; j++) {\n          if (register[i][j].path == path) {\n            register[i][j].customData = customData;\n          }\n        }\n      }\n    },\n\n    /**\n     * Returns a history entry for a certain path.\n     *\n     * @param path {String} The path of the entry\n     * @return {Map|null} The retrieved entry. <code>null</code> when no entry was found.\n     */\n    __getFromHistory(path) {\n      var back = qx.application.Routing.__back;\n      var forward = qx.application.Routing.__forward;\n      var found = false;\n\n      var entry = null;\n      var length = back.length;\n      for (var i = 0; i < length; i++) {\n        if (back[i].path == path) {\n          entry = back[i];\n          var toForward = back.splice(0, i);\n          for (var a = 0; a < toForward.length; a++) {\n            forward.unshift(toForward[a]);\n          }\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        return {\n          data: entry,\n          action: \"back\"\n        };\n      }\n\n      var length = forward.length;\n      for (var i = 0; i < length; i++) {\n        if (forward[i].path == path) {\n          entry = forward[i];\n          var toBack = forward.splice(0, i + 1);\n          for (var a = 0; a < toBack.length; a++) {\n            back.unshift(toBack[a]);\n          }\n          break;\n        }\n      }\n\n      if (entry) {\n        return {\n          data: entry,\n          action: \"forward\"\n        };\n      }\n      return entry;\n    },\n\n    /**\n     * Navigates back to the previously executed path.\n     *\n     * @param customData {Map?} The given custom data that should be propagated.\n     *   If it contains a key <code>defaultPath</code> and no history data is\n     *   available, its value is used as a target path. If it does not include\n     *   such a key, the routing's default path is used instead (again only for\n     *   empty history).\n     *   This behavior is useful for instance when reloading a page during\n     *   development but expecting the page's back button always to work.\n     */\n    back(customData) {\n      var data = customData;\n      if (data) {\n        data[\"action\"] = \"back\";\n      } else {\n        data = {\n          action: \"back\"\n        };\n      }\n\n      var path,\n        back = qx.application.Routing.__back;\n\n      if (back.length > 0) {\n        // Remove current state\n        back.shift();\n      }\n\n      if (back.length > 0) {\n        // Get previous state\n        var state = back.shift();\n\n        this._executeGet(state.path, data);\n      } else if (data.defaultPath) {\n        path = data.defaultPath;\n        delete data.defaultPath;\n        this._executeGet(path, data);\n      } else if (qx.application.Routing.DEFAULT_PATH) {\n        this._executeGet(qx.application.Routing.DEFAULT_PATH, data);\n      }\n    },\n\n    /**\n     * Decouples the Routing from the navigation handler.\n     */\n    dispose() {\n      this.__navigationHandler.removeListener(\n        \"changeState\",\n        this.__onChangeHash,\n        this\n      );\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,wBAAwB,EAAE;IAC5CC,SAAS,EAAE,CAACL,EAAE,CAACM,IAAI,CAACC,WAAW,CAAC;IAEhCC,SAAS,WAATA,SAASA,CAAA,EAAG;MACV,IAAI,CAACC,SAAW,GAAG,IAAIT,EAAE,CAACU,KAAK,CAACC,SAAS,CAAC,CAAC;MAE3C,IAAI,CAACC,SAAmB,GAAGZ,EAAE,CAACa,GAAG,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC;MACvD,IAAI,CAACH,SAAmB,CAACI,WAAW,CAClC,aAAa,EACb,IAAI,CAACC,SAAc,EACnB,IACF,CAAC;IACH,CAAC;IAEDC,OAAO,EAAE;MACPC,YAAY,EAAE,GAAG;MAEjBC,SAAM,EAAE,EAAE;MACVC,SAAS,EAAE;IACb,CAAC;IAEDC,OAAO,EAAE;MACPV,SAAmB,EAAE,IAAI;MACzBH,SAAW,EAAE,IAAI;MAEjBc,SAAgB,EAAE,IAAI;MAEtB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAJA,IAAIA,CAACC,WAAW,EAAE;QAUhB,IAAIC,IAAI,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;QAC1BD,IAAI,GAAG,IAAI,CAACE,kBAAkB,CAACF,IAAI,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",
  "ignoreList": []
}