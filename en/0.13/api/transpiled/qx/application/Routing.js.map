{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "__messaging",
    "event",
    "Messaging",
    "__navigationHandler",
    "bom",
    "History",
    "getInstance",
    "addListener",
    "__onChangeHash",
    "statics",
    "DEFAULT_PATH",
    "__back",
    "__forward",
    "members",
    "__currentGetPath",
    "init",
    "defaultPath",
    "path",
    "getState",
    "_getPathOrFallback",
    "_executeGet",
    "has",
    "application",
    "Routing",
    "onGet",
    "route",
    "handler",
    "scope",
    "on",
    "onPost",
    "onPut",
    "onDelete",
    "onAny",
    "remove",
    "id",
    "evt",
    "getData",
    "customData",
    "fromEvent",
    "history",
    "__getFromHistory",
    "data",
    "fromHistory",
    "action",
    "__replaceCustomData",
    "__addToHistory",
    "setState",
    "emit",
    "executeGet",
    "execute",
    "executePost",
    "params",
    "executePut",
    "executeDelete",
    "unshift",
    "register",
    "i",
    "length",
    "j",
    "back",
    "forward",
    "found",
    "entry",
    "toForward",
    "splice",
    "a",
    "toBack",
    "shift",
    "state",
    "dispose",
    "removeListener"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/application/Routing.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n *\n * Basic application routing manager.\n *\n * Define routes to react on certain GET / POST / DELETE / PUT operations.\n *\n * * GET is triggered when the hash value of the url is changed. Can be called\n *   manually by calling the {@link #executeGet} method.\n * * POST / DELETE / PUT has to be triggered manually right now (will be changed later)\n *    by calling the {@link #executePost}, {@link #executeDelete}, {@link #executePut} method.\n *\n * This manager can also be used to provide browser history.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var r = new qx.application.Routing();\n *\n *   // show the start page, when no hash is given or the hash is \"#/\"\n *   r.onGet(\"/\", function(data) {\n *     startPage.show();\n *   }, this);\n *\n *   // whenever the url /address is called show the address book page.\n *   r.onGet(\"/address\", function(data) {\n *     addressBookPage.show();\n *   }, this);\n *\n *   // address with the parameter \"id\"\n *   r.onGet(\"/address/{id}\", function(data) {\n *     addressPage.show();\n *     model.loadAddress(data.params.id);\n *   }, this);\n *\n *   // Alternative you can use regExp for a route\n *   r.onGet(/address\\/(.*)/, function(data) {\n *     addressPage.show();\n *     model.loadAddress(data.params.0);\n *   }, this);\n *\n *   // make sure that the data is always loaded\n *   r.onGet(\"/address.*\", function(data) {\n *     if (!model.isLoaded()) {\n *       model.loadAddresses();\n *     }\n *   }, this);\n *\n *   // update the address\n *   r.onPost(\"/address/{id}\", function(data) {\n *     model.updateAddress(data.params.id);\n *   }, this);\n *\n *   // delete the address and navigate back\n *   r.onDelete(\"/address/{id}\", function(data) {\n *     model.deleteAddress(data.params.id);\n *     r.executeGet(\"/address\", {reverse:true});\n *   }, this);\n * </pre>\n *\n * This example defines different routes to handle navigation events.\n *\n * Note this class must be disposed after use\n */\nqx.Bootstrap.define(\"qx.application.Routing\", {\n  implement: [qx.core.IDisposable],\n\n  construct() {\n    this.__messaging = new qx.event.Messaging();\n\n    this.__navigationHandler = qx.bom.History.getInstance();\n    this.__navigationHandler.addListener(\n      \"changeState\",\n      this.__onChangeHash,\n      this\n    );\n  },\n\n  statics: {\n    DEFAULT_PATH: \"/\",\n\n    __back: [],\n    __forward: []\n  },\n\n  members: {\n    __navigationHandler: null,\n    __messaging: null,\n\n    __currentGetPath: null,\n\n    /**\n     * Initialization method used to execute the get route for the currently set history path.\n     * If no path is set, either the given argument named <code>defaultPath</code>\n     * or the {@link #DEFAULT_PATH} will be used for initialization.\n     *\n     * @param defaultPath {String?} Optional default path for initialization.\n     */\n    init(defaultPath) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (defaultPath != null) {\n          qx.core.Assert.assertString(\n            defaultPath,\n            \"Invalid argument 'defaultPath'\"\n          );\n        }\n      }\n\n      var path = this.getState();\n      path = this._getPathOrFallback(path, defaultPath);\n      this._executeGet(path, null, true);\n    },\n\n    /**\n     * Checks if path is valid and registered in channel \"get\" and then just returns it.\n     * If the path is not valid either the <code>defaultPath</code> (if given) or the\n     * {@link #DEFAULT_PATH} will be returned.\n     *\n     * @param path {String} Path which gets checked.\n     * @param defaultPath {String?} Optional default path.\n     * @return {String} A valid path.\n     */\n    _getPathOrFallback(path, defaultPath) {\n      if (path == \"\" || path == null || !this.__messaging.has(\"get\", path)) {\n        path = defaultPath || qx.application.Routing.DEFAULT_PATH;\n      }\n      return path;\n    },\n\n    /**\n     * Adds a route handler for the \"get\" operation. The route gets called\n     * when the {@link #executeGet} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    onGet(route, handler, scope) {\n      return this.__messaging.on(\"get\", route, handler, scope);\n    },\n\n    /**\n     * This is a shorthand for {@link #onGet}.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    on(route, handler, scope) {\n      return this.onGet(route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"post\" operation. The route gets called\n     * when the {@link #executePost} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    onPost(route, handler, scope) {\n      return this.__messaging.on(\"post\", route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"put\" operation. The route gets called\n     * when the {@link #executePut} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onPut(route, handler, scope) {\n      return this.__messaging.on(\"put\", route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"delete\" operation. The route gets called\n     * when the {@link #executeDelete} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onDelete(route, handler, scope) {\n      return this.__messaging.on(\"delete\", route, handler, scope);\n    },\n\n    /**\n     * Adds a route handler for the \"any\" operation. The \"any\" operation is called\n     * before all other operations.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onAny(route, handler, scope) {\n      return this.__messaging.onAny(route, handler, scope);\n    },\n\n    /**\n     * Removes a registered route by the given id.\n     *\n     * @param id {String} The id of the registered route\n     */\n    remove(id) {\n      this.__messaging.remove(id);\n    },\n\n    /**\n     * Hash change event handler.\n     *\n     * @param evt {qx.event.type.Data} The changeHash event.\n     */\n    __onChangeHash(evt) {\n      var path = evt.getData();\n      path = this._getPathOrFallback(path);\n\n      if (path != this.__currentGetPath) {\n        this._executeGet(path, null, true);\n      }\n    },\n\n    /**\n     * Executes the get operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     * @param fromEvent {var} Determines whether this method was called from history\n     *\n     */\n    _executeGet(path, customData, fromEvent) {\n      this.__currentGetPath = path;\n\n      var history = this.__getFromHistory(path);\n      if (history) {\n        if (!customData) {\n          customData = history.data.customData || {};\n          customData.fromHistory = true;\n          customData.action = history.action;\n          customData.fromEvent = fromEvent;\n        } else {\n          this.__replaceCustomData(path, customData);\n        }\n      } else {\n        this.__addToHistory(path, customData);\n        qx.application.Routing.__forward = [];\n      }\n\n      this.__navigationHandler.setState(path);\n      this.__messaging.emit(\"get\", path, null, customData);\n    },\n\n    /**\n     * Executes the get operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executeGet(path, customData) {\n      this._executeGet(path, customData);\n    },\n\n    /**\n     * This is a shorthand for {@link #executeGet}.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     */\n    execute(path, customData) {\n      this.executeGet(path, customData);\n    },\n\n    /**\n     * Executes the post operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executePost(path, params, customData) {\n      this.__messaging.emit(\"post\", path, params, customData);\n    },\n\n    /**\n     * Executes the put operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executePut(path, params, customData) {\n      this.__messaging.emit(\"put\", path, params, customData);\n    },\n\n    /**\n     * Executes the delete operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executeDelete(path, params, customData) {\n      this.__messaging.emit(\"delete\", path, params, customData);\n    },\n\n    /**\n     * Returns state value (history hash) of the navigation handler.\n     * @return {String} State of history navigation handler\n     */\n    getState() {\n      return this.__navigationHandler.getState();\n    },\n\n    /**\n     * Adds the custom data of a given path to the history.\n     *\n     * @param path {String} The path to store.\n     * @param customData {var} The custom data to store\n     */\n    __addToHistory(path, customData) {\n      qx.application.Routing.__back.unshift({\n        path: path,\n        customData: customData\n      });\n    },\n\n    /**\n     * Replaces the customData in the history objects with the recent custom data.\n     * @param path {String} The path to replace.\n     * @param customData {var} The custom data to store.\n     */\n    __replaceCustomData(path, customData) {\n      var register = [\n        qx.application.Routing.__back,\n        qx.application.Routing.__forward\n      ];\n\n      for (var i = 0; i < register.length; i++) {\n        for (var j = 0; j < register[i].length; j++) {\n          if (register[i][j].path == path) {\n            register[i][j].customData = customData;\n          }\n        }\n      }\n    },\n\n    /**\n     * Returns a history entry for a certain path.\n     *\n     * @param path {String} The path of the entry\n     * @return {Map|null} The retrieved entry. <code>null</code> when no entry was found.\n     */\n    __getFromHistory(path) {\n      var back = qx.application.Routing.__back;\n      var forward = qx.application.Routing.__forward;\n      var found = false;\n\n      var entry = null;\n      var length = back.length;\n      for (var i = 0; i < length; i++) {\n        if (back[i].path == path) {\n          entry = back[i];\n          var toForward = back.splice(0, i);\n          for (var a = 0; a < toForward.length; a++) {\n            forward.unshift(toForward[a]);\n          }\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        return {\n          data: entry,\n          action: \"back\"\n        };\n      }\n\n      var length = forward.length;\n      for (var i = 0; i < length; i++) {\n        if (forward[i].path == path) {\n          entry = forward[i];\n          var toBack = forward.splice(0, i + 1);\n          for (var a = 0; a < toBack.length; a++) {\n            back.unshift(toBack[a]);\n          }\n          break;\n        }\n      }\n\n      if (entry) {\n        return {\n          data: entry,\n          action: \"forward\"\n        };\n      }\n      return entry;\n    },\n\n    /**\n     * Navigates back to the previously executed path.\n     *\n     * @param customData {Map?} The given custom data that should be propagated.\n     *   If it contains a key <code>defaultPath</code> and no history data is\n     *   available, its value is used as a target path. If it does not include\n     *   such a key, the routing's default path is used instead (again only for\n     *   empty history).\n     *   This behavior is useful for instance when reloading a page during\n     *   development but expecting the page's back button always to work.\n     */\n    back(customData) {\n      var data = customData;\n      if (data) {\n        data[\"action\"] = \"back\";\n      } else {\n        data = {\n          action: \"back\"\n        };\n      }\n\n      var path,\n        back = qx.application.Routing.__back;\n\n      if (back.length > 0) {\n        // Remove current state\n        back.shift();\n      }\n\n      if (back.length > 0) {\n        // Get previous state\n        var state = back.shift();\n\n        this._executeGet(state.path, data);\n      } else if (data.defaultPath) {\n        path = data.defaultPath;\n        delete data.defaultPath;\n        this._executeGet(path, data);\n      } else if (qx.application.Routing.DEFAULT_PATH) {\n        this._executeGet(qx.application.Routing.DEFAULT_PATH, data);\n      }\n    },\n\n    /**\n     * Decouples the Routing from the navigation handler.\n     */\n    dispose() {\n      this.__navigationHandler.removeListener(\n        \"changeState\",\n        this.__onChangeHash,\n        this\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}