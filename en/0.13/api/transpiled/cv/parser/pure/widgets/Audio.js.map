{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/parser/pure/widgets/Audio.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "parse",
    "xml",
    "path",
    "flavour",
    "pageType",
    "data",
    "cv",
    "parser",
    "pure",
    "WidgetParser",
    "parseElement",
    "getAttributeToPropertyMappings",
    "parseFormat",
    "parseAddress",
    "src",
    "id",
    "width",
    "height",
    "autoplay",
    "transform",
    "value",
    "loop",
    "thresholdValue",
    "defer",
    "addHandler",
    "widgets",
    "Audio"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACEH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,8BAAhB,EAAgD;AAC9CC,IAAAA,IAAI,EAAE,QADwC;;AAG9C;AACJ;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE;AAEP;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,MAAAA,KAAK,EAAE,eAAUC,GAAV,EAAeC,IAAf,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AAC7C,YAAMC,IAAI,GAAGC,EAAE,CAACC,MAAH,CAAUC,IAAV,CAAeC,YAAf,CAA4BC,YAA5B,CAAyC,IAAzC,EAA+CT,GAA/C,EAAoDC,IAApD,EAA0DC,OAA1D,EAAmEC,QAAnE,EAA6E,KAAKO,8BAAL,EAA7E,CAAb;AACAL,QAAAA,EAAE,CAACC,MAAH,CAAUC,IAAV,CAAeC,YAAf,CAA4BG,WAA5B,CAAwCX,GAAxC,EAA6CC,IAA7C;AACAI,QAAAA,EAAE,CAACC,MAAH,CAAUC,IAAV,CAAeC,YAAf,CAA4BI,YAA5B,CAAyCZ,GAAzC,EAA8CC,IAA9C;AACA,eAAOG,IAAP;AACD,OAjBM;;AAmBP;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMM,MAAAA,8BAA8B,EAAE,0CAAW;AACzC,eAAO;AACLG,UAAAA,GAAG,EAAE,EADA;AAELC,UAAAA,EAAE,EAAE,EAFC;AAGLC,UAAAA,KAAK,EAAE,EAHF;AAILC,UAAAA,MAAM,EAAE,EAJH;AAKLC,UAAAA,QAAQ,EAAE;AACRC,YAAAA,SAAS,EAAE,mBAAUC,KAAV,EAAiB;AAC1B,qBAAOA,KAAK,KAAK,UAAV,IAAwBA,KAAK,KAAK,MAAzC;AACD;AAHO,WALL;AAULC,UAAAA,IAAI,EAAE;AACJF,YAAAA,SAAS,EAAE,mBAAUC,KAAV,EAAiB;AAC1B,qBAAOA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,MAArC;AACD;AAHG,WAVD;AAeLE,UAAAA,cAAc,EAAE;AAAC,uBAAW;AAAZ;AAfX,SAAP;AAiBD;AAjDM,KARqC;AA2D9CC,IAAAA,KAAK,EAAE,eAASxB,OAAT,EAAkB;AACvB;AACAO,MAAAA,EAAE,CAACC,MAAH,CAAUC,IAAV,CAAeC,YAAf,CAA4Be,UAA5B,CAAuC,OAAvC,EAAgDzB,OAAhD;AACD;AA9D6C,GAAhD;AAvBFO,EAAAA,EAAE,CAACC,MAAH,CAAUC,IAAV,CAAeiB,OAAf,CAAuBC,KAAvB,CAA6B/B,aAA7B,GAA6CA,aAA7C",
  "sourcesContent": [
    "/* Audio.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Parse &lt;audio;gt; config elements\n */\n  qx.Class.define('cv.parser.pure.widgets.Audio', {\n    type: 'static',\n\n    /*\n    ******************************************************\n      STATICS\n    ******************************************************\n    */\n    statics: {\n\n      /**\n       * Parses the widgets XML configuration and extracts the given information\n       * to a simple key/value map.\n       *\n       * @param xml {Element} XML-Element\n       * @param path {String} internal path of the widget\n       * @param flavour {String} Flavour of the widget\n       * @param pageType {String} Page type (2d, 3d, ...)\n       * @return {Map} extracted data from config element as key/value map\n       */\n      parse: function (xml, path, flavour, pageType) {\n        const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n        cv.parser.pure.WidgetParser.parseFormat(xml, path);\n        cv.parser.pure.WidgetParser.parseAddress(xml, path);\n        return data;\n      },\n\n      /**\n       * Returns a map with definitions for the XML Parser to map XML-Attribute values\n       * to properties e.g\n       * <pre>{\n         *  <attribute-name>: {\n         *    target: <property-name>,\n         *    default: <default-value>,\n         *    transform: <callback to transform the value to the desired value>\n         *  }\n         * }</pre>\n       * @return {Object}\n       */\n      getAttributeToPropertyMappings: function() {\n        return {\n          src: {},\n          id: {},\n          width: {},\n          height: {},\n          autoplay: {\n            transform: function (value) {\n              return value === 'autoplay' || value === 'true';\n            }\n          },\n          loop: {\n            transform: function (value) {\n              return value === 'loop' || value === 'true';\n            }\n          },\n          thresholdValue: {'default': 1}\n        };\n      }\n    },\n    defer: function(statics) {\n      // register the parser\n      cv.parser.pure.WidgetParser.addHandler('audio', statics);\n    }\n  });\n"
  ]
}