{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/parser/pure/widgets/NavBar.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "parse",
    "xml",
    "path",
    "flavour",
    "pageType",
    "data",
    "cv",
    "parser",
    "pure",
    "WidgetParser",
    "parseElement",
    "getAttributeToPropertyMappings",
    "parseChildren",
    "createDefaultWidget",
    "widgetType",
    "n",
    "classes",
    "getAttribute",
    "id",
    "split",
    "pop",
    "pos",
    "Model",
    "getInstance",
    "setWidgetData",
    "join",
    "widgets",
    "NavBar",
    "_transformDynamic",
    "_transformScope",
    "getStoragePath",
    "value",
    "parseInt",
    "transform",
    "defer",
    "addHandler"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* NavBar.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n *\n */\nqx.Class.define('cv.parser.pure.widgets.NavBar', {\n  type: 'static',\n  \n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      // navbars are no 2d/3d pages\n      cv.parser.pure.WidgetParser.parseChildren(xml, path, flavour, 'text');\n      return data;\n    },\n\n    createDefaultWidget: function (widgetType, n, path) {\n      let classes = 'navbar clearfix';\n      if (n.getAttribute('flavour')) {\n        classes += ' flavour_' + n.getAttribute('flavour');\n      }// sub design choice\n\n      // store scope globally\n      const id = path.split('_');\n      id.pop();\n      const pos = n.getAttribute('position') || 'left';\n      cv.data.Model.getInstance().setWidgetData(id.join('_') + '_' + pos + '_navbar', {\n        'dynamic': cv.parser.pure.widgets.NavBar._transformDynamic(n.getAttribute('dynamic')),\n        'scope': cv.parser.pure.widgets.NavBar._transformScope(n.getAttribute('scope')),\n        'width': n.getAttribute('width')\n      });\n\n      return cv.data.Model.getInstance().setWidgetData(cv.parser.pure.WidgetParser.getStoragePath(n, path), {\n        'path': path,\n        'classes': classes,\n        '$$type': widgetType\n      });\n    },\n\n    _transformDynamic: function(value) {\n      switch (value) {\n        case 'true':\n          return true;\n\n        case 'false':\n          return false;\n      }\n      return null;\n    },\n\n    _transformScope: function(value) {\n      value = parseInt(value);\n      if (value >= 0) {\n        return value;\n      } \n        return -1;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        'scope': {'default': -1, transform: cv.parser.pure.widgets.NavBar._transformScope},\n        'name': {},\n        'dynamic': {transform: cv.parser.pure.widgets.NavBar._transformDynamic},\n        'width': {'default': '300'},\n        'position': {'default': 'left'}\n      };\n    }\n  },\n  \n  defer: function(statics) {\n    cv.parser.pure.WidgetParser.addHandler('navbar', statics);\n  }\n});\n"
  ]
}