{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/parser/pure/widgets/Web.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "parse",
    "xml",
    "path",
    "flavour",
    "pageType",
    "data",
    "cv",
    "parser",
    "pure",
    "WidgetParser",
    "parseElement",
    "getAttributeToPropertyMappings",
    "parseFormat",
    "parseAddress",
    "parseRefresh",
    "ga",
    "getAttribute",
    "Model",
    "getInstance",
    "addAddress",
    "defaultClient",
    "io",
    "BackendConnections",
    "getClient",
    "getType",
    "address",
    "transform",
    "mode",
    "log",
    "Logger",
    "error",
    "width",
    "height",
    "frameborder",
    "value",
    "background",
    "src",
    "scrolling",
    "defer",
    "addHandler",
    "widgets",
    "Web"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Web.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n *\n */\nqx.Class.define('cv.parser.pure.widgets.Web', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      cv.parser.pure.WidgetParser.parseAddress(xml, path);\n      cv.parser.pure.WidgetParser.parseRefresh(xml, path);\n\n      const ga = xml.getAttribute('ga');\n      if (ga) {\n        cv.data.Model.getInstance().addAddress(ga);\n        const defaultClient = cv.io.BackendConnections.getClient();\n        if (defaultClient) {\n          switch (defaultClient.getType()) {\n            case 'knxd':\n              data.address['_' + ga] = {transform: 'DPT:1.001', mode: 0};\n              break;\n\n            case 'openhab':\n              data.address['_' + ga] = {transform: 'OH:switch', mode: 'OFF'};\n              break;\n\n            default:\n              qx.log.Logger.error(this, 'web-widget address does not support backends of type', defaultClient.getType());\n              break;\n          }\n        }\n      }\n      return data;\n    },\n\n    /**\n     * Returns a mapping to map XML-Attributes to properties to help the parser to parse the config element.\n     * @return {Map}\n     */\n    getAttributeToPropertyMappings: function () {\n      return {\n        address: {},\n        width: {},\n        height: {},\n        frameborder: {\n          transform: function (value) {\n            return value === 'true';\n          }\n        },\n        background: {},\n        src: {},\n        scrolling: {}\n      };\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.pure.WidgetParser.addHandler('web', statics);\n  }\n});\n\n"
  ]
}