{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/parser/widgets/MultiTrigger.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "parse",
    "xml",
    "path",
    "flavour",
    "pageType",
    "data",
    "cv",
    "parser",
    "WidgetParser",
    "parseElement",
    "getAttributeToPropertyMappings",
    "parseFormat",
    "parseAddress",
    "makeAddressListFn",
    "buttonRegex",
    "buttonConfig",
    "i",
    "attributes",
    "length",
    "attrib",
    "match",
    "exec",
    "name",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "value",
    "buttons",
    "querySelectorAll",
    "textContent",
    "hasAttribute",
    "label",
    "getAttribute",
    "buttonConfiguration",
    "showstatus",
    "transform",
    "elementsPerLine",
    "parseInt",
    "src",
    "mode",
    "variant",
    "defer",
    "addHandler",
    "widgets",
    "MultiTrigger"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* MultiTrigger.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n *\n */\nqx.Class.define('cv.parser.widgets.MultiTrigger', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n      const buttonRegex = /^button([\\d]+)(label|value)$/;\n      const buttonConfig = {};\n      for (var i=0; i<xml.attributes.length; i++) {\n        const attrib = xml.attributes[i];\n        const match = buttonRegex.exec(attrib.name);\n        if (match) {\n          if (!Object.prototype.hasOwnProperty.call(buttonConfig, match[1])) {\n            buttonConfig[match[1]] = {};\n          }\n          buttonConfig[match[1]][match[2]] = attrib.value;\n        }\n      }\n\n      // parse buttons\n      const buttons = xml.querySelectorAll('buttons > button');\n      for (i = 0; i < buttons.length; i++) {\n        buttonConfig[i + 1] = {\n          value: buttons[i].textContent\n        };\n        if (buttons[i].hasAttribute('label')) {\n          buttonConfig[i + 1].label = buttons[i].getAttribute('label');\n        }\n      }\n      data.buttonConfiguration = buttonConfig;\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        showstatus: {\n          transform: function (value) {\n            return value === 'true';\n          }\n        },\n        elementsPerLine: {\n          transform: parseInt, 'default': 2\n        }\n      };\n    },\n\n    makeAddressListFn: function (src, transform, mode, variant) {\n      return [true, variant];\n    }\n  },\n\n  defer: function (statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler('multitrigger', statics);\n  }\n});\n"
  ]
}