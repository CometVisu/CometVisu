{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/util/Tree.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "isChildOf",
    "child",
    "parent",
    "parentNode",
    "getChildWidgets",
    "widget",
    "getChildren",
    "filter",
    "get$$type",
    "getParentWidget",
    "getParentPageData",
    "path",
    "data",
    "isPage",
    "substr",
    "length",
    "parentPath",
    "model",
    "cv",
    "Model",
    "getInstance",
    "Object",
    "keys",
    "getWidgetData",
    "parts",
    "split",
    "pop",
    "join",
    "getParentData",
    "traverseUp",
    "children",
    "indexOf",
    "getChildElements",
    "element",
    "selector",
    "Array",
    "from",
    "childNodes",
    "prototype",
    "call",
    "m",
    "matches",
    "getParentPage",
    "getParent",
    "getParentGroup",
    "until",
    "limit",
    "parents",
    "getAttribute",
    "found",
    "concat",
    "getClosest",
    "elem",
    "findClosest",
    "current",
    "util",
    "Tree"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Tree.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Tree\n *\n * @author tobiasb\n * @since 2016\n */\n\n/**\n * Helper methods for the widget/dom tree\n */\nqx.Class.define('cv.util.Tree', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n\n    /**\n     * Checks if child is a child of parent\n     * @param child {Node}\n     * @param parent {Node}\n     * @return {boolean}\n     */\n    isChildOf(child, parent) {\n      while (child && child !== parent) {\n        child = child.parentNode;\n      }\n      return !!child;\n    },\n\n    /*\n     * *********************************************************\n     * Widget tree helper functions\n     * ********************************************************\n     */\n    getChildWidgets: function(widget, type) {\n      return widget.getChildren().filter(function(child) {\n        return !type || child.get$$type() === type;\n      });\n    },\n\n    /**\n     * Get the parent widget with optional type filter\n     *\n     * @param widget {cv.ui.structure.pure.AbstractWidget} start traversing up the with this widget\n     * @param type {String?} only return parent of this type\n     * @return {cv.ui.structure.pure.AbstractWidget|null}\n     */\n    getParentWidget: function(widget, type) {\n      let parent = widget.getParentWidget();\n      while (parent) {\n        if (!type || parent.get$$type() === type) {\n          return parent;\n        }\n        parent = parent.getParentWidget();\n      }\n      return null;\n    },\n\n    /*\n     * *********************************************************\n     * Widget data tree helper functions\n     * ********************************************************\n     */\n    getParentPageData: function(path) {\n      let data = {};\n      const isPage = path.substr(-1, 1) === '_'; // path ends with _\n      if (!isPage) {\n        path = path.substr(0, path.length - 1);\n      }\n      let parentPath = path;\n      if (parentPath === 'id_') {\n        return null;\n      }\n      const model = cv.data.Model.getInstance();\n      while (Object.keys(data).length === 0 && parentPath.length > 2) {\n        data = model.getWidgetData(parentPath);\n        if (parentPath === 'id_') {\n          break;\n        }\n        const parts = parentPath.substr(0, parentPath.length - 1).split('_');\n        parts.pop();\n        parentPath = parts.join('_') + '_';\n      }\n      return data;\n    },\n\n    /**\n     * Returns the data for the parent entry of the given path\n     * @param path {String}\n     * @return {var}\n     */\n    getParentData: function(path) {\n      let data = {};\n\n      /**\n       * @param path\n       */\n      function traverseUp(path) {\n        const parts = path.split('_');\n        if (parts[parts.length - 1] === '') {\n          parts.pop();\n        } else {\n          parts[parts.length - 1] = '';\n        }\n        return parts.join('_');\n      }\n\n      let parentPath = traverseUp(path);\n      if (parentPath === 'id') {\n        // no parent\n        return null;\n      }\n\n      const model = cv.data.Model.getInstance();\n      while (parentPath.length >= 2) {\n        data = model.getWidgetData(parentPath);\n        if (parentPath === 'id_' || (data.children && data.children.indexOf(path) >= 0)) {\n          return data;\n        }\n        parentPath = traverseUp(parentPath);\n      }\n      return null;\n    },\n\n    /*\n    * *********************************************************\n    * DOM-Element tree helper functions\n    * ********************************************************\n    */\n    getChildElements: function(element, selector) {\n      return Array.from(element.childNodes).filter(function(child) {\n        if (selector) {\n          return Array.prototype.filter.call(child, function (m) {\n            return m.matches(selector);\n          });\n        }\n        return true;\n      }, this);\n    },\n\n    getParentPage: function(element) {\n      return this.getParent(element, '#pages', '.page', 1)[0];\n    },\n\n    getParentGroup: function(element) {\n      return this.getParent(element, '#pages', '.group', 1)[0];\n    },\n\n    getParent: function(element, until, selector, limit) {\n      let parents = [];\n      let parent = element.parentNode;\n      while (parent && parent.getAttribute('id') !== 'pages') {\n        let found = [parent];\n        if (selector) {\n          found = Array.prototype.filter.call(found, function (m) {\n            return m.matches(selector);\n          });\n        }\n        parents = parents.concat(found);\n        if (limit && parents.length >= limit) {\n          break;\n        }\n        if (until && Array.prototype.filter.call([parent], function (m) {\n          return m.matches(until);\n        }).length > 0) {\n          break;\n        }\n        parent = parent.parentNode;\n      }\n      return parents;\n    },\n\n    getClosest: function (elem, selector) {\n      const findClosest = function (current) {\n        const found = Array.prototype.filter.call([current], function (m) {\n          return m.matches(selector);\n        });\n        if (found.length) {\n          return found[0];\n        }\n        current = current.parentNode; // One up\n        if (current && current.parentNode) {\n          return findClosest(current);\n        }\n        return null;\n      };\n      return findClosest(elem);\n    }\n  }\n});\n"
  ]
}