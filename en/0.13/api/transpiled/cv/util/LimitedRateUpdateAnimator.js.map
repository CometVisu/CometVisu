{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/util/LimitedRateUpdateAnimator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "displayFn",
    "context",
    "window",
    "displayFnParameters",
    "undefined",
    "setDisplayFn",
    "__displayFnContext",
    "__displayFnParameters",
    "destruct",
    "__animationFrame",
    "cancelAnimationFrame",
    "properties",
    "linearRateLimit",
    "check",
    "init",
    "expDampTimeConstant",
    "epsilon",
    "members",
    "__currentValue",
    "__targetValue",
    "setAnimationSpeed",
    "range",
    "setEpsilon",
    "setLinearRateLimit",
    "setExpDampTimeConstant",
    "setTo",
    "targetValue",
    "instant",
    "show",
    "now",
    "performance",
    "__animate",
    "thistime",
    "lasttime",
    "isNumber",
    "dt",
    "Math",
    "max",
    "maxLinearDelta",
    "getLinearRateLimit",
    "alpha",
    "min",
    "exp",
    "getExpDampTimeConstant",
    "nextValue",
    "blend",
    "delta",
    "notFinished",
    "abs",
    "sign",
    "getEpsilon",
    "copy",
    "getDisplayFn",
    "call",
    "requestAnimationFrame",
    "time",
    "cv",
    "util",
    "LimitedRateUpdateAnimator"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mCAAhB,EAAqD;AACnDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADmC;;AAEnD;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAE,mBAAUC,SAAV,EAAwE;AAAA,UAAnDC,OAAmD,uEAAzCC,MAAyC;AAAA,UAAjCC,mBAAiC,uEAAXC,SAAW;AACjF;AACA,WAAKC,YAAL,CAAkBL,SAAlB;AACA,WAAKM,SAAL,GAA0BL,OAA1B;AACA,WAAKM,SAAL,GAA6BJ,mBAA7B;AACD,KArBkD;;AAsBnD;AACF;AACA;AACA;AACA;AACEK,IAAAA,QAAQ,EAAE,oBAAW;AACnB,UAAI,KAAKC,SAAL,KAA0BL,SAA9B,EAAyC;AACvCF,QAAAA,MAAM,CAACQ,oBAAP,CAA4B,KAAKD,SAAjC;AACA,aAAKA,SAAL,GAAwBL,SAAxB;AACD;AACF,KAhCkD;;AAiCnD;AACF;AACA;AACA;AACA;AACEO,IAAAA,UAAU,EAAE;AACVC,MAAAA,eAAe,EAAE;AACf;AACAC,QAAAA,KAAK,EAAE,QAFQ;AAGfC,QAAAA,IAAI,EAAE;AAHS,OADP;AAMVC,MAAAA,mBAAmB,EAAE;AACnB;AACAF,QAAAA,KAAK,EAAE,QAFY;AAGnBC,QAAAA,IAAI,EAAE;AAHa,OANX;AAWVE,MAAAA,OAAO,EAAE;AACP;AACA;AACAH,QAAAA,KAAK,EAAE,QAHA;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAXC;AAiBVd,MAAAA,SAAS,EAAE;AACTa,QAAAA,KAAK,EAAE;AADE;AAjBD,KAtCuC;;AA2DnD;AACF;AACA;AACA;AACA;AACEI,IAAAA,OAAO,EAAE;AACPR,MAAAA,SAAgB,EAAEL,SADX;AAEPE,MAAAA,SAAkB,EAAEF,SAFb;AAGPG,MAAAA,SAAqB,EAAEH,SAHhB;AAIPc,MAAAA,SAAc,EAAEd,SAJT;AAKPe,MAAAA,SAAa,EAAEf,SALR;;AAMP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIgB,MAAAA,iBAAiB,EAAE,2BAAUC,KAAV,EAAiBL,OAAjB,EAA0B;AAC3C,YAAIA,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,eAAKkB,UAAL,CAAgBN,OAAhB;AACD,SAFD,MAEO;AACL,eAAKM,UAAL,CAAgBD,KAAK,GAAG,IAAxB;AACD;;AAED,aAAKE,kBAAL,CAAwB,IAAEF,KAA1B,EAP2C,CAQ3C;AACA;;AACA,aAAKG,sBAAL,CAA4B,IAA5B;AACD,OA1BM;;AA2BP;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAE,eAAUC,WAAV,EAAqD;AAAA,YAA9BC,OAA8B,uEAApB,KAAoB;AAAA,YAAbC,IAAa,uEAAN,IAAM;AAC1D,YAAIC,GAAG,GAAGC,WAAW,CAACD,GAAZ,EAAV;AAEA,aAAKV,SAAL,GAAqBO,WAArB;;AACA,YAAIC,OAAO,IAAI,KAAKT,SAAL,KAAwBd,SAAvC,EAAkD;AAChD,eAAKc,SAAL,GAAsBQ,WAAtB;AACD;;AACD,YAAI,KAAKjB,SAAL,KAA0BL,SAA1B,IAAuCwB,IAA3C,EAAiD;AAC/C,eAAKG,SAAL,CAAeF,GAAf,EAAoBA,GAAG,GAAG,EAA1B;AACD;AACF,OA3CM;;AA6CP;AACJ;AACA;AACA;AACA;AACA;AACIE,MAAAA,SAAS,EAAE,mBAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAAA;;AACvC,YAAIC,QAAQ,GAAG,OAAO,KAAKhB,SAAZ,KAA+B,QAA9C;AACA,YAAIiB,EAAE,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAACL,QAAQ,GAAGC,QAAZ,IAAwB,IAApC,CAAT,CAFuC,CAEa;;AACpD,YAAIK,cAAc,GAAG,KAAKC,kBAAL,KAA4BJ,EAAjD;AACA,YAAIK,KAAK,GAAGJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACK,GAAL,CAASL,IAAI,CAACM,GAAL,CAAS,CAACP,EAAD,GAAM,KAAKQ,sBAAL,EAAf,CAAT,EAAwD,CAAxD,CAAZ,CAAZ;AACA,YAAIC,SAAS,GAAGV,QAAQ,GAClB,KAAKf,SAAL,GAAqBqB,KAArB,GAA6B,KAAKtB,SAAL,IAAuB,IAAIsB,KAA3B,CADX,GAElB,KAAKtB,SAAL,CAAoB2B,KAApB,CAA0B,KAAK1B,SAA/B,EAA8CqB,KAA9C,CAFN;AAGA,YAAIM,KAAK,GAAGZ,QAAQ,GACdU,SAAS,GAAG,KAAK1B,SADH,GAEd,KAAKA,SAAL,CAAoB4B,KAApB,CAA0BF,SAA1B,CAFN;AAGA,YAAIG,WAAW,GAAG,IAAlB;;AACA,YAAIX,IAAI,CAACY,GAAL,CAASF,KAAT,IAAkBR,cAAtB,EAAsC;AACpCM,UAAAA,SAAS,GAAGV,QAAQ,GAChB,KAAKhB,SAAL,GAAsBkB,IAAI,CAACa,IAAL,CAAUH,KAAV,IAAmBR,cADzB,GAEhB,KAAKpB,SAAL,CAAoB2B,KAApB,CAA0B,KAAK1B,SAA/B,EAA8CqB,KAAK,GAAGF,cAAR,GAAyBQ,KAAvE,CAFJ;AAGD;;AACD,YAAKZ,QAAQ,IAAIE,IAAI,CAACY,GAAL,CAASJ,SAAS,GAAG,KAAKzB,SAA1B,IAA2C,KAAK+B,UAAL,EAAxD,IACC,CAAChB,QAAD,IAAaU,SAAS,CAACE,KAAV,CAAgB,KAAK3B,SAArB,IAAsC,KAAK+B,UAAL,EADxD,EAC4E;AAC1EN,UAAAA,SAAS,GAAG,KAAKzB,SAAjB;AACA4B,UAAAA,WAAW,GAAG,KAAd;AACD;;AACD,aAAK7B,SAAL,GAAsBgB,QAAQ,GAAGU,SAAH,GAAeA,SAAS,CAACO,IAAV,EAA7C;AAEA,aAAKC,YAAL,GAAoBC,IAApB,CAAyB,KAAK/C,SAA9B,EAAkD,KAAKY,SAAvD,EAAuE,KAAKX,SAA5E;;AAEA,YAAIwC,WAAJ,EAAiB;AACf,eAAKtC,SAAL,GAAwBP,MAAM,CAACoD,qBAAP,CAA6B,UAAAC,IAAI,EAAI;AAC3D,YAAA,KAAI,CAACxB,SAAL,CAAewB,IAAf,EAAqBvB,QAArB;AACD,WAFuB,CAAxB;AAGD,SAJD,MAIO;AACL,eAAKvB,SAAL,GAAwBL,SAAxB;AACD;AACF;AApFM;AAhE0C,GAArD;AArCAoD,EAAAA,EAAE,CAACC,IAAH,CAAQC,yBAAR,CAAkCjE,aAAlC,GAAkDA,aAAlD",
  "sourcesContent": [
    "/* LimitedRateUpdateAnimator.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * LimitedRateUpdateAnimator\n *\n * @author ChristianMayer\n * @since 2020\n */\n\n/**\n * Helper function to allow widgets animate a displayed property with a\n * limited speed of change to look smoother for the user.\n *\n * This class can either animate a number (e.g. used as a ratio) or a class\n * when it has these methods:\n * * value1.delta(value2)       - return a number that is proportional to the difference\n * * value1.blend(value2,ratio) - return a new value that is the ratio dependent blend\n * * value.copy()               - return a copy of the value\n */\nqx.Class.define('cv.util.LimitedRateUpdateAnimator', {\n  extend: qx.core.Object,\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n\n  /**\n   * Create a new animated display where an object will be smoothly transitioned\n   * from its current position to a new target position.\n   *\n   * @param displayFn {Function} Callback function that does the displaying\n   * @param context The context `this` of the callback function\n   * @param displayFnParameters Optional additional parameter that will be passed to the callback function\n   */\n  construct: function (displayFn, context = window, displayFnParameters = undefined) {\n    this.base(arguments);\n    this.setDisplayFn(displayFn);\n    this.__displayFnContext = context;\n    this.__displayFnParameters = displayFnParameters;\n  },\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct: function() {\n    if (this.__animationFrame !== undefined) {\n      window.cancelAnimationFrame(this.__animationFrame);\n      this.__animationFrame = undefined;\n    }\n  },\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    linearRateLimit: {\n      // in ratio/second\n      check: 'Number',\n      init: 2\n    },\n    expDampTimeConstant: {\n      // time constant for exponential dampening\n      check: 'Number',\n      init: 0.01\n    },\n    epsilon: {\n      // a difference between current and target value smaller than the epsilon\n      // will be immediately closed\n      check: 'Number',\n      init: 0.001\n    },\n    displayFn: {\n      check: 'Function'\n    }\n  },\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __animationFrame: undefined,\n    __displayFnContext: undefined,\n    __displayFnParameters: undefined,\n    __currentValue: undefined,\n    __targetValue: undefined,\n    /**\n     * Set animation speed by defining the (typical) maximal range.\n     * An animation of the full ``range`` will require about 0.5 to 1 second\n     * and have a linear as well as an exponential damped part at the end.\n     * The ``epsilon`` can also be stated explicitly or it will be derived\n     * from the ``range``.\n     * @param {Number} range (typical) maximal range for the animation\n     * @param {Number} [epsilon] end the animation when the remaining delta is smaller\n     */\n    setAnimationSpeed: function (range, epsilon) {\n      if (epsilon !== undefined) {\n        this.setEpsilon(epsilon);\n      } else {\n        this.setEpsilon(range / 1000);\n      }\n\n      this.setLinearRateLimit(2*range);\n      // Note: as the exponential dampening is working on a ratio it doesn't\n      // need to be changed here and the default of 0.01 is fine:\n      this.setExpDampTimeConstant(0.01);\n    },\n    /**\n     * Set the value to a new value.\n     * @param {Number} targetValue the new value.\n     * @param {Boolean} instant skip animation when true\n     * @param {Boolean} show skip display update when false\n     */\n    setTo: function (targetValue, instant = false, show = true) {\n      let now = performance.now();\n\n      this.__targetValue = targetValue;\n      if (instant || this.__currentValue === undefined) {\n        this.__currentValue = targetValue;\n      }\n      if (this.__animationFrame === undefined && show) {\n        this.__animate(now, now - 10);\n      }\n    },\n\n    /**\n     * Internal implementation of the animation and value setting.\n     * @param {DOMHighResTimeStamp} thistime\n     * @param {DOMHighResTimeStamp} lasttime\n     * @private\n     */\n    __animate: function (thistime, lasttime) {\n      let isNumber = typeof this.__currentValue === 'number';\n      let dt = Math.max(0, (thistime - lasttime) / 1000); // in seconds - clamp negative dt\n      let maxLinearDelta = this.getLinearRateLimit() * dt;\n      let alpha = Math.max(0, Math.min(Math.exp(-dt / this.getExpDampTimeConstant()), 1));\n      let nextValue = isNumber\n          ? this.__targetValue * alpha + this.__currentValue * (1 - alpha)\n          : this.__currentValue.blend(this.__targetValue, alpha);\n      let delta = isNumber\n          ? nextValue - this.__currentValue\n          : this.__currentValue.delta(nextValue);\n      let notFinished = true;\n      if (Math.abs(delta) > maxLinearDelta) {\n        nextValue = isNumber\n          ? this.__currentValue + Math.sign(delta) * maxLinearDelta\n          : this.__currentValue.blend(this.__targetValue, alpha * maxLinearDelta / delta);\n      }\n      if ((isNumber && Math.abs(nextValue - this.__targetValue) < this.getEpsilon()) ||\n          (!isNumber && nextValue.delta(this.__targetValue) < this.getEpsilon())) {\n        nextValue = this.__targetValue;\n        notFinished = false;\n      }\n      this.__currentValue = isNumber ? nextValue : nextValue.copy();\n\n      this.getDisplayFn().call(this.__displayFnContext, this.__currentValue, this.__displayFnParameters);\n\n      if (notFinished) {\n        this.__animationFrame = window.requestAnimationFrame(time => {\n          this.__animate(time, thistime);\n        });\n      } else {\n        this.__animationFrame = undefined;\n      }\n    }\n  }\n});\n"
  ]
}