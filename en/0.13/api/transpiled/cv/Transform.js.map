{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/Transform.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "registry",
    "name",
    "encode",
    "i",
    "decode",
    "toString",
    "parseInt",
    "parseFloat",
    "addTransform",
    "prefix",
    "transforms",
    "Object",
    "entries",
    "transName",
    "transform",
    "link",
    "assign",
    "clip",
    "min",
    "value",
    "max",
    "scaling",
    "_value",
    "clipInt",
    "Math",
    "round",
    "encodeBusAndRaw",
    "transformation",
    "cv",
    "Config",
    "testMode",
    "bus",
    "raw",
    "transformParts",
    "split",
    "length",
    "parameter",
    "basetrans",
    "encoding",
    "Transform",
    "constructor"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Transform.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This class defines some default transformations like <code>raw</code>, <code>int</code> and <code>float</code>.\n * New transformation can be added and used. For example an openHAB transformation for a switch item is added by\n * {@link cv.transforms.OpenHab} like this:\n *\n * <pre class=\"javascript\">\n *   cv.Transform.addTransform('OH', {\n *    'switch': {\n *      name: 'OH_Switch',\n *       encode: function (phy) {\n *         return phy == 1 ? 'ON' : 'OFF';\n *      },\n *\n *       decode: function (string) {\n *         if (cv.transforms.OpenHab.isUndefined(string)) return 0;\n *         return (string == \"ON\" || parseInt(string) > 0) ? 1 : 0;\n *       }\n *     }\n *   });\n * </pre>\n *\n * @author Christian Mayer\n * @since 2010\n */\nqx.Class.define('cv.Transform', {\n  type: 'static',\n\n  /*\n   ******************************************************\n   STATICS\n   ******************************************************\n   */\n  statics: {\n    registry: {\n      'raw': {\n        name: 'Only the RAW value',\n        encode: function (i) {\n          return i;\n        },\n        decode: function (i) {\n          return i;\n        }\n      },\n      'int': {\n        name: 'Cast to Int',\n        encode: function (i) {\n          return i.toString();\n        },\n        decode: function (i) {\n          return parseInt(i);\n        }\n      },\n      'float': {\n        name: 'Cast to Float',\n        encode: function (i) {\n          return i.toString();\n        },\n        decode: function (i) {\n          return parseFloat(i);\n        }\n      }\n    },\n\n    /* ***************************************************************************\n     * All functions below are only in this, i.e. the default, file.\n     * All further transforms will only have the above data structure.\n     ************************************************************************** */\n\n    /**\n     * Add transformation rules to the registry\n     * @param prefix {String} Transformation prefix (e.g. DPT for KNX transformations or OH for openHAB transformations)\n     * @param transforms {Object} map of transformations\n     */\n    addTransform: function (prefix, transforms) {\n      for (let [transName, transform] of Object.entries(transforms)) {\n        if (transform.link) {\n          this.registry[prefix + ':' + transName] = Object.assign({}, transforms[transform.link], transform);\n        } else {\n          this.registry[prefix + ':' + transName] = transform;\n        }\n      }\n    },\n\n    /**\n     * Enforce that value stays within range\n     * When value is not a valid number, the min value is returned\n     * @param {number} min lower threshold\n     * @param {any} value value to clip\n     * @param {number} max upper threshold\n     * @param [scaling] {Number} scale the clipping result by that amount\n     * @return {number} the clipped value\n     */\n    clip: function (min, value, max, scaling = 1) {\n      const _value = +value; // enforce number\n      return (_value > min ? (_value > max ? max : _value) : min) * scaling;\n    },\n\n    /**\n     * Enforce that value stays within range and is an integer\n     * When value is not a valid number, the min value is returned\n     * @param {number} min lower threshold\n     * @param {any} value value to clip\n     * @param {number} max upper threshold\n     * @param [scaling] {Number} scale the clipping result by that amount\n     * @return {number} the clipped value\n     */\n    clipInt: function (min, value, max, scaling = 1) {\n      const _value = +value; // enforce number\n      return Math.round((_value > min ? (_value > max ? max : _value) : min) * scaling);\n    },\n\n    /**\n     * transform JavaScript to bus value and raw value\n     *\n     * @param transformation {String} type of the transformation\n     * @param value {var} value to transform\n     * @return {Object} object with both encoded values\n     */\n    encodeBusAndRaw: function (transformation, value) {\n      if (cv.Config.testMode === true) {\n        return {bus: value, raw: value};\n      }\n      let\n        transformParts = transformation.split(':');\n        let transform = transformParts.length > 1 ? transformParts[0] + ':' + transformParts[1] : transformation;\n        let parameter = transformParts[2];\n        let basetrans = transform.split('.')[0];\n      const encoding = transform in cv.Transform.registry\n        ? cv.Transform.registry[transform].encode(value, parameter)\n        : (basetrans in cv.Transform.registry\n          ? cv.Transform.registry[basetrans].encode(value, parameter)\n          : value);\n\n      return encoding.constructor === Object ? encoding : {bus: encoding, raw: encoding};\n    },\n\n    /**\n     * transform JavaScript to bus value\n     *\n     * @param transformation {String} type of the transformation\n     * @param value {var} value to transform\n     * @return {var} the encoded value\n     */\n    encode: function (transformation, value) {\n      return this.encodeBusAndRaw(transformation, value).bus;\n    },\n\n    /**\n     * transform bus to JavaScript value\n     * @param transformation {String} type of the transformation\n     * @param value {var} value to transform\n     * @return {var} the decoded value\n     */\n    decode: function (transformation, value) {\n      if (cv.Config.testMode === true) {\n        return value;\n      }\n      let\n        transformParts = transformation.split(':');\n        let transform = transformParts.length > 1 ? transformParts[0] + ':' + transformParts[1] : transformation;\n        let parameter = transformParts[2];\n        let basetrans = transform.split('.')[0];\n      return transform in cv.Transform.registry\n        ? cv.Transform.registry[transform].decode(value, parameter)\n        : (basetrans in cv.Transform.registry\n          ? cv.Transform.registry[basetrans].decode(value, parameter)\n          : value);\n    }\n  }\n});\n"
  ]
}