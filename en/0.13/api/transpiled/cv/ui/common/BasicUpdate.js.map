{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "include",
    "cv",
    "ui",
    "common",
    "HasAddress",
    "properties",
    "value",
    "nullable",
    "init",
    "event",
    "basicValue",
    "format",
    "check",
    "statics",
    "applyMapping",
    "mappingName",
    "Config",
    "hasMapping",
    "mapping",
    "getMapping",
    "ret",
    "formula",
    "mapValue",
    "v",
    "NULL",
    "range",
    "valueFloat",
    "parseFloat",
    "min",
    "defaultValue",
    "undefined",
    "members",
    "formatValueCache",
    "applyTransform",
    "address",
    "data",
    "Transform",
    "decode",
    "getAddress",
    "BasicUpdate",
    "getNextMappedValue",
    "this_map",
    "keys",
    "Object",
    "indexOf",
    "length",
    "applyFormat",
    "getFormat",
    "argListPos",
    "formatPos",
    "util",
    "String",
    "sprintf",
    "apply",
    "defaultValueHandling",
    "setBasicValue",
    "setValue",
    "constructor",
    "Date",
    "transform",
    "toLocaleTimeString",
    "toLocaleDateString",
    "applyStyling",
    "getBasicValue",
    "defaultValue2DOM",
    "targetElement",
    "_this",
    "modifyFn",
    "arguments",
    "_applyValueToDom",
    "Array",
    "isArray",
    "forEach",
    "Node",
    "element",
    "cloneNode",
    "getContext",
    "IconTools",
    "fillRecoloredIcon",
    "defaultUpdate",
    "ga",
    "passedElement",
    "getDomElement",
    "getAlign",
    "classList",
    "add",
    "valueElement",
    "getValueElement",
    "querySelector",
    "replaceChildren",
    "textContent",
    "appendChild",
    "document",
    "createTextNode",
    "innerHTML"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/common/BasicUpdate.js"
  ],
  "sourcesContent": [
    "/* BasicUpdate.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * This role provides the basic update methods\n *\n */\nqx.Mixin.define('cv.ui.common.BasicUpdate', {\n  include: cv.ui.common.HasAddress,\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    /**\n     * @type {var} the incoming value after transformation, mapping and formatting\n     */\n    value: {\n      nullable: true,\n      init: null,\n      event: 'changeValue'\n    },\n\n    /**\n     * @type {var} the incoming value after transformation\n     */\n    basicValue: {\n      nullable: true,\n      init: null\n    },\n\n    /**\n     * Format to apply to incoming values\n     */\n    format: {\n      check: 'String',\n      init: '',\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Apply the given mapping to the value\n     *\n     * @param {*} value - value to be mapped\n     * @param {string} mappingName - mapping name, if not set the <code>mapping</code> property value is used\n     * @return {*} the mapped value\n     */\n    applyMapping(value, mappingName) {\n      if (mappingName && cv.Config.hasMapping(mappingName)) {\n        const mapping = cv.Config.getMapping(mappingName);\n\n        let ret = value;\n        if (mapping.formula) {\n          ret = mapping.formula(ret);\n        }\n\n        const mapValue = function (v) {\n          if (v === null && mapping.NULL) {\n            return mapping.NULL;\n          } else if (mapping[v]) {\n            return mapping[v];\n          } else if (mapping.range) {\n            const valueFloat = parseFloat(v);\n            const range = mapping.range;\n            for (let min in range) {\n              if (min > valueFloat) {\n                continue;\n              }\n              if (range[min][0] < valueFloat) {\n                continue;\n              } // check max\n              return range[min][1];\n            }\n          } else if (mapping['*']) {\n            // catchall mapping\n            return mapping['*'];\n          }\n          return v; // pass through when nothing was found\n        };\n        ret = mapValue(ret);\n        if (!ret && mapping.defaultValue) {\n          ret = mapValue(mapping.defaultValue);\n        }\n        if (ret !== undefined) {\n          return ret;\n        }\n      }\n      return value;\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    formatValueCache: null,\n    /**\n     * Decode the given data with the addresses transform\n     *\n     * @param address {String} KNX-GA or openHAB-item name\n     * @param data {var} value to be decoded\n     * @return {var}\n     */\n    applyTransform(address, data) {\n      if (address) {\n        // transform the raw value to a JavaScript type\n        return cv.Transform.decode(this.getAddress()[address], data);\n      }\n      return data;\n    },\n\n    /**\n     * Apply the given mapping to the value\n     *\n     * @param value {var} value to be mapped\n     * @param mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used\n     * @return {var} the mapped value\n     */\n    applyMapping(value, mappingName) {\n      if (!mappingName) {\n        mappingName = this.getMapping();\n      }\n      return cv.ui.common.BasicUpdate.applyMapping(value, mappingName);\n    },\n\n    /**\n     * Look up the entry for <code>value</code> in the mapping <code>this_map</code> and\n     * return the next value in the list (including wrap around).\n     *\n     * @param value {var} value to look up\n     * @param this_map {String} mapping name\n     * @return {var} the next mapped value\n     */\n    getNextMappedValue(value, this_map) {\n      if (this_map && cv.Config.hasMapping(this_map)) {\n        const keys = Object.keys(cv.Config.getMapping(this_map));\n        return keys[(keys.indexOf('' + value) + 1) % keys.length];\n      }\n      return value;\n    },\n\n    /**\n     * Format the given value according to the defined format.\n     * If no format is defined the value will not be changed.\n     *\n     * @param address {String} KNX-GA or openHAB item name\n     * @param value {var} value to be formatted\n     * @return {var} the formatted value\n     */\n    applyFormat(address, value) {\n      if (this.getFormat()) {\n        if (!this.formatValueCache) {\n          this.formatValueCache = [this.getFormat()];\n        }\n\n        const argListPos = this.getAddress() && this.getAddress()[address] ? this.getAddress()[address].formatPos : 1;\n\n        this.formatValueCache[argListPos] = value;\n\n        return cv.util.String.sprintf.apply(this, this.formatValueCache);\n      }\n      return value;\n    },\n\n    /**\n     * The default value handling for most of the widgets.\n     * This method applies the transform, mapping, format and styling to the value.\n     *\n     * @param {string} address - KNX-GA or openHAB item name\n     * @param {*} data - value to be processes\n     * @return {*} the processed value\n     */\n    defaultValueHandling(address, data) {\n      // #1: transform the raw value to a JavaScript type\n      let value = this.applyTransform(address, data);\n\n      // store it to be able to suppress sending of unchanged data\n      if (value !== undefined) {\n        this.setBasicValue(value);\n      }\n\n      // #2: map it to a value the user wants to see\n      value = this.applyMapping(value);\n\n      // #3: format it in a way the user understands the value\n      if (value !== undefined) {\n        value = this.applyFormat(address, value);\n        this.setValue(value);\n      }\n\n      if (value && value.constructor === Date) {\n        switch (\n          this.getAddress()[address].transform // special case for KNX\n        ) {\n          case 'DPT:10.001':\n            value = value.toLocaleTimeString();\n            break;\n          case 'DPT:11.001':\n            value = value.toLocaleDateString();\n            break;\n          case 'OH:datetime':\n            value = value.toLocaleDateString();\n            break;\n          case 'OH:time':\n            value = value.toLocaleTimeString();\n            break;\n        }\n      }\n\n      this.applyStyling(this.getBasicValue());\n      // #4 will happen outside: style the value to be pretty\n      return value;\n    },\n\n    /**\n     * @typedef widgetValueTypes\n     * @type {(string|number|Uint8Array|Map|Function)}\n     */\n    /**\n     * Method to handle all special cases for the value. The might come from\n     * the mapping where it can be quite complex as it can contain icons.\n     * @param {(*|*[])} value - the value, or an array of values, that will be inserted\n     * @param {HTMLElement} targetElement - the element where `value` will be added to\n     * @param {Function?} modifyFn - callback function that modifies the DOM\n     */\n    defaultValue2DOM(value, targetElement, modifyFn = this._applyValueToDom) {\n      if (Array.isArray(value)) {\n        value.forEach(v => this.defaultValue2DOM(v, targetElement, modifyFn));\n        return;\n      }\n      if (value instanceof Node) {\n        let element = value.cloneNode(true);\n        if (value.getContext) {\n          cv.util.IconTools.fillRecoloredIcon(element);\n        }\n        modifyFn(targetElement, element);\n      } else {\n        modifyFn(targetElement, value);\n      }\n    },\n\n    /**\n     * Default update function, processes the incoming value and applies it to the DOM value element.\n     *\n     * @param {string} ga - KNX-GA or openHAB item name\n     * @param {*} data - the raw value from the bus\n     * @param {HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used\n     * @return {*} - value\n     */\n    defaultUpdate(ga, data, passedElement) {\n      const element = passedElement || this.getDomElement();\n      const value = this.defaultValueHandling(ga, data);\n\n      // TODO: check if this is the right place for this\n      // might be if the styling removes the align class\n      if (this.getAlign()) {\n        element.classList.add(this.getAlign());\n      }\n      const valueElement = this.getValueElement ? this.getValueElement() : element.querySelector('.value');\n      if (undefined !== value) {\n        valueElement.replaceChildren(); // delete anything inside\n        this.defaultValue2DOM(value, valueElement);\n      } else {\n        valueElement.textContent = '-';\n      }\n      return value;\n    },\n\n    /**\n     * Internal function which updates the DOM element with the given value\n     * @param {HTMLElement} targetElement - element to update\n     * @param {*} value - value to add to the element\n     */\n    _applyValueToDom(targetElement, value) {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (value instanceof Node) {\n        targetElement.appendChild(value);\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        targetElement.appendChild(document.createTextNode(value));\n      } else {\n        targetElement.innerHTML += value;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,0BAA0B,EAAE;IAC1CC,OAAO,EAAEC,EAAE,CAACC,EAAE,CAACC,MAAM,CAACC,UAAU;IAEhC;AACF;AACA;AACA;AACA;IACEC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,KAAK,EAAE;QACLC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIC,UAAU,EAAE;QACVH,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;MACIG,MAAM,EAAE;QACNC,KAAK,EAAE,QAAQ;QACfJ,IAAI,EAAE,EAAE;QACRD,QAAQ,EAAE;MACZ;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IACEM,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAACR,KAAK,EAAES,WAAW,EAAE;QAC/B,IAAIA,WAAW,IAAId,EAAE,CAACe,MAAM,CAACC,UAAU,CAACF,WAAW,CAAC,EAAE;UACpD,IAAMG,OAAO,GAAGjB,EAAE,CAACe,MAAM,CAACG,UAAU,CAACJ,WAAW,CAAC;UAEjD,IAAIK,GAAG,GAAGd,KAAK;UACf,IAAIY,OAAO,CAACG,OAAO,EAAE;YACnBD,GAAG,GAAGF,OAAO,CAACG,OAAO,CAACD,GAAG,CAAC;UAC5B;UAEA,IAAME,QAAQ,GAAG,SAAXA,QAAQA,CAAaC,CAAC,EAAE;YAC5B,IAAIA,CAAC,KAAK,IAAI,IAAIL,OAAO,CAACM,IAAI,EAAE;cAC9B,OAAON,OAAO,CAACM,IAAI;YACrB,CAAC,MAAM,IAAIN,OAAO,CAACK,CAAC,CAAC,EAAE;cACrB,OAAOL,OAAO,CAACK,CAAC,CAAC;YACnB,CAAC,MAAM,IAAIL,OAAO,CAACO,KAAK,EAAE;cACxB,IAAMC,UAAU,GAAGC,UAAU,CAACJ,CAAC,CAAC;cAChC,IAAME,KAAK,GAAGP,OAAO,CAACO,KAAK;cAC3B,KAAK,IAAIG,GAAG,IAAIH,KAAK,EAAE;gBACrB,IAAIG,GAAG,GAAGF,UAAU,EAAE;kBACpB;gBACF;gBACA,IAAID,KAAK,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGF,UAAU,EAAE;kBAC9B;gBACF,CAAC,CAAC;gBACF,OAAOD,KAAK,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC;cACtB;YACF,CAAC,MAAM,IAAIV,OAAO,CAAC,GAAG,CAAC,EAAE;cACvB;cACA,OAAOA,OAAO,CAAC,GAAG,CAAC;YACrB;YACA,OAAOK,CAAC,CAAC,CAAC;UACZ,CAAC;;UACDH,GAAG,GAAGE,QAAQ,CAACF,GAAG,CAAC;UACnB,IAAI,CAACA,GAAG,IAAIF,OAAO,CAACW,YAAY,EAAE;YAChCT,GAAG,GAAGE,QAAQ,CAACJ,OAAO,CAACW,YAAY,CAAC;UACtC;UACA,IAAIT,GAAG,KAAKU,SAAS,EAAE;YACrB,OAAOV,GAAG;UACZ;QACF;QACA,OAAOd,KAAK;MACd;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IACEyB,OAAO,EAAE;MACPC,gBAAgB,EAAE,IAAI;MACtB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAACC,OAAO,EAAEC,IAAI,EAAE;QAC5B,IAAID,OAAO,EAAE;UACX;UACA,OAAOjC,EAAE,CAACmC,SAAS,CAACC,MAAM,CAAC,IAAI,CAACC,UAAU,EAAE,CAACJ,OAAO,CAAC,EAAEC,IAAI,CAAC;QAC9D;QACA,OAAOA,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIrB,YAAY,WAAAA,aAACR,KAAK,EAAES,WAAW,EAAE;QAC/B,IAAI,CAACA,WAAW,EAAE;UAChBA,WAAW,GAAG,IAAI,CAACI,UAAU,EAAE;QACjC;QACA,OAAOlB,EAAE,CAACC,EAAE,CAACC,MAAM,CAACoC,WAAW,CAACzB,YAAY,CAACR,KAAK,EAAES,WAAW,CAAC;MAClE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIyB,kBAAkB,WAAAA,mBAAClC,KAAK,EAAEmC,QAAQ,EAAE;QAClC,IAAIA,QAAQ,IAAIxC,EAAE,CAACe,MAAM,CAACC,UAAU,CAACwB,QAAQ,CAAC,EAAE;UAC9C,IAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACzC,EAAE,CAACe,MAAM,CAACG,UAAU,CAACsB,QAAQ,CAAC,CAAC;UACxD,OAAOC,IAAI,CAAC,CAACA,IAAI,CAACE,OAAO,CAAC,EAAE,GAAGtC,KAAK,CAAC,GAAG,CAAC,IAAIoC,IAAI,CAACG,MAAM,CAAC;QAC3D;QACA,OAAOvC,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIwC,WAAW,WAAAA,YAACZ,OAAO,EAAE5B,KAAK,EAAE;QAC1B,IAAI,IAAI,CAACyC,SAAS,EAAE,EAAE;UACpB,IAAI,CAAC,IAAI,CAACf,gBAAgB,EAAE;YAC1B,IAAI,CAACA,gBAAgB,GAAG,CAAC,IAAI,CAACe,SAAS,EAAE,CAAC;UAC5C;UAEA,IAAMC,UAAU,GAAG,IAAI,CAACV,UAAU,EAAE,IAAI,IAAI,CAACA,UAAU,EAAE,CAACJ,OAAO,CAAC,GAAG,IAAI,CAACI,UAAU,EAAE,CAACJ,OAAO,CAAC,CAACe,SAAS,GAAG,CAAC;UAE7G,IAAI,CAACjB,gBAAgB,CAACgB,UAAU,CAAC,GAAG1C,KAAK;UAEzC,OAAOL,EAAE,CAACiD,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,KAAK,CAAC,IAAI,EAAE,IAAI,CAACrB,gBAAgB,CAAC;QAClE;QACA,OAAO1B,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIgD,oBAAoB,WAAAA,qBAACpB,OAAO,EAAEC,IAAI,EAAE;QAClC;QACA,IAAI7B,KAAK,GAAG,IAAI,CAAC2B,cAAc,CAACC,OAAO,EAAEC,IAAI,CAAC;;QAE9C;QACA,IAAI7B,KAAK,KAAKwB,SAAS,EAAE;UACvB,IAAI,CAACyB,aAAa,CAACjD,KAAK,CAAC;QAC3B;;QAEA;QACAA,KAAK,GAAG,IAAI,CAACQ,YAAY,CAACR,KAAK,CAAC;;QAEhC;QACA,IAAIA,KAAK,KAAKwB,SAAS,EAAE;UACvBxB,KAAK,GAAG,IAAI,CAACwC,WAAW,CAACZ,OAAO,EAAE5B,KAAK,CAAC;UACxC,IAAI,CAACkD,QAAQ,CAAClD,KAAK,CAAC;QACtB;QAEA,IAAIA,KAAK,IAAIA,KAAK,CAACmD,WAAW,KAAKC,IAAI,EAAE;UACvC,QACE,IAAI,CAACpB,UAAU,EAAE,CAACJ,OAAO,CAAC,CAACyB,SAAS,CAAC;UAAA;YAErC,KAAK,YAAY;cACfrD,KAAK,GAAGA,KAAK,CAACsD,kBAAkB,EAAE;cAClC;YACF,KAAK,YAAY;cACftD,KAAK,GAAGA,KAAK,CAACuD,kBAAkB,EAAE;cAClC;YACF,KAAK,aAAa;cAChBvD,KAAK,GAAGA,KAAK,CAACuD,kBAAkB,EAAE;cAClC;YACF,KAAK,SAAS;cACZvD,KAAK,GAAGA,KAAK,CAACsD,kBAAkB,EAAE;cAClC;UAAM;QAEZ;QAEA,IAAI,CAACE,YAAY,CAAC,IAAI,CAACC,aAAa,EAAE,CAAC;QACvC;QACA,OAAOzD,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;MACI;AACJ;AACA;AACA;AACA;AACA;AACA;MACI0D,gBAAgB,WAAAA,iBAAC1D,KAAK,EAAE2D,aAAa,EAAoC;QAAA,IAAAC,KAAA;QAAA,IAAlCC,QAAQ,GAAAC,SAAA,CAAAvB,MAAA,QAAAuB,SAAA,QAAAtC,SAAA,GAAAsC,SAAA,MAAG,IAAI,CAACC,gBAAgB;QACrE,IAAIC,KAAK,CAACC,OAAO,CAACjE,KAAK,CAAC,EAAE;UACxBA,KAAK,CAACkE,OAAO,CAAC,UAAAjD,CAAC;YAAA,OAAI2C,KAAI,CAACF,gBAAgB,CAACzC,CAAC,EAAE0C,aAAa,EAAEE,QAAQ,CAAC;UAAA,EAAC;UACrE;QACF;QACA,IAAI7D,KAAK,YAAYmE,IAAI,EAAE;UACzB,IAAIC,OAAO,GAAGpE,KAAK,CAACqE,SAAS,CAAC,IAAI,CAAC;UACnC,IAAIrE,KAAK,CAACsE,UAAU,EAAE;YACpB3E,EAAE,CAACiD,IAAI,CAAC2B,SAAS,CAACC,iBAAiB,CAACJ,OAAO,CAAC;UAC9C;UACAP,QAAQ,CAACF,aAAa,EAAES,OAAO,CAAC;QAClC,CAAC,MAAM;UACLP,QAAQ,CAACF,aAAa,EAAE3D,KAAK,CAAC;QAChC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIyE,aAAa,WAAAA,cAACC,EAAE,EAAE7C,IAAI,EAAE8C,aAAa,EAAE;QACrC,IAAMP,OAAO,GAAGO,aAAa,IAAI,IAAI,CAACC,aAAa,EAAE;QACrD,IAAM5E,KAAK,GAAG,IAAI,CAACgD,oBAAoB,CAAC0B,EAAE,EAAE7C,IAAI,CAAC;;QAEjD;QACA;QACA,IAAI,IAAI,CAACgD,QAAQ,EAAE,EAAE;UACnBT,OAAO,CAACU,SAAS,CAACC,GAAG,CAAC,IAAI,CAACF,QAAQ,EAAE,CAAC;QACxC;QACA,IAAMG,YAAY,GAAG,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,EAAE,GAAGb,OAAO,CAACc,aAAa,CAAC,QAAQ,CAAC;QACpG,IAAI1D,SAAS,KAAKxB,KAAK,EAAE;UACvBgF,YAAY,CAACG,eAAe,EAAE,CAAC,CAAC;UAChC,IAAI,CAACzB,gBAAgB,CAAC1D,KAAK,EAAEgF,YAAY,CAAC;QAC5C,CAAC,MAAM;UACLA,YAAY,CAACI,WAAW,GAAG,GAAG;QAChC;QACA,OAAOpF,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI+D,gBAAgB,WAAAA,iBAACJ,aAAa,EAAE3D,KAAK,EAAE;QACrC,IAAIA,KAAK,KAAKwB,SAAS,IAAIxB,KAAK,KAAK,IAAI,EAAE;UACzC;QACF;QACA,IAAIA,KAAK,YAAYmE,IAAI,EAAE;UACzBR,aAAa,CAAC0B,WAAW,CAACrF,KAAK,CAAC;QAClC,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UACjE2D,aAAa,CAAC0B,WAAW,CAACC,QAAQ,CAACC,cAAc,CAACvF,KAAK,CAAC,CAAC;QAC3D,CAAC,MAAM;UACL2D,aAAa,CAAC6B,SAAS,IAAIxF,KAAK;QAClC;MACF;IACF;EACF,CAAC,CAAC;EAzTFL,EAAE,CAACC,EAAE,CAACC,MAAM,CAACoC,WAAW,CAAC1C,aAAa,GAAGA,aAAa;AAAC"
}