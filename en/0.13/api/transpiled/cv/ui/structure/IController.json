{
  "className": "cv.ui.structure.IController",
  "packageName": "cv.ui.structure",
  "name": "IController",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 129,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Interface for structure controllers.</p><div class=\"authors\"><label>Author:</label> Tobias Bräutigam</div><div class=\"since\"><label>Since:</label> 2022</div>"
        }
      ],
      "@author": [
        {
          "name": "@author",
          "body": "Tobias Bräutigam"
        }
      ],
      "@since": [
        {
          "name": "@since",
          "body": "2022"
        }
      ]
    }
  },
  "type": "interface",
  "properties": {
    "renderTarget": {
      "location": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 38,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The target this structure should be inserted into as CSS selector string</p>"
          }
        ]
      },
      "name": "renderTarget",
      "propertyType": "new",
      "check": "String"
    },
    "namespace": {
      "location": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 45,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Namespace for path ids</p>"
          }
        ]
      },
      "name": "namespace",
      "propertyType": "new",
      "check": "String"
    }
  },
  "members": {
    "getHtmlStructure": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the main HTML structure needed by this structure, this content will be injected to the document\n body as innerHTML</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML code",
            "type": "String",
            "description": " HTML code"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "parseBackendSettings": {
      "location": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Extract backend specific settings from the config</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "xml {XMLDocument} loaded config",
            "paramName": "xml",
            "description": " loaded config",
            "type": "XMLDocument"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if backend setting have been parsed",
            "type": "Boolean",
            "description": " true if backend setting have been parsed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "parseSettings": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parses structure specific settings</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "xml {XMLDocument} loaded config",
            "paramName": "xml",
            "description": " loaded config",
            "type": "XMLDocument"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "preParse": {
      "location": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pre parsing hook, do everything here that is needed before the real parsing process can start</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "xml {XMLDocument}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createUI": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Generate the UI code from the config file</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "config {Object} loaded config file usually an XMLDocument but other structures might use different formats",
            "paramName": "config",
            "description": " loaded config file usually an XMLDocument but other structures might use different formats",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "doScreenSave": {
      "location": {
        "start": {
          "line": 96,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle fired event from screensaver</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array<string>} Array with addresses",
            "type": "Array<string>",
            "description": " Array with addresses"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInitialAddresses": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the addresses needed to update all states on the initially loaded page</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "backendName {string} name of the backend",
            "paramName": "backendName",
            "description": " name of the backend",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array<string>} list of addresses",
            "type": "Array<string>",
            "description": " list of addresses"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInitialPageId": {
      "location": {
        "start": {
          "line": 111,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget id of the page item initially loaded</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} widget path like 'id_'...",
            "type": "String",
            "description": " widget path like 'id_'..."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supports": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check this structure for feature support</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "feature {String} name of the feature ti check, e.g. 'navbar'",
            "paramName": "feature",
            "description": " name of the feature ti check, e.g. 'navbar'",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "subfeature {String?} optional name of a sub feature to check",
            "paramName": "subfeature",
            "description": " optional name of a sub feature to check",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onHistoryRequest": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>handle browser history events that are used to navigate inside the visu</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "anchor {String}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRenderTarget": {
      "type": "function",
      "name": "getRenderTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>renderTarget</code>.\n\nFor further details take a look at the property definition: {@link #renderTarget}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for renderTarget"
          }
        ]
      }
    },
    "setRenderTarget": {
      "type": "function",
      "name": "setRenderTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>renderTarget</code>.\n\nFor further details take a look at the property definition: {@link #renderTarget}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for renderTarget"
          }
        ]
      }
    },
    "resetRenderTarget": {
      "type": "function",
      "name": "resetRenderTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>renderTarget</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #renderTarget}."
          }
        ]
      }
    },
    "getNamespace": {
      "type": "function",
      "name": "getNamespace",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>namespace</code>.\n\nFor further details take a look at the property definition: {@link #namespace}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for namespace"
          }
        ]
      }
    },
    "setNamespace": {
      "type": "function",
      "name": "setNamespace",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>namespace</code>.\n\nFor further details take a look at the property definition: {@link #namespace}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for namespace"
          }
        ]
      }
    },
    "resetNamespace": {
      "type": "function",
      "name": "resetNamespace",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>namespace</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #namespace}."
          }
        ]
      }
    }
  },
  "descendants": []
}