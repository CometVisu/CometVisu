{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "properties",
    "renderTarget",
    "check",
    "namespace",
    "members",
    "getHtmlStructure",
    "parseBackendSettings",
    "xml",
    "parseSettings",
    "preParse",
    "createUI",
    "config",
    "doScreenSave",
    "getInitialAddresses",
    "backendName",
    "getInitialPageId",
    "supports",
    "feature",
    "subfeature",
    "onHistoryRequest",
    "anchor",
    "cv",
    "ui",
    "structure",
    "IController"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/structure/IController.js"
  ],
  "sourcesContent": [
    "/* IController.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Interface for structure controllers.\n * @author Tobias Br√§utigam\n * @since 2022\n */\nqx.Interface.define('cv.ui.structure.IController', {\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    /**\n     * The target this structure should be inserted into as CSS selector string\n     */\n    renderTarget: {\n      check: 'String'\n    },\n\n    /**\n     * Namespace for path ids\n     */\n    namespace: {\n      check: 'String'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /**\n     * Returns the main HTML structure needed by this structure, this content will be injected to the document\n     * body as innerHTML\n     * @return {String} HTML code\n     */\n    getHtmlStructure() {},\n\n    /**\n     * Extract backend specific settings from the config\n     * @param xml {XMLDocument} loaded config\n     * @return {Boolean} true if backend setting have been parsed\n     */\n    parseBackendSettings(xml) {},\n\n    /**\n     * Parses structure specific settings\n     * @param xml {XMLDocument} loaded config\n     */\n    parseSettings(xml) {},\n\n    /**\n     * Pre parsing hook, do everything here that is needed before the real parsing process can start\n     * @param xml {XMLDocument}\n     */\n    async preParse(xml) {},\n\n    /**\n     * Generate the UI code from the config file\n     * @param config {Object} loaded config file usually an XMLDocument but other structures might use different formats\n     */\n    createUI(config) {},\n\n    /**\n     * Handle fired event from screensaver\n     * @return {Array<string>} Array with addresses\n     */\n    doScreenSave() {},\n\n    /**\n     * Return the addresses needed to update all states on the initially loaded page\n     * @param backendName {string} name of the backend\n     * @return {Array<string>} list of addresses\n     */\n    getInitialAddresses(backendName) {},\n\n    /**\n     * Returns the widget id of the page item initially loaded\n     * @returns {String} widget path like 'id_'...\n     */\n    async getInitialPageId() {},\n\n    /**\n     * Check this structure for feature support\n     * @param feature {String} name of the feature ti check, e.g. 'navbar'\n     * @param subfeature {String?} optional name of a sub feature to check\n     */\n    supports(feature, subfeature) {},\n\n    /**\n     * handle browser history events that are used to navigate inside the visu\n     * @param anchor {String}\n     */\n    onHistoryRequest(anchor) {}\n  }\n});\n"
  ],
  "mappings": ";+CACA;AAAA;AAAA;AAAA;EAAA;IAAA;MAAA;QAAA;QAAA;MAAA;IAAA;EAAA;EADAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,6BAA6B,EAAE;IACjD;AACF;AACA;AACA;AACA;IACEC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,YAAY,EAAE;QACZC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIC,SAAS,EAAE;QACTD,KAAK,EAAE;MACT;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IACEE,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,8BAAG,CAAC,CAAC;MAErB;AACJ;AACA;AACA;AACA;MACIC,oBAAoB,gCAACC,GAAG,EAAE,CAAC,CAAC;MAE5B;AACJ;AACA;AACA;MACIC,aAAa,yBAACD,GAAG,EAAE,CAAC,CAAC;MAErB;AACJ;AACA;AACA;MACUE,QAAQ,oBAACF,GAAG,EAAE;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;MAAC,CAAC;MAEtB;AACJ;AACA;AACA;MACIG,QAAQ,oBAACC,MAAM,EAAE,CAAC,CAAC;MAEnB;AACJ;AACA;AACA;MACIC,YAAY,0BAAG,CAAC,CAAC;MAEjB;AACJ;AACA;AACA;AACA;MACIC,mBAAmB,+BAACC,WAAW,EAAE,CAAC,CAAC;MAEnC;AACJ;AACA;AACA;MACUC,gBAAgB,8BAAG;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;MAAC,CAAC;MAE3B;AACJ;AACA;AACA;AACA;MACIC,QAAQ,oBAACC,OAAO,EAAEC,UAAU,EAAE,CAAC,CAAC;MAEhC;AACJ;AACA;AACA;MACIC,gBAAgB,4BAACC,MAAM,EAAE,CAAC;IAC5B;EACF,CAAC,CAAC;EApHFC,EAAE,CAACC,EAAE,CAACC,SAAS,CAACC,WAAW,CAAC3B,aAAa,GAAGA,aAAa;AAAC"
}