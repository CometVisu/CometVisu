{
  "version": 3,
  "names": [
    "_regeneratorRuntime",
    "exports",
    "Op",
    "Object",
    "prototype",
    "hasOwn",
    "hasOwnProperty",
    "defineProperty",
    "obj",
    "key",
    "desc",
    "value",
    "$Symbol",
    "Symbol",
    "iteratorSymbol",
    "iterator",
    "asyncIteratorSymbol",
    "asyncIterator",
    "toStringTagSymbol",
    "toStringTag",
    "define",
    "enumerable",
    "configurable",
    "writable",
    "err",
    "wrap",
    "innerFn",
    "outerFn",
    "self",
    "tryLocsList",
    "protoGenerator",
    "Generator",
    "generator",
    "create",
    "context",
    "Context",
    "makeInvokeMethod",
    "tryCatch",
    "fn",
    "arg",
    "type",
    "call",
    "ContinueSentinel",
    "GeneratorFunction",
    "GeneratorFunctionPrototype",
    "IteratorPrototype",
    "getProto",
    "getPrototypeOf",
    "NativeIteratorPrototype",
    "values",
    "Gp",
    "defineIteratorMethods",
    "forEach",
    "method",
    "_invoke",
    "AsyncIterator",
    "PromiseImpl",
    "invoke",
    "resolve",
    "reject",
    "record",
    "result",
    "_typeof",
    "__await",
    "then",
    "unwrapped",
    "error",
    "previousPromise",
    "callInvokeWithMethodAndArg",
    "state",
    "Error",
    "doneResult",
    "delegate",
    "delegateResult",
    "maybeInvokeDelegate",
    "sent",
    "_sent",
    "dispatchException",
    "abrupt",
    "done",
    "methodName",
    "undefined",
    "TypeError",
    "info",
    "resultName",
    "next",
    "nextLoc",
    "pushTryEntry",
    "locs",
    "entry",
    "tryLoc",
    "catchLoc",
    "finallyLoc",
    "afterLoc",
    "tryEntries",
    "push",
    "resetTryEntry",
    "completion",
    "reset",
    "iterable",
    "iteratorMethod",
    "isNaN",
    "length",
    "i",
    "displayName",
    "isGeneratorFunction",
    "genFun",
    "ctor",
    "constructor",
    "name",
    "mark",
    "setPrototypeOf",
    "__proto__",
    "awrap",
    "async",
    "Promise",
    "iter",
    "keys",
    "val",
    "object",
    "reverse",
    "pop",
    "skipTempReset",
    "prev",
    "charAt",
    "slice",
    "stop",
    "rootRecord",
    "rval",
    "exception",
    "handle",
    "loc",
    "caught",
    "hasCatch",
    "hasFinally",
    "finallyEntry",
    "complete",
    "finish",
    "_catch",
    "thrown",
    "delegateYield",
    "asyncGeneratorStep",
    "gen",
    "_next",
    "_throw",
    "_asyncToGenerator",
    "args",
    "arguments",
    "apply",
    "_defineProperties",
    "target",
    "props",
    "descriptor",
    "_toPropertyKey",
    "_createClass",
    "Constructor",
    "protoProps",
    "staticProps",
    "_toPrimitive",
    "String",
    "input",
    "hint",
    "prim",
    "toPrimitive",
    "res",
    "Number",
    "_classCallCheck",
    "instance",
    "_inherits",
    "subClass",
    "superClass",
    "_setPrototypeOf",
    "o",
    "p",
    "bind",
    "_createSuper",
    "Derived",
    "hasNativeReflectConstruct",
    "_isNativeReflectConstruct",
    "_createSuperInternal",
    "Super",
    "_getPrototypeOf",
    "NewTarget",
    "Reflect",
    "construct",
    "_possibleConstructorReturn",
    "_assertThisInitialized",
    "ReferenceError",
    "sham",
    "Proxy",
    "Boolean",
    "valueOf",
    "e",
    "_createForOfIteratorHelper",
    "allowArrayLike",
    "it",
    "Array",
    "isArray",
    "_unsupportedIterableToArray",
    "F",
    "s",
    "n",
    "_e2",
    "f",
    "normalCompletion",
    "didErr",
    "step",
    "_e3",
    "minLen",
    "_arrayLikeToArray",
    "toString",
    "from",
    "test",
    "arr",
    "len",
    "arr2",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "Class",
    "extend",
    "core",
    "implement",
    "cv",
    "ui",
    "structure",
    "IController",
    "__HTML_STRUCT",
    "bom",
    "Stylesheet",
    "includeFile",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "replace",
    "Config",
    "forceReload",
    "Date",
    "now",
    "locale",
    "Manager",
    "addListener",
    "_onChangeLocale",
    "statics",
    "PREFIX",
    "__MAP",
    "__I",
    "MAPPING_PARAM_REGEX",
    "register",
    "webComponentName",
    "qxClass",
    "onComponentCreated",
    "element",
    "tagName",
    "toLowerCase",
    "QxClass",
    "log",
    "Logger",
    "properties",
    "renderTarget",
    "check",
    "init",
    "document",
    "body",
    "namespace",
    "members",
    "__mappings",
    "__stylings",
    "getHtmlStructure",
    "supports",
    "feature",
    "subfeature",
    "initLayout",
    "__gotoStartPage",
    "__P_72_5",
    "location",
    "hash",
    "scrollToPage",
    "getInitialPageId",
    "substring",
    "onHistoryRequest",
    "anchor",
    "pageId",
    "skipHistory",
    "page",
    "querySelector",
    "classList",
    "contains",
    "_iterator",
    "querySelectorAll",
    "_step",
    "oldPage",
    "remove",
    "_iterator2",
    "_step2",
    "add",
    "parentElement",
    "nodeName",
    "headline",
    "getAttribute",
    "pageTitle",
    "History",
    "addToHistory",
    "event",
    "message",
    "Bus",
    "dispatchByName",
    "warn",
    "parseBackendSettings",
    "xml",
    "_this",
    "client",
    "io",
    "BackendConnections",
    "initBackendClient",
    "login",
    "configSettings",
    "credentials",
    "debug",
    "startInitialRequest",
    "parseSettings",
    "config",
    "_this2",
    "settings",
    "configElement",
    "documentElement",
    "bindClickToWidget",
    "translate",
    "cacheUsed",
    "templates",
    "ajaxRequest",
    "request",
    "Xhr",
    "set",
    "accept",
    "cache",
    "addListenerOnce",
    "content",
    "getTarget",
    "getResponse",
    "getRenderTarget",
    "registerTemplates",
    "child",
    "xmlns",
    "text",
    "getResponseText",
    "parser",
    "DOMParser",
    "parseFromString",
    "firstElementChild",
    "appendChild",
    "observeVisibility",
    "TemplateEngine",
    "setDomFinished",
    "main",
    "addEventListener",
    "scrollTop",
    "_iterator3",
    "_step3",
    "elem",
    "_iterator4",
    "_step4",
    "status",
    "getTransport",
    "Request",
    "isSuccessful",
    "send",
    "template",
    "customElements",
    "tile",
    "Controller",
    "_TemplatedElement",
    "_class",
    "_super",
    "TemplatedElement",
    "preParse",
    "_this3",
    "_callee",
    "theme",
    "data",
    "_callee$",
    "_context",
    "hasAttribute",
    "window",
    "matchMedia",
    "matches",
    "setAttribute",
    "Model",
    "updateFrom",
    "createUI",
    "observer",
    "IntersectionObserver",
    "entries",
    "isIntersecting",
    "removeAttribute",
    "unobserve",
    "root",
    "_iterator5",
    "_step5",
    "iframe",
    "observe",
    "doc",
    "rememberKeys",
    "useKeys",
    "language",
    "getLanguage",
    "match",
    "exec",
    "search",
    "_trKeys",
    "_i",
    "_arr",
    "attr",
    "_iterator6",
    "concat",
    "_step6",
    "trNameElement",
    "translation",
    "textContent",
    "trim",
    "_iterator7",
    "_step7",
    "trTextElement",
    "doScreenSave",
    "screensave_page",
    "getInitialAddresses",
    "firstPage",
    "id",
    "addMapping",
    "mapping",
    "removeMapping",
    "mapValue",
    "mappingName",
    "store",
    "params",
    "JSON",
    "parse",
    "replaceAll",
    "addStyling",
    "styling",
    "removeStyling",
    "styleValue",
    "stylingName",
    "parseLabel",
    "defer",
    "cvTestMode",
    "Application",
    "structureController",
    "destruct",
    "removeListener",
    "_HTMLElement",
    "_super2",
    "templateId",
    "_this4",
    "controller",
    "getElementById",
    "slotAttributes",
    "cloneNode",
    "_iterator8",
    "getAttributeNames",
    "_step8",
    "_iterator9",
    "_step9",
    "_loop",
    "slot",
    "slotName",
    "replacementSelector",
    "slotParentScope",
    "parseInt",
    "slotContents",
    "attrs",
    "l",
    "attributes",
    "includes",
    "slotContent",
    "newNode",
    "attrName",
    "parentNode",
    "insertBefore",
    "replaced",
    "children",
    "targets",
    "targetName",
    "endsWith",
    "_iterator10",
    "_step10",
    "targetValue",
    "startsWith",
    "_iterator11",
    "split",
    "_step11",
    "_entry$split",
    "_entry$split2",
    "_slicedToArray",
    "_toConsumableArray",
    "innerHTML",
    "_wrapNativeSuper",
    "HTMLElement"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/structure/tile/Controller.js"
  ],
  "sourcesContent": [
    "/* Controller.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Controller for the 'tile' structure.\n *\n * This structure is based on web-components and does not need a parser to work.\n * The config file is directly attached to the document body.\n * The widgets in this structure register a customElement and the browser automatically creates instances\n * of this widgets once the customElement is added to the body.\n *\n * The basic structure is a set of pages that contain a list of tiles.\n * Each tile contains a grid of 3 rows and 3 columns. The components can be added to a cell of that grid\n * but also can spread over more than one cell by using row-/column spanning.\n *\n * This structure provides some tiles with a pre-defined content, e.g. a <cv-switch> which\n * contains of a button in the middle of the tile and a primary- and secondary label in the third row.\n *\n * Those pre-defined tiles are provided by a <template> (@see https://developer.mozilla.org/de/docs/Web/HTML/Element/template)\n * User are able to define own templates for re-usable tiles if they need one that this structure does not provide.\n *\n * @asset(structures/tile/*)\n * @author Tobias Bräutigam\n * @since 2022\n * @ignore(IntersectionObserver)\n */\nqx.Class.define('cv.ui.structure.tile.Controller', {\n  extend: qx.core.Object,\n  type: 'singleton',\n  implement: cv.ui.structure.IController,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct() {\n    super();\n    this.__HTML_STRUCT = '';\n    qx.bom.Stylesheet.includeFile(\n      qx.util.ResourceManager.getInstance().toUri('designs/tile-globals.scss').replace('.scss', '.css') +\n        (cv.Config.forceReload === true ? '?' + Date.now() : '')\n    );\n    qx.locale.Manager.getInstance().addListener('changeLocale', this._onChangeLocale, this);\n  },\n\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    // prefix for all custom components uses/provided by this structure\n    PREFIX: 'cv-',\n    __MAP: {},\n    __I: {},\n\n    MAPPING_PARAM_REGEX: /^(.+)\\(([^)]+)\\)$/,\n\n    register(webComponentName, qxClass) {\n      this.__MAP[webComponentName] = qxClass;\n    },\n\n    onComponentCreated(element) {\n      const name = element.tagName.toLowerCase();\n      if (Object.prototype.hasOwnProperty.call(this, name)) {\n        const QxClass = this.__MAP[name];\n        if (!Object.prototype.hasOwnProperty.call(this, name)) {\n          this.__I[name] = [];\n        }\n        this.__I[name].push(new QxClass(element));\n      } else {\n        qx.log.Logger.error(this, 'no QxClass registered for custom element ' + name);\n      }\n    }\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    /**\n     * The target this structure should be inserted into\n     */\n    renderTarget: {\n      check: 'Element',\n      init: document.body\n    },\n\n    /**\n     * Namespace for path ids\n     */\n    namespace: {\n      check: 'String',\n      init: ''\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    __HTML_STRUCT: null,\n    __mappings: null,\n    __stylings: null,\n\n    getHtmlStructure() {\n      return this.__HTML_STRUCT;\n    },\n\n    supports(feature, subfeature) {\n      return false;\n    },\n\n    initLayout() {},\n\n    __gotoStartPage() {\n      // open first page\n      if (!document.location.hash) {\n        this.scrollToPage(this.getInitialPageId());\n      } else {\n        this.scrollToPage(document.location.hash.substring(1));\n      }\n    },\n\n    onHistoryRequest(anchor) {\n      if (anchor) {\n        this.scrollToPage(anchor);\n      }\n    },\n\n    scrollToPage(pageId, skipHistory) {\n      if (!pageId) {\n        return;\n      }\n      const page = document.querySelector('#' + pageId);\n      if (page) {\n        if (!page.classList.contains('active')) {\n          for (let oldPage of document.querySelectorAll('cv-page.active')) {\n            oldPage.classList.remove('active');\n          }\n          for (let oldPage of document.querySelectorAll('cv-page.sub-active')) {\n            oldPage.classList.remove('sub-active');\n          }\n          page.classList.add('active');\n          // mark parent pages that there is an active subpage\n          let parentElement = page.parentElement;\n          while (parentElement && parentElement.nodeName.toLowerCase() !== 'main') {\n            if (parentElement.nodeName.toLowerCase() === 'cv-page') {\n              parentElement.classList.add('sub-active');\n            }\n            parentElement = parentElement.parentElement;\n          }\n\n          if (skipHistory === undefined) {\n            const headline = page.getAttribute('name');\n            let pageTitle = 'CometVisu';\n            if (headline) {\n              pageTitle = headline + ' - ' + pageTitle;\n            }\n            qx.bom.History.getInstance().addToHistory(pageId, pageTitle);\n          }\n          qx.event.message.Bus.dispatchByName('cv.ui.structure.tile.currentPage', page);\n        }\n      } else {\n        this.warn('no page with id', pageId, 'found');\n      }\n    },\n\n    // not needed, backend parse/init themselves\n    parseBackendSettings(xml) {\n      if (xml.querySelectorAll('cv-backend').length === 0) {\n        // no backends defined, use the default one;\n        const client = cv.io.BackendConnections.initBackendClient();\n        client.login(true, cv.Config.configSettings.credentials, () => {\n          this.debug('logged in');\n          cv.io.BackendConnections.startInitialRequest();\n        });\n      }\n      return false;\n    },\n\n    /**\n     * Parses structure specific settings\n     * @param config {XMLDocument} loaded config\n     */\n    parseSettings(config) {\n      document.body.classList.add('loading-structure');\n      const settings = cv.Config.configSettings;\n      const configElement = config.documentElement;\n      settings.bindClickToWidget = configElement.getAttribute('bind_click_to_widget') === 'true';\n      this.translate(config, true);\n\n      if (!cv.Config.cacheUsed) {\n        const templates = qx.util.ResourceManager.getInstance().toUri('structures/tile/templates.xml');\n\n        const ajaxRequest = new qx.io.request.Xhr(templates);\n        ajaxRequest.set({\n          accept: 'application/xml',\n          cache: !cv.Config.forceReload\n        });\n\n        ajaxRequest.addListenerOnce('success', e => {\n          let content = e.getTarget().getResponse();\n          const target = this.getRenderTarget();\n          this.debug('creating pages');\n          // register custom elements for templates in this document\n          this.registerTemplates(content);\n          let child;\n          // we need the documents to be in HTML namespace\n          if (!content.documentElement.xmlns) {\n            let text = e.getTarget().getResponseText();\n            text = text.replace('<templates', '<templates xmlns=\"http://www.w3.org/1999/xhtml\"');\n\n            const parser = new DOMParser();\n            content = parser.parseFromString(text, 'text/xml');\n          }\n          while ((child = content.documentElement.firstElementChild)) {\n            target.appendChild(child);\n          }\n\n          while ((child = configElement.firstElementChild)) {\n            target.appendChild(child);\n          }\n          document.body.classList.remove('loading-structure');\n          this.debug('finalizing');\n          this.observeVisibility();\n          qx.event.message.Bus.dispatchByName('setup.dom.append');\n          this.debug('pages created');\n          this.__gotoStartPage();\n          this.debug('setup.dom.finished');\n          qx.event.message.Bus.dispatchByName('setup.dom.finished.before');\n          cv.TemplateEngine.getInstance().setDomFinished(true);\n\n          const main = document.body.querySelector(':scope > main');\n          if (main) {\n            main.addEventListener('scroll', () => {\n              if (main.scrollTop > 20) {\n                for (const elem of document.body.querySelectorAll(':scope > header [hide-on-scroll=\"true\"]')) {\n                  elem.classList.add('scrolled');\n                }\n              } else {\n                for (const elem of document.body.querySelectorAll(':scope > header [hide-on-scroll=\"true\"]')) {\n                  elem.classList.remove('scrolled');\n                }\n              }\n            });\n          }\n        });\n        ajaxRequest.addListener('statusError', e => {\n          const status = e.getTarget().getTransport().status;\n          if (!qx.util.Request.isSuccessful(status)) {\n            this.error('filenotfound', templates);\n          }\n          document.body.classList.remove('loading-structure');\n        });\n\n        ajaxRequest.send();\n      }\n    },\n\n    /**\n     * Registers customElements for all templates in the given xml that are direct children of a <templates structure=\"tile\"> element\n     * @param xml {XMLDocument}\n     */\n    registerTemplates(xml) {\n      xml.querySelectorAll('templates[structure=\\'tile\\'] > template').forEach(template => {\n        customElements.define(\n          cv.ui.structure.tile.Controller.PREFIX + template.getAttribute('id'),\n          class extends TemplatedElement {\n            constructor() {\n              super(template.getAttribute('id'));\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Pre parsing hook, do everything here that is needed before the real parsing process can start\n     * @param xml {XMLDocument}\n     */\n    async preParse(xml) {\n      if (xml.documentElement.hasAttribute('theme')) {\n        let theme = xml.documentElement.getAttribute('theme');\n        const data = {};\n        if (theme === 'system') {\n          if (window.matchMedia) {\n            theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n            document.documentElement.setAttribute('data-theme', theme);\n            data['theme'] = theme;\n            cv.data.Model.getInstance().updateFrom('system', data);\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n              document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');\n\n              data['theme'] = e.matches ? 'dark' : 'light';\n              cv.data.Model.getInstance().updateFrom('system', data);\n            });\n          } else {\n            this.error('system theme detection not possible in this browser');\n          }\n        } else {\n          document.documentElement.setAttribute('data-theme', theme);\n          data['theme'] = theme;\n          cv.data.Model.getInstance().updateFrom('system', data);\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Generate the UI code from the config file\n     * @param config {Object} loaded config file usually an XMLDocument but other structures might use different formats\n     */\n    createUI(config) {},\n\n    observeVisibility() {\n      // find all pages with an iframe with attribute \"data-src\" and observe its parent page\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && entry.target.hasAttribute('data-src')) {\n            entry.target.setAttribute('src', entry.target.getAttribute('data-src'));\n            entry.target.removeAttribute('data-src');\n            observer.unobserve(entry.target);\n          }\n        }, {\n          root: document.querySelector('body > main')\n        });\n      });\n      for (const iframe of document.querySelectorAll('iframe[data-src], img[data-src]')) {\n        observer.observe(iframe);\n      }\n    },\n\n    translate(doc, rememberKeys, useKeys) {\n      let language = qx.locale.Manager.getInstance().getLanguage();\n      let match = /locale=([a-z]{2,3})/.exec(document.location.search);\n      if (match) {\n        language = match[1];\n      }\n      if (rememberKeys) {\n        this._trKeys = {};\n      }\n      for (const attr of ['name', 'label', 'title', 'format']) {\n        for (const trNameElement of doc.querySelectorAll(`*[${attr}^=\"tr(\"]`)) {\n          const match = /^tr\\('([^']+)'\\)$/.exec(trNameElement.getAttribute(attr));\n\n          if (!match && !useKeys) {\n            this.warn('attribute content no valid translation string', trNameElement.getAttribute(attr));\n\n            continue;\n          }\n          const key = useKeys ? this._trKeys[trNameElement.getAttribute(attr)] : match[1];\n          const translation = doc.querySelector(\n            `cv-translations > language[name=\"${language}\"] > tr[key='${key}']`\n          );\n\n          if (translation) {\n            if (rememberKeys) {\n              this._trKeys[translation.textContent.trim()] = key;\n            }\n            trNameElement.setAttribute(attr, translation.textContent.trim());\n          } else {\n            trNameElement.setAttribute(attr, key);\n            this.warn(`[${language}] no translation found for: \"${key}\"`);\n          }\n        }\n      }\n      for (const trTextElement of doc.querySelectorAll('*[tr=\"true\"]')) {\n        const key = useKeys ? this._trKeys[trTextElement.textContent.trim()] : trTextElement.textContent.trim();\n        const translation = doc.querySelector(\n          `cv-translations > language[name=\"${language}\"] > tr[key='${key}']`\n        );\n\n        if (translation) {\n          if (rememberKeys) {\n            this._trKeys[translation.textContent.trim()] = key;\n          }\n          trTextElement.textContent = translation.textContent.trim();\n        } else {\n          trTextElement.textContent = key;\n          this.warn(`[${language}] no translation found for: \"${key}\"`);\n        }\n      }\n    },\n\n    /**\n     * Handle fired event from screensaver\n     * @return {Array<string>} Array with addresses\n     */\n    doScreenSave() {\n      if (cv.Config.configSettings.screensave_page) {\n        this.scrollToPage(cv.Config.configSettings.screensave_page);\n      }\n    },\n\n    /**\n     * Return the addresses needed to update all states on the initially loaded page\n     */\n    getInitialAddresses() {\n      return [];\n    },\n\n    /**\n     * Returns the widget id of the page item initially loaded\n     * @returns {String} widget path like 'id_'...\n     */\n    getInitialPageId() {\n      const firstPage = document.querySelector('cv-page');\n      return firstPage ? firstPage.id : '';\n    },\n\n    /**\n     *\n     * @param name {String} mapping name\n     * @param mapping {cv.ui.structure.tile.elements.Mapping}\n     */\n    addMapping(name, mapping) {\n      if (!this.__mappings) {\n        this.__mappings = {};\n      }\n      this.__mappings[name] = mapping;\n    },\n\n    removeMapping(name) {\n      if (this.__mappings) {\n        delete this.__mappings[name];\n      }\n    },\n\n    mapValue(mappingName, value, store) {\n      let match;\n      let params = [];\n      if ((match = cv.ui.structure.tile.Controller.MAPPING_PARAM_REGEX.exec(mappingName)) !== null) {\n        // this mapping name contains a parameter\n        try {\n          params = JSON.parse(`[${match[2].replaceAll('\\'', '\"')}]`);\n        } catch (e) {\n          this.error('error parsing parameters from ' + mappingName);\n        }\n        mappingName = match[1];\n      }\n      if (this.__mappings && Object.prototype.hasOwnProperty.call(this.__mappings, mappingName)) {\n        return this.__mappings[mappingName].mapValue(value, store, params);\n      }\n      return value;\n    },\n\n    /**\n     * @param name {String} styling name\n     * @param styling {cv.ui.structure.tile.elements.Styling}\n     */\n    addStyling(name, styling) {\n      if (!this.__stylings) {\n        this.__stylings = {};\n      }\n      this.__stylings[name] = styling;\n    },\n\n    removeStyling(name) {\n      if (this.__stylings) {\n        delete this.__stylings[name];\n      }\n    },\n\n    styleValue(stylingName, value, store) {\n      if (this.__stylings && Object.prototype.hasOwnProperty.call(this.__stylings, stylingName)) {\n        return this.__stylings[stylingName].mapValue(value, store);\n      }\n      return value;\n    },\n\n    // for compatibility with pure controller\n    parseLabel() {\n      return '';\n    },\n\n    _onChangeLocale() {\n      this.translate(document.body, false, true);\n    }\n  },\n\n  defer(statics) {\n    if (!window.cvTestMode) {\n      // do not apply ourselves automatically in test mode\n      cv.Application.structureController = statics.getInstance();\n    }\n  },\n\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct() {\n    qx.locale.Manager.getInstance().removeListener('changeLocale', this._onChangeLocale, this);\n  }\n});\n\nclass TemplatedElement extends HTMLElement {\n  constructor(templateId) {\n    super();\n    const controller = cv.ui.structure.tile.Controller.getInstance();\n    let template = document.getElementById(templateId);\n    if (template) {\n      const slotAttributes = ['name', 'replaces', 'parent-scope'];\n      const content = template.content.cloneNode(true);\n\n      // copy all attributes, except 'id' of the template itself to the widget\n      for (const name of template.getAttributeNames()) {\n        if (name !== 'id') {\n          this.setAttribute(name, template.getAttribute(name));\n        }\n      }\n\n      // move slots into template\n      for (let slot of content.querySelectorAll('slot')) {\n        const slotName = slot.getAttribute('name');\n        const replacementSelector = slot.hasAttribute('replaces') ? slot.getAttribute('replaces') : '';\n        const slotParentScope = slot.hasAttribute('parent-scope') ? parseInt(slot.getAttribute('parent-scope')) : 0;\n        let slotContents = this.querySelectorAll(`[slot='${slotName}']`);\n        const attrs = {};\n        for (let i = 0, l = slot.attributes.length; i < l; i++) {\n          if (!slotAttributes.includes(slot.attributes[i].name)) {\n            attrs[slot.attributes[i].name] = slot.attributes[i].value;\n          }\n        }\n        if (slotContents.length > 0) {\n          Array.from(slotContents).forEach(slotContent => {\n            const newNode = slotContent.cloneNode(true);\n            Object.keys(attrs).forEach(attrName => {\n              if (newNode.hasAttribute(attrName)) {\n                if (attrName === 'class') {\n                  // append it\n                  newNode.classList.add(attrs[attrName]);\n                } else {\n                  qx.log.Logger.debug(controller, '[' + templateId + '] attribute', attrName, 'already set, skipping');\n                }\n              } else {\n                newNode.setAttribute(attrName, attrs[attrName]);\n              }\n            });\n            newNode.removeAttribute('slot');\n            slot.parentNode.insertBefore(newNode, slot);\n          });\n          slot.remove();\n          if (replacementSelector) {\n            content.querySelectorAll(replacementSelector).forEach(replaced => {\n              replaced.remove();\n            });\n          }\n        } else {\n          let parentNode = slot.parentNode;\n          if (slotParentScope > 0) {\n            // got slotParentScope elements up and remove that one\n            let i = slotParentScope - 1;\n            while (i > 0) {\n              parentNode = parentNode.parentNode;\n              i--;\n            }\n            if (parentNode) {\n              parentNode.remove();\n            }\n          } else {\n            slot.remove();\n            if (parentNode.children.length === 0) {\n              // also remove slots parent when it has no content\n              parentNode.remove();\n            }\n          }\n        }\n      }\n      // transfer attribute slots\n      const attributes = this.getAttributeNames();\n      attributes.forEach(name => {\n        let value = this.getAttribute(name);\n        const targets = content.querySelectorAll('[slot-' + name + ']');\n        let targetName = name;\n        // allow names like percent-mapping that should also be mapped to a certain elements 'mapping' attribute\n        if (name.endsWith('-mapping')) {\n          targetName = 'mapping';\n        } else if (name.endsWith('-styling')) {\n          targetName = 'styling';\n        } else if (name.endsWith('-format')) {\n          targetName = 'format';\n        }\n        for (const target of targets) {\n          if (targetName !== name && target.hasAttribute('slot-' + name)) {\n            const targetValue = target.getAttribute('slot-' + name);\n            if (targetValue.startsWith(':')) {\n              // this template slot-attribute contains some configuration\n              for (const entry of targetValue.substring(1).split(',')) {\n                const [key, value] = entry.split('=');\n                switch (key) {\n                  case 'target':\n                    name = value;\n                    break;\n                  default:\n                    qx.log.Logger.error(this, 'unhandled slot-attribute configuration key', key);\n                    break;\n                }\n              }\n            }\n            target.setAttribute(name, value);\n\n            target.removeAttribute('slot-' + name);\n          } else {\n            target.setAttribute(targetName, value);\n\n            target.removeAttribute('slot-' + targetName);\n          }\n        }\n        if (targets.length > 0) {\n          this.removeAttribute(name);\n        }\n      });\n      content.querySelectorAll('*').forEach(elem => {\n        [...elem.attributes].forEach(attr => {\n          if (attr.name.startsWith('slot-')) {\n            let targetName = attr.name.substring(5);\n            // only e.g. map slot-progress-mapping to mapping if we have no slot-mapping attribute\n            if (attr.name.endsWith('-mapping') && elem.hasAttribute('slot-mapping')) {\n              targetName = 'mapping';\n            } else if (attr.name.endsWith('-styling') && elem.hasAttribute('slot-styling')) {\n              targetName = 'styling';\n            } else if (attr.name.endsWith('-format') && elem.hasAttribute('slot-format')) {\n              targetName = 'format';\n            }\n            if (attr.value && !attr.value.startsWith(':')) {\n              elem.setAttribute(targetName, attr.value);\n            }\n            elem.removeAttribute(attr.name);\n          }\n        });\n      });\n\n      // clear content\n      this.innerHTML = '';\n      this.appendChild(content);\n      this.classList.add('cv-widget');\n    } else {\n      qx.log.Logger.error(controller, '[' + templateId + '] no template found for id', templateId);\n    }\n  }\n}\n"
  ],
  "mappings": "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"
}