{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/structure/tile/elements/Backend.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cv",
    "ui",
    "structure",
    "tile",
    "elements",
    "AbstractCustomElement",
    "members",
    "_name",
    "__applyValues",
    "_init",
    "element",
    "_element",
    "type",
    "getAttribute",
    "uriString",
    "hasAttribute",
    "uri",
    "URL",
    "window",
    "location",
    "origin",
    "pathname",
    "e",
    "error",
    "credentials",
    "username",
    "password",
    "model",
    "data",
    "Model",
    "getInstance",
    "backendUrl",
    "toString",
    "backendUrlConfigKey",
    "Config",
    "server",
    "name",
    "io",
    "BackendConnections",
    "hasClient",
    "getClient",
    "configuredIn",
    "log",
    "Logger",
    "warn",
    "debug",
    "notification",
    "topic",
    "title",
    "locale",
    "Manager",
    "tr",
    "message",
    "severity",
    "unique",
    "deletable",
    "core",
    "notifications",
    "Router",
    "dispatchMessage",
    "client",
    "addBackendClient",
    "_client",
    "update",
    "updateFrom",
    "login",
    "setDefaultBackendName",
    "doSubscribe",
    "address",
    "value",
    "onUpdate",
    "addressesToSubscribe",
    "getAddresses",
    "length",
    "subscribe",
    "TemplateEngine",
    "isDomFinished",
    "event",
    "Bus",
    "querySelectorAll",
    "textContent",
    "trim",
    "encoding",
    "encodedValue",
    "Transform",
    "encodeBusAndRaw",
    "transform",
    "bus",
    "push",
    "_disconnected",
    "resetDefaultBackendName",
    "terminate",
    "removeClient",
    "dispose",
    "defer",
    "Clazz",
    "customElements",
    "Controller",
    "PREFIX",
    "QxConnector",
    "Backend"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Backend.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * <cv-backend> Custom element to define a backend connection\n */\nqx.Class.define('cv.ui.structure.tile.elements.Backend', {\n  extend: cv.ui.structure.tile.elements.AbstractCustomElement,\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    _name: null,\n    __applyValues: null,\n\n    _init() {\n      const element = this._element;\n      const type = element.getAttribute('type');\n      const uriString = element.hasAttribute('uri') ? element.getAttribute('uri') : '';\n      let uri;\n      if (uriString) {\n        try {\n          uri = new URL(uriString, window.location.origin + window.location.pathname);\n        } catch (e) {\n          this.error('Error parsing uri: ' + uriString);\n        }\n      }\n\n      if (type) {\n        let credentials = null;\n        if (element.hasAttribute('username')) {\n          credentials = {\n            username: element.getAttribute('username'),\n            password: element.getAttribute('password') || ''\n          };\n        } else if (uri && uri.username) {\n          credentials = {\n            username: uri.username,\n            password: uri.password\n          };\n        }\n        const model = cv.data.Model.getInstance();\n        let backendUrl = uri ? uri.toString() : null;\n        let backendUrlConfigKey;\n        switch (type) {\n          case 'knxd':\n            backendUrlConfigKey = 'backendKnxdUrl';\n            break;\n          case 'openhab':\n            backendUrlConfigKey = 'backendOpenHABUrl';\n            break;\n          case 'mqtt':\n            backendUrlConfigKey = 'backendMQTTUrl';\n            break;\n        }\n        if (backendUrlConfigKey) {\n          // override by URL settings\n          if (cv.Config.URL[backendUrlConfigKey]) {\n            backendUrl = cv.Config.URL[backendUrlConfigKey]\n          } else if (!backendUrl && cv.Config.server[backendUrlConfigKey]) {\n            backendUrl = cv.Config.server[backendUrlConfigKey]\n          }\n        }\n        let name = type;\n        if (element.hasAttribute('name')) {\n          name = element.getAttribute('name');\n        } else if (!cv.io.BackendConnections.hasClient('main')) {\n          // we need one main backend\n          name = 'main';\n        } else if (cv.io.BackendConnections.getClient('main').configuredIn === 'config') {\n          qx.log.Logger.warn(this, `there is already a backend registered with name \"main\" and type ${type} skipping this one`);\n          return;\n        }\n        qx.log.Logger.debug(this, 'init backend', name);\n        if (cv.io.BackendConnections.hasClient(name)) {\n          const notification = {\n            topic: 'cv.config.error',\n            title: qx.locale.Manager.tr('Config error'),\n            message:  qx.locale.Manager.tr('There already exists a backend named: \"%1\"', name),\n            severity: 'urgent',\n            unique: true,\n            deletable: true\n          };\n          cv.core.notifications.Router.dispatchMessage(notification.topic, notification);\n          return;\n        }\n        const client = cv.io.BackendConnections.addBackendClient(name, type, backendUrl, 'config');\n        this._client = client;\n        this._name = name;\n        this.__applyValues = [];\n        client.update = data => model.updateFrom(name, data); // override clients update function\n        client.login(true, credentials, () => {\n          this.debug(name, 'connected');\n          if (element.hasAttribute('default') && element.getAttribute('default') === 'true') {\n            model.setDefaultBackendName(name);\n          }\n          const doSubscribe = () => {\n            for (const [address, value] of this.__applyValues) {\n              this.debug(name, 'apply update', address, value);\n              model.onUpdate(address, value, name);\n            }\n            const addressesToSubscribe = model.getAddresses(name);\n            this.debug(name, 'subscribing to', addressesToSubscribe.length, 'addresses');\n            if (addressesToSubscribe.length !== 0) {\n              client.subscribe(addressesToSubscribe);\n            }\n          };\n          if (cv.TemplateEngine.getInstance().isDomFinished()) {\n            doSubscribe();\n          } else {\n            qx.event.message.Bus.subscribe('setup.dom.finished', function () {\n              doSubscribe();\n            }, this);\n          }\n        });\n\n\n        for (const data of element.querySelectorAll(':scope > cv-data')) {\n          if (data.hasAttribute('address')) {\n            let value = data.textContent.trim();\n            if (data.hasAttribute('transform')) {\n              const encoding = data.getAttribute('transform');\n              const encodedValue = cv.Transform.encodeBusAndRaw({transform: encoding}, value);\n              value = encodedValue.bus;\n            }\n            this.__applyValues.push([data.getAttribute('address'), value]);\n          }\n        }\n      } else {\n        this.error('<cv-backend> must have a type attribute');\n      }\n    },\n\n    _disconnected() {\n      if (this._client) {\n        const model = cv.data.Model.getInstance();\n        if (this._element.hasAttribute('default') && this._element.getAttribute('default') === 'true') {\n          model.resetDefaultBackendName();\n        }\n        this._client.terminate();\n        cv.io.BackendConnections.removeClient(this._client);\n        this._client.dispose();\n        this._client = null;\n      }\n    }\n  },\n\n  defer(Clazz) {\n    customElements.define(cv.ui.structure.tile.Controller.PREFIX + 'backend', class extends QxConnector {\n      constructor() {\n        super(Clazz);\n      }\n    });\n  }\n});\n"
  ]
}