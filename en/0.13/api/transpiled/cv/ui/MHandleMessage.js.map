{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "_messages",
    "data",
    "Array",
    "_severities",
    "properties",
    "maxEntries",
    "check",
    "init",
    "event",
    "counter",
    "globalSeverity",
    "rootElementId",
    "nullable",
    "messageElementId",
    "delegate",
    "members",
    "_idCounter",
    "getIdCounter",
    "getSeverities",
    "_updateHighestSeverity",
    "severityRank",
    "forEach",
    "message",
    "severity",
    "indexOf",
    "setGlobalSeverity",
    "resetGlobalSeverity",
    "getSeverityColor",
    "_applyMaxEntries",
    "value",
    "getLength",
    "splice",
    "setMaxEntries",
    "handleMessage",
    "config",
    "getDelegate",
    "prepareMessage",
    "found",
    "postHookPayload",
    "unique",
    "some",
    "msg",
    "index",
    "topic",
    "id",
    "tooltip",
    "_getTooltip",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "deletable",
    "cv",
    "core",
    "notifications",
    "Router",
    "evaluateCondition",
    "changed",
    "setItem",
    "action",
    "removedMessage",
    "removeAt",
    "getGlobalSeverity",
    "getMaxEntries",
    "_disposeMap",
    "push",
    "_list",
    "update",
    "setCounter",
    "postHandleMessage",
    "getMessageIdFromEvent",
    "ev",
    "target",
    "getTarget",
    "deleteTarget",
    "messageId",
    "getAttribute",
    "rootId",
    "getRootElementId",
    "getMessageElementId",
    "startsWith",
    "classList",
    "contains",
    "parseInt",
    "replace",
    "parentNode",
    "_onListTap",
    "result",
    "deleteMessage",
    "performAction",
    "actions",
    "getOwnPropertyNames",
    "type",
    "title",
    "clear",
    "force",
    "removeAll",
    "filter",
    "exclude",
    "getMessage",
    "getItem",
    "getMessages",
    "stopPropagation",
    "preventDefault",
    "toArray",
    "find",
    "remove",
    "_performAction",
    "res",
    "typeActions",
    "isArray",
    "needsConfirmation",
    "handler",
    "ActionRegistry",
    "getActionHandler",
    "handleAction",
    "deleteMessageAfterExecution",
    "destruct",
    "_disposeObjects",
    "ui",
    "MHandleMessage"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/MHandleMessage.js"
  ],
  "sourcesContent": [
    "/* MHandleMessage.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * MHandleMessage mixin provides a handleMessage method for most common use cases in message handling.\n * Holds a list of messages\n *\n * @author Tobias BrÃ¤utigam\n * @since 0.11.0\n */\n\nqx.Mixin.define('cv.ui.MHandleMessage', {\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct() {\n    this._messages = new qx.data.Array();\n\n    // severities in order of importance -> more important\n    this._severities = ['low', 'normal', 'high', 'urgent'];\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    /**\n     * Maximum allowed messages\n     */\n    maxEntries: {\n      check: 'Number',\n      init: 50,\n      event: '_applyMaxEntries'\n    },\n\n    /**\n     * Current amount of messages\n     */\n    counter: {\n      check: 'Number',\n      init: 0,\n      event: 'changedCounter'\n    },\n\n    /**\n     * Highest severity of the messages\n     */\n    globalSeverity: {\n      check: ['low', 'normal', 'high', 'urgent'],\n      init: 'normal',\n      event: 'changedGlobalSeverity'\n    },\n\n    /**\n     * ID of the root element of this message handler (HTML attribute 'id' value)\n     */\n    rootElementId: {\n      check: 'String',\n      nullable: true\n    },\n\n    /**\n     * Pattern id the message elements IDs (suffix without is,\n     * e.g. messages get mes_1, mes_2, ... mes_ is the messageElementId)\n     */\n    messageElementId: {\n      check: 'String',\n      nullable: true\n    },\n\n    delegate: {\n      check: 'Object',\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _messages: null,\n    _severities: null,\n    _idCounter: 0,\n\n    getIdCounter() {\n      return this._idCounter;\n    },\n\n    getSeverities() {\n      return this._severities;\n    },\n\n    _updateHighestSeverity() {\n      // get the highest severity\n      let severityRank = -1;\n      this._messages.forEach(function (message) {\n        if (message.severity && this._severities.indexOf(message.severity) > severityRank) {\n          severityRank = this._severities.indexOf(message.severity);\n        }\n      }, this);\n      if (severityRank >= 0) {\n        this.setGlobalSeverity(this._severities[severityRank]);\n      } else {\n        this.resetGlobalSeverity();\n      }\n    },\n\n    getSeverityColor(severity) {\n      switch (severity) {\n        case 'urgent':\n          return '#FF0000';\n        case 'high':\n          return '#FF7900';\n        default:\n          return '#1C391C';\n      }\n    },\n\n    // property apply\n    _applyMaxEntries(value) {\n      if (this._messages.getLength() > value) {\n        this._messages.splice(this._messages.getLength() - value);\n      }\n      this._messages.setMaxEntries(value);\n    },\n\n    /**\n     * Handle messages from {@link cv.core.notifications.Router}\n     * @param message {Map}\n     * @param config {Map?} optional configuration of this message for the handler\n     */\n    handleMessage(message, config) {\n      const delegate = this.getDelegate() || {};\n      if (delegate.prepareMessage) {\n        delegate.prepareMessage(message, config);\n      }\n      let found = null;\n      const postHookPayload = {};\n      if (message.unique) {\n        // check if message is already shown\n        this._messages.some(function (msg, index) {\n          if (message.topic === msg.topic) {\n            // replace message\n            found = msg;\n            message.id = msg.id;\n            message.tooltip = this._getTooltip(message);\n            if (!Object.prototype.hasOwnProperty.call(message, 'deletable')) {\n              message.deletable = true;\n            }\n            if (cv.core.notifications.Router.evaluateCondition(message)) {\n              const changed = msg.severity !== message.severity;\n              this._messages.setItem(index, message);\n              postHookPayload.action = 'replaced';\n              if (changed) {\n                this._updateHighestSeverity();\n              }\n            } else {\n              const removedMessage = this._messages.removeAt(index);\n              postHookPayload.action = 'removed';\n              postHookPayload.message = removedMessage;\n              if (removedMessage.severity === this.getGlobalSeverity()) {\n                this._updateHighestSeverity();\n              }\n            }\n            // stop search\n            return true;\n          }\n          return false;\n        }, this);\n      }\n      if (!found) {\n        if (cv.core.notifications.Router.evaluateCondition(message)) {\n          message.id = this._idCounter;\n          this._idCounter++;\n          message.tooltip = this._getTooltip(message);\n          if (!Object.prototype.hasOwnProperty.call(message, 'deletable')) {\n            message.deletable = true;\n          }\n          if (this.getMaxEntries() > 0) {\n            if (this._messages.getLength() >= this.getMaxEntries()) {\n              this._messages.splice(0, this._messages.getLength() - this.getMaxEntries() + 1).forEach(this._disposeMap);\n            }\n          }\n          postHookPayload.action = 'added';\n          this._messages.push(message);\n          this._updateHighestSeverity();\n        }\n      } else if (this._list) {\n        // refresh list\n        this._list.update();\n      }\n      this.setCounter(this._messages.getLength());\n      if (delegate.postHandleMessage) {\n        delegate.postHandleMessage(message, config, postHookPayload);\n      }\n    },\n\n    /**\n     * Finds the message the tap event has been triggered on an returns\n     * an array [messageId, action], where action can be one of \"delete\", \"action\".\n     *\n     * @param ev {Event}\n     * @return {Array} [messageId, action]\n     */\n    getMessageIdFromEvent(ev) {\n      // lets find the real target\n      let target = ev.getTarget();\n      let deleteTarget = null;\n      let messageId = -1;\n      let id = target.getAttribute('id');\n      const rootId = this.getRootElementId();\n      const messageElementId = this.getMessageElementId();\n      while (!id || !id.startsWith(rootId)) {\n        if (target.classList.contains('delete')) {\n          deleteTarget = target;\n        }\n        if (id && id.startsWith(messageElementId)) {\n          // found the message container, get message id and stop\n          messageId = parseInt(id.replace(messageElementId, ''));\n          break;\n        }\n        target = target.parentNode;\n        if (!target) {\n          break;\n        }\n        id = target.getAttribute('id');\n      }\n      return [messageId, deleteTarget ? 'delete' : 'action'];\n    },\n\n    _onListTap(ev) {\n      const result = this.getMessageIdFromEvent(ev);\n      if (result[0] >= 0) {\n        if (result[1] === 'delete') {\n          this.deleteMessage(result[0], ev);\n        } else {\n          this.performAction(result[0], ev);\n        }\n      }\n    },\n\n    _getTooltip(message) {\n      let tooltip = message.severity;\n      if (message.actions) {\n        Object.getOwnPropertyNames(message.actions).forEach(function (type) {\n          if (message.actions[type].title) {\n            tooltip = message.actions[type].title;\n          }\n        });\n      }\n      return tooltip;\n    },\n\n    /**\n     * Delete all messages.\n     *\n     * @param force {Boolean} if false: only delete \"deletable\" messages, if true: delete all messages\n     */\n    clear(force) {\n      if (force) {\n        this._messages.removeAll();\n        this._idCounter = 0;\n      } else {\n        // collect all deletable messages\n        const deletable = this._messages.filter(function (message) {\n          return message.deletable === true;\n        }, this);\n        this._messages.exclude(deletable);\n      }\n      this._updateHighestSeverity();\n    },\n\n    getMessage(index) {\n      return this._messages.getItem(index);\n    },\n\n    getMessages() {\n      return this._messages;\n    },\n\n    /**\n     * Delete a message by index\n     * @param index {Number}\n     * @param ev {Event}\n     */\n    deleteMessage(index, ev) {\n      if (ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n      const message = this._messages.toArray().find(function (msg) {\n        return msg.id === index;\n      });\n      if (message && message.deletable === true) {\n        this._messages.remove(message);\n        if (message.severity === this.getGlobalSeverity()) {\n          this._updateHighestSeverity();\n        }\n        return true;\n      }\n      return false;\n    },\n\n    performAction(messageId, ev) {\n      const message = this.getMessage(messageId);\n      if (this._performAction && message) {\n        const res = this._performAction(message);\n        if (res === true) {\n          // skip\n          return;\n        }\n      }\n      if (!message || !message.actions) {\n        return;\n      }\n      Object.getOwnPropertyNames(message.actions).forEach(function (type) {\n        const typeActions = Array.isArray(message.actions[type]) ? message.actions[type] : [message.actions[type]];\n        typeActions.forEach(function (action) {\n          if (!action.needsConfirmation) {\n            const handler = cv.core.notifications.ActionRegistry.getActionHandler(type, action);\n\n            if (handler) {\n              handler.handleAction(ev);\n              if (action.deleteMessageAfterExecution) {\n                this.deleteMessage(messageId);\n              }\n            }\n          }\n        }, this);\n      }, this);\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    this._disposeObjects('_messages');\n  }\n});\n"
  ],
  "mappings": "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"
}