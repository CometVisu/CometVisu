{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "_messages",
    "data",
    "Array",
    "_severities",
    "properties",
    "maxEntries",
    "check",
    "init",
    "event",
    "counter",
    "globalSeverity",
    "rootElementId",
    "nullable",
    "messageElementId",
    "delegate",
    "members",
    "_idCounter",
    "getIdCounter",
    "getSeverities",
    "_updateHighestSeverity",
    "severityRank",
    "forEach",
    "message",
    "severity",
    "indexOf",
    "setGlobalSeverity",
    "resetGlobalSeverity",
    "getSeverityColor",
    "_applyMaxEntries",
    "value",
    "getLength",
    "splice",
    "setMaxEntries",
    "handleMessage",
    "config",
    "getDelegate",
    "prepareMessage",
    "found",
    "postHookPayload",
    "unique",
    "some",
    "msg",
    "index",
    "topic",
    "id",
    "tooltip",
    "_getTooltip",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "deletable",
    "cv",
    "core",
    "notifications",
    "Router",
    "evaluateCondition",
    "changed",
    "setItem",
    "action",
    "removedMessage",
    "removeAt",
    "getGlobalSeverity",
    "getMaxEntries",
    "_disposeMap",
    "push",
    "_list",
    "update",
    "setCounter",
    "postHandleMessage",
    "getMessageIdFromEvent",
    "ev",
    "target",
    "getTarget",
    "deleteTarget",
    "messageId",
    "getAttribute",
    "rootId",
    "getRootElementId",
    "getMessageElementId",
    "startsWith",
    "classList",
    "contains",
    "parseInt",
    "replace",
    "parentNode",
    "_onListTap",
    "result",
    "deleteMessage",
    "performAction",
    "actions",
    "getOwnPropertyNames",
    "type",
    "title",
    "clear",
    "force",
    "removeAll",
    "filter",
    "exclude",
    "getMessage",
    "getItem",
    "getMessages",
    "stopPropagation",
    "preventDefault",
    "toArray",
    "find",
    "remove",
    "_performAction",
    "res",
    "typeActions",
    "isArray",
    "needsConfirmation",
    "handler",
    "ActionRegistry",
    "getActionHandler",
    "handleAction",
    "deleteMessageAfterExecution",
    "destruct",
    "_disposeObjects",
    "ui",
    "MHandleMessage"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/MHandleMessage.js"
  ],
  "sourcesContent": [
    "/* MHandleMessage.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * MHandleMessage mixin provides a handleMessage method for most common use cases in message handling.\n * Holds a list of messages\n *\n * @author Tobias BrÃ¤utigam\n * @since 0.11.0\n */\n\nqx.Mixin.define('cv.ui.MHandleMessage', {\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct() {\n    this._messages = new qx.data.Array();\n\n    // severities in order of importance -> more important\n    this._severities = ['low', 'normal', 'high', 'urgent'];\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    /**\n     * Maximum allowed messages\n     */\n    maxEntries: {\n      check: 'Number',\n      init: 50,\n      event: '_applyMaxEntries'\n    },\n\n    /**\n     * Current amount of messages\n     */\n    counter: {\n      check: 'Number',\n      init: 0,\n      event: 'changedCounter'\n    },\n\n    /**\n     * Highest severity of the messages\n     */\n    globalSeverity: {\n      check: ['low', 'normal', 'high', 'urgent'],\n      init: 'normal',\n      event: 'changedGlobalSeverity'\n    },\n\n    /**\n     * ID of the root element of this message handler (HTML attribute 'id' value)\n     */\n    rootElementId: {\n      check: 'String',\n      nullable: true\n    },\n\n    /**\n     * Pattern id the message elements IDs (suffix without is,\n     * e.g. messages get mes_1, mes_2, ... mes_ is the messageElementId)\n     */\n    messageElementId: {\n      check: 'String',\n      nullable: true\n    },\n\n    delegate: {\n      check: 'Object',\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _messages: null,\n    _severities: null,\n    _idCounter: 0,\n\n    getIdCounter() {\n      return this._idCounter;\n    },\n\n    getSeverities() {\n      return this._severities;\n    },\n\n    _updateHighestSeverity() {\n      // get the highest severity\n      let severityRank = -1;\n      this._messages.forEach(function (message) {\n        if (message.severity && this._severities.indexOf(message.severity) > severityRank) {\n          severityRank = this._severities.indexOf(message.severity);\n        }\n      }, this);\n      if (severityRank >= 0) {\n        this.setGlobalSeverity(this._severities[severityRank]);\n      } else {\n        this.resetGlobalSeverity();\n      }\n    },\n\n    getSeverityColor(severity) {\n      switch (severity) {\n        case 'urgent':\n          return '#FF0000';\n        case 'high':\n          return '#FF7900';\n        default:\n          return '#1C391C';\n      }\n    },\n\n    // property apply\n    _applyMaxEntries(value) {\n      if (this._messages.getLength() > value) {\n        this._messages.splice(this._messages.getLength() - value);\n      }\n      this._messages.setMaxEntries(value);\n    },\n\n    /**\n     * Handle messages from {@link cv.core.notifications.Router}\n     * @param message {Map}\n     * @param config {Map?} optional configuration of this message for the handler\n     */\n    handleMessage(message, config) {\n      const delegate = this.getDelegate() || {};\n      if (delegate.prepareMessage) {\n        delegate.prepareMessage(message, config);\n      }\n      let found = null;\n      const postHookPayload = {};\n      if (message.unique) {\n        // check if message is already shown\n        this._messages.some(function (msg, index) {\n          if (message.topic === msg.topic) {\n            // replace message\n            found = msg;\n            message.id = msg.id;\n            message.tooltip = this._getTooltip(message);\n            if (!Object.prototype.hasOwnProperty.call(message, 'deletable')) {\n              message.deletable = true;\n            }\n            if (cv.core.notifications.Router.evaluateCondition(message)) {\n              const changed = msg.severity !== message.severity;\n              this._messages.setItem(index, message);\n              postHookPayload.action = 'replaced';\n              if (changed) {\n                this._updateHighestSeverity();\n              }\n            } else {\n              const removedMessage = this._messages.removeAt(index);\n              postHookPayload.action = 'removed';\n              postHookPayload.message = removedMessage;\n              if (removedMessage.severity === this.getGlobalSeverity()) {\n                this._updateHighestSeverity();\n              }\n            }\n            // stop search\n            return true;\n          }\n          return false;\n        }, this);\n      }\n      if (!found) {\n        if (cv.core.notifications.Router.evaluateCondition(message)) {\n          message.id = this._idCounter;\n          this._idCounter++;\n          message.tooltip = this._getTooltip(message);\n          if (!Object.prototype.hasOwnProperty.call(message, 'deletable')) {\n            message.deletable = true;\n          }\n          if (this.getMaxEntries() > 0) {\n            if (this._messages.getLength() >= this.getMaxEntries()) {\n              this._messages.splice(0, this._messages.getLength() - this.getMaxEntries() + 1).forEach(this._disposeMap);\n            }\n          }\n          postHookPayload.action = 'added';\n          this._messages.push(message);\n          this._updateHighestSeverity();\n        }\n      } else if (this._list) {\n        // refresh list\n        this._list.update();\n      }\n      this.setCounter(this._messages.getLength());\n      if (delegate.postHandleMessage) {\n        delegate.postHandleMessage(message, config, postHookPayload);\n      }\n    },\n\n    /**\n     * Finds the message the tap event has been triggered on an returns\n     * an array [messageId, action], where action can be one of \"delete\", \"action\".\n     *\n     * @param ev {Event}\n     * @return {Array} [messageId, action]\n     */\n    getMessageIdFromEvent(ev) {\n      // lets find the real target\n      let target = ev.getTarget();\n      let deleteTarget = null;\n      let messageId = -1;\n      let id = target.getAttribute('id');\n      const rootId = this.getRootElementId();\n      const messageElementId = this.getMessageElementId();\n      while (!id || !id.startsWith(rootId)) {\n        if (target.classList.contains('delete')) {\n          deleteTarget = target;\n        }\n        if (id && id.startsWith(messageElementId)) {\n          // found the message container, get message id and stop\n          messageId = parseInt(id.replace(messageElementId, ''));\n          break;\n        }\n        target = target.parentNode;\n        if (!target) {\n          break;\n        }\n        id = target.getAttribute('id');\n      }\n      return [messageId, deleteTarget ? 'delete' : 'action'];\n    },\n\n    _onListTap(ev) {\n      const result = this.getMessageIdFromEvent(ev);\n      if (result[0] >= 0) {\n        if (result[1] === 'delete') {\n          this.deleteMessage(result[0], ev);\n        } else {\n          this.performAction(result[0], ev);\n        }\n      }\n    },\n\n    _getTooltip(message) {\n      let tooltip = message.severity;\n      if (message.actions) {\n        Object.getOwnPropertyNames(message.actions).forEach(function (type) {\n          if (message.actions[type].title) {\n            tooltip = message.actions[type].title;\n          }\n        });\n      }\n      return tooltip;\n    },\n\n    /**\n     * Delete all messages.\n     *\n     * @param force {Boolean} if false: only delete \"deletable\" messages, if true: delete all messages\n     */\n    clear(force) {\n      if (force) {\n        this._messages.removeAll();\n        this._idCounter = 0;\n      } else {\n        // collect all deletable messages\n        const deletable = this._messages.filter(function (message) {\n          return message.deletable === true;\n        }, this);\n        this._messages.exclude(deletable);\n      }\n      this._updateHighestSeverity();\n    },\n\n    getMessage(index) {\n      return this._messages.getItem(index);\n    },\n\n    getMessages() {\n      return this._messages;\n    },\n\n    /**\n     * Delete a message by index\n     * @param index {Number}\n     * @param ev {Event}\n     */\n    deleteMessage(index, ev) {\n      if (ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n      const message = this._messages.toArray().find(function (msg) {\n        return msg.id === index;\n      });\n      if (message && message.deletable === true) {\n        this._messages.remove(message);\n        if (message.severity === this.getGlobalSeverity()) {\n          this._updateHighestSeverity();\n        }\n        return true;\n      }\n      return false;\n    },\n\n    performAction(messageId, ev) {\n      const message = this.getMessage(messageId);\n      if (this._performAction && message) {\n        const res = this._performAction(message);\n        if (res === true) {\n          // skip\n          return;\n        }\n      }\n      if (!message || !message.actions) {\n        return;\n      }\n      Object.getOwnPropertyNames(message.actions).forEach(function (type) {\n        const typeActions = Array.isArray(message.actions[type]) ? message.actions[type] : [message.actions[type]];\n        typeActions.forEach(function (action) {\n          if (!action.needsConfirmation) {\n            const handler = cv.core.notifications.ActionRegistry.getActionHandler(type, action);\n\n            if (handler) {\n              handler.handleAction(ev);\n              if (action.deleteMessageAfterExecution) {\n                this.deleteMessage(messageId);\n              }\n            }\n          }\n        }, this);\n      }, this);\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    this._disposeObjects('_messages');\n  }\n});\n"
  ],
  "mappings": "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"
}