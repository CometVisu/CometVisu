{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "node",
    "schema",
    "setNode",
    "setSchema",
    "_bounds",
    "min",
    "undefined",
    "max",
    "_allowedElements",
    "_sortedContent",
    "_subGroupings",
    "properties",
    "check",
    "init",
    "elementsHaveOrder",
    "nullable",
    "subGroupings",
    "members",
    "_regexCache",
    "parse",
    "n",
    "getNode",
    "hasAttribute",
    "getAttribute",
    "parseInt",
    "Number",
    "POSITIVE_INFINITY",
    "isElementAllowed",
    "element",
    "i",
    "length",
    "getSchemaElementForElementName",
    "elementName",
    "getRequiredElements",
    "requiredElements",
    "entries",
    "name",
    "item",
    "getBounds",
    "push",
    "forEach",
    "grouping",
    "subRequiredElements",
    "getAllowedElements",
    "myAllowedElements",
    "assign",
    "getAllowedElementsSorting",
    "sortNumber",
    "getRegex",
    "separator",
    "nocapture",
    "hasMultiLevelBounds",
    "getBoundsForElementName",
    "childName",
    "regexFromString",
    "input",
    "modifiers",
    "RegExp",
    "cv",
    "ui",
    "manager",
    "model",
    "Base"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/model/schema/Base.js"
  ],
  "sourcesContent": [
    "/* Base.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n *\n */\nqx.Class.define('cv.ui.manager.model.schema.Base', {\n  extend: qx.core.Object,\n  type: 'abstract',\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  /**\n   * @param   node    {Node} the group-node\n   * @param   schema  {cv.ui.manager.model.Schema}  the corresponding schema\n   */\n  construct(node, schema) {\n    super();\n    this.setNode(node);\n    this.setSchema(schema);\n    this._bounds = {\n      min: undefined,\n      max: undefined\n    };\n\n    this._allowedElements = {};\n    this._sortedContent = [];\n    this._subGroupings = [];\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    /**\n     * type of this object\n     * @var string\n     */\n    type: {\n      check: 'String',\n      init: 'unknown'\n    },\n\n    elementsHaveOrder: {\n      check: 'Boolean',\n      init: false\n    },\n\n    schema: {\n      check: 'cv.ui.manager.model.Schema',\n      nullable: false\n    },\n\n    node: {\n      check: 'Node',\n      nullable: false\n    },\n\n    /**\n     * array of sub-choices, -sequences, -groups that are defined\n     * @var array\n     */\n    subGroupings: {\n      check: 'Array'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /**\n     * bounds for this element\n     * @var object\n     */\n    _bounds: null,\n\n    /**\n     * cache for getRegex\n     * @var string\n     */\n    _regexCache: null,\n\n    /**\n     * list of elements that are allowed as per our own definition\n     * @var object\n     */\n    _allowedElements: null,\n\n    /**\n     * the sorted listed of allowed elements and sub-groupings\n     * @var array\n     */\n    _sortedContent: null,\n\n    /**\n     * array of sub-choices, -sequences, -groups that are defined\n     * @var array\n     */\n    _subGroupings: null,\n\n    /// needs to be implemented by the inheriting classes\n    parse() {\n      const n = this.getNode();\n      let min = n.hasAttribute('minOccurs') ? n.getAttribute('minOccurs') : 1; // default is 1\n      let max = n.hasAttribute('maxOccurs') ? n.getAttribute('maxOccurs') : 1; // default is 1\n      this._bounds = {\n        min: parseInt(min),\n        max: max === 'unbounded' ? Number.POSITIVE_INFINITY : parseInt(max)\n      };\n    },\n\n    /**\n     * is an element (specified by its name) allowed in this group?\n     * Goes recursive.\n     * Does NOT check bounds! Does NOT check dependencies!\n     *\n     * @param   element string  the element we check for\n     * @return  boolean         is it allowed?\n     */\n    isElementAllowed(element) {\n      if (typeof this._allowedElements[element] !== 'undefined') {\n        // this element is immediately allowed\n        return true;\n      }\n\n      // go over the list of subGroupings and check, if the element is allowed with any of them\n      for (let i = 0; i < this._subGroupings.length; ++i) {\n        if (this._subGroupings[i].isElementAllowed(element) === true) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * get the SchemaElement-object for a certain element-name.\n     * May return undefined if no element is found, so you might be interested in checking isElementAllowed beforehand.\n     *\n     * @param   elementName string  name of the element to find the SchemaElement for\n     * @return  object              SchemaElement-object, or undefined if none is found\n     */\n    getSchemaElementForElementName(elementName) {\n      if (typeof this._allowedElements[elementName] != 'undefined') {\n        // this element is immediately allowed\n        return this._allowedElements[elementName];\n      }\n\n      // go over the list of sub-choices and check, if the element is allowed with them\n      for (let i = 0; i < this._subGroupings.length; ++i) {\n        if (this._subGroupings[i].isElementAllowed(elementName) === true) {\n          // this element is allowed\n          return this._subGroupings[i].getSchemaElementForElementName(elementName);\n        }\n      }\n\n      // can not find any reason why elementName is allowed with us...\n      return undefined;\n    },\n\n    /**\n     * get a list of required elements.\n     * if an element is required multiple times, it is listed multiple times\n     * Attention: elements are NOT sorted.\n     *\n     * @return  array   list of required elements\n     */\n    getRequiredElements() {\n      // we do know what we require. might not be too easy to find out, but ok\n\n      // if we have no lower bounds, then nothing is required\n      if (this._bounds.min === 0) {\n        return [];\n      }\n\n      const requiredElements = [];\n\n      // my own elements\n      for (const [name, item] of Object.entries(this._allowedElements)) {\n        if (item.getBounds().min > 0) {\n          for (let i = 0; i < item.getBounds().min; ++i) {\n            requiredElements.push(name);\n          }\n        }\n      }\n\n      // elements of our sub-groupings, if any\n      this._subGroupings.forEach(grouping => {\n        const subRequiredElements = grouping.getRequiredElements();\n\n        if (subRequiredElements.length > 0) {\n          for (let i = 0; i < subRequiredElements.length; ++i) {\n            requiredElements.push(subRequiredElements[i]);\n          }\n        }\n      });\n\n      return requiredElements;\n    },\n\n    /**\n     * get the elements allowed for this group\n     *\n     * @return  object      list of allowed elements, key is the name\n     */\n    getAllowedElements() {\n      const myAllowedElements = {};\n\n      for (const [name, item] of Object.entries(this._allowedElements)) {\n        myAllowedElements[name] = item;\n      }\n\n      // also the elements allowed by our sub-choices etc.\n      this._subGroupings.forEach(grouping => {\n        Object.assign(myAllowedElements, grouping.getAllowedElements());\n      });\n\n      return myAllowedElements;\n    },\n\n    /**\n     * get the sorting of the allowed elements.\n     * @param   sortNumber  integer the sort number of a parent (only used when recursive)\n     * @return  object              list of allowed elements, with their sort-number as value\n     */\n    getAllowedElementsSorting(sortNumber) {\n      return {};\n    },\n\n    /**\n     * get a regex (string) describing this choice\n     *\n     * @param   separator   string  the string used to separate different elements, e.g. ';'\n     * @param   nocapture   bool    when set to true non capturing groups are used\n     * @return  string  regex\n     */\n    getRegex(separator, nocapture) {\n      return '';\n    },\n\n    /**\n     * find out if this Grouping has multi-level-bounds, i.e. sub-groupings with bounds.\n     * This makes it more or less impossible to know in advance which elements might be needed\n     *\n     * @return  boolean does it?\n     */\n    hasMultiLevelBounds() {\n      return this._subGroupings.length > 0;\n    },\n\n    /**\n     * get the bounds of this very grouping\n     *\n     * @return  object  like {min: x, max: y}\n     */\n    getBounds() {\n      return this._bounds;\n    },\n\n    /**\n     * get bounds for a specific element.\n     * Take into account the bounds of the element and/or our own bounds\n     *\n     * @param   childName   string  name of the child-to-be\n     * @return  object              {max: x, min: y}, or undefined if none found\n     */\n    getBoundsForElementName(childName) {\n      return this._bounds;\n    },\n\n    /**\n     * create a regex-object from a pattern\n     *\n     * For some obscure reason, this may not be inside a classes method, or else that class is not instantiateable\n     *\n     * @param   input       string  the pattern to match (without //)\n     * @param   modifiers   string  modifiers, if any\n     * @return  object              RegExp-object\n     */\n    regexFromString(input, modifiers) {\n      if (modifiers === undefined) {\n        modifiers = '';\n      }\n\n      return new RegExp(input, modifiers);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}