{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cv",
    "ui",
    "manager",
    "model",
    "schema",
    "Base",
    "construct",
    "node",
    "parse",
    "properties",
    "type",
    "refine",
    "init",
    "members",
    "getSchema",
    "group",
    "getNode",
    "hasAttribute",
    "getReferencedNode",
    "getAttribute",
    "grouping",
    "querySelector",
    "_subGroupings",
    "push",
    "Choice",
    "Sequence",
    "getAllowedElements",
    "getAllowedElementsSorting",
    "sortNumber",
    "namesWithSorting",
    "allowedElements",
    "Object",
    "keys",
    "forEach",
    "name",
    "item",
    "mySortNumber",
    "undefined",
    "getType",
    "getName",
    "subSortedElements",
    "assign",
    "getRegex",
    "separator",
    "nocapture",
    "_regexCache",
    "regexString",
    "bounds",
    "getBounds",
    "min",
    "max",
    "Number",
    "POSITIVE_INFINITY",
    "getBoundsForElementName",
    "childName",
    "Group"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/model/schema/Group.js"
  ],
  "sourcesContent": [
    "/* Group.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * a single group.\n * may be recursive\n */\nqx.Class.define('cv.ui.manager.model.schema.Group', {\n  extend: cv.ui.manager.model.schema.Base,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct(node, schema) {\n    super(node, schema);\n    this.parse();\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    type: {\n      refine: true,\n      init: 'group'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /**\n     * parse a list of elements in this group.\n     * Group is allowed (all|choice|sequence)? as per the definition.\n     * We do all of those (except for 'all')\n     */\n    parse() {\n      super.parse();\n      const schema = this.getSchema();\n\n      let group = this.getNode();\n      if (group.hasAttribute('ref')) {\n        // if this is a reference, unravel it.\n        group = schema.getReferencedNode('group', group.getAttribute('ref'));\n      }\n\n      // we are allowed choice and sequence, but only ONE AT ALL is allowed\n      let grouping = group.querySelector(':scope > choice');\n      if (grouping) {\n        this._subGroupings.push(new cv.ui.manager.model.schema.Choice(grouping, schema));\n      } else {\n        grouping = group.querySelector(':scope > sequence');\n        if (grouping) {\n          this._subGroupings.push(new cv.ui.manager.model.schema.Sequence(grouping, schema));\n        }\n      }\n    },\n\n    /**\n     * get the elements allowed for this group\n     *\n     * @return  object      list of allowed elements, key is the name\n     */\n    getAllowedElements() {\n      // we have non of ourselves, so we return what the child says\n      return this._subGroupings[0].getAllowedElements();\n    },\n\n    /**\n     * get the sorting of the allowed elements.\n     * For a group, all elements have the same sorting, so they will all have the\n     * same sort number\n     *\n     * Warning: this only works if any element can have only ONE position in the parent.\n     *\n     * @param   sortNumber  integer the sort number of a parent (only used when recursive)\n     * @return  object              list of allowed elements, with their sort-number as value\n     */\n    getAllowedElementsSorting(sortNumber) {\n      const namesWithSorting = {};\n      const allowedElements = this.getAllowedElements();\n      Object.keys(allowedElements).forEach(name => {\n        const item = allowedElements[name];\n        let mySortNumber = 'x'; // for a group, sortNumber is always the same\n        if (sortNumber !== undefined) {\n          mySortNumber = sortNumber + '.' + mySortNumber;\n        }\n\n        if (item.getType() === 'element') {\n          namesWithSorting[item.getName()] = mySortNumber;\n        } else {\n          // go recursive\n          const subSortedElements = item.getAllowedElementsSorting(mySortNumber);\n          Object.assign(namesWithSorting, subSortedElements);\n        }\n      }, this);\n      return namesWithSorting;\n    },\n\n    /**\n     * get a regex (string) describing this choice\n     *\n     * @param   separator   string  the string used to separate different elements, e.g. ';'\n     * @param   nocapture   bool    when set to true non capturing groups are used\n     * @return  string  regex\n     */\n    getRegex(separator, nocapture) {\n      if (this._regexCache !== null) {\n        // use the cache if primed\n        return this._regexCache;\n      }\n\n      let regexString = '(';\n\n      // collect the regex for each and every grouping we might have;\n      // 'each and every' means 'the only ONE'\n      this._subGroupings.forEach(grouping => {\n        regexString = '(';\n        if (nocapture) {\n          regexString += '?:';\n        }\n        regexString += grouping.getRegex(separator, nocapture) + ')';\n      });\n\n      // append bounds to regex\n      regexString += '{';\n      const bounds = this.getBounds();\n      regexString += bounds.min === undefined ? 1 : bounds.min;\n      regexString += ',';\n      if (bounds.max !== Number.POSITIVE_INFINITY) {\n        regexString += bounds.max === undefined ? 1 : bounds.max;\n      }\n      regexString += '}';\n\n      // fill the cache\n      this._regexCache = regexString;\n\n      // thats about it.\n      return regexString;\n    },\n\n    getBoundsForElementName(childName) {\n      // we are a group. we have no saying of ourselves\n      // (@FIXME: by definition we do, but we do not take that into account)\n      return this._subGroupings[0].getBoundsForElementName(childName);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}