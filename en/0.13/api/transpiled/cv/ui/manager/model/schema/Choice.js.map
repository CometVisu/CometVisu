{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/model/schema/Choice.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cv",
    "ui",
    "manager",
    "model",
    "schema",
    "Base",
    "construct",
    "node",
    "parse",
    "properties",
    "type",
    "refine",
    "init",
    "members",
    "getNode",
    "getSchema",
    "subElements",
    "Array",
    "from",
    "querySelectorAll",
    "forEach",
    "elem",
    "subElement",
    "Element",
    "setSortable",
    "_allowedElements",
    "getName",
    "getCommentNodeSchemaElement",
    "grouping",
    "_subGroupings",
    "push",
    "Choice",
    "Sequence",
    "Group",
    "getRequiredElements",
    "getRegex",
    "separator",
    "nocapture",
    "_regexCache",
    "regexString",
    "elementRegexes",
    "Object",
    "values",
    "element",
    "join",
    "bounds",
    "getBounds",
    "min",
    "undefined",
    "max",
    "Number",
    "POSITIVE_INFINITY",
    "getBoundsForElementName",
    "childName",
    "isElementAllowed",
    "getAllowedElementsSorting",
    "sortnumber",
    "namesWithSorting",
    "keys",
    "name",
    "item",
    "mySortnumber",
    "getType",
    "subSortedElements",
    "assign",
    "i"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * a single choice.\n * may be recursive\n */\nqx.Class.define('cv.ui.manager.model.schema.Choice', {\n  extend: cv.ui.manager.model.schema.Base,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function (node, schema) {\n    this.base(arguments, node, schema);\n    this.parse();\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    type: {\n      refine: true,\n      init: 'choice'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n\n    /**\n     * parse a list of elements in this group.\n     * Group is allowed (all|choice|sequence)? as per the definition.\n     * We do all of those (except for 'all')\n     */\n    parse: function () {\n      this.base(arguments);\n      const node = this.getNode();\n      const schema = this.getSchema();\n      const subElements = Array.from(node.querySelectorAll(':scope > element'));\n      subElements.forEach(elem => {\n        const subElement = new cv.ui.manager.model.schema.Element(elem, schema);\n        subElement.setSortable(true);\n        this._allowedElements[subElement.getName()] = subElement;\n      });\n      this._allowedElements['#comment'] = this.getSchema().getCommentNodeSchemaElement();\n\n      // choices\n      Array.from(node.querySelectorAll(':scope > choice')).forEach(grouping => {\n        this._subGroupings.push(new cv.ui.manager.model.schema.Choice(grouping, schema));\n      });\n\n      // sequences\n      Array.from(node.querySelectorAll(':scope > sequence')).forEach(grouping => {\n        this._subGroupings.push(new cv.ui.manager.model.schema.Sequence(grouping, schema));\n      });\n\n      // groups\n      Array.from(node.querySelectorAll(':scope > group')).forEach(grouping => {\n        this._subGroupings.push(new cv.ui.manager.model.schema.Group(grouping, schema));\n      });\n    },\n\n    // overridden\n    getRequiredElements: function () {\n      // a choice has no defined required elements\n      // if you want required elements, use sequence or all\n      return [];\n    },\n\n    /**\n     * get a regex (string) describing this choice\n     *\n     * @param   separator   string  the string used to separate different elements, e.g. ';'\n     * @param   nocapture   bool    when set to true non capturing groups are used\n     * @return  string  regex\n     */\n    getRegex: function (separator, nocapture) {\n      if (this._regexCache !== null) {\n        // use the cache if primed\n        return this._regexCache;\n      }\n\n      let regexString = '(';\n\n      // create list of allowed elements\n      if (nocapture) {\n        regexString += '?:';\n      }\n\n      const elementRegexes = [];\n      for (const element of Object.values(this._allowedElements)) {\n        elementRegexes.push(element.getRegex(separator, nocapture));\n      }\n\n      // also collect the regex for each and every grouping we might have\n      this._subGroupings.forEach(grouping => {\n        elementRegexes.push(grouping.getRegex(separator, nocapture));\n      });\n\n      regexString += elementRegexes.join('|');\n\n      regexString += ')';\n\n\n      // append bounds to regex\n      regexString += '{';\n      const bounds = this.getBounds();\n      regexString += bounds.min === undefined ? 1 : bounds.min;\n      regexString += ',';\n      if (bounds.max !== Number.POSITIVE_INFINITY) {\n        regexString += bounds.max === undefined ? 1 : bounds.max;\n      }\n      regexString += '}';\n\n      // fill the cache\n      this._regexCache = regexString;\n\n      // thats about it.\n      return regexString;\n    },\n\n    getBoundsForElementName: function (childName) {\n      // as we are a choice, we can define the number of occurences for children of ANY level\n      if (this.isElementAllowed(childName) === true) {\n        return this.getBounds();\n      }\n\n      return undefined;\n    },\n\n    /**\n     * get the sorting of the allowed elements.\n     * For a choice, all elements have the same sorting, so they will all have the\n     * same sortnumber\n     *\n     * Warning: this only works if any element can have only ONE position in the parent.\n     *\n     * @param   sortnumber  integer the sortnumber of a parent (only used when recursive)\n     * @return  object              list of allowed elements, with their sort-number as value\n     */\n    getAllowedElementsSorting: function (sortnumber) {\n      const namesWithSorting = {};\n\n      // all elements allowed directly\n      Object.keys(this._allowedElements).forEach(function (name) {\n        const item = this._allowedElements[name];\n        let mySortnumber = 'x'; // for a choice, sortnumber is always the same\n        if (sortnumber !== undefined) {\n          mySortnumber = sortnumber + '.' + mySortnumber;\n        }\n\n        if (item.getType() === 'element') {\n          namesWithSorting[item.getName()] = mySortnumber;\n        } else {\n          // go recursive\n          const subSortedElements = item.getAllowedElementsSorting(mySortnumber);\n          Object.assign(namesWithSorting, subSortedElements);\n        }\n      }, this);\n\n      // all elements allowed by subGroupings\n      this._subGroupings.forEach(function (item, i) {\n        let mySortnumber = 'x'; // for a choice, sortnumber is always the same\n        if (sortnumber !== undefined) {\n          mySortnumber = sortnumber + '.' + mySortnumber;\n        }\n\n        if (item.getType() === 'element') {\n          namesWithSorting[item.getName()] = mySortnumber;\n        } else {\n          // go recursive\n          const subSortedElements = item.getAllowedElementsSorting(mySortnumber);\n          Object.assign(namesWithSorting, subSortedElements);\n        }\n      }, this);\n      return namesWithSorting;\n    }\n  }\n});\n"
  ]
}