{
  "version": 3,
  "names": [
    "_regeneratorRuntime",
    "e",
    "t",
    "r",
    "Object",
    "prototype",
    "n",
    "hasOwnProperty",
    "o",
    "defineProperty",
    "value",
    "i",
    "Symbol",
    "a",
    "iterator",
    "c",
    "asyncIterator",
    "u",
    "toStringTag",
    "define",
    "enumerable",
    "configurable",
    "writable",
    "wrap",
    "Generator",
    "create",
    "Context",
    "makeInvokeMethod",
    "tryCatch",
    "type",
    "arg",
    "call",
    "h",
    "l",
    "f",
    "s",
    "y",
    "GeneratorFunction",
    "GeneratorFunctionPrototype",
    "p",
    "d",
    "getPrototypeOf",
    "v",
    "values",
    "g",
    "defineIteratorMethods",
    "forEach",
    "_invoke",
    "AsyncIterator",
    "invoke",
    "_typeof",
    "resolve",
    "__await",
    "then",
    "callInvokeWithMethodAndArg",
    "Error",
    "done",
    "method",
    "delegate",
    "maybeInvokeDelegate",
    "sent",
    "_sent",
    "dispatchException",
    "abrupt",
    "TypeError",
    "resultName",
    "next",
    "nextLoc",
    "pushTryEntry",
    "tryLoc",
    "catchLoc",
    "finallyLoc",
    "afterLoc",
    "tryEntries",
    "push",
    "resetTryEntry",
    "completion",
    "reset",
    "isNaN",
    "length",
    "displayName",
    "isGeneratorFunction",
    "constructor",
    "name",
    "mark",
    "setPrototypeOf",
    "__proto__",
    "awrap",
    "async",
    "Promise",
    "keys",
    "reverse",
    "pop",
    "prev",
    "charAt",
    "slice",
    "stop",
    "rval",
    "handle",
    "complete",
    "finish",
    "_catch",
    "delegateYield",
    "asyncGeneratorStep",
    "gen",
    "reject",
    "_next",
    "_throw",
    "key",
    "info",
    "error",
    "_asyncToGenerator",
    "fn",
    "self",
    "args",
    "arguments",
    "apply",
    "err",
    "undefined",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "Class",
    "extend",
    "core",
    "construct",
    "__elementCache",
    "__currentSchemas",
    "_dataProvider",
    "cv",
    "ui",
    "manager",
    "editor",
    "data",
    "Provider",
    "getInstance",
    "properties",
    "currentPath",
    "check",
    "nullable",
    "members",
    "_schemas",
    "__currentSchema",
    "__metaElementCache",
    "__rootTagName",
    "__metaTagName",
    "_getSuggestions",
    "_applyCurrentPath",
    "setStructure",
    "_this",
    "_callee",
    "loaded",
    "_callee$",
    "_context",
    "t0",
    "model",
    "Schema",
    "pure",
    "providePureCompletionItems",
    "tile",
    "provideTileCompletionItems",
    "getLastOpenedTag",
    "text",
    "tags",
    "match",
    "closingTags",
    "indexOf",
    "substring",
    "tagPosition",
    "lastIndexOf",
    "tag",
    "closingBracketIdx",
    "openedTag",
    "contentSearch",
    "currentAttribute",
    "attrMatch",
    "exec",
    "filteredElementSearch",
    "test",
    "attributesMatch",
    "_toConsumableArray",
    "matchAll",
    "attributes",
    "_iterator",
    "_createForOfIteratorHelper",
    "_step",
    "tagName",
    "isAttributeSearch",
    "isContentSearch",
    "splice",
    "findElements",
    "parent",
    "elementName",
    "maxDepth",
    "currentDepth",
    "inMeta",
    "cache",
    "getElementNode",
    "allowedElements",
    "getAllowedElements",
    "element",
    "result",
    "isItemAvailable",
    "itemName",
    "maxOccurs",
    "items",
    "count",
    "parseInt",
    "getElementString",
    "indent",
    "prefix",
    "insertText",
    "getName",
    "allowedAttributes",
    "getAllowedAttributes",
    "getOwnPropertyNames",
    "attr",
    "attribute",
    "isOptional",
    "getDefaultValue",
    "requiredElements",
    "getRequiredElements",
    "allowedContent",
    "getAllowedContent",
    "isContentAllowed",
    "_text",
    "_grouping",
    "trim",
    "children",
    "elemName",
    "elem",
    "getAvailableElements",
    "usedItems",
    "availableItems",
    "filter",
    "startsWith",
    "childElem",
    "getBounds",
    "max",
    "label",
    "kind",
    "window",
    "monaco",
    "languages",
    "CompletionItemKind",
    "Field",
    "detail",
    "getType",
    "documentation",
    "getDocumentation",
    "join",
    "getAvailableAttributes",
    "usedChildTags",
    "attrs",
    "Property",
    "getTypeString",
    "detectSchema",
    "completeText",
    "_this2",
    "_callee2",
    "_callee2$",
    "_context2",
    "endsWith",
    "getProvider",
    "triggerCharacters",
    "provideCompletionItems",
    "_ref",
    "_callee3",
    "position",
    "_callee3$",
    "_context3",
    "setCurrentPath",
    "uri",
    "toString",
    "getValue",
    "suggestions",
    "_x",
    "_x2",
    "bind",
    "textUntilPosition",
    "getValueInRange",
    "startLineNumber",
    "startColumn",
    "endLineNumber",
    "lineNumber",
    "endColumn",
    "column",
    "metaEndPos",
    "textMeta",
    "mappingNames",
    "stylingNames",
    "templates",
    "map",
    "vmap",
    "regex",
    "templatesStart",
    "templatesString",
    "replace",
    "split",
    "rawTemplate",
    "nameMatch",
    "variables",
    "vregex",
    "lastOpenedTag",
    "openedTags",
    "openedAttributes",
    "parts",
    "shift",
    "cleanedText",
    "xmlDoc",
    "xml",
    "Document",
    "fromString",
    "lastChild",
    "lastElementChild",
    "lastFound",
    "toLowerCase",
    "outerHTML",
    "nodeName",
    "entry",
    "res",
    "searchedElement",
    "getDesigns",
    "sugg",
    "getTransforms",
    "getPlugins",
    "getIcons",
    "getInfluxDBs",
    "getInfluxDBFields",
    "includes",
    "influxAttributes",
    "getNamedItem",
    "getInfluxDBTags",
    "getInfluxDBValues",
    "EnumMember",
    "templateNames",
    "variableName",
    "locale",
    "Manager",
    "tr",
    "Variable",
    "mappingName",
    "stylingName",
    "backendName",
    "getAddresses",
    "getRrds",
    "typeFilter",
    "getMediaFiles",
    "currentItem",
    "getEnumeration",
    "Value",
    "destruct",
    "_schema",
    "Config"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/editor/completion/Config.js"
  ],
  "sourcesContent": [
    "/* Config.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * XSD-based code completion provider for the monaco text editor.\n *\n * @since 0.11.0\n * @author Tobias Br√§utigam\n */\nqx.Class.define('cv.ui.manager.editor.completion.Config', {\n  extend: qx.core.Object,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  /**\n   *\n   */\n  construct() {\n    super();\n    this.__elementCache = {};\n    this.__currentSchemas = {};\n    this._dataProvider = cv.ui.manager.editor.data.Provider.getInstance();\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    currentPath: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyCurrentPath'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    _schemas: null,\n    __currentSchema: null,\n    __elementCache: null,\n    __metaElementCache: null,\n    _dataProvider: null,\n    __rootTagName: null,\n    __metaTagName: null,\n    _getSuggestions: null,\n\n    _applyCurrentPath() {\n      this.__currentSchema = null;\n      this.__rootTagName = '';\n    },\n\n    async setStructure(name) {\n      const loaded = Object.prototype.hasOwnProperty.call(this.__currentSchemas, name);\n\n      switch (name) {\n        case 'pure':\n          if (!loaded) {\n            this.__currentSchemas.pure = await cv.ui.manager.model.Schema.getInstance('visu_config.xsd');\n          }\n          this.__currentSchema = this.__currentSchemas.pure;\n          this.__rootTagName = 'pages';\n          this.__metaTagName = 'meta';\n          this._getSuggestions = this.providePureCompletionItems;\n          break;\n\n        case 'tile':\n          if (!loaded) {\n            this.__currentSchemas.tile = await cv.ui.manager.model.Schema.getInstance('visu_config_tile.xsd');\n          }\n          this.__currentSchema = this.__currentSchemas.tile;\n          this.__rootTagName = 'config';\n          this.__metaTagName = 'cv-meta';\n          this._getSuggestions = this.provideTileCompletionItems;\n          break;\n      }\n    },\n\n    getLastOpenedTag(text) {\n      // get all tags inside the content\n      const tags = text.match(/<\\/*(?=\\S*)([a-zA-Z-]+)/g);\n      if (!tags) {\n        return null;\n      }\n      // we need to know which tags are closed\n      const closingTags = [];\n      for (let i = tags.length - 1; i >= 0; i--) {\n        if (tags[i].indexOf('</') === 0) {\n          closingTags.push(tags[i].substring('</'.length));\n        } else {\n          // get the last position of the tag\n          const tagPosition = text.lastIndexOf(tags[i]);\n          const tag = tags[i].substring('<'.length);\n          const closingBracketIdx = text.indexOf('/>', tagPosition);\n          // if the tag wasn't closed\n          if (closingBracketIdx === -1) {\n            // if there are no closing tags or the current tag wasn't closed\n            if (!closingTags.length || closingTags[closingTags.length - 1] !== tag) {\n              // we found our tag, but let's get the information if we are looking for\n              // a child element or an attribute\n              text = text.substring(tagPosition);\n\n              const openedTag = text.indexOf('<') > text.indexOf('>');\n              let contentSearch = false;\n              let currentAttribute = null;\n              if (openedTag) {\n                const attrMatch = /([\\w\\-_\\.\\d]+)=\"[^\"]*$/.exec(text);\n                contentSearch = !!attrMatch;\n                currentAttribute = attrMatch ? attrMatch[1] : null;\n              }\n              const filteredElementSearch = /<[\\w-_\\d]+$/.test(text);\n              const attributesMatch = [...text.matchAll(/\\s([^=]+)=\"([^\"]+)\"/g)];\n              const attributes = {};\n              for (const match of attributesMatch) {\n                attributes[match[1]] = match[2];\n              }\n              return {\n                tagName: tag,\n                currentAttribute: currentAttribute,\n                attributes: attributes,\n                filteredElementSearch: filteredElementSearch,\n                isAttributeSearch: !filteredElementSearch && openedTag && !contentSearch,\n                isContentSearch: contentSearch,\n                text: text\n              };\n            }\n            // remove the last closed tag\n            closingTags.splice(closingTags.length - 1, 1);\n          }\n          // remove the last checked tag and continue processing the rest of the content\n          text = text.substring(0, tagPosition);\n        }\n      }\n      return null;\n    },\n\n    findElements(parent, elementName, maxDepth, currentDepth, inMeta) {\n      const cache = inMeta === true ? this.__metaElementCache : this.__elementCache;\n      if (elementName in cache) {\n        return cache[elementName];\n      }\n      if (maxDepth < currentDepth) {\n        return null;\n      }\n      if (!parent) {\n        parent = this.__currentSchema.getElementNode(this.__rootTagName);\n      }\n      if (currentDepth === undefined) {\n        currentDepth = 1;\n      }\n      const allowedElements = parent.getAllowedElements();\n      // console.log(parent.name+\" looking for \"+elementName+\" in tree level \"+currentDepth+ \"(<\"+maxDepth+\") (\"+Object.getOwnPropertyNames(allowedElements).join(\", \")+\")\");\n      if (elementName in allowedElements) {\n        // console.log(\"found \"+elementName+\" in tree level \"+currentDepth);\n        this.__elementCache[elementName] = allowedElements[elementName];\n        return allowedElements[elementName];\n      }\n      for (let element in allowedElements) {\n        if (inMeta !== true && element === this.__metaTagName) {\n          continue;\n        }\n        if (maxDepth > currentDepth) {\n          const result = this.findElements(allowedElements[element], elementName, maxDepth, currentDepth + 1);\n\n          if (result) {\n            cache[elementName] = result;\n            // console.log(\"found \" + elementName + \" in tree level \" + currentDepth);\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n\n    isItemAvailable(itemName, maxOccurs, items) {\n      // the default for 'maxOccurs' is 1\n      maxOccurs = maxOccurs || '1';\n      // the element can appere infinite times, so it is available\n      if (maxOccurs && maxOccurs === 'unbounded') {\n        return true;\n      }\n      // count how many times the element appeared\n      let count = 0;\n      for (let i = 0; i < items.length; i++) {\n        if (items[i] === itemName) {\n          count++;\n        }\n      }\n      // if it didn't appear yet, or it can appear again, then it\n      // is available, otherwise it't not\n      return count === 0 || parseInt(maxOccurs) > count;\n    },\n\n    getElementString(element, indent, prefix) {\n      let insertText = indent + prefix + element.getName() + ' ';\n      // add all required attributes with default values\n      const allowedAttributes = element.getAllowedAttributes();\n      Object.getOwnPropertyNames(allowedAttributes).forEach(function (attr) {\n        const attribute = allowedAttributes[attr];\n        if (!attribute.isOptional) {\n          insertText += attr + '=\"' + (attribute.getDefaultValue() ? attribute.getDefaultValue() : '') + '\" ';\n        }\n      });\n      // add mandatory children\n      const requiredElements = element.getRequiredElements();\n      const allowedContent = element.getAllowedContent();\n      const isContentAllowed = allowedContent._text || requiredElements.length > 0 || !!allowedContent._grouping;\n      if (!isContentAllowed) {\n        // close tag\n        insertText = insertText.trim() + '/';\n      } else {\n        // close open tag\n        insertText = insertText.trim() + '>';\n\n        // insert required elements\n        let children = 0;\n        requiredElements.forEach(function (elemName) {\n          const elem = this.findElements(element, elemName, 1, 0);\n          if (elem) {\n            insertText += '\\n    ' + this.getElementString(elem, indent + '    ', '<') + '>';\n            children++;\n          }\n        }, this);\n        // add closing tag\n        if (children > 0) {\n          insertText += '\\n' + indent;\n        }\n        insertText += '</' + element.getName();\n      }\n      return insertText;\n    },\n\n    getAvailableElements(element, usedItems) {\n      const availableItems = [];\n      const children = element.getAllowedElements();\n\n      // if there are no such elements, then there are no suggestions\n      if (!children) {\n        return [];\n      }\n      Object.getOwnPropertyNames(children)\n        .filter(name => !name.startsWith('#'))\n        .forEach(function (name) {\n          // get all element attributes\n          const childElem = children[name];\n          // the element is a suggestion if it's available\n          if (this.isItemAvailable(childElem.getName(), childElem.getBounds().max, usedItems)) {\n            // mark it as a 'field', and get the documentation\n            availableItems.push({\n              label: childElem.getName(),\n              insertText: this.getElementString(childElem, '', ''),\n              kind: window.monaco.languages.CompletionItemKind.Field,\n              detail: childElem.getType(),\n              documentation: childElem.getDocumentation().join('\\n')\n            });\n          }\n        }, this);\n      // return the suggestions we found\n      return availableItems;\n    },\n\n    getAvailableAttributes(element, usedChildTags) {\n      const availableItems = [];\n      // get all attributes for the element\n      const attrs = element.getAllowedAttributes();\n      Object.getOwnPropertyNames(attrs).forEach(function (name) {\n        const attr = attrs[name];\n        // accept it in a suggestion list only the attribute is not used yet\n        if (usedChildTags.indexOf(attr.name) === -1) {\n          // mark it as a 'property', and get it's documentation\n          availableItems.push({\n            label: attr.getName(),\n            insertText: attr.getName() + '=\"\"',\n            kind: window.monaco.languages.CompletionItemKind.Property,\n            detail: attr.getTypeString(),\n            documentation: attr.getDocumentation().join('\\n')\n          });\n        }\n      }, this);\n\n      // return the elements we found\n      return availableItems;\n    },\n\n    async detectSchema(completeText) {\n      const match = /:noNamespaceSchemaLocation=\"([^\"]+)\"/.exec(completeText.substring(0, 200));\n\n      if (match && match[1].endsWith('visu_config_tile.xsd')) {\n        await this.setStructure('tile');\n      } else {\n        await this.setStructure('pure');\n      }\n    },\n\n    getProvider() {\n      return {\n        triggerCharacters: ['<', '\"'],\n        provideCompletionItems: async function (model, position) {\n          this.setCurrentPath(model.uri.toString());\n          const completeText = model.getValue();\n          if (!this.__currentSchema) {\n            await this.detectSchema(completeText);\n          }\n          if (this._getSuggestions) {\n            return this._getSuggestions(model, position);\n          }\n          return { suggestions: [] };\n        }.bind(this)\n      };\n    },\n\n    providePureCompletionItems(model, position) {\n      // get editor content before the pointer\n      const textUntilPosition = model.getValueInRange({\n        startLineNumber: 1,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n\n      // parse mappings\n      const completeText = model.getValue();\n      const metaEndPos = completeText.indexOf('</meta>');\n      const textMeta = metaEndPos > 0 ? completeText.substring(0, metaEndPos) : completeText;\n      const mappingNames = [];\n      const stylingNames = [];\n      const templates = {};\n      let map;\n      let vmap;\n      let regex = /<mapping name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        mappingNames.push(map[1]);\n      }\n      regex = /<styling name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        stylingNames.push(map[1]);\n      }\n      const templatesStart = textMeta.indexOf('<templates>');\n      if (templatesStart >= 0) {\n        const templatesString = textMeta\n          .substring(templatesStart + 11, textMeta.indexOf('</templates>') - 12)\n          .replace(/(?:\\r\\n|\\r|\\n)/g, '');\n        templatesString.split('</template>').forEach(function (rawTemplate) {\n          const nameMatch = /<template name=\"([^\"]+)\"/.exec(rawTemplate);\n          // search for variables\n          const variables = [];\n          const vregex = /{{{?\\s*([\\w\\d]+)\\s*}?}}/gm;\n          while ((vmap = vregex.exec(rawTemplate)) !== null) {\n            variables.push(vmap[1]);\n          }\n          templates[nameMatch[1]] = variables;\n        }, this);\n      }\n\n      // if we want suggestions, inside of which tag are we?\n      const lastOpenedTag = this.getLastOpenedTag(textUntilPosition);\n      // console.log(lastOpenedTag);\n      // get opened tags to see what tag we should look for in the XSD schema\n      const openedTags = [];\n      // attrobutes of the ancestors\n      const openedAttributes = [];\n      // get the elements/attributes that are already mentioned in the element we're in\n      const usedItems = [];\n      const isAttributeSearch = lastOpenedTag && lastOpenedTag.isAttributeSearch;\n      const isContentSearch = lastOpenedTag && lastOpenedTag.isContentSearch;\n      const filteredElementSearch = lastOpenedTag && lastOpenedTag.filteredElementSearch;\n      // no need to calculate the position in the XSD schema if we are in the root element\n      let parts;\n      if (lastOpenedTag) {\n        // try to create a valid XML document\n        parts = lastOpenedTag.text.split(' ');\n        parts.shift();\n        let cleanedText = textUntilPosition;\n        if (parts.length) {\n          cleanedText = cleanedText.substring(0, cleanedText.length - parts.join(' ').length) + '>';\n        }\n        // parse the content (not cleared text) into an xml document\n        const xmlDoc = qx.xml.Document.fromString(cleanedText);\n        let lastChild = xmlDoc.lastElementChild;\n        let i;\n        let lastFound = false;\n        while (lastChild && lastChild.tagName.toLowerCase() !== 'parsererror') {\n          openedTags.push(lastChild.tagName);\n          openedAttributes.push(lastChild.attributes);\n          // if we found our last opened tag\n          if (lastChild.tagName === lastOpenedTag.tagName) {\n            lastFound = true;\n            // if we are looking for attributes, then used items should\n            // be the attributes we already used\n            if (lastOpenedTag.isAttributeSearch && lastChild.outerHTML === lastOpenedTag.text) {\n              const attrs = lastChild.attributes;\n              for (i = 0; i < attrs.length; i++) {\n                usedItems.push(attrs[i].nodeName);\n              }\n            } else {\n              // if we are looking for child elements, then used items\n              // should be the elements that were already used\n              const children = lastChild.children;\n              for (i = 0; i < children.length; i++) {\n                if (children[i].tagName.toLowerCase() !== 'parsererror') {\n                  usedItems.push(children[i].tagName);\n                }\n              }\n            }\n            break;\n          }\n          // we haven't found the last opened tag yet, so we move to\n          // the next element\n          lastChild = lastChild.lastElementChild;\n        }\n        if (!lastFound) {\n          // fallback -> parse string\n          if (isAttributeSearch || isContentSearch) {\n            parts = lastOpenedTag.text.split(' ');\n            // skip tag name\n            parts.shift();\n            parts.forEach(function (entry) {\n              usedItems.push(entry.split('=').shift());\n            });\n          }\n        }\n      }\n      let res = [];\n      let match;\n      // find the last opened tag in the schema to see what elements/attributes it can have\n      let searchedElement = openedTags[openedTags.length - 1];\n      if (isContentSearch) {\n        // handle data providers if the is one relevant\n        if (lastOpenedTag.tagName === 'pages' && lastOpenedTag.currentAttribute === 'design') {\n          return this._dataProvider.getDesigns(null, null, 'pure').then(function (sugg) {\n            return { suggestions: sugg };\n          });\n        } else if (lastOpenedTag.tagName === 'address' && lastOpenedTag.currentAttribute === 'transform') {\n          return { suggestions: this._dataProvider.getTransforms() };\n        } else if (lastOpenedTag.tagName === 'plugin' && lastOpenedTag.currentAttribute === 'name') {\n          return { suggestions: this._dataProvider.getPlugins() };\n        } else if (lastOpenedTag.tagName === 'icon' && lastOpenedTag.currentAttribute === 'name') {\n          return {\n            suggestions: this._dataProvider.getIcons('monaco', { cache: false }, completeText)\n          };\n        } else if (lastOpenedTag.tagName === 'influx') {\n          if (lastOpenedTag.currentAttribute === 'measurement') {\n            return this._dataProvider.getInfluxDBs().then(function (suggestions) {\n              return { suggestions: suggestions };\n            });\n          } else if (lastOpenedTag.currentAttribute === 'field') {\n            match = /measurement=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n            if (match) {\n              return this._dataProvider.getInfluxDBFields(match[1]).then(function (suggestions) {\n                return { suggestions: suggestions };\n              });\n            }\n          }\n        } else if (\n          lastOpenedTag.tagName === 'tag' &&\n          (lastOpenedTag.currentAttribute === 'key' || lastOpenedTag.currentAttribute === 'value') &&\n          openedTags.includes('influx')\n        ) {\n          const influxAttributes = openedAttributes[openedTags.indexOf('influx')];\n          const attr = influxAttributes.getNamedItem('measurement');\n          if (attr) {\n            if (lastOpenedTag.currentAttribute === 'key') {\n              return this._dataProvider.getInfluxDBTags(attr.value).then(function (suggestions) {\n                return { suggestions: suggestions };\n              });\n            } else if (lastOpenedTag.currentAttribute === 'value') {\n              match = /key=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n              if (match) {\n                return this._dataProvider.getInfluxDBValues(attr.value, match[1]).then(function (suggestions) {\n                  return { suggestions: suggestions };\n                });\n              }\n            }\n          }\n        } else if (\n          lastOpenedTag.tagName === 'template' &&\n          lastOpenedTag.currentAttribute === 'name' &&\n          openedTags.includes('meta')\n        ) {\n          res = Object.keys(templates).map(function (name) {\n            return {\n              label: name,\n              insertText: name,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        } else if (\n          lastOpenedTag.tagName === 'value' &&\n          lastOpenedTag.currentAttribute === 'name' &&\n          !openedTags.includes('meta') &&\n          openedTags.includes('template')\n        ) {\n          // TODO: find out template name\n          const templateNames = Object.keys(templates);\n          templateNames.forEach(function (name) {\n            templates[name].forEach(function (variableName) {\n              res.push({\n                label: variableName,\n                insertText: variableName,\n                detail: qx.locale.Manager.tr('Variable from template %1', name),\n                kind: window.monaco.languages.CompletionItemKind.Variable\n              });\n            }, this);\n          }, this);\n          return { suggestions: res };\n        } else if (lastOpenedTag.currentAttribute === 'mapping') {\n          res = mappingNames.map(function (mappingName) {\n            return {\n              label: mappingName,\n              insertText: mappingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        } else if (lastOpenedTag.currentAttribute === 'styling') {\n          res = stylingNames.map(function (stylingName) {\n            return {\n              label: stylingName,\n              insertText: stylingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        }\n\n        // TODO: completions that have to be retrieved from the backend\n        // * rrds\n        // * Influx: dbs, tags fields\n        // * media files\n\n        searchedElement = lastOpenedTag.tagName;\n      } else if (!isAttributeSearch && filteredElementSearch) {\n        searchedElement = openedTags[openedTags.length - 2];\n      } else if (lastOpenedTag.tagName === 'address' && lastOpenedTag.currentAttribute === null) {\n        const backendName = lastOpenedTag.attributes['backend'] || 'main';\n        return this._dataProvider.getAddresses('monaco', null, backendName).then(res => ({ suggestions: res }));\n      }\n      if (searchedElement === 'rrd') {\n        return this._dataProvider.getRrds('monaco').then(res => ({ suggestions: res }));\n      } else if (searchedElement === 'file' && !isAttributeSearch && !isContentSearch && openedTags.includes('files')) {\n        match = /type=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n        const typeFilter = match ? match[1] : null;\n        return this._dataProvider.getMediaFiles(typeFilter).then(function (suggestions) {\n          return { suggestions: suggestions };\n        });\n      }\n      const currentItem = this.findElements(\n        this.__currentSchema.getElementNode('pages'),\n        searchedElement,\n        openedTags.length,\n        openedTags.includes('meta')\n      );\n\n      // return available elements/attributes if the tag exists in the schema, or an empty\n      // array if it doesn't\n      if (isContentSearch) {\n        const currentAttribute = usedItems[usedItems.length - 1];\n\n        if (currentItem && currentAttribute in currentItem.getAllowedAttributes()) {\n          const attribute = currentItem.getAllowedAttributes()[currentAttribute];\n          const type = attribute.getTypeString();\n          attribute.getEnumeration().forEach(function (entry) {\n            res.push({\n              label: entry,\n              insertText: entry,\n              kind: window.monaco.languages.CompletionItemKind.Value,\n              detail: type,\n              documentation: attribute.getDocumentation().join('\\n')\n            });\n          });\n        }\n      } else if (isAttributeSearch) {\n        // get attributes completions\n        res = currentItem ? this.getAvailableAttributes(currentItem, usedItems) : [];\n      } else {\n        // get elements completions\n        // eslint-disable-next-line no-lonely-if\n        if (lastOpenedTag && lastOpenedTag.text.endsWith('</')) {\n          res.push({\n            label: lastOpenedTag.tagName,\n            insertText: lastOpenedTag.tagName,\n            kind: window.monaco.languages.CompletionItemKind.Field\n          });\n        } else {\n          res = currentItem ? this.getAvailableElements(currentItem, usedItems) : [];\n        }\n      }\n      return { suggestions: res };\n    },\n\n    provideTileCompletionItems(model, position) {\n      // get editor content before the pointer\n      const textUntilPosition = model.getValueInRange({\n        startLineNumber: 1,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n\n      // parse mappings\n      const completeText = model.getValue();\n      const metaEndPos = completeText.indexOf('</cv-meta>');\n      const textMeta = metaEndPos > 0 ? completeText.substring(0, metaEndPos) : completeText;\n      const mappingNames = [];\n      const stylingNames = [];\n      let map;\n      let regex = /<cv-mapping name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        mappingNames.push(map[1]);\n      }\n      regex = /<cv-styling name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        stylingNames.push(map[1]);\n      }\n\n      // if we want suggestions, inside which tag are we?\n      const lastOpenedTag = this.getLastOpenedTag(textUntilPosition);\n      // console.log(lastOpenedTag);\n      // get opened tags to see what tag we should look for in the XSD schema\n      const openedTags = [];\n      // attributes of the ancestors\n      const openedAttributes = [];\n      // get the elements/attributes that are already mentioned in the element we're in\n      const usedItems = [];\n      const isAttributeSearch = lastOpenedTag && lastOpenedTag.isAttributeSearch;\n      const isContentSearch = lastOpenedTag && lastOpenedTag.isContentSearch;\n      const filteredElementSearch = lastOpenedTag && lastOpenedTag.filteredElementSearch;\n      // no need to calculate the position in the XSD schema if we are in the root element\n      let parts;\n      if (lastOpenedTag) {\n        // try to create a valid XML document\n        parts = lastOpenedTag.text.split(' ');\n        parts.shift();\n        let cleanedText = textUntilPosition;\n        if (parts.length) {\n          cleanedText = cleanedText.substring(0, cleanedText.length - parts.join(' ').length) + '>';\n        }\n        // parse the content (not cleared text) into a xml document\n        const xmlDoc = qx.xml.Document.fromString(cleanedText);\n        let lastChild = xmlDoc.lastElementChild;\n        let i;\n        let lastFound = false;\n        while (lastChild) {\n          openedTags.push(lastChild.tagName);\n          openedAttributes.push(lastChild.attributes);\n          // if we found our last opened tag\n          if (lastChild.tagName === lastOpenedTag.tagName) {\n            lastFound = true;\n            // if we are looking for attributes, then used items should\n            // be the attributes we already used\n            if (lastOpenedTag.isAttributeSearch && lastChild.outerHTML === lastOpenedTag.text) {\n              const attrs = lastChild.attributes;\n              for (i = 0; i < attrs.length; i++) {\n                usedItems.push(attrs[i].nodeName);\n              }\n            } else {\n              // if we are looking for child elements, then used items\n              // should be the elements that were already used\n              const children = lastChild.children;\n              for (i = 0; i < children.length; i++) {\n                if (children[i].tagName.toLowerCase() !== 'parsererror') {\n                  usedItems.push(children[i].tagName);\n                }\n              }\n            }\n            break;\n          }\n          // we haven't found the last opened tag yet, so we move to\n          // the next element\n          lastChild = lastChild.lastElementChild;\n        }\n        if (!lastFound) {\n          // fallback -> parse string\n          if (isAttributeSearch || isContentSearch) {\n            parts = lastOpenedTag.text.split(' ');\n            // skip tag name\n            parts.shift();\n            parts.forEach(entry => {\n              usedItems.push(entry.split('=').shift());\n            });\n          }\n        }\n      }\n      let res = [];\n      let match;\n      // find the last opened tag in the schema to see what elements/attributes it can have\n      let searchedElement = openedTags[openedTags.length - 1];\n      if (isContentSearch) {\n        // handle data providers if the is one relevant\n        if (lastOpenedTag.tagName === 'config' && lastOpenedTag.currentAttribute === 'design') {\n          const suggestions = this._dataProvider.getDesigns(null, null, 'tile');\n          return { suggestions: suggestions };\n        } else if (lastOpenedTag.tagName === 'cv-address' && lastOpenedTag.currentAttribute === 'transform') {\n          return { suggestions: this._dataProvider.getTransforms() };\n        } else if (lastOpenedTag.tagName === 'cv-icon' && lastOpenedTag.currentAttribute === 'name') {\n          return { suggestions: this._dataProvider.getIcons() };\n        } else if (lastOpenedTag.currentAttribute === 'mapping') {\n          res = mappingNames.map(function (mappingName) {\n            return {\n              label: mappingName,\n              insertText: mappingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        } else if (lastOpenedTag.currentAttribute === 'styling') {\n          res = stylingNames.map(function (stylingName) {\n            return {\n              label: stylingName,\n              insertText: stylingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        }\n        searchedElement = lastOpenedTag.tagName;\n      } else if (!isAttributeSearch && filteredElementSearch) {\n        searchedElement = openedTags[openedTags.length - 2];\n      } else if (lastOpenedTag.tagName === 'cv-address' && lastOpenedTag.currentAttribute === null) {\n        const backendName = lastOpenedTag.attributes['backend'] || 'main';\n        return this._dataProvider.getAddresses('monaco', null, backendName).then(res => ({ suggestions: res }));\n      } else if (lastOpenedTag.tagName === 'cv-chart' && lastOpenedTag.currentAttribute === 'src') {\n        return this._dataProvider.getRrds('monaco').then(res => ({ suggestions: res }));\n      } else if (lastOpenedTag.tagName === 'cv-loader' && lastOpenedTag.currentAttribute === 'src') {\n        match = /type=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n        const typeFilter = match ? match[1] : null;\n        return this._dataProvider.getMediaFiles(typeFilter).then(function (suggestions) {\n          return { suggestions: suggestions };\n        });\n      }\n      const currentItem = this.findElements(\n        this.__currentSchema.getElementNode('config'),\n        searchedElement,\n        openedTags.length,\n        openedTags.includes('cv-meta')\n      );\n\n      // return available elements/attributes if the tag exists in the schema, or an empty\n      // array if it doesn't\n      if (isContentSearch) {\n        const currentAttribute = lastOpenedTag.currentAttribute;\n\n        if (currentItem && currentAttribute in currentItem.getAllowedAttributes()) {\n          const attribute = currentItem.getAllowedAttributes()[currentAttribute];\n          const type = attribute.getTypeString();\n          attribute.getEnumeration().forEach(function (entry) {\n            res.push({\n              label: entry,\n              insertText: entry,\n              kind: window.monaco.languages.CompletionItemKind.Value,\n              detail: type,\n              documentation: attribute.getDocumentation().join('\\n')\n            });\n          });\n        }\n      } else if (isAttributeSearch) {\n        // get attributes completions\n        res = currentItem ? this.getAvailableAttributes(currentItem, usedItems) : [];\n      } else {\n        // get elements completions\n        // eslint-disable-next-line no-lonely-if\n        if (lastOpenedTag && lastOpenedTag.text.endsWith('</')) {\n          res.push({\n            label: lastOpenedTag.tagName,\n            insertText: lastOpenedTag.tagName,\n            kind: window.monaco.languages.CompletionItemKind.Field\n          });\n        } else {\n          res = currentItem ? this.getAvailableElements(currentItem, usedItems) : [];\n        }\n      }\n      return { suggestions: res };\n    }\n  },\n\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct() {\n    this.__elementCache = null;\n    this._schema = null;\n    this._dataProvider = null;\n  }\n});\n"
  ],
  "mappings": "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"
}