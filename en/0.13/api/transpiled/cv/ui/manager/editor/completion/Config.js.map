{
  "version": 3,
  "names": [
    "_regeneratorRuntime",
    "exports",
    "Op",
    "Object",
    "prototype",
    "hasOwn",
    "hasOwnProperty",
    "defineProperty",
    "obj",
    "key",
    "desc",
    "value",
    "$Symbol",
    "Symbol",
    "iteratorSymbol",
    "iterator",
    "asyncIteratorSymbol",
    "asyncIterator",
    "toStringTagSymbol",
    "toStringTag",
    "define",
    "enumerable",
    "configurable",
    "writable",
    "err",
    "wrap",
    "innerFn",
    "outerFn",
    "self",
    "tryLocsList",
    "protoGenerator",
    "Generator",
    "generator",
    "create",
    "context",
    "Context",
    "makeInvokeMethod",
    "tryCatch",
    "fn",
    "arg",
    "type",
    "call",
    "ContinueSentinel",
    "GeneratorFunction",
    "GeneratorFunctionPrototype",
    "IteratorPrototype",
    "getProto",
    "getPrototypeOf",
    "NativeIteratorPrototype",
    "values",
    "Gp",
    "defineIteratorMethods",
    "forEach",
    "method",
    "_invoke",
    "AsyncIterator",
    "PromiseImpl",
    "invoke",
    "resolve",
    "reject",
    "record",
    "result",
    "_typeof",
    "__await",
    "then",
    "unwrapped",
    "error",
    "previousPromise",
    "callInvokeWithMethodAndArg",
    "state",
    "Error",
    "doneResult",
    "delegate",
    "delegateResult",
    "maybeInvokeDelegate",
    "sent",
    "_sent",
    "dispatchException",
    "abrupt",
    "done",
    "methodName",
    "undefined",
    "TypeError",
    "info",
    "resultName",
    "next",
    "nextLoc",
    "pushTryEntry",
    "locs",
    "entry",
    "tryLoc",
    "catchLoc",
    "finallyLoc",
    "afterLoc",
    "tryEntries",
    "push",
    "resetTryEntry",
    "completion",
    "reset",
    "iterable",
    "iteratorMethod",
    "isNaN",
    "length",
    "i",
    "displayName",
    "isGeneratorFunction",
    "genFun",
    "ctor",
    "constructor",
    "name",
    "mark",
    "setPrototypeOf",
    "__proto__",
    "awrap",
    "async",
    "Promise",
    "iter",
    "keys",
    "val",
    "object",
    "reverse",
    "pop",
    "skipTempReset",
    "prev",
    "charAt",
    "slice",
    "stop",
    "rootRecord",
    "rval",
    "exception",
    "handle",
    "loc",
    "caught",
    "hasCatch",
    "hasFinally",
    "finallyEntry",
    "complete",
    "finish",
    "_catch",
    "thrown",
    "delegateYield",
    "asyncGeneratorStep",
    "gen",
    "_next",
    "_throw",
    "_asyncToGenerator",
    "args",
    "arguments",
    "apply",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "Class",
    "extend",
    "core",
    "construct",
    "__elementCache",
    "__currentSchemas",
    "_dataProvider",
    "cv",
    "ui",
    "manager",
    "editor",
    "data",
    "Provider",
    "getInstance",
    "properties",
    "currentPath",
    "check",
    "nullable",
    "members",
    "_schemas",
    "__currentSchema",
    "__metaElementCache",
    "__rootTagName",
    "__metaTagName",
    "_getSuggestions",
    "_applyCurrentPath",
    "setStructure",
    "_this",
    "_callee",
    "loaded",
    "_callee$",
    "_context",
    "t0",
    "model",
    "Schema",
    "pure",
    "providePureCompletionItems",
    "tile",
    "provideTileCompletionItems",
    "getLastOpenedTag",
    "text",
    "tags",
    "match",
    "closingTags",
    "indexOf",
    "substring",
    "tagPosition",
    "lastIndexOf",
    "tag",
    "closingBracketIdx",
    "openedTag",
    "contentSearch",
    "currentAttribute",
    "attrMatch",
    "exec",
    "filteredElementSearch",
    "test",
    "attributesMatch",
    "_toConsumableArray",
    "matchAll",
    "attributes",
    "_iterator",
    "_createForOfIteratorHelper",
    "_step",
    "s",
    "n",
    "e",
    "f",
    "tagName",
    "isAttributeSearch",
    "isContentSearch",
    "splice",
    "findElements",
    "parent",
    "elementName",
    "maxDepth",
    "currentDepth",
    "inMeta",
    "cache",
    "getElementNode",
    "allowedElements",
    "getAllowedElements",
    "element",
    "isItemAvailable",
    "itemName",
    "maxOccurs",
    "items",
    "count",
    "parseInt",
    "getElementString",
    "indent",
    "prefix",
    "insertText",
    "getName",
    "allowedAttributes",
    "getAllowedAttributes",
    "getOwnPropertyNames",
    "attr",
    "attribute",
    "isOptional",
    "getDefaultValue",
    "requiredElements",
    "getRequiredElements",
    "allowedContent",
    "getAllowedContent",
    "isContentAllowed",
    "_text",
    "_grouping",
    "trim",
    "children",
    "elemName",
    "elem",
    "getAvailableElements",
    "usedItems",
    "availableItems",
    "filter",
    "startsWith",
    "childElem",
    "getBounds",
    "max",
    "label",
    "kind",
    "window",
    "monaco",
    "languages",
    "CompletionItemKind",
    "Field",
    "detail",
    "getType",
    "documentation",
    "getDocumentation",
    "join",
    "getAvailableAttributes",
    "usedChildTags",
    "attrs",
    "Property",
    "getTypeString",
    "detectSchema",
    "completeText",
    "_this2",
    "_callee2",
    "_callee2$",
    "_context2",
    "endsWith",
    "getProvider",
    "triggerCharacters",
    "provideCompletionItems",
    "_ref",
    "_callee3",
    "position",
    "_callee3$",
    "_context3",
    "setCurrentPath",
    "uri",
    "toString",
    "getValue",
    "suggestions",
    "_x",
    "_x2",
    "bind",
    "textUntilPosition",
    "getValueInRange",
    "startLineNumber",
    "startColumn",
    "endLineNumber",
    "lineNumber",
    "endColumn",
    "column",
    "metaEndPos",
    "textMeta",
    "mappingNames",
    "stylingNames",
    "templates",
    "map",
    "vmap",
    "regex",
    "templatesStart",
    "templatesString",
    "replace",
    "split",
    "rawTemplate",
    "nameMatch",
    "variables",
    "vregex",
    "lastOpenedTag",
    "openedTags",
    "openedAttributes",
    "parts",
    "shift",
    "cleanedText",
    "xmlDoc",
    "xml",
    "Document",
    "fromString",
    "lastChild",
    "lastElementChild",
    "lastFound",
    "toLowerCase",
    "outerHTML",
    "nodeName",
    "res",
    "searchedElement",
    "getDesigns",
    "sugg",
    "getTransforms",
    "getPlugins",
    "getIcons",
    "getInfluxDBs",
    "getInfluxDBFields",
    "includes",
    "influxAttributes",
    "getNamedItem",
    "getInfluxDBTags",
    "getInfluxDBValues",
    "EnumMember",
    "templateNames",
    "variableName",
    "locale",
    "Manager",
    "tr",
    "Variable",
    "mappingName",
    "stylingName",
    "backendName",
    "getAddresses",
    "getRrds",
    "typeFilter",
    "getMediaFiles",
    "currentItem",
    "getEnumeration",
    "Value",
    "destruct",
    "_schema",
    "Config"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/editor/completion/Config.js"
  ],
  "sourcesContent": [
    "/* Config.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * XSD-based code completion provider for the monaco text editor.\n *\n * @since 0.11.0\n * @author Tobias Br√§utigam\n */\nqx.Class.define('cv.ui.manager.editor.completion.Config', {\n  extend: qx.core.Object,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  /**\n   *\n   */\n  construct() {\n    super();\n    this.__elementCache = {};\n    this.__currentSchemas = {};\n    this._dataProvider = cv.ui.manager.editor.data.Provider.getInstance();\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    currentPath: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyCurrentPath'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    _schemas: null,\n    __currentSchema: null,\n    __elementCache: null,\n    __metaElementCache: null,\n    _dataProvider: null,\n    __rootTagName: null,\n    __metaTagName: null,\n    _getSuggestions: null,\n\n    _applyCurrentPath() {\n      this.__currentSchema = null;\n      this.__rootTagName = '';\n    },\n\n    async setStructure(name) {\n      const loaded = Object.prototype.hasOwnProperty.call(this.__currentSchemas, name);\n\n      switch (name) {\n        case 'pure':\n          if (!loaded) {\n            this.__currentSchemas.pure = await cv.ui.manager.model.Schema.getInstance('visu_config.xsd');\n          }\n          this.__currentSchema = this.__currentSchemas.pure;\n          this.__rootTagName = 'pages';\n          this.__metaTagName = 'meta';\n          this._getSuggestions = this.providePureCompletionItems;\n          break;\n\n        case 'tile':\n          if (!loaded) {\n            this.__currentSchemas.tile = await cv.ui.manager.model.Schema.getInstance('visu_config_tile.xsd');\n          }\n          this.__currentSchema = this.__currentSchemas.tile;\n          this.__rootTagName = 'config';\n          this.__metaTagName = 'cv-meta';\n          this._getSuggestions = this.provideTileCompletionItems;\n          break;\n      }\n    },\n\n    getLastOpenedTag(text) {\n      // get all tags inside the content\n      const tags = text.match(/<\\/*(?=\\S*)([a-zA-Z-]+)/g);\n      if (!tags) {\n        return null;\n      }\n      // we need to know which tags are closed\n      const closingTags = [];\n      for (let i = tags.length - 1; i >= 0; i--) {\n        if (tags[i].indexOf('</') === 0) {\n          closingTags.push(tags[i].substring('</'.length));\n        } else {\n          // get the last position of the tag\n          const tagPosition = text.lastIndexOf(tags[i]);\n          const tag = tags[i].substring('<'.length);\n          const closingBracketIdx = text.indexOf('/>', tagPosition);\n          // if the tag wasn't closed\n          if (closingBracketIdx === -1) {\n            // if there are no closing tags or the current tag wasn't closed\n            if (!closingTags.length || closingTags[closingTags.length - 1] !== tag) {\n              // we found our tag, but let's get the information if we are looking for\n              // a child element or an attribute\n              text = text.substring(tagPosition);\n\n              const openedTag = text.indexOf('<') > text.indexOf('>');\n              let contentSearch = false;\n              let currentAttribute = null;\n              if (openedTag) {\n                const attrMatch = /([\\w\\-_\\.\\d]+)=\"[^\"]*$/.exec(text);\n                contentSearch = !!attrMatch;\n                currentAttribute = attrMatch ? attrMatch[1] : null;\n              }\n              const filteredElementSearch = /<[\\w-_\\d]+$/.test(text);\n              const attributesMatch = [...text.matchAll(/\\s([^=]+)=\"([^\"]+)\"/g)];\n              const attributes = {};\n              for (const match of attributesMatch) {\n                attributes[match[1]] = match[2];\n              }\n              return {\n                tagName: tag,\n                currentAttribute: currentAttribute,\n                attributes: attributes,\n                filteredElementSearch: filteredElementSearch,\n                isAttributeSearch: !filteredElementSearch && openedTag && !contentSearch,\n                isContentSearch: contentSearch,\n                text: text\n              };\n            }\n            // remove the last closed tag\n            closingTags.splice(closingTags.length - 1, 1);\n          }\n          // remove the last checked tag and continue processing the rest of the content\n          text = text.substring(0, tagPosition);\n        }\n      }\n      return null;\n    },\n\n    findElements(parent, elementName, maxDepth, currentDepth, inMeta) {\n      const cache = inMeta === true ? this.__metaElementCache : this.__elementCache;\n      if (elementName in cache) {\n        return cache[elementName];\n      }\n      if (maxDepth < currentDepth) {\n        return null;\n      }\n      if (!parent) {\n        parent = this.__currentSchema.getElementNode(this.__rootTagName);\n      }\n      if (currentDepth === undefined) {\n        currentDepth = 1;\n      }\n      const allowedElements = parent.getAllowedElements();\n      // console.log(parent.name+\" looking for \"+elementName+\" in tree level \"+currentDepth+ \"(<\"+maxDepth+\") (\"+Object.getOwnPropertyNames(allowedElements).join(\", \")+\")\");\n      if (elementName in allowedElements) {\n        // console.log(\"found \"+elementName+\" in tree level \"+currentDepth);\n        this.__elementCache[elementName] = allowedElements[elementName];\n        return allowedElements[elementName];\n      }\n      for (let element in allowedElements) {\n        if (inMeta !== true && element === this.__metaTagName) {\n          continue;\n        }\n        if (maxDepth > currentDepth) {\n          const result = this.findElements(allowedElements[element], elementName, maxDepth, currentDepth + 1);\n\n          if (result) {\n            cache[elementName] = result;\n            // console.log(\"found \" + elementName + \" in tree level \" + currentDepth);\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n\n    isItemAvailable(itemName, maxOccurs, items) {\n      // the default for 'maxOccurs' is 1\n      maxOccurs = maxOccurs || '1';\n      // the element can appere infinite times, so it is available\n      if (maxOccurs && maxOccurs === 'unbounded') {\n        return true;\n      }\n      // count how many times the element appeared\n      let count = 0;\n      for (let i = 0; i < items.length; i++) {\n        if (items[i] === itemName) {\n          count++;\n        }\n      }\n      // if it didn't appear yet, or it can appear again, then it\n      // is available, otherwise it't not\n      return count === 0 || parseInt(maxOccurs) > count;\n    },\n\n    getElementString(element, indent, prefix) {\n      let insertText = indent + prefix + element.getName() + ' ';\n      // add all required attributes with default values\n      const allowedAttributes = element.getAllowedAttributes();\n      Object.getOwnPropertyNames(allowedAttributes).forEach(function (attr) {\n        const attribute = allowedAttributes[attr];\n        if (!attribute.isOptional) {\n          insertText += attr + '=\"' + (attribute.getDefaultValue() ? attribute.getDefaultValue() : '') + '\" ';\n        }\n      });\n      // add mandatory children\n      const requiredElements = element.getRequiredElements();\n      const allowedContent = element.getAllowedContent();\n      const isContentAllowed = allowedContent._text || requiredElements.length > 0 || !!allowedContent._grouping;\n      if (!isContentAllowed) {\n        // close tag\n        insertText = insertText.trim() + '/';\n      } else {\n        // close open tag\n        insertText = insertText.trim() + '>';\n\n        // insert required elements\n        let children = 0;\n        requiredElements.forEach(function (elemName) {\n          const elem = this.findElements(element, elemName, 1, 0);\n          if (elem) {\n            insertText += '\\n    ' + this.getElementString(elem, indent + '    ', '<') + '>';\n            children++;\n          }\n        }, this);\n        // add closing tag\n        if (children > 0) {\n          insertText += '\\n' + indent;\n        }\n        insertText += '</' + element.getName();\n      }\n      return insertText;\n    },\n\n    getAvailableElements(element, usedItems) {\n      const availableItems = [];\n      const children = element.getAllowedElements();\n\n      // if there are no such elements, then there are no suggestions\n      if (!children) {\n        return [];\n      }\n      Object.getOwnPropertyNames(children)\n        .filter(name => !name.startsWith('#'))\n        .forEach(function (name) {\n          // get all element attributes\n          const childElem = children[name];\n          // the element is a suggestion if it's available\n          if (this.isItemAvailable(childElem.getName(), childElem.getBounds().max, usedItems)) {\n            // mark it as a 'field', and get the documentation\n            availableItems.push({\n              label: childElem.getName(),\n              insertText: this.getElementString(childElem, '', ''),\n              kind: window.monaco.languages.CompletionItemKind.Field,\n              detail: childElem.getType(),\n              documentation: childElem.getDocumentation().join('\\n')\n            });\n          }\n        }, this);\n      // return the suggestions we found\n      return availableItems;\n    },\n\n    getAvailableAttributes(element, usedChildTags) {\n      const availableItems = [];\n      // get all attributes for the element\n      const attrs = element.getAllowedAttributes();\n      Object.getOwnPropertyNames(attrs).forEach(function (name) {\n        const attr = attrs[name];\n        // accept it in a suggestion list only the attribute is not used yet\n        if (usedChildTags.indexOf(attr.name) === -1) {\n          // mark it as a 'property', and get it's documentation\n          availableItems.push({\n            label: attr.getName(),\n            insertText: attr.getName() + '=\"\"',\n            kind: window.monaco.languages.CompletionItemKind.Property,\n            detail: attr.getTypeString(),\n            documentation: attr.getDocumentation().join('\\n')\n          });\n        }\n      }, this);\n\n      // return the elements we found\n      return availableItems;\n    },\n\n    async detectSchema(completeText) {\n      const match = /:noNamespaceSchemaLocation=\"([^\"]+)\"/.exec(completeText.substring(0, 200));\n\n      if (match && match[1].endsWith('visu_config_tile.xsd')) {\n        await this.setStructure('tile');\n      } else {\n        await this.setStructure('pure');\n      }\n    },\n\n    getProvider() {\n      return {\n        triggerCharacters: ['<', '\"'],\n        provideCompletionItems: async function (model, position) {\n          this.setCurrentPath(model.uri.toString());\n          const completeText = model.getValue();\n          if (!this.__currentSchema) {\n            await this.detectSchema(completeText);\n          }\n          if (this._getSuggestions) {\n            return this._getSuggestions(model, position);\n          }\n          return { suggestions: [] };\n        }.bind(this)\n      };\n    },\n\n    providePureCompletionItems(model, position) {\n      // get editor content before the pointer\n      const textUntilPosition = model.getValueInRange({\n        startLineNumber: 1,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n\n      // parse mappings\n      const completeText = model.getValue();\n      const metaEndPos = completeText.indexOf('</meta>');\n      const textMeta = metaEndPos > 0 ? completeText.substring(0, metaEndPos) : completeText;\n      const mappingNames = [];\n      const stylingNames = [];\n      const templates = {};\n      let map;\n      let vmap;\n      let regex = /<mapping name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        mappingNames.push(map[1]);\n      }\n      regex = /<styling name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        stylingNames.push(map[1]);\n      }\n      const templatesStart = textMeta.indexOf('<templates>');\n      if (templatesStart >= 0) {\n        const templatesString = textMeta\n          .substring(templatesStart + 11, textMeta.indexOf('</templates>') - 12)\n          .replace(/(?:\\r\\n|\\r|\\n)/g, '');\n        templatesString.split('</template>').forEach(function (rawTemplate) {\n          const nameMatch = /<template name=\"([^\"]+)\"/.exec(rawTemplate);\n          // search for variables\n          const variables = [];\n          const vregex = /{{{?\\s*([\\w\\d]+)\\s*}?}}/gm;\n          while ((vmap = vregex.exec(rawTemplate)) !== null) {\n            variables.push(vmap[1]);\n          }\n          templates[nameMatch[1]] = variables;\n        }, this);\n      }\n\n      // if we want suggestions, inside of which tag are we?\n      const lastOpenedTag = this.getLastOpenedTag(textUntilPosition);\n      // console.log(lastOpenedTag);\n      // get opened tags to see what tag we should look for in the XSD schema\n      const openedTags = [];\n      // attrobutes of the ancestors\n      const openedAttributes = [];\n      // get the elements/attributes that are already mentioned in the element we're in\n      const usedItems = [];\n      const isAttributeSearch = lastOpenedTag && lastOpenedTag.isAttributeSearch;\n      const isContentSearch = lastOpenedTag && lastOpenedTag.isContentSearch;\n      const filteredElementSearch = lastOpenedTag && lastOpenedTag.filteredElementSearch;\n      // no need to calculate the position in the XSD schema if we are in the root element\n      let parts;\n      if (lastOpenedTag) {\n        // try to create a valid XML document\n        parts = lastOpenedTag.text.split(' ');\n        parts.shift();\n        let cleanedText = textUntilPosition;\n        if (parts.length) {\n          cleanedText = cleanedText.substring(0, cleanedText.length - parts.join(' ').length) + '>';\n        }\n        // parse the content (not cleared text) into an xml document\n        const xmlDoc = qx.xml.Document.fromString(cleanedText);\n        let lastChild = xmlDoc.lastElementChild;\n        let i;\n        let lastFound = false;\n        while (lastChild && lastChild.tagName.toLowerCase() !== 'parsererror') {\n          openedTags.push(lastChild.tagName);\n          openedAttributes.push(lastChild.attributes);\n          // if we found our last opened tag\n          if (lastChild.tagName === lastOpenedTag.tagName) {\n            lastFound = true;\n            // if we are looking for attributes, then used items should\n            // be the attributes we already used\n            if (lastOpenedTag.isAttributeSearch && lastChild.outerHTML === lastOpenedTag.text) {\n              const attrs = lastChild.attributes;\n              for (i = 0; i < attrs.length; i++) {\n                usedItems.push(attrs[i].nodeName);\n              }\n            } else {\n              // if we are looking for child elements, then used items\n              // should be the elements that were already used\n              const children = lastChild.children;\n              for (i = 0; i < children.length; i++) {\n                if (children[i].tagName.toLowerCase() !== 'parsererror') {\n                  usedItems.push(children[i].tagName);\n                }\n              }\n            }\n            break;\n          }\n          // we haven't found the last opened tag yet, so we move to\n          // the next element\n          lastChild = lastChild.lastElementChild;\n        }\n        if (!lastFound) {\n          // fallback -> parse string\n          if (isAttributeSearch || isContentSearch) {\n            parts = lastOpenedTag.text.split(' ');\n            // skip tag name\n            parts.shift();\n            parts.forEach(function (entry) {\n              usedItems.push(entry.split('=').shift());\n            });\n          }\n        }\n      }\n      let res = [];\n      let match;\n      // find the last opened tag in the schema to see what elements/attributes it can have\n      let searchedElement = openedTags[openedTags.length - 1];\n      if (isContentSearch) {\n        // handle data providers if the is one relevant\n        if (lastOpenedTag.tagName === 'pages' && lastOpenedTag.currentAttribute === 'design') {\n          return this._dataProvider.getDesigns(null, null, 'pure').then(function (sugg) {\n            return { suggestions: sugg };\n          });\n        } else if (lastOpenedTag.tagName === 'address' && lastOpenedTag.currentAttribute === 'transform') {\n          return { suggestions: this._dataProvider.getTransforms() };\n        } else if (lastOpenedTag.tagName === 'plugin' && lastOpenedTag.currentAttribute === 'name') {\n          return { suggestions: this._dataProvider.getPlugins() };\n        } else if (lastOpenedTag.tagName === 'icon' && lastOpenedTag.currentAttribute === 'name') {\n          return {\n            suggestions: this._dataProvider.getIcons('monaco', { cache: false }, completeText)\n          };\n        } else if (lastOpenedTag.tagName === 'influx') {\n          if (lastOpenedTag.currentAttribute === 'measurement') {\n            return this._dataProvider.getInfluxDBs().then(function (suggestions) {\n              return { suggestions: suggestions };\n            });\n          } else if (lastOpenedTag.currentAttribute === 'field') {\n            match = /measurement=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n            if (match) {\n              return this._dataProvider.getInfluxDBFields(match[1]).then(function (suggestions) {\n                return { suggestions: suggestions };\n              });\n            }\n          }\n        } else if (\n          lastOpenedTag.tagName === 'tag' &&\n          (lastOpenedTag.currentAttribute === 'key' || lastOpenedTag.currentAttribute === 'value') &&\n          openedTags.includes('influx')\n        ) {\n          const influxAttributes = openedAttributes[openedTags.indexOf('influx')];\n          const attr = influxAttributes.getNamedItem('measurement');\n          if (attr) {\n            if (lastOpenedTag.currentAttribute === 'key') {\n              return this._dataProvider.getInfluxDBTags(attr.value).then(function (suggestions) {\n                return { suggestions: suggestions };\n              });\n            } else if (lastOpenedTag.currentAttribute === 'value') {\n              match = /key=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n              if (match) {\n                return this._dataProvider.getInfluxDBValues(attr.value, match[1]).then(function (suggestions) {\n                  return { suggestions: suggestions };\n                });\n              }\n            }\n          }\n        } else if (\n          lastOpenedTag.tagName === 'template' &&\n          lastOpenedTag.currentAttribute === 'name' &&\n          openedTags.includes('meta')\n        ) {\n          res = Object.keys(templates).map(function (name) {\n            return {\n              label: name,\n              insertText: name,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        } else if (\n          lastOpenedTag.tagName === 'value' &&\n          lastOpenedTag.currentAttribute === 'name' &&\n          !openedTags.includes('meta') &&\n          openedTags.includes('template')\n        ) {\n          // TODO: find out template name\n          const templateNames = Object.keys(templates);\n          templateNames.forEach(function (name) {\n            templates[name].forEach(function (variableName) {\n              res.push({\n                label: variableName,\n                insertText: variableName,\n                detail: qx.locale.Manager.tr('Variable from template %1', name),\n                kind: window.monaco.languages.CompletionItemKind.Variable\n              });\n            }, this);\n          }, this);\n          return { suggestions: res };\n        } else if (lastOpenedTag.currentAttribute === 'mapping') {\n          res = mappingNames.map(function (mappingName) {\n            return {\n              label: mappingName,\n              insertText: mappingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        } else if (lastOpenedTag.currentAttribute === 'styling') {\n          res = stylingNames.map(function (stylingName) {\n            return {\n              label: stylingName,\n              insertText: stylingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        }\n\n        // TODO: completions that have to be retrieved from the backend\n        // * rrds\n        // * Influx: dbs, tags fields\n        // * media files\n\n        searchedElement = lastOpenedTag.tagName;\n      } else if (!isAttributeSearch && filteredElementSearch) {\n        searchedElement = openedTags[openedTags.length - 2];\n      } else if (lastOpenedTag.tagName === 'address' && lastOpenedTag.currentAttribute === null) {\n        const backendName = lastOpenedTag.attributes['backend'] || 'main';\n        return this._dataProvider.getAddresses('monaco', null, backendName).then(res => ({ suggestions: res }));\n      }\n      if (searchedElement === 'rrd') {\n        return this._dataProvider.getRrds('monaco').then(res => ({ suggestions: res }));\n      } else if (searchedElement === 'file' && !isAttributeSearch && !isContentSearch && openedTags.includes('files')) {\n        match = /type=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n        const typeFilter = match ? match[1] : null;\n        return this._dataProvider.getMediaFiles(typeFilter).then(function (suggestions) {\n          return { suggestions: suggestions };\n        });\n      }\n      const currentItem = this.findElements(\n        this.__currentSchema.getElementNode('pages'),\n        searchedElement,\n        openedTags.length,\n        openedTags.includes('meta')\n      );\n\n      // return available elements/attributes if the tag exists in the schema, or an empty\n      // array if it doesn't\n      if (isContentSearch) {\n        const currentAttribute = usedItems[usedItems.length - 1];\n\n        if (currentItem && currentAttribute in currentItem.getAllowedAttributes()) {\n          const attribute = currentItem.getAllowedAttributes()[currentAttribute];\n          const type = attribute.getTypeString();\n          attribute.getEnumeration().forEach(function (entry) {\n            res.push({\n              label: entry,\n              insertText: entry,\n              kind: window.monaco.languages.CompletionItemKind.Value,\n              detail: type,\n              documentation: attribute.getDocumentation().join('\\n')\n            });\n          });\n        }\n      } else if (isAttributeSearch) {\n        // get attributes completions\n        res = currentItem ? this.getAvailableAttributes(currentItem, usedItems) : [];\n      } else {\n        // get elements completions\n        // eslint-disable-next-line no-lonely-if\n        if (lastOpenedTag && lastOpenedTag.text.endsWith('</')) {\n          res.push({\n            label: lastOpenedTag.tagName,\n            insertText: lastOpenedTag.tagName,\n            kind: window.monaco.languages.CompletionItemKind.Field\n          });\n        } else {\n          res = currentItem ? this.getAvailableElements(currentItem, usedItems) : [];\n        }\n      }\n      return { suggestions: res };\n    },\n\n    provideTileCompletionItems(model, position) {\n      // get editor content before the pointer\n      const textUntilPosition = model.getValueInRange({\n        startLineNumber: 1,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n\n      // parse mappings\n      const completeText = model.getValue();\n      const metaEndPos = completeText.indexOf('</cv-meta>');\n      const textMeta = metaEndPos > 0 ? completeText.substring(0, metaEndPos) : completeText;\n      const mappingNames = [];\n      const stylingNames = [];\n      let map;\n      let regex = /<cv-mapping name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        mappingNames.push(map[1]);\n      }\n      regex = /<cv-styling name=\"([^\"]+)\"/gm;\n      while ((map = regex.exec(textMeta)) !== null) {\n        stylingNames.push(map[1]);\n      }\n\n      // if we want suggestions, inside which tag are we?\n      const lastOpenedTag = this.getLastOpenedTag(textUntilPosition);\n      // console.log(lastOpenedTag);\n      // get opened tags to see what tag we should look for in the XSD schema\n      const openedTags = [];\n      // attributes of the ancestors\n      const openedAttributes = [];\n      // get the elements/attributes that are already mentioned in the element we're in\n      const usedItems = [];\n      const isAttributeSearch = lastOpenedTag && lastOpenedTag.isAttributeSearch;\n      const isContentSearch = lastOpenedTag && lastOpenedTag.isContentSearch;\n      const filteredElementSearch = lastOpenedTag && lastOpenedTag.filteredElementSearch;\n      // no need to calculate the position in the XSD schema if we are in the root element\n      let parts;\n      if (lastOpenedTag) {\n        // try to create a valid XML document\n        parts = lastOpenedTag.text.split(' ');\n        parts.shift();\n        let cleanedText = textUntilPosition;\n        if (parts.length) {\n          cleanedText = cleanedText.substring(0, cleanedText.length - parts.join(' ').length) + '>';\n        }\n        // parse the content (not cleared text) into a xml document\n        const xmlDoc = qx.xml.Document.fromString(cleanedText);\n        let lastChild = xmlDoc.lastElementChild;\n        let i;\n        let lastFound = false;\n        while (lastChild) {\n          openedTags.push(lastChild.tagName);\n          openedAttributes.push(lastChild.attributes);\n          // if we found our last opened tag\n          if (lastChild.tagName === lastOpenedTag.tagName) {\n            lastFound = true;\n            // if we are looking for attributes, then used items should\n            // be the attributes we already used\n            if (lastOpenedTag.isAttributeSearch && lastChild.outerHTML === lastOpenedTag.text) {\n              const attrs = lastChild.attributes;\n              for (i = 0; i < attrs.length; i++) {\n                usedItems.push(attrs[i].nodeName);\n              }\n            } else {\n              // if we are looking for child elements, then used items\n              // should be the elements that were already used\n              const children = lastChild.children;\n              for (i = 0; i < children.length; i++) {\n                if (children[i].tagName.toLowerCase() !== 'parsererror') {\n                  usedItems.push(children[i].tagName);\n                }\n              }\n            }\n            break;\n          }\n          // we haven't found the last opened tag yet, so we move to\n          // the next element\n          lastChild = lastChild.lastElementChild;\n        }\n        if (!lastFound) {\n          // fallback -> parse string\n          if (isAttributeSearch || isContentSearch) {\n            parts = lastOpenedTag.text.split(' ');\n            // skip tag name\n            parts.shift();\n            parts.forEach(entry => {\n              usedItems.push(entry.split('=').shift());\n            });\n          }\n        }\n      }\n      let res = [];\n      let match;\n      // find the last opened tag in the schema to see what elements/attributes it can have\n      let searchedElement = openedTags[openedTags.length - 1];\n      if (isContentSearch) {\n        // handle data providers if the is one relevant\n        if (lastOpenedTag.tagName === 'config' && lastOpenedTag.currentAttribute === 'design') {\n          const suggestions = this._dataProvider.getDesigns(null, null, 'tile');\n          return { suggestions: suggestions };\n        } else if (lastOpenedTag.tagName === 'cv-address' && lastOpenedTag.currentAttribute === 'transform') {\n          return { suggestions: this._dataProvider.getTransforms() };\n        } else if (lastOpenedTag.tagName === 'cv-icon' && lastOpenedTag.currentAttribute === 'name') {\n          return { suggestions: this._dataProvider.getIcons() };\n        } else if (lastOpenedTag.currentAttribute === 'mapping') {\n          res = mappingNames.map(function (mappingName) {\n            return {\n              label: mappingName,\n              insertText: mappingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        } else if (lastOpenedTag.currentAttribute === 'styling') {\n          res = stylingNames.map(function (stylingName) {\n            return {\n              label: stylingName,\n              insertText: stylingName,\n              kind: window.monaco.languages.CompletionItemKind.EnumMember\n            };\n          }, this);\n          return { suggestions: res };\n        }\n        searchedElement = lastOpenedTag.tagName;\n      } else if (!isAttributeSearch && filteredElementSearch) {\n        searchedElement = openedTags[openedTags.length - 2];\n      } else if (lastOpenedTag.tagName === 'cv-address' && lastOpenedTag.currentAttribute === null) {\n        const backendName = lastOpenedTag.attributes['backend'] || 'main';\n        return this._dataProvider.getAddresses('monaco', null, backendName).then(res => ({ suggestions: res }));\n      } else if (lastOpenedTag.tagName === 'cv-chart' && lastOpenedTag.currentAttribute === 'src') {\n        return this._dataProvider.getRrds('monaco').then(res => ({ suggestions: res }));\n      } else if (lastOpenedTag.tagName === 'cv-loader' && lastOpenedTag.currentAttribute === 'src') {\n        match = /type=\"([^\"]+)\"/.exec(lastOpenedTag.text);\n        const typeFilter = match ? match[1] : null;\n        return this._dataProvider.getMediaFiles(typeFilter).then(function (suggestions) {\n          return { suggestions: suggestions };\n        });\n      }\n      const currentItem = this.findElements(\n        this.__currentSchema.getElementNode('config'),\n        searchedElement,\n        openedTags.length,\n        openedTags.includes('cv-meta')\n      );\n\n      // return available elements/attributes if the tag exists in the schema, or an empty\n      // array if it doesn't\n      if (isContentSearch) {\n        const currentAttribute = lastOpenedTag.currentAttribute;\n\n        if (currentItem && currentAttribute in currentItem.getAllowedAttributes()) {\n          const attribute = currentItem.getAllowedAttributes()[currentAttribute];\n          const type = attribute.getTypeString();\n          attribute.getEnumeration().forEach(function (entry) {\n            res.push({\n              label: entry,\n              insertText: entry,\n              kind: window.monaco.languages.CompletionItemKind.Value,\n              detail: type,\n              documentation: attribute.getDocumentation().join('\\n')\n            });\n          });\n        }\n      } else if (isAttributeSearch) {\n        // get attributes completions\n        res = currentItem ? this.getAvailableAttributes(currentItem, usedItems) : [];\n      } else {\n        // get elements completions\n        // eslint-disable-next-line no-lonely-if\n        if (lastOpenedTag && lastOpenedTag.text.endsWith('</')) {\n          res.push({\n            label: lastOpenedTag.tagName,\n            insertText: lastOpenedTag.tagName,\n            kind: window.monaco.languages.CompletionItemKind.Field\n          });\n        } else {\n          res = currentItem ? this.getAvailableElements(currentItem, usedItems) : [];\n        }\n      }\n      return { suggestions: res };\n    }\n  },\n\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct() {\n    this.__elementCache = null;\n    this._schema = null;\n    this._dataProvider = null;\n  }\n});\n"
  ],
  "mappings": "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"
}