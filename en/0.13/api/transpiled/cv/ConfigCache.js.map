{
  "version": 3,
  "names": [
    "_regeneratorRuntime",
    "e",
    "t",
    "r",
    "Object",
    "prototype",
    "n",
    "hasOwnProperty",
    "o",
    "defineProperty",
    "value",
    "i",
    "Symbol",
    "a",
    "iterator",
    "c",
    "asyncIterator",
    "u",
    "toStringTag",
    "define",
    "enumerable",
    "configurable",
    "writable",
    "wrap",
    "Generator",
    "create",
    "Context",
    "makeInvokeMethod",
    "tryCatch",
    "type",
    "arg",
    "call",
    "h",
    "l",
    "f",
    "s",
    "y",
    "GeneratorFunction",
    "GeneratorFunctionPrototype",
    "p",
    "d",
    "getPrototypeOf",
    "v",
    "values",
    "g",
    "defineIteratorMethods",
    "forEach",
    "_invoke",
    "AsyncIterator",
    "invoke",
    "_typeof",
    "resolve",
    "__await",
    "then",
    "callInvokeWithMethodAndArg",
    "Error",
    "done",
    "method",
    "delegate",
    "maybeInvokeDelegate",
    "sent",
    "_sent",
    "dispatchException",
    "abrupt",
    "TypeError",
    "resultName",
    "next",
    "nextLoc",
    "pushTryEntry",
    "tryLoc",
    "catchLoc",
    "finallyLoc",
    "afterLoc",
    "tryEntries",
    "push",
    "resetTryEntry",
    "completion",
    "reset",
    "isNaN",
    "length",
    "displayName",
    "isGeneratorFunction",
    "constructor",
    "name",
    "mark",
    "setPrototypeOf",
    "__proto__",
    "awrap",
    "async",
    "Promise",
    "keys",
    "reverse",
    "pop",
    "prev",
    "charAt",
    "slice",
    "stop",
    "rval",
    "handle",
    "complete",
    "finish",
    "_catch",
    "delegateYield",
    "asyncGeneratorStep",
    "gen",
    "reject",
    "_next",
    "_throw",
    "key",
    "info",
    "error",
    "_asyncToGenerator",
    "fn",
    "self",
    "args",
    "arguments",
    "apply",
    "err",
    "undefined",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "Class",
    "statics",
    "_cacheKey",
    "_parseCacheData",
    "_valid",
    "replayCache",
    "__initPromise",
    "failed",
    "DB",
    "init",
    "cv",
    "ConfigCache",
    "request",
    "indexedDB",
    "open",
    "onerror",
    "log",
    "Logger",
    "onsuccess",
    "ev",
    "debug",
    "result",
    "event",
    "onupgradeneeded",
    "db",
    "target",
    "objectStore",
    "createObjectStore",
    "keyPath",
    "createIndex",
    "unique",
    "dump",
    "xml",
    "hash",
    "model",
    "data",
    "Model",
    "getInstance",
    "save",
    "toHash",
    "VERSION",
    "Version",
    "REV",
    "JSON",
    "stringify",
    "getWidgetDataModel",
    "addresses",
    "getAddressList",
    "configSettings",
    "Config",
    "config",
    "configSuffix",
    "body",
    "document",
    "querySelector",
    "innerHTML",
    "restore",
    "_this",
    "getData",
    "cache",
    "iconsFromConfig",
    "icon",
    "IconHandler",
    "insert",
    "uri",
    "flavour",
    "color",
    "styling",
    "dynamic",
    "source",
    "mappings",
    "mapping",
    "formulaSource",
    "formula",
    "Function",
    "range",
    "rangeMin",
    "valueElement",
    "iconDefinition",
    "definition",
    "getIconElement",
    "Array",
    "isArray",
    "contents",
    "setWidgetDataModel",
    "setAddressList",
    "widgetsToInitialize",
    "filter",
    "widgetId",
    "$$initOnCacheLoad",
    "TemplateEngine",
    "addListenerOnce",
    "widgetData",
    "ui",
    "structure",
    "WidgetFactory",
    "createInstance",
    "$$type",
    "style",
    "visibility",
    "transaction",
    "put",
    "_this2",
    "_callee",
    "_callee$",
    "_context",
    "dataRequest",
    "get",
    "parse",
    "bind",
    "isCached",
    "_this3",
    "_callee2",
    "cacheVersion",
    "_callee2$",
    "_context2",
    "isValid",
    "_this4",
    "_callee3",
    "cachedHash",
    "_callee3$",
    "_context3",
    "hashCode",
    "XMLSerializer",
    "serializeToString",
    "clear",
    "string",
    "reduce",
    "split",
    "b",
    "charCodeAt",
    "character"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ConfigCache.js"
  ],
  "sourcesContent": [
    "/* ConfigCache.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Handles caches for cometvisu configs\n *\n * @author Tobias BrÃ¤utigam\n * @since 0.10.0\n */\nqx.Class.define('cv.ConfigCache', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    _cacheKey: 'data',\n    _parseCacheData: null,\n    _valid: null,\n    replayCache: null,\n    __initPromise: null,\n    failed: null,\n    DB: null,\n\n    init() {\n      if (!this.__initPromise) {\n        this.__initPromise = new Promise((resolve, reject) => {\n          if (!cv.ConfigCache.DB && !cv.ConfigCache.failed) {\n            const request = indexedDB.open('cvCache', 1);\n            request.onerror = function () {\n              cv.ConfigCache.failed = true;\n              qx.log.Logger.error(cv.ConfigCache, 'error opening cache database');\n\n              cv.ConfigCache.DB = null;\n              resolve(cv.ConfigCache.DB);\n            };\n            request.onsuccess = function (ev) {\n              qx.log.Logger.debug(cv.ConfigCache, 'Success creating/accessing IndexedDB database');\n\n              cv.ConfigCache.DB = request.result;\n\n              cv.ConfigCache.DB.onerror = function (event) {\n                reject(new Error('Error creating/accessing IndexedDB database'));\n              };\n              resolve(cv.ConfigCache.DB);\n            };\n            request.onupgradeneeded = function (event) {\n              const db = event.target.result;\n\n              db.onerror = function (event) {\n                qx.log.Logger.error(cv.ConfigCache, 'Error loading database.');\n              };\n              const objectStore = db.createObjectStore('data', {\n                keyPath: 'config'\n              });\n\n              objectStore.createIndex('config', 'config', { unique: true });\n            };\n          } else {\n            resolve(cv.ConfigCache.DB);\n          }\n        });\n      }\n      return this.__initPromise;\n    },\n\n    dump(xml, hash) {\n      const model = cv.data.Model.getInstance();\n      this.save({\n        hash: hash || this.toHash(xml),\n        VERSION: cv.Version.VERSION,\n        REV: cv.Version.REV,\n        data: JSON.stringify(model.getWidgetDataModel()),\n        addresses: model.getAddressList(),\n        configSettings: JSON.stringify(cv.Config.configSettings),\n        config: cv.Config.configSuffix === null ? 'NULL' : cv.Config.configSuffix,\n        body: document.querySelector('body').innerHTML\n      });\n    },\n\n    restore() {\n      const body = document.querySelector('body');\n      const model = cv.data.Model.getInstance();\n      this.getData().then(cache => {\n        cv.Config.configSettings = cache.configSettings;\n\n        // restore icons\n        cv.Config.configSettings.iconsFromConfig.forEach(function (icon) {\n          cv.IconHandler.getInstance().insert(\n            icon.name,\n            icon.uri,\n            icon.type,\n            icon.flavour,\n            icon.color,\n            icon.styling,\n            icon.dynamic,\n            icon.source\n          );\n        }, this);\n\n        // restore mappings\n        if (cv.Config.configSettings.mappings) {\n          Object.keys(cv.Config.configSettings.mappings).forEach(function (name) {\n            const mapping = cv.Config.configSettings.mappings[name];\n            if (mapping && mapping.formulaSource) {\n              mapping.formula = new Function('x', 'var y;' + mapping.formulaSource + '; return y;');\n            } else {\n              Object.keys(mapping).forEach(key => {\n                if (key === 'range') {\n                  Object.keys(mapping.range).forEach(rangeMin => {\n                    mapping.range[rangeMin][1].forEach((valueElement, i) => {\n                      const iconDefinition = valueElement.definition;\n                      if (iconDefinition) {\n                        let icon = cv.IconHandler.getInstance().getIconElement(\n                          iconDefinition.name,\n                          iconDefinition.type,\n                          iconDefinition.flavour,\n                          iconDefinition.color,\n                          iconDefinition.styling,\n                          iconDefinition['class']\n                        );\n\n                        icon.definition = iconDefinition;\n                        mapping.range[rangeMin][1][i] = icon;\n                      }\n                    });\n                  });\n                } else if (Array.isArray(mapping[key])) {\n                  const contents = mapping[key];\n                  for (let i = 0; i < contents.length; i++) {\n                    const iconDefinition = contents[i].definition;\n                    if (iconDefinition) {\n                      let icon = cv.IconHandler.getInstance().getIconElement(\n                        iconDefinition.name,\n                        iconDefinition.type,\n                        iconDefinition.flavour,\n                        iconDefinition.color,\n                        iconDefinition.styling,\n                        iconDefinition['class']\n                      );\n\n                      icon.definition = iconDefinition;\n                      contents[i] = icon;\n                    }\n                  }\n                } else {\n                  const iconDefinition = mapping[key].definition;\n                  if (iconDefinition) {\n                    let icon = cv.IconHandler.getInstance().getIconElement(\n                      iconDefinition.name,\n                      iconDefinition.type,\n                      iconDefinition.flavour,\n                      iconDefinition.color,\n                      iconDefinition.styling,\n                      iconDefinition['class']\n                    );\n\n                    icon.definition = iconDefinition;\n                    mapping[key] = icon;\n                  }\n                }\n              });\n            }\n          }, this);\n        }\n        model.setWidgetDataModel(cache.data);\n        model.setAddressList(cache.addresses);\n        const widgetsToInitialize = Object.keys(cache.data).filter(function (widgetId) {\n          return cache.data[widgetId].$$initOnCacheLoad === true;\n        });\n        if (widgetsToInitialize.length > 0) {\n          cv.TemplateEngine.getInstance().addListenerOnce('changeReady', () => {\n            widgetsToInitialize.forEach(function (widgetId) {\n              const widgetData = cache.data[widgetId];\n              cv.ui.structure.WidgetFactory.createInstance(widgetData.$$type, widgetData);\n            });\n          });\n        }\n        // hide body to prevent flickering\n        body.style.visibility = 'hidden';\n        body.innerHTML = cache.body;\n        qx.log.Logger.debug(this, 'content restored from cache');\n      });\n    },\n\n    save(data) {\n      if (cv.ConfigCache.DB) {\n        const objectStore = cv.ConfigCache.DB.transaction(['data'], 'readwrite').objectStore('data');\n        objectStore.put(data);\n      }\n    },\n\n    async getData(key) {\n      return new Promise((resolve, reject) => {\n        if (!cv.ConfigCache.DB) {\n          resolve(null);\n          return;\n        }\n        if (!this._parseCacheData) {\n          const objectStore = cv.ConfigCache.DB.transaction(['data'], 'readonly').objectStore('data');\n          const dataRequest = objectStore.get(cv.Config.configSuffix === null ? 'NULL' : cv.Config.configSuffix);\n\n          dataRequest.onsuccess = function (event) {\n            if (!dataRequest.result) {\n              resolve(null);\n            } else {\n              this._parseCacheData = dataRequest.result;\n              // parse stringified data\n              this._parseCacheData.data = JSON.parse(this._parseCacheData.data);\n              this._parseCacheData.configSettings = JSON.parse(this._parseCacheData.configSettings);\n\n              if (key) {\n                resolve(this._parseCacheData[key]);\n              } else {\n                resolve(this._parseCacheData);\n              }\n            }\n          }.bind(this);\n        } else if (key) {\n          resolve(this._parseCacheData[key]);\n        } else {\n          resolve(this._parseCacheData);\n        }\n      });\n    },\n\n    /**\n     * Returns true if there is an existing cache for the current config file\n     */\n    async isCached() {\n      await cv.ConfigCache.init();\n      const data = await this.getData();\n      if (!data) {\n        return false;\n      }\n      // compare versions\n      const cacheVersion = data.VERSION + '|' + data.REV;\n      qx.log.Logger.debug(\n        this,\n        'Cached version: ' + cacheVersion + ', CV-Version: ' + cv.Version.VERSION + '|' + cv.Version.REV\n      );\n\n      return cacheVersion === cv.Version.VERSION + '|' + cv.Version.REV;\n    },\n\n    async isValid(xml, hash) {\n      // cache the result, as the config stays the same until next reload\n      if (this._valid === null) {\n        const cachedHash = await this.getData('hash');\n        if (!cachedHash) {\n          this._valid = false;\n        } else {\n          if (!hash && xml) {\n            hash = this.toHash(xml);\n          }\n          qx.log.Logger.debug(this, 'Current hash: \\'' + hash + '\\', cached hash: \\'' + cachedHash + '\\'');\n\n          this._valid = hash === cachedHash;\n        }\n      }\n      return this._valid;\n    },\n\n    toHash(xml) {\n      return this.hashCode(new XMLSerializer().serializeToString(xml));\n    },\n\n    clear(configSuffix) {\n      if (cv.ConfigCache.DB) {\n        configSuffix = configSuffix || (cv.Config.configSuffix === null ? 'NULL' : cv.Config.configSuffix);\n        const objectStore = cv.ConfigCache.DB.transaction(['data'], 'readwrite').objectStore('data');\n        const dataRequest = objectStore.delete(configSuffix);\n        dataRequest.onsuccess = function () {\n          qx.log.Logger.debug('cache for ' + configSuffix + 'cleared');\n        };\n      }\n    },\n\n    /**\n     * @param string\n     * @see http://stackoverflow.com/q/7616461/940217\n     * @return {number}\n     */\n    hashCode(string) {\n      if (Array.prototype.reduce) {\n        return string.split('').reduce(function (a, b) {\n          a = (a << 5) - a + b.charCodeAt(0);\n          return a & a;\n        }, 0);\n      }\n      let hash = 0;\n      if (string.length === 0) {\n        return hash;\n      }\n      for (let i = 0, l = string.length; i < l; i++) {\n        let character = string.charCodeAt(i);\n        hash = (hash << 5) - hash + character;\n        hash &= hash; // Convert to 32bit integer\n      }\n      return hash;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}