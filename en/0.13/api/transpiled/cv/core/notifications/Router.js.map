{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "__routes",
    "debug",
    "__dateFormat",
    "util",
    "format",
    "DateFormat",
    "locale",
    "Date",
    "getDateFormat",
    "__timeFormat",
    "getTimeFormat",
    "statics",
    "evaluateCondition",
    "message",
    "prototype",
    "hasOwnProperty",
    "call",
    "condition",
    "log",
    "Logger",
    "error",
    "dispatchMessage",
    "topic",
    "target",
    "getInstance",
    "getTarget",
    "name",
    "cv",
    "ui",
    "PopupHandler",
    "NotificationCenter",
    "window",
    "speechSynthesis",
    "warn",
    "notifications",
    "SpeechHandler",
    "ToastManager",
    "members",
    "__stateMessageConfig",
    "getStateMessageConfig",
    "registerStateUpdateHandler",
    "config",
    "assign",
    "address",
    "data",
    "Model",
    "addUpdateListener",
    "_onIncomingData",
    "enableStateUpdateHandler",
    "id",
    "enable",
    "enabled",
    "changeStateUpdateHandlerSeverity",
    "severity",
    "unregisterStateUpdatehandler",
    "addresses",
    "forEach",
    "removeUpdateListener",
    "registerMessageHandler",
    "handler",
    "topics",
    "getOwnPropertyNames",
    "segments",
    "split",
    "firstSegment",
    "shift",
    "currentSegment",
    "__handlers__",
    "segment",
    "push",
    "state",
    "initial",
    "changed",
    "now",
    "formattedDate",
    "formattedTime",
    "skipInitial",
    "Transform",
    "decode",
    "addressConfig",
    "templateData",
    "value",
    "date",
    "time",
    "valueMapping",
    "common",
    "BasicUpdate",
    "applyMapping",
    "addressMapping",
    "title",
    "bom",
    "Template",
    "render",
    "titleTemplate",
    "messageTemplate",
    "deletable",
    "unique",
    "icon",
    "iconClasses",
    "__collectHandlers",
    "handlers",
    "Array",
    "last",
    "length",
    "some",
    "segmentName",
    "idx",
    "__collectAllFromSegment",
    "append",
    "Router",
    "handleMessage",
    "entry",
    "clear",
    "destruct",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/core/notifications/Router.js"
  ],
  "sourcesContent": [
    "/* Router.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global notification handler that routes messages topic-dependent to different {@link cv.core.notifications.IHandler}\n * (e.g. NotificationCenter, Dialog, Toast, console.log, native notification, internal message bus ...)\n *\n * @author Tobias Br√§utigam\n * @since 0.11.0\n */\nqx.Class.define('cv.core.notifications.Router', {\n  extend: qx.core.Object,\n  type: 'singleton',\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct() {\n    super();\n    this.__routes = {};\n    this.debug('new router');\n\n    this.__dateFormat = new qx.util.format.DateFormat(qx.locale.Date.getDateFormat('short'));\n\n    this.__timeFormat = new qx.util.format.DateFormat(qx.locale.Date.getTimeFormat('short'));\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Evaluate the message condition, default to true is message has no condition set\n     * @param message {Map}\n     * @returns {Boolean}\n     */\n    evaluateCondition(message) {\n      if (!Object.prototype.hasOwnProperty.call(message, 'condition')) {\n        // nothing to evaluate\n        return true;\n      } else if (typeof message.condition === 'boolean') {\n        return message.condition;\n      } else if (typeof message.condition === 'function') {\n        return message.condition();\n      }\n      qx.log.Logger.error(this, 'unhandled message condition type: ' + message.condition);\n\n      return false;\n    },\n\n    /**\n     * Shortcut to {@link cv.core.notifications.Router#dispatchMessage}\n     * @param topic\n     * @param message\n     * @param target\n     */\n    dispatchMessage(topic, message, target) {\n      return this.getInstance().dispatchMessage(topic, message, target);\n    },\n\n    /**\n     * Converts a target name to the related target object/function.\n     *\n     * @param name {String} target name, e.g. popup, notificationCenter, etc.\n     * @return {Object|Function|null} the target that can handle messages\n     */\n    getTarget(name) {\n      switch (name) {\n        case 'popup':\n          return cv.ui.PopupHandler;\n        case 'notificationCenter':\n          return cv.ui.NotificationCenter.getInstance();\n        case 'speech':\n          if (!window.speechSynthesis) {\n            // not supported\n            qx.log.Logger.warn(this, 'this browser does not support the Web Speech API');\n\n            return null;\n          }\n          return cv.core.notifications.SpeechHandler.getInstance();\n        case 'toast':\n          return cv.ui.ToastManager.getInstance();\n      }\n\n      return null;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __routes: null,\n    __stateMessageConfig: null,\n    __dateFormat: null,\n    __timeFormat: null,\n\n    getStateMessageConfig() {\n      return this.__stateMessageConfig;\n    },\n\n    /**\n     * Register state update handler for one or more addresses.\n     *\n     * <h4>Config Map explanation:</h4>\n     * <pre class=\"javascript\">\n     * {\n     *   <address>: [{\n     *    topic: \"cv.state.<address>\", // message topic used for routing\n     *    target: \"popup\", // where to show the message\n     *    severity: \"normal\", // message severity e.g. high, normal, low\n     *    skipInitial: true, // do not show message for initial state update\n     *    deletable: true, // user can delete this message\n     *    unique: true, // show message once at a time\n     *    valueMapping: \"mapping-name\", // optional mapping for value\n     *    addressMapping: \"mapping-name\", // optional mapping name for address\n     *    titleTemplate: \"Kitchen light on\", // title template of the message\n     *    messageTemplate: \"turned on at {{ time }} o'clock\", // message content template\n     *    condition: 1 // show only when the value equals the condition value\n     *   }]\n     * }\n     * </pre>\n     *\n     * @param config {Map}\n     */\n    registerStateUpdateHandler(config) {\n      if (this.__stateMessageConfig) {\n        this.__stateMessageConfig = Object.assign(this.__stateMessageConfig, config);\n      } else {\n        this.__stateMessageConfig = config;\n      }\n      for (const address in config) {\n        cv.data.Model.getInstance().addUpdateListener(address, this._onIncomingData, this);\n      }\n    },\n\n    /**\n     * Toggle state update handler enabled state\n     * @param id {number} ID of the handler\n     * @param enable {boolean}\n     */\n    enableStateUpdateHandler(id, enable) {\n      for (const address in this.__stateMessageConfig) {\n        for (const config of this.__stateMessageConfig[address]) {\n          if (config.id === id) {\n            config.enabled = enable;\n          }\n        }\n      }\n    },\n\n    /**\n     * Change state update severity\n     * @param id {number} ID of the handler\n     * @param severity {string} new severity\n     */\n    changeStateUpdateHandlerSeverity(id, severity) {\n      for (const address in this.__stateMessageConfig) {\n        for (const config of this.__stateMessageConfig[address]) {\n          if (config.id === id) {\n            config.severity = severity;\n          }\n        }\n      }\n    },\n\n    /**\n     * Unregister state update listeners for a list of addresses\n     * @param addresses {Array}\n     */\n    unregisterStateUpdatehandler(addresses) {\n      addresses.forEach(function (address) {\n        cv.data.Model.getInstance().removeUpdateListener(address, this._onIncomingData, this);\n\n        if (this.__stateMessageConfig[address]) {\n          delete this.__stateMessageConfig[address];\n        }\n      }, this);\n    },\n\n    /**\n     * Register a handler for a list of topics\n     * @param handler {cv.core.notifications.IHandler}\n     * @param topics {Map} map of topics as key and configuration-maps as values\n     */\n    registerMessageHandler(handler, topics) {\n      Object.getOwnPropertyNames(topics).forEach(function (topic) {\n        const segments = topic.split('.');\n        const firstSegment = segments.shift();\n        let currentSegment = this.__routes[firstSegment];\n        if (!currentSegment) {\n          this.__routes[firstSegment] = { __handlers__: [] };\n          currentSegment = this.__routes[firstSegment];\n        }\n        segments.forEach(function (segment) {\n          if (!currentSegment[segment]) {\n            currentSegment[segment] = { __handlers__: [] };\n          }\n          currentSegment = currentSegment[segment];\n        }, this);\n\n        currentSegment.__handlers__.push({\n          handler: handler,\n          config: topics[topic]\n        });\n      }, this);\n    },\n\n    /**\n     * Handle address state updates and show them as message\n     * @param address {String} GA or openHAB item name\n     * @param state {var} received State\n     * @param initial {Boolean} true id this is the first state update for this address\n     * @param changed {Boolean} true if the incoming state update differs from the last one\n     * @protected\n     */\n    _onIncomingData(address, state, initial, changed) {\n      if (!this.__stateMessageConfig[address]) {\n        return;\n      }\n\n      const now = new Date();\n      const formattedDate = this.__dateFormat.format(now);\n      const formattedTime = this.__timeFormat.format(now);\n\n      this.__stateMessageConfig[address].forEach(function (config) {\n        if (config.enabled === false || (initial === true && config.skipInitial === true) || changed === false) {\n          // do not handle the first update\n          return;\n        }\n\n        // process value\n        state = cv.Transform.decode(config.addressConfig, state);\n\n        const templateData = {\n          address: address,\n          value: state,\n          date: formattedDate,\n          time: formattedTime\n        };\n\n        // transform the raw value to a JavaScript type\n        templateData.value = cv.Transform.decode(config.addressConfig, templateData.value);\n\n        if (config.valueMapping) {\n          // apply mapping\n          templateData.value = cv.ui.common.BasicUpdate.applyMapping(templateData.value, config.valueMapping);\n        }\n        if (config.addressMapping) {\n          templateData.address = cv.ui.common.BasicUpdate.applyMapping(templateData.address, config.addressMapping);\n        }\n\n        const message = {\n          topic: Object.prototype.hasOwnProperty.call(config, 'topic') ? config.topic : 'cv.state.update.' + address,\n          title: qx.bom.Template.render('' + config.titleTemplate, templateData),\n\n          message: qx.bom.Template.render('' + config.messageTemplate, templateData),\n\n          deletable: Object.prototype.hasOwnProperty.call(config, 'deletable') ? config.deletable : true,\n          unique: Object.prototype.hasOwnProperty.call(config, 'unique') ? config.unique : false,\n          severity: config.severity\n        };\n\n        if (Object.prototype.hasOwnProperty.call(config, 'condition')) {\n          message.condition = state == config.condition;\n        }\n        if (config.icon) {\n          message.icon = config.icon;\n          if (config.iconClasses) {\n            message.iconClasses = config.iconClasses;\n          }\n        }\n        this.dispatchMessage(message.topic, message, config.target);\n      }, this);\n    },\n\n    __collectHandlers(topic) {\n      const handlers = new qx.data.Array();\n      const segments = topic.split('.');\n      const firstSegment = segments.shift();\n      let currentSegment = this.__routes[firstSegment];\n      const last = segments.length - 1;\n      segments.some(function (segmentName, idx) {\n        if (!currentSegment) {\n          // segment does not exists, stop searching\n          return true;\n        } else if (segmentName === '*') {\n          // collect all\n          this.__collectAllFromSegment(currentSegment, handlers);\n          return true;\n        }\n        if (currentSegment['*']) {\n          handlers.append(currentSegment['*'].__handlers__);\n        }\n        if (currentSegment[segmentName]) {\n          if (idx === last) {\n            handlers.append(currentSegment[segmentName].__handlers__);\n          }\n          currentSegment = currentSegment[segmentName];\n        } else {\n          // stop searching\n          return true;\n        }\n        return false;\n      }, this);\n      return handlers;\n    },\n\n    __collectAllFromSegment(segment, handlers) {\n      handlers.append(segment.__handlers__);\n      Object.getOwnPropertyNames(segment).forEach(function (segmentName) {\n        if (segmentName !== '__handlers__') {\n          this.__collectAllFromSegment(segment[segmentName], handlers);\n        }\n      }, this);\n      return handlers;\n    },\n\n    dispatchMessage(topic, message, target) {\n      if (message.target && !target) {\n        target = cv.core.notifications.Router.getTarget(message.target);\n      }\n      if (target && target.handleMessage) {\n        this.debug('dispatching \\'' + topic + '\\' message to handler: ' + target);\n        target.handleMessage(message, {});\n      } else {\n        this.__collectHandlers(topic).forEach(function (entry) {\n          this.debug('dispatching \\'' + topic + '\\' message to handler: ' + entry.handler);\n\n          entry.handler.handleMessage(message, entry.config);\n        }, this);\n      }\n    },\n\n    clear() {\n      this.__routes = {};\n      this.__stateMessageConfig = {};\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    this.clear();\n    this._disposeObjects('__dateFormat', '__timeFormat');\n  }\n});\n"
  ],
  "mappings": "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"
}