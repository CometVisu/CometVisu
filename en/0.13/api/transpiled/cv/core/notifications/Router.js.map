{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "__routes",
    "debug",
    "__dateFormat",
    "util",
    "format",
    "DateFormat",
    "locale",
    "Date",
    "getDateFormat",
    "__timeFormat",
    "getTimeFormat",
    "statics",
    "evaluateCondition",
    "message",
    "prototype",
    "hasOwnProperty",
    "call",
    "condition",
    "log",
    "Logger",
    "error",
    "dispatchMessage",
    "topic",
    "target",
    "getInstance",
    "getTarget",
    "name",
    "cv",
    "ui",
    "PopupHandler",
    "NotificationCenter",
    "window",
    "speechSynthesis",
    "warn",
    "notifications",
    "SpeechHandler",
    "ToastManager",
    "members",
    "__stateMessageConfig",
    "getStateMessageConfig",
    "registerStateUpdateHandler",
    "config",
    "getOwnPropertyNames",
    "forEach",
    "address",
    "data",
    "Model",
    "addUpdateListener",
    "_onIncomingData",
    "unregisterStateUpdatehandler",
    "addresses",
    "removeUpdateListener",
    "registerMessageHandler",
    "handler",
    "topics",
    "segments",
    "split",
    "firstSegment",
    "shift",
    "currentSegment",
    "__handlers__",
    "segment",
    "push",
    "state",
    "initial",
    "changed",
    "now",
    "formattedDate",
    "formattedTime",
    "skipInitial",
    "Transform",
    "decode",
    "addressConfig",
    "templateData",
    "value",
    "date",
    "time",
    "valueMapping",
    "common",
    "BasicUpdate",
    "applyMapping",
    "addressMapping",
    "title",
    "bom",
    "Template",
    "render",
    "titleTemplate",
    "messageTemplate",
    "deletable",
    "unique",
    "severity",
    "icon",
    "iconClasses",
    "__collectHandlers",
    "handlers",
    "Array",
    "last",
    "length",
    "some",
    "segmentName",
    "idx",
    "__collectAllFromSegment",
    "append",
    "Router",
    "handleMessage",
    "entry",
    "clear",
    "destruct",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/core/notifications/Router.js"
  ],
  "sourcesContent": [
    "/* Router.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global notification handler that routes messages topic-dependent to different {@link cv.core.notifications.IHandler}\n * (e.g. NotificationCenter, Dialog, Toast, console.log, native notification, internal message bus ...)\n *\n * @author Tobias Br√§utigam\n * @since 0.11.0\n */\nqx.Class.define('cv.core.notifications.Router', {\n  extend: qx.core.Object,\n  type: 'singleton',\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct() {\n    super();\n    this.__routes = {};\n    this.debug('new router');\n\n    this.__dateFormat = new qx.util.format.DateFormat(qx.locale.Date.getDateFormat('short'));\n\n    this.__timeFormat = new qx.util.format.DateFormat(qx.locale.Date.getTimeFormat('short'));\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Evaluate the message condition, default to true is message has no condition set\n     * @param message {Map}\n     * @returns {Boolean}\n     */\n    evaluateCondition(message) {\n      if (!Object.prototype.hasOwnProperty.call(message, 'condition')) {\n        // nothing to evaluate\n        return true;\n      } else if (typeof message.condition === 'boolean') {\n        return message.condition;\n      } else if (typeof message.condition === 'function') {\n        return message.condition();\n      }\n      qx.log.Logger.error(this, 'unhandled message condition type: ' + message.condition);\n\n      return false;\n    },\n\n    /**\n     * Shortcut to {@link cv.core.notifications.Router#dispatchMessage}\n     * @param topic\n     * @param message\n     * @param target\n     */\n    dispatchMessage(topic, message, target) {\n      return this.getInstance().dispatchMessage(topic, message, target);\n    },\n\n    /**\n     * Converts a target name to the related target object/function.\n     *\n     * @param name {String} target name, e.g. popup, notificationCenter, etc.\n     * @return {Object|Function|null} the target that can handle messages\n     */\n    getTarget(name) {\n      switch (name) {\n        case 'popup':\n          return cv.ui.PopupHandler;\n        case 'notificationCenter':\n          return cv.ui.NotificationCenter.getInstance();\n        case 'speech':\n          if (!window.speechSynthesis) {\n            // not supported\n            qx.log.Logger.warn(this, 'this browser does not support the Web Speech API');\n\n            return null;\n          }\n          return cv.core.notifications.SpeechHandler.getInstance();\n        case 'toast':\n          return cv.ui.ToastManager.getInstance();\n      }\n\n      return null;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __routes: null,\n    __stateMessageConfig: null,\n    __dateFormat: null,\n    __timeFormat: null,\n\n    getStateMessageConfig() {\n      return this.__stateMessageConfig;\n    },\n\n    /**\n     * Register state update handler for one or more addresses.\n     *\n     * <h4>Config Map explanation:</h4>\n     * <pre class=\"javascript\">\n     * {\n     *   <address>: [{\n     *    topic: \"cv.state.<address>\", // message topic used for routing\n     *    target: \"popup\", // where to show the message\n     *    severity: \"normal\", // message severity e.g. high, normal, low\n     *    skipInitial: true, // do not show message for initial state update\n     *    deletable: true, // user can delete this message\n     *    unique: true, // show message once at a time\n     *    valueMapping: \"mapping-name\", // optional mapping for value\n     *    addressMapping: \"mapping-name\", // optional mapping name for address\n     *    titleTemplate: \"Kitchen light on\", // title template of the message\n     *    messageTemplate: \"turned on at {{ time }} o'clock\", // message content template\n     *    condition: 1 // show only when the value equals the condition value\n     *   }]\n     * }\n     * </pre>\n     *\n     * @param config {Map}\n     */\n    registerStateUpdateHandler(config) {\n      this.__stateMessageConfig = config;\n      Object.getOwnPropertyNames(this.__stateMessageConfig).forEach(function (address) {\n        cv.data.Model.getInstance().addUpdateListener(address, this._onIncomingData, this);\n      }, this);\n    },\n\n    /**\n     * Unregister state update listeners for a list of addresses\n     * @param addresses {Array}\n     */\n    unregisterStateUpdatehandler(addresses) {\n      addresses.forEach(function (address) {\n        cv.data.Model.getInstance().removeUpdateListener(address, this._onIncomingData, this);\n\n        if (this.__stateMessageConfig[address]) {\n          delete this.__stateMessageConfig[address];\n        }\n      }, this);\n    },\n\n    /**\n     * Register a handler for a list of topics\n     * @param handler {cv.core.notifications.IHandler}\n     * @param topics {Map} map of topics as key and configuration-maps as values\n     */\n    registerMessageHandler(handler, topics) {\n      Object.getOwnPropertyNames(topics).forEach(function (topic) {\n        const segments = topic.split('.');\n        const firstSegment = segments.shift();\n        let currentSegment = this.__routes[firstSegment];\n        if (!currentSegment) {\n          this.__routes[firstSegment] = { __handlers__: [] };\n          currentSegment = this.__routes[firstSegment];\n        }\n        segments.forEach(function (segment) {\n          if (!currentSegment[segment]) {\n            currentSegment[segment] = { __handlers__: [] };\n          }\n          currentSegment = currentSegment[segment];\n        }, this);\n\n        currentSegment.__handlers__.push({\n          handler: handler,\n          config: topics[topic]\n        });\n      }, this);\n    },\n\n    /**\n     * Handle address state updates and show them as message\n     * @param address {String} GA or openHAB item name\n     * @param state {var} received State\n     * @param initial {Boolean} true id this is the first state update for this address\n     * @param changed {Boolean} true if the incoming state update differs from the last one\n     * @protected\n     */\n    _onIncomingData(address, state, initial, changed) {\n      if (!this.__stateMessageConfig[address]) {\n        return;\n      }\n\n      const now = new Date();\n      const formattedDate = this.__dateFormat.format(now);\n      const formattedTime = this.__timeFormat.format(now);\n\n      this.__stateMessageConfig[address].forEach(function (config) {\n        if ((initial === true && config.skipInitial === true) || changed === false) {\n          // do not handle the first update\n          return;\n        }\n\n        // process value\n        state = cv.Transform.decode(config.addressConfig, state);\n\n        const templateData = {\n          address: address,\n          value: state,\n          date: formattedDate,\n          time: formattedTime\n        };\n\n        // transform the raw value to a JavaScript type\n        templateData.value = cv.Transform.decode(config.addressConfig, templateData.value);\n\n        if (config.valueMapping) {\n          // apply mapping\n          templateData.value = cv.ui.common.BasicUpdate.applyMapping(templateData.value, config.valueMapping);\n        }\n        if (config.addressMapping) {\n          templateData.address = cv.ui.common.BasicUpdate.applyMapping(templateData.address, config.addressMapping);\n        }\n\n        const message = {\n          topic: Object.prototype.hasOwnProperty.call(config, 'topic') ? config.topic : 'cv.state.update.' + address,\n          title: qx.bom.Template.render('' + config.titleTemplate, templateData),\n\n          message: qx.bom.Template.render('' + config.messageTemplate, templateData),\n\n          deletable: Object.prototype.hasOwnProperty.call(config, 'deletable') ? config.deletable : true,\n          unique: Object.prototype.hasOwnProperty.call(config, 'unique') ? config.unique : false,\n          severity: config.severity\n        };\n\n        if (Object.prototype.hasOwnProperty.call(config, 'condition')) {\n          message.condition = state == config.condition;\n        }\n        if (config.icon) {\n          message.icon = config.icon;\n          if (config.iconClasses) {\n            message.iconClasses = config.iconClasses;\n          }\n        }\n        this.dispatchMessage(message.topic, message, config.target);\n      }, this);\n    },\n\n    __collectHandlers(topic) {\n      const handlers = new qx.data.Array();\n      const segments = topic.split('.');\n      const firstSegment = segments.shift();\n      let currentSegment = this.__routes[firstSegment];\n      const last = segments.length - 1;\n      segments.some(function (segmentName, idx) {\n        if (!currentSegment) {\n          // segment does not exists, stop searching\n          return true;\n        } else if (segmentName === '*') {\n          // collect all\n          this.__collectAllFromSegment(currentSegment, handlers);\n          return true;\n        }\n        if (currentSegment['*']) {\n          handlers.append(currentSegment['*'].__handlers__);\n        }\n        if (currentSegment[segmentName]) {\n          if (idx === last) {\n            handlers.append(currentSegment[segmentName].__handlers__);\n          }\n          currentSegment = currentSegment[segmentName];\n        } else {\n          // stop searching\n          return true;\n        }\n        return false;\n      }, this);\n      return handlers;\n    },\n\n    __collectAllFromSegment(segment, handlers) {\n      handlers.append(segment.__handlers__);\n      Object.getOwnPropertyNames(segment).forEach(function (segmentName) {\n        if (segmentName !== '__handlers__') {\n          this.__collectAllFromSegment(segment[segmentName], handlers);\n        }\n      }, this);\n      return handlers;\n    },\n\n    dispatchMessage(topic, message, target) {\n      if (message.target && !target) {\n        target = cv.core.notifications.Router.getTarget(message.target);\n      }\n      if (target && target.handleMessage) {\n        this.debug('dispatching \\'' + topic + '\\' message to handler: ' + target);\n        target.handleMessage(message, {});\n      } else {\n        this.__collectHandlers(topic).forEach(function (entry) {\n          this.debug('dispatching \\'' + topic + '\\' message to handler: ' + entry.handler);\n\n          entry.handler.handleMessage(message, entry.config);\n        }, this);\n      }\n    },\n\n    clear() {\n      this.__routes = {};\n      this.__stateMessageConfig = {};\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    this.clear();\n    this._disposeObjects('__dateFormat', '__timeFormat');\n  }\n});\n"
  ],
  "mappings": "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"
}