{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "properties",
    "connected",
    "check",
    "init",
    "event",
    "server",
    "nullable",
    "members",
    "getBackend",
    "getType",
    "hasProvider",
    "name",
    "getProviderUrl",
    "getProviderData",
    "format",
    "getProviderConvertFunction",
    "setInitialAddresses",
    "addresses",
    "subscribe",
    "filters",
    "login",
    "loginOnly",
    "credentials",
    "callback",
    "context",
    "authorize",
    "req",
    "getResourcePath",
    "params",
    "setResourcePath",
    "path",
    "hasCustomChartsDataProcessor",
    "processChartsData",
    "data",
    "write",
    "address",
    "value",
    "options",
    "getLastError",
    "restart",
    "full",
    "terminate",
    "update",
    "json",
    "record",
    "type",
    "showError",
    "message",
    "args",
    "cv",
    "io",
    "IClient"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/client/source/class/cv/io/IClient.js"
  ],
  "sourcesContent": [
    "/**\n * Interface all CometVisu-Client must implement.\n */\nqx.Interface.define('cv.io.IClient', {\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    connected: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeConnected'\n    },\n\n    /**\n     * The server the client is currently speaking to\n     */\n    server: {\n      check: 'String',\n      nullable: true,\n      event: 'changedServer'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /**\n     * Returns the current backend configuration\n     * @return {Map}\n     */\n    getBackend() {},\n\n    /**\n     * Returns the backend type\n     * @return {string} e.g. openhab, mqtt or knxd\n     */\n    getType() {},\n\n    /**\n     * Returns true, when the backend provides a special data provider for this kind of data\n     * @param name {String}\n     * @return {Boolean}\n     */\n    hasProvider(name) {},\n\n    /**\n     * URL to the provided data\n     * @param name\n     * @return {String}\n     */\n    getProviderUrl(name) {},\n\n    /**\n     * Return the provided data directly from client, return null when not implemented\n     * @param name {String}\n     * @param format {String} 'monaco' for texteditor and 'dp' for Tree editor\n     * @return {Promise<variant>|null}\n     */\n    getProviderData: function (name, format) {},\n\n    /**\n     * Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.\n     * @param name {String}\n     * @param format {String} 'monaco' for texteditor and 'dp' for Tree editor\n     */\n    getProviderConvertFunction(name, format) {},\n\n    /**\n     * Set a subset of addresses the client should request initially (e.g. the ones one the start page).\n     * This can be used to increase the init state loading speed by sending an initial request with a smaller\n     * subset of addresses to the backend and send the rest later.\n     * @param addresses {Array}\n     */\n    setInitialAddresses(addresses) {},\n\n    /**\n     * Subscribe to the addresses in the parameter. The second parameter\n     * (filter) is optional\n     *\n     * @param addresses {Array?} addresses to subscribe to\n     * @param filters {Array?} Filters\n     *\n     */\n    subscribe(addresses, filters) {},\n\n    /**\n     * This function starts the communication by a login and then runs the\n     * ongoing communication task\n     *\n     * @param loginOnly {Boolean} if true only login and backend configuration, no subscription\n     *                            to addresses (default: false)\n     * @param credentials {Map} map with \"username\" and \"password\" (optional)\n     * @param callback {Function} call this function when login is done\n     * @param context {Object} context for the callback (this)\n     *\n     */\n    login(loginOnly, credentials, callback, context) {},\n\n    /**\n     * Authorize a Request by adding the necessary headers.\n     * @param req {qx.io.request.Xhr}\n     */\n    authorize(req) {},\n\n    /**\n     * return the relative path to a resource on the currently used backend\n     *\n     * @param name {String} Name of the resource (e.g. login, read, write, chart)\n     * @param params {Map?} optional data needed to generate the resource path\n     * @return {String|null} relative path to the resource, returns `null` when the backend does not provide that resource\n     */\n    getResourcePath(name, params) {},\n\n    /**\n     * Set the relative path to a resource on the currently used backend\n     * @param name {String} Name of the resource (e.g. login, read, write, chart)\n     * @param path {String} relative path to the resource\n     */\n    setResourcePath(name, path) {},\n\n    /**\n     * This client provides an own processor for charts data\n     * @return {Boolean}\n     */\n    hasCustomChartsDataProcessor() {},\n\n    /**\n     * For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle\n     * @param data {var}\n     */\n    processChartsData(data) {},\n\n    /**\n     * This function sends a value\n     * @param address {String} address to send the value to\n     * @param value {String} value to send\n     * @param options {Object} optional options, depending on backend\n     *\n     */\n    write(address, value, options) {},\n\n    /**\n     * Get the last recorded error\n     *\n     * @return {{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}\n     */\n    getLastError() {},\n\n    /**\n     * Restart the connection\n     * @param full\n     */\n    restart(full) {},\n\n    /**\n     * Called directly before the page gets unloaded. Can be used to disconnect correctly.\n     */\n    terminate() {},\n    /**\n     * Handle the incoming state updates. This method is not implemented by the client itself.\n     * It is injected by the project using the client.\n     * @param json\n     */\n    update(json) {},\n\n    /**\n     * Can be overridden to record client communication with backend\n     * @param type {String} type of event to record\n     * @param data {Object} data to record\n     */\n    record(type, data) {},\n\n    /**\n     * Can be overridden to provide an error handler for client errors\n     * @param type {Number} one of cv.io.Client.ERROR_CODES\n     * @param message {String} detailed error message\n     * @param args\n     */\n    showError(type, message, args) {}\n  }\n});\n"
  ],
  "mappings": "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"
}