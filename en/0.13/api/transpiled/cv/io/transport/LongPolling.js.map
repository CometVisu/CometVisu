{
  "version": 3,
  "names": [
    "_readOnlyError",
    "r",
    "TypeError",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "client",
    "watchdog",
    "cv",
    "io",
    "Watchdog",
    "setClient",
    "members",
    "doRestart",
    "xhr",
    "lastIndex",
    "retryCounter",
    "retryServerErrorCounter",
    "sessionId",
    "running",
    "handleSession",
    "args",
    "connect",
    "json",
    "getResponse",
    "s",
    "prototype",
    "hasOwnProperty",
    "call",
    "error",
    "showError",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "version",
    "v",
    "split",
    "parseInt",
    "data",
    "successCallback",
    "initialAddresses",
    "length",
    "buildRequest",
    "handleReadStart",
    "handleRead",
    "__startReading",
    "start",
    "callback",
    "_data",
    "_callback",
    "t",
    "options",
    "beforeSend",
    "bind",
    "listeners",
    "handleError",
    "doRequest",
    "getResourcePath",
    "Array",
    "slice",
    "arguments",
    "setDataReceived",
    "delay",
    "Math",
    "pow",
    "info",
    "concat",
    "isActive",
    "event",
    "Timer",
    "once",
    "ping",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "i",
    "d",
    "readResendHeaderValues",
    "update",
    "setConnected",
    "url",
    "getUrl",
    "shift",
    "getQueryString",
    "setUrl",
    "send",
    "diffAddresses",
    "addresses",
    "includes",
    "push",
    "removeListener",
    "addListener",
    "Environment",
    "select",
    "ev",
    "req",
    "getTarget",
    "status",
    "getStatus",
    "indexOf",
    "backend",
    "maxRetries",
    "serverErrorHandled",
    "restart",
    "getReadyState",
    "getStatusText",
    "jquery",
    "str",
    "excptObj",
    "readyState",
    "headerName",
    "resendHeaders",
    "undefined",
    "setRequestHeader",
    "headers",
    "getResponseHeader",
    "isConnectionRunning",
    "doFullReload",
    "abort",
    "stop",
    "hooks",
    "onClose",
    "transport",
    "LongPolling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/client/source/class/cv/io/transport/LongPolling.js"
  ],
  "sourcesContent": [
    "/* LongPolling.js\n *\n * copyright (c) 2010-2016, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n'use strict';\n\nqx.Class.define('cv.io.transport.LongPolling', {\n  extend: qx.core.Object,\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  /**\n   *\n   * @param client {cv.io.Client}\n   */\n  construct(client) {\n    this.client = client;\n    this.watchdog = new cv.io.Watchdog();\n    this.watchdog.setClient(client);\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    /** @type {cv.io.Watchdog} */\n    watchdog: null,\n    doRestart: false, // are we currently in a restart, e.g. due to the watchdog?\n    xhr: null, // the ongoing AJAX request\n    lastIndex: -1, // index returned by the last request\n    retryCounter: 0, // count the number of retries (reset with each valid response)\n    retryServerErrorCounter: 0, // count the number of successive temporary server errors\n    sessionId: null,\n    /** @type {cv.io.Client} */\n    client: null,\n    running: null,\n\n    /**\n     * This function gets called once the communication is established\n     * and this.client information is available.\n     *\n     * @param args {Array} arguments from the XHR response callback\n     * @param connect {Boolean} whether to start the connection or not\n     */\n    handleSession(args, connect) {\n      const json = this.client.getResponse(args);\n      this.sessionId = json.s;\n      if (!Object.prototype.hasOwnProperty.call(json, 'v')) {\n        this.error('CometVisu protocol error: missing protocol version');\n        this.client.showError(cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION, json);\n      } else {\n        this.version = json.v.split('.', 3);\n\n        if (parseInt(this.version[0]) > 0 || parseInt(this.version[1]) > 1) {\n          this.error('ERROR CometVisu Client: too new protocol version (' + json.v + ') used!');\n        }\n        if (connect) {\n          this.connect();\n        }\n      }\n    },\n\n    connect() {\n      this.running = true;\n      // send first request\n\n      let data = [];\n      let successCallback = null;\n      if (this.client.initialAddresses.length) {\n        data = this.client.buildRequest(this.client.initialAddresses);\n        successCallback = this.handleReadStart;\n      } else {\n        // old behaviour -> start full query\n        data = this.client.buildRequest();\n        successCallback = this.handleRead;\n      }\n      this.__startReading(data, successCallback);\n      this.watchdog.start(5);\n    },\n\n    __startReading(data, callback) {\n      data ??= this.client.buildRequest();\n      callback ??= this.handleRead;\n      data.t = 0;\n      const options = {\n        beforeSend: this.beforeSend.bind(this),\n        listeners: {\n          error: this.handleError\n        }\n      };\n\n      this.xhr = this.client.doRequest(this.client.getResourcePath('read'), data, callback, this, options);\n    },\n\n    /**\n     * This function gets called once the communication is established\n     * and this.client information is available\n     */\n    handleRead() {\n      const json = this.client.getResponse(Array.prototype.slice.call(arguments, 0));\n\n      if (this.doRestart || (!json && this.lastIndex === -1)) {\n        this.client.setDataReceived(false);\n        if (this.running) {\n          // retry initial request\n          const delay = 100 * Math.pow(this.retryCounter, 2);\n          this.retryCounter++;\n          if (this.doRestart) {\n            // planned restart, only inform user\n            this.info(`restarting XHR read requests in ${delay} ms as planned`);\n          } else {\n            this.info(`restarting XHR read requests in ${delay} ms as forced to`);\n          }\n          if (!this.watchdog.isActive()) {\n            // watchdog has been stopped in the abort function -> restart it\n            this.watchdog.start(5);\n          }\n          qx.event.Timer.once(\n            function () {\n              this.__startReading();\n              this.watchdog.ping(true);\n            },\n            this,\n            delay\n          );\n        }\n        return;\n      }\n\n      let data;\n      if (json && !this.doRestart) {\n        if (!Object.prototype.hasOwnProperty.call(json, 'i')) {\n          this.error('CometVisu protocol error: backend responded to a read request without an \"i\"-parameter');\n\n          this.client.showError(cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I, json);\n\n          return;\n        }\n        this.lastIndex = json.i;\n        data = json.d;\n        this.readResendHeaderValues();\n        this.client.update(data);\n        this.retryCounter = 0;\n        this.client.setDataReceived(true);\n        this.client.setConnected(true);\n      }\n\n      this.retryServerErrorCounter = 0; // server has successfully responded\n      if (this.running) {\n        // keep the requests going\n        this.retryCounter++;\n        data = this.client.buildRequest();\n        data.i = this.lastIndex;\n        const url = this.xhr.getUrl().split('?').shift() + '?' + this.client.getQueryString(data);\n        this.xhr.setUrl(url);\n        this.xhr.send();\n        this.watchdog.ping();\n      }\n    },\n\n    handleReadStart() {\n      const json = this.client.getResponse(Array.prototype.slice.call(arguments, 0));\n\n      if (!json && this.lastIndex === -1) {\n        this.client.setDataReceived(false);\n        if (this.running) {\n          // retry initial request\n          this.xhr.send();\n          this.watchdog.ping();\n        }\n        return;\n      }\n      if (json && !this.doRestart) {\n        this.readResendHeaderValues();\n        this.client.update(json.d);\n        this.client.setDataReceived(true);\n        this.client.setConnected(true);\n      }\n      this.retryServerErrorCounter = 0; // server has successfully responded\n      if (this.running) {\n        // keep the requests going, but only\n        // request\n        // addresses-startPageAddresses\n        const diffAddresses = [];\n        for (const i = 0; i < this.client.addresses.length; i++) {\n          if (!this.client.initialAddresses.includes(this.client.addresses[i])) {\n            diffAddresses.push(this.client.addresses[i]);\n          }\n        }\n        const data = this.client.buildRequest(diffAddresses);\n        data.t = 0;\n        const url = this.xhr.getUrl().split('?').shift() + '?' + this.client.getQueryString(data);\n        this.xhr.setUrl(url);\n        this.xhr.removeListener('success', this.handleReadStart, this);\n        this.xhr.addListener('success', this.handleRead, this);\n        this.xhr.send();\n        this.watchdog.ping();\n      }\n    },\n\n    /**\n     * This function gets called on an error\n     *\n     *\n     * @param ev {Event}\n     */\n    handleError: qx.core.Environment.select('cv.xhr', {\n      qx(ev) {\n        const req = ev.getTarget();\n        const status = req.getStatus();\n        // check for temporary server errors and retry a few times\n        if (\n          [408, 444, 499, 502, 503, 504].indexOf(status) >= 0 &&\n          this.retryServerErrorCounter < this.client.backend.maxRetries\n        ) {\n          this.info(`Temporary connection problem (status: ${status}) - retry count: ${this.retryServerErrorCounter}`);\n\n          this.retryServerErrorCounter++;\n          req.serverErrorHandled = true;\n          this.restart();\n          return;\n        }\n        // ignore error when connection is irrelevant\n        if (this.running && req.getReadyState() !== 4 && !this.doRestart && status !== 0) {\n          this.error('Error! Type: \"' + req.getResponse() + '\" readyState: ' + req.getStatusText());\n          this.client.setConnected(false);\n        }\n      },\n      jquery(xhr, str, excptObj) {\n        // ignore error when connection is irrelevant\n        if (this.running && xhr.readyState !== 4 && !this.doRestart && xhr.status !== 0) {\n          let readyState = 'UNKNOWN';\n          switch (xhr.readyState) {\n            case 0:\n              readyState = 'UNINITIALIZED';\n              break;\n            case 1:\n              readyState = 'LOADING';\n              break;\n            case 2:\n              readyState = 'LOADED';\n              break;\n            case 3:\n              readyState = 'INTERACTIVE';\n              break;\n            case 4:\n              readyState = 'COMPLETED';\n              break;\n          }\n\n          this.error('Error! Type: \"' + str + '\" ExceptionObject: \"' + excptObj + '\" readyState: ' + readyState);\n\n          this.client.setConnected(false);\n        }\n      }\n    }),\n\n    /**\n     * manipulates the header of the current ajax query before it will\n     * be sent to the server\n     *\n     * @param xhr {Object} the native XHR object\n     *\n     */\n    beforeSend(xhr) {\n      for (const headerName in this.resendHeaders) {\n        if (this.resendHeaders[headerName] !== undefined) {\n          xhr.setRequestHeader(headerName, this.resendHeaders[headerName]);\n        }\n      }\n      for (const headerName in this.headers) {\n        if (this.headers[headerName] !== undefined) {\n          xhr.setRequestHeader(headerName, this.headers[headerName]);\n        }\n      }\n    },\n\n    /**\n     * read the header values of a response and stores them to the\n     * resendHeaders array\n     */\n    readResendHeaderValues() {\n      for (const headerName in this.resendHeaders) {\n        this.resendHeaders[headerName] = this.xhr.getResponseHeader(headerName);\n      }\n    },\n\n    /**\n     * Check if the connection is still running.\n     */\n    isConnectionRunning() {\n      return true;\n    },\n\n    /**\n     * Restart the read request, e.g. when the watchdog kicks in\n     *\n     * @param doFullReload {Boolean} reload all data and not only restart connection\n     */\n    restart(doFullReload) {\n      if (doFullReload) {\n        this.lastIndex = -1; // reload all data\n      }\n      this.doRestart = true;\n      this.abort();\n      this.handleRead(); // restart\n      this.doRestart = false;\n    },\n\n    /**\n     * Abort the read request properly\n     *\n     */\n    abort() {\n      this.watchdog.stop();\n      if (this.xhr && this.xhr.abort) {\n        this.xhr.abort();\n        this.xhr = null;\n\n        if (this.client.backend && this.client.backend.hooks.onClose) {\n          this.client.backend.hooks.onClose.bind(this);\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAAC,SAAAA,eAAAC,CAAA,cAAAC,SAAA,OAAAD,CAAA;AAAA;EAAA,IAAAE,aAAA;IAAA;MAAA;QAAA;QAAA;QAAA;MAAA;MAAA;QAAA;QAAA;MAAA;MAAA;QAAA;MAAA;MAAA;QAAA;MAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;QAAA;UAAA;QAAA;MAAA;IAAA;EAAA;EAlBbC,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACH,aAAa,CAAC;EAoBhDC,EAAE,CAACG,KAAK,CAACC,MAAM,CAAC,6BAA6B,EAAE;IAC7CC,MAAM,EAAEL,EAAE,CAACM,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;AACA;IACE;AACF;AACA;AACA;IACEC,SAAS,WAATA,SAASA,CAACC,MAAM,EAAE;MAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACC,QAAQ,GAAG,IAAIC,EAAE,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC;MACpC,IAAI,CAACH,QAAQ,CAACI,SAAS,CAACL,MAAM,CAAC;IACjC,CAAC;IAED;AACF;AACA;AACA;AACA;IACEM,OAAO,EAAE;MACP;MACAL,QAAQ,EAAE,IAAI;MACdM,SAAS,EAAE,KAAK;MAAE;MAClBC,GAAG,EAAE,IAAI;MAAE;MACXC,SAAS,EAAE,CAAC,CAAC;MAAE;MACfC,YAAY,EAAE,CAAC;MAAE;MACjBC,uBAAuB,EAAE,CAAC;MAAE;MAC5BC,SAAS,EAAE,IAAI;MACf;MACAZ,MAAM,EAAE,IAAI;MACZa,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,WAAbA,aAAaA,CAACC,IAAI,EAAEC,OAAO,EAAE;QAC3B,IAAMC,IAAI,GAAG,IAAI,CAACjB,MAAM,CAACkB,WAAW,CAACH,IAAI,CAAC;QAC1C,IAAI,CAACH,SAAS,GAAGK,IAAI,CAACE,CAAC;QACvB,IAAI,CAACrB,MAAM,CAACsB,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,IAAI,EAAE,GAAG,CAAC,EAAE;UACpD,IAAI,CAACM,KAAK,CAAC,oDAAoD,CAAC;UAChE,IAAI,CAACvB,MAAM,CAACwB,SAAS,CAACtB,EAAE,CAACC,EAAE,CAACsB,MAAM,CAACC,WAAW,CAACC,wBAAwB,EAAEV,IAAI,CAAC;QAChF,CAAC,MAAM;UACL,IAAI,CAACW,OAAO,GAAGX,IAAI,CAACY,CAAC,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;UAEnC,IAAIC,QAAQ,CAAC,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIG,QAAQ,CAAC,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YAClE,IAAI,CAACL,KAAK,CAAC,oDAAoD,GAAGN,IAAI,CAACY,CAAC,GAAG,SAAS,CAAC;UACvF;UACA,IAAIb,OAAO,EAAE;YACX,IAAI,CAACA,OAAO,CAAC,CAAC;UAChB;QACF;MACF,CAAC;MAEDA,OAAO,WAAPA,OAAOA,CAAA,EAAG;QACR,IAAI,CAACH,OAAO,GAAG,IAAI;QACnB;;QAEA,IAAImB,IAAI,GAAG,EAAE;QACb,IAAIC,eAAe,GAAG,IAAI;QAC1B,IAAI,IAAI,CAACjC,MAAM,CAACkC,gBAAgB,CAACC,MAAM,EAAE;UACvCH,IAAI,GAAG,IAAI,CAAChC,MAAM,CAACoC,YAAY,CAAC,IAAI,CAACpC,MAAM,CAACkC,gBAAgB,CAAC;UAC7DD,eAAe,GAAG,IAAI,CAACI,eAAe;QACxC,CAAC,MAAM;UACL;UACAL,IAAI,GAAG,IAAI,CAAChC,MAAM,CAACoC,YAAY,CAAC,CAAC;UACjCH,eAAe,GAAG,IAAI,CAACK,UAAU;QACnC;QACA,IAAI,CAACC,SAAc,CAACP,IAAI,EAAEC,eAAe,CAAC;QAC1C,IAAI,CAAChC,QAAQ,CAACuC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC;MAEDD,SAAc,WAAdA,SAAcA,CAACP,IAAI,EAAES,QAAQ,EAAE;QAAA,IAAAC,KAAA,EAAAC,SAAA;QAC7B,CAAAD,KAAA,GAAAV,IAAI,cAAAU,KAAA,cAAAA,KAAA,GAAJV,IAAI,GAAK,IAAI,CAAChC,MAAM,CAACoC,YAAY,CAAC,CAAC;QACnC,CAAAO,SAAA,GAAAF,QAAQ,cAAAE,SAAA,cAAAA,SAAA,GAARF,QAAQ,GAAK,IAAI,CAACH,UAAU;QAC5BN,IAAI,CAACY,CAAC,GAAG,CAAC;QACV,IAAMC,OAAO,GAAG;UACdC,UAAU,EAAE,IAAI,CAACA,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;UACtCC,SAAS,EAAE;YACTzB,KAAK,EAAE,IAAI,CAAC0B;UACd;QACF,CAAC;QAED,IAAI,CAACzC,GAAG,GAAG,IAAI,CAACR,MAAM,CAACkD,SAAS,CAAC,IAAI,CAAClD,MAAM,CAACmD,eAAe,CAAC,MAAM,CAAC,EAAEnB,IAAI,EAAES,QAAQ,EAAE,IAAI,EAAEI,OAAO,CAAC;MACtG,CAAC;MAED;AACJ;AACA;AACA;MACIP,UAAU,WAAVA,UAAUA,CAAA,EAAG;QACX,IAAMrB,IAAI,GAAG,IAAI,CAACjB,MAAM,CAACkB,WAAW,CAACkC,KAAK,CAAChC,SAAS,CAACiC,KAAK,CAAC/B,IAAI,CAACgC,SAAS,EAAE,CAAC,CAAC,CAAC;QAE9E,IAAI,IAAI,CAAC/C,SAAS,IAAK,CAACU,IAAI,IAAI,IAAI,CAACR,SAAS,KAAK,CAAC,CAAE,EAAE;UACtD,IAAI,CAACT,MAAM,CAACuD,eAAe,CAAC,KAAK,CAAC;UAClC,IAAI,IAAI,CAAC1C,OAAO,EAAE;YAChB;YACA,IAAM2C,KAAK,GAAG,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAChD,YAAY,EAAE,CAAC,CAAC;YAClD,IAAI,CAACA,YAAY,EAAE;YACnB,IAAI,IAAI,CAACH,SAAS,EAAE;cAClB;cACA,IAAI,CAACoD,IAAI,oCAAAC,MAAA,CAAoCJ,KAAK,mBAAgB,CAAC;YACrE,CAAC,MAAM;cACL,IAAI,CAACG,IAAI,oCAAAC,MAAA,CAAoCJ,KAAK,qBAAkB,CAAC;YACvE;YACA,IAAI,CAAC,IAAI,CAACvD,QAAQ,CAAC4D,QAAQ,CAAC,CAAC,EAAE;cAC7B;cACA,IAAI,CAAC5D,QAAQ,CAACuC,KAAK,CAAC,CAAC,CAAC;YACxB;YACAjD,EAAE,CAACuE,KAAK,CAACC,KAAK,CAACC,IAAI,CACjB,YAAY;cACV,IAAI,CAACzB,SAAc,CAAC,CAAC;cACrB,IAAI,CAACtC,QAAQ,CAACgE,IAAI,CAAC,IAAI,CAAC;YAC1B,CAAC,EACD,IAAI,EACJT,KACF,CAAC;UACH;UACA;QACF;QAEA,IAAIxB,IAAI;QACR,IAAIf,IAAI,IAAI,CAAC,IAAI,CAACV,SAAS,EAAE;UAC3B,IAAI,CAACT,MAAM,CAACsB,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,IAAI,EAAE,GAAG,CAAC,EAAE;YACpD,IAAI,CAACM,KAAK,CAAC,wFAAwF,CAAC;YAEpG,IAAI,CAACvB,MAAM,CAACwB,SAAS,CAACtB,EAAE,CAACC,EAAE,CAACsB,MAAM,CAACC,WAAW,CAACwC,wCAAwC,EAAEjD,IAAI,CAAC;YAE9F;UACF;UACA,IAAI,CAACR,SAAS,GAAGQ,IAAI,CAACkD,CAAC;UACvBnC,IAAI,GAAGf,IAAI,CAACmD,CAAC;UACb,IAAI,CAACC,sBAAsB,CAAC,CAAC;UAC7B,IAAI,CAACrE,MAAM,CAACsE,MAAM,CAACtC,IAAI,CAAC;UACxB,IAAI,CAACtB,YAAY,GAAG,CAAC;UACrB,IAAI,CAACV,MAAM,CAACuD,eAAe,CAAC,IAAI,CAAC;UACjC,IAAI,CAACvD,MAAM,CAACuE,YAAY,CAAC,IAAI,CAAC;QAChC;QAEA,IAAI,CAAC5D,uBAAuB,GAAG,CAAC,CAAC,CAAC;QAClC,IAAI,IAAI,CAACE,OAAO,EAAE;UAChB;UACA,IAAI,CAACH,YAAY,EAAE;UACnBsB,IAAI,GAAG,IAAI,CAAChC,MAAM,CAACoC,YAAY,CAAC,CAAC;UACjCJ,IAAI,CAACmC,CAAC,GAAG,IAAI,CAAC1D,SAAS;UACvB,IAAM+D,GAAG,GAAG,IAAI,CAAChE,GAAG,CAACiE,MAAM,CAAC,CAAC,CAAC3C,KAAK,CAAC,GAAG,CAAC,CAAC4C,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC1E,MAAM,CAAC2E,cAAc,CAAC3C,IAAI,CAAC;UACzF,IAAI,CAACxB,GAAG,CAACoE,MAAM,CAACJ,GAAG,CAAC;UACpB,IAAI,CAAChE,GAAG,CAACqE,IAAI,CAAC,CAAC;UACf,IAAI,CAAC5E,QAAQ,CAACgE,IAAI,CAAC,CAAC;QACtB;MACF,CAAC;MAED5B,eAAe,WAAfA,eAAeA,CAAA,EAAG;QAChB,IAAMpB,IAAI,GAAG,IAAI,CAACjB,MAAM,CAACkB,WAAW,CAACkC,KAAK,CAAChC,SAAS,CAACiC,KAAK,CAAC/B,IAAI,CAACgC,SAAS,EAAE,CAAC,CAAC,CAAC;QAE9E,IAAI,CAACrC,IAAI,IAAI,IAAI,CAACR,SAAS,KAAK,CAAC,CAAC,EAAE;UAClC,IAAI,CAACT,MAAM,CAACuD,eAAe,CAAC,KAAK,CAAC;UAClC,IAAI,IAAI,CAAC1C,OAAO,EAAE;YAChB;YACA,IAAI,CAACL,GAAG,CAACqE,IAAI,CAAC,CAAC;YACf,IAAI,CAAC5E,QAAQ,CAACgE,IAAI,CAAC,CAAC;UACtB;UACA;QACF;QACA,IAAIhD,IAAI,IAAI,CAAC,IAAI,CAACV,SAAS,EAAE;UAC3B,IAAI,CAAC8D,sBAAsB,CAAC,CAAC;UAC7B,IAAI,CAACrE,MAAM,CAACsE,MAAM,CAACrD,IAAI,CAACmD,CAAC,CAAC;UAC1B,IAAI,CAACpE,MAAM,CAACuD,eAAe,CAAC,IAAI,CAAC;UACjC,IAAI,CAACvD,MAAM,CAACuE,YAAY,CAAC,IAAI,CAAC;QAChC;QACA,IAAI,CAAC5D,uBAAuB,GAAG,CAAC,CAAC,CAAC;QAClC,IAAI,IAAI,CAACE,OAAO,EAAE;UAChB;UACA;UACA;UACA,IAAMiE,aAAa,GAAG,EAAE;UACxB,KAAK,IAAMX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnE,MAAM,CAAC+E,SAAS,CAAC5C,MAAM,GAAEgC,CAAC,EAAAhF,cAAA,OAAI;YACvD,IAAI,CAAC,IAAI,CAACa,MAAM,CAACkC,gBAAgB,CAAC8C,QAAQ,CAAC,IAAI,CAAChF,MAAM,CAAC+E,SAAS,CAACZ,CAAC,CAAC,CAAC,EAAE;cACpEW,aAAa,CAACG,IAAI,CAAC,IAAI,CAACjF,MAAM,CAAC+E,SAAS,CAACZ,CAAC,CAAC,CAAC;YAC9C;UACF;UACA,IAAMnC,IAAI,GAAG,IAAI,CAAChC,MAAM,CAACoC,YAAY,CAAC0C,aAAa,CAAC;UACpD9C,IAAI,CAACY,CAAC,GAAG,CAAC;UACV,IAAM4B,GAAG,GAAG,IAAI,CAAChE,GAAG,CAACiE,MAAM,CAAC,CAAC,CAAC3C,KAAK,CAAC,GAAG,CAAC,CAAC4C,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC1E,MAAM,CAAC2E,cAAc,CAAC3C,IAAI,CAAC;UACzF,IAAI,CAACxB,GAAG,CAACoE,MAAM,CAACJ,GAAG,CAAC;UACpB,IAAI,CAAChE,GAAG,CAAC0E,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC7C,eAAe,EAAE,IAAI,CAAC;UAC9D,IAAI,CAAC7B,GAAG,CAAC2E,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC7C,UAAU,EAAE,IAAI,CAAC;UACtD,IAAI,CAAC9B,GAAG,CAACqE,IAAI,CAAC,CAAC;UACf,IAAI,CAAC5E,QAAQ,CAACgE,IAAI,CAAC,CAAC;QACtB;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIhB,WAAW,EAAE1D,EAAE,CAACM,IAAI,CAACuF,WAAW,CAACC,MAAM,CAAC,QAAQ,EAAE;QAChD9F,EAAE,WAAFA,EAAEA,CAAC+F,EAAE,EAAE;UACL,IAAMC,GAAG,GAAGD,EAAE,CAACE,SAAS,CAAC,CAAC;UAC1B,IAAMC,MAAM,GAAGF,GAAG,CAACG,SAAS,CAAC,CAAC;UAC9B;UACA,IACE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,OAAO,CAACF,MAAM,CAAC,IAAI,CAAC,IACnD,IAAI,CAAC9E,uBAAuB,GAAG,IAAI,CAACX,MAAM,CAAC4F,OAAO,CAACC,UAAU,EAC7D;YACA,IAAI,CAAClC,IAAI,0CAAAC,MAAA,CAA0C6B,MAAM,uBAAA7B,MAAA,CAAoB,IAAI,CAACjD,uBAAuB,CAAE,CAAC;YAE5G,IAAI,CAACA,uBAAuB,EAAE;YAC9B4E,GAAG,CAACO,kBAAkB,GAAG,IAAI;YAC7B,IAAI,CAACC,OAAO,CAAC,CAAC;YACd;UACF;UACA;UACA,IAAI,IAAI,CAAClF,OAAO,IAAI0E,GAAG,CAACS,aAAa,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAACzF,SAAS,IAAIkF,MAAM,KAAK,CAAC,EAAE;YAChF,IAAI,CAAClE,KAAK,CAAC,gBAAgB,GAAGgE,GAAG,CAACrE,WAAW,CAAC,CAAC,GAAG,gBAAgB,GAAGqE,GAAG,CAACU,aAAa,CAAC,CAAC,CAAC;YACzF,IAAI,CAACjG,MAAM,CAACuE,YAAY,CAAC,KAAK,CAAC;UACjC;QACF,CAAC;QACD2B,MAAM,WAANA,MAAMA,CAAC1F,GAAG,EAAE2F,GAAG,EAAEC,QAAQ,EAAE;UACzB;UACA,IAAI,IAAI,CAACvF,OAAO,IAAIL,GAAG,CAAC6F,UAAU,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC9F,SAAS,IAAIC,GAAG,CAACiF,MAAM,KAAK,CAAC,EAAE;YAC/E,IAAIY,UAAU,GAAG,SAAS;YAC1B,QAAQ7F,GAAG,CAAC6F,UAAU;cACpB,KAAK,CAAC;gBACJA,UAAU,GAAG,eAAe;gBAC5B;cACF,KAAK,CAAC;gBACJA,UAAU,GAAG,SAAS;gBACtB;cACF,KAAK,CAAC;gBACJA,UAAU,GAAG,QAAQ;gBACrB;cACF,KAAK,CAAC;gBACJA,UAAU,GAAG,aAAa;gBAC1B;cACF,KAAK,CAAC;gBACJA,UAAU,GAAG,WAAW;gBACxB;YACJ;YAEA,IAAI,CAAC9E,KAAK,CAAC,gBAAgB,GAAG4E,GAAG,GAAG,sBAAsB,GAAGC,QAAQ,GAAG,gBAAgB,GAAGC,UAAU,CAAC;YAEtG,IAAI,CAACrG,MAAM,CAACuE,YAAY,CAAC,KAAK,CAAC;UACjC;QACF;MACF,CAAC,CAAC;MAEF;AACJ;AACA;AACA;AACA;AACA;AACA;MACIzB,UAAU,WAAVA,UAAUA,CAACtC,GAAG,EAAE;QACd,KAAK,IAAM8F,UAAU,IAAI,IAAI,CAACC,aAAa,EAAE;UAC3C,IAAI,IAAI,CAACA,aAAa,CAACD,UAAU,CAAC,KAAKE,SAAS,EAAE;YAChDhG,GAAG,CAACiG,gBAAgB,CAACH,UAAU,EAAE,IAAI,CAACC,aAAa,CAACD,UAAU,CAAC,CAAC;UAClE;QACF;QACA,KAAK,IAAMA,WAAU,IAAI,IAAI,CAACI,OAAO,EAAE;UACrC,IAAI,IAAI,CAACA,OAAO,CAACJ,WAAU,CAAC,KAAKE,SAAS,EAAE;YAC1ChG,GAAG,CAACiG,gBAAgB,CAACH,WAAU,EAAE,IAAI,CAACI,OAAO,CAACJ,WAAU,CAAC,CAAC;UAC5D;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;MACIjC,sBAAsB,WAAtBA,sBAAsBA,CAAA,EAAG;QACvB,KAAK,IAAMiC,UAAU,IAAI,IAAI,CAACC,aAAa,EAAE;UAC3C,IAAI,CAACA,aAAa,CAACD,UAAU,CAAC,GAAG,IAAI,CAAC9F,GAAG,CAACmG,iBAAiB,CAACL,UAAU,CAAC;QACzE;MACF,CAAC;MAED;AACJ;AACA;MACIM,mBAAmB,WAAnBA,mBAAmBA,CAAA,EAAG;QACpB,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIb,OAAO,WAAPA,OAAOA,CAACc,YAAY,EAAE;QACpB,IAAIA,YAAY,EAAE;UAChB,IAAI,CAACpG,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB;QACA,IAAI,CAACF,SAAS,GAAG,IAAI;QACrB,IAAI,CAACuG,KAAK,CAAC,CAAC;QACZ,IAAI,CAACxE,UAAU,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC/B,SAAS,GAAG,KAAK;MACxB,CAAC;MAED;AACJ;AACA;AACA;MACIuG,KAAK,WAALA,KAAKA,CAAA,EAAG;QACN,IAAI,CAAC7G,QAAQ,CAAC8G,IAAI,CAAC,CAAC;QACpB,IAAI,IAAI,CAACvG,GAAG,IAAI,IAAI,CAACA,GAAG,CAACsG,KAAK,EAAE;UAC9B,IAAI,CAACtG,GAAG,CAACsG,KAAK,CAAC,CAAC;UAChB,IAAI,CAACtG,GAAG,GAAG,IAAI;UAEf,IAAI,IAAI,CAACR,MAAM,CAAC4F,OAAO,IAAI,IAAI,CAAC5F,MAAM,CAAC4F,OAAO,CAACoB,KAAK,CAACC,OAAO,EAAE;YAC5D,IAAI,CAACjH,MAAM,CAAC4F,OAAO,CAACoB,KAAK,CAACC,OAAO,CAAClE,IAAI,CAAC,IAAI,CAAC;UAC9C;QACF;MACF;IACF;EACF,CAAC,CAAC;EAxVF7C,EAAE,CAACC,EAAE,CAAC+G,SAAS,CAACC,WAAW,CAAC7H,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}