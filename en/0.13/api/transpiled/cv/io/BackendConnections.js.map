{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "__clients",
    "__activeChangedTimer",
    "__disconnectTimer",
    "__hasBeenConnected",
    "__activeChangeListenerId",
    "initBackendClient",
    "cv",
    "Config",
    "testMode",
    "window",
    "cvTestMode",
    "addBackendClient",
    "backendName",
    "URL",
    "backend",
    "configSettings",
    "server",
    "split",
    "backendKnxdUrl",
    "backendMQTTUrl",
    "backendOpenHABUrl",
    "name",
    "backendUrl",
    "source",
    "Error",
    "dispose",
    "client",
    "Application",
    "createClient",
    "configuredIn",
    "model",
    "data",
    "Model",
    "getInstance",
    "addListener",
    "ev",
    "getData",
    "updateFrom",
    "update",
    "reporting",
    "recordInstance",
    "report",
    "Record",
    "record",
    "p",
    "d",
    "BACKEND",
    "showError",
    "_handleClientError",
    "bind",
    "sentryEnabled",
    "Sentry",
    "configureScope",
    "scope",
    "setTag",
    "webServer",
    "getServer",
    "configServer",
    "_updateClientScope",
    "app",
    "core",
    "Init",
    "getApplication",
    "_onActiveChanged",
    "_checkBackendConnection",
    "removeClient",
    "hasClient",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "getClient",
    "system",
    "io",
    "System",
    "getDefaultBackendName",
    "initSystemBackend",
    "addressesToSubscribe",
    "getAddresses",
    "length",
    "subscribe",
    "startInitialRequest",
    "getOwnPropertyNames",
    "forEach",
    "enableAddressQueue",
    "setInitialAddresses",
    "structureController",
    "getInitialAddresses",
    "isActive",
    "isConnected",
    "log",
    "Logger",
    "debug",
    "restart",
    "event",
    "Timer",
    "terminate",
    "connected",
    "message",
    "topic",
    "title",
    "locale",
    "Manager",
    "tr",
    "severity",
    "unique",
    "deletable",
    "condition",
    "lastError",
    "getLastError",
    "Date",
    "now",
    "time",
    "url",
    "code",
    "text",
    "actions",
    "link",
    "action",
    "notifications",
    "Router",
    "dispatchMessage",
    "errorCode",
    "varargs",
    "Array",
    "slice",
    "arguments",
    "JSON",
    "stringify",
    "div",
    "document",
    "createElement",
    "innerText",
    "innerHTML",
    "notification",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "BackendConnections"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/BackendConnections.js"
  ],
  "sourcesContent": [
    "/* BackendConnections.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global factory for backend connections.\n */\nqx.Class.define('cv.io.BackendConnections', {\n  type: 'static',\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    __clients: {},\n    __activeChangedTimer: null,\n    __disconnectTimer: null,\n    __hasBeenConnected: false,\n    __activeChangeListenerId: null,\n\n    /**\n     * Initialize the {@link cv.io.Client} for backend communication\n     */\n    initBackendClient() {\n      if (cv.Config.testMode === true || window.cvTestMode === true) {\n        return this.addBackendClient('main', 'simulated');\n      }\n      let backendName = (\n        cv.Config.URL.backend ||\n        cv.Config.configSettings.backend ||\n        cv.Config.server.backend ||\n        'default'\n      ).split(',')[0];\n      const backendKnxdUrl =\n        cv.Config.URL.backendKnxdUrl || cv.Config.configSettings.backendKnxdUrl || cv.Config.server.backendKnxdUrl;\n      const backendMQTTUrl =\n        cv.Config.URL.backendMQTTUrl || cv.Config.configSettings.backendMQTTUrl || cv.Config.server.backendMQTTUrl;\n      const backendOpenHABUrl =\n        cv.Config.URL.backendOpenHABUrl ||\n        cv.Config.configSettings.backendOpenHABUrl ||\n        cv.Config.server.backendOpenHABUrl;\n\n      switch (backendName) {\n        case 'knxd':\n        case 'default':\n        default:\n          return this.addBackendClient('main', 'knxd', backendKnxdUrl, 'server');\n\n        case 'mqtt':\n          return this.addBackendClient('main', 'mqtt', backendMQTTUrl, 'server');\n\n        case 'openhab':\n        case 'openhab2':\n        case 'oh':\n        case 'oh2':\n          return this.addBackendClient('main', 'openhab', backendOpenHABUrl, 'server');\n      }\n    },\n\n    addBackendClient(name, type, backendUrl, source) {\n      if (name === 'system') {\n        throw Error('\"system\" is not allowed as a backend name');\n      }\n      if (this.__clients[name]) {\n        this.__clients[name].dispose();\n        delete this.__clients[name];\n      }\n      const client = cv.Application.createClient(type, backendUrl);\n      if (source) {\n        client.configuredIn = source;\n      }\n      this.__clients[name] = client;\n      const model = cv.data.Model.getInstance();\n      client.addListener('changeConnected', ev => {\n        const data = {};\n        // convert to internal state used for boolean values\n        data[`backend:${name}:connected`] = ev.getData() ? 1 : 0;\n        // this is a value the system backend\n        model.updateFrom('system', data);\n      });\n      client.update = data => model.updateFrom(name, data); // override clients update function\n      if (cv.Config.reporting) {\n        const recordInstance = cv.report.Record.getInstance();\n        client.record = function (p, d) {\n          recordInstance.record(cv.report.Record.BACKEND, p, d);\n        };\n      }\n      client.showError = this._handleClientError.bind(this);\n\n      if (cv.Config.sentryEnabled && window.Sentry) {\n        Sentry.configureScope(function (scope) {\n          scope.setTag('backend.' + name, type);\n          const webServer = client.getServer();\n          if (webServer) {\n            scope.setTag('server.backend.' + name, webServer);\n          }\n          if (name === 'main' && cv.Config.configServer) {\n            scope.setTag('server.web.main', cv.Config.configServer);\n          }\n        });\n        client.addListener('changedServer', () => this._updateClientScope(name));\n      }\n      if (!this.__activeChangeListenerId) {\n        const app = qx.core.Init.getApplication();\n        if (app) {\n          this.__activeChangeListenerId = app.addListener(\n            'changeActive',\n            this._onActiveChanged,\n            this\n          );\n        }\n      }\n\n      // show connection state in NotificationCenter\n      client.addListener('changeConnected', () => this._checkBackendConnection(name));\n\n      return client;\n    },\n\n    removeClient(client) {\n      for (let name in this.__clients) {\n        if (this.__clients[name] === client) {\n          delete this.__clients[name];\n          break;\n        }\n      }\n    },\n\n    /**\n     * Checks if a backend by that name is already registered\n     * @param name {String} name of the backend\n     * @return {boolean}\n     */\n    hasClient(name) {\n      return Object.prototype.hasOwnProperty.call(this.__clients, name);\n    },\n\n    /**\n     * Get the backend client by name, if the name is not set the default backend is used.\n     * Usually that is the backend client created by initBackendClient().\n     * @param backendName {String?} name of the backend\n     */\n    getClient(backendName) {\n      if (backendName === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      if (!backendName) {\n        backendName = cv.data.Model.getInstance().getDefaultBackendName();\n      }\n      if (!this.__clients[backendName] && cv.Config.testMode) {\n        // in testMode the client might not have been initialized yet\n        return this.addBackendClient('main', 'simulated');\n      }\n      return this.__clients[backendName];\n    },\n\n    initSystemBackend() {\n      // make sure that we have a \"system\" backend\n      if (!this.hasClient('system')) {\n        this.__clients.system = new cv.io.System();\n      }\n      const client = this.__clients.system;\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses('system');\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    /**\n     * Start retrieving data from backend\n     */\n    startInitialRequest() {\n      if (qx.core.Environment.get('qx.debug')) {\n        cv.report.Replay.start();\n      }\n      Object.getOwnPropertyNames(this.__clients).forEach(name => {\n        const client = this.getClient(name);\n        if (cv.Config.enableAddressQueue) {\n          // identify addresses on startpage\n          client.setInitialAddresses(cv.Application.structureController.getInitialAddresses(name));\n        }\n        const addressesToSubscribe = cv.data.Model.getInstance().getAddresses(name);\n        if (addressesToSubscribe.length !== 0) {\n          client.subscribe(addressesToSubscribe);\n        }\n      });\n    },\n\n    _onActiveChanged() {\n      const app = qx.core.Init.getApplication();\n      if (app.isActive()) {\n        if (this.__disconnectTimer) {\n          this.__disconnectTimer.dispose();\n          this.__disconnectTimer = null;\n        }\n        Object.getOwnPropertyNames(this.__clients).forEach(backendName => {\n          const client = this.__clients[backendName];\n          if (!client.isConnected() && this.__hasBeenConnected) {\n            // reconnect\n            qx.log.Logger.debug(this, `restarting ${backendName} backend connection`);\n\n            client.restart(true);\n          }\n        });\n\n        // wait for 3 seconds before checking the backend connection\n        if (!this.__activeChangedTimer) {\n          this.__activeChangedTimer = new qx.event.Timer(3000);\n          this.__activeChangedTimer.addListener('interval', () => {\n            if (app.isActive()) {\n              Object.getOwnPropertyNames(this.__clients).forEach(this._checkBackendConnection, this);\n            }\n            this.__activeChangedTimer.dispose();\n            this.__activeChangedTimer = null;\n          });\n        }\n        this.__activeChangedTimer.restart();\n      } else {\n        if (this.__activeChangedTimer) {\n          this.__activeChangedTimer.dispose();\n          this.__activeChangedTimer = null;\n        }\n        if (!this.__disconnectTimer) {\n          // disconnect after 60 secs\n          this.__disconnectTimer = new qx.event.Timer(60000);\n          this.__disconnectTimer.addListener('interval', () => {\n            Object.getOwnPropertyNames(this.__clients).forEach(name => {\n              const client = this.getClient(name);\n              if (client.isConnected()) {\n                client.terminate();\n              }\n            });\n            this.__disconnectTimer.dispose();\n            this.__disconnectTimer = null;\n          });\n        }\n        this.__disconnectTimer.restart();\n      }\n    },\n\n    _checkBackendConnection(name) {\n      const client = this.getClient(name);\n      const connected = client.isConnected();\n      const message = {\n        topic: 'cv.client.connection.' + name,\n        title: qx.locale.Manager.tr('Connection error'),\n        severity: 'urgent',\n        unique: true,\n        deletable: false,\n        condition: !connected && this.__hasBeenConnected && qx.core.Init.getApplication().isActive()\n      };\n\n      const lastError = client.getLastError();\n      if (!connected) {\n        if (lastError && Date.now() - lastError.time < 100) {\n          message.message = qx.locale.Manager.tr(\n            'Error requesting %1: %2 - %3.',\n            lastError.url,\n            lastError.code,\n            lastError.text\n          );\n        } else {\n          message.message = qx.locale.Manager.tr('Connection to backend \"%1\" is lost.', name);\n        }\n        message.actions = {\n          link: [\n            {\n              title: qx.locale.Manager.tr('Restart connection'),\n              action() {\n                client.restart();\n              }\n            }\n          ]\n        };\n      } else {\n        this.__hasBeenConnected = true;\n      }\n      cv.core.notifications.Router.dispatchMessage(message.topic, message);\n    },\n\n    _updateClientScope(name) {\n      const client = this.getClient(name);\n      Sentry.configureScope(function (scope) {\n        const webServer = client.getServer();\n        if (webServer) {\n          scope.setTag('server.backend.' + name, webServer);\n        }\n      });\n    },\n\n    _handleClientError(errorCode, varargs) {\n      varargs = Array.prototype.slice.call(arguments, 1);\n      varargs = JSON.stringify(varargs[0], null, 2);\n      // escape HTML:\n      let div = document.createElement('div');\n      div.innerText = varargs;\n      varargs = div.innerHTML;\n      let notification;\n      switch (errorCode) {\n        case cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to the %1Login%2 request: missing protocol version.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n\n        case cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to a %1read%2 request: Missing \"i\" value.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n      }\n\n      if (notification) {\n        cv.core.notifications.Router.dispatchMessage(notification.topic, notification);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}