{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "__clients",
    "__activeChangedTimer",
    "__disconnectTimer",
    "__hasBeenConnected",
    "__activeChangeListenerId",
    "__classListeners",
    "__clientClasses",
    "addClassLoadedListener",
    "className",
    "callback",
    "includes",
    "push",
    "registerClientClass",
    "name",
    "Clazz",
    "_iterator",
    "_createForOfIteratorHelper",
    "_step",
    "s",
    "n",
    "done",
    "cb",
    "value",
    "err",
    "e",
    "f",
    "isRegistered",
    "initBackendClients",
    "_ref",
    "_ref2",
    "_cv$Config$URL$backen",
    "_ref3",
    "_cv$Config$URL$backen2",
    "_ref4",
    "_cv$Config$URL$backen3",
    "_ref5",
    "_cv$Config$URL$backen4",
    "_cv$data$Model$getIns",
    "cv",
    "Config",
    "testMode",
    "window",
    "cvTestMode",
    "data",
    "Model",
    "getInstance",
    "setDefaultBackendName",
    "addBackendClient",
    "getDefaultBackendName",
    "backendNames",
    "URL",
    "backend",
    "configSettings",
    "server",
    "split",
    "backendKnxdUrl",
    "backendMQTTUrl",
    "backendOpenHABUrl",
    "defaultName",
    "defaultType",
    "defaultClient",
    "i",
    "length",
    "backendUrl",
    "source",
    "_this",
    "Error",
    "dispose",
    "client",
    "Application",
    "createClient",
    "configuredIn",
    "setName",
    "model",
    "addListener",
    "ev",
    "concat",
    "getData",
    "updateFrom",
    "update",
    "reporting",
    "recordInstance",
    "report",
    "Record",
    "record",
    "p",
    "d",
    "BACKEND",
    "showError",
    "_handleClientError",
    "bind",
    "sentryEnabled",
    "Sentry",
    "setTag",
    "webServer",
    "getServer",
    "configServer",
    "_updateClientScope",
    "app",
    "core",
    "Init",
    "getApplication",
    "_onActiveChanged",
    "_checkBackendConnection",
    "removeClient",
    "hasClient",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "getClient",
    "backendName",
    "system",
    "io",
    "System",
    "getClientByType",
    "getType",
    "getClients",
    "initSystemBackend",
    "addressesToSubscribe",
    "getAddresses",
    "subscribe",
    "startInitialRequests",
    "_this2",
    "getOwnPropertyNames",
    "forEach",
    "startInitialRequest",
    "enableAddressQueue",
    "setInitialAddresses",
    "structureController",
    "getInitialAddresses",
    "_this3",
    "isActive",
    "isConnected",
    "log",
    "Logger",
    "debug",
    "restart",
    "event",
    "Timer",
    "terminate",
    "connected",
    "message",
    "topic",
    "title",
    "locale",
    "Manager",
    "tr",
    "severity",
    "unique",
    "deletable",
    "condition",
    "lastError",
    "getLastError",
    "Date",
    "now",
    "time",
    "url",
    "code",
    "text",
    "actions",
    "link",
    "action",
    "notifications",
    "Router",
    "dispatchMessage",
    "errorCode",
    "varargs",
    "Array",
    "slice",
    "arguments",
    "JSON",
    "stringify",
    "div",
    "document",
    "createElement",
    "innerText",
    "innerHTML",
    "notification",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "BackendConnections"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/BackendConnections.js"
  ],
  "sourcesContent": [
    "/* BackendConnections.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global factory for backend connections.\n */\nqx.Class.define('cv.io.BackendConnections', {\n  type: 'static',\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    __clients: {},\n    __activeChangedTimer: null,\n    __disconnectTimer: null,\n    __hasBeenConnected: false,\n    __activeChangeListenerId: null,\n    __classListeners: {},\n    __clientClasses: {},\n\n    addClassLoadedListener(className, callback) {\n      if (!this.__classListeners[className]) {\n        this.__classListeners[className] = [];\n      }\n      if (!this.__classListeners[className].includes(callback)) {\n        this.__classListeners[className].push(callback);\n      }\n    },\n\n\n    registerClientClass(name, Clazz) {\n      if (!this.__clientClasses[name]) {\n        this.__clientClasses[name] = Clazz;\n        if (this.__classListeners[name]) {\n          for (const cb of this.__classListeners[name]) {\n            cb();\n          }\n        }\n      }\n    },\n\n    isRegistered(name) {\n      return !!this.__clientClasses[name];\n    },\n\n    /**\n     * Initialize all {@link cv.io.IClient} clients for backend communication,\n     * return the default one (for backwards compatibility)\n     */\n    initBackendClients() {\n      if (cv.Config.testMode === true || window.cvTestMode === true) {\n        if (cv.Config.testMode === true) {\n          cv.data.Model.getInstance().setDefaultBackendName('simulated');\n        }\n        return this.addBackendClient(cv.data.Model.getInstance().getDefaultBackendName(), 'simulated');\n      }\n      const backendNames = (\n        cv.Config.URL.backend ??\n        cv.Config.configSettings.backend ??\n        cv.Config.server.backend ??\n        'default'\n      ).split(',');\n      const backendKnxdUrl =\n        cv.Config.URL.backendKnxdUrl ?? cv.Config.configSettings.backendKnxdUrl ?? cv.Config.server.backendKnxdUrl;\n      const backendMQTTUrl =\n        cv.Config.URL.backendMQTTUrl ?? cv.Config.configSettings.backendMQTTUrl ?? cv.Config.server.backendMQTTUrl;\n      const backendOpenHABUrl =\n        cv.Config.URL.backendOpenHABUrl ??\n        cv.Config.configSettings.backendOpenHABUrl ??\n        cv.Config.server.backendOpenHABUrl;\n\n      const defaultName = cv.data.Model.getInstance().getDefaultBackendName() ?? 'main';\n      let defaultType;\n      let defaultClient;\n      switch (backendNames[0]) {\n        case 'knxd':\n        case 'default':\n        default:\n          defaultType = 'knxd';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendKnxdUrl, 'server');\n          break;\n\n        case 'mqtt':\n          defaultType = 'mqtt';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendMQTTUrl, 'server');\n          break;\n\n        case 'openhab':\n        case 'openhab2':\n        case 'oh':\n        case 'oh2':\n          defaultType = 'openhab';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendOpenHABUrl, 'server');\n          break;\n      }\n\n      // check if we need to create more clients\n      for (let i = 1; i < backendNames.length; i++) {\n        switch (backendNames[i]) {\n          case 'knxd':\n          case 'default':\n            if (backendKnxdUrl && defaultType !== 'knxd') {\n              this.addBackendClient('knxd', 'knxd', backendKnxdUrl, 'server');\n            }\n            break;\n\n          case 'mqtt':\n            if (defaultType !== 'mqtt') {\n              this.addBackendClient('mqtt', 'mqtt', backendMQTTUrl, 'server');\n            }\n            break;\n\n          case 'openhab':\n            if (backendKnxdUrl && defaultType !== 'openhab') {\n              this.addBackendClient('openhab', 'openhab', backendOpenHABUrl, 'server');\n            }\n            break;\n        }\n      }\n      return defaultClient;\n    },\n\n    /**\n     *  Add a backend client.\n     * @param name {string}\n     * @param type {string}\n     * @param backendUrl {string}\n     * @param source {string?}\n     * @return {cv.io.IClient}\n     */\n    addBackendClient(name, type, backendUrl, source) {\n      if (name === 'system') {\n        throw Error('\"system\" is not allowed as a backend name');\n      }\n      if (this.__clients[name]) {\n        this.__clients[name].dispose();\n        delete this.__clients[name];\n      }\n      const Clazz = this.__clientClasses[type];\n      /** @type {cv.io.IClient} */\n      const client = Clazz ? new Clazz(type, backendUrl) : cv.Application.createClient(type, backendUrl);\n      if (source) {\n        client.configuredIn = source;\n      }\n      this.__clients[name] = client;\n      client.setName(name);\n      const model = cv.data.Model.getInstance();\n      client.addListener('changeConnected', ev => {\n        const data = {};\n        // convert to internal state used for boolean values\n        data[`backend:${name}:connected`] = ev.getData() ? 1 : 0;\n        // this is a value the system backend\n        model.updateFrom('system', data);\n      });\n      client.update = data => model.updateFrom(name, data); // override clients update function\n      if (cv.Config.reporting) {\n        const recordInstance = cv.report.Record.getInstance();\n        client.record = function (p, d) {\n          recordInstance.record(cv.report.Record.BACKEND, p, d, {\n            name: name,\n            type: type\n          });\n        };\n      }\n      client.showError = this._handleClientError.bind(this);\n\n      if (cv.Config.sentryEnabled && window.Sentry) {\n        Sentry.setTag('backend.' + name, type);\n        const webServer = client.getServer();\n        if (webServer) {\n          Sentry.setTag('server.backend.' + name, webServer);\n        }\n        if (name === 'main' && cv.Config.configServer) {\n          Sentry.setTag('server.web.main', cv.Config.configServer);\n        }\n        client.addListener('changedServer', () => this._updateClientScope(name));\n      }\n      if (!this.__activeChangeListenerId) {\n        const app = qx.core.Init.getApplication();\n        if (app) {\n          this.__activeChangeListenerId = app.addListener(\n            'changeActive',\n            this._onActiveChanged,\n            this\n          );\n        }\n      }\n\n      // show connection state in NotificationCenter\n      client.addListener('changeConnected', () => this._checkBackendConnection(name));\n\n      return client;\n    },\n\n    removeClient(client) {\n      for (let name in this.__clients) {\n        if (this.__clients[name] === client) {\n          delete this.__clients[name];\n          break;\n        }\n      }\n    },\n\n    /**\n     * Checks if a backend by that name is already registered\n     * @param name {String} name of the backend\n     * @return {boolean}\n     */\n    hasClient(name) {\n      return Object.prototype.hasOwnProperty.call(this.__clients, name);\n    },\n\n    /**\n     * Get the backend client by name, if the name is not set the default backend is used.\n     * Usually that is the backend client created by initBackendClients().\n     * @param backendName {String?} name of the backend\n     */\n    getClient(backendName) {\n      if (backendName === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      if (!backendName) {\n        backendName = cv.data.Model.getInstance().getDefaultBackendName();\n      }\n      if (!this.__clients[backendName]) {\n        if (cv.Config.testMode) {\n          // in testMode the client might not have been initialized yet\n          return this.addBackendClient('simulated', 'simulated');\n        }\n        // backendName might be a type\n        return this.getClientByType(backendName);\n      }\n      return this.__clients[backendName];\n    },\n\n    getClientByType(type) {\n      if (type === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      let client;\n      for (const name in this.__clients) {\n        client = this.__clients[name];\n        if (client.getType() === type) {\n          return client;\n        }\n      }\n      return null;\n    },\n\n    getClients() {\n      return this.__clients;\n    },\n\n    initSystemBackend() {\n      // make sure that we have a \"system\" backend\n      if (!this.hasClient('system')) {\n        this.__clients.system = new cv.io.System();\n      }\n      const client = this.__clients.system;\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses('system');\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    /**\n     * Start retrieving data from backend\n     */\n    startInitialRequests() {\n      Object.getOwnPropertyNames(this.__clients).forEach(name => {\n        this.startInitialRequest(name);\n      });\n    },\n\n    startInitialRequest(name) {\n      const client = this.getClient(name);\n      if (cv.Config.enableAddressQueue) {\n        // identify addresses on startpage\n        client.setInitialAddresses(cv.Application.structureController.getInitialAddresses(name));\n      }\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses(name);\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    _onActiveChanged() {\n      const app = qx.core.Init.getApplication();\n      if (app.isActive()) {\n        if (this.__disconnectTimer) {\n          this.__disconnectTimer.dispose();\n          this.__disconnectTimer = null;\n        }\n        Object.getOwnPropertyNames(this.__clients).forEach(backendName => {\n          const client = this.__clients[backendName];\n          if (!client.isConnected() && this.__hasBeenConnected) {\n            // reconnect\n            qx.log.Logger.debug(this, `restarting ${backendName} backend connection`);\n\n            client.restart(true);\n          }\n        });\n\n        // wait for 3 seconds before checking the backend connection\n        if (!this.__activeChangedTimer) {\n          this.__activeChangedTimer = new qx.event.Timer(3000);\n          this.__activeChangedTimer.addListener('interval', () => {\n            if (app.isActive()) {\n              Object.getOwnPropertyNames(this.__clients).forEach(this._checkBackendConnection, this);\n            }\n            this.__activeChangedTimer.dispose();\n            this.__activeChangedTimer = null;\n          });\n        }\n        this.__activeChangedTimer.restart();\n      } else {\n        if (this.__activeChangedTimer) {\n          this.__activeChangedTimer.dispose();\n          this.__activeChangedTimer = null;\n        }\n        if (!this.__disconnectTimer) {\n          // disconnect after 60 secs\n          this.__disconnectTimer = new qx.event.Timer(60000);\n          this.__disconnectTimer.addListener('interval', () => {\n            Object.getOwnPropertyNames(this.__clients).forEach(name => {\n              const client = this.getClient(name);\n              if (client.isConnected()) {\n                client.terminate();\n              }\n            });\n            this.__disconnectTimer.dispose();\n            this.__disconnectTimer = null;\n          });\n        }\n        this.__disconnectTimer.restart();\n      }\n    },\n\n    _checkBackendConnection(name) {\n      const client = this.getClient(name);\n      const connected = client.isConnected();\n      const message = {\n        topic: 'cv.client.connection.' + name,\n        title: qx.locale.Manager.tr('Connection error'),\n        severity: 'urgent',\n        unique: true,\n        deletable: false,\n        condition: !connected && this.__hasBeenConnected && qx.core.Init.getApplication().isActive()\n      };\n\n      const lastError = client.getLastError();\n      if (!connected) {\n        if (lastError && Date.now() - lastError.time < 100) {\n          message.message = qx.locale.Manager.tr(\n            'Error requesting %1: %2 - %3.',\n            lastError.url,\n            lastError.code,\n            lastError.text\n          );\n        } else {\n          message.message = qx.locale.Manager.tr('Connection to backend \"%1\" is lost.', name);\n        }\n        message.actions = {\n          link: [\n            {\n              title: qx.locale.Manager.tr('Restart connection'),\n              action() {\n                client.restart();\n              }\n            }\n          ]\n        };\n      } else {\n        this.__hasBeenConnected = true;\n      }\n      cv.core.notifications.Router.dispatchMessage(message.topic, message);\n    },\n\n    _updateClientScope(name) {\n      const client = this.getClient(name);\n      const webServer = client.getServer();\n      if (webServer) {\n        Sentry.setTag('server.backend.' + name, webServer);\n      }\n    },\n\n    _handleClientError(errorCode, varargs) {\n      varargs = Array.prototype.slice.call(arguments, 1);\n      varargs = JSON.stringify(varargs[0], null, 2);\n      // escape HTML:\n      let div = document.createElement('div');\n      div.innerText = varargs;\n      varargs = div.innerHTML;\n      let notification;\n      switch (errorCode) {\n        case cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to the %1Login%2 request: missing protocol version.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n\n        case cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to a %1read%2 request: Missing \"i\" value.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n      }\n\n      if (notification) {\n        cv.core.notifications.Router.dispatchMessage(notification.topic, notification);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}