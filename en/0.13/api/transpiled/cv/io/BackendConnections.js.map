{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/BackendConnections.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "__clients",
    "__activeChangedTimer",
    "__hasBeenConnected",
    "__activeChangeListenerId",
    "initBackendClient",
    "cv",
    "Config",
    "testMode",
    "window",
    "cvTestMode",
    "addBackendClient",
    "backendName",
    "URL",
    "backend",
    "configSettings",
    "server",
    "split",
    "backendKnxdUrl",
    "backendMQTTUrl",
    "backendOpenHABUrl",
    "name",
    "backendUrl",
    "source",
    "Error",
    "dispose",
    "client",
    "Application",
    "createClient",
    "configuredIn",
    "model",
    "data",
    "Model",
    "getInstance",
    "addListener",
    "ev",
    "getData",
    "updateFrom",
    "update",
    "reporting",
    "recordInstance",
    "report",
    "Record",
    "record",
    "p",
    "d",
    "BACKEND",
    "showError",
    "_handleClientError",
    "bind",
    "sentryEnabled",
    "Sentry",
    "configureScope",
    "scope",
    "setTag",
    "webServer",
    "getServer",
    "configServer",
    "_updateClientScope",
    "core",
    "Init",
    "getApplication",
    "_onActiveChanged",
    "_checkBackendConnection",
    "removeClient",
    "hasClient",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "getClient",
    "system",
    "io",
    "System",
    "getDefaultBackendName",
    "startInitialRequest",
    "getOwnPropertyNames",
    "forEach",
    "enableAddressQueue",
    "setInitialAddresses",
    "structureController",
    "getInitialAddresses",
    "addressesToSubscribe",
    "getAddresses",
    "length",
    "subscribe",
    "app",
    "isActive",
    "isConnected",
    "log",
    "Logger",
    "debug",
    "restart",
    "event",
    "Timer",
    "stop",
    "connected",
    "message",
    "topic",
    "title",
    "locale",
    "Manager",
    "tr",
    "severity",
    "unique",
    "deletable",
    "condition",
    "lastError",
    "getLastError",
    "Date",
    "now",
    "time",
    "url",
    "code",
    "text",
    "actions",
    "link",
    "action",
    "notifications",
    "Router",
    "dispatchMessage",
    "errorCode",
    "varargs",
    "Array",
    "slice",
    "arguments",
    "JSON",
    "stringify",
    "div",
    "document",
    "createElement",
    "innerText",
    "innerHTML",
    "notification",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "BackendConnections"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* BackendConnections.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global factory for backend connections.\n */\nqx.Class.define('cv.io.BackendConnections', {\n  type: 'static',\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    __clients: {},\n    __activeChangedTimer: null,\n    __hasBeenConnected: false,\n    __activeChangeListenerId: null,\n\n    /**\n     * Initialize the {@link cv.io.Client} for backend communication\n     */\n    initBackendClient: function () {\n      if (cv.Config.testMode === true || window.cvTestMode === true) {\n        return this.addBackendClient('main', 'simulated');\n      }\n      let backendName = (cv.Config.URL.backend || cv.Config.configSettings.backend || cv.Config.server.backend || 'default').split(',')[0];\n      const backendKnxdUrl = cv.Config.URL.backendKnxdUrl || cv.Config.configSettings.backendKnxdUrl || cv.Config.server.backendKnxdUrl;\n      const backendMQTTUrl = cv.Config.URL.backendMQTTUrl || cv.Config.configSettings.backendMQTTUrl || cv.Config.server.backendMQTTUrl;\n      const backendOpenHABUrl = cv.Config.URL.backendOpenHABUrl || cv.Config.configSettings.backendOpenHABUrl || cv.Config.server.backendOpenHABUrl;\n\n      switch (backendName) {\n        case 'knxd':\n        case 'default':\n        default:\n          return this.addBackendClient('main', 'knxd', backendKnxdUrl, 'server');\n\n        case 'mqtt':\n          return this.addBackendClient('main', 'mqtt', backendMQTTUrl, 'server');\n\n        case 'openhab':\n        case 'openhab2':\n        case 'oh':\n        case 'oh2':\n          return this.addBackendClient('main', 'openhab', backendOpenHABUrl, 'server');\n      }\n    },\n\n    addBackendClient(name, type, backendUrl, source) {\n      if (name === 'system') {\n        throw Error('\"system\" is not allowed as a backend name');\n      }\n      if (this.__clients[name]) {\n        this.__clients[name].dispose();\n        delete this.__clients[name];\n      }\n      const client = cv.Application.createClient(type, backendUrl);\n      if (source) {\n        client.configuredIn = source;\n      }\n      this.__clients[name] = client;\n      const model = cv.data.Model.getInstance();\n      client.addListener('changeConnected', ev => {\n        const data = {};\n        // convert to internal state used for boolean values\n        data[`backend:${name}:connected`] = ev.getData() ? 1 : 0;\n        // this is a value the system backend\n        model.updateFrom('system', data);\n      });\n      client.update = data => model.updateFrom(name, data); // override clients update function\n      if (cv.Config.reporting) {\n        const recordInstance = cv.report.Record.getInstance();\n        client.record = function(p, d) {\n          recordInstance.record(cv.report.Record.BACKEND, p, d);\n        };\n      }\n      client.showError = this._handleClientError.bind(this);\n\n      if (cv.Config.sentryEnabled && window.Sentry) {\n        Sentry.configureScope(function (scope) {\n          scope.setTag('backend.' + name, type);\n          const webServer = client.getServer();\n          if (webServer) {\n            scope.setTag('server.backend.' + name, webServer);\n          }\n          if (name === 'main' && cv.Config.configServer) {\n            scope.setTag('server.web.main', cv.Config.configServer);\n          }\n        });\n        client.addListener('changedServer', () => this._updateClientScope(name), this);\n      }\n      if (!this.__activeChangeListenerId) {\n        this.__activeChangeListenerId = qx.core.Init.getApplication().addListener('changeActive', this._onActiveChanged, this);\n      }\n\n      // show connection state in NotificationCenter\n      client.addListener('changeConnected', () => this._checkBackendConnection(name), this);\n\n      return client;\n    },\n\n    removeClient(client) {\n      for (let name in this.__clients) {\n        if (this.__clients[name] === client) {\n          delete this.__clients[name];\n          break;\n        }\n      }\n    },\n\n    /**\n     * Checks if a backend by that name is already registered\n     * @param name {String} name of the backend\n     * @return {boolean}\n     */\n    hasClient(name) {\n      return Object.prototype.hasOwnProperty.call(this.__clients, name);\n    },\n\n    /**\n     * Get the backend client by name, if the name is not set the default backend is used.\n     * Usually that is the backend client created by initBackendClient().\n     * @param backendName {String?} name of the backend\n     */\n    getClient(backendName) {\n      if (backendName === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      if (!backendName) {\n        backendName = cv.data.Model.getInstance().getDefaultBackendName();\n      }\n      if (!this.__clients[backendName] && cv.Config.testMode) {\n        // in testMode the client might not have been initialized yet\n        return this.addBackendClient('main', 'simulated');\n      }\n      return this.__clients[backendName];\n    },\n\n    /**\n    * Start retrieving data from backend\n    */\n    startInitialRequest: function() {\n      if (qx.core.Environment.get('qx.debug')) {\n        cv.report.Replay.start();\n      }\n      Object.getOwnPropertyNames(this.__clients).forEach(name => {\n        const client = this.getClient(name);\n        if (cv.Config.enableAddressQueue) {\n          // identify addresses on startpage\n          client.setInitialAddresses(cv.Application.structureController.getInitialAddresses(name));\n        }\n        const addressesToSubscribe = cv.data.Model.getInstance().getAddresses(name);\n        if (addressesToSubscribe.length !== 0) {\n          client.subscribe(addressesToSubscribe);\n        }\n      });\n    },\n\n    _onActiveChanged: function () {\n      const app = qx.core.Init.getApplication();\n      if (app.isActive()) {\n        Object.getOwnPropertyNames(this.__clients).forEach(backendName => {\n          const client = this.__clients[backendName];\n          if (!client.isConnected() && this.__hasBeenConnected) {\n            // reconnect\n            qx.log.Logger.debug(this, `restarting ${backendName} backend connection`);\n            client.restart(true);\n          }\n        });\n\n        // wait for 3 seconds before checking the backend connection\n        if (!this.__activeChangedTimer) {\n          this.__activeChangedTimer = new qx.event.Timer(3000);\n          this.__activeChangedTimer.addListener('interval', function () {\n            if (app.isActive()) {\n              Object.getOwnPropertyNames(this.__clients).forEach(this._checkBackendConnection, this);\n            }\n            this.__activeChangedTimer.stop();\n          }, this);\n        }\n        this.__activeChangedTimer.restart();\n      } else {\n        Object.getOwnPropertyNames(this.__clients).forEach(this._checkBackendConnection, this);\n      }\n    },\n\n    _checkBackendConnection (name) {\n      const client = this.getClient(name);\n      const connected = client.isConnected();\n      const message = {\n        topic: 'cv.client.connection.' + name,\n        title: qx.locale.Manager.tr('Connection error'),\n        severity: 'urgent',\n        unique: true,\n        deletable: false,\n        condition: !connected && this.__hasBeenConnected && qx.core.Init.getApplication().isActive()\n      };\n      const lastError = client.getLastError();\n      if (!connected) {\n        if (lastError && (Date.now() - lastError.time) < 100) {\n          message.message = qx.locale.Manager.tr('Error requesting %1: %2 - %3.', lastError.url, lastError.code, lastError.text);\n        } else {\n          message.message = qx.locale.Manager.tr('Connection to backend \"%1\" is lost.', name);\n        }\n        message.actions = {\n          link: [\n            {\n              title: qx.locale.Manager.tr('Restart connection'),\n              action: function () {\n                client.restart();\n              }\n            }\n          ]\n        };\n      } else {\n        this.__hasBeenConnected = true;\n      }\n      cv.core.notifications.Router.dispatchMessage(message.topic, message);\n    },\n\n    _updateClientScope(name) {\n      const client = this.getClient(name);\n      Sentry.configureScope(function (scope) {\n        const webServer = client.getServer();\n        if (webServer) {\n          scope.setTag('server.backend.' + name, webServer);\n        }\n      });\n    },\n\n    _handleClientError: function (errorCode, varargs) {\n      varargs = Array.prototype.slice.call(arguments, 1);\n      varargs = JSON.stringify(varargs[0], null, 2);\n      // escape HTML:\n      let div = document.createElement('div');\n      div.innerText = varargs;\n      varargs = div.innerHTML;\n      let notification;\n      switch (errorCode) {\n        case cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:  qx.locale.Manager.tr('The backend did send an invalid response to the %1Login%2 request: missing protocol version.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>') + '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' + qx.locale.Manager.tr('Backend-Response:') + '</strong><pre>' + varargs + '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n          break;\n\n        case cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:  qx.locale.Manager.tr('The backend did send an invalid response to a %1read%2 request: Missing \"i\" value.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>') + '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' + qx.locale.Manager.tr('Backend-Response:') + '</strong><pre>' + varargs +'</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n          break;\n      }\n      if (notification) {\n        cv.core.notifications.Router.dispatchMessage(notification.topic, notification);\n      }\n    }\n  }\n});\n"
  ]
}