{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "__clients",
    "__activeChangedTimer",
    "__disconnectTimer",
    "__hasBeenConnected",
    "__activeChangeListenerId",
    "__classListeners",
    "__clientClasses",
    "addClassLoadedListener",
    "className",
    "callback",
    "includes",
    "push",
    "registerClientClass",
    "name",
    "Clazz",
    "cb",
    "isRegistered",
    "initBackendClients",
    "cv",
    "Config",
    "testMode",
    "window",
    "cvTestMode",
    "data",
    "Model",
    "getInstance",
    "setDefaultBackendName",
    "addBackendClient",
    "getDefaultBackendName",
    "backendNames",
    "URL",
    "backend",
    "configSettings",
    "server",
    "split",
    "backendKnxdUrl",
    "backendMQTTUrl",
    "backendOpenHABUrl",
    "defaultName",
    "defaultClient",
    "defaultType",
    "i",
    "length",
    "backendUrl",
    "source",
    "Error",
    "dispose",
    "client",
    "Application",
    "createClient",
    "configuredIn",
    "setName",
    "model",
    "addListener",
    "ev",
    "getData",
    "updateFrom",
    "update",
    "reporting",
    "recordInstance",
    "report",
    "Record",
    "record",
    "p",
    "d",
    "BACKEND",
    "showError",
    "_handleClientError",
    "bind",
    "sentryEnabled",
    "Sentry",
    "configureScope",
    "scope",
    "setTag",
    "webServer",
    "getServer",
    "configServer",
    "_updateClientScope",
    "app",
    "core",
    "Init",
    "getApplication",
    "_onActiveChanged",
    "_checkBackendConnection",
    "removeClient",
    "hasClient",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "getClient",
    "backendName",
    "system",
    "io",
    "System",
    "getClientByType",
    "getType",
    "getClients",
    "initSystemBackend",
    "addressesToSubscribe",
    "getAddresses",
    "subscribe",
    "startInitialRequests",
    "getOwnPropertyNames",
    "forEach",
    "startInitialRequest",
    "enableAddressQueue",
    "setInitialAddresses",
    "structureController",
    "getInitialAddresses",
    "isActive",
    "isConnected",
    "log",
    "Logger",
    "debug",
    "restart",
    "event",
    "Timer",
    "terminate",
    "connected",
    "message",
    "topic",
    "title",
    "locale",
    "Manager",
    "tr",
    "severity",
    "unique",
    "deletable",
    "condition",
    "lastError",
    "getLastError",
    "Date",
    "now",
    "time",
    "url",
    "code",
    "text",
    "actions",
    "link",
    "action",
    "notifications",
    "Router",
    "dispatchMessage",
    "errorCode",
    "varargs",
    "Array",
    "slice",
    "arguments",
    "JSON",
    "stringify",
    "div",
    "document",
    "createElement",
    "innerText",
    "innerHTML",
    "notification",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "BackendConnections"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/BackendConnections.js"
  ],
  "sourcesContent": [
    "/* BackendConnections.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global factory for backend connections.\n */\nqx.Class.define('cv.io.BackendConnections', {\n  type: 'static',\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    __clients: {},\n    __activeChangedTimer: null,\n    __disconnectTimer: null,\n    __hasBeenConnected: false,\n    __activeChangeListenerId: null,\n    __classListeners: {},\n    __clientClasses: {},\n\n    addClassLoadedListener(className, callback) {\n      if (!this.__classListeners[className]) {\n        this.__classListeners[className] = [];\n      }\n      if (!this.__classListeners[className].includes(callback)) {\n        this.__classListeners[className].push(callback);\n      }\n    },\n\n\n    registerClientClass(name, Clazz) {\n      if (!this.__clientClasses[name]) {\n        this.__clientClasses[name] = Clazz;\n        if (this.__classListeners[name]) {\n          for (const cb of this.__classListeners[name]) {\n            cb();\n          }\n        }\n      }\n    },\n\n    isRegistered(name) {\n      return !!this.__clientClasses[name];\n    },\n\n    /**\n     * Initialize all {@link cv.io.IClient} clients for backend communication,\n     * return the default one (for backwards compability)\n     */\n    initBackendClients() {\n      if (cv.Config.testMode === true || window.cvTestMode === true) {\n        if (cv.Config.testMode === true) {\n          cv.data.Model.getInstance().setDefaultBackendName('simulated');\n        }\n        return this.addBackendClient(cv.data.Model.getInstance().getDefaultBackendName(), 'simulated');\n      }\n      let backendNames = (\n        cv.Config.URL.backend ||\n        cv.Config.configSettings.backend ||\n        cv.Config.server.backend ||\n        'default'\n      ).split(',');\n      const backendKnxdUrl =\n        cv.Config.URL.backendKnxdUrl || cv.Config.configSettings.backendKnxdUrl || cv.Config.server.backendKnxdUrl;\n      const backendMQTTUrl =\n        cv.Config.URL.backendMQTTUrl || cv.Config.configSettings.backendMQTTUrl || cv.Config.server.backendMQTTUrl;\n      const backendOpenHABUrl =\n        cv.Config.URL.backendOpenHABUrl ||\n        cv.Config.configSettings.backendOpenHABUrl ||\n        cv.Config.server.backendOpenHABUrl;\n\n      const defaultName = cv.data.Model.getInstance().getDefaultBackendName() || 'main';\n      let defaultClient;\n      let defaultType;\n      switch (backendNames[0]) {\n        case 'knxd':\n        case 'default':\n        default:\n          defaultType = 'knxd';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendKnxdUrl, 'server');\n          break;\n\n        case 'mqtt':\n          defaultType = 'mqtt';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendMQTTUrl, 'server');\n          break;\n\n        case 'openhab':\n        case 'openhab2':\n        case 'oh':\n        case 'oh2':\n          defaultType = 'openhab';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendOpenHABUrl, 'server');\n          break;\n      }\n\n      // check if we need to create more clients\n      for (let i = 1; i < backendNames.length; i++) {\n        switch (backendNames[i]) {\n          case 'knxd':\n          case 'default':\n            if (backendKnxdUrl && defaultType !== 'knxd') {\n              this.addBackendClient('knxd', 'knxd', backendKnxdUrl, 'server');\n            }\n            break;\n\n          case 'mqtt':\n            if (defaultType !== 'mqtt') {\n              this.addBackendClient('mqtt', 'mqtt', backendMQTTUrl, 'server');\n            }\n            break;\n\n          case 'openhab':\n            if (backendKnxdUrl && defaultType !== 'openhab') {\n              this.addBackendClient('openhab', 'openhab', backendOpenHABUrl, 'server');\n            }\n            break;\n        }\n      }\n      return defaultClient;\n    },\n\n    addBackendClient(name, type, backendUrl, source) {\n      if (name === 'system') {\n        throw Error('\"system\" is not allowed as a backend name');\n      }\n      if (this.__clients[name]) {\n        this.__clients[name].dispose();\n        delete this.__clients[name];\n      }\n      const Clazz = this.__clientClasses[type];\n      const client = Clazz ? new Clazz(type, backendUrl) : cv.Application.createClient(type, backendUrl);\n      if (source) {\n        client.configuredIn = source;\n      }\n      this.__clients[name] = client;\n      client.setName(name);\n      const model = cv.data.Model.getInstance();\n      client.addListener('changeConnected', ev => {\n        const data = {};\n        // convert to internal state used for boolean values\n        data[`backend:${name}:connected`] = ev.getData() ? 1 : 0;\n        // this is a value the system backend\n        model.updateFrom('system', data);\n      });\n      client.update = data => model.updateFrom(name, data); // override clients update function\n      if (cv.Config.reporting) {\n        const recordInstance = cv.report.Record.getInstance();\n        client.record = function (p, d) {\n          recordInstance.record(cv.report.Record.BACKEND, p, d, {\n            name: name,\n            type: type\n          });\n        };\n      }\n      client.showError = this._handleClientError.bind(this);\n\n      if (cv.Config.sentryEnabled && window.Sentry) {\n        Sentry.configureScope(function (scope) {\n          scope.setTag('backend.' + name, type);\n          const webServer = client.getServer();\n          if (webServer) {\n            scope.setTag('server.backend.' + name, webServer);\n          }\n          if (name === 'main' && cv.Config.configServer) {\n            scope.setTag('server.web.main', cv.Config.configServer);\n          }\n        });\n        client.addListener('changedServer', () => this._updateClientScope(name));\n      }\n      if (!this.__activeChangeListenerId) {\n        const app = qx.core.Init.getApplication();\n        if (app) {\n          this.__activeChangeListenerId = app.addListener(\n            'changeActive',\n            this._onActiveChanged,\n            this\n          );\n        }\n      }\n\n      // show connection state in NotificationCenter\n      client.addListener('changeConnected', () => this._checkBackendConnection(name));\n\n      return client;\n    },\n\n    removeClient(client) {\n      for (let name in this.__clients) {\n        if (this.__clients[name] === client) {\n          delete this.__clients[name];\n          break;\n        }\n      }\n    },\n\n    /**\n     * Checks if a backend by that name is already registered\n     * @param name {String} name of the backend\n     * @return {boolean}\n     */\n    hasClient(name) {\n      return Object.prototype.hasOwnProperty.call(this.__clients, name);\n    },\n\n    /**\n     * Get the backend client by name, if the name is not set the default backend is used.\n     * Usually that is the backend client created by initBackendClients().\n     * @param backendName {String?} name of the backend\n     */\n    getClient(backendName) {\n      if (backendName === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      if (!backendName) {\n        backendName = cv.data.Model.getInstance().getDefaultBackendName();\n      }\n      if (!this.__clients[backendName]) {\n        if (cv.Config.testMode) {\n          // in testMode the client might not have been initialized yet\n          return this.addBackendClient('simulated', 'simulated');\n        }\n        // backendName might be a type\n        return this.getClientByType(backendName);\n      }\n      return this.__clients[backendName];\n    },\n\n    getClientByType(type) {\n      if (type === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      let client;\n      for (const name in this.__clients) {\n        client = this.__clients[name];\n        if (client.getType() === type) {\n          return client;\n        }\n      }\n      return null;\n    },\n\n    getClients() {\n      return this.__clients;\n    },\n\n    initSystemBackend() {\n      // make sure that we have a \"system\" backend\n      if (!this.hasClient('system')) {\n        this.__clients.system = new cv.io.System();\n      }\n      const client = this.__clients.system;\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses('system');\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    /**\n     * Start retrieving data from backend\n     */\n    startInitialRequests() {\n      Object.getOwnPropertyNames(this.__clients).forEach(name => {\n        this.startInitialRequest(name);\n      });\n    },\n\n    startInitialRequest(name) {\n      if (qx.core.Environment.get('qx.debug')) {\n        cv.report.Replay.start();\n      }\n      const client = this.getClient(name);\n      if (cv.Config.enableAddressQueue) {\n        // identify addresses on startpage\n        client.setInitialAddresses(cv.Application.structureController.getInitialAddresses(name));\n      }\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses(name);\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    _onActiveChanged() {\n      const app = qx.core.Init.getApplication();\n      if (app.isActive()) {\n        if (this.__disconnectTimer) {\n          this.__disconnectTimer.dispose();\n          this.__disconnectTimer = null;\n        }\n        Object.getOwnPropertyNames(this.__clients).forEach(backendName => {\n          const client = this.__clients[backendName];\n          if (!client.isConnected() && this.__hasBeenConnected) {\n            // reconnect\n            qx.log.Logger.debug(this, `restarting ${backendName} backend connection`);\n\n            client.restart(true);\n          }\n        });\n\n        // wait for 3 seconds before checking the backend connection\n        if (!this.__activeChangedTimer) {\n          this.__activeChangedTimer = new qx.event.Timer(3000);\n          this.__activeChangedTimer.addListener('interval', () => {\n            if (app.isActive()) {\n              Object.getOwnPropertyNames(this.__clients).forEach(this._checkBackendConnection, this);\n            }\n            this.__activeChangedTimer.dispose();\n            this.__activeChangedTimer = null;\n          });\n        }\n        this.__activeChangedTimer.restart();\n      } else {\n        if (this.__activeChangedTimer) {\n          this.__activeChangedTimer.dispose();\n          this.__activeChangedTimer = null;\n        }\n        if (!this.__disconnectTimer) {\n          // disconnect after 60 secs\n          this.__disconnectTimer = new qx.event.Timer(60000);\n          this.__disconnectTimer.addListener('interval', () => {\n            Object.getOwnPropertyNames(this.__clients).forEach(name => {\n              const client = this.getClient(name);\n              if (client.isConnected()) {\n                client.terminate();\n              }\n            });\n            this.__disconnectTimer.dispose();\n            this.__disconnectTimer = null;\n          });\n        }\n        this.__disconnectTimer.restart();\n      }\n    },\n\n    _checkBackendConnection(name) {\n      const client = this.getClient(name);\n      const connected = client.isConnected();\n      const message = {\n        topic: 'cv.client.connection.' + name,\n        title: qx.locale.Manager.tr('Connection error'),\n        severity: 'urgent',\n        unique: true,\n        deletable: false,\n        condition: !connected && this.__hasBeenConnected && qx.core.Init.getApplication().isActive()\n      };\n\n      const lastError = client.getLastError();\n      if (!connected) {\n        if (lastError && Date.now() - lastError.time < 100) {\n          message.message = qx.locale.Manager.tr(\n            'Error requesting %1: %2 - %3.',\n            lastError.url,\n            lastError.code,\n            lastError.text\n          );\n        } else {\n          message.message = qx.locale.Manager.tr('Connection to backend \"%1\" is lost.', name);\n        }\n        message.actions = {\n          link: [\n            {\n              title: qx.locale.Manager.tr('Restart connection'),\n              action() {\n                client.restart();\n              }\n            }\n          ]\n        };\n      } else {\n        this.__hasBeenConnected = true;\n      }\n      cv.core.notifications.Router.dispatchMessage(message.topic, message);\n    },\n\n    _updateClientScope(name) {\n      const client = this.getClient(name);\n      Sentry.configureScope(function (scope) {\n        const webServer = client.getServer();\n        if (webServer) {\n          scope.setTag('server.backend.' + name, webServer);\n        }\n      });\n    },\n\n    _handleClientError(errorCode, varargs) {\n      varargs = Array.prototype.slice.call(arguments, 1);\n      varargs = JSON.stringify(varargs[0], null, 2);\n      // escape HTML:\n      let div = document.createElement('div');\n      div.innerText = varargs;\n      varargs = div.innerHTML;\n      let notification;\n      switch (errorCode) {\n        case cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to the %1Login%2 request: missing protocol version.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n\n        case cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to a %1read%2 request: Missing \"i\" value.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n      }\n\n      if (notification) {\n        cv.core.notifications.Router.dispatchMessage(notification.topic, notification);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}