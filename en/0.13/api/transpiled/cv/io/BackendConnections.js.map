{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "__clients",
    "__activeChangedTimer",
    "__disconnectTimer",
    "__hasBeenConnected",
    "__activeChangeListenerId",
    "__classListeners",
    "__clientClasses",
    "addClassLoadedListener",
    "className",
    "callback",
    "includes",
    "push",
    "registerClientClass",
    "name",
    "Clazz",
    "_iterator",
    "_createForOfIteratorHelper",
    "_step",
    "s",
    "n",
    "done",
    "cb",
    "value",
    "err",
    "e",
    "f",
    "isRegistered",
    "initBackendClients",
    "cv",
    "Config",
    "testMode",
    "window",
    "cvTestMode",
    "data",
    "Model",
    "getInstance",
    "setDefaultBackendName",
    "addBackendClient",
    "getDefaultBackendName",
    "backendNames",
    "URL",
    "backend",
    "configSettings",
    "server",
    "split",
    "backendKnxdUrl",
    "backendMQTTUrl",
    "backendOpenHABUrl",
    "defaultName",
    "defaultClient",
    "defaultType",
    "i",
    "length",
    "backendUrl",
    "source",
    "_this",
    "Error",
    "dispose",
    "client",
    "Application",
    "createClient",
    "configuredIn",
    "setName",
    "model",
    "addListener",
    "ev",
    "concat",
    "getData",
    "updateFrom",
    "update",
    "reporting",
    "recordInstance",
    "report",
    "Record",
    "record",
    "p",
    "d",
    "BACKEND",
    "showError",
    "_handleClientError",
    "bind",
    "sentryEnabled",
    "Sentry",
    "configureScope",
    "scope",
    "setTag",
    "webServer",
    "getServer",
    "configServer",
    "_updateClientScope",
    "app",
    "core",
    "Init",
    "getApplication",
    "_onActiveChanged",
    "_checkBackendConnection",
    "removeClient",
    "hasClient",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "getClient",
    "backendName",
    "system",
    "io",
    "System",
    "getClientByType",
    "getType",
    "getClients",
    "initSystemBackend",
    "addressesToSubscribe",
    "getAddresses",
    "subscribe",
    "startInitialRequests",
    "_this2",
    "getOwnPropertyNames",
    "forEach",
    "startInitialRequest",
    "enableAddressQueue",
    "setInitialAddresses",
    "structureController",
    "getInitialAddresses",
    "_this3",
    "isActive",
    "isConnected",
    "log",
    "Logger",
    "debug",
    "restart",
    "event",
    "Timer",
    "terminate",
    "connected",
    "message",
    "topic",
    "title",
    "locale",
    "Manager",
    "tr",
    "severity",
    "unique",
    "deletable",
    "condition",
    "lastError",
    "getLastError",
    "Date",
    "now",
    "time",
    "url",
    "code",
    "text",
    "actions",
    "link",
    "action",
    "notifications",
    "Router",
    "dispatchMessage",
    "errorCode",
    "varargs",
    "Array",
    "slice",
    "arguments",
    "JSON",
    "stringify",
    "div",
    "document",
    "createElement",
    "innerText",
    "innerHTML",
    "notification",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "BackendConnections"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/BackendConnections.js"
  ],
  "sourcesContent": [
    "/* BackendConnections.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Global factory for backend connections.\n */\nqx.Class.define('cv.io.BackendConnections', {\n  type: 'static',\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    __clients: {},\n    __activeChangedTimer: null,\n    __disconnectTimer: null,\n    __hasBeenConnected: false,\n    __activeChangeListenerId: null,\n    __classListeners: {},\n    __clientClasses: {},\n\n    addClassLoadedListener(className, callback) {\n      if (!this.__classListeners[className]) {\n        this.__classListeners[className] = [];\n      }\n      if (!this.__classListeners[className].includes(callback)) {\n        this.__classListeners[className].push(callback);\n      }\n    },\n\n\n    registerClientClass(name, Clazz) {\n      if (!this.__clientClasses[name]) {\n        this.__clientClasses[name] = Clazz;\n        if (this.__classListeners[name]) {\n          for (const cb of this.__classListeners[name]) {\n            cb();\n          }\n        }\n      }\n    },\n\n    isRegistered(name) {\n      return !!this.__clientClasses[name];\n    },\n\n    /**\n     * Initialize all {@link cv.io.IClient} clients for backend communication,\n     * return the default one (for backwards compability)\n     */\n    initBackendClients() {\n      if (cv.Config.testMode === true || window.cvTestMode === true) {\n        if (cv.Config.testMode === true) {\n          cv.data.Model.getInstance().setDefaultBackendName('simulated');\n        }\n        return this.addBackendClient(cv.data.Model.getInstance().getDefaultBackendName(), 'simulated');\n      }\n      let backendNames = (\n        cv.Config.URL.backend ||\n        cv.Config.configSettings.backend ||\n        cv.Config.server.backend ||\n        'default'\n      ).split(',');\n      const backendKnxdUrl =\n        cv.Config.URL.backendKnxdUrl || cv.Config.configSettings.backendKnxdUrl || cv.Config.server.backendKnxdUrl;\n      const backendMQTTUrl =\n        cv.Config.URL.backendMQTTUrl || cv.Config.configSettings.backendMQTTUrl || cv.Config.server.backendMQTTUrl;\n      const backendOpenHABUrl =\n        cv.Config.URL.backendOpenHABUrl ||\n        cv.Config.configSettings.backendOpenHABUrl ||\n        cv.Config.server.backendOpenHABUrl;\n\n      const defaultName = cv.data.Model.getInstance().getDefaultBackendName() || 'main';\n      let defaultClient;\n      let defaultType;\n      switch (backendNames[0]) {\n        case 'knxd':\n        case 'default':\n        default:\n          defaultType = 'knxd';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendKnxdUrl, 'server');\n          break;\n\n        case 'mqtt':\n          defaultType = 'mqtt';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendMQTTUrl, 'server');\n          break;\n\n        case 'openhab':\n        case 'openhab2':\n        case 'oh':\n        case 'oh2':\n          defaultType = 'openhab';\n          defaultClient = this.addBackendClient(defaultName, defaultType, backendOpenHABUrl, 'server');\n          break;\n      }\n\n      // check if we need to create more clients\n      for (let i = 1; i < backendNames.length; i++) {\n        switch (backendNames[i]) {\n          case 'knxd':\n          case 'default':\n            if (backendKnxdUrl && defaultType !== 'knxd') {\n              this.addBackendClient('knxd', 'knxd', backendKnxdUrl, 'server');\n            }\n            break;\n\n          case 'mqtt':\n            if (defaultType !== 'mqtt') {\n              this.addBackendClient('mqtt', 'mqtt', backendMQTTUrl, 'server');\n            }\n            break;\n\n          case 'openhab':\n            if (backendKnxdUrl && defaultType !== 'openhab') {\n              this.addBackendClient('openhab', 'openhab', backendOpenHABUrl, 'server');\n            }\n            break;\n        }\n      }\n      return defaultClient;\n    },\n\n    addBackendClient(name, type, backendUrl, source) {\n      if (name === 'system') {\n        throw Error('\"system\" is not allowed as a backend name');\n      }\n      if (this.__clients[name]) {\n        this.__clients[name].dispose();\n        delete this.__clients[name];\n      }\n      const Clazz = this.__clientClasses[type];\n      const client = Clazz ? new Clazz(type, backendUrl) : cv.Application.createClient(type, backendUrl);\n      if (source) {\n        client.configuredIn = source;\n      }\n      this.__clients[name] = client;\n      client.setName(name);\n      const model = cv.data.Model.getInstance();\n      client.addListener('changeConnected', ev => {\n        const data = {};\n        // convert to internal state used for boolean values\n        data[`backend:${name}:connected`] = ev.getData() ? 1 : 0;\n        // this is a value the system backend\n        model.updateFrom('system', data);\n      });\n      client.update = data => model.updateFrom(name, data); // override clients update function\n      if (cv.Config.reporting) {\n        const recordInstance = cv.report.Record.getInstance();\n        client.record = function (p, d) {\n          recordInstance.record(cv.report.Record.BACKEND, p, d, {\n            name: name,\n            type: type\n          });\n        };\n      }\n      client.showError = this._handleClientError.bind(this);\n\n      if (cv.Config.sentryEnabled && window.Sentry) {\n        Sentry.configureScope(function (scope) {\n          scope.setTag('backend.' + name, type);\n          const webServer = client.getServer();\n          if (webServer) {\n            scope.setTag('server.backend.' + name, webServer);\n          }\n          if (name === 'main' && cv.Config.configServer) {\n            scope.setTag('server.web.main', cv.Config.configServer);\n          }\n        });\n        client.addListener('changedServer', () => this._updateClientScope(name));\n      }\n      if (!this.__activeChangeListenerId) {\n        const app = qx.core.Init.getApplication();\n        if (app) {\n          this.__activeChangeListenerId = app.addListener(\n            'changeActive',\n            this._onActiveChanged,\n            this\n          );\n        }\n      }\n\n      // show connection state in NotificationCenter\n      client.addListener('changeConnected', () => this._checkBackendConnection(name));\n\n      return client;\n    },\n\n    removeClient(client) {\n      for (let name in this.__clients) {\n        if (this.__clients[name] === client) {\n          delete this.__clients[name];\n          break;\n        }\n      }\n    },\n\n    /**\n     * Checks if a backend by that name is already registered\n     * @param name {String} name of the backend\n     * @return {boolean}\n     */\n    hasClient(name) {\n      return Object.prototype.hasOwnProperty.call(this.__clients, name);\n    },\n\n    /**\n     * Get the backend client by name, if the name is not set the default backend is used.\n     * Usually that is the backend client created by initBackendClients().\n     * @param backendName {String?} name of the backend\n     */\n    getClient(backendName) {\n      if (backendName === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      if (!backendName) {\n        backendName = cv.data.Model.getInstance().getDefaultBackendName();\n      }\n      if (!this.__clients[backendName]) {\n        if (cv.Config.testMode) {\n          // in testMode the client might not have been initialized yet\n          return this.addBackendClient('simulated', 'simulated');\n        }\n        // backendName might be a type\n        return this.getClientByType(backendName);\n      }\n      return this.__clients[backendName];\n    },\n\n    getClientByType(type) {\n      if (type === 'system') {\n        if (!this.hasClient('system')) {\n          this.__clients.system = new cv.io.System();\n        }\n        return this.__clients.system;\n      }\n      let client;\n      for (const name in this.__clients) {\n        client = this.__clients[name];\n        if (client.getType() === type) {\n          return client;\n        }\n      }\n      return null;\n    },\n\n    getClients() {\n      return this.__clients;\n    },\n\n    initSystemBackend() {\n      // make sure that we have a \"system\" backend\n      if (!this.hasClient('system')) {\n        this.__clients.system = new cv.io.System();\n      }\n      const client = this.__clients.system;\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses('system');\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    /**\n     * Start retrieving data from backend\n     */\n    startInitialRequests() {\n      Object.getOwnPropertyNames(this.__clients).forEach(name => {\n        this.startInitialRequest(name);\n      });\n    },\n\n    startInitialRequest(name) {\n      if (qx.core.Environment.get('qx.debug')) {\n        cv.report.Replay.start();\n      }\n      const client = this.getClient(name);\n      if (cv.Config.enableAddressQueue) {\n        // identify addresses on startpage\n        client.setInitialAddresses(cv.Application.structureController.getInitialAddresses(name));\n      }\n      const addressesToSubscribe = cv.data.Model.getInstance().getAddresses(name);\n      if (addressesToSubscribe.length !== 0) {\n        client.subscribe(addressesToSubscribe);\n      }\n    },\n\n    _onActiveChanged() {\n      const app = qx.core.Init.getApplication();\n      if (app.isActive()) {\n        if (this.__disconnectTimer) {\n          this.__disconnectTimer.dispose();\n          this.__disconnectTimer = null;\n        }\n        Object.getOwnPropertyNames(this.__clients).forEach(backendName => {\n          const client = this.__clients[backendName];\n          if (!client.isConnected() && this.__hasBeenConnected) {\n            // reconnect\n            qx.log.Logger.debug(this, `restarting ${backendName} backend connection`);\n\n            client.restart(true);\n          }\n        });\n\n        // wait for 3 seconds before checking the backend connection\n        if (!this.__activeChangedTimer) {\n          this.__activeChangedTimer = new qx.event.Timer(3000);\n          this.__activeChangedTimer.addListener('interval', () => {\n            if (app.isActive()) {\n              Object.getOwnPropertyNames(this.__clients).forEach(this._checkBackendConnection, this);\n            }\n            this.__activeChangedTimer.dispose();\n            this.__activeChangedTimer = null;\n          });\n        }\n        this.__activeChangedTimer.restart();\n      } else {\n        if (this.__activeChangedTimer) {\n          this.__activeChangedTimer.dispose();\n          this.__activeChangedTimer = null;\n        }\n        if (!this.__disconnectTimer) {\n          // disconnect after 60 secs\n          this.__disconnectTimer = new qx.event.Timer(60000);\n          this.__disconnectTimer.addListener('interval', () => {\n            Object.getOwnPropertyNames(this.__clients).forEach(name => {\n              const client = this.getClient(name);\n              if (client.isConnected()) {\n                client.terminate();\n              }\n            });\n            this.__disconnectTimer.dispose();\n            this.__disconnectTimer = null;\n          });\n        }\n        this.__disconnectTimer.restart();\n      }\n    },\n\n    _checkBackendConnection(name) {\n      const client = this.getClient(name);\n      const connected = client.isConnected();\n      const message = {\n        topic: 'cv.client.connection.' + name,\n        title: qx.locale.Manager.tr('Connection error'),\n        severity: 'urgent',\n        unique: true,\n        deletable: false,\n        condition: !connected && this.__hasBeenConnected && qx.core.Init.getApplication().isActive()\n      };\n\n      const lastError = client.getLastError();\n      if (!connected) {\n        if (lastError && Date.now() - lastError.time < 100) {\n          message.message = qx.locale.Manager.tr(\n            'Error requesting %1: %2 - %3.',\n            lastError.url,\n            lastError.code,\n            lastError.text\n          );\n        } else {\n          message.message = qx.locale.Manager.tr('Connection to backend \"%1\" is lost.', name);\n        }\n        message.actions = {\n          link: [\n            {\n              title: qx.locale.Manager.tr('Restart connection'),\n              action() {\n                client.restart();\n              }\n            }\n          ]\n        };\n      } else {\n        this.__hasBeenConnected = true;\n      }\n      cv.core.notifications.Router.dispatchMessage(message.topic, message);\n    },\n\n    _updateClientScope(name) {\n      const client = this.getClient(name);\n      Sentry.configureScope(function (scope) {\n        const webServer = client.getServer();\n        if (webServer) {\n          scope.setTag('server.backend.' + name, webServer);\n        }\n      });\n    },\n\n    _handleClientError(errorCode, varargs) {\n      varargs = Array.prototype.slice.call(arguments, 1);\n      varargs = JSON.stringify(varargs[0], null, 2);\n      // escape HTML:\n      let div = document.createElement('div');\n      div.innerText = varargs;\n      varargs = div.innerHTML;\n      let notification;\n      switch (errorCode) {\n        case cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to the %1Login%2 request: missing protocol version.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n\n        case cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I:\n          notification = {\n            topic: 'cv.error',\n            title: qx.locale.Manager.tr('CometVisu protocol error'),\n            message:\n              qx.locale.Manager.tr(\n                'The backend did send an invalid response to a %1read%2 request: Missing \"i\" value.',\n                '<a href=\"https://github.com/CometVisu/CometVisu/wiki/Protocol#Login\" target=\"_blank\">',\n                '</a>'\n              ) +\n              '<br/>' +\n              qx.locale.Manager.tr('Please try to fix the problem in the backend.') +\n              '<br/><br/><strong>' +\n              qx.locale.Manager.tr('Backend-Response:') +\n              '</strong><pre>' +\n              varargs +\n              '</pre></div>',\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          };\n\n          break;\n      }\n\n      if (notification) {\n        cv.core.notifications.Router.dispatchMessage(notification.topic, notification);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,0BAA0B,EAAE;IAC1CC,IAAI,EAAE,QAAQ;IACd;AACF;AACA;AACA;AACA;IACEC,OAAO,EAAE;MACPC,SAAS,EAAE,CAAC,CAAC;MACbC,SAAoB,EAAE,IAAI;MAC1BC,SAAiB,EAAE,IAAI;MACvBC,SAAkB,EAAE,KAAK;MACzBC,SAAwB,EAAE,IAAI;MAC9BC,SAAgB,EAAE,CAAC,CAAC;MACpBC,SAAe,EAAE,CAAC,CAAC;MAEnBC,sBAAsB,WAAAA,uBAACC,SAAS,EAAEC,QAAQ,EAAE;QAC1C,IAAI,CAAC,IAAI,CAACJ,SAAgB,CAACG,SAAS,CAAC,EAAE;UACrC,IAAI,CAACH,SAAgB,CAACG,SAAS,CAAC,GAAG,EAAE;QACvC;QACA,IAAI,CAAC,IAAI,CAACH,SAAgB,CAACG,SAAS,CAAC,CAACE,QAAQ,CAACD,QAAQ,CAAC,EAAE;UACxD,IAAI,CAACJ,SAAgB,CAACG,SAAS,CAAC,CAACG,IAAI,CAACF,QAAQ,CAAC;QACjD;MACF,CAAC;MAGDG,mBAAmB,WAAAA,oBAACC,IAAI,EAAEC,KAAK,EAAE;QAC/B,IAAI,CAAC,IAAI,CAACR,SAAe,CAACO,IAAI,CAAC,EAAE;UAC/B,IAAI,CAACP,SAAe,CAACO,IAAI,CAAC,GAAGC,KAAK;UAClC,IAAI,IAAI,CAACT,SAAgB,CAACQ,IAAI,CAAC,EAAE;YAAA,IAAAE,SAAA,GAAAC,0BAAA,CACd,IAAI,CAACX,SAAgB,CAACQ,IAAI,CAAC;cAAAI,KAAA;YAAA;cAA5C,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8C;gBAAA,IAAnCC,EAAE,GAAAJ,KAAA,CAAAK,KAAA;gBACXD,EAAE,CAAC,CAAC;cACN;YAAC,SAAAE,GAAA;cAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;YAAA;cAAAR,SAAA,CAAAU,CAAA;YAAA;UACH;QACF;MACF,CAAC;MAEDC,YAAY,WAAAA,aAACb,IAAI,EAAE;QACjB,OAAO,CAAC,CAAC,IAAI,CAACP,SAAe,CAACO,IAAI,CAAC;MACrC,CAAC;MAED;AACJ;AACA;AACA;MACIc,kBAAkB,WAAAA,mBAAA,EAAG;QACnB,IAAIC,EAAE,CAACC,MAAM,CAACC,QAAQ,KAAK,IAAI,IAAIC,MAAM,CAACC,UAAU,KAAK,IAAI,EAAE;UAC7D,IAAIJ,EAAE,CAACC,MAAM,CAACC,QAAQ,KAAK,IAAI,EAAE;YAC/BF,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,qBAAqB,CAAC,WAAW,CAAC;UAChE;UACA,OAAO,IAAI,CAACC,gBAAgB,CAACT,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACG,qBAAqB,CAAC,CAAC,EAAE,WAAW,CAAC;QAChG;QACA,IAAIC,YAAY,GAAG,CACjBX,EAAE,CAACC,MAAM,CAACW,GAAG,CAACC,OAAO,IACrBb,EAAE,CAACC,MAAM,CAACa,cAAc,CAACD,OAAO,IAChCb,EAAE,CAACC,MAAM,CAACc,MAAM,CAACF,OAAO,IACxB,SAAS,EACTG,KAAK,CAAC,GAAG,CAAC;QACZ,IAAMC,cAAc,GAClBjB,EAAE,CAACC,MAAM,CAACW,GAAG,CAACK,cAAc,IAAIjB,EAAE,CAACC,MAAM,CAACa,cAAc,CAACG,cAAc,IAAIjB,EAAE,CAACC,MAAM,CAACc,MAAM,CAACE,cAAc;QAC5G,IAAMC,cAAc,GAClBlB,EAAE,CAACC,MAAM,CAACW,GAAG,CAACM,cAAc,IAAIlB,EAAE,CAACC,MAAM,CAACa,cAAc,CAACI,cAAc,IAAIlB,EAAE,CAACC,MAAM,CAACc,MAAM,CAACG,cAAc;QAC5G,IAAMC,iBAAiB,GACrBnB,EAAE,CAACC,MAAM,CAACW,GAAG,CAACO,iBAAiB,IAC/BnB,EAAE,CAACC,MAAM,CAACa,cAAc,CAACK,iBAAiB,IAC1CnB,EAAE,CAACC,MAAM,CAACc,MAAM,CAACI,iBAAiB;QAEpC,IAAMC,WAAW,GAAGpB,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACG,qBAAqB,CAAC,CAAC,IAAI,MAAM;QACjF,IAAIW,aAAa;QACjB,IAAIC,WAAW;QACf,QAAQX,YAAY,CAAC,CAAC,CAAC;UACrB,KAAK,MAAM;UACX,KAAK,SAAS;UACd;YACEW,WAAW,GAAG,MAAM;YACpBD,aAAa,GAAG,IAAI,CAACZ,gBAAgB,CAACW,WAAW,EAAEE,WAAW,EAAEL,cAAc,EAAE,QAAQ,CAAC;YACzF;UAEF,KAAK,MAAM;YACTK,WAAW,GAAG,MAAM;YACpBD,aAAa,GAAG,IAAI,CAACZ,gBAAgB,CAACW,WAAW,EAAEE,WAAW,EAAEJ,cAAc,EAAE,QAAQ,CAAC;YACzF;UAEF,KAAK,SAAS;UACd,KAAK,UAAU;UACf,KAAK,IAAI;UACT,KAAK,KAAK;YACRI,WAAW,GAAG,SAAS;YACvBD,aAAa,GAAG,IAAI,CAACZ,gBAAgB,CAACW,WAAW,EAAEE,WAAW,EAAEH,iBAAiB,EAAE,QAAQ,CAAC;YAC5F;QACJ;;QAEA;QACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,YAAY,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;UAC5C,QAAQZ,YAAY,CAACY,CAAC,CAAC;YACrB,KAAK,MAAM;YACX,KAAK,SAAS;cACZ,IAAIN,cAAc,IAAIK,WAAW,KAAK,MAAM,EAAE;gBAC5C,IAAI,CAACb,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAEQ,cAAc,EAAE,QAAQ,CAAC;cACjE;cACA;YAEF,KAAK,MAAM;cACT,IAAIK,WAAW,KAAK,MAAM,EAAE;gBAC1B,IAAI,CAACb,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAES,cAAc,EAAE,QAAQ,CAAC;cACjE;cACA;YAEF,KAAK,SAAS;cACZ,IAAID,cAAc,IAAIK,WAAW,KAAK,SAAS,EAAE;gBAC/C,IAAI,CAACb,gBAAgB,CAAC,SAAS,EAAE,SAAS,EAAEU,iBAAiB,EAAE,QAAQ,CAAC;cAC1E;cACA;UACJ;QACF;QACA,OAAOE,aAAa;MACtB,CAAC;MAEDZ,gBAAgB,WAAAA,iBAACxB,IAAI,EAAEf,IAAI,EAAEuD,UAAU,EAAEC,MAAM,EAAE;QAAA,IAAAC,KAAA;QAC/C,IAAI1C,IAAI,KAAK,QAAQ,EAAE;UACrB,MAAM2C,KAAK,CAAC,2CAA2C,CAAC;QAC1D;QACA,IAAI,IAAI,CAACxD,SAAS,CAACa,IAAI,CAAC,EAAE;UACxB,IAAI,CAACb,SAAS,CAACa,IAAI,CAAC,CAAC4C,OAAO,CAAC,CAAC;UAC9B,OAAO,IAAI,CAACzD,SAAS,CAACa,IAAI,CAAC;QAC7B;QACA,IAAMC,KAAK,GAAG,IAAI,CAACR,SAAe,CAACR,IAAI,CAAC;QACxC,IAAM4D,MAAM,GAAG5C,KAAK,GAAG,IAAIA,KAAK,CAAChB,IAAI,EAAEuD,UAAU,CAAC,GAAGzB,EAAE,CAAC+B,WAAW,CAACC,YAAY,CAAC9D,IAAI,EAAEuD,UAAU,CAAC;QAClG,IAAIC,MAAM,EAAE;UACVI,MAAM,CAACG,YAAY,GAAGP,MAAM;QAC9B;QACA,IAAI,CAACtD,SAAS,CAACa,IAAI,CAAC,GAAG6C,MAAM;QAC7BA,MAAM,CAACI,OAAO,CAACjD,IAAI,CAAC;QACpB,IAAMkD,KAAK,GAAGnC,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;QACzCuB,MAAM,CAACM,WAAW,CAAC,iBAAiB,EAAE,UAAAC,EAAE,EAAI;UAC1C,IAAMhC,IAAI,GAAG,CAAC,CAAC;UACf;UACAA,IAAI,YAAAiC,MAAA,CAAYrD,IAAI,gBAAa,GAAGoD,EAAE,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;UACxD;UACAJ,KAAK,CAACK,UAAU,CAAC,QAAQ,EAAEnC,IAAI,CAAC;QAClC,CAAC,CAAC;QACFyB,MAAM,CAACW,MAAM,GAAG,UAAApC,IAAI;UAAA,OAAI8B,KAAK,CAACK,UAAU,CAACvD,IAAI,EAAEoB,IAAI,CAAC;QAAA,EAAC,CAAC;QACtD,IAAIL,EAAE,CAACC,MAAM,CAACyC,SAAS,EAAE;UACvB,IAAMC,cAAc,GAAG3C,EAAE,CAAC4C,MAAM,CAACC,MAAM,CAACtC,WAAW,CAAC,CAAC;UACrDuB,MAAM,CAACgB,MAAM,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;YAC9BL,cAAc,CAACG,MAAM,CAAC9C,EAAE,CAAC4C,MAAM,CAACC,MAAM,CAACI,OAAO,EAAEF,CAAC,EAAEC,CAAC,EAAE;cACpD/D,IAAI,EAAEA,IAAI;cACVf,IAAI,EAAEA;YACR,CAAC,CAAC;UACJ,CAAC;QACH;QACA4D,MAAM,CAACoB,SAAS,GAAG,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC;QAErD,IAAIpD,EAAE,CAACC,MAAM,CAACoD,aAAa,IAAIlD,MAAM,CAACmD,MAAM,EAAE;UAC5CA,MAAM,CAACC,cAAc,CAAC,UAAUC,KAAK,EAAE;YACrCA,KAAK,CAACC,MAAM,CAAC,UAAU,GAAGxE,IAAI,EAAEf,IAAI,CAAC;YACrC,IAAMwF,SAAS,GAAG5B,MAAM,CAAC6B,SAAS,CAAC,CAAC;YACpC,IAAID,SAAS,EAAE;cACbF,KAAK,CAACC,MAAM,CAAC,iBAAiB,GAAGxE,IAAI,EAAEyE,SAAS,CAAC;YACnD;YACA,IAAIzE,IAAI,KAAK,MAAM,IAAIe,EAAE,CAACC,MAAM,CAAC2D,YAAY,EAAE;cAC7CJ,KAAK,CAACC,MAAM,CAAC,iBAAiB,EAAEzD,EAAE,CAACC,MAAM,CAAC2D,YAAY,CAAC;YACzD;UACF,CAAC,CAAC;UACF9B,MAAM,CAACM,WAAW,CAAC,eAAe,EAAE;YAAA,OAAMT,KAAI,CAACkC,kBAAkB,CAAC5E,IAAI,CAAC;UAAA,EAAC;QAC1E;QACA,IAAI,CAAC,IAAI,CAACT,SAAwB,EAAE;UAClC,IAAMsF,GAAG,GAAGlG,EAAE,CAACmG,IAAI,CAACC,IAAI,CAACC,cAAc,CAAC,CAAC;UACzC,IAAIH,GAAG,EAAE;YACP,IAAI,CAACtF,SAAwB,GAAGsF,GAAG,CAAC1B,WAAW,CAC7C,cAAc,EACd,IAAI,CAAC8B,gBAAgB,EACrB,IACF,CAAC;UACH;QACF;;QAEA;QACApC,MAAM,CAACM,WAAW,CAAC,iBAAiB,EAAE;UAAA,OAAMT,KAAI,CAACwC,uBAAuB,CAAClF,IAAI,CAAC;QAAA,EAAC;QAE/E,OAAO6C,MAAM;MACf,CAAC;MAEDsC,YAAY,WAAAA,aAACtC,MAAM,EAAE;QACnB,KAAK,IAAI7C,IAAI,IAAI,IAAI,CAACb,SAAS,EAAE;UAC/B,IAAI,IAAI,CAACA,SAAS,CAACa,IAAI,CAAC,KAAK6C,MAAM,EAAE;YACnC,OAAO,IAAI,CAAC1D,SAAS,CAACa,IAAI,CAAC;YAC3B;UACF;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIoF,SAAS,WAAAA,UAACpF,IAAI,EAAE;QACd,OAAOqF,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAACrG,SAAS,EAAEa,IAAI,CAAC;MACnE,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIyF,SAAS,WAAAA,UAACC,WAAW,EAAE;QACrB,IAAIA,WAAW,KAAK,QAAQ,EAAE;UAC5B,IAAI,CAAC,IAAI,CAACN,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC7B,IAAI,CAACjG,SAAS,CAACwG,MAAM,GAAG,IAAI5E,EAAE,CAAC6E,EAAE,CAACC,MAAM,CAAC,CAAC;UAC5C;UACA,OAAO,IAAI,CAAC1G,SAAS,CAACwG,MAAM;QAC9B;QACA,IAAI,CAACD,WAAW,EAAE;UAChBA,WAAW,GAAG3E,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACG,qBAAqB,CAAC,CAAC;QACnE;QACA,IAAI,CAAC,IAAI,CAACtC,SAAS,CAACuG,WAAW,CAAC,EAAE;UAChC,IAAI3E,EAAE,CAACC,MAAM,CAACC,QAAQ,EAAE;YACtB;YACA,OAAO,IAAI,CAACO,gBAAgB,CAAC,WAAW,EAAE,WAAW,CAAC;UACxD;UACA;UACA,OAAO,IAAI,CAACsE,eAAe,CAACJ,WAAW,CAAC;QAC1C;QACA,OAAO,IAAI,CAACvG,SAAS,CAACuG,WAAW,CAAC;MACpC,CAAC;MAEDI,eAAe,WAAAA,gBAAC7G,IAAI,EAAE;QACpB,IAAIA,IAAI,KAAK,QAAQ,EAAE;UACrB,IAAI,CAAC,IAAI,CAACmG,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC7B,IAAI,CAACjG,SAAS,CAACwG,MAAM,GAAG,IAAI5E,EAAE,CAAC6E,EAAE,CAACC,MAAM,CAAC,CAAC;UAC5C;UACA,OAAO,IAAI,CAAC1G,SAAS,CAACwG,MAAM;QAC9B;QACA,IAAI9C,MAAM;QACV,KAAK,IAAM7C,IAAI,IAAI,IAAI,CAACb,SAAS,EAAE;UACjC0D,MAAM,GAAG,IAAI,CAAC1D,SAAS,CAACa,IAAI,CAAC;UAC7B,IAAI6C,MAAM,CAACkD,OAAO,CAAC,CAAC,KAAK9G,IAAI,EAAE;YAC7B,OAAO4D,MAAM;UACf;QACF;QACA,OAAO,IAAI;MACb,CAAC;MAEDmD,UAAU,WAAAA,WAAA,EAAG;QACX,OAAO,IAAI,CAAC7G,SAAS;MACvB,CAAC;MAED8G,iBAAiB,WAAAA,kBAAA,EAAG;QAClB;QACA,IAAI,CAAC,IAAI,CAACb,SAAS,CAAC,QAAQ,CAAC,EAAE;UAC7B,IAAI,CAACjG,SAAS,CAACwG,MAAM,GAAG,IAAI5E,EAAE,CAAC6E,EAAE,CAACC,MAAM,CAAC,CAAC;QAC5C;QACA,IAAMhD,MAAM,GAAG,IAAI,CAAC1D,SAAS,CAACwG,MAAM;QACpC,IAAMO,oBAAoB,GAAGnF,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC6E,YAAY,CAAC,QAAQ,CAAC;QAC/E,IAAID,oBAAoB,CAAC3D,MAAM,KAAK,CAAC,EAAE;UACrCM,MAAM,CAACuD,SAAS,CAACF,oBAAoB,CAAC;QACxC;MACF,CAAC;MAED;AACJ;AACA;MACIG,oBAAoB,WAAAA,qBAAA,EAAG;QAAA,IAAAC,MAAA;QACrBjB,MAAM,CAACkB,mBAAmB,CAAC,IAAI,CAACpH,SAAS,CAAC,CAACqH,OAAO,CAAC,UAAAxG,IAAI,EAAI;UACzDsG,MAAI,CAACG,mBAAmB,CAACzG,IAAI,CAAC;QAChC,CAAC,CAAC;MACJ,CAAC;MAEDyG,mBAAmB,WAAAA,oBAACzG,IAAI,EAAE;QAIxB,IAAM6C,MAAM,GAAG,IAAI,CAAC4C,SAAS,CAACzF,IAAI,CAAC;QACnC,IAAIe,EAAE,CAACC,MAAM,CAAC0F,kBAAkB,EAAE;UAChC;UACA7D,MAAM,CAAC8D,mBAAmB,CAAC5F,EAAE,CAAC+B,WAAW,CAAC8D,mBAAmB,CAACC,mBAAmB,CAAC7G,IAAI,CAAC,CAAC;QAC1F;QACA,IAAMkG,oBAAoB,GAAGnF,EAAE,CAACK,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC6E,YAAY,CAACnG,IAAI,CAAC;QAC3E,IAAIkG,oBAAoB,CAAC3D,MAAM,KAAK,CAAC,EAAE;UACrCM,MAAM,CAACuD,SAAS,CAACF,oBAAoB,CAAC;QACxC;MACF,CAAC;MAEDjB,gBAAgB,WAAAA,iBAAA,EAAG;QAAA,IAAA6B,MAAA;QACjB,IAAMjC,GAAG,GAAGlG,EAAE,CAACmG,IAAI,CAACC,IAAI,CAACC,cAAc,CAAC,CAAC;QACzC,IAAIH,GAAG,CAACkC,QAAQ,CAAC,CAAC,EAAE;UAClB,IAAI,IAAI,CAAC1H,SAAiB,EAAE;YAC1B,IAAI,CAACA,SAAiB,CAACuD,OAAO,CAAC,CAAC;YAChC,IAAI,CAACvD,SAAiB,GAAG,IAAI;UAC/B;UACAgG,MAAM,CAACkB,mBAAmB,CAAC,IAAI,CAACpH,SAAS,CAAC,CAACqH,OAAO,CAAC,UAAAd,WAAW,EAAI;YAChE,IAAM7C,MAAM,GAAGiE,MAAI,CAAC3H,SAAS,CAACuG,WAAW,CAAC;YAC1C,IAAI,CAAC7C,MAAM,CAACmE,WAAW,CAAC,CAAC,IAAIF,MAAI,CAACxH,SAAkB,EAAE;cACpD;cACAX,EAAE,CAACsI,GAAG,CAACC,MAAM,CAACC,KAAK,CAACL,MAAI,gBAAAzD,MAAA,CAAgBqC,WAAW,wBAAqB,CAAC;cAEzE7C,MAAM,CAACuE,OAAO,CAAC,IAAI,CAAC;YACtB;UACF,CAAC,CAAC;;UAEF;UACA,IAAI,CAAC,IAAI,CAAChI,SAAoB,EAAE;YAC9B,IAAI,CAACA,SAAoB,GAAG,IAAIT,EAAE,CAAC0I,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;YACpD,IAAI,CAAClI,SAAoB,CAAC+D,WAAW,CAAC,UAAU,EAAE,YAAM;cACtD,IAAI0B,GAAG,CAACkC,QAAQ,CAAC,CAAC,EAAE;gBAClB1B,MAAM,CAACkB,mBAAmB,CAACO,MAAI,CAAC3H,SAAS,CAAC,CAACqH,OAAO,CAACM,MAAI,CAAC5B,uBAAuB,EAAE4B,MAAI,CAAC;cACxF;cACAA,MAAI,CAAC1H,SAAoB,CAACwD,OAAO,CAAC,CAAC;cACnCkE,MAAI,CAAC1H,SAAoB,GAAG,IAAI;YAClC,CAAC,CAAC;UACJ;UACA,IAAI,CAACA,SAAoB,CAACgI,OAAO,CAAC,CAAC;QACrC,CAAC,MAAM;UACL,IAAI,IAAI,CAAChI,SAAoB,EAAE;YAC7B,IAAI,CAACA,SAAoB,CAACwD,OAAO,CAAC,CAAC;YACnC,IAAI,CAACxD,SAAoB,GAAG,IAAI;UAClC;UACA,IAAI,CAAC,IAAI,CAACC,SAAiB,EAAE;YAC3B;YACA,IAAI,CAACA,SAAiB,GAAG,IAAIV,EAAE,CAAC0I,KAAK,CAACC,KAAK,CAAC,KAAK,CAAC;YAClD,IAAI,CAACjI,SAAiB,CAAC8D,WAAW,CAAC,UAAU,EAAE,YAAM;cACnDkC,MAAM,CAACkB,mBAAmB,CAACO,MAAI,CAAC3H,SAAS,CAAC,CAACqH,OAAO,CAAC,UAAAxG,IAAI,EAAI;gBACzD,IAAM6C,MAAM,GAAGiE,MAAI,CAACrB,SAAS,CAACzF,IAAI,CAAC;gBACnC,IAAI6C,MAAM,CAACmE,WAAW,CAAC,CAAC,EAAE;kBACxBnE,MAAM,CAAC0E,SAAS,CAAC,CAAC;gBACpB;cACF,CAAC,CAAC;cACFT,MAAI,CAACzH,SAAiB,CAACuD,OAAO,CAAC,CAAC;cAChCkE,MAAI,CAACzH,SAAiB,GAAG,IAAI;YAC/B,CAAC,CAAC;UACJ;UACA,IAAI,CAACA,SAAiB,CAAC+H,OAAO,CAAC,CAAC;QAClC;MACF,CAAC;MAEDlC,uBAAuB,WAAAA,wBAAClF,IAAI,EAAE;QAC5B,IAAM6C,MAAM,GAAG,IAAI,CAAC4C,SAAS,CAACzF,IAAI,CAAC;QACnC,IAAMwH,SAAS,GAAG3E,MAAM,CAACmE,WAAW,CAAC,CAAC;QACtC,IAAMS,OAAO,GAAG;UACdC,KAAK,EAAE,uBAAuB,GAAG1H,IAAI;UACrC2H,KAAK,EAAEhJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,kBAAkB,CAAC;UAC/CC,QAAQ,EAAE,QAAQ;UAClBC,MAAM,EAAE,IAAI;UACZC,SAAS,EAAE,KAAK;UAChBC,SAAS,EAAE,CAACV,SAAS,IAAI,IAAI,CAAClI,SAAkB,IAAIX,EAAE,CAACmG,IAAI,CAACC,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC+B,QAAQ,CAAC;QAC7F,CAAC;QAED,IAAMoB,SAAS,GAAGtF,MAAM,CAACuF,YAAY,CAAC,CAAC;QACvC,IAAI,CAACZ,SAAS,EAAE;UACd,IAAIW,SAAS,IAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,SAAS,CAACI,IAAI,GAAG,GAAG,EAAE;YAClDd,OAAO,CAACA,OAAO,GAAG9I,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CACpC,+BAA+B,EAC/BK,SAAS,CAACK,GAAG,EACbL,SAAS,CAACM,IAAI,EACdN,SAAS,CAACO,IACZ,CAAC;UACH,CAAC,MAAM;YACLjB,OAAO,CAACA,OAAO,GAAG9I,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,qCAAqC,EAAE9H,IAAI,CAAC;UACrF;UACAyH,OAAO,CAACkB,OAAO,GAAG;YAChBC,IAAI,EAAE,CACJ;cACEjB,KAAK,EAAEhJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,oBAAoB,CAAC;cACjDe,MAAM,WAAAA,OAAA,EAAG;gBACPhG,MAAM,CAACuE,OAAO,CAAC,CAAC;cAClB;YACF,CAAC;UAEL,CAAC;QACH,CAAC,MAAM;UACL,IAAI,CAAC9H,SAAkB,GAAG,IAAI;QAChC;QACAyB,EAAE,CAAC+D,IAAI,CAACgE,aAAa,CAACC,MAAM,CAACC,eAAe,CAACvB,OAAO,CAACC,KAAK,EAAED,OAAO,CAAC;MACtE,CAAC;MAED7C,kBAAkB,WAAAA,mBAAC5E,IAAI,EAAE;QACvB,IAAM6C,MAAM,GAAG,IAAI,CAAC4C,SAAS,CAACzF,IAAI,CAAC;QACnCqE,MAAM,CAACC,cAAc,CAAC,UAAUC,KAAK,EAAE;UACrC,IAAME,SAAS,GAAG5B,MAAM,CAAC6B,SAAS,CAAC,CAAC;UACpC,IAAID,SAAS,EAAE;YACbF,KAAK,CAACC,MAAM,CAAC,iBAAiB,GAAGxE,IAAI,EAAEyE,SAAS,CAAC;UACnD;QACF,CAAC,CAAC;MACJ,CAAC;MAEDP,kBAAkB,WAAAA,mBAAC+E,SAAS,EAAEC,OAAO,EAAE;QACrCA,OAAO,GAAGC,KAAK,CAAC7D,SAAS,CAAC8D,KAAK,CAAC5D,IAAI,CAAC6D,SAAS,EAAE,CAAC,CAAC;QAClDH,OAAO,GAAGI,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7C;QACA,IAAIM,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QACvCF,GAAG,CAACG,SAAS,GAAGT,OAAO;QACvBA,OAAO,GAAGM,GAAG,CAACI,SAAS;QACvB,IAAIC,YAAY;QAChB,QAAQZ,SAAS;UACf,KAAKlI,EAAE,CAAC6E,EAAE,CAACkE,MAAM,CAACC,WAAW,CAACC,wBAAwB;YACpDH,YAAY,GAAG;cACbnC,KAAK,EAAE,UAAU;cACjBC,KAAK,EAAEhJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,0BAA0B,CAAC;cACvDL,OAAO,EACL9I,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAClB,8FAA8F,EAC9F,uFAAuF,EACvF,MACF,CAAC,GACD,OAAO,GACPnJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,+CAA+C,CAAC,GACrE,oBAAoB,GACpBnJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,mBAAmB,CAAC,GACzC,gBAAgB,GAChBoB,OAAO,GACP,cAAc;cAChBnB,QAAQ,EAAE,QAAQ;cAClBC,MAAM,EAAE,IAAI;cACZC,SAAS,EAAE;YACb,CAAC;YAED;UAEF,KAAKlH,EAAE,CAAC6E,EAAE,CAACkE,MAAM,CAACC,WAAW,CAACE,wCAAwC;YACpEJ,YAAY,GAAG;cACbnC,KAAK,EAAE,UAAU;cACjBC,KAAK,EAAEhJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,0BAA0B,CAAC;cACvDL,OAAO,EACL9I,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAClB,oFAAoF,EACpF,uFAAuF,EACvF,MACF,CAAC,GACD,OAAO,GACPnJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,+CAA+C,CAAC,GACrE,oBAAoB,GACpBnJ,EAAE,CAACiJ,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,mBAAmB,CAAC,GACzC,gBAAgB,GAChBoB,OAAO,GACP,cAAc;cAChBnB,QAAQ,EAAE,QAAQ;cAClBC,MAAM,EAAE,IAAI;cACZC,SAAS,EAAE;YACb,CAAC;YAED;QACJ;QAEA,IAAI4B,YAAY,EAAE;UAChB9I,EAAE,CAAC+D,IAAI,CAACgE,aAAa,CAACC,MAAM,CAACC,eAAe,CAACa,YAAY,CAACnC,KAAK,EAAEmC,YAAY,CAAC;QAChF;MACF;IACF;EACF,CAAC,CAAC;EAvdF9I,EAAE,CAAC6E,EAAE,CAACsE,kBAAkB,CAACpL,aAAa,GAAGA,aAAa;AAAC"
}