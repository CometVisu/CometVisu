{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/mqtt/Client.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "cv",
    "io",
    "IClient",
    "construct",
    "backendName",
    "backendUrl",
    "initialAddresses",
    "_backendName",
    "_backendUrl",
    "URL",
    "document",
    "replace",
    "__groups",
    "__memberLookup",
    "properties",
    "connected",
    "check",
    "init",
    "event",
    "server",
    "nullable",
    "members",
    "_client",
    "getBackend",
    "hasProvider",
    "name",
    "getProviderUrl",
    "getProviderConvertFunction",
    "setInitialAddresses",
    "addresses",
    "subscribe",
    "filters",
    "forEach",
    "value",
    "login",
    "loginOnly",
    "credentials",
    "callback",
    "context",
    "self",
    "onConnect",
    "param",
    "setConnected",
    "call",
    "onFailure",
    "n",
    "notifications",
    "Router",
    "getInstance",
    "dispatchMessage",
    "title",
    "locale",
    "Manager",
    "tr",
    "message",
    "errorMessage",
    "errorCode",
    "severity",
    "unique",
    "deletable",
    "options",
    "reconnect",
    "timeout",
    "onSuccess",
    "username",
    "userName",
    "password",
    "Paho",
    "MQTT",
    "Client",
    "toString",
    "Math",
    "random",
    "substr",
    "e",
    "error",
    "onConnectionLost",
    "responseObject",
    "warn",
    "onMessageArrived",
    "update",
    "topic",
    "payloadString",
    "connect",
    "authorize",
    "req",
    "getResourcePath",
    "params",
    "hasCustomChartsDataProcessor",
    "processChartsData",
    "data",
    "write",
    "address",
    "isConnected",
    "Message",
    "destinationName",
    "qos",
    "undefined",
    "retain",
    "retained",
    "send",
    "getLastError",
    "restart",
    "full",
    "json",
    "record",
    "type",
    "showError",
    "args",
    "terminate",
    "disconnect",
    "destruct",
    "mqtt"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Client.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * MQTT client\n */\nqx.Class.define('cv.io.mqtt.Client', {\n  extend: qx.core.Object,\n  implement: cv.io.IClient,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function (backendName, backendUrl) {\n    this.base(arguments);\n    this.initialAddresses = [];\n    this._backendName = backendName;\n    this._backendUrl = new URL(backendUrl || document.URL.replace(/.*:\\/\\/([^\\/:]*)(:[0-9]*)?\\/.*/, 'ws://$1:8083/'));\n    this.__groups = {};\n    this.__memberLookup = {};\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    connected: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeConnected'\n    },\n\n    server: {\n      check: 'String',\n      nullable: true,\n      event: 'changedServer'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /*\n     * @var {Paho.MQTT.Client}\n     */\n    _client: null,\n\n    /**\n     * Returns the current backend configuration\n     * @return {Map}\n     */\n    getBackend: function() {\n      return {};\n    },\n\n    /**\n     * Returns true, when the backend provides a special data provider for this kins of data\n     * @param name {String}\n     * @return {Boolean}\n     */\n    hasProvider: function (name) {\n      return false;\n    },\n\n    /**\n     * URL to the provided data\n     * @param name\n     * @return {String}\n     */\n    getProviderUrl: function (name) {\n      return null;\n    },\n\n    /**\n     * Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.\n     * @param name {String}\n     */\n    getProviderConvertFunction : function (name) {\n      return null;\n    },\n\n    /**\n     * Set a subset of addresses the client should request initially (e.g. the ones one the start page).\n     * This can be used to increase the init state loading speed by sending an initial request with a smaller\n     * subset of addresses to the backend and send the rest later.\n     * @param addresses {Array}\n     */\n    setInitialAddresses: function(addresses) {\n    },\n\n    /**\n     * Subscribe to the addresses in the parameter. The second parameter\n     * (filter) is optional\n     *\n     * @param addresses {Array?} addresses to subscribe to\n     * @param filters {Array?} Filters\n     *\n     */\n    subscribe : function (addresses, filters) {\n      addresses.forEach(value => this._client.subscribe(value));\n    },\n\n    /**\n     * This function starts the communication by a login and then runs the\n     * ongoing communication task\n     *\n     * @param loginOnly {Boolean} if true only login and backend configuration, no subscription\n     *                            to addresses (default: false)\n     * @param credentials {Map} map with \"username\" and \"password\" (optional)\n     * @param callback {Function} call this function when login is done\n     * @param context {Object} context for the callback (this)\n     *\n     */\n    login : function (loginOnly, credentials, callback, context) {\n      let self = this;\n\n      /**\n       * @param param\n       */\n      function onConnect(param) {\n        self.setConnected(true);\n        if (callback) {\n          callback.call(context);\n        }\n      }\n\n      /**\n       * @param param\n       */\n      function onFailure(param) {\n        self.setConnected(false);\n        let n = cv.core.notifications.Router.getInstance();\n        n.dispatchMessage('cv.client.connection', {\n          title: 'MQTT: ' + qx.locale.Manager.tr('Connection error'),\n          message: param.errorMessage + '<br/>\\nCode: ' + param.errorCode,\n          severity: 'urgent',\n          unique: true,\n          deletable: false\n        }, 'popup');\n      }\n\n      let options = {\n        reconnect: true,\n        timeout: 10,\n        onSuccess: onConnect,\n        onFailure: onFailure\n      };\n\n      if (this._backendUrl.username !== '') {\n        options.userName = this._backendUrl.username;\n      }\n      if (this._backendUrl.password !== '') {\n        options.password = this._backendUrl.password;\n      }\n\n      try {\n        this._client = new Paho.MQTT.Client(this._backendUrl.toString(), 'CometVisu_' + Math.random().toString(16).substr(2, 8));\n      } catch (e) {\n        self.error('MQTT Client error:', e);\n        self.setConnected(false);\n        return;\n      }\n\n      this._client.onConnectionLost = function (responseObject) {\n        self.warn('Connection Lost: ' + responseObject.errorMessage, responseObject);\n        self.setConnected(false);\n      };\n\n      this._client.onMessageArrived = function (message) {\n        let update = {};\n        update[message.topic] = message.payloadString;\n        self.update(update);\n      };\n\n      try {\n        this._client.connect(options);\n      } catch (e) {\n        onFailure({\n          errorMessage: e.toString(),\n          errorCode: 'login -> _client.connect(' + this._backendUrl + ')'\n        });\n      }\n    },\n\n    /**\n     * Authorize a Request by adding the necessary headers.\n     * @param req {qx.io.request.Xhr}\n     */\n    authorize: function (req) {},\n\n    /**\n     * return the relative path to a resource on the currently used backend\n     *\n     * @param name {String} Name of the resource (e.g. login, read, write, rrd)\n     * @param params {Map?} optional data needed to generate the resource path\n     * @return {String|null} relative path to the resource, returns `null` when the backend does not provide that resource\n     */\n    getResourcePath : function (name, params) {},\n\n    /**\n     * This client provides an own processor for charts data\n     * @return {Boolean}\n     */\n    hasCustomChartsDataProcessor : function () {},\n\n    /**\n     * For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle\n     * @param data {var}\n     */\n    processChartsData : function (data) {},\n\n    /**\n     * This function sends a value\n     * @param address {String} address to send the value to\n     * @param value {String} value to send\n     * @param options {Object} optional options, depending on backend\n     *\n     */\n    write : function (address, value, options) {\n      if (this.isConnected()) {\n        let message = new Paho.MQTT.Message(value.toString());\n        message.destinationName = address;\n        if (options.qos !== undefined) {\n          message.qos = options.qos;\n        }\n        if (options.retain !== undefined) {\n          message.retained = options.retain;\n        }\n        this._client.send(message);\n      }\n    },\n\n    /**\n     * Get the last recorded error\n     *\n     * @return {{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}\n     */\n    getLastError: function() {},\n\n    /**\n     * Restart the connection\n     * @param full\n     */\n    restart: function(full) {},\n\n    /**\n     * Handle the incoming state updates. This method is not implemented by the client itself.\n     * It is injected by the project using the client.\n     * @param json\n     */\n    update: function(json) {}, // jshint ignore:line\n\n    /**\n     * Can be overridden to record client communication with backend\n     * @param type {String} type of event to record\n     * @param data {Object} data to record\n     */\n    record: function(type, data) {},\n\n    /**\n     * Can be overridden to provide an error handler for client errors\n     * @param type {Number} one of cv.io.Client.ERROR_CODES\n     * @param message {String} detailed error message\n     * @param args\n     */\n    showError: function(type, message, args) {},\n\n    terminate: function () {\n      if (this.isConnected()) {\n        this._client.disconnect();\n      }\n    },\n\n    /**\n     * Destructor\n     */\n    destruct: function () {\n      if (this.isConnected()) {\n        this._client.disconnect();\n      }\n      this._client = null;\n    }\n  }\n\n});\n"
  ]
}