{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cv",
    "io",
    "AbstractClient",
    "implement",
    "IClient",
    "construct",
    "type",
    "backendUrl",
    "constructor",
    "call",
    "initialAddresses",
    "_type",
    "_backendUrl",
    "URL",
    "document",
    "replace",
    "__groups",
    "__memberLookup",
    "members",
    "_client",
    "_clientOptions",
    "addresses",
    "getBackend",
    "getType",
    "hasProvider",
    "name",
    "getProviderUrl",
    "getProviderConvertFunction",
    "getProviderData",
    "format",
    "setInitialAddresses",
    "subscribe",
    "filters",
    "_this",
    "forEach",
    "value",
    "addSubscription",
    "address",
    "includes",
    "push",
    "login",
    "loginOnly",
    "credentials",
    "callback",
    "context",
    "self",
    "onConnect",
    "param",
    "setConnected",
    "onFailure",
    "n",
    "core",
    "notifications",
    "Router",
    "getInstance",
    "dispatchMessage",
    "title",
    "locale",
    "Manager",
    "tr",
    "message",
    "errorMessage",
    "errorCode",
    "severity",
    "unique",
    "deletable",
    "options",
    "reconnect",
    "timeout",
    "onSuccess",
    "username",
    "userName",
    "password",
    "Paho",
    "MQTT",
    "Client",
    "toString",
    "Math",
    "random",
    "substr",
    "e",
    "error",
    "onConnectionLost",
    "responseObject",
    "warn",
    "onMessageArrived",
    "update",
    "topic",
    "payloadString",
    "record",
    "__connect",
    "report",
    "Record",
    "REPLAYING",
    "connect",
    "authorize",
    "req",
    "getResourcePath",
    "params",
    "hasCustomChartsDataProcessor",
    "processChartsData",
    "data",
    "write",
    "isConnected",
    "Message",
    "destinationName",
    "qos",
    "undefined",
    "retain",
    "retained",
    "send",
    "getLastError",
    "restart",
    "full",
    "terminate",
    "json",
    "showError",
    "args",
    "disconnect",
    "destruct",
    "mqtt"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/mqtt/Client.js"
  ],
  "sourcesContent": [
    "/* Client.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * MQTT client\n */\nqx.Class.define('cv.io.mqtt.Client', {\n  extend: cv.io.AbstractClient,\n  implement: cv.io.IClient,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct(type, backendUrl) {\n    super();\n    this.initialAddresses = [];\n    this._type = type;\n    this._backendUrl = new URL(backendUrl || document.URL.replace(/.*:\\/\\/([^\\/:]*)(:[0-9]*)?\\/.*/, 'ws://$1:8083/'));\n\n    this.__groups = {};\n    this.__memberLookup = {};\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /*\n     * @var {Paho.MQTT.Client}\n     */\n    _client: null,\n    _clientOptions: null,\n    _type: null,\n    addresses: null,\n\n    /**\n     * Returns the current backend configuration\n     * @return {Map}\n     */\n    getBackend() {\n      return {};\n    },\n\n    getType() {\n      return this._type;\n    },\n\n    /**\n     * Returns true, when the backend provides a special data provider for this kins of data\n     * @param name {String}\n     * @return {Boolean}\n     */\n    hasProvider(name) {\n      return false;\n    },\n\n    /**\n     * URL to the provided data\n     * @param name\n     * @return {String}\n     */\n    getProviderUrl(name) {\n      return null;\n    },\n\n    /**\n     * Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.\n     * @param name {String}\n     */\n    getProviderConvertFunction(name) {\n      return null;\n    },\n\n    getProviderData: function (name, format) {\n      return null;\n    },\n\n    /**\n     * Set a subset of addresses the client should request initially (e.g. the ones one the start page).\n     * This can be used to increase the init state loading speed by sending an initial request with a smaller\n     * subset of addresses to the backend and send the rest later.\n     * @param addresses {Array}\n     */\n    setInitialAddresses(addresses) {},\n\n    /**\n     * Subscribe to the addresses in the parameter. The second parameter\n     * (filter) is optional\n     *\n     * @param addresses {Array?} addresses to subscribe to\n     * @param filters {Array?} Filters\n     *\n     */\n    subscribe(addresses, filters) {\n      this.addresses = addresses ? addresses : [];\n      addresses.forEach(value => this._client.subscribe(value));\n    },\n\n    addSubscription(address) {\n      if (!this.addresses.includes(address)) {\n        this.addresses.push(address);\n        this._client.subscribe(address);\n      }\n    },\n\n    /**\n     * This function starts the communication by a login and then runs the\n     * ongoing communication task\n     *\n     * @param loginOnly {Boolean} if true only login and backend configuration, no subscription\n     *                            to addresses (default: false)\n     * @param credentials {Map} map with \"username\" and \"password\" (optional)\n     * @param callback {Function} call this function when login is done\n     * @param context {Object} context for the callback (this)\n     *\n     */\n    login(loginOnly, credentials, callback, context) {\n      let self = this;\n\n      /**\n       * @param param\n       */\n      function onConnect(param) {\n        self.setConnected(true);\n        if (callback) {\n          callback.call(context);\n        }\n      }\n\n      /**\n       * @param param\n       */\n      function onFailure(param) {\n        self.setConnected(false);\n        let n = cv.core.notifications.Router.getInstance();\n        n.dispatchMessage(\n          'cv.client.connection',\n          {\n            title: 'MQTT: ' + qx.locale.Manager.tr('Connection error'),\n            message: param.errorMessage + '<br/>\\nCode: ' + param.errorCode,\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          },\n\n          'popup'\n        );\n      }\n\n      let options = {\n        reconnect: true,\n        timeout: 10,\n        onSuccess: onConnect,\n        onFailure: onFailure\n      };\n\n      if (this._backendUrl.username !== '') {\n        options.userName = this._backendUrl.username;\n      }\n      if (credentials && credentials.username !== '') {\n        options.userName = credentials.username;\n      }\n      if (this._backendUrl.password !== '') {\n        options.password = this._backendUrl.password;\n      }\n      if (credentials && credentials.password !== '') {\n        options.password = credentials.password;\n      }\n\n      try {\n        this._client = new Paho.MQTT.Client(\n          this._backendUrl.toString(),\n          'CometVisu_' + Math.random().toString(16).substr(2, 8)\n        );\n      } catch (e) {\n        self.error('MQTT Client error:', e);\n        self.setConnected(false);\n        return;\n      }\n\n      this._client.onConnectionLost = function (responseObject) {\n        self.warn('Connection Lost: ' + responseObject.errorMessage, responseObject);\n\n        self.setConnected(false);\n      };\n\n      this._client.onMessageArrived = function (message) {\n        let update = {};\n        update[message.topic] = message.payloadString;\n\n        self.record('update', update);\n        self.update(update);\n      };\n\n      this._clientOptions = options;\n      this.__connect();\n    },\n\n    /**\n     * Connect to the MQTT server\n     */\n    __connect() {\n      try {\n        if (!cv.report.Record.REPLAYING) {\n          this._client.connect(this._clientOptions);\n        }\n      } catch (e) {\n        this._clientOptions.onFailure({\n          errorMessage: e.toString(),\n          errorCode: 'login -> _client.connect(' + this._backendUrl + ')'\n        });\n      }\n    },\n\n    /**\n     * Authorize a Request by adding the necessary headers.\n     * @param req {qx.io.request.Xhr}\n     */\n    authorize(req) {},\n\n    /**\n     * return the relative path to a resource on the currently used backend\n     *\n     * @param name {String} Name of the resource (e.g. login, read, write, rrd)\n     * @param params {Map?} optional data needed to generate the resource path\n     * @return {String|null} relative path to the resource, returns `null` when the backend does not provide that resource\n     */\n    getResourcePath(name, params) {},\n\n    /**\n     * This client provides an own processor for charts data\n     * @return {Boolean}\n     */\n    hasCustomChartsDataProcessor() {},\n\n    /**\n     * For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle\n     * @param data {var}\n     */\n    processChartsData(data) {},\n\n    /**\n     * This function sends a value\n     * @param address {String} address to send the value to\n     * @param value {String} value to send\n     * @param options {Object} optional options, depending on backend\n     *\n     */\n    write(address, value, options) {\n      if (this.isConnected()) {\n        let message = new Paho.MQTT.Message(value.toString());\n        message.destinationName = address;\n        if (options.qos !== undefined) {\n          message.qos = options.qos;\n        }\n        if (options.retain !== undefined) {\n          message.retained = options.retain;\n        }\n        this._client.send(message);\n      }\n    },\n\n    /**\n     * Get the last recorded error\n     *\n     * @return {{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}\n     */\n    getLastError() {},\n\n    /**\n     * Restart the connection\n     * @param full\n     */\n    restart(full) {\n      this.terminate();\n      this.__connect();\n    },\n\n    /**\n     * Handle the incoming state updates. This method is not implemented by the client itself.\n     * It is injected by the project using the client.\n     * @param json\n     */\n    update(json) {},\n\n    /**\n     * Can be overridden to record client communication with backend\n     * @param type {String} type of event to record\n     * @param data {Object} data to record\n     */\n    record(type, data) {},\n\n    /**\n     * Can be overridden to provide an error handler for client errors\n     * @param type {Number} one of cv.io.Client.ERROR_CODES\n     * @param message {String} detailed error message\n     * @param args\n     */\n    showError(type, message, args) {},\n\n    terminate() {\n      if (this.isConnected()) {\n        this._client.disconnect();\n      }\n    },\n\n    /**\n     * Destructor\n     */\n    destruct() {\n      if (this.isConnected()) {\n        this._client.disconnect();\n      }\n      this._client = null;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}