{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cv",
    "io",
    "AbstractClient",
    "implement",
    "IClient",
    "construct",
    "type",
    "backendUrl",
    "initialAddresses",
    "_type",
    "_backendUrl",
    "URL",
    "document",
    "replace",
    "__groups",
    "__memberLookup",
    "properties",
    "connected",
    "check",
    "init",
    "event",
    "server",
    "nullable",
    "members",
    "_client",
    "getBackend",
    "getType",
    "hasProvider",
    "name",
    "getProviderUrl",
    "getProviderConvertFunction",
    "getProviderData",
    "format",
    "setInitialAddresses",
    "addresses",
    "subscribe",
    "filters",
    "forEach",
    "value",
    "login",
    "loginOnly",
    "credentials",
    "callback",
    "context",
    "self",
    "onConnect",
    "param",
    "setConnected",
    "call",
    "onFailure",
    "n",
    "core",
    "notifications",
    "Router",
    "getInstance",
    "dispatchMessage",
    "title",
    "locale",
    "Manager",
    "tr",
    "message",
    "errorMessage",
    "errorCode",
    "severity",
    "unique",
    "deletable",
    "options",
    "reconnect",
    "timeout",
    "onSuccess",
    "username",
    "userName",
    "password",
    "Paho",
    "MQTT",
    "Client",
    "toString",
    "Math",
    "random",
    "substr",
    "e",
    "error",
    "onConnectionLost",
    "responseObject",
    "warn",
    "onMessageArrived",
    "update",
    "topic",
    "payloadString",
    "connect",
    "authorize",
    "req",
    "getResourcePath",
    "params",
    "hasCustomChartsDataProcessor",
    "processChartsData",
    "data",
    "write",
    "address",
    "isConnected",
    "Message",
    "destinationName",
    "qos",
    "undefined",
    "retain",
    "retained",
    "send",
    "getLastError",
    "restart",
    "full",
    "json",
    "record",
    "showError",
    "args",
    "terminate",
    "disconnect",
    "destruct",
    "mqtt"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/mqtt/Client.js"
  ],
  "sourcesContent": [
    "/* Client.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * MQTT client\n */\nqx.Class.define('cv.io.mqtt.Client', {\n  extend: cv.io.AbstractClient,\n  implement: cv.io.IClient,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct(type, backendUrl) {\n    super();\n    this.initialAddresses = [];\n    this._type = type;\n    this._backendUrl = new URL(backendUrl || document.URL.replace(/.*:\\/\\/([^\\/:]*)(:[0-9]*)?\\/.*/, 'ws://$1:8083/'));\n\n    this.__groups = {};\n    this.__memberLookup = {};\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    connected: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeConnected'\n    },\n\n    server: {\n      check: 'String',\n      nullable: true,\n      event: 'changedServer'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /*\n     * @var {Paho.MQTT.Client}\n     */\n    _client: null,\n    _type: null,\n\n    /**\n     * Returns the current backend configuration\n     * @return {Map}\n     */\n    getBackend() {\n      return {};\n    },\n\n    getType() {\n      return this._type;\n    },\n\n    /**\n     * Returns true, when the backend provides a special data provider for this kins of data\n     * @param name {String}\n     * @return {Boolean}\n     */\n    hasProvider(name) {\n      return false;\n    },\n\n    /**\n     * URL to the provided data\n     * @param name\n     * @return {String}\n     */\n    getProviderUrl(name) {\n      return null;\n    },\n\n    /**\n     * Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.\n     * @param name {String}\n     */\n    getProviderConvertFunction(name) {\n      return null;\n    },\n\n    getProviderData: function (name, format) {\n      return null;\n    },\n\n    /**\n     * Set a subset of addresses the client should request initially (e.g. the ones one the start page).\n     * This can be used to increase the init state loading speed by sending an initial request with a smaller\n     * subset of addresses to the backend and send the rest later.\n     * @param addresses {Array}\n     */\n    setInitialAddresses(addresses) {},\n\n    /**\n     * Subscribe to the addresses in the parameter. The second parameter\n     * (filter) is optional\n     *\n     * @param addresses {Array?} addresses to subscribe to\n     * @param filters {Array?} Filters\n     *\n     */\n    subscribe(addresses, filters) {\n      addresses.forEach(value => this._client.subscribe(value));\n    },\n\n    /**\n     * This function starts the communication by a login and then runs the\n     * ongoing communication task\n     *\n     * @param loginOnly {Boolean} if true only login and backend configuration, no subscription\n     *                            to addresses (default: false)\n     * @param credentials {Map} map with \"username\" and \"password\" (optional)\n     * @param callback {Function} call this function when login is done\n     * @param context {Object} context for the callback (this)\n     *\n     */\n    login(loginOnly, credentials, callback, context) {\n      let self = this;\n\n      /**\n       * @param param\n       */\n      function onConnect(param) {\n        self.setConnected(true);\n        if (callback) {\n          callback.call(context);\n        }\n      }\n\n      /**\n       * @param param\n       */\n      function onFailure(param) {\n        self.setConnected(false);\n        let n = cv.core.notifications.Router.getInstance();\n        n.dispatchMessage(\n          'cv.client.connection',\n          {\n            title: 'MQTT: ' + qx.locale.Manager.tr('Connection error'),\n            message: param.errorMessage + '<br/>\\nCode: ' + param.errorCode,\n            severity: 'urgent',\n            unique: true,\n            deletable: false\n          },\n\n          'popup'\n        );\n      }\n\n      let options = {\n        reconnect: true,\n        timeout: 10,\n        onSuccess: onConnect,\n        onFailure: onFailure\n      };\n\n      if (this._backendUrl.username !== '') {\n        options.userName = this._backendUrl.username;\n      }\n      if (this._backendUrl.password !== '') {\n        options.password = this._backendUrl.password;\n      }\n\n      try {\n        this._client = new Paho.MQTT.Client(\n          this._backendUrl.toString(),\n          'CometVisu_' + Math.random().toString(16).substr(2, 8)\n        );\n      } catch (e) {\n        self.error('MQTT Client error:', e);\n        self.setConnected(false);\n        return;\n      }\n\n      this._client.onConnectionLost = function (responseObject) {\n        self.warn('Connection Lost: ' + responseObject.errorMessage, responseObject);\n\n        self.setConnected(false);\n      };\n\n      this._client.onMessageArrived = function (message) {\n        let update = {};\n        update[message.topic] = message.payloadString;\n        self.update(update);\n      };\n\n      try {\n        this._client.connect(options);\n      } catch (e) {\n        onFailure({\n          errorMessage: e.toString(),\n          errorCode: 'login -> _client.connect(' + this._backendUrl + ')'\n        });\n      }\n    },\n\n    /**\n     * Authorize a Request by adding the necessary headers.\n     * @param req {qx.io.request.Xhr}\n     */\n    authorize(req) {},\n\n    /**\n     * return the relative path to a resource on the currently used backend\n     *\n     * @param name {String} Name of the resource (e.g. login, read, write, rrd)\n     * @param params {Map?} optional data needed to generate the resource path\n     * @return {String|null} relative path to the resource, returns `null` when the backend does not provide that resource\n     */\n    getResourcePath(name, params) {},\n\n    /**\n     * This client provides an own processor for charts data\n     * @return {Boolean}\n     */\n    hasCustomChartsDataProcessor() {},\n\n    /**\n     * For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle\n     * @param data {var}\n     */\n    processChartsData(data) {},\n\n    /**\n     * This function sends a value\n     * @param address {String} address to send the value to\n     * @param value {String} value to send\n     * @param options {Object} optional options, depending on backend\n     *\n     */\n    write(address, value, options) {\n      if (this.isConnected()) {\n        let message = new Paho.MQTT.Message(value.toString());\n        message.destinationName = address;\n        if (options.qos !== undefined) {\n          message.qos = options.qos;\n        }\n        if (options.retain !== undefined) {\n          message.retained = options.retain;\n        }\n        this._client.send(message);\n      }\n    },\n\n    /**\n     * Get the last recorded error\n     *\n     * @return {{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}\n     */\n    getLastError() {},\n\n    /**\n     * Restart the connection\n     * @param full\n     */\n    restart(full) {},\n\n    /**\n     * Handle the incoming state updates. This method is not implemented by the client itself.\n     * It is injected by the project using the client.\n     * @param json\n     */\n    update(json) {},\n\n    /**\n     * Can be overridden to record client communication with backend\n     * @param type {String} type of event to record\n     * @param data {Object} data to record\n     */\n    record(type, data) {},\n\n    /**\n     * Can be overridden to provide an error handler for client errors\n     * @param type {Number} one of cv.io.Client.ERROR_CODES\n     * @param message {String} detailed error message\n     * @param args\n     */\n    showError(type, message, args) {},\n\n    terminate() {\n      if (this.isConnected()) {\n        this._client.disconnect();\n      }\n    },\n\n    /**\n     * Destructor\n     */\n    destruct() {\n      if (this.isConnected()) {\n        this._client.disconnect();\n      }\n      this._client = null;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;IACnCC,MAAM,EAAEC,EAAE,CAACC,EAAH,CAAMC,cADqB;IAEnCC,SAAS,EAAEH,EAAE,CAACC,EAAH,CAAMG,OAFkB;;IAInC;AACF;AACA;AACA;AACA;IACEC,SATmC,qBASzBC,IATyB,EASnBC,UATmB,EASP;MAC1B;MACA,KAAKC,gBAAL,GAAwB,EAAxB;MACA,KAAKC,KAAL,GAAaH,IAAb;MACA,KAAKI,WAAL,GAAmB,IAAIC,GAAJ,CAAQJ,UAAU,IAAIK,QAAQ,CAACD,GAAT,CAAaE,OAAb,CAAqB,gCAArB,EAAuD,eAAvD,CAAtB,CAAnB;MAEA,KAAKC,SAAL,GAAgB,EAAhB;MACA,KAAKC,SAAL,GAAsB,EAAtB;IACD,CAjBkC;;IAmBnC;AACF;AACA;AACA;AACA;IACEC,UAAU,EAAE;MACVC,SAAS,EAAE;QACTC,KAAK,EAAE,SADE;QAETC,IAAI,EAAE,KAFG;QAGTC,KAAK,EAAE;MAHE,CADD;MAOVC,MAAM,EAAE;QACNH,KAAK,EAAE,QADD;QAENI,QAAQ,EAAE,IAFJ;QAGNF,KAAK,EAAE;MAHD;IAPE,CAxBuB;;IAsCnC;AACF;AACA;AACA;AACA;IACEG,OAAO,EAAE;MACP;AACJ;AACA;MACIC,OAAO,EAAE,IAJF;MAKPf,KAAK,EAAE,IALA;;MAOP;AACJ;AACA;AACA;MACIgB,UAXO,wBAWM;QACX,OAAO,EAAP;MACD,CAbM;MAePC,OAfO,qBAeG;QACR,OAAO,KAAKjB,KAAZ;MACD,CAjBM;;MAmBP;AACJ;AACA;AACA;AACA;MACIkB,WAxBO,uBAwBKC,IAxBL,EAwBW;QAChB,OAAO,KAAP;MACD,CA1BM;;MA4BP;AACJ;AACA;AACA;AACA;MACIC,cAjCO,0BAiCQD,IAjCR,EAiCc;QACnB,OAAO,IAAP;MACD,CAnCM;;MAqCP;AACJ;AACA;AACA;MACIE,0BAzCO,sCAyCoBF,IAzCpB,EAyC0B;QAC/B,OAAO,IAAP;MACD,CA3CM;MA6CPG,eAAe,EAAE,yBAAUH,IAAV,EAAgBI,MAAhB,EAAwB;QACvC,OAAO,IAAP;MACD,CA/CM;;MAiDP;AACJ;AACA;AACA;AACA;AACA;MACIC,mBAvDO,+BAuDaC,SAvDb,EAuDwB,CAAE,CAvD1B;;MAyDP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAjEO,qBAiEGD,SAjEH,EAiEcE,OAjEd,EAiEuB;QAAA;;QAC5BF,SAAS,CAACG,OAAV,CAAkB,UAAAC,KAAK;UAAA,OAAI,KAAI,CAACd,OAAL,CAAaW,SAAb,CAAuBG,KAAvB,CAAJ;QAAA,CAAvB;MACD,CAnEM;;MAqEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAhFO,iBAgFDC,SAhFC,EAgFUC,WAhFV,EAgFuBC,QAhFvB,EAgFiCC,OAhFjC,EAgF0C;QAC/C,IAAIC,IAAI,GAAG,IAAX;QAEA;AACN;AACA;;QACM,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;UACxBF,IAAI,CAACG,YAAL,CAAkB,IAAlB;;UACA,IAAIL,QAAJ,EAAc;YACZA,QAAQ,CAACM,IAAT,CAAcL,OAAd;UACD;QACF;QAED;AACN;AACA;;;QACM,SAASM,SAAT,CAAmBH,KAAnB,EAA0B;UACxBF,IAAI,CAACG,YAAL,CAAkB,KAAlB;UACA,IAAIG,CAAC,GAAGlD,EAAE,CAACmD,IAAH,CAAQC,aAAR,CAAsBC,MAAtB,CAA6BC,WAA7B,EAAR;UACAJ,CAAC,CAACK,eAAF,CACE,sBADF,EAEE;YACEC,KAAK,EAAE,WAAW/D,EAAE,CAACgE,MAAH,CAAUC,OAAV,CAAkBC,EAAlB,CAAqB,kBAArB,CADpB;YAEEC,OAAO,EAAEd,KAAK,CAACe,YAAN,GAAqB,eAArB,GAAuCf,KAAK,CAACgB,SAFxD;YAGEC,QAAQ,EAAE,QAHZ;YAIEC,MAAM,EAAE,IAJV;YAKEC,SAAS,EAAE;UALb,CAFF,EAUE,OAVF;QAYD;;QAED,IAAIC,OAAO,GAAG;UACZC,SAAS,EAAE,IADC;UAEZC,OAAO,EAAE,EAFG;UAGZC,SAAS,EAAExB,SAHC;UAIZI,SAAS,EAAEA;QAJC,CAAd;;QAOA,IAAI,KAAKvC,WAAL,CAAiB4D,QAAjB,KAA8B,EAAlC,EAAsC;UACpCJ,OAAO,CAACK,QAAR,GAAmB,KAAK7D,WAAL,CAAiB4D,QAApC;QACD;;QACD,IAAI,KAAK5D,WAAL,CAAiB8D,QAAjB,KAA8B,EAAlC,EAAsC;UACpCN,OAAO,CAACM,QAAR,GAAmB,KAAK9D,WAAL,CAAiB8D,QAApC;QACD;;QAED,IAAI;UACF,KAAKhD,OAAL,GAAe,IAAIiD,IAAI,CAACC,IAAL,CAAUC,MAAd,CACb,KAAKjE,WAAL,CAAiBkE,QAAjB,EADa,EAEb,eAAeC,IAAI,CAACC,MAAL,GAAcF,QAAd,CAAuB,EAAvB,EAA2BG,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAFF,CAAf;QAID,CALD,CAKE,OAAOC,CAAP,EAAU;UACVpC,IAAI,CAACqC,KAAL,CAAW,oBAAX,EAAiCD,CAAjC;UACApC,IAAI,CAACG,YAAL,CAAkB,KAAlB;UACA;QACD;;QAED,KAAKvB,OAAL,CAAa0D,gBAAb,GAAgC,UAAUC,cAAV,EAA0B;UACxDvC,IAAI,CAACwC,IAAL,CAAU,sBAAsBD,cAAc,CAACtB,YAA/C,EAA6DsB,cAA7D;UAEAvC,IAAI,CAACG,YAAL,CAAkB,KAAlB;QACD,CAJD;;QAMA,KAAKvB,OAAL,CAAa6D,gBAAb,GAAgC,UAAUzB,OAAV,EAAmB;UACjD,IAAI0B,MAAM,GAAG,EAAb;UACAA,MAAM,CAAC1B,OAAO,CAAC2B,KAAT,CAAN,GAAwB3B,OAAO,CAAC4B,aAAhC;UACA5C,IAAI,CAAC0C,MAAL,CAAYA,MAAZ;QACD,CAJD;;QAMA,IAAI;UACF,KAAK9D,OAAL,CAAaiE,OAAb,CAAqBvB,OAArB;QACD,CAFD,CAEE,OAAOc,CAAP,EAAU;UACV/B,SAAS,CAAC;YACRY,YAAY,EAAEmB,CAAC,CAACJ,QAAF,EADN;YAERd,SAAS,EAAE,8BAA8B,KAAKpD,WAAnC,GAAiD;UAFpD,CAAD,CAAT;QAID;MACF,CA9JM;;MAgKP;AACJ;AACA;AACA;MACIgF,SApKO,qBAoKGC,GApKH,EAoKQ,CAAE,CApKV;;MAsKP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,eA7KO,2BA6KShE,IA7KT,EA6KeiE,MA7Kf,EA6KuB,CAAE,CA7KzB;;MA+KP;AACJ;AACA;AACA;MACIC,4BAnLO,0CAmLwB,CAAE,CAnL1B;;MAqLP;AACJ;AACA;AACA;MACIC,iBAzLO,6BAyLWC,IAzLX,EAyLiB,CAAE,CAzLnB;;MA2LP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,KAlMO,iBAkMDC,OAlMC,EAkMQ5D,KAlMR,EAkMe4B,OAlMf,EAkMwB;QAC7B,IAAI,KAAKiC,WAAL,EAAJ,EAAwB;UACtB,IAAIvC,OAAO,GAAG,IAAIa,IAAI,CAACC,IAAL,CAAU0B,OAAd,CAAsB9D,KAAK,CAACsC,QAAN,EAAtB,CAAd;UACAhB,OAAO,CAACyC,eAAR,GAA0BH,OAA1B;;UACA,IAAIhC,OAAO,CAACoC,GAAR,KAAgBC,SAApB,EAA+B;YAC7B3C,OAAO,CAAC0C,GAAR,GAAcpC,OAAO,CAACoC,GAAtB;UACD;;UACD,IAAIpC,OAAO,CAACsC,MAAR,KAAmBD,SAAvB,EAAkC;YAChC3C,OAAO,CAAC6C,QAAR,GAAmBvC,OAAO,CAACsC,MAA3B;UACD;;UACD,KAAKhF,OAAL,CAAakF,IAAb,CAAkB9C,OAAlB;QACD;MACF,CA9MM;;MAgNP;AACJ;AACA;AACA;AACA;MACI+C,YArNO,0BAqNQ,CAAE,CArNV;;MAuNP;AACJ;AACA;AACA;MACIC,OA3NO,mBA2NCC,IA3ND,EA2NO,CAAE,CA3NT;;MA6NP;AACJ;AACA;AACA;AACA;MACIvB,MAlOO,kBAkOAwB,IAlOA,EAkOM,CAAE,CAlOR;;MAoOP;AACJ;AACA;AACA;AACA;MACIC,MAzOO,kBAyOAzG,IAzOA,EAyOM0F,IAzON,EAyOY,CAAE,CAzOd;;MA2OP;AACJ;AACA;AACA;AACA;AACA;MACIgB,SAjPO,qBAiPG1G,IAjPH,EAiPSsD,OAjPT,EAiPkBqD,IAjPlB,EAiPwB,CAAE,CAjP1B;MAmPPC,SAnPO,uBAmPK;QACV,IAAI,KAAKf,WAAL,EAAJ,EAAwB;UACtB,KAAK3E,OAAL,CAAa2F,UAAb;QACD;MACF,CAvPM;;MAyPP;AACJ;AACA;MACIC,QA5PO,sBA4PI;QACT,IAAI,KAAKjB,WAAL,EAAJ,EAAwB;UACtB,KAAK3E,OAAL,CAAa2F,UAAb;QACD;;QACD,KAAK3F,OAAL,GAAe,IAAf;MACD;IAjQM;EA3C0B,CAArC;EAtBAxB,EAAE,CAACC,EAAH,CAAMoH,IAAN,CAAW1C,MAAX,CAAkB/E,aAAlB,GAAkCA,aAAlC"
}