{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "parse",
    "core",
    "Environment",
    "select",
    "jquery",
    "data",
    "result",
    "JSON",
    "e",
    "split",
    "forEach",
    "subData",
    "i",
    "jsonString",
    "$",
    "extend",
    "se",
    "log",
    "Logger",
    "error",
    "Object",
    "assign",
    "cv",
    "io",
    "parser",
    "Json"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/client/source/class/cv/io/parser/Json.js"
  ],
  "sourcesContent": [
    "/**\n * Sometimes the openHAB1 backend returns invalid JSON (e.g. multiple JSON object in one string)\n * This parser can handle those strings\n * @ignore($)\n */\nqx.Class.define('cv.io.parser.Json', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    parse: qx.core.Environment.select('cv.xhr', {\n      jquery(data) {\n        var result = {};\n        try {\n          result = JSON.parse(data);\n        } catch (e) {\n          data.split('}{').forEach(function (subData, i) {\n            try {\n              var jsonString = i === 0 ? subData + '}' : '{' + subData;\n              result = $.extend(result, JSON.parse(jsonString));\n            } catch (se) {\n              qx.log.Logger.error(se, data);\n              result = data; // return the bad input\n            }\n          }, this);\n        }\n        return result;\n      },\n      qx(data) {\n        var result = {};\n        try {\n          result = JSON.parse(data);\n        } catch (e) {\n          data.split('}{').forEach(function (subData, i) {\n            try {\n              var jsonString = i === 0 ? subData + '}' : '{' + subData;\n              result = Object.assign(result, JSON.parse(jsonString));\n            } catch (se) {\n              qx.log.Logger.error(se, data);\n              result = data; // return the bad input\n            }\n          }, this);\n        }\n        return result;\n      }\n    })\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;IACnCC,IAAI,EAAE,QAD6B;;IAGnC;AACF;AACA;AACA;AACA;IACEC,OAAO,EAAE;MACPC,KAAK,EAAER,EAAE,CAACS,IAAH,CAAQC,WAAR,CAAoBC,MAApB,CAA2B,QAA3B,EAAqC;QAC1CC,MAD0C,kBACnCC,IADmC,EAC7B;UACX,IAAIC,MAAM,GAAG,EAAb;;UACA,IAAI;YACFA,MAAM,GAAGC,IAAI,CAACP,KAAL,CAAWK,IAAX,CAAT;UACD,CAFD,CAEE,OAAOG,CAAP,EAAU;YACVH,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiBC,OAAjB,CAAyB,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;cAC7C,IAAI;gBACF,IAAIC,UAAU,GAAGD,CAAC,KAAK,CAAN,GAAUD,OAAO,GAAG,GAApB,GAA0B,MAAMA,OAAjD;gBACAL,MAAM,GAAGQ,CAAC,CAACC,MAAF,CAAST,MAAT,EAAiBC,IAAI,CAACP,KAAL,CAAWa,UAAX,CAAjB,CAAT;cACD,CAHD,CAGE,OAAOG,EAAP,EAAW;gBACXxB,EAAE,CAACyB,GAAH,CAAOC,MAAP,CAAcC,KAAd,CAAoBH,EAApB,EAAwBX,IAAxB;gBACAC,MAAM,GAAGD,IAAT,CAFW,CAEI;cAChB;YACF,CARD,EAQG,IARH;UASD;;UACD,OAAOC,MAAP;QACD,CAjByC;QAkB1Cd,EAlB0C;UAAA;YAAA;UAAA;;UAAA;YAAA;UAAA;;UAAA;QAAA,YAkBvCa,IAlBuC,EAkBjC;UACP,IAAIC,MAAM,GAAG,EAAb;;UACA,IAAI;YACFA,MAAM,GAAGC,IAAI,CAACP,KAAL,CAAWK,IAAX,CAAT;UACD,CAFD,CAEE,OAAOG,CAAP,EAAU;YACVH,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiBC,OAAjB,CAAyB,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;cAC7C,IAAI;gBACF,IAAIC,UAAU,GAAGD,CAAC,KAAK,CAAN,GAAUD,OAAO,GAAG,GAApB,GAA0B,MAAMA,OAAjD;gBACAL,MAAM,GAAGc,MAAM,CAACC,MAAP,CAAcf,MAAd,EAAsBC,IAAI,CAACP,KAAL,CAAWa,UAAX,CAAtB,CAAT;cACD,CAHD,CAGE,OAAOG,EAAP,EAAW;gBACXxB,EAAE,CAACyB,GAAH,CAAOC,MAAP,CAAcC,KAAd,CAAoBH,EAApB,EAAwBX,IAAxB;gBACAC,MAAM,GAAGD,IAAT,CAFW,CAEI;cAChB;YACF,CARD,EAQG,IARH;UASD;;UACD,OAAOC,MAAP;QACD,CAlCyC;MAAA,CAArC;IADA;EAR0B,CAArC;EALAgB,EAAE,CAACC,EAAH,CAAMC,MAAN,CAAaC,IAAb,CAAkB9B,aAAlB,GAAkCA,aAAlC"
}