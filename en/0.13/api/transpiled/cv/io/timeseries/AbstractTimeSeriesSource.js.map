{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "resource",
    "constructor",
    "call",
    "initConfig",
    "init",
    "statics",
    "urlRegex",
    "properties",
    "config",
    "transform",
    "deferredInit",
    "nullable",
    "members",
    "_initialized",
    "_url",
    "_init",
    "_parseResourceUrl",
    "url",
    "match",
    "cv",
    "io",
    "timeseries",
    "AbstractTimeSeriesSource",
    "exec",
    "type",
    "authority",
    "name",
    "path",
    "params",
    "split",
    "reduce",
    "map",
    "entry",
    "_entry$split",
    "_entry$split2",
    "_slicedToArray",
    "key",
    "value",
    "error",
    "_applySeries",
    "getRequestConfig",
    "start",
    "end",
    "series",
    "offset",
    "options",
    "proxy",
    "processResponse",
    "data",
    "getTimeRange",
    "res",
    "endTime",
    "_convertTimes",
    "Date",
    "startTime",
    "amount",
    "parseInt",
    "interval",
    "setTime",
    "getTime",
    "test",
    "time",
    "d"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/io/timeseries/AbstractTimeSeriesSource.js"
  ],
  "sourcesContent": [
    "/*\n * Copyright (c) 2023, Christian Mayer and the CometVisu contributors.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n *\n */\n\n/**\n * Base class for all time series sources. These classes handle building\n * and processing data from an external time series source to be able\n * to use it in a CometVisu chart component.\n */\nqx.Class.define('cv.io.timeseries.AbstractTimeSeriesSource', {\n  extend: qx.core.Object,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct(resource) {\n    super();\n    this.initConfig(resource);\n    this.init();\n  },\n\n  /*\n  ***********************************************\n    STATICS\n  ***********************************************\n  */\n  statics: {\n    urlRegex: /^(flux|openhab|rrd|demo):\\/\\/((\\w+)@)?([^\\/]+)(\\/[^?]*)?\\??(.*)/\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    config: {\n      transform: '_parseResourceUrl',\n      deferredInit: true,\n      nullable: true\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    _initialized: null,\n    _url: null,\n\n    init() {\n      if (!this._initialized) {\n        this._init();\n        this._initialized = true;\n      }\n    },\n\n    _parseResourceUrl(url) {\n      const match = cv.io.timeseries.AbstractTimeSeriesSource.urlRegex.exec(url);\n      this._url = url;\n      if (match) {\n        return {\n          type: match[1],\n          authority: match[3],\n          name: match[4],\n          path: match[5],\n          params: match[6] ? match[6].split('&').reduce((map, entry) => {\n            const [key, value] = entry.split('=');\n            map[key] = value;\n            return map;\n          }, {}) : {}\n        };\n      }\n      this.error('invalid url '+ url + ' this source will not be usable!');\n      return null;\n    },\n\n    _init() {},\n    _applySeries() {},\n\n    /**\n     * Returns configuration options for a cv.io.Fetch request\n     * @param start {Date} start time\n     * @param end {Date?} optional end time, if not set its \"now\"\n     * @param series {'hour'|'day'|'week'|'month'|'year'}\n     * @param offset {Number} series offset\n     * @return {{proxy: boolean, options: {}, url: string}}\n     */\n    getRequestConfig(start, end, series, offset) {\n      return {\n        url: '',\n        options: {},\n        proxy: true\n      };\n    },\n\n    processResponse(data) {\n      return data;\n    },\n\n    getTimeRange(start, end) {\n      const res = {\n        start: null,\n        end: null\n      };\n      if (start) {\n        let endTime = end ? this._convertTimes(end) : new Date();\n        let startTime = new Date();\n        const match = /^end-([\\d]*)([\\w]+)$/.exec(start);\n        if (match) {\n          const amount = parseInt(match[1]) || 1;\n          let interval = 0;\n          switch (match[2]) {\n            case 'second':\n              interval = 1000;\n              break;\n            case 'minute':\n              interval = 60000;\n              break;\n            case 'hour':\n              interval = 60 * 60000;\n              break;\n            case 'day':\n              interval = 24 * 60 * 60000;\n              break;\n            case 'week':\n              interval = 7 * 24 * 60 * 60000;\n              break;\n            case 'month':\n              interval = 30 * 24 * 60 * 60000;\n              break;\n            case 'year':\n              interval = 365 * 24 * 60 * 60000;\n              break;\n          }\n\n          startTime.setTime(endTime.getTime() - amount * interval);\n        } else if (/^[\\d]+$/.test(start)) {\n          startTime.setTime(parseInt(start) * 1000);\n        }\n        res.start = startTime;\n        res.end = endTime;\n      }\n      return res;\n    },\n\n    _convertTimes(time) {\n      if (time === 'now') {\n        return new Date();\n      } else if (/^[\\d]+$/.test(time)) {\n        let d = new Date();\n        d.setTime(parseInt(time) * 1000);\n        return d;\n      }\n      return null;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}