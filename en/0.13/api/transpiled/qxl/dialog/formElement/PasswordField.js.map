{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "register",
    "qxl",
    "dialog",
    "Dialog",
    "registerFormElementHandlers",
    "_registration",
    "initElement",
    "fieldType",
    "fieldData",
    "key",
    "formElement",
    "ui",
    "form",
    "PasswordField",
    "getContentElement",
    "setAttribute",
    "setLiveUpdate",
    "addToFormController",
    "_formController",
    "addTarget",
    "converter",
    "value",
    "_form",
    "getValidationManager",
    "validate",
    "bind",
    "postProcess",
    "allowBrowserAutocomplete",
    "getAllowBrowserAutocomplete"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v5_0_0/source/class/qxl/dialog/formElement/PasswordField.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2020 Christian Boulanger, Derrell Lipman\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\nqx.Class.define(\"qxl.dialog.formElement.PasswordField\", {\n  statics: {\n    register() {\n      qxl.dialog.Dialog.registerFormElementHandlers(\n        \"passwordfield\",\n        this._registration\n      );\n    },\n\n    _registration: {\n      initElement(fieldType, fieldData, key) {\n        let formElement = new qx.ui.form.PasswordField();\n        formElement\n          .getContentElement()\n          .setAttribute(\"autocomplete\", \"password\");\n        formElement.setLiveUpdate(true);\n        return formElement;\n      },\n\n      addToFormController(fieldType, fieldData, key, formElement) {\n        this._formController.addTarget(formElement, \"value\", key, true, null, {\n          converter: function (value) {\n            this._form.getValidationManager().validate();\n            return value;\n          }.bind(this),\n        });\n      },\n\n      postProcess(fieldType, fieldData, key, formElement) {\n        /*\n         * This allows changing the default autocomplete behavior to disable\n         * autocomplete on all text and password fields unless allowed at\n         * either the form level or at the field level using the\n         * allowBrowserAutocomplete key.\n         */\n        if (typeof fieldData.allowBrowserAutocomplete == \"boolean\") {\n          if (!fieldData.allowBrowserAutocomplete) {\n            //turn off autocomplete\n            formElement\n              .getContentElement()\n              .setAttribute(\"autocomplete\", \"new-password\");\n          } else {\n            // leave autocomplete alone.\n            // Note: Password field above sets attribute\n          }\n        } else if (!this.getAllowBrowserAutocomplete()) {\n          //turn off autocomplete\n          formElement\n            .getContentElement()\n            .setAttribute(\"autocomplete\", \"new-password\");\n        }\n      },\n    },\n  },\n});\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,sCAAsC,EAAE;IACtDC,OAAO,EAAE;MACPC,QAAQ,WAARA,QAAQA,CAAA,EAAG;QACTC,GAAG,CAACC,MAAM,CAACC,MAAM,CAACC,2BAA2B,CAC3C,eAAe,EACf,IAAI,CAACC,aACP,CAAC;MACH,CAAC;MAEDA,aAAa,EAAE;QACbC,WAAW,WAAXA,WAAWA,CAACC,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAE;UACrC,IAAIC,WAAW,GAAG,IAAIjB,EAAE,CAACkB,EAAE,CAACC,IAAI,CAACC,aAAa,CAAC,CAAC;UAChDH,WAAW,CACRI,iBAAiB,CAAC,CAAC,CACnBC,YAAY,CAAC,cAAc,EAAE,UAAU,CAAC;UAC3CL,WAAW,CAACM,aAAa,CAAC,IAAI,CAAC;UAC/B,OAAON,WAAW;QACpB,CAAC;QAEDO,mBAAmB,WAAnBA,mBAAmBA,CAACV,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,WAAW,EAAE;UAC1D,IAAI,CAACQ,eAAe,CAACC,SAAS,CAACT,WAAW,EAAE,OAAO,EAAED,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE;YACpEW,SAAS,EAAE,UAAUC,KAAK,EAAE;cAC1B,IAAI,CAACC,KAAK,CAACC,oBAAoB,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;cAC5C,OAAOH,KAAK;YACd,CAAC,CAACI,IAAI,CAAC,IAAI;UACb,CAAC,CAAC;QACJ,CAAC;QAEDC,WAAW,WAAXA,WAAWA,CAACnB,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,WAAW,EAAE;UAClD;AACR;AACA;AACA;AACA;AACA;UACQ,IAAI,OAAOF,SAAS,CAACmB,wBAAwB,IAAI,SAAS,EAAE;YAC1D,IAAI,CAACnB,SAAS,CAACmB,wBAAwB,EAAE;cACvC;cACAjB,WAAW,CACRI,iBAAiB,CAAC,CAAC,CACnBC,YAAY,CAAC,cAAc,EAAE,cAAc,CAAC;YACjD,CAAC,MAAM;cACL;cACA;YAAA;UAEJ,CAAC,MAAM,IAAI,CAAC,IAAI,CAACa,2BAA2B,CAAC,CAAC,EAAE;YAC9C;YACAlB,WAAW,CACRI,iBAAiB,CAAC,CAAC,CACnBC,YAAY,CAAC,cAAc,EAAE,cAAc,CAAC;UACjD;QACF;MACF;IACF;EACF,CAAC,CAAC;EAzEFd,GAAG,CAACC,MAAM,CAACQ,WAAW,CAACG,aAAa,CAACjB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}