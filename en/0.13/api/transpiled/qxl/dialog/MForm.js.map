{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "properties",
    "_init",
    "allowBrowserAutocomplete",
    "check",
    "init",
    "formData",
    "nullable",
    "event",
    "apply",
    "model",
    "labelColumnWidth",
    "setupFormRendererFunction",
    "beforeFormFunction",
    "formReadyFunction",
    "afterFormFunction",
    "afterButtonsFunction",
    "finalizeFunction",
    "statics",
    "registerFormElementHandlers",
    "fieldType",
    "handlers",
    "toLowerCase",
    "qxl",
    "dialog",
    "MForm",
    "_registeredFormElements",
    "_internalFormElements",
    "checkbox",
    "formElement",
    "CheckBox",
    "combobox",
    "ComboBox",
    "datefield",
    "DateField",
    "groupheader",
    "GroupHeader",
    "label",
    "Label",
    "list",
    "List",
    "passwordfield",
    "PasswordField",
    "radiogroup",
    "RadioGroup",
    "selectbox",
    "SelectBox",
    "spiinner",
    "Spinner",
    "textarea",
    "TextArea",
    "textfield",
    "TextField",
    "members",
    "_formContainer",
    "_form",
    "_formValidator",
    "_formController",
    "_formElements",
    "register",
    "getForm",
    "_createWidgetContent",
    "arguments",
    "length",
    "undefined",
    "setSetupFormRendererFunction",
    "container",
    "ui",
    "Composite",
    "setLayout",
    "layout",
    "VBox",
    "hbox",
    "HBox",
    "add",
    "setUserData",
    "_message",
    "basic",
    "setRich",
    "setMinWidth",
    "setAllowStretchX",
    "flex",
    "bind",
    "context",
    "formTag",
    "FormTag",
    "Grow",
    "buttonPane",
    "_createButtonPane",
    "okButton",
    "_createOkButton",
    "cancelButton",
    "_createCancelButton",
    "_applyFormData",
    "old",
    "_this",
    "getModel",
    "removeAllBindings",
    "dispose",
    "e",
    "getValidationManager",
    "removeAll",
    "modelData",
    "_iterator",
    "_createForOfIteratorHelper",
    "Object",
    "getOwnPropertyNames",
    "_step",
    "s",
    "n",
    "done",
    "key",
    "value",
    "err",
    "f",
    "data",
    "marshal",
    "Json",
    "createModel",
    "setModel",
    "form",
    "Form",
    "core",
    "Environment",
    "get",
    "getQxObject",
    "removeOwnedQxObject",
    "addOwnedQxObject",
    "controller",
    "_onFormReady",
    "getFormReadyFunction",
    "call",
    "getContext",
    "addListenerOnce",
    "_iterator2",
    "_step2",
    "_loop",
    "fieldData",
    "type",
    "Error",
    "concat",
    "initElement",
    "addToFormController",
    "validator",
    "validation",
    "required",
    "setRequired",
    "util",
    "Validate",
    "charAt",
    "regExp",
    "RegExp",
    "substr",
    "errorMessage",
    "error",
    "AsyncValidator",
    "lang",
    "Type",
    "isString",
    "proxy",
    "method",
    "replace",
    "eval",
    "warn",
    "message",
    "invalidMessage",
    "validationFunc",
    "validatorObj",
    "__asyncInProgress",
    "valid",
    "setValid",
    "tr",
    "width",
    "setWidth",
    "placeholder",
    "setPlaceholder",
    "toolTipText",
    "setToolTipText",
    "enabled",
    "setEnabled",
    "_typeof",
    "set",
    "postProcess",
    "userdata",
    "keys",
    "forEach",
    "isObject",
    "events",
    "func",
    "addListener",
    "setQxObjectId",
    "_ret",
    "setupFormRenderer",
    "getSetupFormRendererFunction",
    "view",
    "FormRenderer",
    "getLayout",
    "setColumnFlex",
    "setColumnMaxWidth",
    "getLabelColumnWidth",
    "setColumnWidth",
    "setAllowGrowX",
    "validate",
    "getFinalizeFunction",
    "_applyLabelColumnWidth",
    "getChildren",
    "_okButton",
    "converter",
    "_handleOk",
    "hide",
    "fireEvent",
    "getCallback",
    "Serializer",
    "toNativeObject",
    "resetCallback"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v5_0_0/source/class/qxl/dialog/MForm.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2007-2020 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Mixin that provides the functionality for a dialog with a form that\n * is constructed on-the-fly. Used by the Window-based dialog form,\n * and by an embedded dialog form\n *\n * @require(qxl.dialog.FormRenderer)\n * @require(qx.util.Serializer)\n * @require(qx.util.Validate)\n */\nqx.Mixin.define(\"qxl.dialog.MForm\", {\n  construct(properties) {\n    this._init();\n  },\n\n  properties: {\n    /**\n     * Allow disabling autocomplete on all text and password fields\n     */\n    allowBrowserAutocomplete: {\n      check: \"Boolean\",\n      init: true,\n    },\n\n    /**\n     * Data to create a form with multiple fields.\n     * So far implemented:\n     *   TextField / TextArea\n     *   ComboBox\n     *   SelectBox\n     *   RadioGroup\n     *   CheckBox\n     *   Spinner\n     *   List\n     *\n     * <pre>\n     * {\n     *  \"username\" : {\n     *     'type'  : \"TextField\",\n     *     'label' : \"User Name\",\n     *     'value' : \"\"\n     *   },\n     *   \"address\" : {\n     *     'type'  : \"TextArea\",\n     *     'label' : \"Address\",\n     *     'lines' : 3\n     *   },\n     *   \"domain\" : {\n     *     'type'  : \"SelectBox\",\n     *     'label' : \"Domain\",\n     *     'value' : 1,\n     *     'options' : [\n     *       { 'label' : \"Company\", 'value' : 0 },\n     *       { 'label' : \"Home\",    'value' : 1 }\n     *     ]\n     *   },\n     *   \"commands\" : {\n     *    'type'  : \"ComboBox\",\n     *     'label' : \"Shell command to execute\",\n     *     'options' : [\n     *       { 'label' : \"ln -s *\" },\n     *       { 'label' : \"rm -Rf /\" }\n     *     ]\n     *   },\n     *   \"quantity\" : {\n     *    'type' : \"Spinner\",\n     *    'label' : \"How many?\",\n     *    'properties' : {\n     *      'minimum' : 1,\n     *      'maximum' : 20,\n     *      'maxWidth' : 100\n     *    }\n     *   }\n     * }\n     * </pre>\n     */\n    formData: {\n      check: \"Map\",\n      nullable: true,\n      event: \"changeFormData\",\n      apply: \"_applyFormData\",\n    },\n\n    /**\n     * The model of the result data\n     */\n    model: {\n      check: \"qx.core.Object\",\n      nullable: true,\n      event: \"changeModel\",\n    },\n\n    /**\n     * The default width of the column with the field labels\n     */\n    labelColumnWidth: {\n      check: \"Integer\",\n      nullable: false,\n      init: 100,\n      apply: \"_applyLabelColumnWidth\",\n    },\n\n    /**\n     * Function to call to create and configure a form renderer. If null, a\n     * single-column form renderer is automatically instantiated and\n     * configured. The function is passed a single argument, the form object.\n     */\n    setupFormRendererFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null,\n    },\n\n    /**\n     * Function to call just before creating the form's input fields.\n     * This allows additional, non-form widgets to be added. The\n     * function is called two arguments: the container in which the\n     * form fields should be placed, and the form object itself\n     * (this).\n     */\n    beforeFormFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null,\n    },\n\n    /*\n     * Function to call with the internal form, allowing the user to do things\n     * such as set up a form validator (vs. field validators) on the form. The\n     * function is called with two arguments: the internal qx.ui.form.Form\n     * object, and the current dialog.Form object. An attempt is made to call\n     * the function in the context specified in the form data, but that may\n     * not work properly if the context property is not yet set at the time at\n     * the form is created.\n     */\n    formReadyFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null,\n      event: \"formReadyFunctionChanged\",\n    },\n\n    /**\n     * Function to call just after creating the form's input fields. This\n     * allows additional, non-form widgets to be added. The function is called\n     * one two arguments: the container in which the form fields should be\n     * placed, and the form object itself (this).\n     */\n    afterFormFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null,\n    },\n\n    /**\n     * Function to call just after creating the form's buttons. This allows\n     * additional, additional widgets to be added. The function is called with\n     * two arguments: the container in which the buttons were placed, and the\n     * form object itself (this).\n     */\n    afterButtonsFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null,\n    },\n\n    /*\n     * Function to call just after the form is filled with data. The\n     * function is called with one argument: the form object itself\n     * (this).\n     */\n    finalizeFunction: {\n      check: \"Function\",\n      nullable: true,\n      init: null,\n    },\n  },\n\n  statics: {\n    /* eslint-disable jsdoc/check-param-names */\n    /**\n     * Register a form element to be used within a qxl.dialog form.\n     *\n     * @param fieldType {String}\n     *   The field type, later to be used as the `type` member when setting\n     *   the `fieldData` property.\n     *\n     * @param handlers {Map}\n     *   Handler functions for this form element. `initElement` is\n     *   mandatory; `addToFormController` and `postProcess` are\n     *   optional.\n     *\n     *   All handlers are called in the context of the\n     *   `qxl.dialog.Form` or `qxl.dialog.FormEmbed`. The `fieldType`\n     *   argument has already been down-cased upon call.\n     *\n     *   - initElement(fieldType, fieldData)\n     *\n     *     Instantiate and initialize the form field to be used on the form.\n     *\n     *     @param fieldType {String}\n     *       Field type name, as used in the `type` member in the `fieldData`\n     *       property's provided map. This field is case-insensitive.\n     *\n     *     @param fieldData {Map}\n     *       The data, provided to the member of the `fieldData` property's\n     *       map, for this specific field\n     *\n     *     @param key {String}\n     *       The user-provided name for this form field\n     *\n     *     @return {qx.ui.form.IForm}\n     *       The form element to be added to the form\n     *\n     *\n     *   - addToFormController(fieldType, fieldData, formElement, key)\n     *\n     *     Add the form element to the form controller `this._formController`,\n     *     providing any appropriate converters, etc., for this form element.\n     *\n     *     @param fieldType {String}\n     *       Field type name, as used in the `type` member in the `fieldData`\n     *       property's provided map. This field is case-insensitive.\n     *\n     *     @param fieldData {Map}\n     *       The data, provided to the member of the `fieldData` property's\n     *       map, for this specific field\n     *\n     *     @param key {String}\n     *       The user-provided name for this form field\n     *\n     *     @param formElement {qx.ui.form.IForm}\n     *       The form element returned by `initElement`\n     *\n     *   - postProcess(fieldType, fieldData, key, formElement)\n     *\n     *     Accomplish any field-specific configuration. This handler may be\n     *     undefined.\n     *\n     *     @param fieldType {String}\n     *       Field type name, as used in the `type` member in the `fieldData`\n     *       property's provided map\n     *\n     *     @param fieldData {Map}\n     *       The data, provided to the member of the `fieldData` property's\n     *       map, for this specific field\n     *\n     *     @param formElement {qx.ui.form.IForm}\n     *       The form element returned by `initElement`\n     *\n     *     @param key {String}\n     *       The user-provided name for this form field\n     */\n    /* eslint-enable jsdoc/check-param-names */\n    registerFormElementHandlers(fieldType, handlers) {\n      // Downcase the field type as it is case-insensitive\n      fieldType = fieldType.toLowerCase();\n\n      // Add the handlers for this field type\n      qxl.dialog.MForm._registeredFormElements[fieldType] = handlers;\n    },\n\n    /** Map of registered form element handlers, keyed by fieldType */\n    _registeredFormElements: {},\n\n    _internalFormElements: {\n      checkbox: qxl.dialog.formElement.CheckBox,\n      combobox: qxl.dialog.formElement.ComboBox,\n      datefield: qxl.dialog.formElement.DateField,\n      groupheader: qxl.dialog.formElement.GroupHeader,\n      label: qxl.dialog.formElement.Label,\n      list: qxl.dialog.formElement.List,\n      passwordfield: qxl.dialog.formElement.PasswordField,\n      radiogroup: qxl.dialog.formElement.RadioGroup,\n      selectbox: qxl.dialog.formElement.SelectBox,\n      spiinner: qxl.dialog.formElement.Spinner,\n      textarea: qxl.dialog.formElement.TextArea,\n      textfield: qxl.dialog.formElement.TextField,\n    },\n  },\n\n  members: {\n    _formContainer: null,\n    _form: null,\n    _formValidator: null,\n    _formController: null,\n    _formElements: null,\n\n    _init() {\n      // Initialize form instances to an empty map which will be updated as\n      // formItems are added.  After the formData has been applied, this\n      // property will contain a map containing the form item instances, with\n      // the key being the name used in formData, and the value being the item\n      // element. In particular, the afterFormFunction, which receives the form\n      // as its second parameter, may reference this member to gain access to\n      // the form elements created for the form.\n      this._formElements = {};\n\n      // Register the internal form elements (once)\n      if (qxl.dialog.MForm._internalFormElements) {\n        for (let fieldType in qxl.dialog.MForm._internalFormElements) {\n          // Register this internal type, but don't overwrite a\n          // user-provided registration\n          if (!(fieldType in qxl.dialog.MForm._registeredFormElements)) {\n            qxl.dialog.MForm._internalFormElements[fieldType].register();\n          }\n        }\n\n        // Prevent reinitializing this for the lifetime of this app\n        qxl.dialog.MForm._internalFormElements = null;\n      }\n    },\n\n    /**\n     * Return the form\n     * @return {qx.ui.form.Form}\n     */\n    getForm() {\n      return this._form;\n    },\n\n    /**\n     * Create the main content of the widget\n     * @param properties\n     */\n    _createWidgetContent(properties = {}) {\n      /*\n       * Handle properties that must be set before _applyFormData\n       */\n      if (properties.setupFormRendererFunction) {\n        this.setSetupFormRendererFunction(properties.setupFormRendererFunction);\n      }\n\n      let container = new qx.ui.container.Composite();\n      container.setLayout(new qx.ui.layout.VBox(10));\n\n      let hbox = new qx.ui.container.Composite();\n      hbox.setLayout(new qx.ui.layout.HBox(10));\n      container.add(hbox);\n      container.setUserData(\"messageHBox\", hbox);\n      this._message = new qx.ui.basic.Label();\n      this._message.setRich(true);\n      this._message.setMinWidth(200);\n      this._message.setAllowStretchX(true);\n      hbox.add(this._message, {\n        flex: 1,\n      });\n\n      /*\n       * If requested, call the before-form function to add some fields\n       */\n      if (typeof properties.beforeFormFunction == \"function\") {\n        properties.beforeFormFunction.bind(properties.context)(container, this);\n      }\n\n      // wrap fields in form tag to avoid Chrome warnings, see https://github.com/qooxdoo/qxl.dialog/issues/19\n      let formTag = new qxl.dialog.FormTag();\n      this._formContainer = new qx.ui.container.Composite();\n      this._formContainer.setLayout(new qx.ui.layout.Grow());\n      formTag.add(this._formContainer, { flex: 1 });\n      container.add(formTag, { flex: 1 });\n\n      /*\n       * If requested, call the after-form function to add some fields\n       */\n      if (typeof properties.afterFormFunction == \"function\") {\n        properties.afterFormFunction.bind(properties.context)(container, this);\n      }\n\n      // buttons\n      let buttonPane = this._createButtonPane();\n      container.add(buttonPane);\n      let okButton = this._createOkButton();\n      buttonPane.add(okButton);\n      let cancelButton = this._createCancelButton();\n      buttonPane.add(cancelButton);\n\n      /*\n       * If requested, call the after-buttons function\n       */\n      if (typeof properties.afterButtonsFunction == \"function\") {\n        properties.afterButtonsFunction.bind(properties.context)(\n          buttonPane,\n          this\n        );\n      }\n      this.add(container);\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param formData {Map} The form data map\n     * @param old {Map|null} The old value\n     * @lint ignoreDeprecated(alert,eval)\n     */\n    _applyFormData(formData, old) {\n      if (!this._formElements) {\n        // KLUDGE for issue #10068: The constructor of this mixin\n        // isn't being called earlier enough.\n        this._init();\n      }\n\n      if (this._formController) {\n        try {\n          this.getModel().removeAllBindings();\n          this._formController.dispose();\n        } catch (e) {}\n      }\n      if (this._form) {\n        try {\n          this._form.getValidationManager().removeAllBindings();\n          this._form.dispose();\n        } catch (e) {}\n      }\n      this._formContainer.removeAll();\n      if (!formData) {\n        return;\n      }\n      if (this.getModel()) {\n        this.getModel().removeAllBindings();\n        this.getModel().dispose();\n      }\n      let modelData = {};\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        modelData[key] =\n          formData[key].value !== undefined ? formData[key].value : null;\n      }\n      let model = qx.data.marshal.Json.createModel(modelData);\n      this.setModel(model);\n      // form\n      this._form = new qx.ui.form.Form();\n      if (qx.core.Environment.get(\"module.objectid\") === true) {\n        if (this.getQxObject(\"form\")) {\n          this.removeOwnedQxObject(\"form\");\n        }\n        this.addOwnedQxObject(this._form, \"form\");\n      }\n      this._formController = new qx.data.controller.Object(this.getModel());\n      this._onFormReady(this._form);\n\n      /*\n       * hooks for subclasses or users to do something with the new form\n       */\n      this._onFormReady(this._form);\n      let f = this.getFormReadyFunction();\n      if (f) {\n        f.call(this.getContext(), this._form, this);\n      } else {\n        this.addListenerOnce(\n          \"formReadyFunctionChanged\",\n          function () {\n            f = this.getFormReadyFunction();\n            if (f) {\n              f.call(this.getContext(), this._form, this);\n            }\n          },\n          this.getContext()\n        );\n      }\n\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        let fieldData = formData[key];\n        if (typeof fieldData.type != \"string\") {\n          throw new Error(\"Missing type member {String}\");\n        }\n        let fieldType = fieldData.type.toLowerCase();\n        let formElement = null;\n\n        // Ensure the field type is registered\n        if (!(fieldType in qxl.dialog.MForm._registeredFormElements)) {\n          throw new Error(`Field type ${fieldType} is unknown`);\n        }\n\n        // Instantiate and initialize the form element\n        formElement = qxl.dialog.MForm._registeredFormElements[\n          fieldType\n        ].initElement.call(this, fieldType, fieldData, key);\n\n        // Headers don't return a form element\n        if (!formElement) {\n          continue;\n        }\n\n        // Save the key\n        formElement.setUserData(\"key\", key);\n\n        // Add the form element to the form controller, if needed for the type\n        if (\n          qxl.dialog.MForm._registeredFormElements[fieldType]\n            .addToFormController\n        ) {\n          qxl.dialog.MForm._registeredFormElements[\n            fieldType\n          ].addToFormController.call(\n            this,\n            fieldType,\n            fieldData,\n            key,\n            formElement\n          );\n        }\n\n        /**\n         * Validation\n         */\n        let validator = null;\n        if (formElement && fieldData.validation) {\n          // required field\n          if (fieldData.validation.required) {\n            formElement.setRequired(true);\n          }\n          // sync validation\n          if (fieldData.validation.validator) {\n            validator = fieldData.validation.validator;\n            if (typeof validator == \"string\") {\n              if (qx.util.Validate[validator]) {\n                validator = qx.util.Validate[validator]();\n              } else if (validator.charAt(0) === \"/\") {\n                validator = qx.util.Validate.regExp(\n                  new RegExp(validator.substr(1, validator.length - 2)),\n                  fieldData.validation.errorMessage\n                );\n              } else {\n                this.error(\"Invalid string validator.\");\n              }\n            } else if (\n              !(validator instanceof qx.ui.form.validation.AsyncValidator) &&\n              typeof validator !== \"function\"\n            ) {\n              this.error(\"Invalid validator.\");\n            }\n          }\n          // async validation\n          if (\n            qx.lang.Type.isString(fieldData.validation.proxy) &&\n            qx.lang.Type.isString(fieldData.validation.method)\n          ) {\n            /**\n             * fieldData.validation.proxy\n             * the name of a global variable (or path) to a function that acts as the proxy of\n             * the 'send' or 'execute' function of a preconfigured JsonRpc client. The function\n             * receives the following parameters: service method (string), parameters (array)\n             * and callback (function). It proxies the parameters to the given JsonRpc method and\n             * calls the callback with the result (true if valid, false if not) received from the\n             * server. The JsonRpc service name is preconfigured by the server and cannot be\n             * changed by the client.\n             */\n            // clean\n            let proxy = fieldData.validation.proxy.replace(/;\\n/g, \"\");\n            try {\n              eval(\"proxy = \" + proxy + \";\");\n            } catch (e) {\n              this.warn(\"Invalid proxy name\");\n            }\n            if (typeof proxy == \"function\") {\n              let method = fieldData.validation.method;\n              let message = fieldData.validation.invalidMessage;\n              let validationFunc = function (validatorObj, value) {\n                if (!validatorObj.__asyncInProgress) {\n                  validatorObj.__asyncInProgress = true;\n                  proxy(method, [value], function (valid) {\n                    validatorObj.setValid(\n                      valid,\n                      message || this.tr(\"Value is invalid\")\n                    );\n\n                    validatorObj.__asyncInProgress = false;\n                  });\n                }\n              };\n              validator = new qx.ui.form.validation.AsyncValidator(\n                validationFunc\n              );\n            }\n          }\n        }\n\n        /**\n         * other widget properties @todo: allow to set all properties\n         */\n\n        // width\n        if (fieldData.width !== undefined) {\n          formElement.setWidth(fieldData.width);\n        }\n\n        // placeholder\n        if (fieldData.placeholder !== undefined) {\n          formElement.setPlaceholder(fieldData.placeholder);\n        }\n\n        // tooltip\n        if (fieldData.toolTipText !== undefined) {\n          formElement.setToolTipText(fieldData.toolTipText);\n        }\n\n        // enabled\n        if (fieldData.enabled !== undefined) {\n          formElement.setEnabled(fieldData.enabled);\n        }\n\n        // generic property setter\n        if (typeof fieldData.properties == \"object\") {\n          formElement.set(fieldData.properties);\n        }\n\n        // Do any required post-processing\n        if (\n          \"postProcess\" in qxl.dialog.MForm._registeredFormElements[fieldType]\n        ) {\n          qxl.dialog.MForm._registeredFormElements[fieldType].postProcess.call(\n            this,\n            fieldType,\n            fieldData,\n            key,\n            formElement\n          );\n        }\n\n        // generic userdata settings\n        if (typeof fieldData.userdata == \"object\") {\n          Object.keys(fieldData.userdata).forEach(function (key) {\n            formElement.setUserData(key, fieldData.userdata[key]);\n          });\n        }\n\n        /**\n         * Events\n         */\n        if (qx.lang.Type.isObject(fieldData.events)) {\n          for (let type in fieldData.events) {\n            let func;\n            try {\n              switch (typeof fieldData.events[type]) {\n                case \"string\" /** @deprecated */:\n                  // A string allows transferring this handler via JSON.\n                  func = eval(\"(\" + fieldData.events[type] + \")\"); // eval is evil, I know.\n                  break;\n\n                case \"function\":\n                  func = fieldData.events[type];\n                  break;\n\n                default:\n                  throw new Error(\n                    \"Event handler must be a string eval()'ed to a function (deprecated), or a function\"\n                  );\n              }\n\n              formElement.addListener(type, func, formElement);\n            } catch (e) {\n              this.warn(\n                \"Invalid '\" +\n                  type +\n                  \"' event handler for form element '\" +\n                  key +\n                  \"'.\"\n              );\n            }\n          }\n        }\n\n        // Putting it all together\n        let label = fieldData.label;\n        this._form.add(formElement, label || \"\", validator);\n        // Add the form elements as objects owned by the form widget\n        if (qx.core.Environment.get(\"module.objectid\") === true) {\n          formElement.setQxObjectId(key);\n          this._form.addOwnedQxObject(formElement);\n        }\n\n        /*\n         * add the form element to the map so the user has access to it later\n         */\n        this._formElements[key] = formElement;\n      }\n\n      /*\n       * render the form\n       */\n      var setupFormRenderer;\n\n      setupFormRenderer = this.getSetupFormRendererFunction();\n      if (!setupFormRenderer) {\n        setupFormRenderer = function (form) {\n          var view;\n\n          view = new qxl.dialog.FormRenderer(this._form);\n          view.getLayout().setColumnFlex(0, 0);\n          view.getLayout().setColumnMaxWidth(0, this.getLabelColumnWidth());\n          view.getLayout().setColumnWidth(0, this.getLabelColumnWidth());\n          view.getLayout().setColumnFlex(1, 1);\n          view.setAllowGrowX(true);\n\n          return view;\n        };\n      }\n\n      this._formContainer.add(setupFormRenderer.bind(this)(this._form));\n      this._form.getValidationManager().validate();\n\n      var finalizeFunction;\n\n      finalizeFunction = this.getFinalizeFunction();\n      if (finalizeFunction) {\n        finalizeFunction.call(this.getContext(), this._form, this);\n      }\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param width\n     * @param old {Map|null} The old value\n     */\n    _applyLabelColumnWidth(width, old) {\n      var view;\n\n      // If the form renderer is the default one and has already been applied...\n      if (\n        !this.getSetupFormRendererFunction() &&\n        this._formContainer &&\n        this._formContainer.getChildren().length > 0\n      ) {\n        view = this._formContainer.getChildren()[0];\n        view.getLayout().setColumnWidth(0, width);\n        view.getLayout().setColumnMaxWidth(0, width);\n      }\n    },\n\n    /**\n     * Hook for subclasses to do something with the form, for example\n     * in order to attach bindings to the validation manager.\n     * Default behavior: bind the enabled state of the \"OK\" button to the\n     * validity of the current form.\n     * @param form {qx.ui.form.Form} The form to bind\n     */\n    _onFormReady(form) {\n      form.getValidationManager().bind(\"valid\", this._okButton, \"enabled\", {\n        converter(value) {\n          return value || false;\n        },\n      });\n    },\n\n    /**\n     * Handle click on ok button. Calls callback with the result map\n     * @override\n     */\n    _handleOk() {\n      this.hide();\n      this.fireEvent(\"ok\");\n      if (this.getCallback()) {\n        this.getCallback().call(\n          this.getContext(),\n          qx.util.Serializer.toNativeObject(this.getModel())\n        );\n      }\n      this.resetCallback();\n    },\n  },\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,SAAS,WAAAA,UAACC,UAAU,EAAE;MACpB,IAAI,CAACC,KAAK,EAAE;IACd,CAAC;IAEDD,UAAU,EAAE;MACV;AACJ;AACA;MACIE,wBAAwB,EAAE;QACxBC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,EAAE;QACRF,KAAK,EAAE,KAAK;QACZG,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIC,KAAK,EAAE;QACLN,KAAK,EAAE,gBAAgB;QACvBG,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIG,gBAAgB,EAAE;QAChBP,KAAK,EAAE,SAAS;QAChBG,QAAQ,EAAE,KAAK;QACfF,IAAI,EAAE,GAAG;QACTI,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,yBAAyB,EAAE;QACzBR,KAAK,EAAE,UAAU;QACjBG,QAAQ,EAAE,IAAI;QACdF,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIQ,kBAAkB,EAAE;QAClBT,KAAK,EAAE,UAAU;QACjBG,QAAQ,EAAE,IAAI;QACdF,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIS,iBAAiB,EAAE;QACjBV,KAAK,EAAE,UAAU;QACjBG,QAAQ,EAAE,IAAI;QACdF,IAAI,EAAE,IAAI;QACVG,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIO,iBAAiB,EAAE;QACjBX,KAAK,EAAE,UAAU;QACjBG,QAAQ,EAAE,IAAI;QACdF,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIW,oBAAoB,EAAE;QACpBZ,KAAK,EAAE,UAAU;QACjBG,QAAQ,EAAE,IAAI;QACdF,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIY,gBAAgB,EAAE;QAChBb,KAAK,EAAE,UAAU;QACjBG,QAAQ,EAAE,IAAI;QACdF,IAAI,EAAE;MACR;IACF,CAAC;IAEDa,OAAO,EAAE;MACP;MACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI;MACAC,2BAA2B,WAAAA,4BAACC,SAAS,EAAEC,QAAQ,EAAE;QAC/C;QACAD,SAAS,GAAGA,SAAS,CAACE,WAAW,EAAE;;QAEnC;QACAC,GAAG,CAACC,MAAM,CAACC,KAAK,CAACC,uBAAuB,CAACN,SAAS,CAAC,GAAGC,QAAQ;MAChE,CAAC;MA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"
}