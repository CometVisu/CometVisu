{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v3_2_0/source/class/qxl/dialog/MForm.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "properties",
    "_init",
    "allowBrowserAutocomplete",
    "check",
    "init",
    "formData",
    "nullable",
    "event",
    "apply",
    "model",
    "labelColumnWidth",
    "setupFormRendererFunction",
    "beforeFormFunction",
    "formReadyFunction",
    "afterFormFunction",
    "afterButtonsFunction",
    "finalizeFunction",
    "statics",
    "registerFormElementHandlers",
    "fieldType",
    "handlers",
    "toLowerCase",
    "qxl",
    "dialog",
    "MForm",
    "_registeredFormElements",
    "_internalFormElements",
    "checkbox",
    "formElement",
    "CheckBox",
    "combobox",
    "ComboBox",
    "datefield",
    "DateField",
    "groupheader",
    "GroupHeader",
    "label",
    "Label",
    "list",
    "List",
    "passwordfield",
    "PasswordField",
    "radiogroup",
    "RadioGroup",
    "selectbox",
    "SelectBox",
    "spiinner",
    "Spinner",
    "textarea",
    "TextArea",
    "textfield",
    "TextField",
    "members",
    "_formContainer",
    "_form",
    "_formValidator",
    "_formController",
    "_formElements",
    "register",
    "getForm",
    "_createWidgetContent",
    "setSetupFormRendererFunction",
    "container",
    "ui",
    "Composite",
    "setLayout",
    "layout",
    "VBox",
    "hbox",
    "HBox",
    "add",
    "setUserData",
    "_message",
    "basic",
    "setRich",
    "setMinWidth",
    "setAllowStretchX",
    "flex",
    "bind",
    "context",
    "formTag",
    "FormTag",
    "Grow",
    "buttonPane",
    "_createButtonPane",
    "okButton",
    "_createOkButton",
    "cancelButton",
    "_createCancelButton",
    "_applyFormData",
    "old",
    "getModel",
    "removeAllBindings",
    "dispose",
    "e",
    "getValidationManager",
    "removeAll",
    "modelData",
    "Object",
    "getOwnPropertyNames",
    "key",
    "value",
    "undefined",
    "data",
    "marshal",
    "Json",
    "createModel",
    "setModel",
    "form",
    "Form",
    "core",
    "Environment",
    "get",
    "getQxObject",
    "removeOwnedQxObject",
    "addOwnedQxObject",
    "controller",
    "_onFormReady",
    "f",
    "getFormReadyFunction",
    "call",
    "getContext",
    "addListenerOnce",
    "fieldData",
    "type",
    "Error",
    "initElement",
    "addToFormController",
    "validator",
    "validation",
    "required",
    "setRequired",
    "util",
    "Validate",
    "charAt",
    "regExp",
    "RegExp",
    "substr",
    "length",
    "errorMessage",
    "error",
    "AsyncValidator",
    "lang",
    "Type",
    "isString",
    "proxy",
    "method",
    "replace",
    "eval",
    "warn",
    "message",
    "invalidMessage",
    "validationFunc",
    "validatorObj",
    "__asyncInProgress",
    "valid",
    "setValid",
    "tr",
    "width",
    "setWidth",
    "placeholder",
    "setPlaceholder",
    "toolTipText",
    "setToolTipText",
    "enabled",
    "setEnabled",
    "set",
    "postProcess",
    "userdata",
    "keys",
    "forEach",
    "isObject",
    "events",
    "func",
    "addListener",
    "setQxObjectId",
    "setupFormRenderer",
    "getSetupFormRendererFunction",
    "view",
    "FormRenderer",
    "getLayout",
    "setColumnFlex",
    "setColumnMaxWidth",
    "getLabelColumnWidth",
    "setColumnWidth",
    "setAllowGrowX",
    "validate",
    "getFinalizeFunction",
    "_applyLabelColumnWidth",
    "getChildren",
    "_okButton",
    "converter",
    "_handleOk",
    "hide",
    "fireEvent",
    "getCallback",
    "Serializer",
    "toNativeObject",
    "resetCallback"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2007-2020 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Mixin that provides the functionality for a dialog with a form that\n * is constructed on-the-fly. Used by the Window-based dialog form,\n * and by an embedded dialog form\n *\n * @require(qxl.dialog.FormRenderer)\n * @require(qx.util.Serializer)\n * @require(qx.util.Validate)\n */\nqx.Mixin.define(\"qxl.dialog.MForm\", {\n  construct : function(properties) {\n    this._init();\n  },\n\n  properties: {\n    /**\n     * Allow disabling autocomplete on all text and password fields\n     */\n    allowBrowserAutocomplete :\n    {\n      check : \"Boolean\",\n      init  : true\n    },\n\n    /**\n     * Data to create a form with multiple fields.\n     * So far implemented:\n     *   TextField / TextArea\n     *   ComboBox\n     *   SelectBox\n     *   RadioGroup\n     *   CheckBox\n     *   Spinner\n     *   List\n     *\n     * <pre>\n     * {\n     *  \"username\" : {\n     *     'type'  : \"TextField\",\n     *     'label' : \"User Name\",\n     *     'value' : \"\"\n     *   },\n     *   \"address\" : {\n     *     'type'  : \"TextArea\",\n     *     'label' : \"Address\",\n     *     'lines' : 3\n     *   },\n     *   \"domain\" : {\n     *     'type'  : \"SelectBox\",\n     *     'label' : \"Domain\",\n     *     'value' : 1,\n     *     'options' : [\n     *       { 'label' : \"Company\", 'value' : 0 },\n     *       { 'label' : \"Home\",    'value' : 1 }\n     *     ]\n     *   },\n     *   \"commands\" : {\n     *    'type'  : \"ComboBox\",\n     *     'label' : \"Shell command to execute\",\n     *     'options' : [\n     *       { 'label' : \"ln -s *\" },\n     *       { 'label' : \"rm -Rf /\" }\n     *     ]\n     *   },\n     *   \"quantity\" : {\n     *    'type' : \"Spinner\",\n     *    'label' : \"How many?\",\n     *    'properties' : {\n     *      'minimum' : 1,\n     *      'maximum' : 20,\n     *      'maxWidth' : 100\n     *    }\n     *   }\n     * }\n     * </pre>\n     */\n    formData: {\n      check: \"Map\",\n      nullable: true,\n      event: \"changeFormData\",\n      apply: \"_applyFormData\"\n    },\n\n    /**\n     * The model of the result data\n     */\n    model: {\n      check: \"qx.core.Object\",\n      nullable: true,\n      event: \"changeModel\"\n    },\n\n    /**\n     * The default width of the column with the field labels\n     */\n    labelColumnWidth: {\n      check: \"Integer\",\n      nullable: false,\n      init: 100,\n      apply: \"_applyLabelColumnWidth\"\n    },\n\n    /**\n     * Function to call to create and configure a form renderer. If null, a\n     * single-column form renderer is automatically instantiated and\n     * configured. The function is passed a single argument, the form object.\n     */\n    setupFormRendererFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /**\n     * Function to call just before creating the form's input fields.\n     * This allows additional, non-form widgets to be added. The\n     * function is called two arguments: the container in which the\n     * form fields should be placed, and the form object itself\n     * (this).\n     */\n    beforeFormFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /*\n     * Function to call with the internal form, allowing the user to do things\n     * such as set up a form validator (vs. field validators) on the form. The\n     * function is called with two arguments: the internal qx.ui.form.Form\n     * object, and the current dialog.Form object. An attempt is made to call\n     * the function in the context specified in the form data, but that may\n     * not work properly if the context property is not yet set at the time at\n     * the form is created.\n     */\n    formReadyFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null,\n      event : \"formReadyFunctionChanged\"\n    },\n\n    /**\n     * Function to call just after creating the form's input fields. This\n     * allows additional, non-form widgets to be added. The function is called\n     * one two arguments: the container in which the form fields should be\n     * placed, and the form object itself (this).\n     */\n    afterFormFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /**\n     * Function to call just after creating the form's buttons. This allows\n     * additional, additional widgets to be added. The function is called with\n     * two arguments: the container in which the buttons were placed, and the\n     * form object itself (this).\n     */\n    afterButtonsFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /*\n     * Function to call just after the form is filled with data. The\n     * function is called with one argument: the form object itself\n     * (this).\n     */\n    finalizeFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    }\n  },\n\n  statics : {\n    /* eslint-disable jsdoc/check-param-names */\n    /**\n     * Register a form element to be used within a qxl.dialog form.\n     *\n     * @param fieldType {String}\n     *   The field type, later to be used as the `type` member when setting\n     *   the `fieldData` property.\n     *\n     * @param handlers {Map}\n     *   Handler functions for this form element. `initElement` is\n     *   mandatory; `addToFormController` and `postProcess` are\n     *   optional.\n     *\n     *   All handlers are called in the context of the\n     *   `qxl.dialog.Form` or `qxl.dialog.FormEmbed`. The `fieldType`\n     *   argument has already been down-cased upon call.\n     *\n     *   - initElement(fieldType, fieldData)\n     *\n     *     Instantiate and initialize the form field to be used on the form.\n     *\n     *     @param fieldType {String}\n     *       Field type name, as used in the `type` member in the `fieldData`\n     *       property's provided map. This field is case-insensitive.\n     *\n     *     @param fieldData {Map}\n     *       The data, provided to the member of the `fieldData` property's\n     *       map, for this specific field\n     *\n     *     @param key {String}\n     *       The user-provided name for this form field\n     *\n     *     @return {qx.ui.form.IForm}\n     *       The form element to be added to the form\n     *\n     *\n     *   - addToFormController(fieldType, fieldData, formElement, key)\n     *\n     *     Add the form element to the form controller `this._formController`,\n     *     providing any appropriate converters, etc., for this form element.\n     *\n     *     @param fieldType {String}\n     *       Field type name, as used in the `type` member in the `fieldData`\n     *       property's provided map. This field is case-insensitive.\n     *\n     *     @param fieldData {Map}\n     *       The data, provided to the member of the `fieldData` property's\n     *       map, for this specific field\n     *\n     *     @param key {String}\n     *       The user-provided name for this form field\n     *\n     *     @param formElement {qx.ui.form.IForm}\n     *       The form element returned by `initElement`\n     *\n     *   - postProcess(fieldType, fieldData, key, formElement)\n     *\n     *     Accomplish any field-specific configuration. This handler may be\n     *     undefined.\n     *\n     *     @param fieldType {String}\n     *       Field type name, as used in the `type` member in the `fieldData`\n     *       property's provided map\n     *\n     *     @param fieldData {Map}\n     *       The data, provided to the member of the `fieldData` property's\n     *       map, for this specific field\n     *\n     *     @param formElement {qx.ui.form.IForm}\n     *       The form element returned by `initElement`\n     *\n     *     @param key {String}\n     *       The user-provided name for this form field\n     */\n    /* eslint-enable jsdoc/check-param-names */\n    registerFormElementHandlers : function(fieldType, handlers) {\n      // Downcase the field type as it is case-insensitive\n      fieldType = fieldType.toLowerCase();\n\n      // Add the handlers for this field type\n      qxl.dialog.MForm._registeredFormElements[fieldType] = handlers;\n    },\n\n    /** Map of registered form element handlers, keyed by fieldType */\n    _registeredFormElements : {},\n\n    _internalFormElements : {\n      checkbox      : qxl.dialog.formElement.CheckBox,\n      combobox      : qxl.dialog.formElement.ComboBox,\n      datefield     : qxl.dialog.formElement.DateField,\n      groupheader   : qxl.dialog.formElement.GroupHeader,\n      label         : qxl.dialog.formElement.Label,\n      list          : qxl.dialog.formElement.List,\n      passwordfield : qxl.dialog.formElement.PasswordField,\n      radiogroup    : qxl.dialog.formElement.RadioGroup,\n      selectbox     : qxl.dialog.formElement.SelectBox,\n      spiinner      : qxl.dialog.formElement.Spinner,\n      textarea      : qxl.dialog.formElement.TextArea,\n      textfield     : qxl.dialog.formElement.TextField\n    }\n  },\n\n  members: {\n    _formContainer: null,\n    _form: null,\n    _formValidator: null,\n    _formController: null,\n    _formElements : null,\n\n    _init : function() {\n      // Initialize form instances to an empty map which will be updated as\n      // formItems are added.  After the formData has been applied, this\n      // property will contain a map containing the form item instances, with\n      // the key being the name used in formData, and the value being the item\n      // element. In particular, the afterFormFunction, which receives the form\n      // as its second parameter, may reference this member to gain access to\n      // the form elements created for the form.\n      this._formElements = {};\n\n      // Register the internal form elements (once)\n      if (qxl.dialog.MForm._internalFormElements) {\n        for (let fieldType in qxl.dialog.MForm._internalFormElements) {\n          // Register this internal type, but don't overwrite a\n          // user-provided registration\n          if (!(fieldType in qxl.dialog.MForm._registeredFormElements)) {\n            qxl.dialog.MForm._internalFormElements[fieldType].register();\n          }\n        }\n\n        // Prevent reinitializing this for the lifetime of this app\n        qxl.dialog.MForm._internalFormElements = null;\n      }\n    },\n\n    /**\n     * Return the form\n     * @return {qx.ui.form.Form}\n     */\n    getForm: function () {\n      return this._form;\n    },\n\n    /**\n     * Create the main content of the widget\n     * @param properties\n     */\n    _createWidgetContent: function (properties = {}) {\n      /*\n       * Handle properties that must be set before _applyFormData\n       */\n      if (properties.setupFormRendererFunction) {\n        this.setSetupFormRendererFunction(properties.setupFormRendererFunction);\n      }\n\n      let container = new qx.ui.container.Composite();\n      container.setLayout(new qx.ui.layout.VBox(10));\n\n      let hbox = new qx.ui.container.Composite();\n      hbox.setLayout(new qx.ui.layout.HBox(10));\n      container.add(hbox);\n      container.setUserData(\"messageHBox\", hbox);\n      this._message = new qx.ui.basic.Label();\n      this._message.setRich(true);\n      this._message.setMinWidth(200);\n      this._message.setAllowStretchX(true);\n      hbox.add(this._message, {\n        flex: 1\n      });\n\n      /*\n       * If requested, call the before-form function to add some fields\n       */\n      if (typeof properties.beforeFormFunction == \"function\") {\n        properties.beforeFormFunction.bind(properties.context)(container, this);\n      }\n\n      // wrap fields in form tag to avoid Chrome warnings, see https://github.com/qooxdoo/qxl.dialog/issues/19\n      let formTag = new qxl.dialog.FormTag();\n      this._formContainer = new qx.ui.container.Composite();\n      this._formContainer.setLayout(new qx.ui.layout.Grow());\n      formTag.add(this._formContainer, {flex: 1});\n      container.add(formTag, { flex: 1 });\n\n      /*\n       * If requested, call the after-form function to add some fields\n       */\n      if (typeof properties.afterFormFunction == \"function\") {\n        properties.afterFormFunction.bind(properties.context)(container, this);\n      }\n\n      // buttons\n      let buttonPane = this._createButtonPane();\n      container.add(buttonPane);\n      let okButton = this._createOkButton();\n      buttonPane.add(okButton);\n      let cancelButton = this._createCancelButton();\n      buttonPane.add(cancelButton);\n\n      /*\n       * If requested, call the after-buttons function\n       */\n      if (typeof properties.afterButtonsFunction == \"function\") {\n        properties.afterButtonsFunction.bind(properties.context)(buttonPane, this);\n      }\n      this.add(container);\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param formData {Map} The form data map\n     * @param old {Map|null} The old value\n     * @lint ignoreDeprecated(alert,eval)\n     */\n    _applyFormData: function (formData, old) {\n      if (!this._formElements) {\n        // KLUDGE for issue #10068: The constructor of this mixin\n        // isn't being called earlier enough.\n        this._init();\n      }\n\n      if (this._formController) {\n        try {\n          this.getModel().removeAllBindings();\n          this._formController.dispose();\n        } catch (e) {\n        }\n      }\n      if (this._form) {\n        try {\n          this._form.getValidationManager().removeAllBindings();\n          this._form.dispose();\n        } catch (e) {\n        }\n      }\n      this._formContainer.removeAll();\n      if (!formData) {\n        return;\n      }\n      if (this.getModel()) {\n        this.getModel().removeAllBindings();\n        this.getModel().dispose();\n      }\n      let modelData = {};\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        modelData[key] = formData[key].value !== undefined ?\n        formData[key].value :\n        null;\n      }\n      let model = qx.data.marshal.Json.createModel(modelData);\n      this.setModel(model);\n      // form\n      this._form = new qx.ui.form.Form();\n      if (qx.core.Environment.get(\"module.objectid\") === true) {\n        if (this.getQxObject(\"form\")) {\n          this.removeOwnedQxObject(\"form\");\n        }\n        this.addOwnedQxObject(this._form, \"form\");\n      }\n      this._formController = new qx.data.controller.Object(this.getModel());\n      this._onFormReady(this._form);\n\n      /*\n       * hooks for subclasses or users to do something with the new form\n       */\n      this._onFormReady(this._form);\n      let f = this.getFormReadyFunction();\n      if (f) {\n        f.call(this.getContext(), this._form, this);\n      } else {\n        this.addListenerOnce(\n          \"formReadyFunctionChanged\",\n          function() {\n            f = this.getFormReadyFunction();\n            if (f) {\n              f.call(this.getContext(), this._form, this);\n            }\n          },\n          this.getContext());\n      }\n\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        let fieldData = formData[key];\n        if (typeof fieldData.type != \"string\") {\n          throw new Error(\"Missing type member {String}\");\n        }\n        let fieldType = fieldData.type.toLowerCase();\n        let formElement = null;\n\n        // Ensure the field type is registered\n        if (!(fieldType in qxl.dialog.MForm._registeredFormElements)) {\n          throw new Error(`Field type ${fieldType} is unknown`);\n        }\n\n        // Instantiate and initialize the form element\n        formElement =\n          qxl.dialog.MForm._registeredFormElements[fieldType]\n            .initElement.call(this, fieldType, fieldData, key);\n\n        // Headers don't return a form element\n        if (!formElement) {\n          continue;\n        }\n\n        // Save the key\n        formElement.setUserData(\"key\", key);\n\n        // Add the form element to the form controller, if needed for the type\n        if (qxl.dialog.MForm._registeredFormElements[fieldType].addToFormController) {\n          qxl.dialog.MForm._registeredFormElements[fieldType]\n            .addToFormController.call(\n              this, fieldType, fieldData, key, formElement);\n        }\n\n        /**\n         * Validation\n         */\n        let validator = null;\n        if (formElement && fieldData.validation) {\n          // required field\n          if (fieldData.validation.required) {\n            formElement.setRequired(true);\n          }\n          // sync validation\n          if (fieldData.validation.validator) {\n            validator = fieldData.validation.validator;\n            if (typeof validator == \"string\") {\n              if (qx.util.Validate[validator]) {\n                validator = qx.util.Validate[validator]();\n              } else if (validator.charAt(0) === \"/\") {\n                validator = qx.util.Validate.regExp(\n                new RegExp(validator.substr(1, validator.length - 2)),\n                fieldData.validation.errorMessage\n                );\n              } else {\n                this.error(\"Invalid string validator.\");\n              }\n            } else if (!(validator instanceof qx.ui.form.validation.AsyncValidator) && typeof validator !== \"function\") {\n              this.error(\"Invalid validator.\");\n            }\n          }\n          // async validation\n          if (qx.lang.Type.isString(fieldData.validation.proxy) &&\n          qx.lang.Type.isString(fieldData.validation.method)\n          ) {\n            /**\n             * fieldData.validation.proxy\n             * the name of a global variable (or path) to a function that acts as the proxy of\n             * the 'send' or 'execute' function of a preconfigured JsonRpc client. The function\n             * receives the following parameters: service method (string), parameters (array)\n             * and callback (function). It proxies the parameters to the given JsonRpc method and\n             * calls the callback with the result (true if valid, false if not) received from the\n             * server. The JsonRpc service name is preconfigured by the server and cannot be\n             * changed by the client.\n             */\n            // clean\n            let proxy = fieldData.validation.proxy.replace(/;\\n/g, \"\");\n            try {\n              eval(\"proxy = \" + proxy + \";\");\n            } catch (e) {\n              this.warn(\"Invalid proxy name\");\n            }\n            if (typeof proxy == \"function\") {\n              let method = fieldData.validation.method;\n              let message = fieldData.validation.invalidMessage;\n              let validationFunc = function (validatorObj, value) {\n                if (!validatorObj.__asyncInProgress) {\n                  validatorObj.__asyncInProgress = true;\n                  proxy(method, [value], function (valid) {\n                    validatorObj.setValid(valid, message || this.tr(\"Value is invalid\"));\n                    validatorObj.__asyncInProgress = false;\n                  });\n                }\n              };\n              validator = new qx.ui.form.validation.AsyncValidator(validationFunc);\n            }\n          }\n        }\n\n        /**\n         * other widget properties @todo: allow to set all properties\n         */\n\n        // width\n        if (fieldData.width !== undefined) {\n          formElement.setWidth(fieldData.width);\n        }\n\n        // placeholder\n        if (fieldData.placeholder !== undefined) {\n          formElement.setPlaceholder(fieldData.placeholder);\n        }\n\n        // tooltip\n        if (fieldData.toolTipText !== undefined) {\n          formElement.setToolTipText(fieldData.toolTipText);\n        }\n\n        // enabled\n        if (fieldData.enabled !== undefined) {\n          formElement.setEnabled(fieldData.enabled);\n        }\n\n        // generic property setter\n        if (typeof fieldData.properties == \"object\") {\n          formElement.set(fieldData.properties);\n        }\n\n        // Do any required post-processing\n        if (\"postProcess\" in qxl.dialog.MForm._registeredFormElements[fieldType]) {\n          qxl.dialog.MForm._registeredFormElements[fieldType]\n            .postProcess.call(\n              this, fieldType, fieldData, key, formElement);\n        }\n\n         // generic userdata settings\n        if (typeof fieldData.userdata == \"object\") {\n          Object.keys(fieldData.userdata).forEach(\n            function(key) {\n              formElement.setUserData(key, fieldData.userdata[key]);\n            });\n        }\n\n        /**\n         * Events\n         */\n        if (qx.lang.Type.isObject(fieldData.events)) {\n          for (let type in fieldData.events) {\n            let func;\n            try {\n              switch (typeof fieldData.events[type]) {\n              case \"string\": /** @deprecated */\n                // A string allows transferring this handler via JSON.\n                func = eval(\"(\" + fieldData.events[type] + \")\"); // eval is evil, I know.\n                break;\n\n              case \"function\":\n                func = fieldData.events[type];\n                break;\n\n              default:\n                throw new Error(\"Event handler must be a string eval()'ed to a function (deprecated), or a function\");\n              }\n              formElement.addListener(type, func, formElement);\n            } catch (e) {\n              this.warn(\"Invalid '\" + type + \"' event handler for form element '\" + key + \"'.\");\n            }\n          }\n        }\n\n        // Putting it all together\n        let label = fieldData.label;\n        this._form.add(formElement, label || \"\", validator);\n        // Add the form elements as objects owned by the form widget\n        if (qx.core.Environment.get(\"module.objectid\") === true) {\n          formElement.setQxObjectId(key);\n          this._form.addOwnedQxObject(formElement);\n        }\n\n        /*\n         * add the form element to the map so the user has access to it later\n         */\n        this._formElements[key] = formElement;\n      }\n\n\n      /*\n       * render the form\n       */\n      var setupFormRenderer;\n\n      setupFormRenderer = this.getSetupFormRendererFunction();\n      if (!setupFormRenderer) {\n        setupFormRenderer = function(form) {\n          var view;\n\n          view = new qxl.dialog.FormRenderer(this._form);\n          view.getLayout().setColumnFlex(0, 0);\n          view.getLayout().setColumnMaxWidth(0, this.getLabelColumnWidth());\n          view.getLayout().setColumnWidth(0, this.getLabelColumnWidth());\n          view.getLayout().setColumnFlex(1, 1);\n          view.setAllowGrowX(true);\n\n          return view;\n        };\n      }\n\n      this._formContainer.add(setupFormRenderer.bind(this)(this._form));\n      this._form.getValidationManager().validate();\n\n      var finalizeFunction;\n\n      finalizeFunction = this.getFinalizeFunction();\n      if (finalizeFunction) {\n        finalizeFunction.call(this.getContext(), this._form, this);\n      }\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param width\n     * @param old {Map|null} The old value\n     */\n    _applyLabelColumnWidth : function(width, old) {\n      var view;\n\n      // If the form renderer is the default one and has already been applied...\n      if (!this.getSetupFormRendererFunction() &&\n          this._formContainer &&\n          this._formContainer.getChildren().length > 0) {\n        view = this._formContainer.getChildren()[0];\n        view.getLayout().setColumnWidth(0, width);\n        view.getLayout().setColumnMaxWidth(0, width);\n      }\n    },\n\n    /**\n     * Hook for subclasses to do something with the form, for example\n     * in order to attach bindings to the validation manager.\n     * Default behavior: bind the enabled state of the \"OK\" button to the\n     * validity of the current form.\n     * @param form {qx.ui.form.Form} The form to bind\n     */\n    _onFormReady: function (form) {\n      form.getValidationManager().bind(\"valid\", this._okButton, \"enabled\", {\n        converter: function (value) {\n          return value || false;\n        }\n      });\n    },\n\n    /**\n     * Handle click on ok button. Calls callback with the result map\n     * @override\n     */\n    _handleOk: function () {\n      this.hide();\n      this.fireEvent(\"ok\");\n      if (this.getCallback()) {\n        this.getCallback().call(\n        this.getContext(),\n        qx.util.Serializer.toNativeObject(this.getModel())\n        );\n      }\n      this.resetCallback();\n    }\n  }\n});\n"
  ]
}