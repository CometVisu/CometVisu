{
  "className": "qxl.dialog.MForm",
  "packageName": "qxl.dialog",
  "name": "MForm",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0,
        "index": 850
      },
      "end": {
        "line": 779,
        "column": 3,
        "index": 24938
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Mixin that provides the functionality for a dialog with a form that\n is constructed on-the-fly. Used by the Window-based dialog form,\n and by an embedded dialog form</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qxl.dialog.FormRenderer"
        },
        {
          "name": "@require",
          "body": "qx.util.Serializer"
        },
        {
          "name": "@require",
          "body": "qx.util.Validate"
        }
      ]
    }
  },
  "type": "mixin",
  "construct": {
    "location": {
      "start": {
        "line": 30,
        "column": 2,
        "index": 890
      },
      "end": {
        "line": 32,
        "column": 3,
        "index": 935
      }
    }
  },
  "properties": {
    "allowBrowserAutocomplete": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1042
        },
        "end": {
          "line": 41,
          "column": 5,
          "index": 1117
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Allow disabling autocomplete on all text and password fields</p>"
          }
        ]
      },
      "name": "allowBrowserAutocomplete",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "formData": {
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2370
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2491
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data to create a form with multiple fields.\n So far implemented:\n   TextField / TextArea\n   ComboBox\n   SelectBox\n   RadioGroup\n   CheckBox\n   Spinner\n   List\n </p>\n<pre>\n {\n  \"username\" : {\n     'type'  : \"TextField\",\n     'label' : \"User Name\",\n     'value' : \"\"\n   },\n   \"address\" : {\n     'type'  : \"TextArea\",\n     'label' : \"Address\",\n     'lines' : 3\n   },\n   \"domain\" : {\n     'type'  : \"SelectBox\",\n     'label' : \"Domain\",\n     'value' : 1,\n     'options' : [\n       { 'label' : \"Company\", 'value' : 0 },\n       { 'label' : \"Home\",    'value' : 1 }\n     ]\n   },\n   \"commands\" : {\n    'type'  : \"ComboBox\",\n     'label' : \"Shell command to execute\",\n     'options' : [\n       { 'label' : \"ln -s *\" },\n       { 'label' : \"rm -Rf /\" }\n     ]\n   },\n   \"quantity\" : {\n    'type' : \"Spinner\",\n    'label' : \"How many?\",\n    'properties' : {\n      'minimum' : 1,\n      'maximum' : 20,\n      'maxWidth' : 100\n    }\n   }\n }\n </pre>"
          }
        ]
      },
      "name": "formData",
      "propertyType": "new",
      "event": "changeFormData",
      "apply": "_applyFormData",
      "nullable": true,
      "allowNull": true,
      "check": "Map"
    },
    "model": {
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 2550
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 2645
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The model of the result data</p>"
          }
        ]
      },
      "name": "model",
      "propertyType": "new",
      "event": "changeModel",
      "nullable": true,
      "allowNull": true,
      "check": "qx.core.Object"
    },
    "labelColumnWidth": {
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 2729
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 2857
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default width of the column with the field labels</p>"
          }
        ]
      },
      "name": "labelColumnWidth",
      "propertyType": "new",
      "apply": "_applyLabelColumnWidth",
      "nullable": false,
      "init": 100,
      "allowNull": false,
      "check": "Integer",
      "defaultValue": 100
    },
    "setupFormRendererFunction": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3103
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3202
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to call to create and configure a form renderer. If null, a\n single-column form renderer is automatically instantiated and\n configured. The function is passed a single argument, the form object.</p>"
          }
        ]
      },
      "name": "setupFormRendererFunction",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "beforeFormFunction": {
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 3507
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 3599
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to call just before creating the form's input fields.\n This allows additional, non-form widgets to be added. The\n function is called two arguments: the container in which the\n form fields should be placed, and the form object itself\n (this).</p>"
          }
        ]
      },
      "name": "beforeFormFunction",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "formReadyFunction": {
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 4115
        },
        "end": {
          "line": 159,
          "column": 5,
          "index": 4247
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to call with the internal form, allowing the user to do things\n such as set up a form validator (vs. field validators) on the form. The\n function is called with two arguments: the internal qx.ui.form.Form\n object, and the current dialog.Form object. An attempt is made to call\n the function in the context specified in the form data, but that may\n not work properly if the context property is not yet set at the time at\n the form is created.</p>"
          }
        ]
      },
      "name": "formReadyFunction",
      "propertyType": "new",
      "event": "formReadyFunctionChanged",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "afterFormFunction": {
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4548
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4639
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to call just after creating the form's input fields. This\n allows additional, non-form widgets to be added. The function is called\n one two arguments: the container in which the form fields should be\n placed, and the form object itself (this).</p>"
          }
        ]
      },
      "name": "afterFormFunction",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "afterButtonsFunction": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 4929
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 5023
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to call just after creating the form's buttons. This allows\n additional, additional widgets to be added. The function is called with\n two arguments: the container in which the buttons were placed, and the\n form object itself (this).</p>"
          }
        ]
      },
      "name": "afterButtonsFunction",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "finalizeFunction": {
      "location": {
        "start": {
          "line": 190,
          "column": 4,
          "index": 5197
        },
        "end": {
          "line": 194,
          "column": 5,
          "index": 5287
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to call just after the form is filled with data. The\n function is called with one argument: the form object itself\n (this).</p>"
          }
        ]
      },
      "name": "finalizeFunction",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    }
  },
  "statics": {
    "registerFormElementHandlers": {
      "location": {
        "start": {
          "line": 273,
          "column": 4,
          "index": 8204
        },
        "end": {
          "line": 279,
          "column": 5,
          "index": 8479
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Register a form element to be used within a qxl.dialog form.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fieldType {String}\n   The field type, later to be used as the <code>type</code> member when setting\n   the <code>fieldData</code> property.",
            "paramName": "fieldType",
            "description": "\n   The field type, later to be used as the <code>type</code> member when setting\n   the <code>fieldData</code> property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "handlers {Map}\n   Handler functions for this form element. <code>initElement</code> is\n   mandatory; <code>addToFormController</code> and <code>postProcess</code> are\n   optional.\n   All handlers are called in the context of the\n   <code>qxl.dialog.Form</code> or <code>qxl.dialog.FormEmbed</code>. The <code>fieldType</code>\n   argument has already been down-cased upon call.\n   - initElement(fieldType, fieldData)\n     Instantiate and initialize the form field to be used on the form.",
            "paramName": "handlers",
            "description": "\n   Handler functions for this form element. <code>initElement</code> is\n   mandatory; <code>addToFormController</code> and <code>postProcess</code> are\n   optional.\n   All handlers are called in the context of the\n   <code>qxl.dialog.Form</code> or <code>qxl.dialog.FormEmbed</code>. The <code>fieldType</code>\n   argument has already been down-cased upon call.\n   - initElement(fieldType, fieldData)\n     Instantiate and initialize the form field to be used on the form.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "fieldType {String}\n       Field type name, as used in the <code>type</code> member in the <code>fieldData</code>\n       property's provided map. This field is case-insensitive.",
            "paramName": "fieldType",
            "description": "\n       Field type name, as used in the <code>type</code> member in the <code>fieldData</code>\n       property's provided map. This field is case-insensitive.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fieldData {Map}\n       The data, provided to the member of the <code>fieldData</code> property's\n       map, for this specific field",
            "paramName": "fieldData",
            "description": "\n       The data, provided to the member of the <code>fieldData</code> property's\n       map, for this specific field",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "key {String}\n       The user-provided name for this form field",
            "paramName": "key",
            "description": "\n       The user-provided name for this form field",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fieldType {String}\n       Field type name, as used in the <code>type</code> member in the <code>fieldData</code>\n       property's provided map. This field is case-insensitive.",
            "paramName": "fieldType",
            "description": "\n       Field type name, as used in the <code>type</code> member in the <code>fieldData</code>\n       property's provided map. This field is case-insensitive.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fieldData {Map}\n       The data, provided to the member of the <code>fieldData</code> property's\n       map, for this specific field",
            "paramName": "fieldData",
            "description": "\n       The data, provided to the member of the <code>fieldData</code> property's\n       map, for this specific field",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "key {String}\n       The user-provided name for this form field",
            "paramName": "key",
            "description": "\n       The user-provided name for this form field",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "formElement {qx.ui.form.IForm}\n       The form element returned by <code>initElement</code>\n   - postProcess(fieldType, fieldData, key, formElement)\n     Accomplish any field-specific configuration. This handler may be\n     undefined.",
            "paramName": "formElement",
            "description": "\n       The form element returned by <code>initElement</code>\n   - postProcess(fieldType, fieldData, key, formElement)\n     Accomplish any field-specific configuration. This handler may be\n     undefined.",
            "type": "qx.ui.form.IForm"
          },
          {
            "name": "@param",
            "body": "fieldType {String}\n       Field type name, as used in the <code>type</code> member in the <code>fieldData</code>\n       property's provided map",
            "paramName": "fieldType",
            "description": "\n       Field type name, as used in the <code>type</code> member in the <code>fieldData</code>\n       property's provided map",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fieldData {Map}\n       The data, provided to the member of the <code>fieldData</code> property's\n       map, for this specific field",
            "paramName": "fieldData",
            "description": "\n       The data, provided to the member of the <code>fieldData</code> property's\n       map, for this specific field",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "formElement {qx.ui.form.IForm}\n       The form element returned by <code>initElement</code>",
            "paramName": "formElement",
            "description": "\n       The form element returned by <code>initElement</code>",
            "type": "qx.ui.form.IForm"
          },
          {
            "name": "@param",
            "body": "key {String}\n       The user-provided name for this form field",
            "paramName": "key",
            "description": "\n       The user-provided name for this form field",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IForm}\n       The form element to be added to the form\n   - addToFormController(fieldType, fieldData, formElement, key)\n     Add the form element to the form controller <code>this._formController</code>,\n     providing any appropriate converters, etc., for this form element.",
            "type": "qx.ui.form.IForm",
            "description": "\n       The form element to be added to the form\n   - addToFormController(fieldType, fieldData, formElement, key)\n     Add the form element to the form controller <code>this._formController</code>,\n     providing any appropriate converters, etc., for this form element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_registeredFormElements": {
      "location": {
        "start": {
          "line": 282,
          "column": 4,
          "index": 8557
        },
        "end": {
          "line": 282,
          "column": 31,
          "index": 8584
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of registered form element handlers, keyed by fieldType</p>"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_internalFormElements": {
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8591
        },
        "end": {
          "line": 297,
          "column": 5,
          "index": 9220
        }
      },
      "type": "variable",
      "access": "protected"
    }
  },
  "members": {
    "_formContainer": {
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9245
        },
        "end": {
          "line": 301,
          "column": 24,
          "index": 9265
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_form": {
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 9271
        },
        "end": {
          "line": 302,
          "column": 15,
          "index": 9282
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_formValidator": {
      "location": {
        "start": {
          "line": 303,
          "column": 4,
          "index": 9288
        },
        "end": {
          "line": 303,
          "column": 24,
          "index": 9308
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_formController": {
      "location": {
        "start": {
          "line": 304,
          "column": 4,
          "index": 9314
        },
        "end": {
          "line": 304,
          "column": 25,
          "index": 9335
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_formElements": {
      "location": {
        "start": {
          "line": 305,
          "column": 4,
          "index": 9341
        },
        "end": {
          "line": 305,
          "column": 23,
          "index": 9360
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_init": {
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 9367
        },
        "end": {
          "line": 330,
          "column": 5,
          "index": 10509
        }
      },
      "type": "function",
      "access": "protected"
    },
    "getForm": {
      "location": {
        "start": {
          "line": 336,
          "column": 4,
          "index": 10588
        },
        "end": {
          "line": 338,
          "column": 5,
          "index": 10630
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the form</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.Form}",
            "type": "qx.ui.form.Form",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_createWidgetContent": {
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 10723
        },
        "end": {
          "line": 406,
          "column": 5,
          "index": 12922
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create the main content of the widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties",
            "paramName": "properties",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyFormData": {
      "location": {
        "start": {
          "line": 414,
          "column": 4,
          "index": 13115
        },
        "end": {
          "line": 726,
          "column": 5,
          "index": 23464
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Constructs the form on-the-fly</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formData {Map} The form data map",
            "paramName": "formData",
            "description": " The form data map",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old value",
            "paramName": "old",
            "description": " The old value",
            "type": [
              "Map",
              "null"
            ]
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreDeprecated(alert,eval)"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "formData"
      ]
    },
    "_applyLabelColumnWidth": {
      "location": {
        "start": {
          "line": 733,
          "column": 4,
          "index": 23588
        },
        "end": {
          "line": 746,
          "column": 5,
          "index": 24047
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Constructs the form on-the-fly</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width",
            "paramName": "width",
            "type": ""
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old value",
            "paramName": "old",
            "description": " The old value",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "labelColumnWidth"
      ]
    },
    "_onFormReady": {
      "location": {
        "start": {
          "line": 755,
          "column": 4,
          "index": 24367
        },
        "end": {
          "line": 761,
          "column": 5,
          "index": 24551
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hook for subclasses to do something with the form, for example\n in order to attach bindings to the validation manager.\n Default behavior: bind the enabled state of the \"OK\" button to the\n validity of the current form.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "form {qx.ui.form.Form} The form to bind",
            "paramName": "form",
            "description": " The form to bind",
            "type": "qx.ui.form.Form"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleOk": {
      "location": {
        "start": {
          "line": 767,
          "column": 4,
          "index": 24660
        },
        "end": {
          "line": 777,
          "column": 5,
          "index": 24928
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle click on ok button. Calls callback with the result map</p>"
          }
        ],
        "@override": [
          {
            "name": "@override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getAllowBrowserAutocomplete": {
      "type": "function",
      "name": "getAllowBrowserAutocomplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowBrowserAutocomplete</code>.\n\nFor further details take a look at the property definition: {@link #allowBrowserAutocomplete}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowBrowserAutocomplete"
          }
        ]
      }
    },
    "isAllowBrowserAutocomplete": {
      "type": "function",
      "name": "isAllowBrowserAutocomplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowBrowserAutocomplete</code>.\n\nFor further details take a look at the property definition: {@link #allowBrowserAutocomplete}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowBrowserAutocomplete"
          }
        ]
      }
    },
    "setAllowBrowserAutocomplete": {
      "type": "function",
      "name": "setAllowBrowserAutocomplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowBrowserAutocomplete</code>.\n\nFor further details take a look at the property definition: {@link #allowBrowserAutocomplete}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowBrowserAutocomplete"
          }
        ]
      }
    },
    "resetAllowBrowserAutocomplete": {
      "type": "function",
      "name": "resetAllowBrowserAutocomplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowBrowserAutocomplete</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowBrowserAutocomplete}."
          }
        ]
      }
    },
    "getFormData": {
      "type": "function",
      "name": "getFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>formData</code>.\n\nFor further details take a look at the property definition: {@link #formData}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Map",
            "desc": "Returns the value for formData"
          }
        ]
      }
    },
    "setFormData": {
      "type": "function",
      "name": "setFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>formData</code>.\n\nFor further details take a look at the property definition: {@link #formData}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Map",
            "paramName": "value",
            "desc": "Value for formData"
          }
        ]
      }
    },
    "resetFormData": {
      "type": "function",
      "name": "resetFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>formData</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #formData}."
          }
        ]
      }
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for model"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for model"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>model</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ]
      }
    },
    "getLabelColumnWidth": {
      "type": "function",
      "name": "getLabelColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelColumnWidth</code>.\n\nFor further details take a look at the property definition: {@link #labelColumnWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for labelColumnWidth"
          }
        ]
      }
    },
    "setLabelColumnWidth": {
      "type": "function",
      "name": "setLabelColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelColumnWidth</code>.\n\nFor further details take a look at the property definition: {@link #labelColumnWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for labelColumnWidth"
          }
        ]
      }
    },
    "resetLabelColumnWidth": {
      "type": "function",
      "name": "resetLabelColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelColumnWidth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelColumnWidth}."
          }
        ]
      }
    },
    "getSetupFormRendererFunction": {
      "type": "function",
      "name": "getSetupFormRendererFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>setupFormRendererFunction</code>.\n\nFor further details take a look at the property definition: {@link #setupFormRendererFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for setupFormRendererFunction"
          }
        ]
      }
    },
    "setSetupFormRendererFunction": {
      "type": "function",
      "name": "setSetupFormRendererFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>setupFormRendererFunction</code>.\n\nFor further details take a look at the property definition: {@link #setupFormRendererFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for setupFormRendererFunction"
          }
        ]
      }
    },
    "resetSetupFormRendererFunction": {
      "type": "function",
      "name": "resetSetupFormRendererFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>setupFormRendererFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #setupFormRendererFunction}."
          }
        ]
      }
    },
    "getBeforeFormFunction": {
      "type": "function",
      "name": "getBeforeFormFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>beforeFormFunction</code>.\n\nFor further details take a look at the property definition: {@link #beforeFormFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for beforeFormFunction"
          }
        ]
      }
    },
    "setBeforeFormFunction": {
      "type": "function",
      "name": "setBeforeFormFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>beforeFormFunction</code>.\n\nFor further details take a look at the property definition: {@link #beforeFormFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for beforeFormFunction"
          }
        ]
      }
    },
    "resetBeforeFormFunction": {
      "type": "function",
      "name": "resetBeforeFormFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>beforeFormFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #beforeFormFunction}."
          }
        ]
      }
    },
    "getFormReadyFunction": {
      "type": "function",
      "name": "getFormReadyFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>formReadyFunction</code>.\n\nFor further details take a look at the property definition: {@link #formReadyFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for formReadyFunction"
          }
        ]
      }
    },
    "setFormReadyFunction": {
      "type": "function",
      "name": "setFormReadyFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>formReadyFunction</code>.\n\nFor further details take a look at the property definition: {@link #formReadyFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for formReadyFunction"
          }
        ]
      }
    },
    "resetFormReadyFunction": {
      "type": "function",
      "name": "resetFormReadyFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>formReadyFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #formReadyFunction}."
          }
        ]
      }
    },
    "getAfterFormFunction": {
      "type": "function",
      "name": "getAfterFormFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>afterFormFunction</code>.\n\nFor further details take a look at the property definition: {@link #afterFormFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for afterFormFunction"
          }
        ]
      }
    },
    "setAfterFormFunction": {
      "type": "function",
      "name": "setAfterFormFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>afterFormFunction</code>.\n\nFor further details take a look at the property definition: {@link #afterFormFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for afterFormFunction"
          }
        ]
      }
    },
    "resetAfterFormFunction": {
      "type": "function",
      "name": "resetAfterFormFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>afterFormFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #afterFormFunction}."
          }
        ]
      }
    },
    "getAfterButtonsFunction": {
      "type": "function",
      "name": "getAfterButtonsFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>afterButtonsFunction</code>.\n\nFor further details take a look at the property definition: {@link #afterButtonsFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for afterButtonsFunction"
          }
        ]
      }
    },
    "setAfterButtonsFunction": {
      "type": "function",
      "name": "setAfterButtonsFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>afterButtonsFunction</code>.\n\nFor further details take a look at the property definition: {@link #afterButtonsFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for afterButtonsFunction"
          }
        ]
      }
    },
    "resetAfterButtonsFunction": {
      "type": "function",
      "name": "resetAfterButtonsFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>afterButtonsFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #afterButtonsFunction}."
          }
        ]
      }
    },
    "getFinalizeFunction": {
      "type": "function",
      "name": "getFinalizeFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>finalizeFunction</code>.\n\nFor further details take a look at the property definition: {@link #finalizeFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for finalizeFunction"
          }
        ]
      }
    },
    "setFinalizeFunction": {
      "type": "function",
      "name": "setFinalizeFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>finalizeFunction</code>.\n\nFor further details take a look at the property definition: {@link #finalizeFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for finalizeFunction"
          }
        ]
      }
    },
    "resetFinalizeFunction": {
      "type": "function",
      "name": "resetFinalizeFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>finalizeFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #finalizeFunction}."
          }
        ]
      }
    }
  },
  "descendants": []
}