{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "window",
    "Window",
    "include",
    "qxl",
    "dialog",
    "MDialog",
    "statics",
    "__useBlocker",
    "useBlocker",
    "value",
    "Dialog",
    "getInstanceByType",
    "alert",
    "message",
    "callback",
    "context",
    "caption",
    "Alert",
    "image",
    "show",
    "error",
    "warning",
    "confirm",
    "Confirm",
    "prompt",
    "Prompt",
    "select",
    "options",
    "allowCancel",
    "defaultOptions",
    "label",
    "core",
    "Init",
    "getApplication",
    "tr",
    "Select",
    "form",
    "formData",
    "Assert",
    "assertMap",
    "Form",
    "registerFormElementHandlers",
    "MForm",
    "construct",
    "properties",
    "set",
    "visibility",
    "allowClose",
    "allowMaximize",
    "allowMinimize",
    "alwaysOnTop",
    "modal",
    "movable",
    "resizable",
    "showClose",
    "showMaximize",
    "showMinimize",
    "showStatusbar",
    "setLayout",
    "layout",
    "Grow",
    "root",
    "getRoot",
    "add",
    "__blocker",
    "Blocker",
    "setOpacity",
    "getBlockerOpacity",
    "setColor",
    "getBlockerColor",
    "FocusHandler",
    "getInstance",
    "addRoot",
    "addListener",
    "center",
    "_createWidgetContent",
    "setMessage",
    "_handleEscape",
    "check",
    "nullable",
    "event",
    "apply",
    "init",
    "blockerColor",
    "blockerOpacity",
    "members",
    "__previousFocus",
    "isUseBlocker",
    "maxWindowZIndex",
    "getZIndex",
    "windows",
    "getWindows",
    "i",
    "length",
    "zIndex",
    "Math",
    "max",
    "setZIndex",
    "blockContent",
    "setVisibility",
    "getActiveWidget",
    "blur",
    "e",
    "hide",
    "unblock",
    "focus",
    "destruct",
    "removeListener"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v5_0_0/source/class/qxl/dialog/Dialog.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2007-2020 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Base class for dialog widgets\n * @ignore(qxl.dialog.alert)\n * @ignore(qxl.dialog.error)\n * @ignore(qxl.dialog.warning)\n * @ignore(qxl.dialog.confirm)\n * @ignore(qxl.dialog.prompt)\n * @ignore(qxl.dialog.form)\n * @ignore(qxl.dialog.select)\n * @ignore(Promise)\n *\n */\nqx.Class.define(\"qxl.dialog.Dialog\", {\n  extend: qx.ui.window.Window,\n  include: [qxl.dialog.MDialog],\n\n  statics: {\n    /**\n     * for backwards-compability\n     * @type {Boolean}\n     */\n    __useBlocker: false,\n\n    /**\n     * Enforce the use of a coloured blocker.\n     * Added for backwards-compability with pre-1.2 versions\n     * @param  value {Boolean}\n     * @return {void}\n     */\n    useBlocker(value) {\n      qxl.dialog.Dialog.__useBlocker = value;\n    },\n\n    /**\n     * Returns a dialog instance by type\n     * @param type {String} The dialog type to get\n     * @return {qxl.dialog.Dialog}\n     */\n    getInstanceByType: qxl.dialog.MDialog.getInstanceByType,\n\n    /**\n     * Shortcut for alert dialog\n     * @param message {String} The message to display\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Alert} The widget instance\n     */\n    alert(message = \"\", callback = null, context = null, caption = \"\") {\n      return new qxl.dialog.Alert({\n        message,\n        callback,\n        context,\n        caption,\n        image: \"qxl.dialog.icon.info\",\n      }).show();\n    },\n\n    /**\n     * Shortcut for error dialog\n     * @param message {String} The message to display\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Alert} The widget instance\n     */\n    error(message = \"\", callback = null, context = null, caption = \"\") {\n      return new qxl.dialog.Alert({\n        message,\n        callback,\n        context,\n        caption,\n        image: \"qxl.dialog.icon.error\",\n      }).show();\n    },\n\n    /**\n     * Shortcut for warning dialog\n     * @param message {String} The message to display\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Alert} The widget instance\n     */\n    warning(message = \"\", callback = null, context = null, caption = \"\") {\n      return new qxl.dialog.Alert({\n        message,\n        callback,\n        context,\n        caption,\n        image: \"qxl.dialog.icon.warning\",\n      }).show();\n    },\n\n    /**\n     * Shortcut for confirm dialog\n     * @param message {String} The message to display\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Confirm} The widget instance\n     */\n    confirm(message = \"\", callback = null, context = null, caption = \"\") {\n      return new qxl.dialog.Confirm({\n        message,\n        callback,\n        context,\n        caption,\n      }).show();\n    },\n\n    /**\n     * Shortcut for prompt dialog\n     * @param message {String} The message to display\n     * @param callback {Function} The callback function\n     * @param context {Object} The context to use with the callback function\n     * @param value {String} The default value of the prompt textfield\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Prompt} The widget instance\n     *\n     */\n    prompt(\n      message = \"\",\n      callback = null,\n      context = null,\n      value = \"\",\n      caption = \"\"\n    ) {\n      return new qxl.dialog.Prompt({\n        message,\n        callback,\n        context,\n        value,\n        caption,\n      }).show();\n    },\n\n    /**\n     * Shortcut for select dialog\n     * @param message {String} The message to display\n     * @param options {Array?} Options to select from. If omitted, \"Yes\" (true) or \"No\" (false) will be used.\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param allowCancel {Boolean?} Default: true. If the cancel button is pressed, the result value will be undefined.\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Select} The widget instance\n     */\n    select(\n      message = \"\",\n      options = null,\n      callback = null,\n      context = null,\n      allowCancel = true,\n      caption = \"\"\n    ) {\n      let defaultOptions = [\n        { label: qx.core.Init.getApplication().tr(\"Yes\"), value: true },\n        { label: qx.core.Init.getApplication().tr(\"No\"), value: false },\n      ];\n\n      return new qxl.dialog.Select({\n        message,\n        allowCancel,\n        options: options || defaultOptions,\n        callback,\n        context,\n        caption,\n      }).show();\n    },\n\n    /**\n     * Shortcut for form dialog. Cannot be reused.\n     * @param message {String} The message to display\n     * @param formData {Map} Map of form data. See {@link qxl.dialog.Form.formData}\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Form} The widget instance\n     */\n    form(message, formData, callback = null, context = null, caption = \"\") {\n      qx.core.Assert.assertMap(formData);\n      return new qxl.dialog.Form({\n        message,\n        formData,\n        allowCancel: true,\n        callback,\n        context,\n        caption,\n      }).show();\n    },\n\n    // ease use for form element writers\n    registerFormElementHandlers: qxl.dialog.MForm.registerFormElementHandlers,\n  },\n\n  /**\n   * Constructor\n   * @param properties {Map|String|undefined} If you supply a map, all the\n   * corresponding properties will be set. If a string is given, use it\n   * as to set the 'message' property.\n   */\n  construct(properties) {\n    super();\n    this.set({\n      visibility: \"hidden\",\n      allowClose: false,\n      allowMaximize: false,\n      allowMinimize: false,\n      alwaysOnTop: true,\n      modal: true,\n      movable: false,\n      resizable: false,\n      showClose: false,\n      showMaximize: false,\n      showMinimize: false,\n      showStatusbar: false,\n    });\n\n    this.setLayout(new qx.ui.layout.Grow());\n    let root = qx.core.Init.getApplication().getRoot();\n    root.add(this);\n    // use blocker (for backwards-compability)\n    this.__blocker = new qx.ui.core.Blocker(root);\n    this.__blocker.setOpacity(this.getBlockerOpacity());\n    this.__blocker.setColor(this.getBlockerColor());\n    // handle focus\n    qx.ui.core.FocusHandler.getInstance().addRoot(this);\n    // resize the window when viewport size changes\n    this.addListener(\"resize\", this.center, this);\n    root.addListener(\"resize\", this.center, this);\n    this._createWidgetContent(properties);\n    // set properties from constructor param\n    if (typeof properties == \"object\") {\n      this.set(properties);\n    } else if (typeof properties == \"string\") {\n      this.setMessage(properties);\n    }\n    // escape key\n    root.addListener(\"keyup\", this._handleEscape, this);\n  },\n\n  properties: {\n    /**\n     * Whether the dialog is shown. If true, call the show() method. If false,\n     * call the hide() method.\n     */\n    show: {\n      check: \"Boolean\",\n      nullable: true,\n      event: \"changeShow\",\n      apply: \"_applyShow\",\n    },\n\n    /**\n     * Whether to block the ui while the widget is displayed\n     */\n    useBlocker: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * The blocker's color\n     */\n    blockerColor: {\n      check: \"String\",\n      init: \"black\",\n    },\n\n    /**\n     * The blocker's opacity\n     */\n    blockerOpacity: {\n      check: \"Number\",\n      init: 0.5,\n    },\n  },\n\n  members: {\n    /**\n     * A reference to the widget that previously had the focus\n     */\n    __previousFocus: null,\n\n    /**\n     * Show the widget. Overriding methods must call this parent method.\n     * Returns the widget instance for chaining.\n     * @return {this} The widget instance\n     */\n    show() {\n      if (this.isUseBlocker() || qxl.dialog.Dialog.__useBlocker) {\n        // make sure the dialog is above any opened window\n        let root = qx.core.Init.getApplication().getRoot();\n        let maxWindowZIndex = root.getZIndex();\n        let windows = root.getWindows();\n        for (let i = 0; i < windows.length; i++) {\n          let zIndex = windows[i].getZIndex();\n          maxWindowZIndex = Math.max(maxWindowZIndex, zIndex);\n        }\n        this.setZIndex(maxWindowZIndex + 1);\n        this.__blocker.blockContent(maxWindowZIndex);\n      }\n      this.setVisibility(\"visible\");\n      this.__previousFocus =\n        qx.ui.core.FocusHandler.getInstance().getActiveWidget();\n      if (this.__previousFocus) {\n        try {\n          this.__previousFocus.blur();\n        } catch (e) {}\n        //this.__previousFocus.setFocusable(false);\n      }\n      return this;\n    },\n\n    /**\n     * Hide the widget. Overriding methods must call this parent method.\n     * Returns the widget instance for chaining.\n     * @return {qxl.dialog.Dialog} The widget instance\n     */\n    hide() {\n      if (this.isUseBlocker() || qxl.dialog.Dialog.__useBlocker) {\n        this.__blocker.unblock();\n      }\n      if (this.__previousFocus) {\n        try {\n          //this.__previousFocus.setFocusable(true);\n          this.__previousFocus.focus();\n        } catch (e) {}\n      }\n      this.setVisibility(\"hidden\");\n      return this;\n    },\n  },\n\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct() {\n    let root = qx.core.Init.getApplication().getRoot();\n    root.removeListener(\"resize\", this.center, this);\n    root.removeListener(\"keyup\", this._handleEscape, this);\n  },\n});\n"
  ],
  "mappings": "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"
}