{"attributes": {"name": "TimerManager", "packageName": "qx.util", "superClass": "qx.core.Object", "isSingleton": true, "fullName": "qx.util.TimerManager", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>Timer manipulation for handling multiple timed callbacks with the use of\nonly a single native timer object.</p>\n\n<p>Use of these timers is via the methods start() and stop().  Examples:</p>\n\n<pre class=\"javascript\">\nvar timer = qx.util.TimerManager.getInstance();\n\n// Start a 5-second recurrent timer.\n// Note that the first expiration is after 3 seconds\n// (last parameter is 3000) but each subsequent expiration is\n// at 5 second intervals.\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"Recurrent 5-second timer: \" + timerId);\n            },\n            5000,\n            this,\n            null,\n            3000);\n\n// Start a 1-second one-shot timer\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"One-shot 1-second timer: \" + timerId);\n            },\n            0,\n            this,\n            null,\n            1000);\n\n// Start a 2-second recurrent timer that stops itself after\n// three iterations\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"Recurrent 2-second timer with limit 3:\" +\n                         timerId);\n              if (++userData.count == 3)\n              {\n                this.debug(\"Stopping recurrent 2-second timer\");\n                timer.stop(timerId);\n              }\n            },\n            2000,\n            this,\n            { count : 0 });\n\n// Start an immediate one-shot timer\ntimer.start(function(userData, timerId)\n            {\n              this.debug(\"Immediate one-shot timer: \" + timerId);\n            });\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"access": "private", "name": "__timerData"}, "type": "constant", "children": [{"attributes": {"text": "<p>Saved data for each timer</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "type": "Array", "name": "__timerQueue", "value": "[]"}, "type": "constant", "children": [{"attributes": {"text": "<p>Time-ordered queue of timers</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "type": "Number", "name": "__timerId", "value": "0"}, "type": "constant", "children": [{"attributes": {"text": "<p>Next timer id value is determined by incrementing this</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 207, "name": "__insertNewTimer"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "expireAt"}, "type": "param", "children": [{"attributes": {"text": "<p>Milliseconds from now when this timer should expire</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "timerId"}, "type": "param", "children": [{"attributes": {"text": "<p>Id of the timer to be time-ordered</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Insert a timer on the time-ordered list of active timers.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 255, "name": "__processQueue"}, "type": "method", "children": [{"attributes": {"text": "<p>Process the queue of timers.  Call the registered callback function for\nany timer which has expired.  If the timer is marked as recurrent, the\ntimer is restarted with the recurrent timeout following completion of\nthe callback function.</p>"}, "type": "desc"}]}, {"attributes": {"line": 131, "name": "start"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "callback"}, "type": "param", "children": [{"attributes": {"text": "<p>Function to be called upon expiration of the timer.  The function is passed these parameters: <dl> <dt>userData</dt> <dd>The user data provided to the start() method</dd> <dt>timerId</dt> <dd>The timer id, as was returned by the start() method</dd> </dl></p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "recurTime"}, "type": "param", "children": [{"attributes": {"text": "<p>If null, the timer will not recur.  Once the callback function returns the first time, the timer will be removed from the timer queue.  If non-null, upon return from the callback function, the timer will be reset to this number of milliseconds.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}, {"attributes": {"name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>Context (this) the callback function is called with.  If not provided, this Timer singleton object is used.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}, {"attributes": {"name": "userData"}, "type": "param", "children": [{"attributes": {"text": "<p>Data which is passed to the callback function upon timer expiry</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "initialTime"}, "type": "param", "children": [{"attributes": {"text": "<p>Milliseconds before the callback function is called the very first time.  If not specified and recurTime is specified, then recurTime will be used as initialTime; otherwise initialTime will default to zero.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Start a new timer</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The timer id of this unique timer.  It may be provided to the stop() method to cancel a timer before expiration.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 165, "name": "stop"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "timerId"}, "type": "param", "children": [{"attributes": {"text": "<p>A timer id previously returned by start()</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Stop a running timer</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 11, "isStatic": true, "name": "getInstance"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The singleton instance of this class.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.util.TimerManager"}, "type": "entry"}]}]}]}]}]}