{"attributes": {"fullName": "qx.io.request.Jsonp", "packageName": "qx.io.request", "type": "class", "name": "Jsonp", "superClass": "qx.io.request.AbstractRequest"}, "type": "class", "children": [{"attributes": {"text": "<p>Query <span class=\"caps\">JSONP</span> services using the script element. Requests may be cross-origin.</p>\n\n<p>Configuration of the request is done with properties. Events are fired for\nvarious states in the life cycle of a request, such as &#8220;success&#8221;. Request\ndata is transparently processed.</p>\n\n<p>For an introduction to <span class=\"caps\">JSONP</span>, please refer to\n<a href=\"http://ajaxian.com/archives/jsonp-json-with-padding\">Ajaxian.com</a>.</p>\n\n<p>Here is how to request a <span class=\"caps\">JSON</span> file from a <span class=\"caps\">REST</span> service and listen to\nthe &#8220;success&#8221; event:</p>\n\n<pre class=\"javascript\">\nvar req = new qx.io.request.Jsonp();\nreq.setUrl(\"http://feeds.delicious.com/v2/json/popular\");\n\n// Some services have a fixed callback name\n// req.setCallbackName(\"callback\");\n\nreq.addListener(\"success\", function(e) {\n  var req = e.getTarget();\n\n  // HTTP status code indicating success, e.g. 200\n  req.getStatus();\n\n  // \"success\"\n  req.getPhase();\n\n  // JSON response\n  req.getResponse();\n}, this);\n\n// Send request\nreq.send();\n</pre>\n\n<p>Some noteable features:</p>\n\n<ul>\n<li>Abstraction of low-level request</li>\n<li>Convenient setup using properties</li>\n<li>Fine-grained events</li>\n<li>Symbolic phases</li>\n<li>Transparent processing of request data</li>\n<li>Stream-lined authentication</li>\n<li>Flexible callback handling</li>\n<li>Cross-origin requests</li>\n</ul>\n\n<p>In order to debug requests, set the environment flag\n<code>qx.debug.io</code>.</p>\n\n<p>Internally uses {@link qx.bom.request.Jsonp}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "load"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when request completes without error.</p>\n\n<p>Every request receiving a response completes without error. This means\nthat even for responses that do not call the callback, a &#8220;load&#8221; event\nis fired. If you are only interested in the <span class=\"caps\">JSON</span> data received, consider\nlistening to the {@link #success} event instead.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}, {"attributes": {"name": "statusError"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when request completes without error but no data was received.</p>\n\n<p>The underlying script transport does not know the <span class=\"caps\">HTTP</span> status of the\nresponse. However, if the callback was not called (no data received)\nan erroneous status (500) is assigned to the transport&#8217;s status\nproperty.</p>\n\n<p>Note: If you receive an unexpected &#8220;statusError&#8221;, check that the <span class=\"caps\">JSONP</span>\nservice accepts arbitrary callback names given as the &#8220;callback&#8221;\nparameter. In case the service expects another parameter for the callback\nname, use {@link #setCallbackParam}. Should the service respond with a\nhard-coded callback, set a custom callback name with\n{@link #setCallbackName}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}, {"attributes": {"name": "success"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when request completes without error and data has been received.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "protected", "line": 141, "overriddenFrom": "qx.io.request.AbstractRequest", "name": "_createTransport"}, "type": "method", "children": [{"attributes": {"text": "<p>Create <span class=\"caps\">JSONP</span> transport.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Transport.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.request.Jsonp"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 153, "overriddenFrom": "qx.io.request.AbstractRequest", "name": "_getConfiguredUrl"}, "type": "method", "children": [{"attributes": {"text": "<p>Get configured <span class=\"caps\">URL</span>.</p>\n\n<p>Append request data to <span class=\"caps\">URL</span>. Also append random string\nto <span class=\"caps\">URL</span> if required by value of {@link #cache}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The configured <span class=\"caps\">URL</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 177, "overriddenFrom": "qx.io.request.AbstractRequest", "name": "_getParsedResponse"}, "type": "method", "children": [{"attributes": {"text": "<p>Return the transport&#8217;s responseJson property.</p>\n\n<p>See {@link qx.bom.request.Jsonp}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The parsed response of the request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getCache", "fromProperty": "cache"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>cache</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initCache", "fromProperty": "cache"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>cache</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>cache</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isCache", "fromProperty": "cache"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>cache</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetCache", "fromProperty": "cache"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>cache</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setCache", "fromProperty": "cache"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>cache</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 205, "name": "setCallbackName"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the callback function.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set callback name.</p>\n\n<p>See {@link qx.bom.request.Jsonp#setCallbackName}.</p>"}, "type": "desc"}]}, {"attributes": {"line": 194, "name": "setCallbackParam"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "param"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the callback parameter.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set callback parameter.</p>\n\n<p>See {@link qx.bom.request.Jsonp#setCallbackParam}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "toggleCache", "fromProperty": "cache"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>cache</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #cache}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "properties", "children": [{"attributes": {"check": "Boolean", "defaultValue": "true", "name": "cache", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Whether to allow request to be answered from cache.</p>\n\n<p>Allowed values:</p>\n\n<ul>\n<li><code>true</code>: Allow caching (Default)</li>\n<li><code>false</code>: Prohibit caching. Appends nocache parameter to <span class=\"caps\">URL</span>.</li>\n</ul>"}, "type": "desc"}]}]}]}