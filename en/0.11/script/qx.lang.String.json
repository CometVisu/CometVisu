{"attributes": {"fullName": "qx.lang.String", "packageName": "qx.lang", "isStatic": true, "type": "bootstrap", "name": "String"}, "type": "class", "children": [{"attributes": {"text": "<p>String helper functions</p>\n\n<p>The native JavaScript String is not modified by this class. However,\nthere are modifications to the native String in {@link qx.lang.normalize.String} for\nbrowsers that do not support certain features.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 88, "isStatic": true, "name": "camelCase"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>hyphenated string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Converts a hyphenated string (separated by &#8217;-&#8217;) to camel case.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.lang.String.camelCase(\"I-like-cookies\"); //returns \"ILikeCookies\"</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>camelcase string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 136, "isStatic": true, "name": "capitalize"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>any string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Converts a string to camel case.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.lang.String.camelCase(\"i like cookies\"); //returns \"I Like Cookies\"</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>capitalized string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 161, "isStatic": true, "name": "clean"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string to clean up</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes all extraneous whitespace from a string and trims it</p>\n\n<p>Example:</p>\n\n<code>\nqx.lang.String.clean(\" i      like     cookies      \\n\\n\");\n</code>\n\n<p>Returns &#8220;i like cookies&#8221;</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Cleaned up string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 280, "isStatic": true, "name": "contains"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "substring"}, "type": "param", "children": [{"attributes": {"text": "<p>substring to search for</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check whether the string contains a given substring</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the string contains the substring</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 211, "isStatic": true, "name": "endsWith"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fullstr"}, "type": "param", "children": [{"attributes": {"text": "<p>the string to search in</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "substr"}, "type": "param", "children": [{"attributes": {"text": "<p>the substring to look for</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>Please use String instance endsWith method instead</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Check whether the string ends with the given substring</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the string ends with the given substring</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 315, "isStatic": true, "name": "escapeRegexpChars"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string where to escape the chars.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Escapes all chars that have a special meaning in regular expressions</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the string with the escaped chars.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1, "isStatic": true, "name": "firstLow"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Convert the first character of the string to lower case.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the string with a lower case first character</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1, "isStatic": true, "name": "firstUp"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Convert the first character of the string to upper case.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the string with an upper case first character</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 295, "isStatic": true, "name": "format"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "pattern"}, "type": "param", "children": [{"attributes": {"text": "<p>format string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>array of arguments to insert into the format string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Print a list of arguments using a format string\nIn the format string occurrences of %n are replaced by the n&#8217;th element of the args list.\nExample:</p>\n\n<pre class=\"javascript\">qx.lang.String.format(\"Hello %1, my name is %2\", [\"Egon\", \"Franz\"]) == \"Hello Egon, my name is Franz\"</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the formatted string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 112, "isStatic": true, "name": "hyphenate"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>camelcased string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Converts a camelcased string to a hyphenated (separated by &#8217;-&#8217;) string.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">qx.lang.String.hyphenate(\"weLikeCookies\"); //returns \"we-like-cookies\"</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>hyphenated string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 236, "isStatic": true, "name": "pad"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string to pad</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "length"}, "type": "param", "children": [{"attributes": {"text": "<p>the final length of the string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "ch"}, "type": "param", "children": [{"attributes": {"text": "<p>character used to fill up the string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Pad a string up to a given length. Padding characters are added to the left of the string.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>padded string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 374, "isStatic": true, "name": "quote"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>String to quote.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Quotes the given string.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The quoted string.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 223, "isStatic": true, "name": "repeat"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>string used to repeat</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "times"}, "type": "param", "children": [{"attributes": {"text": "<p>the number of repetitions</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a string, which repeats a string &#8216;length&#8217; times</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>repeated string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 197, "isStatic": true, "name": "startsWith"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fullstr"}, "type": "param", "children": [{"attributes": {"text": "<p>the string to search in</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "substr"}, "type": "param", "children": [{"attributes": {"text": "<p>the substring to look for</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>Please use String instance startsWith method instead</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Check whether the string starts with the given substring</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the string starts with the given substring</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 352, "isStatic": true, "name": "stripScripts"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>string containing tags</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "exec"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether the filtered code should be executed</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Strips </p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The filtered string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 340, "isStatic": true, "name": "stripTags"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>string containing tags</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove <span class=\"caps\">HTML</span>/XML tags from a string\nExample:</p>\n\n<pre class=\"javascript\">qx.lang.String.stripTags(\"&lt;h1>Hello&lt;/h1>\") == \"Hello\"</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the string with stripped tags</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 327, "isStatic": true, "name": "toArray"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string which should be split</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Converts a string to an array of characters.</p>\n\n<pre>\"hello\" => [ \"h\", \"e\", \"l\", \"l\", \"o\" ];</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the result array of characters</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"line": 172, "isStatic": true, "name": "trimLeft"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string to trim</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>removes white space from the left side of a string</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the trimmed string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 183, "isStatic": true, "name": "trimRight"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "str"}, "type": "param", "children": [{"attributes": {"text": "<p>the string to trim</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>removes white space from the right side of a string</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the trimmed string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"access": "private", "name": "__stringsMap"}, "type": "constant", "children": [{"attributes": {"text": "<p>Cache for often used string operations [camelCasing and hyphenation] e.g. marginTop => margin-top</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "type": "Null", "name": "__unicodeFirstLetterInWordRegexp", "value": "null"}, "type": "constant", "children": [{"attributes": {"text": "<p>A RegExp that matches the first letter in a word &#8211; unicode aware</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "type": "String", "name": "__unicodeLetters", "value": "0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05250531-055605590561-058705D0-05EA05F0-05F20621-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280904-0939093D09500958-0961097109720979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10D05-0D0C0D0E-0D100D12-0D280D2A-0D390D3D0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC0EDD0F000F40-0F470F49-0F6C0F88-0F8B1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510D0-10FA10FC1100-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209421022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2D00-2D252D30-2D652D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31B731F0-31FF3400-4DB54E00-9FCBA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A65FA662-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78BA78CA7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA2DFA30-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC"}, "type": "constant", "children": [{"attributes": {"text": "<p>Unicode letters.  they are taken from Steve Levithan&#8217;s excellent XRegExp library [<a href=\"http://xregexp.com/addons/unicode/unicode-base.js\">http://xregexp.com/addons/unicode/unicode-base.js</a>]</p>"}, "type": "desc"}]}]}]}