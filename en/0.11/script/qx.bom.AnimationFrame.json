{"attributes": {"fullName": "qx.bom.AnimationFrame", "packageName": "qx.bom", "type": "bootstrap", "name": "AnimationFrame", "superClass": "qx.event.Emitter"}, "type": "class", "children": [{"attributes": {"text": "<p>This is a cross browser wrapper for requestAnimationFrame. For further\ninformation about the feature, take a look at spec:\n<a href=\"http://www.w3.org/TR/animation-timing/\">http://www.w3.org/TR/animation-timing/</a></p>\n\n<p>This class offers two ways of using this feature. First, the plain\n<span class=\"caps\">API</span> the spec describes.</p>\n\n<p>Here is a sample usage:</p>\n\n<pre class=\"javascript\">var start = Date.now();\nvar cb = function(time) {\n  if (time >= start + duration) {\n    // ... do some last tasks\n  } else {\n    var timePassed = time - start;\n    // ... calculate the current step and apply it\n    qx.bom.AnimationFrame.request(cb, this);\n  }\n};\nqx.bom.AnimationFrame.request(cb, this);\n</pre>\n\n<p>Another way of using it is to use it as an instance emitting events.</p>\n\n<p>Here is a sample usage of that <span class=\"caps\">API</span>:</p>\n\n<pre class=\"javascript\">var frame = new qx.bom.AnimationFrame();\nframe.on(\"end\", function() {\n  // ... do some last tasks\n}, this);\nframe.on(\"frame\", function(timePassed) {\n  // ... calculate the current step and apply it\n}, this);\nframe.startSequence(duration);\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "end"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired as soon as the animation has ended.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "undefined"}, "type": "entry"}]}]}, {"attributes": {"name": "frame"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired on every frame having the passed time as value\n(might be a float for higher precision).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"line": 111, "name": "cancelSequence"}, "type": "method", "children": [{"attributes": {"text": "<p>Cancels a started sequence of frames. It will do nothing if no\nsequence is running.</p>"}, "type": "desc"}]}, {"attributes": {"line": 82, "name": "startSequence"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "duration"}, "type": "param", "children": [{"attributes": {"text": "<p>The duration the sequence should take.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Method used to start a series of animation frames. The series will end as\nsoon as the given duration is over.</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 136, "isStatic": true, "name": "calculateTiming"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "func"}, "type": "param", "children": [{"attributes": {"text": "<p>The defined timing function. One of the following values: <code>&#8220;ease-in&#8221;</code>, <code>&#8220;ease-out&#8221;</code>, <code>&#8220;linear&#8221;</code>, <code>&#8220;ease-in-out&#8221;</code>, <code>&#8220;ease&#8221;</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "x"}, "type": "param", "children": [{"attributes": {"text": "<p>The percent value of the function.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calculation of the predefined timing functions. Approximation of the real\nbezier curves has been used for easier calculation. This is good and close\nenough for the predefined functions like <code>ease</code> or\n<code>linear</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The calculated value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 173, "isStatic": true, "name": "request"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "callback"}, "type": "param", "children": [{"attributes": {"text": "<p>The callback function which will get the current time as argument (which could be a float for higher precision).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>The context of the callback.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Request for an animation frame. If the native <code>requestAnimationFrame</code>\nmethod is supported, it will be used. Otherwise, we use timeouts with a\n30ms delay. The HighResolutionTime will be used if supported but the time given\nto the callback will still be a timestamp starting at 1 January 1970 00:00:00 <span class=\"caps\">UTC</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The id of the request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Number", "name": "TIMEOUT", "value": "30"}, "type": "constant", "children": [{"attributes": {"text": "<p>The default time in ms the timeout fallback implementation uses.</p>"}, "type": "desc"}]}]}]}