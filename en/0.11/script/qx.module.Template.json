{"attributes": {"fullName": "qx.module.Template", "packageName": "qx.module", "isStatic": true, "type": "bootstrap", "name": "Template"}, "type": "class", "children": [{"attributes": {"text": "<p><span class=\"caps\">HTML</span> templating module. This is a wrapper for mustache.js which is a\n&#8220;framework-agnostic way to render logic-free views&#8221;.</p>\n\n<p>For further details, please visit the mustache.js documentation here:\n  <a href=\"https://github.com/janl/mustache.js/blob/master/README.md\">https://github.com/janl/mustache.js/blob/master/README.md</a></p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "private", "line": 93, "isStatic": true, "name": "__wrap"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p>a <span class=\"caps\">DOM</span> node</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Node"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>If the given node is a <span class=\"caps\">DOM</span> text node, wrap it in a span element and return\nthe wrapper.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Original element or wrapper</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"line": 46, "isStatic": true, "name": "get"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "id"}, "type": "param", "children": [{"attributes": {"text": "<p>The id of the <span class=\"caps\">HTML</span> template in the <span class=\"caps\">DOM</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>The object holding the data to render.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "partials"}, "type": "param", "children": [{"attributes": {"text": "<p>Object holding parts of a template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Helper method which provides direct access to templates stored as <span class=\"caps\">HTML</span> in\nthe <span class=\"caps\">DOM</span>. The <span class=\"caps\">DOM</span> node with the given ID will be treated as a template,\nparsed and a new <span class=\"caps\">DOM</span> element will be returned containing the parsed data.\nKeep in mind that templates can only have one root element.\nAdditionally, you should not put the template into a regular, hidden\n<span class=\"caps\">DOM</span> element because the template may not be valid <span class=\"caps\">HTML</span> due to the containing\nmustache tags. We suggest to put it into a script tag with the type\n<code>text/template</code>.</p>"}, "type": "desc"}, {"attributes": {"targetMethod": "template.get", "targetClass": "qxWeb", "sourceMethod": "get", "sourceClass": "qx.module.Template"}, "type": "attachStatic"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Collection containing a single <span class=\"caps\">DOM</span> element with the parsed template data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qxWeb"}, "type": "entry"}]}]}]}, {"attributes": {"line": 62, "isStatic": true, "name": "render"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "template"}, "type": "param", "children": [{"attributes": {"text": "<p>The String containing the template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>The object holding the data to render.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "partials"}, "type": "param", "children": [{"attributes": {"text": "<p>Object holding parts of a template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Original and only template method of mustache.js. For further\ndocumentation, please visit <a href=\"https://github.com/janl/mustache.js\">mustache.js</a>.</p>"}, "type": "desc"}, {"attributes": {"targetMethod": "template.render", "targetClass": "qxWeb", "sourceMethod": "render", "sourceClass": "qx.module.Template"}, "type": "attachStatic"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The parsed template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 80, "isStatic": true, "name": "renderToNode"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "template"}, "type": "param", "children": [{"attributes": {"text": "<p>The String containing the template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>The object holding the data to render.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "partials"}, "type": "param", "children": [{"attributes": {"text": "<p>Object holding parts of a template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\nand output is equal to {@link #get}. The advantage over {@link #get}\nis that you don&#8217;t need a <span class=\"caps\">HTML</span> template but can use a template\nstring and still get a collection. Keep in mind that templates\ncan only have one root element.</p>"}, "type": "desc"}, {"attributes": {"targetMethod": "template.renderToNode", "targetClass": "qxWeb", "sourceMethod": "renderToNode", "sourceClass": "qx.module.Template"}, "type": "attachStatic"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Collection containing a single <span class=\"caps\">DOM</span> element with the parsed template data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qxWeb"}, "type": "entry"}]}]}]}]}]}