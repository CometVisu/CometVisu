{"attributes": {"fullName": "qx.bom.Template", "packageName": "qx.bom", "isStatic": true, "type": "bootstrap", "name": "Template"}, "type": "class", "children": [{"attributes": {"text": "<p>The is a template class which can be used for <span class=\"caps\">HTML</span> templating. In fact,\nthis is a wrapper for mustache.js which is a &#8220;framework-agnostic way to\nrender logic-free views&#8221;.</p>\n\n<p>Here is a basic example how to use it:\nTemplate:</p>\n\n<pre class=\"javascript\">\nvar template = \"Hi, my name is {{name}}!\";\nvar view = {name: \"qooxdoo\"};\nqx.bom.Template.render(template, view);\n// return \"Hi, my name is qooxdoo!\"\n</pre>\n\n<p>For further details, please visit the mustache.js documentation here:\n  <a href=\"https://github.com/janl/mustache.js/blob/master/README.md\">https://github.com/janl/mustache.js/blob/master/README.md</a></p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "protected", "line": 143, "isStatic": true, "name": "_createNodeFromTemplate"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "template"}, "type": "param", "children": [{"attributes": {"text": "<p>The String containing the template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Accepts a parsed template and returns a (potentially nested) node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>A <span class=\"caps\">DOM</span> element holding the parsed template data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"line": 131, "isStatic": true, "name": "get"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "id"}, "type": "param", "children": [{"attributes": {"text": "<p>The id of the <span class=\"caps\">HTML</span> template in the <span class=\"caps\">DOM</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>The object holding the data to render.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "partials"}, "type": "param", "children": [{"attributes": {"text": "<p>Object holding parts of a template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Helper method which provides you with a direct access to templates\nstored as <span class=\"caps\">HTML</span> in the <span class=\"caps\">DOM</span>. The <span class=\"caps\">DOM</span> node with the given ID will be used\nas a template, parsed and a new <span class=\"caps\">DOM</span> node will be returned containing the\nparsed data. Keep in mind to have only one root <span class=\"caps\">DOM</span> element in the the\ntemplate.\nAdditionally, you should not put the template into a regular, hidden\n<span class=\"caps\">DOM</span> element because the template may not be valid <span class=\"caps\">HTML</span> due to the containing\nmustache tags. We suggest to put it into a script tag with the type\n<code>text/template</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>A <span class=\"caps\">DOM</span> element holding the parsed template data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1, "isStatic": true, "name": "render"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "template"}, "type": "param", "children": [{"attributes": {"text": "<p>The String containing the template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>The object holding the data to render.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "partials"}, "type": "param", "children": [{"attributes": {"text": "<p>Object holding parts of a template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Original and only template method of mustache.js. For further\ndocumentation, please visit <a href=\"https://github.com/janl/mustache.js\">https://github.com/janl/mustache.js</a></p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The parsed template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 110, "isStatic": true, "name": "renderToNode"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "template"}, "type": "param", "children": [{"attributes": {"text": "<p>The String containing the template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>The object holding the data to render.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "partials"}, "type": "param", "children": [{"attributes": {"text": "<p>Object holding parts of a template.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\nand output is equal to {@link #get}. The advantage over {@link #get}\nis that you don&#8217;t need a <span class=\"caps\">HTML</span> template but can use a template\nstring and still get a <span class=\"caps\">DOM</span> element. Keep in mind that templates\ncan only have one root element.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>A <span class=\"caps\">DOM</span> element holding the parsed template data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Null", "name": "version", "value": "null"}, "type": "constant", "children": [{"attributes": {"text": "<p>Contains the mustache.js version.</p>"}, "type": "desc"}]}]}]}