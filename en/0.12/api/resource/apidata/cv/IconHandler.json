{
  "className": "cv.IconHandler",
  "packageName": "cv",
  "name": "IconHandler",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 266,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The object \"icon\" contains the whole API necessary to handle the icons.</p><div class=\"authors\"><label>Author:</label> Christian Mayer</div><div class=\"since\"><label>Since:</label> 2012</div>"
        }
      ],
      "@author": [
        {
          "name": "@author",
          "body": "Christian Mayer"
        }
      ],
      "@since": [
        {
          "name": "@since",
          "body": "2012"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 39,
        "column": 13
      },
      "end": {
        "line": 41,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__db": {
      "location": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 14
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal database of the known icons.\n Initially filled with the default icons.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "insert": {
      "location": {
        "start": {
          "line": 61,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert or overwrite one or many icons into the database. The parameter\n might be a full hash of icon definitions or a single one consisting out of\n a name and a URI path. Optional further parameters are a \"type\" and a\n flavour.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "get": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 142,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the icon information for a name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name",
            "paramName": "name",
            "description": " Name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String?} Type",
            "paramName": "type",
            "description": " Type",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "flavour {String?} Flavour",
            "paramName": "flavour",
            "description": " Flavour",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "color {String?} Color (only relevant for monochrome icons)",
            "paramName": "color",
            "description": " Color (only relevant for monochrome icons)",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The URI for the icon - or \"undefined\" if not known",
            "type": "String",
            "description": " The URI for the icon - or \"undefined\" if not known"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "getURI": {
      "location": {
        "start": {
          "line": 144,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "getIconElement": {
      "location": {
        "start": {
          "line": 154,
          "column": 4
        },
        "end": {
          "line": 180,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return an icon DOM element.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getIconText": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 215,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a String for the icon, e.g. build a DOM tree in a string before\n passing it to ParseHTML. After the content was added to the DOM the\n fillIcons method must be called to fill missing content (e.g. the <canvas>\n icons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name",
            "paramName": "name",
            "description": " Name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String?} Type",
            "paramName": "type",
            "description": " Type",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "flavour {String?} Flavour",
            "paramName": "flavour",
            "description": " Flavour",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "color {String?} Color (only relevant for monochrome icons)",
            "paramName": "color",
            "description": " Color (only relevant for monochrome icons)",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "styling {String?} Styling",
            "paramName": "styling",
            "description": " Styling",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "iconclass {String?} icon class",
            "paramName": "iconclass",
            "description": " icon class",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getIconSource": {
      "location": {
        "start": {
          "line": 223,
          "column": 4
        },
        "end": {
          "line": 235,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provide a value that can be used by cv.ui.manager.basic.Image to display the icon on an qooxdoo widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} icon name",
            "paramName": "name",
            "description": " icon name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "classes {String?} optional css classes used in the svg icon code (default is 'icon')",
            "paramName": "classes",
            "description": " optional css classes used in the svg icon code (default is 'icon')",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|string|*}",
            "type": "String|string|*",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fillIcons": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 242,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fill the icons in the array.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "list": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List all known icons</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all known icon names",
            "type": "Array",
            "description": " List of all known icon names"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 262,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return icon database for debuging purposes - use ONLY for debugging as it's\n circumventing the data hiding and exposes a writeable reference to the\n database object!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The icon database",
            "type": "Object",
            "description": " The icon database"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}