{
  "className": "cv.util.ConfigLoader",
  "packageName": "cv.util",
  "name": "ConfigLoader",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 253,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The ConfigLoader loads CometVisu config files from the backend. If the loaded config file contains\n <include> elements those config parts are loaded and add to the XML-Document.</p><div class=\"authors\"><label>Author:</label> Tobias Bräutigam <tbraeutigam@gmail.com></div><div class=\"since\"><label>Since:</label> 2018</div>"
        }
      ],
      "@author": [
        {
          "name": "@author",
          "body": "Tobias Bräutigam <tbraeutigam@gmail.com>"
        }
      ],
      "@since": [
        {
          "name": "@since",
          "body": "2018"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 37,
        "column": 13
      },
      "end": {
        "line": 40,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__loadQueue": {
      "location": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__doneCallback": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__doneCallbackContext": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 31
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__xml": {
      "location": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 15
        }
      },
      "type": "variable",
      "access": "private"
    },
    "load": {
      "location": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Load a config file</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback",
            "paramName": "callback",
            "type": ""
          },
          {
            "name": "@param",
            "body": "context",
            "paramName": "context",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "loadInclude": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 179,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Load an include source and replace it with the loaded content</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "includeElem {Element}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_checkQueue": {
      "location": {
        "start": {
          "line": 185,
          "column": 4
        },
        "end": {
          "line": 190,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if everything is loaded and call the callback in this case</p>"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "configError": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle errors that occur during loading ot the config file</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "textStatus {String} error status",
            "paramName": "textStatus",
            "description": " error status",
            "type": "cv.util.String"
          },
          {
            "name": "@param",
            "body": "additionalErrorInfo {String} error message",
            "paramName": "additionalErrorInfo",
            "description": " error message",
            "type": "cv.util.String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 247,
        "column": 12
      },
      "end": {
        "line": 252,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}