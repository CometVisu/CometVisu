{
  "className": "qx.util.Permutation",
  "packageName": "qx.util",
  "name": "Permutation",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 70,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Generate permutations of a map.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "permute": {
      "location": {
        "start": {
          "line": 32,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The first parameter is a map with array values. This function computes\n all combinations of the array values and call the callback for each\n combination.\n e.g. a value of\n </p>\n<pre class=\"javascript\">\n   {\n     a: [1, 2],\n     b: [\"a\", \"b\"]\n   }\n </pre>\n<p>would call the callback for each of these maps:\n </p>\n<pre class=\"javascript\">\n  { a: 1, b: \"a\" },\n  { a: 1, b: \"b\" },\n  { a: 2, b: \"a\" },\n  { a: 2, b: \"b\" }\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "options {Map} map with array values to generate the permutations of",
            "paramName": "options",
            "description": " map with array values to generate the permutations of",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "callback {Function} This callback is called for each permuted map",
            "paramName": "callback",
            "description": " This callback is called for each permuted map",
            "type": "qx.util.Function"
          },
          {
            "name": "@param",
            "body": "context {Object} The callback's <code>this</code> context.",
            "paramName": "context",
            "description": " The callback's <code>this</code> context.",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}