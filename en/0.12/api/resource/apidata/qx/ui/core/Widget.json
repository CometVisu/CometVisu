{
  "className": "qx.ui.core.Widget",
  "packageName": "qx.ui.core",
  "name": "Widget",
  "superClass": "qx.ui.core.LayoutItem",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [
    "qx.locale.MTranslation"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 42,
        "column": 0
      },
      "end": {
        "line": 3957,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This is the base class for all widgets.\n<em>External Documentation</em>\n <a href='http://qooxdoo.org/docs/#core/' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a>\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.ui.core.EventHandler"
        },
        {
          "name": "@use",
          "body": "qx.event.handler.DragDrop"
        }
      ],
      "@asset": [
        {
          "name": "@asset",
          "body": "qx/static/blank.gif"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.ui.root.Inline"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 55,
        "column": 14
      },
      "end": {
        "line": 66,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "events": {
    "appear": {
      "location": {
        "start": {
          "line": 82,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the widget appears on the screen.</p>"
          }
        ]
      },
      "name": "appear",
      "type": "qx.event.type.Event"
    },
    "disappear": {
      "location": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the widget disappears from the screen.</p>"
          }
        ]
      },
      "name": "disappear",
      "type": "qx.event.type.Event"
    },
    "createChildControl": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 45
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the creation of a child control. The passed data is the\n newly created child widget.</p>"
          }
        ]
      },
      "name": "createChildControl",
      "type": "qx.event.type.Data"
    },
    "resize": {
      "location": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on resize (after layout) of the widget.\n The data property of the event contains the widget's computed location\n and dimension as returned by {@link qx.ui.core.LayoutItem#getBounds}</p>"
          }
        ]
      },
      "name": "resize",
      "type": "qx.event.type.Data"
    },
    "move": {
      "location": {
        "start": {
          "line": 108,
          "column": 4
        },
        "end": {
          "line": 108,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on move (after layout) of the widget.\n The data property of the event contains the widget's computed location\n and dimension as returned by {@link qx.ui.core.LayoutItem#getBounds}</p>"
          }
        ]
      },
      "name": "move",
      "type": "qx.event.type.Data"
    },
    "syncAppearance": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the appearance has been applied. This happens before the\n widget becomes visible, on state and appearance changes. The data field\n contains the state map. This can be used to react on state changes or to\n read properties set by the appearance.</p>"
          }
        ]
      },
      "name": "syncAppearance",
      "type": "qx.event.type.Data"
    },
    "mousemove": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse cursor moves over the widget.\n  The data property of the event contains the widget's computed location\n  and dimension as returned by {@link qx.ui.core.LayoutItem#getBounds}</p>"
          }
        ]
      },
      "name": "mousemove",
      "type": "qx.event.type.Mouse"
    },
    "mouseover": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse cursor enters the widget.\n Note: This event is also dispatched if the widget is disabled!</p>"
          }
        ]
      },
      "name": "mouseover",
      "type": "qx.event.type.Mouse"
    },
    "mouseout": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse cursor leaves widget.\n Note: This event is also dispatched if the widget is disabled!</p>"
          }
        ]
      },
      "name": "mouseout",
      "type": "qx.event.type.Mouse"
    },
    "mousedown": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mouse button is pressed on the widget.</p>"
          }
        ]
      },
      "name": "mousedown",
      "type": "qx.event.type.Mouse"
    },
    "mouseup": {
      "location": {
        "start": {
          "line": 144,
          "column": 4
        },
        "end": {
          "line": 144,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mouse button is released on the widget.</p>"
          }
        ]
      },
      "name": "mouseup",
      "type": "qx.event.type.Mouse"
    },
    "click": {
      "location": {
        "start": {
          "line": 148,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is clicked using left or middle button.\n        {@link qx.event.type.Mouse#getButton} for more details.</p>"
          }
        ]
      },
      "name": "click",
      "type": "qx.event.type.Mouse"
    },
    "auxclick": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is clicked using a non primary button.\n        {@link qx.event.type.Mouse#getButton} for more details.</p>"
          }
        ]
      },
      "name": "auxclick",
      "type": "qx.event.type.Mouse"
    },
    "dblclick": {
      "location": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 156,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is double clicked using left or middle button.\n        {@link qx.event.type.Mouse#getButton} for more details.</p>"
          }
        ]
      },
      "name": "dblclick",
      "type": "qx.event.type.Mouse"
    },
    "contextmenu": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 159,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is clicked using the right mouse button.</p>"
          }
        ]
      },
      "name": "contextmenu",
      "type": "qx.event.type.Mouse"
    },
    "beforeContextmenuOpen": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 162,
          "column": 48
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the context menu is opened.</p>"
          }
        ]
      },
      "name": "beforeContextmenuOpen",
      "type": "qx.event.type.Data"
    },
    "mousewheel": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 43
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse wheel is used over the widget.</p>"
          }
        ]
      },
      "name": "mousewheel",
      "type": "qx.event.type.MouseWheel"
    },
    "touchstart": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a touch at the screen is started.</p>"
          }
        ]
      },
      "name": "touchstart",
      "type": "qx.event.type.Touch"
    },
    "touchend": {
      "location": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a touch at the screen has ended.</p>"
          }
        ]
      },
      "name": "touchend",
      "type": "qx.event.type.Touch"
    },
    "touchmove": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 174,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired during a touch at the screen.</p>"
          }
        ]
      },
      "name": "touchmove",
      "type": "qx.event.type.Touch"
    },
    "touchcancel": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 177,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a touch at the screen is canceled.</p>"
          }
        ]
      },
      "name": "touchcancel",
      "type": "qx.event.type.Touch"
    },
    "tap": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 180,
          "column": 29
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a pointer taps on the screen.</p>"
          }
        ]
      },
      "name": "tap",
      "type": "qx.event.type.Tap"
    },
    "longtap": {
      "location": {
        "start": {
          "line": 183,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a pointer holds on the screen.</p>"
          }
        ]
      },
      "name": "longtap",
      "type": "qx.event.type.Tap"
    },
    "dbltap": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a pointer taps twice on the screen.</p>"
          }
        ]
      },
      "name": "dbltap",
      "type": "qx.event.type.Tap"
    },
    "swipe": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a pointer swipes over the screen.</p>"
          }
        ]
      },
      "name": "swipe",
      "type": "qx.event.type.Touch"
    },
    "rotate": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when two pointers performing a rotate gesture on the screen.</p>"
          }
        ]
      },
      "name": "rotate",
      "type": "qx.event.type.Rotate"
    },
    "pinch": {
      "location": {
        "start": {
          "line": 195,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when two pointers performing a pinch in/out gesture on the screen.</p>"
          }
        ]
      },
      "name": "pinch",
      "type": "qx.event.type.Pinch"
    },
    "track": {
      "location": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 198,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an active pointer moves on the screen (after pointerdown till pointerup).</p>"
          }
        ]
      },
      "name": "track",
      "type": "qx.event.type.Track"
    },
    "roll": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an active pointer moves on the screen or the mouse wheel is used.</p>"
          }
        ]
      },
      "name": "roll",
      "type": "qx.event.type.Roll"
    },
    "pointermove": {
      "location": {
        "start": {
          "line": 204,
          "column": 4
        },
        "end": {
          "line": 204,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a pointer (mouse/touch/pen) moves or changes any of it's values.</p>"
          }
        ]
      },
      "name": "pointermove",
      "type": "qx.event.type.Pointer"
    },
    "pointerover": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a pointer (mouse/touch/pen) hovers the widget.</p>"
          }
        ]
      },
      "name": "pointerover",
      "type": "qx.event.type.Pointer"
    },
    "pointerout": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a pointer (mouse/touch/pen) leaves this widget.</p>"
          }
        ]
      },
      "name": "pointerout",
      "type": "qx.event.type.Pointer"
    },
    "pointerdown": {
      "location": {
        "start": {
          "line": 216,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a pointer (mouse/touch/pen) button is pressed or\n a finger touches the widget.</p>"
          }
        ]
      },
      "name": "pointerdown",
      "type": "qx.event.type.Pointer"
    },
    "pointerup": {
      "location": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if all pointer (mouse/touch/pen) buttons are released or\n the finger is lifted from the widget.</p>"
          }
        ]
      },
      "name": "pointerup",
      "type": "qx.event.type.Pointer"
    },
    "pointercancel": {
      "location": {
        "start": {
          "line": 225,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 43
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a pointer (mouse/touch/pen) action is canceled.</p>"
          }
        ]
      },
      "name": "pointercancel",
      "type": "qx.event.type.Pointer"
    },
    "keyup": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event if fired if a keyboard key is released.</p>"
          }
        ]
      },
      "name": "keyup",
      "type": "qx.event.type.KeySequence"
    },
    "keydown": {
      "location": {
        "start": {
          "line": 234,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event if fired if a keyboard key is pressed down. This event is\n only fired once if the user keeps the key pressed for a while.</p>"
          }
        ]
      },
      "name": "keydown",
      "type": "qx.event.type.KeySequence"
    },
    "keypress": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 241,
          "column": 42
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired any time a key is pressed. It will be repeated if\n the user keeps the key pressed. The pressed key can be determined using\n {@link qx.event.type.KeySequence#getKeyIdentifier}.</p>"
          }
        ]
      },
      "name": "keypress",
      "type": "qx.event.type.KeySequence"
    },
    "keyinput": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired if the pressed key or keys result in a printable\n character. Since the character is not necessarily associated with a\n single physical key press, the event does not have a key identifier\n getter. This event gets repeated if the user keeps pressing the key(s).\n The unicode code of the pressed key can be read using\n {@link qx.event.type.KeyInput#getCharCode}.</p>"
          }
        ]
      },
      "name": "keyinput",
      "type": "qx.event.type.KeyInput"
    },
    "focus": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired when the widget gets focused. Only widgets which are\n {@link #focusable} receive this event.</p>"
          }
        ]
      },
      "name": "focus",
      "type": "qx.event.type.Focus"
    },
    "blur": {
      "location": {
        "start": {
          "line": 266,
          "column": 4
        },
        "end": {
          "line": 266,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired when the widget gets blurred. Only widgets which are\n {@link #focusable} receive this event.</p>"
          }
        ]
      },
      "name": "blur",
      "type": "qx.event.type.Focus"
    },
    "focusin": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 271,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget itself or any child of the widget receive the focus.</p>"
          }
        ]
      },
      "name": "focusin",
      "type": "qx.event.type.Focus"
    },
    "focusout": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 276,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget itself or any child of the widget lost the focus.</p>"
          }
        ]
      },
      "name": "focusout",
      "type": "qx.event.type.Focus"
    },
    "activate": {
      "location": {
        "start": {
          "line": 281,
          "column": 4
        },
        "end": {
          "line": 281,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget gets active (receives keyboard events etc.)</p>"
          }
        ]
      },
      "name": "activate",
      "type": "qx.event.type.Focus"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 286,
          "column": 4
        },
        "end": {
          "line": 286,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget gets inactive</p>"
          }
        ]
      },
      "name": "deactivate",
      "type": "qx.event.type.Focus"
    },
    "capture": {
      "location": {
        "start": {
          "line": 293,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the widget becomes the capturing widget by a call to {@link #capture}.</p>"
          }
        ]
      },
      "name": "capture",
      "type": "qx.event.type.Event"
    },
    "losecapture": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 299,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the widget looses the capturing mode by a call to\n {@link #releaseCapture} or a mouse click.</p>"
          }
        ]
      },
      "name": "losecapture",
      "type": "qx.event.type.Event"
    },
    "drop": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 311,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on the drop target when the drag&amp;drop action is finished\n successfully. This event is normally used to transfer the data\n from the drag to the drop target.\n Modeled after the WHATWG specification of Drag&amp;Drop:\n http://www.whatwg.org/specs/web-apps/current-work/#dnd</p>"
          }
        ]
      },
      "name": "drop",
      "type": "qx.event.type.Drag"
    },
    "dragleave": {
      "location": {
        "start": {
          "line": 319,
          "column": 4
        },
        "end": {
          "line": 319,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on a potential drop target when leaving it.\n Modeled after the WHATWG specification of Drag&amp;Drop:\n http://www.whatwg.org/specs/web-apps/current-work/#dnd</p>"
          }
        ]
      },
      "name": "dragleave",
      "type": "qx.event.type.Drag"
    },
    "dragover": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on a potential drop target when reaching it via the pointer.\n This event can be canceled if none of the incoming data types\n are supported.\n Modeled after the WHATWG specification of Drag&amp;Drop:\n http://www.whatwg.org/specs/web-apps/current-work/#dnd</p>"
          }
        ]
      },
      "name": "dragover",
      "type": "qx.event.type.Drag"
    },
    "drag": {
      "location": {
        "start": {
          "line": 339,
          "column": 4
        },
        "end": {
          "line": 339,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired during the drag. Contains the current pointer coordinates\n using {@link qx.event.type.Drag#getDocumentLeft} and\n {@link qx.event.type.Drag#getDocumentTop}\n Modeled after the WHATWG specification of Drag&amp;Drop:\n http://www.whatwg.org/specs/web-apps/current-work/#dnd</p>"
          }
        ]
      },
      "name": "drag",
      "type": "qx.event.type.Drag"
    },
    "dragstart": {
      "location": {
        "start": {
          "line": 348,
          "column": 4
        },
        "end": {
          "line": 348,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initiate the drag-and-drop operation. This event is cancelable\n when the drag operation is currently not allowed/possible.\n Modeled after the WHATWG specification of Drag&amp;Drop:\n http://www.whatwg.org/specs/web-apps/current-work/#dnd</p>"
          }
        ]
      },
      "name": "dragstart",
      "type": "qx.event.type.Drag"
    },
    "dragend": {
      "location": {
        "start": {
          "line": 353,
          "column": 4
        },
        "end": {
          "line": 353,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on the source (drag) target every time a drag session was ended.</p>"
          }
        ]
      },
      "name": "dragend",
      "type": "qx.event.type.Drag"
    },
    "dragchange": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 362,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the drag configuration has been modified e.g. the user\n pressed a key which changed the selected action. This event will be\n fired on the draggable and the droppable element. In case of the\n droppable element, you can cancel the event and prevent a drop based on\n e.g. the current action.</p>"
          }
        ]
      },
      "name": "dragchange",
      "type": "qx.event.type.Drag"
    },
    "droprequest": {
      "location": {
        "start": {
          "line": 370,
          "column": 4
        },
        "end": {
          "line": 370,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the drop was successfully done and the target widget\n is now asking for data. The listener should transfer the data,\n respecting the selected action, to the event. This can be done using\n the event's {@link qx.event.type.Drag#addData} method.</p>"
          }
        ]
      },
      "name": "droprequest",
      "type": "qx.event.type.Drag"
    }
  },
  "properties": {
    "paddingTop": {
      "location": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 398,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Padding of the widget (top)</p>"
          }
        ]
      },
      "name": "paddingTop",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "paddingRight": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 408,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Padding of the widget (right)</p>"
          }
        ]
      },
      "name": "paddingRight",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "paddingBottom": {
      "location": {
        "start": {
          "line": 412,
          "column": 4
        },
        "end": {
          "line": 418,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Padding of the widget (bottom)</p>"
          }
        ]
      },
      "name": "paddingBottom",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "paddingLeft": {
      "location": {
        "start": {
          "line": 422,
          "column": 4
        },
        "end": {
          "line": 428,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Padding of the widget (left)</p>"
          }
        ]
      },
      "name": "paddingLeft",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "padding": {
      "location": {
        "start": {
          "line": 439,
          "column": 4
        },
        "end": {
          "line": 444,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The 'padding' property is a shorthand property for setting 'paddingTop',\n 'paddingRight', 'paddingBottom' and 'paddingLeft' at the same time.\n If four values are specified they apply to top, right, bottom and left respectively.\n If there is only one value, it applies to all sides, if there are two or three,\n the missing values are taken from the opposite side.</p>"
          }
        ]
      },
      "name": "padding",
      "propertyType": "new",
      "themeable": true,
      "group": [
        "paddingTop",
        "paddingRight",
        "paddingBottom",
        "paddingLeft"
      ]
    },
    "zIndex": {
      "location": {
        "start": {
          "line": 461,
          "column": 4
        },
        "end": {
          "line": 469,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The z-index property sets the stack order of an element. An element with\n greater stack order is always in front of another element with lower stack order.</p>"
          }
        ]
      },
      "name": "zIndex",
      "propertyType": "new",
      "themeable": true,
      "event": "changeZIndex",
      "apply": "_applyZIndex",
      "nullable": true,
      "init": 10,
      "allowNull": true,
      "check": "Integer",
      "defaultValue": 10
    },
    "decorator": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 487,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The decorator property points to an object, which is responsible\n for drawing the widget's decoration, e.g. border, background or shadow.\n This can be a decorator object or a string pointing to a decorator\n defined in the decoration theme.</p>"
          }
        ]
      },
      "name": "decorator",
      "propertyType": "new",
      "themeable": true,
      "event": "changeDecorator",
      "apply": "_applyDecorator",
      "nullable": true,
      "allowNull": true,
      "check": "Decorator"
    },
    "backgroundColor": {
      "location": {
        "start": {
          "line": 493,
          "column": 4
        },
        "end": {
          "line": 500,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The background color the rendered widget.</p>"
          }
        ]
      },
      "name": "backgroundColor",
      "propertyType": "new",
      "themeable": true,
      "event": "changeBackgroundColor",
      "apply": "_applyBackgroundColor",
      "nullable": true,
      "allowNull": true,
      "check": "Color"
    },
    "textColor": {
      "location": {
        "start": {
          "line": 506,
          "column": 4
        },
        "end": {
          "line": 514,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text color the rendered widget.</p>"
          }
        ]
      },
      "name": "textColor",
      "propertyType": "new",
      "themeable": true,
      "event": "changeTextColor",
      "inheritable": true,
      "apply": "_applyTextColor",
      "nullable": true,
      "allowNull": true,
      "check": "Color"
    },
    "font": {
      "location": {
        "start": {
          "line": 521,
          "column": 4
        },
        "end": {
          "line": 530,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The widget's font. The value is either a font name defined in the font\n theme or an instance of {@link qx.bom.Font}.</p>"
          }
        ]
      },
      "name": "font",
      "propertyType": "new",
      "themeable": true,
      "event": "changeFont",
      "inheritable": true,
      "apply": "_applyFont",
      "nullable": true,
      "allowNull": true,
      "check": "Font"
    },
    "opacity": {
      "location": {
        "start": {
          "line": 541,
          "column": 4
        },
        "end": {
          "line": 548,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping to native style property opacity.\n The uniform opacity setting to be applied across an entire object.\n Behaves like the new CSS-3 Property.\n Any values outside the range 0.0 (fully transparent) to 1.0\n (fully opaque) will be clamped to this range.</p>"
          }
        ]
      },
      "name": "opacity",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyOpacity",
      "nullable": true,
      "allowNull": true,
      "check": "Number"
    },
    "cursor": {
      "location": {
        "start": {
          "line": 577,
          "column": 4
        },
        "end": {
          "line": 585,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping to native style property cursor.\n The name of the cursor to show when the pointer is over the widget.\n This is any valid CSS2 cursor name defined by W3C.\n The following values are possible crossbrowser:\n </p>\n<ul><li>default</li>\n <li>crosshair</li>\n <li>pointer</li>\n <li>move</li>\n <li>n-resize</li>\n <li>ne-resize</li>\n <li>e-resize</li>\n <li>se-resize</li>\n <li>s-resize</li>\n <li>sw-resize</li>\n <li>w-resize</li>\n <li>nw-resize</li>\n <li>nesw-resize</li>\n <li>nwse-resize</li>\n <li>text</li>\n <li>wait</li>\n <li>help </li>\n </ul>"
          }
        ]
      },
      "name": "cursor",
      "propertyType": "new",
      "themeable": true,
      "inheritable": true,
      "apply": "_applyCursor",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "toolTip": {
      "location": {
        "start": {
          "line": 597,
          "column": 4
        },
        "end": {
          "line": 601,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the tooltip instance to use for this widget. If only the tooltip\n text and icon have to be set its better to use the {@link #toolTipText}\n and {@link #toolTipIcon} properties since they use a shared tooltip\n instance.\n If this property is set the {@link #toolTipText} and {@link #toolTipIcon}\n properties are ignored.</p>"
          }
        ]
      },
      "name": "toolTip",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "qx.ui.tooltip.ToolTip"
    },
    "toolTipText": {
      "location": {
        "start": {
          "line": 610,
          "column": 4
        },
        "end": {
          "line": 616,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text of the widget's tooltip. This text can contain HTML markup.\n The text is displayed using a shared tooltip instance. If the tooltip\n must be customized beyond the text and an icon {@link #toolTipIcon}, the\n {@link #toolTip} property has to be used</p>"
          }
        ]
      },
      "name": "toolTipText",
      "propertyType": "new",
      "event": "changeToolTipText",
      "apply": "_applyToolTipText",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "toolTipIcon": {
      "location": {
        "start": {
          "line": 625,
          "column": 4
        },
        "end": {
          "line": 630,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The icon URI of the widget's tooltip. This icon is displayed using a shared\n tooltip instance. If the tooltip must be customized beyond the tooltip text\n {@link #toolTipText} and the icon, the {@link #toolTip} property has to be\n used.</p>"
          }
        ]
      },
      "name": "toolTipIcon",
      "propertyType": "new",
      "event": "changeToolTipText",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "blockToolTip": {
      "location": {
        "start": {
          "line": 635,
          "column": 4
        },
        "end": {
          "line": 639,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Controls if a tooltip should shown or not.</p>"
          }
        ]
      },
      "name": "blockToolTip",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "showToolTipWhenDisabled": {
      "location": {
        "start": {
          "line": 644,
          "column": 4
        },
        "end": {
          "line": 648,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Forces to show tooltip when widget is disabled.</p>"
          }
        ]
      },
      "name": "showToolTipWhenDisabled",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "visibility": {
      "location": {
        "start": {
          "line": 667,
          "column": 4
        },
        "end": {
          "line": 673,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Controls the visibility. Valid values are:\n </p>\n<ul>\n   <li><b>visible</b>: Render the widget</li>\n   <li><b>hidden</b>: Hide the widget but don't relayout the widget's parent.</li>\n   <li><b>excluded</b>: Hide the widget and relayout the parent as if the\n     widget was not a child of its parent.</li>\n </ul>"
          }
        ]
      },
      "name": "visibility",
      "propertyType": "new",
      "event": "changeVisibility",
      "apply": "_applyVisibility",
      "init": "visible",
      "possibleValues": [
        "visible",
        "hidden",
        "excluded"
      ],
      "defaultValue": "visible"
    },
    "enabled": {
      "location": {
        "start": {
          "line": 682,
          "column": 4
        },
        "end": {
          "line": 689,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is enabled. Disabled widgets are usually grayed out\n and do not process user created events. While in the disabled state most\n user input events are blocked. Only the {@link #pointerover} and\n {@link #pointerout} events will be dispatched.</p>"
          }
        ]
      },
      "name": "enabled",
      "propertyType": "new",
      "event": "changeEnabled",
      "inheritable": true,
      "apply": "_applyEnabled",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "anonymous": {
      "location": {
        "start": {
          "line": 701,
          "column": 4
        },
        "end": {
          "line": 706,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is anonymous.\n Anonymous widgets are ignored in the event hierarchy. This is useful\n for combined widgets where the internal structure do not have a custom\n appearance with a different styling from the element around. This is\n especially true for widgets like checkboxes or buttons where the text\n or icon are handled synchronously for state changes to the outer widget.</p>"
          }
        ]
      },
      "name": "anonymous",
      "propertyType": "new",
      "apply": "_applyAnonymous",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "tabIndex": {
      "location": {
        "start": {
          "line": 716,
          "column": 4
        },
        "end": {
          "line": 721,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Defines the tab index of an widget. If widgets with tab indexes are part\n of the current focus root these elements are sorted in first priority. Afterwards\n the sorting continues by rendered position, zIndex and other criteria.\n Please note: The value must be between 1 and 32000.</p>"
          }
        ]
      },
      "name": "tabIndex",
      "propertyType": "new",
      "apply": "_applyTabIndex",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    },
    "focusable": {
      "location": {
        "start": {
          "line": 732,
          "column": 4
        },
        "end": {
          "line": 737,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is focusable e.g. rendering a focus border and visualize\n as active element.\n See also {@link #isTabable} which allows runtime checks for\n <code>isChecked</code> or other stuff to test whether the widget is\n reachable via the TAB key.</p>"
          }
        ]
      },
      "name": "focusable",
      "propertyType": "new",
      "apply": "_applyFocusable",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "keepFocus": {
      "location": {
        "start": {
          "line": 749,
          "column": 4
        },
        "end": {
          "line": 754,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If this property is enabled, the widget and all of its child widgets\n will never get focused. The focus keeps at the currently\n focused widget.\n This only works for widgets which are not {@link #focusable}.\n This is mainly useful for widget authors. Please use with caution!</p>"
          }
        ]
      },
      "name": "keepFocus",
      "propertyType": "new",
      "apply": "_applyKeepFocus",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "keepActive": {
      "location": {
        "start": {
          "line": 764,
          "column": 4
        },
        "end": {
          "line": 769,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If this property if enabled, the widget and all of its child widgets\n will never get activated. The activation keeps at the currently\n activated widget.\n This is mainly useful for widget authors. Please use with caution!</p>"
          }
        ]
      },
      "name": "keepActive",
      "propertyType": "new",
      "apply": "_applyKeepActive",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "draggable": {
      "location": {
        "start": {
          "line": 773,
          "column": 4
        },
        "end": {
          "line": 778,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget acts as a source for drag&amp;drop operations</p>"
          }
        ]
      },
      "name": "draggable",
      "propertyType": "new",
      "apply": "_applyDraggable",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "droppable": {
      "location": {
        "start": {
          "line": 782,
          "column": 4
        },
        "end": {
          "line": 787,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget acts as a target for drag&amp;drop operations</p>"
          }
        ]
      },
      "name": "droppable",
      "propertyType": "new",
      "apply": "_applyDroppable",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "selectable": {
      "location": {
        "start": {
          "line": 797,
          "column": 4
        },
        "end": {
          "line": 803,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains content which may be selected by the user.\n If the value set to <code>true</code> the native browser selection can\n be used for text selection. But it is normally useful for\n forms fields, longer texts/documents, editors, etc.</p>"
          }
        ]
      },
      "name": "selectable",
      "propertyType": "new",
      "event": "changeSelectable",
      "apply": "_applySelectable",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "contextMenu": {
      "location": {
        "start": {
          "line": 809,
          "column": 4
        },
        "end": {
          "line": 815,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to show a context menu and which one</p>"
          }
        ]
      },
      "name": "contextMenu",
      "propertyType": "new",
      "event": "changeContextMenu",
      "apply": "_applyContextMenu",
      "nullable": true,
      "allowNull": true,
      "check": "qx.ui.menu.Menu"
    },
    "nativeContextMenu": {
      "location": {
        "start": {
          "line": 824,
          "column": 4
        },
        "end": {
          "line": 831,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the native context menu should be enabled for this widget. To\n globally enable the native context menu set the {@link #nativeContextMenu}\n property of the root widget ({@link qx.ui.root.Abstract}) to\n <code>true</code>.</p>"
          }
        ]
      },
      "name": "nativeContextMenu",
      "propertyType": "new",
      "themeable": true,
      "event": "changeNativeContextMenu",
      "apply": "_applyNativeContextMenu",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "appearance": {
      "location": {
        "start": {
          "line": 838,
          "column": 4
        },
        "end": {
          "line": 844,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The appearance ID. This ID is used to identify the appearance theme\n entry to use for this widget. This controls the styling of the element.</p>"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "event": "changeAppearance",
      "apply": "_applyAppearance",
      "init": "widget",
      "check": "String",
      "defaultValue": "widget"
    }
  },
  "statics": {
    "DEBUG": {
      "location": {
        "start": {
          "line": 857,
          "column": 4
        },
        "end": {
          "line": 857,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget should print out hints and debug messages</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "UNFOCUSABLE_WIDGET_FOCUS_BLUR_ERROR": {
      "location": {
        "start": {
          "line": 860,
          "column": 4
        },
        "end": {
          "line": 860,
          "column": 46
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to throw an error on focus/blur if the widget is unfocusable</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getWidgetByElement": {
      "location": {
        "start": {
          "line": 870,
          "column": 4
        },
        "end": {
          "line": 895,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget, which contains the given DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to search the widget for.",
            "paramName": "element",
            "description": " The DOM element to search the widget for.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "considerAnonymousState {Boolean?false} If true, anonymous widget\n   will not be returned.",
            "paramName": "considerAnonymousState",
            "description": " If true, anonymous widget\n   will not be returned.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The widget containing the element.",
            "type": "qx.ui.core.Widget",
            "description": " The widget containing the element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 917,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the \"parent\" widget contains the \"child\" widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget} The parent widget",
            "paramName": "parent",
            "description": " The parent widget",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The child widget",
            "paramName": "child",
            "description": " The child widget",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether one of the \"child\"'s parents is \"parent\"",
            "type": "Boolean",
            "description": " Whether one of the \"child\"'s parents is \"parent\""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__separatorPool": {
      "location": {
        "start": {
          "line": 920,
          "column": 4
        },
        "end": {
          "line": 920,
          "column": 46
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains all pooled separators for reuse"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    }
  },
  "members": {
    "__contentElement": {
      "location": {
        "start": {
          "line": 936,
          "column": 4
        },
        "end": {
          "line": 936,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__initialAppearanceApplied": {
      "location": {
        "start": {
          "line": 937,
          "column": 4
        },
        "end": {
          "line": 937,
          "column": 37
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__toolTipTextListenerId": {
      "location": {
        "start": {
          "line": 938,
          "column": 4
        },
        "end": {
          "line": 938,
          "column": 34
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__layoutManager": {
      "location": {
        "start": {
          "line": 950,
          "column": 4
        },
        "end": {
          "line": 950,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.layout.Abstract} The connected layout manager"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_getLayout": {
      "location": {
        "start": {
          "line": 954,
          "column": 4
        },
        "end": {
          "line": 956,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_setLayout": {
      "location": {
        "start": {
          "line": 967,
          "column": 4
        },
        "end": {
          "line": 985,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A a layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout.",
            "paramName": "layout",
            "description": " The new layout or\n     <code>null</code> to reset the layout.",
            "type": "qx.ui.layout.Abstract"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setLayoutParent": {
      "location": {
        "start": {
          "line": 989,
          "column": 4
        },
        "end": {
          "line": 1012,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_updateInsets": {
      "location": {
        "start": {
          "line": 1016,
          "column": 4
        },
        "end": {
          "line": 1016,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether insets have changed and must be updated"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 1020,
          "column": 4
        },
        "end": {
          "line": 1098,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "__separators": {
      "location": {
        "start": {
          "line": 1115,
          "column": 4
        },
        "end": {
          "line": 1115,
          "column": 23
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "clearSeparators": {
      "location": {
        "start": {
          "line": 1118,
          "column": 4
        },
        "end": {
          "line": 1138,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "renderSeparator": {
      "location": {
        "start": {
          "line": 1142,
          "column": 4
        },
        "end": {
          "line": 1175,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 1190,
          "column": 4
        },
        "end": {
          "line": 1287,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "invalidateLayoutCache": {
      "location": {
        "start": {
          "line": 1291,
          "column": 4
        },
        "end": {
          "line": 1298,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_getContentHint": {
      "location": {
        "start": {
          "line": 1313,
          "column": 4
        },
        "end": {
          "line": 1347,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the recommended/natural dimensions of the widget's content.\n For labels and images this may be their natural size when defined without\n any dimensions. For containers this may be the recommended size of the\n underlying layout manager.\n Developer note: This can be overwritten by the derived classes to allow\n a custom handling here.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getHeightForWidth": {
      "location": {
        "start": {
          "line": 1351,
          "column": 4
        },
        "end": {
          "line": 1375,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_getContentHeightForWidth": {
      "location": {
        "start": {
          "line": 1385,
          "column": 4
        },
        "end": {
          "line": 1387,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the computed height for the given width.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} Incoming width (as limitation)",
            "paramName": "width",
            "description": " Incoming width (as limitation)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Computed height while respecting the given width.",
            "type": "Integer",
            "description": " Computed height while respecting the given width."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getInsets": {
      "location": {
        "start": {
          "line": 1406,
          "column": 4
        },
        "end": {
          "line": 1448,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the sum of the widget's padding and border width.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Contains the keys <code>top</code>, <code>right</code>,\n   <code>bottom</code> and <code>left</code>. All values are integers.",
            "type": "Map",
            "description": " Contains the keys <code>top</code>, <code>right</code>,\n   <code>bottom</code> and <code>left</code>. All values are integers."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInnerSize": {
      "location": {
        "start": {
          "line": 1470,
          "column": 4
        },
        "end": {
          "line": 1483,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget's computed inner size as available\n through the layout process.\n This function is guaranteed to return a correct value\n during a {@link #resize} or {@link #move} event dispatch.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The widget inner dimension in pixel (if the layout is\n    valid). Contains the keys <code>width</code> and <code>height</code>.",
            "type": "Map",
            "description": " The widget inner dimension in pixel (if the layout is\n    valid). Contains the keys <code>width</code> and <code>height</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeOut": {
      "location": {
        "start": {
          "line": 1501,
          "column": 4
        },
        "end": {
          "line": 1503,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fade out this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\n   the fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "description": " The animation handle to react for\n   the fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeIn": {
      "location": {
        "start": {
          "line": 1511,
          "column": 4
        },
        "end": {
          "line": 1513,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fade in the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\n   the fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "description": " The animation handle to react for\n   the fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyAnonymous": {
      "location": {
        "start": {
          "line": 1523,
          "column": 4
        },
        "end": {
          "line": 1529,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "anonymous"
      ]
    },
    "show": {
      "location": {
        "start": {
          "line": 1536,
          "column": 4
        },
        "end": {
          "line": 1538,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Make this widget visible.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hide": {
      "location": {
        "start": {
          "line": 1545,
          "column": 4
        },
        "end": {
          "line": 1547,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hide this widget.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 1554,
          "column": 4
        },
        "end": {
          "line": 1556,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hide this widget and exclude it from the underlying layout.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isVisible": {
      "location": {
        "start": {
          "line": 1566,
          "column": 4
        },
        "end": {
          "line": 1568,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is locally visible.\n Note: This method does not respect the hierarchy.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is visible",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget is visible"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isHidden": {
      "location": {
        "start": {
          "line": 1578,
          "column": 4
        },
        "end": {
          "line": 1580,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is locally hidden.\n Note: This method does not respect the hierarchy.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is hidden",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget is hidden"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isExcluded": {
      "location": {
        "start": {
          "line": 1590,
          "column": 4
        },
        "end": {
          "line": 1592,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is locally excluded.\n Note: This method does not respect the hierarchy.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is excluded",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget is excluded"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "isSeeable": {
      "location": {
        "start": {
          "line": 1603,
          "column": 4
        },
        "end": {
          "line": 1616,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if the widget and all its parents are visible.\n WARNING: Please use this method with caution because it flushes the\n internal queues which might be an expensive operation.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the widget is currently on the screen",
            "type": "Boolean",
            "description": " true, if the widget is currently on the screen"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__createContentElement": {
      "location": {
        "start": {
          "line": 1633,
          "column": 4
        },
        "end": {
          "line": 1659,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create the widget's content HTML element.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The content HTML element",
            "type": "qx.html.Element",
            "description": " The content HTML element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_createContentElement": {
      "location": {
        "start": {
          "line": 1672,
          "column": 4
        },
        "end": {
          "line": 1678,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the content element. The style properties\n position and zIndex are modified from the Widget\n core.\n This function may be overridden to customize a class\n content.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "description": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getContentElement": {
      "location": {
        "start": {
          "line": 1687,
          "column": 4
        },
        "end": {
          "line": 1689,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the element wrapper of the widget's content element.\n This method exposes widget internal and must be used with caution!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "description": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__widgetChildren": {
      "location": {
        "start": {
          "line": 1699,
          "column": 4
        },
        "end": {
          "line": 1699,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.LayoutItem[]} List of all child widgets"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getLayoutChildren": {
      "location": {
        "start": {
          "line": 1709,
          "column": 4
        },
        "end": {
          "line": 1731,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all children, which are layout relevant. This excludes all widgets,\n which have a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} All layout relevant children.",
            "type": "qx.ui.core.Widget[]",
            "description": " All layout relevant children."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scheduleLayoutUpdate": {
      "location": {
        "start": {
          "line": 1738,
          "column": 4
        },
        "end": {
          "line": 1740,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the layout of this widget as invalid and triggers a layout update.\n This is a shortcut for <code>qx.ui.core.queue.Layout.add(this);</code>.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "invalidateLayoutChildren": {
      "location": {
        "start": {
          "line": 1746,
          "column": 4
        },
        "end": {
          "line": 1754,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the cache for children which should be laid out.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasLayoutChildren": {
      "location": {
        "start": {
          "line": 1764,
          "column": 4
        },
        "end": {
          "line": 1781,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the layout has children, which are layout relevant. This\n excludes all widgets, which have a {@link qx.ui.core.Widget#visibility}\n value of <code>exclude</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the layout has layout relevant children",
            "type": "Boolean",
            "description": " Whether the layout has layout relevant children"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildrenContainer": {
      "location": {
        "start": {
          "line": 1791,
          "column": 4
        },
        "end": {
          "line": 1793,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget which contains the children and\n is relevant for laying them out. This is from the user point of\n view and may not be identical to the technical structure.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Widget which contains the children.",
            "type": "qx.ui.core.Widget",
            "description": " Widget which contains the children."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__emptyChildren": {
      "location": {
        "start": {
          "line": 1802,
          "column": 4
        },
        "end": {
          "line": 1802,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} Placeholder for children list in empty widgets.\n     Mainly to keep instance number low."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__emptyChildren)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_getChildren": {
      "location": {
        "start": {
          "line": 1811,
          "column": 4
        },
        "end": {
          "line": 1813,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, so please do not modify it in-place).",
            "type": "qx.ui.core.LayoutItem[]",
            "description": " The children array (Arrays are\n   reference types, so please do not modify it in-place)."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_indexOf": {
      "location": {
        "start": {
          "line": 1824,
          "column": 4
        },
        "end": {
          "line": 1832,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": " The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_hasChildren": {
      "location": {
        "start": {
          "line": 1840,
          "column": 4
        },
        "end": {
          "line": 1844,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addChildrenToQueue": {
      "location": {
        "start": {
          "line": 1852,
          "column": 4
        },
        "end": {
          "line": 1867,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recursively adds all children to the given queue</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "queue {Array} The queue to add widgets to",
            "paramName": "queue",
            "description": " The queue to add widgets to",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_add": {
      "location": {
        "start": {
          "line": 1880,
          "column": 4
        },
        "end": {
          "line": 1898,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addAt": {
      "location": {
        "start": {
          "line": 1910,
          "column": 4
        },
        "end": {
          "line": 1934,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted. If no\n   widget exists at the given index, the new widget gets appended to the\n   current list of children.",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted. If no\n   widget exists at the given index, the new widget gets appended to the\n   current list of children.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addBefore": {
      "location": {
        "start": {
          "line": 1944,
          "column": 4
        },
        "end": {
          "line": 1967,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addAfter": {
      "location": {
        "start": {
          "line": 1978,
          "column": 4
        },
        "end": {
          "line": 2001,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} widget, after which the new widget will\n   be inserted",
            "paramName": "after",
            "description": " widget, after which the new widget will\n   be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_remove": {
      "location": {
        "start": {
          "line": 2009,
          "column": 4
        },
        "end": {
          "line": 2017,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeAt": {
      "location": {
        "start": {
          "line": 2026,
          "column": 4
        },
        "end": {
          "line": 2038,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item.",
            "type": "qx.ui.core.LayoutItem",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeAll": {
      "location": {
        "start": {
          "line": 2046,
          "column": 4
        },
        "end": {
          "line": 2064,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array",
            "description": " An array containing the removed children."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_afterAddChild": {
      "location": {
        "start": {
          "line": 2082,
          "column": 4
        },
        "end": {
          "line": 2082,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method gets called each time after a child widget was added and can\n be overridden to get notified about child adds.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(child)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} The added child.",
            "paramName": "child",
            "description": " The added child.",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_afterRemoveChild": {
      "location": {
        "start": {
          "line": 2092,
          "column": 4
        },
        "end": {
          "line": 2092,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method gets called each time after a child widget was removed and\n can be overridden to get notified about child removes.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(child)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} The removed child.",
            "paramName": "child",
            "description": " The removed child.",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__addHelper": {
      "location": {
        "start": {
          "line": 2110,
          "column": 4
        },
        "end": {
          "line": 2144,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience function to add a child widget. It will insert the child to\n the parent widget and schedule a layout update.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} The child to add.",
            "paramName": "child",
            "description": " The child to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map|null} Optional layout data for the widget.",
            "paramName": "options",
            "description": " Optional layout data for the widget.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeHelper": {
      "location": {
        "start": {
          "line": 2153,
          "column": 4
        },
        "end": {
          "line": 2178,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience function to remove a child widget. It will remove it\n from the parent widget and schedule a layout update.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} The child to remove.",
            "paramName": "child",
            "description": " The child to remove.",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "capture": {
      "location": {
        "start": {
          "line": 2200,
          "column": 4
        },
        "end": {
          "line": 2202,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enables pointer event capturing. All pointer events will dispatched on this\n widget until capturing is disabled using {@link #releaseCapture} or a\n pointer button is clicked. If the widgets becomes the capturing widget the\n {@link #capture} event is fired. Once it loses capture mode the\n {@link #losecapture} event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "capture {Boolean?true} If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "paramName": "capture",
            "description": " If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 2208,
          "column": 4
        },
        "end": {
          "line": 2210,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disables pointer capture mode enabled by {@link #capture}.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCapturing": {
      "location": {
        "start": {
          "line": 2218,
          "column": 4
        },
        "end": {
          "line": 2226,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if pointer event capturing is enabled for this widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if capturing is active",
            "type": "Boolean",
            "description": " <code>true</code> if capturing is active"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyPadding": {
      "location": {
        "start": {
          "line": 2238,
          "column": 4
        },
        "end": {
          "line": 2244,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "paddingTop",
        "paddingRight",
        "paddingBottom",
        "paddingLeft"
      ]
    },
    "__updateContentPadding": {
      "location": {
        "start": {
          "line": 2253,
          "column": 4
        },
        "end": {
          "line": 2262,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to updated the css padding of the content element considering the\n padding of the decorator.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "style {String} The name of the css padding property e.g. <code>paddingTop</code>",
            "paramName": "style",
            "description": " The name of the css padding property e.g. <code>paddingTop</code>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {Number} The value to set.",
            "paramName": "value",
            "description": " The value to set.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyDecorator": {
      "location": {
        "start": {
          "line": 2272,
          "column": 4
        },
        "end": {
          "line": 2288,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "decorator"
      ]
    },
    "_applyToolTipText": {
      "location": {
        "start": {
          "line": 2300,
          "column": 4
        },
        "end": {
          "line": 2317,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "toolTipText"
      ]
    },
    "_applyTextColor": {
      "location": {
        "start": {
          "line": 2320,
          "column": 4
        },
        "end": {
          "line": 2322,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "textColor"
      ]
    },
    "_applyZIndex": {
      "location": {
        "start": {
          "line": 2326,
          "column": 4
        },
        "end": {
          "line": 2328,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "zIndex"
      ]
    },
    "_applyVisibility": {
      "location": {
        "start": {
          "line": 2332,
          "column": 4
        },
        "end": {
          "line": 2350,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "visibility"
      ]
    },
    "_applyOpacity": {
      "location": {
        "start": {
          "line": 2354,
          "column": 4
        },
        "end": {
          "line": 2356,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "opacity"
      ]
    },
    "_applyCursor": {
      "location": {
        "start": {
          "line": 2360,
          "column": 4
        },
        "end": {
          "line": 2371,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "cursor"
      ]
    },
    "_applyBackgroundColor": {
      "location": {
        "start": {
          "line": 2375,
          "column": 4
        },
        "end": {
          "line": 2381,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "backgroundColor"
      ]
    },
    "_applyFont": {
      "location": {
        "start": {
          "line": 2385,
          "column": 4
        },
        "end": {
          "line": 2387,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "font"
      ]
    },
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 2397,
          "column": 4
        },
        "end": {
          "line": 2429,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "__states": {
      "location": {
        "start": {
          "line": 2440,
          "column": 4
        },
        "end": {
          "line": 2440,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The current widget states"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "$$stateChanges": {
      "location": {
        "start": {
          "line": 2444,
          "column": 4
        },
        "end": {
          "line": 2444,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the widget has state changes which are not yet queued"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "_forwardStates": {
      "location": {
        "start": {
          "line": 2448,
          "column": 4
        },
        "end": {
          "line": 2448,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Can be overridden to forward states to the child controls."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "hasState": {
      "location": {
        "start": {
          "line": 2457,
          "column": 4
        },
        "end": {
          "line": 2461,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether a state is set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to check.",
            "paramName": "state",
            "description": " the state to check.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the state is set.",
            "type": "Boolean",
            "description": " whether the state is set."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addState": {
      "location": {
        "start": {
          "line": 2469,
          "column": 4
        },
        "end": {
          "line": 2508,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets a state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} The state to add",
            "paramName": "state",
            "description": " The state to add",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeState": {
      "location": {
        "start": {
          "line": 2516,
          "column": 4
        },
        "end": {
          "line": 2550,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears a state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to clear.",
            "paramName": "state",
            "description": " the state to clear.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "replaceState": {
      "location": {
        "start": {
          "line": 2561,
          "column": 4
        },
        "end": {
          "line": 2596,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces the first state with the second one.\n This method is ideal for state transitions e.g. normal =&gt; selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "old {String} Previous state",
            "paramName": "old",
            "description": " Previous state",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} New state",
            "paramName": "value",
            "description": " New state",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__appearanceSelector": {
      "location": {
        "start": {
          "line": 2609,
          "column": 4
        },
        "end": {
          "line": 2609,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} The currently compiled selector to lookup the matching appearance"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__updateSelector": {
      "location": {
        "start": {
          "line": 2613,
          "column": 4
        },
        "end": {
          "line": 2613,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the selectors needs to be recomputed before updating appearance"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "syncAppearance": {
      "location": {
        "start": {
          "line": 2621,
          "column": 4
        },
        "end": {
          "line": 2705,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Renders the appearance using the current widget states.\n Used exclusively by {qx.ui.core.queue.Appearance}.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyAppearance": {
      "location": {
        "start": {
          "line": 2709,
          "column": 4
        },
        "end": {
          "line": 2711,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "appearance"
      ]
    },
    "checkAppearanceNeeds": {
      "location": {
        "start": {
          "line": 2720,
          "column": 4
        },
        "end": {
          "line": 2740,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method called from the visibility queue to detect outstanding changes\n to the appearance.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateAppearance": {
      "location": {
        "start": {
          "line": 2747,
          "column": 4
        },
        "end": {
          "line": 2769,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Refreshes the appearance of this widget and all\n registered child controls.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "syncWidget": {
      "location": {
        "start": {
          "line": 2787,
          "column": 4
        },
        "end": {
          "line": 2789,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called during the flush of the\n {@link qx.ui.core.queue.Widget widget queue}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "jobs {Map} A map of jobs.",
            "paramName": "jobs",
            "description": " A map of jobs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getEventTarget": {
      "location": {
        "start": {
          "line": 2808,
          "column": 4
        },
        "end": {
          "line": 2821,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the next event target in the parent chain. May\n also return the widget itself if it is not anonymous.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A working event target of this widget.\n    May be <code>null</code> as well.",
            "type": "qx.ui.core.Widget",
            "description": " A working event target of this widget.\n    May be <code>null</code> as well."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusTarget": {
      "location": {
        "start": {
          "line": 2831,
          "column": 4
        },
        "end": {
          "line": 2848,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the next focus target in the parent chain. May\n also return the widget itself if it is not anonymous and focusable.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A working focus target of this widget.\n    May be <code>null</code> as well.",
            "type": "qx.ui.core.Widget",
            "description": " A working focus target of this widget.\n    May be <code>null</code> as well."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusElement": {
      "location": {
        "start": {
          "line": 2856,
          "column": 4
        },
        "end": {
          "line": 2858,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the element which should be focused.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The html element to focus.",
            "type": "qx.html.Element",
            "description": " The html element to focus."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isTabable": {
      "location": {
        "start": {
          "line": 2870,
          "column": 4
        },
        "end": {
          "line": 2872,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is reachable by pressing the TAB key.\n Normally tests for both, the focusable property and a positive or\n undefined tabIndex property. The widget must have a DOM element\n since only visible widgets are tabable.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element is tabable.",
            "type": "Boolean",
            "description": " Whether the element is tabable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyFocusable": {
      "location": {
        "start": {
          "line": 2876,
          "column": 4
        },
        "end": {
          "line": 2901,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "focusable"
      ]
    },
    "_applyKeepFocus": {
      "location": {
        "start": {
          "line": 2905,
          "column": 4
        },
        "end": {
          "line": 2909,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "keepFocus"
      ]
    },
    "_applyKeepActive": {
      "location": {
        "start": {
          "line": 2913,
          "column": 4
        },
        "end": {
          "line": 2917,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "keepActive"
      ]
    },
    "_applyTabIndex": {
      "location": {
        "start": {
          "line": 2921,
          "column": 4
        },
        "end": {
          "line": 2932,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "tabIndex"
      ]
    },
    "_applySelectable": {
      "location": {
        "start": {
          "line": 2936,
          "column": 4
        },
        "end": {
          "line": 2945,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "selectable"
      ]
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 2949,
          "column": 4
        },
        "end": {
          "line": 2999,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "enabled"
      ]
    },
    "_applyNativeContextMenu": {
      "location": {
        "start": {
          "line": 3011,
          "column": 4
        },
        "end": {
          "line": 3013,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "nativeContextMenu"
      ]
    },
    "_applyContextMenu": {
      "location": {
        "start": {
          "line": 3017,
          "column": 4
        },
        "end": {
          "line": 3047,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "contextMenu"
      ]
    },
    "_onContextMenuOpen": {
      "location": {
        "start": {
          "line": 3055,
          "column": 4
        },
        "end": {
          "line": 3068,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>contextmenu</code> event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The event object",
            "paramName": "e",
            "description": " The event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onBeforeContextMenuOpen": {
      "location": {
        "start": {
          "line": 3076,
          "column": 4
        },
        "end": {
          "line": 3081,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>beforeContextmenuOpen</code> event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The data event",
            "paramName": "e",
            "description": " The data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onStopEvent": {
      "location": {
        "start": {
          "line": 3098,
          "column": 4
        },
        "end": {
          "line": 3100,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener which stops a bubbling event from\n propagates further.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Any bubbling event",
            "paramName": "e",
            "description": " Any bubbling event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getDragDropCursor": {
      "location": {
        "start": {
          "line": 3118,
          "column": 4
        },
        "end": {
          "line": 3120,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to return a instance of a {@link qx.ui.core.DragDropCursor}.\n If you want to use your own DragDropCursor, override this method\n and return your custom instance.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.DragDropCursor} A drag drop cursor implementation.",
            "type": "qx.ui.core.DragDropCursor",
            "description": " A drag drop cursor implementation."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDraggable": {
      "location": {
        "start": {
          "line": 3123,
          "column": 4
        },
        "end": {
          "line": 3150,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "draggable"
      ]
    },
    "_applyDroppable": {
      "location": {
        "start": {
          "line": 3154,
          "column": 4
        },
        "end": {
          "line": 3162,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "droppable"
      ]
    },
    "_onDragStart": {
      "location": {
        "start": {
          "line": 3170,
          "column": 4
        },
        "end": {
          "line": 3174,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for own <code>dragstart</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDrag": {
      "location": {
        "start": {
          "line": 3182,
          "column": 4
        },
        "end": {
          "line": 3184,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for own <code>drag</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDragEnd": {
      "location": {
        "start": {
          "line": 3192,
          "column": 4
        },
        "end": {
          "line": 3196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for own <code>dragend</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDragChange": {
      "location": {
        "start": {
          "line": 3204,
          "column": 4
        },
        "end": {
          "line": 3209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for own <code>dragchange</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "visualizeFocus": {
      "location": {
        "start": {
          "line": 3230,
          "column": 4
        },
        "end": {
          "line": 3232,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler which is executed when the widget receives the focus.\n This method is used by the {@link qx.ui.core.FocusHandler} to\n apply states etc. to a focused widget.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "visualizeBlur": {
      "location": {
        "start": {
          "line": 3243,
          "column": 4
        },
        "end": {
          "line": 3245,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler which is executed when the widget lost the focus.\n This method is used by the {@link qx.ui.core.FocusHandler} to\n remove states etc. from a previously focused widget.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoView": {
      "location": {
        "start": {
          "line": 3273,
          "column": 4
        },
        "end": {
          "line": 3311,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The method scrolls the given item into view.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Child to scroll into view",
            "paramName": "child",
            "description": " Child to scroll into view",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "alignX {String?null} Alignment of the item. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "alignX",
            "description": " Alignment of the item. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "alignY {String?null} Alignment of the item. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "alignY",
            "description": " Alignment of the item. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewX": {
      "location": {
        "start": {
          "line": 3325,
          "column": 4
        },
        "end": {
          "line": 3327,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The method scrolls the given item into view (x-axis only).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Child to scroll into view",
            "paramName": "child",
            "description": " Child to scroll into view",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the item. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the item. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewY": {
      "location": {
        "start": {
          "line": 3341,
          "column": 4
        },
        "end": {
          "line": 3343,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The method scrolls the given item into view (y-axis only).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Child to scroll into view",
            "paramName": "child",
            "description": " Child to scroll into view",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "focus": {
      "location": {
        "start": {
          "line": 3359,
          "column": 4
        },
        "end": {
          "line": 3366,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focus this widget.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 3373,
          "column": 4
        },
        "end": {
          "line": 3380,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove focus from this widget.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 3387,
          "column": 4
        },
        "end": {
          "line": 3389,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activate this widget e.g. for keyboard events.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 3396,
          "column": 4
        },
        "end": {
          "line": 3398,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deactivate this widget e.g. for keyboard events.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "tabFocus": {
      "location": {
        "start": {
          "line": 3408,
          "column": 4
        },
        "end": {
          "line": 3410,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focus this widget when using the keyboard. This is\n mainly thought for the advanced qooxdoo keyboard handling\n and should not be used by the application developer.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasChildControl": {
      "location": {
        "start": {
          "line": 3428,
          "column": 4
        },
        "end": {
          "line": 3435,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given ID is assigned to a child control.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the child control is registered.",
            "type": "Boolean",
            "description": " <code>true</code> when the child control is registered."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__childControls": {
      "location": {
        "start": {
          "line": 3439,
          "column": 4
        },
        "end": {
          "line": 3439,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Map of instantiated child controls"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_getCreatedChildControls": {
      "location": {
        "start": {
          "line": 3447,
          "column": 4
        },
        "end": {
          "line": 3449,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map of all already created child controls</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} mapping of child control id to the child widget.",
            "type": "Map",
            "description": " mapping of child control id to the child widget."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getChildControl": {
      "location": {
        "start": {
          "line": 3470,
          "column": 4
        },
        "end": {
          "line": 3491,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the child control from the given ID. Returns\n <code>null</code> when the child control is unknown.\n It is designed for widget authors, who want to access child controls,\n which are created by the widget itself.\n <b>Warning</b>: This method exposes widget internals and modifying the\n returned sub widget may bring the widget into an inconsistent state.\n Accessing child controls defined in a super class or in an foreign class\n is not supported. Do not use it if the result can be achieved using public\n API or theming.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "notcreate {Boolean?false} Whether the child control\n    should not be created dynamically if not yet available.",
            "paramName": "notcreate",
            "description": " Whether the child control\n    should not be created dynamically if not yet available.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Child control",
            "type": "qx.ui.core.Widget",
            "description": " Child control"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_showChildControl": {
      "location": {
        "start": {
          "line": 3500,
          "column": 4
        },
        "end": {
          "line": 3505,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shows the given child control by ID</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} the child control",
            "type": "qx.ui.core.Widget",
            "description": " the child control"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_excludeChildControl": {
      "location": {
        "start": {
          "line": 3513,
          "column": 4
        },
        "end": {
          "line": 3519,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Excludes the given child control by ID</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isChildControlVisible": {
      "location": {
        "start": {
          "line": 3528,
          "column": 4
        },
        "end": {
          "line": 3536,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given child control is visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the child control is visible.",
            "type": "Boolean",
            "description": " <code>true</code> when the child control is visible."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_releaseChildControl": {
      "location": {
        "start": {
          "line": 3546,
          "column": 4
        },
        "end": {
          "line": 3572,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Release the child control by ID and decouple the\n child from the parent. This method does not dispose the child control.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The released control",
            "type": "qx.ui.core.Widget",
            "description": " The released control"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createChildControl": {
      "location": {
        "start": {
          "line": 3585,
          "column": 4
        },
        "end": {
          "line": 3642,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the creation of the given child control by ID.\n Do not override this method! Override {@link #_createChildControlImpl}\n instead if you need to support new controls.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control",
            "type": "qx.ui.core.Widget",
            "description": " The created control"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the control was created before",
            "type": "Error",
            "description": " when the control was created before"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 3656,
          "column": 4
        },
        "end": {
          "line": 3658,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal method to create child controls. This method\n should be overwritten by classes which extends this one\n to support new child control types.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\n   the part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\n   the part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\n   all text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\n   all text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "description": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_disposeChildControls": {
      "location": {
        "start": {
          "line": 3666,
          "column": 4
        },
        "end": {
          "line": 3686,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose all registered controls. This is automatically\n executed by the widget.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_findTopControl": {
      "location": {
        "start": {
          "line": 3695,
          "column": 4
        },
        "end": {
          "line": 3708,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds and returns the top level control. This is the first\n widget which is not a child control of any other widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The top control",
            "type": "qx.ui.core.Widget",
            "description": " The top control"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getSubcontrolId": {
      "location": {
        "start": {
          "line": 3718,
          "column": 4
        },
        "end": {
          "line": 3721,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the ID (name) if this instance was a created as a child control of another widget.\n See the first parameter id in {@link qx.ui.core.Widget#_createChildControlImpl}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} ID of the current widget or null if it was not created as a subcontrol",
            "type": "String|null",
            "description": " ID of the current widget or null if it was not created as a subcontrol"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getContentLocation": {
      "location": {
        "start": {
          "line": 3754,
          "column": 4
        },
        "end": {
          "line": 3758,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the location of the content element in context of the document\n dimensions.\n Supported modes:</p>\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element\n(bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default,\nuses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to\nborder edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute\npositioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for\nstatic/relative positioned content).</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String?box} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "optional": true,
            "defaultValue": "box",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Returns a map with <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code> which contains the distance\n   of the element relative to the document.",
            "type": "Map",
            "description": " Returns a map with <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code> which contains the distance\n   of the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDomLeft": {
      "location": {
        "start": {
          "line": 3771,
          "column": 4
        },
        "end": {
          "line": 3779,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Directly modifies the relative left position in relation\n to the parent element.\n Use with caution! This may be used for animations, drag&amp;drop\n or other cases where high performance location manipulation\n is important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Left position",
            "paramName": "value",
            "description": " Left position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDomTop": {
      "location": {
        "start": {
          "line": 3792,
          "column": 4
        },
        "end": {
          "line": 3800,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Directly modifies the relative top position in relation\n to the parent element.\n Use with caution! This may be used for animations, drag&amp;drop\n or other cases where high performance location manipulation\n is important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Top position",
            "paramName": "value",
            "description": " Top position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDomPosition": {
      "location": {
        "start": {
          "line": 3814,
          "column": 4
        },
        "end": {
          "line": 3826,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Directly modifies the relative left and top position in relation\n to the parent element.\n Use with caution! This may be used for animations, drag&amp;drop\n or other cases where high performance location manipulation\n is important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} Left position",
            "paramName": "left",
            "description": " Left position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} Top position",
            "paramName": "top",
            "description": " Top position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "destroy": {
      "location": {
        "start": {
          "line": 3844,
          "column": 4
        },
        "end": {
          "line": 3856,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes this widget from its parent and disposes it.\n Please note that the widget is not disposed synchronously. The\n real dispose happens after the next queue flush.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clone": {
      "location": {
        "start": {
          "line": 3869,
          "column": 4
        },
        "end": {
          "line": 3882,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem",
        "qx.core.Object"
      ]
    },
    "tr": {
      "type": "function",
      "name": "tr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message\n Mark the message for translation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trn": {
      "type": "function",
      "name": "trn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message\n Mark the messages for translation.\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trc": {
      "type": "function",
      "name": "trc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message with translation hint\n Mark the messages for translation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trnc": {
      "type": "function",
      "name": "trnc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message with translation hint\n Mark the messages for translation.\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "marktr": {
      "type": "function",
      "name": "marktr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark the message for translation but return the original message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} the message ID",
            "paramName": "messageId",
            "description": " the message ID",
            "type": "qx.locale.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} messageId",
            "type": "qx.locale.String",
            "description": " messageId"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getMinWidth": {
      "type": "function",
      "name": "getMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minWidth</code>.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minWidth"
          }
        ]
      }
    },
    "setMinWidth": {
      "type": "function",
      "name": "setMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minWidth</code>.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minWidth"
          }
        ]
      }
    },
    "resetMinWidth": {
      "type": "function",
      "name": "resetMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>minWidth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ]
      }
    },
    "getWidth": {
      "type": "function",
      "name": "getWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>width</code>.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for width"
          }
        ]
      }
    },
    "setWidth": {
      "type": "function",
      "name": "setWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>width</code>.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for width"
          }
        ]
      }
    },
    "resetWidth": {
      "type": "function",
      "name": "resetWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>width</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ]
      }
    },
    "getMaxWidth": {
      "type": "function",
      "name": "getMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxWidth</code>.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxWidth"
          }
        ]
      }
    },
    "setMaxWidth": {
      "type": "function",
      "name": "setMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxWidth</code>.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxWidth"
          }
        ]
      }
    },
    "resetMaxWidth": {
      "type": "function",
      "name": "resetMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxWidth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ]
      }
    },
    "getMinHeight": {
      "type": "function",
      "name": "getMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minHeight</code>.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minHeight"
          }
        ]
      }
    },
    "setMinHeight": {
      "type": "function",
      "name": "setMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minHeight</code>.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minHeight"
          }
        ]
      }
    },
    "resetMinHeight": {
      "type": "function",
      "name": "resetMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>minHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ]
      }
    },
    "getHeight": {
      "type": "function",
      "name": "getHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for height"
          }
        ]
      }
    },
    "setHeight": {
      "type": "function",
      "name": "setHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for height"
          }
        ]
      }
    },
    "resetHeight": {
      "type": "function",
      "name": "resetHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>height</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ]
      }
    },
    "getMaxHeight": {
      "type": "function",
      "name": "getMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxHeight</code>.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxHeight"
          }
        ]
      }
    },
    "setMaxHeight": {
      "type": "function",
      "name": "setMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxHeight</code>.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxHeight"
          }
        ]
      }
    },
    "resetMaxHeight": {
      "type": "function",
      "name": "resetMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ]
      }
    },
    "getAllowGrowX": {
      "type": "function",
      "name": "getAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowX"
          }
        ]
      }
    },
    "isAllowGrowX": {
      "type": "function",
      "name": "isAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowX"
          }
        ]
      }
    },
    "setAllowGrowX": {
      "type": "function",
      "name": "setAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowX"
          }
        ]
      }
    },
    "resetAllowGrowX": {
      "type": "function",
      "name": "resetAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowGrowX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ]
      }
    },
    "getAllowShrinkX": {
      "type": "function",
      "name": "getAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkX"
          }
        ]
      }
    },
    "isAllowShrinkX": {
      "type": "function",
      "name": "isAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkX"
          }
        ]
      }
    },
    "setAllowShrinkX": {
      "type": "function",
      "name": "setAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowShrinkX"
          }
        ]
      }
    },
    "resetAllowShrinkX": {
      "type": "function",
      "name": "resetAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowShrinkX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ]
      }
    },
    "getAllowGrowY": {
      "type": "function",
      "name": "getAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowY"
          }
        ]
      }
    },
    "isAllowGrowY": {
      "type": "function",
      "name": "isAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowY"
          }
        ]
      }
    },
    "setAllowGrowY": {
      "type": "function",
      "name": "setAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowY"
          }
        ]
      }
    },
    "resetAllowGrowY": {
      "type": "function",
      "name": "resetAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowGrowY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ]
      }
    },
    "getAllowShrinkY": {
      "type": "function",
      "name": "getAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkY"
          }
        ]
      }
    },
    "isAllowShrinkY": {
      "type": "function",
      "name": "isAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkY"
          }
        ]
      }
    },
    "setAllowShrinkY": {
      "type": "function",
      "name": "setAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowShrinkY"
          }
        ]
      }
    },
    "resetAllowShrinkY": {
      "type": "function",
      "name": "resetAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowShrinkY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ]
      }
    },
    "setAllowStretchX": {
      "type": "function",
      "name": "setAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowStretchX</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for allowStretchX"
          }
        ]
      }
    },
    "resetAllowStretchX": {
      "type": "function",
      "name": "resetAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowStretchX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowStretchX}."
          }
        ]
      }
    },
    "setAllowStretchY": {
      "type": "function",
      "name": "setAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowStretchY</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for allowStretchY"
          }
        ]
      }
    },
    "resetAllowStretchY": {
      "type": "function",
      "name": "resetAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowStretchY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowStretchY}."
          }
        ]
      }
    },
    "getMarginTop": {
      "type": "function",
      "name": "getMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginTop</code>.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginTop"
          }
        ]
      }
    },
    "setMarginTop": {
      "type": "function",
      "name": "setMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginTop</code>.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginTop"
          }
        ]
      }
    },
    "resetMarginTop": {
      "type": "function",
      "name": "resetMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginTop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ]
      }
    },
    "getMarginRight": {
      "type": "function",
      "name": "getMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginRight</code>.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginRight"
          }
        ]
      }
    },
    "setMarginRight": {
      "type": "function",
      "name": "setMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginRight</code>.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginRight"
          }
        ]
      }
    },
    "resetMarginRight": {
      "type": "function",
      "name": "resetMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginRight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ]
      }
    },
    "getMarginBottom": {
      "type": "function",
      "name": "getMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginBottom</code>.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginBottom"
          }
        ]
      }
    },
    "setMarginBottom": {
      "type": "function",
      "name": "setMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginBottom</code>.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginBottom"
          }
        ]
      }
    },
    "resetMarginBottom": {
      "type": "function",
      "name": "resetMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginBottom</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ]
      }
    },
    "getMarginLeft": {
      "type": "function",
      "name": "getMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginLeft</code>.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginLeft"
          }
        ]
      }
    },
    "setMarginLeft": {
      "type": "function",
      "name": "setMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginLeft</code>.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginLeft"
          }
        ]
      }
    },
    "resetMarginLeft": {
      "type": "function",
      "name": "resetMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginLeft</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ]
      }
    },
    "setMargin": {
      "type": "function",
      "name": "setMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>margin</code>.\n\nFor further details take a look at the property definition: {@link #margin}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for margin"
          }
        ]
      }
    },
    "resetMargin": {
      "type": "function",
      "name": "resetMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>margin</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #margin}."
          }
        ]
      }
    },
    "getAlignX": {
      "type": "function",
      "name": "getAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alignX</code>.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for alignX"
          }
        ]
      }
    },
    "setAlignX": {
      "type": "function",
      "name": "setAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alignX</code>.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for alignX"
          }
        ]
      }
    },
    "resetAlignX": {
      "type": "function",
      "name": "resetAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>alignX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ]
      }
    },
    "getAlignY": {
      "type": "function",
      "name": "getAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alignY</code>.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for alignY"
          }
        ]
      }
    },
    "setAlignY": {
      "type": "function",
      "name": "setAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alignY</code>.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for alignY"
          }
        ]
      }
    },
    "resetAlignY": {
      "type": "function",
      "name": "resetAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>alignY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ]
      }
    },
    "getPaddingTop": {
      "type": "function",
      "name": "getPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingTop</code>.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingTop"
          }
        ]
      }
    },
    "setPaddingTop": {
      "type": "function",
      "name": "setPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingTop</code>.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingTop"
          }
        ]
      }
    },
    "resetPaddingTop": {
      "type": "function",
      "name": "resetPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingTop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ]
      }
    },
    "getPaddingRight": {
      "type": "function",
      "name": "getPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingRight</code>.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingRight"
          }
        ]
      }
    },
    "setPaddingRight": {
      "type": "function",
      "name": "setPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingRight</code>.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingRight"
          }
        ]
      }
    },
    "resetPaddingRight": {
      "type": "function",
      "name": "resetPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingRight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ]
      }
    },
    "getPaddingBottom": {
      "type": "function",
      "name": "getPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingBottom</code>.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingBottom"
          }
        ]
      }
    },
    "setPaddingBottom": {
      "type": "function",
      "name": "setPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingBottom</code>.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingBottom"
          }
        ]
      }
    },
    "resetPaddingBottom": {
      "type": "function",
      "name": "resetPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingBottom</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ]
      }
    },
    "getPaddingLeft": {
      "type": "function",
      "name": "getPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingLeft</code>.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingLeft"
          }
        ]
      }
    },
    "setPaddingLeft": {
      "type": "function",
      "name": "setPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingLeft</code>.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingLeft"
          }
        ]
      }
    },
    "resetPaddingLeft": {
      "type": "function",
      "name": "resetPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingLeft</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ]
      }
    },
    "setPadding": {
      "type": "function",
      "name": "setPadding",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>padding</code>.\n\nFor further details take a look at the property definition: {@link #padding}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for padding"
          }
        ]
      }
    },
    "resetPadding": {
      "type": "function",
      "name": "resetPadding",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>padding</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #padding}."
          }
        ]
      }
    },
    "getZIndex": {
      "type": "function",
      "name": "getZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>zIndex</code>.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for zIndex"
          }
        ]
      }
    },
    "setZIndex": {
      "type": "function",
      "name": "setZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>zIndex</code>.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for zIndex"
          }
        ]
      }
    },
    "resetZIndex": {
      "type": "function",
      "name": "resetZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>zIndex</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ]
      }
    },
    "getDecorator": {
      "type": "function",
      "name": "getDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>decorator</code>.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Decorator",
            "desc": "Returns the value for decorator"
          }
        ]
      }
    },
    "setDecorator": {
      "type": "function",
      "name": "setDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>decorator</code>.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Decorator",
            "paramName": "value",
            "desc": "Value for decorator"
          }
        ]
      }
    },
    "resetDecorator": {
      "type": "function",
      "name": "resetDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>decorator</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ]
      }
    },
    "getBackgroundColor": {
      "type": "function",
      "name": "getBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>backgroundColor</code>.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for backgroundColor"
          }
        ]
      }
    },
    "setBackgroundColor": {
      "type": "function",
      "name": "setBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>backgroundColor</code>.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for backgroundColor"
          }
        ]
      }
    },
    "resetBackgroundColor": {
      "type": "function",
      "name": "resetBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>backgroundColor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ]
      }
    },
    "getTextColor": {
      "type": "function",
      "name": "getTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>textColor</code>.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for textColor"
          }
        ]
      }
    },
    "setTextColor": {
      "type": "function",
      "name": "setTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>textColor</code>.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for textColor"
          }
        ]
      }
    },
    "resetTextColor": {
      "type": "function",
      "name": "resetTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>textColor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ]
      }
    },
    "getFont": {
      "type": "function",
      "name": "getFont",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>font</code>.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Font",
            "desc": "Returns the value for font"
          }
        ]
      }
    },
    "setFont": {
      "type": "function",
      "name": "setFont",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>font</code>.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Font",
            "paramName": "value",
            "desc": "Value for font"
          }
        ]
      }
    },
    "resetFont": {
      "type": "function",
      "name": "resetFont",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>font</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ]
      }
    },
    "getOpacity": {
      "type": "function",
      "name": "getOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>opacity</code>.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for opacity"
          }
        ]
      }
    },
    "setOpacity": {
      "type": "function",
      "name": "setOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>opacity</code>.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for opacity"
          }
        ]
      }
    },
    "resetOpacity": {
      "type": "function",
      "name": "resetOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>opacity</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ]
      }
    },
    "getCursor": {
      "type": "function",
      "name": "getCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for cursor"
          }
        ]
      }
    },
    "setCursor": {
      "type": "function",
      "name": "setCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for cursor"
          }
        ]
      }
    },
    "resetCursor": {
      "type": "function",
      "name": "resetCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>cursor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ]
      }
    },
    "getToolTip": {
      "type": "function",
      "name": "getToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTip</code>.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.tooltip.ToolTip",
            "desc": "Returns the value for toolTip"
          }
        ]
      }
    },
    "setToolTip": {
      "type": "function",
      "name": "setToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTip</code>.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.tooltip.ToolTip",
            "paramName": "value",
            "desc": "Value for toolTip"
          }
        ]
      }
    },
    "resetToolTip": {
      "type": "function",
      "name": "resetToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>toolTip</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ]
      }
    },
    "getToolTipText": {
      "type": "function",
      "name": "getToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTipText</code>.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for toolTipText"
          }
        ]
      }
    },
    "setToolTipText": {
      "type": "function",
      "name": "setToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTipText</code>.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for toolTipText"
          }
        ]
      }
    },
    "resetToolTipText": {
      "type": "function",
      "name": "resetToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>toolTipText</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ]
      }
    },
    "getToolTipIcon": {
      "type": "function",
      "name": "getToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTipIcon</code>.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for toolTipIcon"
          }
        ]
      }
    },
    "setToolTipIcon": {
      "type": "function",
      "name": "setToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTipIcon</code>.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for toolTipIcon"
          }
        ]
      }
    },
    "resetToolTipIcon": {
      "type": "function",
      "name": "resetToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>toolTipIcon</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ]
      }
    },
    "getBlockToolTip": {
      "type": "function",
      "name": "getBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockToolTip"
          }
        ]
      }
    },
    "isBlockToolTip": {
      "type": "function",
      "name": "isBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockToolTip"
          }
        ]
      }
    },
    "setBlockToolTip": {
      "type": "function",
      "name": "setBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for blockToolTip"
          }
        ]
      }
    },
    "resetBlockToolTip": {
      "type": "function",
      "name": "resetBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>blockToolTip</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ]
      }
    },
    "getShowToolTipWhenDisabled": {
      "type": "function",
      "name": "getShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "isShowToolTipWhenDisabled": {
      "type": "function",
      "name": "isShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "setShowToolTipWhenDisabled": {
      "type": "function",
      "name": "setShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "resetShowToolTipWhenDisabled": {
      "type": "function",
      "name": "resetShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>showToolTipWhenDisabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ]
      }
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for visibility"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for visibility"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visibility</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getAnonymous": {
      "type": "function",
      "name": "getAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "isAnonymous": {
      "type": "function",
      "name": "isAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "setAnonymous": {
      "type": "function",
      "name": "setAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for anonymous"
          }
        ]
      }
    },
    "resetAnonymous": {
      "type": "function",
      "name": "resetAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>anonymous</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ]
      }
    },
    "getTabIndex": {
      "type": "function",
      "name": "getTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>tabIndex</code>.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for tabIndex"
          }
        ]
      }
    },
    "setTabIndex": {
      "type": "function",
      "name": "setTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>tabIndex</code>.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for tabIndex"
          }
        ]
      }
    },
    "resetTabIndex": {
      "type": "function",
      "name": "resetTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>tabIndex</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ]
      }
    },
    "getFocusable": {
      "type": "function",
      "name": "getFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusable"
          }
        ]
      }
    },
    "isFocusable": {
      "type": "function",
      "name": "isFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusable"
          }
        ]
      }
    },
    "setFocusable": {
      "type": "function",
      "name": "setFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for focusable"
          }
        ]
      }
    },
    "resetFocusable": {
      "type": "function",
      "name": "resetFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>focusable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ]
      }
    },
    "getKeepFocus": {
      "type": "function",
      "name": "getKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFocus"
          }
        ]
      }
    },
    "isKeepFocus": {
      "type": "function",
      "name": "isKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFocus"
          }
        ]
      }
    },
    "setKeepFocus": {
      "type": "function",
      "name": "setKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepFocus"
          }
        ]
      }
    },
    "resetKeepFocus": {
      "type": "function",
      "name": "resetKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>keepFocus</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ]
      }
    },
    "getKeepActive": {
      "type": "function",
      "name": "getKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepActive"
          }
        ]
      }
    },
    "isKeepActive": {
      "type": "function",
      "name": "isKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepActive"
          }
        ]
      }
    },
    "setKeepActive": {
      "type": "function",
      "name": "setKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepActive"
          }
        ]
      }
    },
    "resetKeepActive": {
      "type": "function",
      "name": "resetKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>keepActive</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ]
      }
    },
    "getDraggable": {
      "type": "function",
      "name": "getDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for draggable"
          }
        ]
      }
    },
    "isDraggable": {
      "type": "function",
      "name": "isDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for draggable"
          }
        ]
      }
    },
    "setDraggable": {
      "type": "function",
      "name": "setDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for draggable"
          }
        ]
      }
    },
    "resetDraggable": {
      "type": "function",
      "name": "resetDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>draggable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ]
      }
    },
    "getDroppable": {
      "type": "function",
      "name": "getDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for droppable"
          }
        ]
      }
    },
    "isDroppable": {
      "type": "function",
      "name": "isDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for droppable"
          }
        ]
      }
    },
    "setDroppable": {
      "type": "function",
      "name": "setDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for droppable"
          }
        ]
      }
    },
    "resetDroppable": {
      "type": "function",
      "name": "resetDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>droppable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ]
      }
    },
    "getSelectable": {
      "type": "function",
      "name": "getSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectable"
          }
        ]
      }
    },
    "isSelectable": {
      "type": "function",
      "name": "isSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectable"
          }
        ]
      }
    },
    "setSelectable": {
      "type": "function",
      "name": "setSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for selectable"
          }
        ]
      }
    },
    "resetSelectable": {
      "type": "function",
      "name": "resetSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selectable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ]
      }
    },
    "getContextMenu": {
      "type": "function",
      "name": "getContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenu</code>.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.menu.Menu",
            "desc": "Returns the value for contextMenu"
          }
        ]
      }
    },
    "setContextMenu": {
      "type": "function",
      "name": "setContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>contextMenu</code>.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.menu.Menu",
            "paramName": "value",
            "desc": "Value for contextMenu"
          }
        ]
      }
    },
    "resetContextMenu": {
      "type": "function",
      "name": "resetContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>contextMenu</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ]
      }
    },
    "getNativeContextMenu": {
      "type": "function",
      "name": "getNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for nativeContextMenu"
          }
        ]
      }
    },
    "isNativeContextMenu": {
      "type": "function",
      "name": "isNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for nativeContextMenu"
          }
        ]
      }
    },
    "setNativeContextMenu": {
      "type": "function",
      "name": "setNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for nativeContextMenu"
          }
        ]
      }
    },
    "resetNativeContextMenu": {
      "type": "function",
      "name": "resetNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nativeContextMenu</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ]
      }
    },
    "getAppearance": {
      "type": "function",
      "name": "getAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>appearance</code>.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for appearance"
          }
        ]
      }
    },
    "setAppearance": {
      "type": "function",
      "name": "setAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>appearance</code>.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for appearance"
          }
        ]
      }
    },
    "resetAppearance": {
      "type": "function",
      "name": "resetAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>appearance</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 3896,
        "column": 13
      },
      "end": {
        "line": 3956,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "cv.plugins.openhab.Settings",
    "cv.ui.manager.Start",
    "cv.ui.manager.editor.AbstractEditor",
    "cv.ui.manager.form.FileListItem",
    "cv.ui.manager.form.FileTabItem",
    "cv.ui.manager.form.OptionListItem",
    "cv.ui.manager.form.SectionListItem",
    "cv.ui.manager.snackbar.Controller",
    "cv.ui.manager.snackbar.Message",
    "cv.ui.manager.tree.FileSystem",
    "cv.ui.manager.viewer.AbstractViewer",
    "cv.ui.manager.viewer.SvgIcon",
    "qx.ui.basic.Atom",
    "qx.ui.basic.Image",
    "qx.ui.basic.Label",
    "qx.ui.container.Composite",
    "qx.ui.container.SlideBar",
    "qx.ui.container.Stack",
    "qx.ui.control.ColorSelector",
    "qx.ui.control.DateChooser",
    "qx.ui.core.scroll.AbstractScrollArea",
    "qx.ui.core.scroll.NativeScrollBar",
    "qx.ui.core.scroll.ScrollBar",
    "qx.ui.core.scroll.ScrollPane",
    "qx.ui.embed.AbstractIframe",
    "qx.ui.embed.Canvas",
    "qx.ui.embed.Flash",
    "qx.ui.embed.Html",
    "qx.ui.form.AbstractField",
    "qx.ui.form.AbstractSelectBox",
    "qx.ui.form.DateField",
    "qx.ui.form.RadioButtonGroup",
    "qx.ui.form.Slider",
    "qx.ui.form.Spinner",
    "qx.ui.form.SplitButton",
    "qx.ui.form.core.AbstractVirtualBox",
    "qx.ui.form.renderer.AbstractRenderer",
    "qx.ui.groupbox.GroupBox",
    "qx.ui.menu.AbstractButton",
    "qx.ui.menu.Menu",
    "qx.ui.menu.Separator",
    "qx.ui.root.Abstract",
    "qx.ui.splitpane.Pane",
    "qx.ui.splitpane.Slider",
    "qx.ui.splitpane.Splitter",
    "qx.ui.table.Table",
    "qx.ui.table.pane.Header",
    "qx.ui.table.pane.Pane",
    "qx.ui.table.pane.Scroller",
    "qx.ui.tabview.TabView",
    "qx.ui.toolbar.Part",
    "qx.ui.toolbar.Separator",
    "qx.ui.toolbar.ToolBar",
    "qx.ui.tree.core.AbstractItem",
    "qx.ui.virtual.core.Pane",
    "qx.ui.virtual.layer.Abstract",
    "qx.ui.window.Desktop",
    "qx.ui.window.Window"
  ]
}