{"attributes": {"name": "TestCase", "packageName": "qx.dev.unit", "mixins": "qx.core.MAssert", "superClass": "qx.core.Object", "fullName": "qx.dev.unit.TestCase", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>Base class for all unit tests.</p>"}, "type": "desc"}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "assertionFailed"}, "type": "event", "children": [{"attributes": {"text": "<p>This event can be fired by assertion functions instead of throwing a\n{@link qx.core.AssertionError}, ensuring that any code defined after the\nassertion call will still run.</p>\n\n<p>Event data: The {@link qx.core.AssertionError}</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"line": 188, "name": "addAutoDispose"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "obj"}, "type": "param", "children": [{"attributes": {"text": "<p>Object to be automatically disposed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add an object to the auto dispose list. This can be cleared manually or will\nbe flushed when the test case is disposed.</p>"}, "type": "desc"}]}, {"attributes": {"line": 199, "name": "doAutoDispose"}, "type": "method", "children": [{"attributes": {"text": "<p>Dispose all objects that got registered for auto disposal.</p>"}, "type": "desc"}]}, {"attributes": {"name": "getTestFunc", "fromProperty": "testFunc"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>testFunc</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>testFunc</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getTestResult", "fromProperty": "testResult"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>testResult</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>testResult</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initTestFunc", "fromProperty": "testFunc"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>testFunc</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>testFunc</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initTestResult", "fromProperty": "testResult"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>testResult</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>testResult</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 64, "name": "isDebugOn"}, "type": "method", "children": [{"attributes": {"text": "<p>Whether If debugging code is enabled. (i.e. the setting\n<code>qx.debug</code> has the value <code>on</code>.)</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether debugging is enabled</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetTestFunc", "fromProperty": "testFunc"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>testFunc</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "resetTestResult", "fromProperty": "testResult"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>testResult</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>"}, "type": "desc"}]}, {"attributes": {"line": 98, "name": "resume"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"optional": true, "name": "deferredFunction"}, "type": "param", "children": [{"attributes": {"text": "<p>Function to run</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the &#8216;this&#8217; variable inside the callback. By default the test instance is used.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Cancel a timeout started with <code>wait()</code> and run the given\nfunction. Used for asynchronous tests, e.g. in a listener&#8217;s callback\nfunction.</p>\n\n<p><strong>Important</strong></p>\n\n<p>The used <strong>deferredFunction</strong> is the last function which is executed before\nthe whole test case is disposed. But you are able to use a new\n<code>wait()</code> / <code>resume()</code> pair in the call sequence of the deferred function.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The return value of the deferred function</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 153, "name": "resumeHandler"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "deferredFunction"}, "type": "param", "children": [{"attributes": {"text": "<p>Function to run as event handler or callback</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the &#8216;this&#8217; variable inside the callback. By default the test instance is used.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Cancel a timeout started with <code>wait()</code> and return a function,\n which calls {@link #resume}. This function is useful\n to wrap an event handler or callback function within the resume call sequence.\n It provides the deferred function with all parameters from original caller.</p>\n\n<pre>\n obj.addListener(\"appear\", this.resumeHandler(function(e){\n   // do some nice\n }));\n\n this.wait();\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Wrapper function which runs resume with deferred function</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"line": 114, "name": "resumeSetUp"}, "type": "method", "children": [{"attributes": {"text": "<p>Cancel a timeout started with <code>wait()</code> in setUp() and run the test\nfunction. Used for asynchronous setUp of tests.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The return value of the testRun</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setTestFunc", "fromProperty": "testFunc"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>testFunc</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>testFunc</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testFunc}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setTestResult", "fromProperty": "testResult"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>testResult</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>testResult</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #testResult}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 176, "name": "skip"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "message"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message (reason why the test was skipped)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Skip this test. Any code after a call to this method will not be executed.</p>"}, "type": "desc"}]}, {"attributes": {"line": 77, "name": "wait"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"defaultValue": "5000", "optional": true, "name": "delay"}, "type": "param", "children": [{"attributes": {"text": "<p>Amount of time in milliseconds to wait.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "deferredFunction"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional function to run after timeout has expired.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "window", "optional": true, "name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional execution context for deferredFunction</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Instruct the test to wait. Used for asynchronous tests.</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "properties", "children": [{"attributes": {"defaultValue": "null", "name": "testFunc", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The test currently running</p>"}, "type": "desc"}]}, {"attributes": {"defaultValue": "null", "name": "testResult", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The TestResult instance that runs the test</p>"}, "type": "desc"}]}]}]}