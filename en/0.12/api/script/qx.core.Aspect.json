{"attributes": {"fullName": "qx.core.Aspect", "packageName": "qx.core", "isStatic": true, "type": "bootstrap", "name": "Aspect"}, "type": "class", "children": [{"attributes": {"text": "<p>Basis for Aspect Oriented features in qooxdoo.</p>\n\n<p>This class makes it possible to attach functions (aspects) before or\nafter each function call of any function defined in {@link qx.Class#define}.</p>\n\n<p>Classes, which define own aspects must add an explicit require to this class\nin the header comment using the following code:</p>\n\n<pre>\n&#35;require(qx.core.Aspect)\n&#35;ignore(auto-require)\n</pre>\n\n<p>One example for a qooxdoo aspect is profiling ({@link qx.dev.Profile}).</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 121, "isStatic": true, "name": "addAdvice"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fcn"}, "type": "param", "children": [{"attributes": {"text": "<p>Function to be called just before or after any of the selected functions is called. If position is &#8220;before&#8221; the functions supports the same signature as {@link qx.dev.Profile#profileBefore}. If position is &#8220;after&#8221; it supports the same signature as {@link qx.dev.Profile#profileAfter}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "\"after\"", "optional": true, "name": "position"}, "type": "param", "children": [{"attributes": {"text": "<p>One of &#8220;before&#8221; or &#8220;after&#8221;. Whether the function should be called before or after the wrapped function.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Type of the wrapped function. One of &#8220;member&#8221;, &#8220;static&#8221;, &#8220;constructor&#8221;, &#8220;destructor&#8221;, &#8220;property&#8221; or &#8221;<strong>&#8221;. <code>null</code> is handled identical to &#8221;</strong>&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>Each function, with a full name matching this pattern (using <code>fullName.match(name)</code>) will be wrapped.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "RegExp"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Register a function to be called just before or after each time\none of the selected functions is called.</p>"}, "type": "desc"}]}, {"attributes": {"line": 55, "isStatic": true, "name": "wrap"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fullName"}, "type": "param", "children": [{"attributes": {"text": "<p>Full name of the function including the class name.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "fcn"}, "type": "param", "children": [{"attributes": {"text": "<p>function to wrap.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Type of the wrapped function. One of &#8220;member&#8221;, &#8220;static&#8221;, &#8220;constructor&#8221;, &#8220;destructor&#8221; or &#8220;property&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This function is used by {@link qx.Class#define} to wrap all statics, members and\nconstructors.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>wrapped function</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"access": "private", "type": "Array", "name": "__registry", "value": "[]"}, "type": "constant", "children": [{"attributes": {"text": "<p>Registry for all known aspect wishes</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}]}