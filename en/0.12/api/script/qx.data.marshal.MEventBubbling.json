{"attributes": {"fullName": "qx.data.marshal.MEventBubbling", "packageName": "qx.data.marshal", "type": "mixin", "name": "MEventBubbling", "includer": "qx.data.Array"}, "type": "class", "children": [{"attributes": {"text": "<p>Mixin used for the bubbling events. If you want to use this in your own model\nclasses, be sure that every property will call the\n{@link #_applyEventPropagation} function on every change.</p>"}, "type": "desc"}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "changeBubble"}, "type": "event", "children": [{"attributes": {"text": "<p>The change event which will be fired on every change in the model no\nmatter what property changes. This event bubbles so the root model will\nfire a change event on every change of its children properties too.</p>\n\n<p>Note that properties are required to call\n{@link #_applyEventPropagation} on apply for changes to be tracked as\ndesired. It is already taken care of that properties created with the\n{@link qx.data.marshal.Json} marshaler call this method.</p>\n\n<p>The data will contain a map with the following four keys\n  <li>value: The new value of the property</li>\n  <li>old: The old value of the property.</li>\n  <li>name: The name of the property changed including its parent\n    properties separated by dots.</li>\n  <li>item: The item which has the changed property.</li>\nDue to that, the <code>getOldData</code> method will always return null\nbecause the old data is contained in the map.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 123, "isMixin": true, "name": "__changePropertyListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>The name of the former properties.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>The date event fired by the property change.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Listener responsible for formating the name and firing the change event\nfor the changed property.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 64, "isMixin": true, "name": "_applyEventPropagation"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>The new value of the property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>The old value of the property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>The name of the changed property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Apply function for every property created with the\n{@link qx.data.marshal.Json} marshaler. It fires and\n{@link #changeBubble} event on every change. It also adds the chaining\nlistener if possible which is necessary for the bubbling of the events.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 83, "isMixin": true, "name": "_registerEventChaining"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>The new value of the property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>The old value of the property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>The name of the changed property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Registers for the given parameters the changeBubble listener, if\npossible. It also removes the old listener, if an old item with\na changeBubble event is given.</p>"}, "type": "desc"}]}]}]}