{"attributes": {"fullName": "qx.dev.FakeServer", "packageName": "qx.dev", "type": "bootstrap", "name": "FakeServer", "superClass": "Object"}, "type": "class", "children": [{"attributes": {"text": "<p>A wrapper around Sinon.JS&#8217;s FakeXMLHttpRequest and FakeServer features that\nallows quick and simple configuration of mock <span class=\"caps\">HTTP</span> backends for testing and\ndevelopment.\nAutomatically creates <span class=\"caps\">URL</span> filtering rules to ensure that only configured\nrequests are faked while others will be processed normally by the browser&#8217;s\n<span class=\"caps\">XHR</span> implementation.</p>\n\n<p>The following example shows how to configure mock responses for two different\nrequests:</p>\n\n<pre class=\"javascript\">\n  var responseData = [\n    {\n      method: \"GET\",\n      url: /\\/api\\/resource\\/\\d+/,\n      response : function(request) {\n        var status = 200;\n        var headers = { \"Content-Type\": \"application/json\" };\n        var responseData = {\n          description: \"Mock REST response for resource \" + request.url\n        };\n        var body = qx.lang.Json.stringify(responseData);\n        request.respond(status, headers, body);\n      }\n    },\n    {\n      method: \"GET\",\n      url: \"/users/{userId}\",\n      response: [\n        200,\n        { \"Content-Type\": \"application/json\" },\n        qx.lang.Json.stringify({userId: 'someUser'})\n      ]\n    }\n  ];\n\n  qx.dev.FakeServer.getInstance().configure(responseData);\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"line": 62, "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "internal", "isInternal": true, "line": 85, "isStatic": true, "name": "getInstance"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper method to handle singletons</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The singleton instance</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 260, "name": "__getCombinedFilter"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns a filter function that ensures only requests matching configured\nfake responses will be intercepted.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>filter function</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 249, "name": "_getRegExp"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "pattern"}, "type": "param", "children": [{"attributes": {"text": "<p>RegExp pattern</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a RegExp using the given pattern. Curly brackets and anything\nbetween are replaced with wildcards (.*?)</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Regular Expression</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "RegExp"}, "type": "entry"}]}]}]}, {"attributes": {"line": 161, "name": "addFilter"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "filter"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> filter function. Will be called with the following arguments: <code>method</code>, <code>url</code>, <code>async</code>, <code>username</code>, <code>password</code>. Must return <code>true</code> if the request should not be faked.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds a <span class=\"caps\">URL</span> filtering function to decide whether a request should be handled\nby the FakeServer or passed to the regular XMLHttp implementation.\nSee <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\nfor details.</p>"}, "type": "desc"}]}, {"attributes": {"line": 130, "name": "configure"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "responseData"}, "type": "param", "children": [{"attributes": {"text": "<p>An array of response description maps.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Configures a set of fake <span class=\"caps\">HTTP</span> responses. Each response is defined as a map\nthat must provide the following keys:\n<ul>\n  <li><code>method</code> <span class=\"caps\">HTTP</span> method to respond to, e.g. <code><span class=\"caps\">PUT</span></code></li>\n  <li><code>url</code> <span class=\"caps\">URL</span> used to match requests to fake responses. Can be\n  a RegExp or a String. <span class=\"caps\">REST</span>-style parameter placeholders in curly braces\n  will be replaced with wildcards, e.g. the string &#8221;/resource/{resourceId}&#8221;\n  is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n  <li><code>response</code> This can be either:\n    <ul>\n      <li>a string: This will be the response body, status code will be 200</li>\n      <li>an array containing the status code, a map of response headers and\n        the response text, e.g. <code>[200, { &#8220;Content-Type&#8221;: &#8220;text/html&#8221; }, &#8220;OK&#8221;]</code>\n      </li>\n      <li>a function: This will be called with a FakeXMLHttpRequest object as\n      the only argument. Its <code>respond</code> method must be called to send a response.\n      See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n      </li>\n    </ul>\n  </li>\n</ul></p>"}, "type": "desc"}]}, {"attributes": {"line": 219, "name": "getFakeServer"}, "type": "method", "children": [{"attributes": {"text": "<p>Creates and configures a FakeServer if necessary and returns it.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>FakeServer object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"line": 174, "name": "removeFilter"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "filter"}, "type": "param", "children": [{"attributes": {"text": "<p>filter function to remove</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove a filter that was added with {@link #addFilter}</p>"}, "type": "desc"}]}, {"attributes": {"line": 184, "name": "removeResponse"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">HTTP</span> method of the response</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "url"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> of the response</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "RegExp"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes a response that was configured with {@link #configure}</p>"}, "type": "desc"}]}, {"attributes": {"line": 209, "name": "respondWith"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">HTTP</span> method to respond to, e.g. &#8220;GET&#8221;</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "urlRegExp"}, "type": "param", "children": [{"attributes": {"text": "<p>Request <span class=\"caps\">URL</span> must match match this expression</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "RegExp"}, "type": "entry"}]}]}, {"attributes": {"name": "response"}, "type": "param", "children": [{"attributes": {"text": "<p>Response to send. See <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}, {"attributes": {"type": "Array"}, "type": "entry"}, {"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Defines a fake <span class=\"caps\">XHR</span> response to a matching request.</p>"}, "type": "desc"}]}, {"attributes": {"line": 233, "name": "restore"}, "type": "method", "children": [{"attributes": {"text": "<p>Stops the FakeServer and removes all configured responses and/or filters.</p>"}, "type": "desc"}]}]}]}