{"attributes": {"fullName": "qx.bom.FullScreen", "packageName": "qx.bom", "type": "bootstrap", "name": "FullScreen", "superClass": "qx.event.Emitter"}, "type": "class", "children": [{"attributes": {"text": "<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>This class offers a constant <span class=\"caps\">API</span> over the Fullscreen Spec:\n<a href=\"http://www.w3.org/TR/fullscreen/\">http://www.w3.org/TR/fullscreen/</a></p>\n\n<p>It forwards all the browsers support if supported.</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"javascript\">\nvar fs = qx.bom.FullScreen.getInstance();\n\nvar button = new qx.ui.form.Button(\"Toggle fullscreen\");\nbutton.addListener(\"execute\", function() {\n  if (fs.isFullScreen()) {\n    fs.cancel();\n  } else {\n    fs.request();\n  }\n});\n\n// Enable button if toggling is supported\nbutton.setEnabled(qx.core.Environment.get(\"html.fullscreen\"));\n\n</pre>\n\n<p><strong>Note</strong></p>\n\n<p>A fullscreen request will only be handled from within an interactive\nevent handler. So there is most likely a mouse or key event involved\nto trigger it properly.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 62, "isStatic": true, "name": "getInstance"}, "type": "method", "children": [{"attributes": {"text": "<p>Get an instance of the FullScreen object using the default document.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>An instance of this class.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.FullScreen"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"line": 75, "isCtor": true, "name": "ctor"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"optional": true, "name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional element to show fullscreen.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "change"}, "type": "event", "children": [{"attributes": {"text": "<p>The change event for the fullscreen mode.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 110, "name": "__checkAttributeNames"}, "type": "method", "children": [{"attributes": {"text": "<p>Internal helper to feature check the attribute names and the event name.\nAs the event can not be detected using the on attribute, we need\nto guess the event name by checking for the hidden attribute.</p>"}, "type": "desc"}]}, {"attributes": {"line": 179, "name": "cancel"}, "type": "method", "children": [{"attributes": {"text": "<p>End the fullscreen mode.</p>"}, "type": "desc"}]}, {"attributes": {"line": 155, "name": "isFullScreen"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns whether the page is shown in fullscreen mode or not. If we\ncan not detect it, <code>false</code> will always be returned.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<code>true</code>, if the page is shown fullscreen"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 169, "name": "request"}, "type": "method", "children": [{"attributes": {"text": "<p>Request the page to be shown in fullscreen mode. Note that this\nis only possible when called from within an interactive event\nhandler.</p>\n\n<p>It&#8217;s also worth a note that the user may deny fullscreen mode,\nso there is no guarantee that it really worked.</p>"}, "type": "desc"}]}]}]}