{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/transforms/Mqtt.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "defer",
    "cv",
    "Transform",
    "addTransform",
    "name",
    "encode",
    "phy",
    "toString",
    "decode",
    "str",
    "parseFloat",
    "parameter",
    "ret_pre",
    "ret_post",
    "match",
    "forEach",
    "e",
    "replace",
    "json",
    "JSON",
    "parse",
    "transforms",
    "Mqtt"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oBAAhB,EAAsC;AACpCC,IAAAA,IAAI,EAAE,QAD8B;;AAGpC;AACF;AACA;AACA;AACEC,IAAAA,KAAK,EAAE,iBAAW;AAChBC,MAAAA,EAAE,CAACC,SAAH,CAAaC,YAAb,CAA0B,MAA1B,EAAkC;AAChC,kBAAU;AACRC,UAAAA,IAAI,EAAE,aADE;AAERC,UAAAA,MAAM,EAAE,gBAAUC,GAAV,EAAe;AACrB,mBAAOA,GAAG,CAACC,QAAJ,EAAP;AACD,WAJO;AAKRC,UAAAA,MAAM,EAAE,gBAAUC,GAAV,EAAe;AACrB,mBAAOC,UAAU,CAACD,GAAD,CAAjB;AACD;AAPO,SADsB;AAUhC,kBAAU;AACRL,UAAAA,IAAI,EAAE,aADE;AAERC,UAAAA,MAAM,EAAE,gBAAUC,GAAV,EAAe;AACrB,mBAAOA,GAAG,CAACC,QAAJ,EAAP;AACD,WAJO;AAKRC,UAAAA,MAAM,EAAE,gBAAUC,GAAV,EAAe;AACrB,mBAAOA,GAAG,CAACF,QAAJ,EAAP;AACD;AAPO,SAVsB;AAmBhC,gBAAQ;AACNH,UAAAA,IAAI,EAAE,WADA;AAENC,UAAAA,MAAM,EAAE,gBAAUC,GAAV,EAAeK,SAAf,EAA0B;AAChC,gBAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,kBACEC,OAAO,GAAG,EADZ;AAEE,kBAAIC,QAAQ,GAAG,EAAf,CAH+B,CAIjC;;AACA,kBAAMC,KAAK,GAAGH,SAAS,CAACG,KAAV,CAAgB,eAAhB,CAAd;;AACA,kBAAIA,KAAJ,EAAW;AACTA,gBAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,CAAC,EAAI;AACjBJ,kBAAAA,OAAO,IAAI,OAAOI,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAP,GAA+B,IAA1C;AACAJ,kBAAAA,QAAQ,IAAI,GAAZ;AACD,iBAHD;AAID;;AACD,qBAAOD,OAAO,IAAI,OAAON,GAAP,KAAe,QAAf,GAA0B,MAAIA,GAAJ,GAAQ,GAAlC,GAAwCA,GAA5C,CAAP,GAA0DO,QAAjE;AACD;;AACD,mBAAOP,GAAG,CAACC,QAAJ,EAAP;AACD,WAlBK;AAmBNC,UAAAA,MAAM,EAAE,gBAAUC,GAAV,EAAeE,SAAf,EAA0B;AAChC,gBAAIO,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWX,GAAX,CAAX;;AACA,gBAAI,OAAOE,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACA,kBAAMG,KAAK,GAAGH,SAAS,CAACG,KAAV,CAAgB,eAAhB,CAAd;;AACA,kBAAIA,KAAJ,EAAW;AACTA,gBAAAA,KAAK,CAACC,OAAN,CACE,UAAAC,CAAC,EAAI;AACHE,kBAAAA,IAAI,GAAGA,IAAI,CAACF,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAD,CAAX;AACD,iBAHH;AAKD;AACF;;AACD,mBAAOC,IAAP;AACD;AAjCK;AAnBwB,OAAlC;AAuDD;AA/DmC,GAAtC;AA1BAjB,EAAAA,EAAE,CAACoB,UAAH,CAAcC,IAAd,CAAmB1B,aAAnB,GAAmCA,aAAnC",
  "sourcesContent": [
    "/* Mqtt.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Transformations for the MQTT backend\n * \n * @author Christian Mayer\n * @since 2021\n */\nqx.Class.define('cv.transforms.Mqtt', {\n  type: 'static',\n\n  /**\n   * This class defines the default transforms: encode: transform JavaScript to\n   * bus value decode: transform bus to JavaScript value\n   */\n  defer: function() {\n    cv.Transform.addTransform('MQTT', {\n      'number': {\n        name: 'MQTT_Number',\n        encode: function (phy) {\n          return phy.toString();\n        },\n        decode: function (str) {\n          return parseFloat(str);\n        }\n      },\n      'string': {\n        name: 'MQTT_String',\n        encode: function (phy) {\n          return phy.toString();\n        },\n        decode: function (str) {\n          return str.toString();\n        }\n      },\n      'json': {\n        name: 'MQTT_JSON',\n        encode: function (phy, parameter) {\n          if (typeof parameter === 'string') {\n            let\n              ret_pre = '';\n              let ret_post = '';\n            // split on \".\" but not on \"\\.\" to allow the dot to be escaped\n            const match = parameter.match(/(\\\\\\.|[^.])+/g);\n            if (match) {\n              match.forEach(e => {\n                ret_pre += '{\"' + e.replace('\\\\.', '.') + '\":';\n                ret_post += '}';\n              });\n            }\n            return ret_pre + (typeof phy === 'string' ? '\"'+phy+'\"' : phy) + ret_post;\n          }\n          return phy.toString();\n        },\n        decode: function (str, parameter) {\n          let json = JSON.parse(str);\n          if (typeof parameter === 'string') {\n            // split on \".\" but not on \"\\.\" to allow the dot to be escaped\n            const match = parameter.match(/(\\\\\\.|[^.])+/g);\n            if (match) {\n              match.forEach(\n                e => {\n                  json = json[e.replace('\\\\.', '.')];\n                }\n              );\n            }\n          }\n          return json;\n        }\n      }\n    });\n  }\n});\n"
  ]
}