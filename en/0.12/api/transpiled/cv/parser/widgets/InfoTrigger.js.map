{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/source/class/cv/parser/widgets/InfoTrigger.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "parse",
    "xml",
    "path",
    "flavour",
    "pageType",
    "data",
    "cv",
    "parser",
    "WidgetParser",
    "parseElement",
    "getAttributeToPropertyMappings",
    "parseFormat",
    "parseAddress",
    "makeAddressListFn",
    "target",
    "transform",
    "parseFloat",
    "value",
    "includes",
    "src",
    "mode",
    "variant",
    "defer",
    "addHandler",
    "widgets",
    "InfoTrigger"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* InfoTrigger.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n *\n */\nqx.Class.define('cv.parser.widgets.InfoTrigger', {\n  type: \"static\",\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        'downvalue': {target: 'downValue', transform: parseFloat, \"default\": 0},\n        'shortdownvalue': {target: 'shortDownValue', transform: function (value) {\n            return !!value ? parseFloat(value) : null;\n          }},\n        'downlabel': {target: 'downLabel'},\n        'upvalue': {target: 'upValue', transform: parseFloat, \"default\": 0},\n        'shortupvalue': {target: 'shortUpValue', transform: function (value) {\n          return !!value ? parseFloat(value) : null;\n         }},\n        'uplabel': {target: 'upLabel'},\n        'shorttime': {target: 'shortThreshold', transform: parseFloat, \"default\": -1},\n        'send-long-on-release' : {target: 'sendLongOnRelease', transform: function (value) {\n            return value ? value === \"true\" : true;\n         }},\n        'change': {\n          target: 'isAbsolute', transform: function (value) {\n            return (value || 'relative') === \"absolute\";\n          }\n        },\n        'min': {transform: parseFloat, \"default\": 0},\n        'max': {transform: parseFloat, \"default\": 255},\n        'infoposition': {\n          target: 'infoPosition',\n          \"default\": 'left',\n          transform: function (value) {\n            return ['middle', 'right'].includes(value) ? value : 'left';\n          }\n        }\n      };\n    },\n\n    makeAddressListFn: function (src, transform, mode, variant) {\n      // Bit 0 = short, Bit 1 = button => 1|2 = 3 = short + button\n      return [true, variant === 'short' ? 1 : (variant === 'button' ? 2 : 1 | 2)];\n    }\n  },\n\n  defer: function (statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler(\"infotrigger\", statics);\n  }\n});"
  ]
}