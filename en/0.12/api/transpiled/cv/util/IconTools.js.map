{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/util/IconTools.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "hexColorRegEx",
    "colorMapping",
    "white",
    "orange",
    "red",
    "green",
    "blue",
    "purple",
    "yellow",
    "grey",
    "black",
    "iconCache",
    "iconCacheMap",
    "iconDelay",
    "iconDelayFn",
    "tmpCanvas",
    "tmpCtx",
    "preloadedKUFicons",
    "iconDelayed",
    "icon",
    "colors",
    "color",
    "cv",
    "util",
    "IconTools",
    "push",
    "setInterval",
    "length",
    "fillRecoloredIcon",
    "shift",
    "clearInterval",
    "createCanvas",
    "iconId",
    "styling",
    "classes",
    "fillCanvas",
    "canvas",
    "imageData",
    "width",
    "height",
    "getContext",
    "putImageData",
    "innerRecolorLoop",
    "navigator",
    "userAgent",
    "toLowerCase",
    "indexOf",
    "parseFloat",
    "slice",
    "r",
    "g",
    "b",
    "data",
    "i",
    "a",
    "doRecolorNonTransparent",
    "thisIcon",
    "thisIconColors",
    "drawImage",
    "getImageData",
    "undefined",
    "test",
    "log",
    "Logger",
    "error",
    "parseInt",
    "substr",
    "recolorNonTransparent",
    "url",
    "loadHandler",
    "toFill",
    "thisFillColor",
    "pop",
    "asText",
    "Image",
    "onload",
    "src",
    "id",
    "c",
    "complete",
    "newCanvas",
    "template",
    "document",
    "createElement",
    "innerHTML",
    "newElement",
    "content",
    "firstChild",
    "parameters",
    "className",
    "split",
    "baseVal",
    "substring",
    "cacheEntry",
    "coloredIcon",
    "svgKUF",
    "iconID",
    "event",
    "message",
    "Bus",
    "subscribe",
    "iconPath",
    "Application",
    "getRelativeResourcePath",
    "window",
    "fetch",
    "then",
    "text",
    "div",
    "svg",
    "setAttribute",
    "body",
    "appendChild",
    "err",
    "debug",
    "forceRemote",
    "iconLink",
    "style",
    "createElementNS",
    "use",
    "setAttributeNS",
    "defer",
    "self"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* IconTools.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * @author Christian Mayer\n * @since 2015\n */\nqx.Class.define('cv.util.IconTools', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n\n    // \"global\" functions (=> state less)\n    /**\n     * RegEx to determine a valid CSS style color like #rrggbb\n     * @type {RegExp}\n     */\n    hexColorRegEx: /#[0-9a-fA-F]{6}/,\n    /**\n     * as a convenience, definition of a few colors\n     * @type {Object<string, string>}\n     */\n    colorMapping: {\n      white: '#ffffff',\n      orange: '#ff8000',\n      red: '#ff4444',\n      green: '#44ff44',\n      blue: '#4444ff',\n      purple: '#ff44ff',\n      yellow: '#ffff00',\n      grey: '#777777',\n      black: '#000000'\n    },\n\n    /**\n     * @typedef iconCacheEntryHash\n     * @type {Object}\n     * @property {HTMLImageElement} icon - the original Image() of the icon\n     * @property {number} id - the unique ID for this icon\n     * @property {Object.<string, ImageData>} colors - cache all the transformed ImageDatas\n     * @property {string[]} toFill - all the icon colors to fill once the image was loaded\n     */\n\n    /**\n     * the Image() of all knows (i.e. used) icons\n     * @type {Object.<string, iconCacheEntryHash>}\n     */\n    iconCache: {},\n    /**\n     * mapping of ID to Cache entry (URL)\n     */\n    iconCacheMap: [],\n    /**\n     * array of all icons to fill where the Image is not ready yet\n     * @type {Array.<Array<(HTMLCanvasElement|SVGElement), Object.<string, ImageData>, string>>}\n     */\n    iconDelay: [],\n    /**\n     * handler for delay function\n     * @type {Function}\n     */\n    iconDelayFn: null,\n\n    tmpCanvas: null,\n    tmpCtx: null,\n    /**\n     * Were the KNX User Forum icons already preloaded?\n     * Only done when the config is using them\n     * @type {boolean}\n     */\n    preloadedKUFicons: false,\n\n    /**\n     *\n     * @param {(HTMLCanvasElement|SVGElement)} icon\n     * @param {Object.<string, ImageData>} colors\n     * @param {string} color\n     */\n    iconDelayed: function (icon, colors, color) {\n      cv.util.IconTools.iconDelay.push([icon, colors, color]);\n      if (!cv.util.IconTools.iconDelayFn) {\n        cv.util.IconTools.iconDelayFn = setInterval(function () {\n          while (cv.util.IconTools.iconDelay.length) {\n            // it should be enough to test only the first element - the other\n            // elements will be covered anyway...\n            if (cv.util.IconTools.iconDelay[0][2] in cv.util.IconTools.iconDelay[0][1]) {\n              cv.util.IconTools.fillRecoloredIcon(cv.util.IconTools.iconDelay.shift()[0]);\n            } else {\n              break;\n            }\n          }\n\n          if (cv.util.IconTools.iconDelay.length === 0) {\n            clearInterval(cv.util.IconTools.iconDelayFn);\n            cv.util.IconTools.iconDelayFn = 0;\n          }\n        }, 10);\n      }\n    },\n    /**\n     * Create the HTML for the canvas element and return it.\n     * @param {string} iconId\n     * @param {string?} styling\n     * @param {string?} classes\n     * @returns {string}\n     */\n    createCanvas: function (iconId, styling= '', classes = '') {\n      return '<canvas class=\"' + iconId + ' ' + classes + '\" ' + styling + '/>';\n    },\n    /**\n     * Fill the canvas with the ImageData. Also resize the\n     * canvas at the same time.\n     * @param {HTMLCanvasElement} canvas\n     * @param {ImageData} imageData\n     */\n    fillCanvas: function (canvas, imageData) {\n      canvas.width = imageData.width;\n      canvas.height = imageData.height;\n      canvas.getContext('2d').putImageData(imageData, 0, 0);\n    },\n    /**\n       * Two versions of a recoloring function to work around an Android bug:\n       * http://stackoverflow.com/questions/14969496/html5-canvas-pixel-manipulation-problems-on-mobile-devices-when-setting-the-alph\n       * https://code.google.com/p/android/issues/detail?id=17565\n       * @param {number} r\n       * @param {number} g\n       * @param {number} b\n       * @param {number[]} data\n       * @param {number} length\n       */\n    innerRecolorLoop: navigator.userAgent.toLowerCase().indexOf('android') > -1 && parseFloat(navigator.userAgent.slice(navigator.userAgent.toLowerCase().indexOf('android') + 8)) < 4.4\n      ? function (r, g, b, data, length) { // for Android version < 4.4\n        for (let i = 0; i < length; i += 4) {\n          const a = data[i + 3];\n          if (a > 127) {\n            data[i] = r;\n            data[i + 1] = g;\n            data[i + 2] = b;\n            data[i + 3] = 255;\n          } else { // brute force it...\n            data[i] = 0;\n            data[i + 1] = 0;\n            data[i + 2] = 0;\n            data[i + 3] = 0;\n          }\n        }\n      }\n      : function (r, g, b, data, length) { // the normal version\n        for (let i = 0; i < length; i += 4) {\n          if (data[i + 3] !== 0) {\n            data[i] = r;\n            data[i + 1] = g;\n            data[i + 2] = b;\n          }\n        }\n      },\n    /**\n     * Do the recoloring based on `thisIcon` and store it in the\n     * hash `thisIconColors`.\n     * @param {string} color - color in the CSS style #rrggbb\n     * @param {HTMLImageElement} thisIcon\n     * @param {Object.<string, iconCacheEntryHash>} thisIconColors\n     */\n    doRecolorNonTransparent: function (color, thisIcon, thisIconColors) {\n      if (thisIconColors[color]) {\n        return; // done, already recolored\n      }\n      const width = cv.util.IconTools.tmpCanvas.width = thisIcon.width;\n      const height = cv.util.IconTools.tmpCanvas.height = thisIcon.height;\n      if (width === 0 || height === 0) {\n        return; // most likely: the image didn't exist - anyway nothing to do here\n      }\n      cv.util.IconTools.tmpCtx.drawImage(thisIcon, 0, 0);\n\n      const imageData = cv.util.IconTools.tmpCtx.getImageData(0, 0, width, height);\n      if (color !== undefined) {\n        if (!cv.util.IconTools.hexColorRegEx.test(color)) {\n          qx.log.Logger.error(this, 'Error! \"' + color + '\" is not a valid color for icon recoloring! It must have a shape like \"#rrggbb\".');\n        }\n        const r = parseInt(color.substr(1, 2), 16);\n        const g = parseInt(color.substr(3, 2), 16);\n        const b = parseInt(color.substr(5, 2), 16);\n        cv.util.IconTools.innerRecolorLoop(r, g, b, imageData.data, width * height * 4);\n      }\n      thisIconColors[color] = imageData;\n    },\n\n    /**\n     * Function to call for each icon that should be dynamically recolored.\n     * This will be called for each known URL, so only remember the string but\n     * don't load the image yet as it might not be needed.\n     * @param {string} url\n     * @returns {recolorCallback} a function that will append the recolored image to\n     * the jQuery element passed to that function\n     */\n    recolorNonTransparent: function (url) {\n      const loadHandler = function () {\n        const toFill = cv.util.IconTools.iconCache[url].toFill;\n        const thisIcon = cv.util.IconTools.iconCache[url].icon;\n        const thisIconColors = cv.util.IconTools.iconCache[url].colors;\n        let thisFillColor;\n        while (thisFillColor = toFill.pop()) { // eslint-disable-line no-cond-assign\n          cv.util.IconTools.doRecolorNonTransparent(thisFillColor, thisIcon, thisIconColors);\n        }\n      };\n\n      /**\n       * @callback recolorCallback\n       * will be called for each color that is actually used\n       * => load image for all colors\n       * => transform image\n       * @param {string} color - color in CSS style, i.e. #rrggbb\n       * @param {string} styling\n       * @param {string} classes\n       * @param {boolean?} asText\n       */\n      return function (color, styling, classes, asText) {\n        if (undefined === cv.util.IconTools.iconCache[url]) {\n          const thisIcon = new Image();\n          thisIcon.onload = loadHandler;\n          thisIcon.src = url;\n\n          cv.util.IconTools.iconCache[url] = {\n            icon: thisIcon, // the original Image() of the icon\n            id: cv.util.IconTools.iconCacheMap.length, // the unique ID for this icon\n            colors: {}, // cache all the transformed ImageDatas\n            toFill: [] // all the icon colors to fill once the image was loaded\n          };\n          cv.util.IconTools.iconCacheMap.push(url);\n        }\n\n        if (!color) {\n          color = '#ffffff';\n        }\n        if (color in cv.util.IconTools.colorMapping) {\n          color = cv.util.IconTools.colorMapping[color];\n        }\n        const c = 'icon' + cv.util.IconTools.iconCache[url].id + '_' + color.substr(1, 6);\n        cv.util.IconTools.iconCache[url].toFill.push(color);\n\n        // when already available - fill it now. Otherwise the onLoad will do it.\n        if (cv.util.IconTools.iconCache[url].icon.complete) {\n          loadHandler();\n        }\n        const newCanvas = cv.util.IconTools.createCanvas(c, styling, classes);\n        if (asText) {\n          return newCanvas;\n        }\n        let template = document.createElement('template');\n        template.innerHTML = newCanvas;\n        const newElement = template.content.firstChild;\n        if (cv.util.IconTools.iconCache[url].icon.complete) {\n          cv.util.IconTools.fillCanvas(newElement, cv.util.IconTools.iconCache[url].colors[color]);\n        } else {\n          cv.util.IconTools.iconDelayed(newElement, cv.util.IconTools.iconCache[url].colors, color);\n        }\n        return newElement;\n      };\n    },\n\n    /**\n     * This function must be called to fill a specific icon that was created.\n     * Is will be colored based on it's class name.\n     * @param {(HTMLCanvasElement|SVGElement)} icon\n     */\n    fillRecoloredIcon: function (icon) {\n      const parameters = (icon.className.split ? icon.className.split(' ') : icon.className.baseVal.split(' '))[0].substring(4).split('_');\n      if (parameters.length === 2) {\n        const cacheEntry = cv.util.IconTools.iconCache[cv.util.IconTools.iconCacheMap[parameters[0]]];\n        const coloredIcon = cacheEntry.colors['#' + parameters[1]];\n\n        if (undefined === coloredIcon) {\n          cv.util.IconTools.iconDelayed(icon, cacheEntry.colors, '#' + parameters[1]);\n        } else {\n          cv.util.IconTools.fillCanvas(icon, coloredIcon);\n        }\n      }\n    },\n\n    /**\n     * @param {string} iconID\n     * @returns {recolorCallback}\n     */\n    svgKUF: function (iconID) {\n      if (!this.preloadedKUFicons) {\n        this.preloadedKUFicons = true;\n        qx.event.message.Bus.subscribe('setup.dom.finished.before', function() {\n          // use relative path here, otherwise it won't work in replay mode\n          const iconPath = cv.Application.getRelativeResourcePath() + 'icons/knx-uf-iconset.svg';\n          window.fetch(iconPath)\n            .then(r => r.text())\n            .then(text => {\n              let div = document.createElement('div');\n              div.innerHTML = text;\n              let svg = div.firstChild;\n              svg.setAttribute('style', 'display:none');\n              document.body.appendChild(svg);\n            }).catch(err => {\n              qx.log.Logger.debug(cv.util.IconTools, err);\n            });\n        });\n      }\n      /**\n       * @param {string} color - color in CSS style, i.e. #rrggbb\n       * @param {string} styling\n       * @param {string} classes\n       * @param {boolean?} asText\n       * @param {boolean?} forceRemote - force to load the icon remotely, e.g. as it could be that it's not inside the\n       *          DOM; this is relevant only for special cases when the normal DOM might not be ready\n       */\n      return function (color, styling, classes, asText, forceRemote = false) {\n        // use relative path here, otherwise it won't work in replay mode\n        const iconPath = forceRemote ? (cv.Application.getRelativeResourcePath() + 'icons/knx-uf-iconset.svg') : '';\n        const iconLink = iconPath + '#kuf-' + iconID;\n\n        if (color in cv.util.IconTools.colorMapping) {\n          color = cv.util.IconTools.colorMapping[color];\n        }\n\n        let style = styling || '';\n        if (color) {\n          style += 'color:' + color + ';';\n        }\n        if (asText) {\n          if (style) {\n            style = ' style=\"' + style + '\"';\n          }\n          return '<svg' + style + ' class=\"' + classes + '\"><use xlink:href=\"' + iconLink + '\"></use></svg>';\n        }\n        let svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('class', classes);\n        if (style) {\n          svg.setAttribute('style', style);\n        }\n        let use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n        use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', iconLink);\n        svg.appendChild(use);\n        return svg;\n      };\n    }\n  },\n\n  defer: function() {\n    const canvas = document.createElement('canvas');\n    this.defer.self.tmpCanvas = canvas;\n    this.defer.self.tmpCtx = canvas.getContext('2d');\n  }\n});\n"
  ]
}