{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/core/notifications/ActionRegistry.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "__handlers",
    "registerActionHandler",
    "handler",
    "log",
    "Logger",
    "warn",
    "unregisterActionHandler",
    "getActionHandler",
    "config",
    "createActionElement",
    "error",
    "actionHandler",
    "getDomElement",
    "cv",
    "core",
    "notifications",
    "ActionRegistry"
  ],
  "mappings": ";;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,sCAAhB,EAAwD;AACtDC,IAAAA,IAAI,EAAE,QADgD;;AAGtD;AACF;AACA;AACA;AACA;AACEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAU,EAAE,EADL;;AAGP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,qBAAqB,EAAE,+BAASH,IAAT,EAAeI,OAAf,EAAwB;AAC7C,YAAI,KAAKF,OAAL,CAAgBF,IAAhB,CAAJ,EAA2B;AACzBN,UAAAA,EAAE,CAACW,GAAH,CAAOC,MAAP,CAAcC,IAAd,CAAmB,IAAnB,EAAyB,yDAAuDP,IAAvD,GAA4D,0BAArF;AACD;;AACD,aAAKE,OAAL,CAAgBF,IAAhB,IAAwBI,OAAxB;AACD,OAjBM;;AAmBP;AACJ;AACA;AACA;AACA;AACII,MAAAA,uBAAuB,EAAE,iCAASR,IAAT,EAAe;AACtC,YAAI,KAAKE,OAAL,CAAgBF,IAAhB,CAAJ,EAA2B;AACzB,iBAAO,KAAKE,OAAL,CAAgBF,IAAhB,CAAP;AACD;AACF,OA5BM;;AA8BP;AACJ;AACA;AACA;AACA;AACA;AACIS,MAAAA,gBAAgB,EAAE,0BAAST,IAAT,EAAeU,MAAf,EAAuB;AACvC,YAAI,KAAKR,OAAL,CAAgBF,IAAhB,CAAJ,EAA2B;AACzB,iBAAO,IAAK,KAAKE,OAAL,CAAgBF,IAAhB,CAAL,CAA4BU,MAA5B,CAAP;AACD;;AACC,eAAO,IAAP;AACH,OAzCM;;AA2CP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,mBAAmB,EAAE,6BAASX,IAAT,EAAeU,MAAf,EAAuB;AAC1C,YAAI,CAAC,KAAKR,OAAL,CAAgBF,IAAhB,CAAL,EAA4B;AAC1BN,UAAAA,EAAE,CAACW,GAAH,CAAOC,MAAP,CAAcM,KAAd,CAAoB,IAApB,EAA0B,qDAA1B,EAAiFZ,IAAjF;AACA,iBAAO,IAAP;AACD;;AACD,YAAMa,aAAa,GAAG,IAAK,KAAKX,OAAL,CAAgBF,IAAhB,CAAL,CAA4BU,MAA5B,CAAtB;AACA,eAAOG,aAAa,CAACC,aAAd,EAAP;AACD;AA1DM;AAR6C,GAAxD;AA3BAC,EAAAA,EAAE,CAACC,IAAH,CAAQC,aAAR,CAAsBC,cAAtB,CAAqCrB,aAArC,GAAqDA,aAArD",
  "sourcesContent": [
    "/* ActionRegistry.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Global notification handler that routes messages topic-dependent to different {@link cv.core.notifications.IHandler}\n * (e.g. NotificationCenter, Dialog, Toast, console.log, native notification, internal message bus ...)\n *\n * @author Tobias Br√§utigam\n * @since 0.11.0\n */\nqx.Class.define('cv.core.notifications.ActionRegistry', {\n  type: 'static',\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    __handlers: {},\n\n    /**\n     * Register an action handler for an action type.\n     *\n     * Note: There can only be one action handler per type. If there is currently\n     *       another handler registered for this type it will be replaced.\n     *\n     * @param type {String} action type\n     * @param handler {cv.core.notifications.IActionHandler}\n     */\n    registerActionHandler: function(type, handler) {\n      if (this.__handlers[type]) {\n        qx.log.Logger.warn(this, 'there is already an action handler registered for \\''+type+'\\' action. replacing now');\n      }\n      this.__handlers[type] = handler;\n    },\n\n    /**\n     * Unregister an action handler for an action type.\n     *\n     * @param type {String} action type\n     */\n    unregisterActionHandler: function(type) {\n      if (this.__handlers[type]) {\n        delete this.__handlers[type];\n      }\n    },\n\n    /**\n     * Get an instance of the registered action handler for the requested action type.\n     * @param type {String} action type\n     * @param config {Map?} additional parameters that should be passed to the action handlers constructor\n     * @return {cv.core.notifications.IActionHandler|null}\n     */\n    getActionHandler: function(type, config) {\n      if (this.__handlers[type]) {\n        return new (this.__handlers[type])(config);\n      } \n        return null;\n    },\n\n    /**\n     * Creates an action element for the given action type. Unsually this is a button or a similar DOMElement\n     * with a listener attached.\n     *\n     * @param type {String} action type\n     * @param config {Map} additional parameters that should be passed to the action handlers constructor\n     * @return {Element|null}\n     */\n    createActionElement: function(type, config) {\n      if (!this.__handlers[type]) {\n        qx.log.Logger.error(this, 'no action handler registered for \\'%1\\' action type', type);\n        return null;\n      }\n      const actionHandler = new (this.__handlers[type])(config);\n      return actionHandler.getDomElement();\n    }\n  }\n});\n"
  ]
}