{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/core/notifications/SpeechHandler.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "cv",
    "notifications",
    "IHandler",
    "type",
    "construct",
    "__lastSpeech",
    "members",
    "handleMessage",
    "message",
    "config",
    "text",
    "title",
    "skipInitial",
    "topic",
    "time",
    "Date",
    "now",
    "Router",
    "evaluateCondition",
    "length",
    "debug",
    "substring",
    "repeatTimeout",
    "Math",
    "round",
    "say",
    "language",
    "window",
    "speechSynthesis",
    "warn",
    "synth",
    "locale",
    "Manager",
    "getInstance",
    "getLocale",
    "utterThis",
    "SpeechSynthesisUtterance",
    "selectedVoice",
    "defaultVoice",
    "voices",
    "getVoices",
    "onvoiceschanged",
    "bind",
    "i",
    "l",
    "lang",
    "substr",
    "toLowerCase",
    "voice",
    "name",
    "speak",
    "SpeechHandler"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* SpeechHandler.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * SpeechHandler\n *\n * @author tobiasb\n * @since 2017\n *\n * @ignore(SpeechSynthesisUtterance)\n */\n\nqx.Class.define('cv.core.notifications.SpeechHandler', {\n  extend: qx.core.Object,\n  implement: cv.core.notifications.IHandler,\n  type: 'singleton',\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function() {\n    this.base(arguments);\n    this.__lastSpeech = {};\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __lastSpeech: null,\n\n    handleMessage: function(message, config) {\n      let text = message.message || message.title;\n      if (config.skipInitial && !this.__lastSpeech[message.topic]) {\n        this.__lastSpeech[message.topic] = {\n          text: text,\n          time: Date.now()\n        };\n        return;\n      }\n      if (cv.core.notifications.Router.evaluateCondition(message)) {\n        if (!text || text.length === 0) {\n          // nothing to say\n          this.debug('no text to speech given');\n          return;\n        }\n\n        if (text.substring(0, 1) === '!') {\n          // override repeatTimeout, force saying this\n          text = text.substring(1);\n        } else if (config.repeatTimeout >= 0) {\n          // do not repeat (within timeout when this.repeatTimeout > 0)\n          if (this.__lastSpeech[message.topic] && this.__lastSpeech[message.topic].text === text && (config.repeatTimeout === 0 ||\n              config.repeatTimeout >= Math.round((Date.now()-this.__lastSpeech[message.topic].time)/1000))) {\n            // update time\n            this.__lastSpeech[message.topic].time = Date.now();\n            // do not repeat\n            this.debug('skipping TTS because of repetition ' + text);\n            return;\n          }\n        }\n\n        this.__lastSpeech[message.topic] = {\n          text: text,\n          time: Date.now()\n        };\n\n        this.say(text);\n      }\n    },\n\n    say: /* istanbul ignore next [no need to text the browsers TTS capability] */ function(text, language) {\n      if (!window.speechSynthesis) {\n        this.warn(this, 'this browser does not support the Web Speech API');\n        return;\n      }\n      const synth = window.speechSynthesis;\n\n      if (!language) {\n        language = qx.locale.Manager.getInstance().getLocale();\n      }\n\n      // speak\n      const utterThis = new SpeechSynthesisUtterance(text);\n\n      let selectedVoice;\n      let defaultVoice;\n      const voices = synth.getVoices();\n      if (voices.length === 0) {\n        synth.onvoiceschanged = function () {\n          this.say(text, language);\n        }.bind(this);\n        return;\n      } \n        synth.onvoiceschanged = null;\n\n      let i = 0;\n      const l = voices.length;\n      for (; i < l; i++) {\n        if (language && voices[i].lang.substr(0, 2).toLowerCase() === language) {\n          selectedVoice = voices[i];\n        }\n        if (voices[i]['default']) {\n          defaultVoice = voices[i];\n        }\n      }\n      if (!selectedVoice) {\n        selectedVoice = defaultVoice;\n      }\n      utterThis.voice = selectedVoice;\n      this.debug('saying \\''+text+'\\' in voice '+selectedVoice.name);\n      synth.speak(utterThis);\n    }\n  }\n\n});\n"
  ]
}