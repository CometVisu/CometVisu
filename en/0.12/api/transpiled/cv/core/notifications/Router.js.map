{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/source/class/cv/core/notifications/Router.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "__routes",
    "debug",
    "__dateFormat",
    "util",
    "format",
    "DateFormat",
    "locale",
    "Date",
    "getDateFormat",
    "__timeFormat",
    "getTimeFormat",
    "statics",
    "evaluateCondition",
    "message",
    "hasOwnProperty",
    "condition",
    "log",
    "Logger",
    "error",
    "dispatchMessage",
    "topic",
    "target",
    "getInstance",
    "getTarget",
    "name",
    "cv",
    "ui",
    "PopupHandler",
    "NotificationCenter",
    "window",
    "speechSynthesis",
    "warn",
    "notifications",
    "SpeechHandler",
    "ToastManager",
    "members",
    "__stateMessageConfig",
    "getStateMessageConfig",
    "registerStateUpdateHandler",
    "config",
    "getOwnPropertyNames",
    "forEach",
    "address",
    "data",
    "Model",
    "addUpdateListener",
    "_onIncomingData",
    "unregisterStateUpdatehandler",
    "addresses",
    "removeUpdateListener",
    "registerMessageHandler",
    "handler",
    "topics",
    "segments",
    "split",
    "firstSegment",
    "shift",
    "currentSegment",
    "__handlers__",
    "segment",
    "push",
    "state",
    "initial",
    "changed",
    "now",
    "formattedDate",
    "formattedTime",
    "skipInitial",
    "transform",
    "addressConfig",
    "Transform",
    "decode",
    "templateData",
    "value",
    "date",
    "time",
    "valueMapping",
    "common",
    "BasicUpdate",
    "applyMapping",
    "addressMapping",
    "title",
    "bom",
    "Template",
    "render",
    "titleTemplate",
    "messageTemplate",
    "deletable",
    "unique",
    "severity",
    "icon",
    "iconClasses",
    "__collectHandlers",
    "handlers",
    "Array",
    "last",
    "length",
    "some",
    "segmentName",
    "idx",
    "__collectAllFromSegment",
    "append",
    "Router",
    "handleMessage",
    "entry",
    "clear",
    "destruct",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Router.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Global notification handler that routes messages topic-dependent to different {@link cv.core.notifications.IHandler}\n * (e.g. NotificationCenter, Dialog, Toast, console.log, native notification, internal message bus ...)\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n */\nqx.Class.define(\"cv.core.notifications.Router\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function() {\n    this.base(arguments);\n    this.__routes = {};\n    this.debug(\"new router\");\n\n    this.__dateFormat = new qx.util.format.DateFormat(qx.locale.Date.getDateFormat(\"short\"));\n    this.__timeFormat = new qx.util.format.DateFormat(qx.locale.Date.getTimeFormat(\"short\"));\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Evaluate the message condition, default to true is message has no condition set\n     * @param message {Map}\n     * @returns {Boolean}\n     */\n    evaluateCondition: function(message) {\n      if (!message.hasOwnProperty(\"condition\")) {\n        // nothing to evaluate\n        return true;\n      } else if (typeof message.condition === 'boolean') {\n        return message.condition;\n      } else if (typeof message.condition === 'function') {\n        return message.condition();\n      } else {\n        qx.log.Logger.error(this, \"unhandled message condition type: \"+message.condition);\n      }\n    },\n\n    /**\n     * Shortcut to {@link cv.core.notifications.Router#dispatchMessage}\n     */\n    dispatchMessage: function(topic, message, target) {\n      return this.getInstance().dispatchMessage(topic, message, target);\n    },\n\n    /**\n     * Converts a target name to the related target object/function.\n     *\n     * @param name {String} target name, e.g. popup, notificationCenter, etc.\n     * @return {Object|Function|null} the target that can handle messages\n     */\n    getTarget: function(name) {\n      switch (name) {\n        case \"popup\":\n          return cv.ui.PopupHandler;\n        case \"notificationCenter\":\n          return cv.ui.NotificationCenter.getInstance();\n        case \"speech\":\n          if (!window.speechSynthesis) {\n            // not supported\n            qx.log.Logger.warn(this, \"this browser does not support the Web Speech API\");\n            return;\n          }\n          return cv.core.notifications.SpeechHandler.getInstance();\n        case \"toast\":\n          return cv.ui.ToastManager.getInstance();\n      }\n      return null;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __routes: null,\n    __stateMessageConfig: null,\n    __dateFormat: null,\n    __timeFormat: null,\n\n    getStateMessageConfig: function () {\n      return this.__stateMessageConfig;\n    },\n\n    /**\n     * Register state update handler for one or more addresses.\n     *\n     * <h4>Config Map explanation:</h4>\n     * <pre class=\"javascript\">\n     * {\n     *   <address>: [{\n     *    topic: \"cv.state.<address>\", // message topic used for routing\n     *    target: \"popup\", // where to show the message\n     *    severity: \"normal\", // message severity e.g. high, normal, low\n     *    skipInitial: true, // do not show message for initial state update\n     *    deletable: true, // user can delete this message\n     *    unique: true, // show message once at a time\n     *    valueMapping: \"mapping-name\", // optional mapping for value\n     *    addressMapping: \"mapping-name\", // optional mapping name for address\n     *    titleTemplate: \"Kitchen light on\", // title template of the message\n     *    messageTemplate: \"turned on at {{ time }} o'clock\", // message content template\n     *    condition: 1 // show only when the value equals the condition value\n     *   }]\n     * }\n     * </pre>\n     *\n     * @param config {Map}\n     */\n    registerStateUpdateHandler: function(config) {\n      this.__stateMessageConfig = config;\n      Object.getOwnPropertyNames(this.__stateMessageConfig).forEach(function(address) {\n        cv.data.Model.getInstance().addUpdateListener(address, this._onIncomingData, this);\n      }, this);\n    },\n\n    /**\n     * Unregister state update listeners for a list of addresses\n     * @param addresses {Array}\n     */\n    unregisterStateUpdatehandler: function(addresses) {\n      addresses.forEach(function(address) {\n        cv.data.Model.getInstance().removeUpdateListener(address, this._onIncomingData, this);\n        if (this.__stateMessageConfig[address]) {\n          delete this.__stateMessageConfig[address];\n        }\n      },this);\n    },\n\n    /**\n     * Register a handler for a list of topics\n     * @param handler {cv.core.notifications.IHandler}\n     * @param topics {Map} map of topics as key and configuration-maps as values\n     */\n    registerMessageHandler: function(handler, topics) {\n      Object.getOwnPropertyNames(topics).forEach(function(topic) {\n        var segments = topic.split(\".\");\n        var firstSegment = segments.shift();\n        var currentSegment = this.__routes[firstSegment];\n        if (!currentSegment) {\n          this.__routes[firstSegment] = {__handlers__: []};\n          currentSegment = this.__routes[firstSegment];\n        }\n        segments.forEach(function(segment) {\n          if (!currentSegment[segment]) {\n            currentSegment[segment] = {__handlers__: []};\n          }\n          currentSegment = currentSegment[segment];\n        }, this);\n\n        currentSegment.__handlers__.push({\n          handler: handler,\n          config: topics[topic]\n        });\n      }, this);\n    },\n\n    /**\n     * Handle address state updates and show them as message\n     * @param address {String} GA or openHAB item name\n     * @param state {var} received State\n     * @param initial {Boolean} true id this is the first state update for this address\n     * @param changed {Boolean} true if the incoming state update differs from the last one\n     * @protected\n     */\n    _onIncomingData: function(address, state, initial, changed) {\n      if (!this.__stateMessageConfig[address]) {\n        return;\n      }\n\n      var now = new Date();\n      var formattedDate = this.__dateFormat.format(now);\n      var formattedTime =this.__timeFormat.format(now);\n\n      this.__stateMessageConfig[address].forEach(function(config) {\n        if (initial === true && config.skipInitial === true || changed === false) {\n          // do not handle the first update\n          return;\n        }\n\n        // process value\n        var transform = config.addressConfig[0];\n        state = cv.Transform.decode(transform, state);\n\n        var templateData = {\n          address: address,\n          value: state,\n          date: formattedDate,\n          time: formattedTime\n        };\n\n        // transform the raw value to a JavaScript type\n        templateData.value =  cv.Transform.decode(transform, templateData.value);\n        if (config.valueMapping) {\n          // apply mapping\n          templateData.value = cv.ui.common.BasicUpdate.applyMapping(templateData.value, config.valueMapping);\n        }\n        if (config.addressMapping) {\n          templateData.address = cv.ui.common.BasicUpdate.applyMapping(templateData.address, config.addressMapping);\n        }\n\n        var message = {\n          topic: config.hasOwnProperty(\"topic\") ? config.topic : \"cv.state.update.\"+address,\n          title: qx.bom.Template.render(\"\"+config.titleTemplate, templateData),\n          message: qx.bom.Template.render(\"\"+config.messageTemplate,templateData),\n          deletable: config.hasOwnProperty(\"deletable\") ? config.deletable : true,\n          unique: config.hasOwnProperty(\"unique\") ? config.unique : false,\n          severity: config.severity\n        };\n        if (config.hasOwnProperty(\"condition\")){\n          message.condition = state == config.condition; // jshint ignore:line\n        }\n        if (config.icon) {\n          message.icon = config.icon;\n          if (config.iconClasses) {\n            message.iconClasses = config.iconClasses;\n          }\n        }\n        this.dispatchMessage(message.topic, message, config.target);\n      }, this);\n\n    },\n\n    __collectHandlers: function(topic) {\n      var handlers = new qx.data.Array();\n      var segments = topic.split(\".\");\n      var firstSegment = segments.shift();\n      var currentSegment = this.__routes[firstSegment];\n      var last = segments.length-1;\n      segments.some(function(segmentName, idx) {\n        if (!currentSegment) {\n          // segment does not exists, stop searching\n          return true;\n        } else if (segmentName === \"*\") {\n          // collect all\n          this.__collectAllFromSegment(currentSegment, handlers);\n          return true;\n        } else {\n          if (currentSegment[\"*\"]) {\n            handlers.append(currentSegment[\"*\"].__handlers__);\n          }\n          if (currentSegment[segmentName]) {\n            if (idx === last) {\n              handlers.append(currentSegment[segmentName].__handlers__);\n            }\n            currentSegment = currentSegment[segmentName];\n          } else{\n            // stop searching\n            return true;\n          }\n        }\n      }, this);\n      return handlers;\n    },\n\n    __collectAllFromSegment: function(segment, handlers) {\n      handlers.append(segment.__handlers__);\n      Object.getOwnPropertyNames(segment).forEach(function(segmentName) {\n        if (segmentName !== \"__handlers__\") {\n          this.__collectAllFromSegment(segment[segmentName], handlers);\n        }\n      }, this);\n      return handlers;\n    },\n\n    dispatchMessage: function(topic, message, target) {\n      if (message.target && !target) {\n        target = cv.core.notifications.Router.getTarget(message.target);\n      }\n      if (target && target.handleMessage) {\n        this.debug(\"dispatching '\" + topic + \"' message to handler: \" + target);\n        target.handleMessage(message, {});\n      } else {\n        this.__collectHandlers(topic).forEach(function (entry) {\n          this.debug(\"dispatching '\" + topic + \"' message to handler: \" + entry.handler);\n          entry.handler.handleMessage(message, entry.config);\n        }, this);\n      }\n    },\n\n    clear: function() {\n      this.__routes = {};\n      this.__stateMessageConfig = {};\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct: function() {\n    this.clear();\n    this._disposeObjects(\"__dateFormat\", \"__timeFormat\");\n  }\n});\n"
  ]
}