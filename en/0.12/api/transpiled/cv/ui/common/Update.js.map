{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/common/Update.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "include",
    "cv",
    "ui",
    "common",
    "BasicUpdate",
    "construct",
    "getAddress",
    "_initOnCreate",
    "__initUpdater",
    "Class",
    "getEventType",
    "constructor",
    "addListenerOnce",
    "members",
    "model",
    "data",
    "Model",
    "getInstance",
    "Object",
    "getOwnPropertyNames",
    "forEach",
    "address",
    "isReadAddress",
    "state",
    "getState",
    "undefined",
    "update",
    "addUpdateListener",
    "_update",
    "value",
    "processIncomingValue",
    "handleUpdate",
    "_processIncomingValue",
    "setBasicValue",
    "defaultUpdate",
    "getDomElement",
    "getPath",
    "update3d",
    "ev",
    "l",
    "layout",
    "pos",
    "building2screen",
    "THREE",
    "Vector3",
    "x",
    "y",
    "z",
    "element",
    "css",
    "floorFilter",
    "buildingProperties",
    "floorNames",
    "Update"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Update.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This role provides the update method for incoming data\n *\n */\nqx.Mixin.define('cv.ui.common.Update', {\n  include: cv.ui.common.BasicUpdate,\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct: function () {\n    if (this.getAddress) {\n      if (this._initOnCreate === true) {\n        this.__initUpdater();\n      } else if (qx.Class.getEventType(this.constructor, 'domReady')) {\n        this.addListenerOnce('domReady', this.__initUpdater, this);\n      }\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _initOnCreate: false,\n\n    __initUpdater : function() {\n      const model = cv.data.Model.getInstance();\n      Object.getOwnPropertyNames(this.getAddress()).forEach(function(address) {\n        if (!cv.data.Model.isReadAddress(this.getAddress()[address])) {\n          // no read address\n          return;\n        }\n        const state = model.getState(address);\n        if (state !== undefined) {\n          this.update(address, state);\n        }\n        //add listener\n        model.addUpdateListener(address, this.update, this);\n      }, this);\n    },\n\n    /**\n     * Process the incoming data, update the shown value and the stylings\n     *\n     * @param address {String} Address of the incoming value\n     * @param data {String} the incoming value\n     */\n    update: function (address, data) {\n      if (this._update) {\n        this._update(address, data);\n      } else {\n        const value = this.processIncomingValue(address, data);\n        if (this.handleUpdate) {\n          this.handleUpdate(value, address);\n        }\n      }\n    },\n\n    processIncomingValue: function (address, data) {\n      if (this._processIncomingValue) {\n        const value = this._processIncomingValue(address, data);\n        // store it to be able to suppress sending of unchanged data\n        if (value !== undefined) {\n          this.setBasicValue(value);\n        }\n        return value;\n      }\n      return this.defaultUpdate(address, data, this.getDomElement(), true, this.getPath());\n    },\n\n    /**\n     * Description\n     *\n     * @param ev {var}\n     * @param data {var}\n     */\n    update3d: function (ev, data) {\n      const l = ev.data.layout;\n      const pos = data.building2screen(new THREE.Vector3(l.x, l.y, l.z));\n      ev.data.element.css('left', pos.x + 'px');\n      ev.data.element.css('top', pos.y + 'px');\n\n      let floorFilter = true;\n      if (l.floorFilter) {\n        floorFilter = data.getState('showFloor') === data.buildingProperties.floorNames[l.floorFilter];\n      }\n      ev.data.element.css('display', floorFilter ? '' : 'none');\n    }\n  }\n});\n"
  ]
}