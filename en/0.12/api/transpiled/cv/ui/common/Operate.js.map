{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/common/Operate.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "action",
    "event",
    "_skipNextEvent",
    "getType",
    "_action",
    "getActionValue",
    "sendToBackend",
    "getBubbles",
    "stopPropagation",
    "downaction",
    "_downaction",
    "value",
    "filter",
    "currentBusValues",
    "encodedValues",
    "getAddress",
    "list",
    "id",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "address",
    "cv",
    "data",
    "Model",
    "isWriteAddress",
    "encoding",
    "transform",
    "encodedValue",
    "Transform",
    "encodeBusAndRaw",
    "raw",
    "TemplateEngine",
    "getInstance",
    "visu",
    "write",
    "bus",
    "ui",
    "common",
    "Operate"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,sBAAhB,EAAwC;AAEtC;AACF;AACA;AACA;AACA;AACEC,IAAAA,OAAO,EAAE;AAEP;AACJ;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAE,gBAAUC,KAAV,EAAiB;AACvB,YAAIA,KAAK,IAAI,KAAKC,cAAL,KAAwBD,KAAK,CAACE,OAAN,EAArC,EAAsD;AACpD,eAAKD,cAAL,GAAsB,IAAtB;AACA;AACD;;AACD,YAAI,KAAKE,OAAT,EAAkB;AAChB,eAAKA,OAAL,CAAaH,KAAb;AACD,SAFD,MAEO,IAAI,KAAKI,cAAT,EAAyB;AAC5B,eAAKC,aAAL,CAAmB,KAAKD,cAAL,CAAoBJ,KAApB,CAAnB;AACD;;AACH,YAAIA,KAAK,IAAIA,KAAK,CAACM,UAAN,EAAb,EAAiC;AAC/BN,UAAAA,KAAK,CAACO,eAAN;AACD;AACF,OApBM;;AAsBP;AACJ;AACA;AACA;AACIC,MAAAA,UAAU,EAAE,oBAASR,KAAT,EAAgB;AAC1B,YAAI,KAAKS,WAAT,EAAsB;AACpB,eAAKA,WAAL,CAAiBT,KAAjB;AACD;;AACD,YAAIA,KAAK,CAACM,UAAN,EAAJ,EAAwB;AACtBN,UAAAA,KAAK,CAACO,eAAN;AACD;AACF,OAjCM;;AAmCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIF,MAAAA,aAAa,EAAE,uBAAUK,KAAV,EAAiBC,MAAjB,EAAyBC,gBAAzB,EAA2C;AACxD,YAAMC,aAAa,GAAG,EAAtB;;AACA,YAAI,KAAKC,UAAT,EAAqB;AACnB,cAAMC,IAAI,GAAG,KAAKD,UAAL,EAAb;;AACA,eAAK,IAAIE,EAAT,IAAeD,IAAf,EAAqB;AACnB,gBAAIE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,IAArC,EAA2CC,EAA3C,CAAJ,EAAoD;AAClD,kBAAMK,OAAO,GAAGN,IAAI,CAACC,EAAD,CAApB;;AACA,kBAAIM,EAAE,CAACC,IAAH,CAAQC,KAAR,CAAcC,cAAd,CAA6BJ,OAA7B,MAA0C,CAACV,MAAD,IAAWA,MAAM,CAACU,OAAD,CAA3D,CAAJ,EAA2E;AACzE,oBAAMK,QAAQ,GAAGL,OAAO,CAACM,SAAzB;AACA,oBAAMC,YAAY,GAAGN,EAAE,CAACO,SAAH,CAAaC,eAAb,CAA6BJ,QAA7B,EAAuChB,KAAvC,CAArB;;AACA,oBAAI,CAACE,gBAAD,IAAqBgB,YAAY,CAACG,GAAb,KAAqBnB,gBAAgB,CAACc,QAAD,CAA9D,EAA0E;AACxEJ,kBAAAA,EAAE,CAACU,cAAH,CAAkBC,WAAlB,GAAgCC,IAAhC,CAAqCC,KAArC,CAA2CnB,EAA3C,EAA+CY,YAAY,CAACQ,GAA5D,EAAiEf,OAAjE;AACD;;AACDR,gBAAAA,aAAa,CAACa,QAAD,CAAb,GAA0BE,YAAY,CAACG,GAAvC;AACD;AACF;AACF;AACF;;AACD,eAAOlB,aAAP;AACD;AAlEM;AAP6B,GAAxC;AAxBAS,EAAAA,EAAE,CAACe,EAAH,CAAMC,MAAN,CAAaC,OAAb,CAAqB5C,aAArB,GAAqCA,aAArC",
  "sourcesContent": [
    "/* Operate.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Provides methods for widgets that can be controlled by the user.\n * Usually this operation includes sending values to the backend.\n */\nqx.Mixin.define('cv.ui.common.Operate', {\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n\n    /**\n     * Action performed when the widget got clicked, sends data to the backend\n     *\n     * @param event {Event} tap event\n     */\n    action: function (event) {\n      if (event && this._skipNextEvent === event.getType()) {\n        this._skipNextEvent = null;\n        return;\n      }\n      if (this._action) {\n        this._action(event);\n      } else if (this.getActionValue) {\n          this.sendToBackend(this.getActionValue(event));\n        }\n      if (event && event.getBubbles()) {\n        event.stopPropagation();\n      }\n    },\n\n    /**\n     * Handles pointerdown events\n     * @param event {Event} pointerdown event\n     */\n    downaction: function(event) {\n      if (this._downaction) {\n        this._downaction(event);\n      }\n      if (event.getBubbles()) {\n        event.stopPropagation();\n      }\n    },\n\n    /**\n     * Send the given value to all writeable addresses known to this widget\n     *\n     * @param value {var} value to send\n     * @param filter {Function} optional filter function for addresses\n     * @param currentBusValues {Object} optional: the (assumed) last encoded values\n     *          that were sent on the bus. When the encoding of the new value\n     *          to send is equal to the currentBusValues a transmission will \n     *          be suppressed. The object is a hash with the encoding as a key\n     *          for the encoded value\n     * @return the object/hash of encoded values that were sent last time\n     */\n    sendToBackend: function (value, filter, currentBusValues) {\n      const encodedValues = {};\n      if (this.getAddress) {\n        const list = this.getAddress();\n        for (let id in list) {\n          if (Object.prototype.hasOwnProperty.call(list, id)) {\n            const address = list[id];\n            if (cv.data.Model.isWriteAddress(address) && (!filter || filter(address))) {\n              const encoding = address.transform;\n              const encodedValue = cv.Transform.encodeBusAndRaw(encoding, value);\n              if (!currentBusValues || encodedValue.raw !== currentBusValues[encoding]) {\n                cv.TemplateEngine.getInstance().visu.write(id, encodedValue.bus, address);\n              }\n              encodedValues[encoding] = encodedValue.raw;\n            }\n          }\n        }\n      }\n      return encodedValues;\n    }\n  }\n});\n"
  ]
}