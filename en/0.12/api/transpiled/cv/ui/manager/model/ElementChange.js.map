{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/model/ElementChange.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "title",
    "element",
    "changes",
    "type",
    "setTitle",
    "setElement",
    "setChanges",
    "setChangeType",
    "properties",
    "check",
    "changeType",
    "init",
    "members",
    "undo",
    "getElement",
    "success",
    "change",
    "isDisposed",
    "getChangeType",
    "getChanges",
    "forEach",
    "cv",
    "ui",
    "manager",
    "model",
    "ElementChange",
    "setAttribute",
    "attribute",
    "old",
    "updateModified",
    "parent",
    "insertChild",
    "child",
    "index",
    "remove",
    "moveTo",
    "oldParent",
    "oldIndex",
    "redo",
    "value"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * An atomic change on an cv.ui.manager.model.XmlElement that can be undone / redone.\n */\nqx.Class.define('cv.ui.manager.model.ElementChange', {\n  extend: qx.core.Object,\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function (title, element, changes, type) {\n    this.base(arguments);\n    this.setTitle(title);\n    this.setElement(element);\n    this.setChanges(changes);\n    this.setChangeType(type || 'content');\n  },\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    element: {\n      check: 'cv.ui.manager.model.XmlElement'\n    },\n    title: {\n      check: 'String'\n    },\n    changes: {\n      check: 'Array'\n    },\n    changeType: {\n      check: ['content', 'created', 'deleted', 'moved'],\n      init: ['content']\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /**\n     * Undo all changes\n     * @return {Boolean} true if all changes are undone\n     */\n    undo: function() {\n      const element = this.getElement();\n      let success = false;\n      let change;\n      if (!element.isDisposed()) {\n        switch (this.getChangeType()) {\n          case 'content':\n            this.getChanges().forEach(change => {\n              if (change instanceof cv.ui.manager.model.ElementChange) {\n                change.undo();\n              } else {\n                element.setAttribute(change.attribute, change.old);\n              }\n            });\n            element.updateModified();\n            success = true;\n            break;\n\n          case 'deleted':\n            change = this.getChanges()[0];\n            if (change.parent) {\n              success = change.parent.insertChild(change.child, change.index, true);\n            }\n            break;\n\n          case 'created':\n            change = this.getChanges()[0];\n            if (change.child) {\n              change.child.remove(true);\n              success = true;\n            }\n            break;\n\n          case 'moved':\n            change = this.getChanges()[0];\n            success = change.child.moveTo(change.oldParent, change.oldIndex, true);\n            break;\n\n        }\n      }\n      return success;\n    },\n\n    /**\n     * Redo all change\n     *  @return {Boolean} true if all changes are redone\n     */\n    redo: function () {\n      const element = this.getElement();\n      let success = false;\n      let change;\n      if (!element.isDisposed()) {\n        switch (this.getChangeType()) {\n          case 'content':\n            this.getChanges().forEach(change => {\n              if (change instanceof cv.ui.manager.model.ElementChange) {\n                change.redo();\n              } else {\n                element.setAttribute(change.attribute, change.value);\n              }\n            });\n            element.updateModified();\n            success = true;\n            break;\n\n          case 'deleted':\n            if (element) {\n              element.remove(true);\n              success = true;\n            }\n            break;\n\n          case 'created':\n            change = this.getChanges()[0];\n            if (change.parent) {\n              success = change.parent.insertChild(change.child, change.index, true);\n            }\n            break;\n\n          case 'moved':\n            change = this.getChanges()[0];\n            success = change.child.moveTo(change.parent, change.index, true);\n            break;\n        }\n      }\n      return success;\n    }\n  }\n});\n"
  ]
}