{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/model/XmlElement.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "marshal",
    "MEventBubbling",
    "construct",
    "node",
    "schemaElement",
    "editor",
    "parent",
    "_node",
    "children",
    "Array",
    "$$widget",
    "initName",
    "nodeName",
    "setSchemaElement",
    "hasChildren",
    "push",
    "cv",
    "ui",
    "manager",
    "model",
    "XmlElement",
    "setEditor",
    "setParent",
    "_maintainIcon",
    "_maintainStatus",
    "initChildren",
    "_initialAttributes",
    "Map",
    "bind",
    "properties",
    "check",
    "nullable",
    "event",
    "apply",
    "name",
    "deferredInit",
    "displayName",
    "init",
    "open",
    "loaded",
    "textContent",
    "validate",
    "temporary",
    "valid",
    "invalidMessage",
    "status",
    "editable",
    "sortable",
    "deletable",
    "modified",
    "showEditButton",
    "icon",
    "dragging",
    "members",
    "_schema",
    "_schemaElement",
    "_initialChildNames",
    "_initialTextContent",
    "__initializing",
    "__addableChildren",
    "clone",
    "getNode",
    "getSchemaElement",
    "getEditor",
    "getParent",
    "nodeType",
    "Node",
    "COMMENT_NODE",
    "setStatus",
    "isValid",
    "_applyValid",
    "value",
    "resetInvalidMessage",
    "convertTextNodeType",
    "newType",
    "isTextNode",
    "TEXT_NODE",
    "CDATA_SECTION_NODE",
    "content",
    "getText",
    "oldNode",
    "newTextNode",
    "ownerDocument",
    "createCDATASection",
    "createTextNode",
    "parentNode",
    "replaceChild",
    "setName",
    "load",
    "setIcon",
    "theme",
    "dark",
    "Images",
    "getIcon",
    "getName",
    "getAttribute",
    "source",
    "IconHandler",
    "getInstance",
    "getIconSource",
    "isOpen",
    "_applyEditable",
    "_updateShowEditButton",
    "updateDeletable",
    "setShowEditButton",
    "isTextContentAllowed",
    "startsWith",
    "keys",
    "getAllowedAttributes",
    "length",
    "isEditable",
    "setDeletable",
    "isTextContentRequired",
    "existing",
    "getChildren",
    "filter",
    "child",
    "requiredFromParent",
    "getRequiredElements",
    "includes",
    "bounds",
    "getBoundsForElementName",
    "min",
    "remove",
    "skipUndo",
    "changes",
    "index",
    "indexOf",
    "$$removed",
    "updateModified",
    "change",
    "ElementChange",
    "locale",
    "Manager",
    "tr",
    "getDisplayName",
    "addUndo",
    "isAncestor",
    "element",
    "_move",
    "target",
    "position",
    "targetParent",
    "targetChildren",
    "oldIndex",
    "oldParent",
    "isChildElementAllowed",
    "isChildAllowedAtPosition",
    "insertChild",
    "moveTo",
    "newParent",
    "getItem",
    "moveAfter",
    "moveBefore",
    "moveInside",
    "insertAfter",
    "newIndex",
    "insertBefore",
    "getAddableChildren",
    "excludeComment",
    "allowed",
    "getAllowedElements",
    "stillAllowed",
    "countExisting",
    "isLoaded",
    "forEach",
    "hasOwnProperty",
    "elementName",
    "isMixed",
    "textNodes",
    "otherNodes",
    "key",
    "childBounds",
    "max",
    "xmlElement",
    "debug",
    "areChildrenSortable",
    "allowedSorting",
    "getFirstLevelElementSorting",
    "currentPosition",
    "targetPosition",
    "previousSibling",
    "i",
    "Math",
    "findPositionForChild",
    "newChild",
    "targetIndex",
    "found",
    "some",
    "childPos",
    "internalOperation",
    "success",
    "appendChild",
    "unshift",
    "previousChild",
    "before",
    "$$added",
    "setOpen",
    "_validateTextContent",
    "isValueValid",
    "ValidationError",
    "recursive",
    "setValid",
    "isElement",
    "allowedAttributes",
    "errors",
    "attributes",
    "attr",
    "item",
    "attribute",
    "error",
    "isOptional",
    "hasAttribute",
    "nodeValue",
    "trim",
    "setInvalidMessage",
    "map",
    "err",
    "join",
    "_applyTextContent",
    "_updateDisplayName",
    "ELEMENT_NODE",
    "getTextContent",
    "setText",
    "text",
    "changed",
    "newValue",
    "oldValue",
    "setTextContent",
    "old",
    "setAttribute",
    "undefined",
    "getDefaultValue",
    "removeAttribute",
    "isRequired",
    "setAttributes",
    "parentChanges",
    "attrName",
    "parentChange",
    "_applySchemaElement",
    "converter",
    "_onOpen",
    "_applyModified",
    "nameAttr",
    "designAttr",
    "substring",
    "isModified",
    "setDisplayName",
    "hasChildNodes",
    "childNodes",
    "childNode",
    "force",
    "removeListener",
    "_syncChildNodes",
    "removeAll",
    "childSchemaElement",
    "getSchemaElementForElementName",
    "setSortable",
    "msg",
    "getInvalidMessage",
    "clear",
    "set",
    "e",
    "appendInvalidMessage",
    "toString",
    "setLoaded",
    "addListener",
    "_updateChildrenDeletableFlags",
    "errorMsg",
    "setModified",
    "initial",
    "currentChildNames",
    "_currentChildNames",
    "size",
    "hasChildrenModified",
    "onSaved",
    "names",
    "ev",
    "getWidgetPath",
    "widgets",
    "getSchema",
    "getWidgetNames",
    "current",
    "lang",
    "String",
    "firstUp",
    "ids",
    "c",
    "id",
    "cloneNode",
    "destruct",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * Represents an Element or TextNode in an XML document\n */\nqx.Class.define('cv.ui.manager.model.XmlElement', {\n  extend: qx.core.Object,\n  include: [\n    qx.data.marshal.MEventBubbling\n  ],\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function (node, schemaElement, editor, parent) {\n    this.base(arguments);\n    this._node = node;\n    const children = new qx.data.Array();\n    if (node) {\n      this._node.$$widget = this;\n      this.initName(node.nodeName);\n      this.setSchemaElement(schemaElement);\n      if (this.hasChildren()) {\n        // we have to add a fake node to the children to show the tree that this node has children\n        // it will be removed when the real children are loaded\n        children.push(new cv.ui.manager.model.XmlElement());\n      }\n      if (editor) {\n        this.setEditor(editor);\n      }\n      if (parent) {\n        this.setParent(parent);\n      }\n      this._maintainIcon();\n      this._maintainStatus();\n    } else {\n      // this is a fake node needed for children simulation\n      this.initName('#temp');\n    }\n    this.initChildren(children);\n    this._initialAttributes = new Map();\n    this.bind('editor.file.writeable', this, 'editable');\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    // the current editor this element os shown in\n    editor: {\n      check: 'cv.ui.manager.editor.Tree',\n      nullable: true,\n      event: 'changeEditor'\n    },\n    schemaElement: {\n      check: 'cv.ui.manager.model.schema.Element',\n      apply: '_applySchemaElement'\n    },\n    name: {\n      check: 'String',\n      deferredInit: true,\n      event: 'changeName',\n      apply: '_updateDisplayName'\n    },\n    displayName: {\n      check: 'String',\n      init: '',\n      event: 'changeDisplayName'\n    },\n    open : {\n      check : \"Boolean\",\n      event : \"changeOpen\",\n      init : false,\n      apply : \"_onOpen\",\n    },\n    loaded : {\n      check : \"Boolean\",\n      event : \"changeLoaded\",\n      init : false\n    },\n    children : {\n      check : \"qx.data.Array\",\n      event : \"changeChildren\",\n      apply: \"_applyEventPropagation\",\n      deferredInit : true\n    },\n\n    textContent: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyTextContent',\n      event: 'changeTextContent',\n      validate: '_validateTextContent'\n    },\n    /**\n     * Temporary nodes are not save in the backend yet\n     */\n    temporary: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeTemporary'\n    },\n\n    /**\n     * Validation result for this nodes content\n     */\n    valid: {\n      check: 'Boolean',\n      init: true,\n      event: 'changeValid',\n      apply: '_applyValid'\n    },\n\n    invalidMessage: {\n      check: 'String',\n      init: '',\n      event: 'changeInvalidMessage'\n    },\n\n    status: {\n      check: ['error', 'valid', 'comment'],\n      init: 'valid',\n      event: 'changeStatus'\n    },\n\n    editable: {\n      check: 'Boolean',\n      init: true,\n      event: 'changeEditable',\n      apply: '_applyEditable'\n    },\n\n    sortable: {\n      check: 'Boolean',\n      init: true,\n      event: 'changeSortable'\n    },\n\n    /**\n     * true if this element can be deleted (either no bounds.min or more existing elements)\n     */\n    deletable: {\n      check: 'Boolean',\n      init: true,\n      event: 'changeDeletable'\n    },\n\n    modified: {\n      check: 'Boolean',\n      init: false,\n      apply: '_applyModified'\n    },\n\n    showEditButton: {\n      check: 'Boolean',\n      init: true,\n      event: 'changeShowEditButton'\n    },\n    parent: {\n      check: 'cv.ui.manager.model.XmlElement',\n      nullable: true\n    },\n\n    // icon to show in the tree\n    icon: {\n      check: 'String',\n      nullable: true,\n      event: 'changeIcon'\n    },\n\n    dragging: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeDragging'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    _node: null,\n    _schema: null,\n    _schemaElement: null,\n    _initialAttributes: null,\n    _initialChildNames: null,\n    _initialTextContent: null,\n    __initializing: false,\n    __addableChildren: null,\n\n    clone: function () {\n      return new cv.ui.manager.model.XmlElement(this.getNode(), this.getSchemaElement(), this.getEditor(), this.getParent());\n    },\n\n    _maintainStatus: function () {\n      if (this._node.nodeType === Node.COMMENT_NODE) {\n        this.setStatus('comment');\n      } else if (!this.isValid()) {\n        this.setStatus('error');\n      } else {\n        this.setStatus('valid');\n      }\n    },\n\n    _applyValid: function (value) {\n      this._maintainStatus();\n      if (value) {\n        this.resetInvalidMessage();\n      }\n    },\n\n    convertTextNodeType: function (newType) {\n      if (this.isTextNode() && this._node.nodeType !== newType && (newType === Node.TEXT_NODE || newType === Node.CDATA_SECTION_NODE)) {\n        const content = this.getText();\n        const oldNode = this._node;\n        const newTextNode = newType === Node.CDATA_SECTION_NODE ? this._node.ownerDocument.createCDATASection(content) : this._node.ownerDocument.createTextNode(content);\n        if (oldNode.parentNode) {\n          oldNode.parentNode.replaceChild(newTextNode, oldNode);\n        }\n        this._node = newTextNode;\n        this.setName(this._node.nodeName);\n        this.load(true);\n      }\n    },\n\n    _maintainIcon: function () {\n      if (this._node) {\n        if (this._node.nodeType === Node.TEXT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE) {\n          this.setIcon(cv.theme.dark.Images.getIcon('text-fields', 18));\n          return;\n        } else if (this._node.nodeType === Node.COMMENT_NODE) {\n          this.setIcon(cv.theme.dark.Images.getIcon('comment-fields', 18));\n          return;\n        } else if (this.getName() === \"icon\" && this.getAttribute(\"name\")) {\n          const source = cv.IconHandler.getInstance().getIconSource(this.getAttribute(\"name\"), 'tree-icon');\n          this.setIcon(source);\n          return;\n        }\n      }\n      if (this.isOpen()) {\n        this.setIcon(cv.theme.dark.Images.getIcon('folder-open', 18));\n      } else {\n        this.setIcon(cv.theme.dark.Images.getIcon('folder', 18));\n      }\n    },\n\n    _applyEditable: function () {\n      this._updateShowEditButton();\n      this.updateDeletable();\n    },\n\n    _updateShowEditButton: function () {\n      this.setShowEditButton(this.getSchemaElement().isTextContentAllowed() && this.getName().startsWith('#') || Object.keys(this.getSchemaElement().getAllowedAttributes()).length > 0);\n    },\n\n    updateDeletable: function () {\n      if (!this.isEditable()) {\n        this.setDeletable(false);\n      } else {\n        const parent = this.getParent();\n        if (this.isTextNode()) {\n          if (this.getSchemaElement().isTextContentRequired()) {\n            const existing = parent.getChildren().filter(child => child.isTextNode()).length;\n            this.setDeletable(existing > 1);\n          } else {\n            this.setDeletable(true);\n          }\n        } else {\n          let deletable = false;\n          if (parent) {\n            const schemaElement = parent.getSchemaElement();\n            const requiredFromParent = schemaElement.getRequiredElements();\n            if (requiredFromParent.includes(this.getName())) {\n              const bounds = schemaElement.getBoundsForElementName(this.getName());\n              if (bounds) {\n                const existing = parent.getChildren().filter(child => child.getName() === this.getName()).length;\n                // check if we can afford to delete one\n                deletable = (bounds.min <= existing - 1);\n              } else {\n                deletable = true;\n              }\n            } else {\n              deletable = true;\n            }\n          } else {\n            deletable = true;\n          }\n          this.setDeletable(deletable);\n        }\n      }\n    },\n\n    getNode: function () {\n      return this._node;\n    },\n\n    remove: function (skipUndo) {\n      const parent = this.getParent();\n      if (parent) {\n        const changes = [{\n          index: parent.getChildren().indexOf(this),\n          parent: parent,\n          child: this\n        }];\n        this._node.remove();\n        parent.getChildren().remove(this);\n        const editor = this.getEditor();\n        this.$$removed = true;\n        if (editor) {\n          // editor should not consider the modification state of removed elements\n          editor.updateModified(this);\n        }\n        parent.updateModified();\n        if (!skipUndo) {\n          if (editor) {\n            const change = new cv.ui.manager.model.ElementChange(qx.locale.Manager.tr(\"Remove %1\", this.getDisplayName()), this, changes, 'deleted');\n            editor.addUndo(change);\n          }\n        }\n      }\n    },\n\n    /**\n     * Check is this element is an ancestor of the given element\n     * @param element {cv.ui.manager.model.XmlElement} element to check\n     * @returns {boolean}\n     */\n    isAncestor: function (element) {\n      let parent = element.getParent();\n      while (parent) {\n        if (parent === this) {\n          return true;\n        }\n        parent = parent.getParent();\n      }\n      return false;\n    },\n\n    /**\n     * Move this node to a new position in relation to the target\n     * @param target {cv.ui.manager.model.XmlElement} new direct sibling\n     * @param position {String} more 'before', 'after' or 'inside' target\n     * @param skipUndo {Boolean} no not add an undo operation for this\n     * @private\n     */\n    _move: function (target, position, skipUndo) {\n      if (this.isAncestor(target)) {\n        // we cannot move into ourselves descendants\n        return false;\n      }\n      if (target === this) {\n        // do not move ourselves before, after or inside ourselves\n        return false;\n      }\n      const parent = this.getParent();\n      const children = parent.getChildren();\n      const targetParent = position === 'inside' ? target : target.getParent();\n      const targetChildren = targetParent.getChildren();\n      const changes = [{\n        oldIndex: children.indexOf(this),\n        oldParent: parent,\n        parent: targetParent,\n        child: this,\n        index: targetChildren.indexOf(target) + (position === 'after' ? 1 : 0)\n      }];\n      if ((position === 'inside' && targetParent.getSchemaElement().isChildElementAllowed(this.getName())) || targetParent.isChildAllowedAtPosition(this, changes[0].index)) {\n        children.remove(this);\n        this.getNode().remove();\n        if (targetParent === parent) {\n          // target index might have changed by removing\n          changes[0].index = targetChildren.indexOf(target) + (position === 'after' ? 1 : 0);\n        }\n        targetParent.insertChild(this, changes[0].index, true, 'moved');\n        if (!skipUndo) {\n          const editor = this.getEditor();\n          if (editor) {\n            const change = new cv.ui.manager.model.ElementChange(qx.locale.Manager.tr(\"Move %1\", this.getDisplayName()), this, changes, 'moved');\n            editor.addUndo(change);\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n\n    moveTo: function (newParent, index, skipUndo) {\n      if (this.isAncestor(newParent)) {\n        // we cannot move into ourselves descendants\n        return false;\n      }\n      const parent = this.getParent();\n      const children = parent.getChildren();\n      const changes = [{\n        oldIndex: children.indexOf(this),\n        oldParent: parent,\n        parent: newParent,\n        child: this,\n        index: index\n      }];\n      // save old target index because we are moving inside the same parent, and the target index might change after removing\n      const target = newParent === parent && index < children.length ? children.getItem(index) : null;\n      if (newParent.isChildAllowedAtPosition(this, index)) {\n        children.remove(this);\n        this.getNode().remove();\n\n        if (target) {\n          index = children.indexOf(target);\n          changes[0].index = index;\n        }\n        newParent.insertChild(this, index, true, 'moved');\n        if (!skipUndo) {\n          const editor = this.getEditor();\n          if (editor) {\n            const change = new cv.ui.manager.model.ElementChange(qx.locale.Manager.tr(\"Move %1\", this.getDisplayName()), this, changes, 'moved');\n            editor.addUndo(change);\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n\n    moveAfter: function (target, skipUndo) {\n      return this._move(target, 'after', skipUndo);\n    },\n\n    moveBefore: function (target, skipUndo) {\n      return this._move(target, 'before', skipUndo);\n    },\n\n    moveInside: function (target, skipUndo) {\n      return this._move(target, 'inside', skipUndo);\n    },\n\n    insertAfter: function (target, skipUndo) {\n      const targetParent = target.getParent();\n      const newIndex = targetParent.getChildren().indexOf(target) + 1;\n      return targetParent.insertChild(this, newIndex, skipUndo, 'added');\n    },\n\n    insertBefore: function (target, skipUndo) {\n      const targetParent = target.getParent();\n      const newIndex = targetParent.getChildren().indexOf(target);\n      return targetParent.insertChild(this, newIndex, skipUndo, 'added');\n    },\n\n    /**\n     * Returns a list of element names that can be added to this element.\n     * Checks the allowed elements and their bounds and the existing children\n     * to find out if we can add more of them.\n     * @param excludeComment {Boolean} exclude #comment child when set to true\n     */\n    getAddableChildren: function(excludeComment) {\n      if (!this.__addableChildren) {\n        if (this.getName().startsWith('#')) {\n          this.__addableChildren = [];\n        } else {\n          const schemaElement = this.getSchemaElement();\n          const allowed = schemaElement.getAllowedElements();\n          const stillAllowed = [];\n          const countExisting = {};\n          if (!this.isLoaded()) {\n            this.load();\n          }\n          this.getChildren().forEach(child => {\n            if (!countExisting.hasOwnProperty(child.getName())) {\n              countExisting[child.getName()] = 0;\n            }\n            countExisting[child.getName()]++;\n          })\n\n          Object.keys(allowed).forEach(elementName => {\n            if (excludeComment === true && elementName === \"#comment\") {\n              return;\n            }\n            if ((elementName === \"#text\" || elementName === \"#cdata-section\")) {\n              if (schemaElement.isTextContentAllowed()) {\n                if (schemaElement.isMixed()) {\n                  // is a mixed content has only one text child and no other childs, we do not allow another text child -> avoid direct text siblings\n                  let textNodes = 0;\n                  let otherNodes = 0;\n                  Object.keys(countExisting).forEach(key => {\n                    if (key === '#text' || key === '#cdata-section') {\n                      textNodes+=countExisting[key];\n                    } else {\n                      otherNodes+=countExisting[key];\n                    }\n                  });\n                  if (textNodes<=otherNodes) {\n                    // we do not allow more text nodes than other nodes (e.g. a sequence of #text, elem would allow another #text node after elem)\n                    stillAllowed.push(elementName);\n                  }\n                } else if (!countExisting.hasOwnProperty('#text') && !countExisting.hasOwnProperty('#cdata-section')) {\n                  stillAllowed.push(elementName);\n                }\n              }\n              return;\n            }\n            const childBounds = schemaElement.getBoundsForElementName(elementName);\n            const existing = countExisting.hasOwnProperty(elementName) ? countExisting[elementName] : 0;\n            if (childBounds && childBounds.max > existing) {\n              stillAllowed.push(elementName);\n            }\n          });\n          this.__addableChildren = stillAllowed;\n        }\n      }\n      return this.__addableChildren;\n    },\n\n    /**\n     * Checks if a new child is allowed at the given position\n     * @param xmlElement {cv.ui.manager.model.XmlElement|String} the element or an element name as string\n     * @param index {Number} position to check, use Number.POSITIVE_INFINITY to check if the child is allowed to be appended\n     * @returns {boolean}\n     */\n    isChildAllowedAtPosition: function (xmlElement, index) {\n      const schemaElement = this.getSchemaElement();\n      const nodeName = xmlElement instanceof cv.ui.manager.model.XmlElement ? xmlElement.getName() : xmlElement;\n      if (!schemaElement.isChildElementAllowed(nodeName)) {\n        this.debug(nodeName, \"is not allowed as child of\", this.getName());\n        return false;\n      }\n      if (schemaElement.areChildrenSortable()) {\n        // allowed at any position\n        return true;\n      }\n      // check position\n      const allowedSorting = schemaElement.getFirstLevelElementSorting();\n      if (!this.isLoaded()) {\n        this.load();\n      }\n      const children = this.getChildren();\n      if (children.length === 0) {\n        // no children yet, no position problem\n        return true;\n      }\n      let currentPosition = index;\n      if (children.length > index) {\n        currentPosition = allowedSorting[children.getItem(index).getName()];\n      } else {\n        currentPosition = children.length;\n      }\n      let targetPosition = allowedSorting[nodeName];\n      if (currentPosition === targetPosition || targetPosition >= children.length) {\n        // no special position\n        return true\n      } else {\n        // find the first previous sibling of a different type\n        let previousSibling\n        if (index > 0) {\n          for (let i = Math.min(index, children.length) - 1; i >= 0; i--) {\n            if (children.getItem(i).getName() !== nodeName) {\n              previousSibling = children.getItem(i).getName();\n              break;\n            }\n          }\n        }\n        if (previousSibling) {\n          currentPosition = allowedSorting[previousSibling];\n        }\n        // only allow if it can be inserted before\n        const allowed = currentPosition + 1 >= targetPosition;\n        if (!allowed) {\n          this.debug(nodeName, \"is not allowed as child of\", this.getName());\n          return false;\n        }\n      }\n      return true;\n    },\n\n    findPositionForChild: function(newChild) {\n      const schemaElement = this.getSchemaElement();\n      if (schemaElement.isChildElementAllowed(newChild.getName())) {\n        if (!this.isLoaded()) {\n          this.load();\n        }\n        if (schemaElement.areChildrenSortable()) {\n          // any position is fine, just append it to the end\n          return this.getChildren().length;\n        } else {\n          const allowedSorting = schemaElement.getFirstLevelElementSorting();\n          if (allowedSorting && allowedSorting.hasOwnProperty(newChild.getName())) {\n            const position = allowedSorting[newChild.getName()];\n            // search for the first sibling with a position > than the newChilds and insert it there\n            let targetIndex = position;\n            const found = this.getChildren().some((child, index) => {\n              const childPos = allowedSorting[child.getName()];\n              if (childPos > position) {\n                targetIndex = index;\n                return true;\n              }\n            });\n            if (!found) {\n              // append to the end\n              targetIndex = this.getChildren().length;\n            }\n            return targetIndex;\n          }\n        }\n      }\n      return -1;\n    },\n\n    /**\n     * insert child at given index\n     * @param xmlElement {cv.ui.manager.model.XmlElement} new child\n     * @param index {Number} index to insert the child, if set to -1 insert it at any allowed position\n     * @param skipUndo {Boolean} do not add an undo operation for this change\n     * @return {Boolean} true if the child has been added\n     */\n    insertChild: function (xmlElement, index, skipUndo, internalOperation) {\n      if (!this.isLoaded()) {\n        this.load();\n      }\n      const children = this.getChildren();\n      let success = false;\n      if (index === -1) {\n        index = this.findPositionForChild(xmlElement);\n        if (index === -1) {\n          // no valid position found\n          return false\n        }\n      }\n      if (this.isChildAllowedAtPosition(xmlElement, index)) {\n        if (index >= children.length) {\n          // append\n          this._node.appendChild(xmlElement.getNode());\n          children.push(xmlElement);\n          success = true;\n        } else if (index === 0) {\n          // add before first child\n          this._node.insertBefore(xmlElement.getNode(), this._node.children[0]);\n          children.unshift(xmlElement);\n          success = true;\n        } else {\n          const previousChild = children.getItem(index);\n          if (previousChild) {\n            previousChild.getNode().before(xmlElement.getNode());\n            children.insertBefore(previousChild, xmlElement);\n            success = true;\n          }\n        }\n      }\n      if (success) {\n        const editor = this.getEditor();\n        xmlElement.setParent(this);\n        if (xmlElement.$$removed) {\n          delete xmlElement.$$removed;\n          if (editor) {\n            editor.updateModified(xmlElement);\n          }\n          xmlElement.updateModified();\n        } else {\n          if (!internalOperation || internalOperation === 'added') {\n            xmlElement.$$added = true;\n            xmlElement.updateModified();\n          }\n        }\n        this.updateModified();\n        if (children.length === 1) {\n          // first child added -> open it\n          this.setOpen(true);\n        }\n        if (!skipUndo) {\n\n          if (editor) {\n            const changes = [{\n              index: index,\n              parent: this,\n              child: xmlElement\n            }];\n            const change = new cv.ui.manager.model.ElementChange(qx.locale.Manager.tr(\"Add %1\", this.getDisplayName()), this, changes, 'created');\n            editor.addUndo(change);\n          }\n        }\n      }\n      return success;\n    },\n\n    _validateTextContent: function (value) {\n      // do not validate content that is loaded from the actual node\n      if (!this.__initializing) {\n        if (this._node) {\n          if (!this.getSchemaElement().isValueValid(value)) {\n            throw new qx.core.ValidationError(qx.locale.Manager.tr(\"Invalid text content: '%1'\", value));\n          }\n        } else {\n          throw new qx.core.ValidationError(qx.locale.Manager.tr(\"Text content not allowed here\"));\n        }\n      }\n    },\n\n    /**\n     * Validate this element (and its parent when this is a text node)\n     * @param recursive {Boolean} validate children too\n     */\n    validate: function (recursive) {\n      const schemaElement = this.getSchemaElement();\n      if (this.isTextNode()) {\n        this.getParent().validate(false);\n        this.setValid(schemaElement.isValueValid(this.getText()));\n      } else if (this.isElement()) {\n        const allowedAttributes = schemaElement.getAllowedAttributes();\n        const errors = [];\n        // check attribute values\n        for (let i = 0; i < this._node.attributes.length; i++) {\n          const attr = this._node.attributes.item(i);\n          if (allowedAttributes.hasOwnProperty(attr.name)) {\n            if (!allowedAttributes[attr.name].isValueValid(attr.value)) {\n              errors.push({\n                attribute: attr.name,\n                error: qx.locale.Manager.tr(\"Invalid value\")\n              });\n            }\n          } else {\n            errors.push({\n              attribute: attr.name,\n              error: qx.locale.Manager.tr(\"Attribute '%1' not allowed\", attr.name)\n            });\n          }\n        }\n        // check for missing required attributes\n        Object.keys(allowedAttributes).filter(name => !allowedAttributes[name].isOptional()).forEach(name => {\n          if (!this._node.hasAttribute(name)) {\n            errors.push({\n              attribute: name,\n              error: qx.locale.Manager.tr(\"Attribute '%1' is required but missing\", name)\n            });\n          }\n        })\n        if (schemaElement.isTextContentRequired()) {\n          // check if we have at least one non empty #text child\n          const found = this.getChildren().some(child => {\n            return child.isTextNode() && child.getNode().nodeValue.trim() !== \"\";\n          });\n          if (!found) {\n            errors.push({\n              attribute: '#text',\n              error: qx.locale.Manager.tr(\"Text content is missing\")\n            });\n          }\n        }\n        if (schemaElement.isTextContentAllowed()) {\n          this.getChildren().forEach(child => {\n            if (child.isTextNode()) {\n              child.load();\n              child.setValid(schemaElement.isValueValid(child.getText()));\n              if (!child.isValid()) {\n                child.setInvalidMessage(qx.locale.Manager.tr(\"Text content is invalid\"));\n              }\n            }\n          });\n        }\n        this.setInvalidMessage(errors.map(err => err.error).join(\"<br/>\"));\n        this.setValid(errors.length === 0);\n      }\n    },\n\n    isTextNode: function () {\n      return this.getName() === '#text' || this.getName() === '#cdata-section';\n    },\n\n    _applyTextContent: function (value) {\n      if (!this.__initializing) {\n        if (this._node) {\n          if (this._node.nodeType === Node.TEXT_NODE || this._node.nodeType === Node.COMMENT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE) {\n            this._node.nodeValue = value;\n            this._updateDisplayName();\n          } else if (this._node.nodeType === Node.ELEMENT_NODE) {\n            this._node.textContent = value;\n          }\n        }\n      }\n    },\n\n    getText: function () {\n      return this.getTextContent();\n    },\n\n    setText: function (text, nodeName) {\n      let changed = false;\n      let newValue = text;\n      let oldValue = '';\n      if (this.getSchemaElement().isTextContentAllowed()) {\n        oldValue = this.getTextContent();\n        if (this.getSchemaElement().isValueValid(text)) {\n          if (oldValue !== text) {\n            this.setTextContent(text);\n            changed = true;\n          }\n        } else {\n          this.error(\"'\"+text+\"' is no valid text content for a '\"+this.getName() + \"' element\");\n        }\n      } else {\n        this.error(\"text content is not allowed for a '\"+this.getName() + \"' element\");\n      }\n      return {\n        changed: changed,\n        attribute: nodeName || '#text',\n        value: newValue,\n        old: oldValue\n      }\n    },\n\n    getAttribute: function (name) {\n      return this._node.getAttribute(name);\n    },\n\n    setAttribute: function (name, value) {\n      if (this._node.nodeType === Node.ELEMENT_NODE) {\n        const attribute = this.getSchemaElement().getAllowedAttributes()[name];\n        let changed = false;\n        let newValue = value;\n        let oldValue = this._node.hasAttribute(name) ? this._node.getAttribute(name) : '';\n        if (attribute) {\n          if (value === null || value === undefined) {\n            value = '';\n          } else {\n            value = '' + value;\n          }\n          newValue = value;\n          if (attribute.isValueValid(value)) {\n            if (oldValue !== value) {\n              if (!value || value === attribute.getDefaultValue()) {\n                this._node.removeAttribute(name);\n                newValue = '';\n              } else {\n                this._node.setAttribute(name, value);\n              }\n              if (name === \"name\") {\n                this._updateDisplayName();\n                if (this.getName() === \"icon\") {\n                  this._maintainIcon();\n                }\n              }\n              changed = true;\n            }\n          } else {\n            this.error(\"'\" + value + \"' is not allowed for attribute '\" + name + \"'\");\n          }\n        } else {\n          this.error(\"'\" + name + \"' is no allowed attribute for a '\" + this.getName() + \"' element\");\n        }\n        return {\n          changed: changed,\n          attribute: name,\n          value: newValue,\n          old: oldValue\n        }\n      } else if (this._node.nodeType === Node.TEXT_NODE && name === '#text' || (this._node.nodeType === Node.CDATA_SECTION_NODE && name === '#cdata-section')) {\n        return this.setText(value, name);\n      } else if ((this._node.nodeType === Node.COMMENT_NODE && name === '#comment')) {\n        const oldValue = this.getTextContent();\n        const changed = value !== oldValue;\n        this.setTextContent(value);\n        return {\n          changed: changed,\n          attribute: name,\n          value: value,\n          old: oldValue\n        }\n      }\n    },\n\n    /**\n     * @return {Boolean} true if this element is a required child from its parent\n     */\n    isRequired: function () {\n      const parent = this.getParent();\n      if (parent) {\n        const requiredFromParent = parent.getSchemaElement().getRequiredElements();\n        return requiredFromParent.includes(this.getName());\n      }\n      // only root element has nor parent, and a root element is always required\n      return true;\n    },\n\n    setAttributes: function (data) {\n      const changes = [];\n      let change;\n      const parentChanges = [];\n      const isTextNode = (this.getName() === '#text' || this.getName() === '#cdata-section');\n      const parent = this.getParent();\n      Object.keys(data).forEach(attrName => {\n        if (isTextNode && !attrName.startsWith('#')) {\n          // special mode for editing text content from a data provider with hints, those hints must be applied to the parent\n          change = parent.setAttribute(attrName, data[attrName])\n          if (change.changed) {\n            parentChanges.push(change);\n          }\n        } else {\n          change = this.setAttribute(attrName, data[attrName]);\n          if (change.changed) {\n            changes.push(change);\n          }\n        }\n      });\n      const editor = this.getEditor();\n      if (editor && changes.length > 0) {\n        if (parentChanges.length > 0) {\n          const parentChange = new cv.ui.manager.model.ElementChange(qx.locale.Manager.tr(\"Change %1\", parent.getDisplayName()), parent, parentChanges);\n          changes.push(parentChange);\n          parent.updateModified();\n        }\n        editor.addUndo(new cv.ui.manager.model.ElementChange(qx.locale.Manager.tr(\"Change %1\", this.getDisplayName()), this, changes));\n      }\n      this.updateModified();\n    },\n\n    _applySchemaElement: function (schemaElement) {\n      schemaElement.bind('sortable', this, 'sortable', {\n        converter: function (value) {\n          return this.isEditable() && value;\n        }.bind(this)\n      });\n      this._updateShowEditButton();\n    },\n\n    _onOpen: function (value) {\n      if (value && !this.isLoaded()) {\n        this.load();\n      }\n      this._maintainIcon();\n    },\n\n    _applyModified: function () {\n      this._updateDisplayName();\n    },\n\n    _updateDisplayName: function () {\n      let displayName = this.getName();\n      if (this._node) {\n        if (this._node.nodeType === Node.ELEMENT_NODE) {\n          if (this._node.hasAttribute('name')) {\n            const nameAttr = this._node.getAttribute('name');\n            displayName += ' \"' + nameAttr + '\"';\n          } else if (this.getName() === \"pages\" && this._node.hasAttribute('design')) {\n            const designAttr = this._node.getAttribute('design');\n            displayName += ' \"' + designAttr + '\"';\n          }\n        } else if ((this._node.nodeType === Node.TEXT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE || this._node.nodeType === Node.COMMENT_NODE) && this._node.nodeValue.trim()) {\n          let textContent = this._node.nodeValue.trim();\n          if (textContent.length > 26) {\n            textContent = textContent.substring(0, 26) + \"...\";\n          }\n          displayName = textContent;\n        }\n      }\n      if (this.isModified()) {\n        displayName += \" *\";\n      }\n      this.setDisplayName(displayName);\n    },\n    hasChildren: function() {\n      if (this._node.nodeType === Node.ELEMENT_NODE) {\n        if (this._node && this._node.hasChildNodes()) {\n          for (let i = 0; i < this._node.childNodes.length; i++) {\n            const childNode = this._node.childNodes.item(i);\n            if (childNode.nodeType === Node.ELEMENT_NODE\n              || ((childNode.nodeType === Node.TEXT_NODE || childNode.nodeType === Node.CDATA_SECTION_NODE) && childNode.nodeValue.trim() !== \"\")) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n\n    load: function (force) {\n      if (!this.isLoaded() || force) {\n        this.__initializing = true;\n        const children = this.getChildren();\n        children.removeListener('change', this._syncChildNodes, this);\n        children.removeAll();\n        if (this._node) {\n          if (this._node.nodeType === Node.ELEMENT_NODE) {\n            // read children\n            const schemaElement = this.getSchemaElement();\n            this._initialChildNames = [];\n            for (let i = 0; i < this._node.childNodes.length; i++) {\n              const childNode = this._node.childNodes.item(i);\n              const childSchemaElement = schemaElement.getSchemaElementForElementName(childNode.nodeName);\n              if (childSchemaElement) {\n                if (childNode.nodeType === Node.ELEMENT_NODE) {\n                  const child = new cv.ui.manager.model.XmlElement(childNode, childSchemaElement, this.getEditor(), this);\n                  children.push(child);\n                  this._initialChildNames.push(childNode.nodeName);\n                } else if (childNode.nodeType === Node.TEXT_NODE || childNode.nodeType === Node.CDATA_SECTION_NODE) {\n                  if (childNode.nodeValue.trim()) {\n                    // do not use childSchemaElement here, because our schemeElement already knows how to validate text\n                    const child = new cv.ui.manager.model.XmlElement(childNode, schemaElement, this.getEditor(), this);\n                    if (schemaElement.isMixed()) {\n                      // text nodes can be re-ordered in mixed content\n                      child.setSortable(true);\n                    }\n                    children.push(child);\n                    if (childNode.nodeValue.trim()) {\n                      this._initialChildNames.push(childNode.nodeName);\n                    }\n                  }\n                } else if (childNode.nodeType === Node.COMMENT_NODE) {\n                  if (childNode.nodeValue) {\n                    const child = new cv.ui.manager.model.XmlElement(childNode, childSchemaElement, this.getEditor(), this);\n                    // comment nodes are allowed everywhere. but we do not allow them to be moved via drag&drop now\n                    // because comments might contains template conditions, which will get invalid when moved and we cannot validate that\n                    child.setSortable(false);\n                    children.push(child);\n                    if (childNode.nodeValue.trim()) {\n                      this._initialChildNames.push(childNode.nodeName);\n                    }\n                  }\n                }\n              } else if (childNode.nodeType === Node.ELEMENT_NODE) {\n                // only complain for real childs (no comments, textNodes)\n                this.setValid(false);\n                let msg = this.getInvalidMessage();\n                msg = (msg ? msg + \"<br/>\" : \"\") + qx.locale.Manager.tr(\"Child element '%1' not allowed.\", childNode.nodeName);\n                this.setInvalidMessage(msg);\n                this.setValid(false);\n              }\n            }\n\n            // read attributes\n            this._initialAttributes.clear();\n            for (let i = 0; i < this._node.attributes.length; i++) {\n              const attr = this._node.attributes.item(i);\n              this._initialAttributes.set(attr.name, attr.value);\n            }\n          } else if (this._node.nodeType === Node.TEXT_NODE || this._node.nodeType === Node.COMMENT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE) {\n            this._initialTextContent = this._node.nodeValue;\n            try {\n              this.setTextContent(this._node.nodeValue);\n            } catch (e) {\n              this.appendInvalidMessage(e.toString());\n            }\n          }\n        }\n        this.setLoaded(true);\n        children.addListener('change', this._syncChildNodes, this);\n        this._updateChildrenDeletableFlags();\n        this.__initializing = false;\n      }\n    },\n\n    appendInvalidMessage: function (errorMsg) {\n      if (errorMsg) {\n        const existing = this.getInvalidMessage();\n        this.setInvalidMessage(existing ? existing + \"<br/>\" + errorMsg : errorMsg);\n      }\n    },\n\n    updateModified: function () {\n      if (this.$$added) {\n        this.setModified(true);\n      } else if (this._node.nodeType === Node.ELEMENT_NODE) {\n        const initial = this._initialAttributes;\n        const currentChildNames = this._currentChildNames();\n        if (this._node.attributes.length !== initial.size) {\n          this.setModified(true);\n        } else if (currentChildNames.length !== this._initialChildNames.length || currentChildNames.join(\"\") !== this._initialChildNames.join(\"\")) {\n          this.setModified(true);\n        } else {\n          for (const [key, value] of initial) {\n            if (!this._node.hasAttribute(key) || this._node.getAttribute(key) !== value) {\n              this.setModified(true);\n              return\n            }\n          }\n          this.setModified(false);\n        }\n      } else if (this._node.nodeType === Node.TEXT_NODE || this._node.nodeType === Node.COMMENT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE) {\n        this.setModified(this._initialTextContent !== this.getTextContent());\n      }\n      const editor = this.getEditor();\n      if (editor) {\n        editor.updateModified(this);\n      }\n    },\n\n    /**\n     * Special check if this element has modified children (position, of length)\n     * This is used to determine if the preview highlighting needs to be disabled because the xml structure has changed\n     * @returns {*|boolean}\n     */\n    hasChildrenModified: function () {\n      if (this._node.nodeType === Node.ELEMENT_NODE && this.isLoaded()) {\n        const currentChildNames = this._currentChildNames();\n        return this.isModified() && (currentChildNames.length !== this._initialChildNames.length || currentChildNames.join(\"\") !== this._initialChildNames.join(\"\"));\n      }\n      return false;\n    },\n\n    onSaved: function () {\n      if (this._node.nodeType === Node.ELEMENT_NODE) {\n        // read attributes\n        this._initialAttributes.clear();\n        for (let i = 0; i < this._node.attributes.length; i++) {\n          const attr = this._node.attributes.item(i);\n          this._initialAttributes.set(attr.name, attr.value);\n        }\n        this._initialChildNames = this._currentChildNames();\n      } else if (this._node.nodeType === Node.TEXT_NODE || this._node.nodeType === Node.COMMENT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE) {\n        this._initialTextContent = this._node.nodeValue;\n      }\n      if (this.$$added) {\n        delete this.$$added;\n      }\n      this.setModified(false);\n    },\n\n    isElement: function () {\n      return this._node.nodeType === Node.ELEMENT_NODE;\n    },\n\n    _currentChildNames: function () {\n      const names = [];\n      for (let i = 0; i < this._node.childNodes.length; i++) {\n        const childNode = this._node.childNodes.item(i);\n        if (childNode.nodeType === Node.ELEMENT_NODE) {\n          names.push(childNode.nodeName);\n        } else if ((childNode.nodeType === Node.TEXT_NODE || childNode.nodeType === Node.COMMENT_NODE || this._node.nodeType === Node.CDATA_SECTION_NODE) && childNode.nodeValue.trim()) {\n          names.push(childNode.nodeName);\n        }\n      }\n      return names;\n    },\n\n    _syncChildNodes: function (ev) {\n      // children have changed clear cache\n      this.__addableChildren = null;\n      // we have to update all deletable flags for this elements children, when their siblings changed\n      this._updateChildrenDeletableFlags();\n    },\n\n    _updateChildrenDeletableFlags: function () {\n      if (this.isEditable()) {\n        this.getChildren().forEach(child => {\n          if (child.isElement() || child.isTextNode()) {\n            child.updateDeletable();\n          }\n        });\n      }\n    },\n\n    getWidgetPath: function () {\n      if (this.getName() === '#comment') {\n        return '';\n      }\n      const widgets = this.getSchemaElement().getSchema().getWidgetNames();\n      let current = this;\n      while (current && !widgets.includes(current.getName())) {\n        current = current.getParent();\n      }\n      if (!current) {\n        return '';\n      }\n      if (current.getName() === 'navbar') {\n        return 'navbar' + qx.lang.String.firstUp(current.getAttribute('position'));\n      }\n\n      const ids = [];\n      let c = current;\n      while (c) {\n        const parent = c.getParent();\n        if (parent.getName() === \"pages\") {\n          ids.unshift('id');\n          break;\n        }\n        let id = parent.getChildren().filter(child => child.getNode().nodeType === Node.ELEMENT_NODE && child.getName() !== 'layout').indexOf(c);\n        ids.unshift(id);\n        c = parent;\n      }\n      if (current.getName() === \"page\") {\n        // make sure that the join ends with '_'\n        ids.push('');\n      }\n      return ids.join('_');\n    },\n\n    // overridden\n    clone: function() {\n      return new cv.ui.manager.model.XmlElement(this._node.cloneNode(true), this.getSchemaElement(), this.getEditor());\n    }\n  },\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct: function () {\n    this._node = null;\n    this._schema = null;\n    this._initialAttributes = null;\n    this.__addableChildren = null;\n    this._disposeObjects('_schemaElement');\n  }\n});\n"
  ]
}