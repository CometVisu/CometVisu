{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/control/ActionDispatcher.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "event",
    "message",
    "Bus",
    "subscribe",
    "_onAction",
    "properties",
    "focusedWidget",
    "check",
    "nullable",
    "apply",
    "main",
    "members",
    "updateBarButtons",
    "menuBar",
    "cv",
    "ui",
    "manager",
    "MenuBar",
    "getInstance",
    "config",
    "getButtonConfiguration",
    "button",
    "keys",
    "forEach",
    "actionId",
    "getButton",
    "setEnabled",
    "general",
    "hasHandler",
    "actionName",
    "_getHandler",
    "handler",
    "getFocusedWidget",
    "getMain",
    "canHandleAction",
    "ev",
    "topic",
    "getName",
    "split",
    "pop",
    "handleAction",
    "getData",
    "warn",
    "destruct",
    "control",
    "ActionDispatcher"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * The ActionDispatcher listens to the events in the 'cv.manager.action' topic and\n * dispatched those events to the currently relevant handler (e.g. the save event to the opened editor).\n */\nqx.Class.define('cv.ui.manager.control.ActionDispatcher', {\n  extend: qx.core.Object,\n  type: 'singleton',\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function () {\n    this.base(arguments);\n    qx.event.message.Bus.subscribe('cv.manager.action.*', this._onAction, this);\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    focusedWidget: {\n      check: 'cv.ui.manager.IActionHandler',\n      nullable: true,\n      apply: 'updateBarButtons'\n    },\n\n    main: {\n      check: 'cv.ui.manager.Main',\n      nullable: true\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    updateBarButtons: function () {\n      var menuBar = cv.ui.manager.MenuBar.getInstance();\n      var config = menuBar.getButtonConfiguration();\n      var button;\n      Object.keys(config).forEach(function (actionId) {\n        button = menuBar.getButton(actionId);\n        if (button) {\n          button.setEnabled(config[actionId].general || this.hasHandler(actionId));\n        }\n      }, this);\n    },\n\n    /**\n     * Check if there is an existing handler for the given actionName.\n     * @return {Boolean}\n     */\n    hasHandler: function (actionName) {\n      return !!this._getHandler(actionName);\n    },\n\n    _getHandler: function (actionName) {\n      var handler = this.getFocusedWidget();\n      var main = this.getMain();\n      if (handler && handler.canHandleAction(actionName)) {\n        return handler;\n      } else if (main && main.canHandleAction(actionName)) {\n        return main;\n      }\n    },\n\n    _onAction: function (ev) {\n      var topic = ev.getName();\n      var actionName = topic.split('.').pop();\n      var handler = this._getHandler(actionName);\n      if (handler) {\n        handler.handleAction(actionName, ev.getData());\n      } else {\n        this.warn('no action handler found for action: ' + actionName);\n      }\n    }\n  },\n\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct: function () {\n    qx.event.message.Bus.subscribe('cv.manager.action.*', this._onAction, this);\n  }\n});\n"
  ]
}