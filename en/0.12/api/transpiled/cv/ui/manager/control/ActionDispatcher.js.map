{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/control/ActionDispatcher.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "event",
    "message",
    "Bus",
    "subscribe",
    "_onAction",
    "properties",
    "focusedWidget",
    "check",
    "nullable",
    "apply",
    "main",
    "members",
    "updateBarButtons",
    "actionHandler",
    "getFocusedWidget",
    "menuBar",
    "cv",
    "ui",
    "manager",
    "MenuBar",
    "getInstance",
    "config",
    "getButtonConfiguration",
    "button",
    "keys",
    "forEach",
    "actionId",
    "getButton",
    "setEnabled",
    "general",
    "hasHandler",
    "configureButton",
    "_applyFocusedWidget",
    "value",
    "old",
    "unConfigureButton",
    "actionName",
    "_getHandler",
    "handler",
    "getMain",
    "canHandleAction",
    "ev",
    "topic",
    "getName",
    "split",
    "pop",
    "handleAction",
    "getData",
    "warn",
    "destruct",
    "control",
    "ActionDispatcher"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ActionDispatcher.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * The ActionDispatcher listens to the events in the 'cv.manager.action' topic and\n * dispatched those events to the currently relevant handler (e.g. the save event to the opened editor).\n */\nqx.Class.define('cv.ui.manager.control.ActionDispatcher', {\n  extend: qx.core.Object,\n  type: 'singleton',\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function () {\n    this.base(arguments);\n    qx.event.message.Bus.subscribe('cv.manager.action.*', this._onAction, this);\n  },\n\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    focusedWidget: {\n      check: 'cv.ui.manager.IActionHandler',\n      nullable: true,\n      apply: '_applyFocusedWidget'\n    },\n\n    main: {\n      check: 'cv.ui.manager.Main',\n      nullable: true\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    updateBarButtons: function () {\n      const actionHandler = this.getFocusedWidget();\n      const menuBar = cv.ui.manager.MenuBar.getInstance();\n      const config = menuBar.getButtonConfiguration();\n      let button;\n      Object.keys(config).forEach(function (actionId) {\n        button = menuBar.getButton(actionId);\n        if (button) {\n          button.setEnabled(config[actionId].general || this.hasHandler(actionId));\n          if (actionHandler) {\n            actionHandler.configureButton(actionId, button);\n          }\n        }\n      }, this);\n    },\n\n    _applyFocusedWidget: function (value, old) {\n      if (old) {\n        const menuBar = cv.ui.manager.MenuBar.getInstance();\n        const config = menuBar.getButtonConfiguration();\n        let button;\n        Object.keys(config).forEach(function (actionId) {\n          button = menuBar.getButton(actionId);\n          if (button) {\n            old.unConfigureButton(actionId, button);\n          }\n        }, this);\n      }\n      this.updateBarButtons();\n    },\n\n    /**\n     * Check if there is an existing handler for the given actionName.\n     * @param actionName\n     * @return {Boolean}\n     */\n    hasHandler: function (actionName) {\n      return !!this._getHandler(actionName);\n    },\n\n    _getHandler: function (actionName) {\n      const handler = this.getFocusedWidget();\n      const main = this.getMain();\n      if (handler && handler.canHandleAction(actionName)) {\n        return handler;\n      } else if (main && main.canHandleAction(actionName)) {\n        return main;\n      }\n      return null;\n    },\n\n    _onAction: function (ev) {\n      const topic = ev.getName();\n      const actionName = topic.split('.').pop();\n      const handler = this._getHandler(actionName);\n      if (handler) {\n        handler.handleAction(actionName, ev.getData());\n      } else {\n        this.warn('no action handler found for action: ' + actionName);\n      }\n    }\n  },\n\n  /*\n  ***********************************************\n    DESTRUCTOR\n  ***********************************************\n  */\n  destruct: function () {\n    qx.event.message.Bus.subscribe('cv.manager.action.*', this._onAction, this);\n  }\n});\n"
  ]
}