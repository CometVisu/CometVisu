{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/source/class/cv/ui/structure/pure/Audio.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cv",
    "ui",
    "structure",
    "AbstractWidget",
    "include",
    "common",
    "Update",
    "properties",
    "src",
    "check",
    "nullable",
    "id",
    "width",
    "height",
    "autoplay",
    "init",
    "loop",
    "thresholdValue",
    "members",
    "_getInnerDomString",
    "style",
    "getWidth",
    "getHeight",
    "isAutoplay",
    "isLoop",
    "getId",
    "getSrc",
    "getActor",
    "getDomElement",
    "querySelector",
    "_update",
    "address",
    "value",
    "on",
    "applyMapping",
    "getThresholdValue",
    "audioWidget",
    "paused",
    "play",
    "defer",
    "statics",
    "WidgetFactory",
    "registerClass",
    "pure",
    "Audio"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Audio.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * The audio widget embeds an audio file, which can be automatically played by incoming data\n *\n * @widgetexample <settings>\n *   <screenshot name=\"audio_example\">\n *    <caption>Default example for defining an audio widget in the configuration</caption>\n *    <data address=\"0/0/0\">1</data>\n *   </screenshot>\n * </settings>\n * <audio id=\"audio_widget\" src=\"path/to/audio_file.mp3\">\n *   <layout colspan=\"4\" />\n *   <label>Audio</label>\n *   <address transform=\"DPT:1.001\" mode=\"read\">0/0/0</address>\n * </audio>\n *\n *\n * @author Markus Damman\n * @since 0.8.4 (2014)\n */\n  qx.Class.define('cv.ui.structure.pure.Audio', {\n    extend: cv.ui.structure.AbstractWidget,\n\n    include: cv.ui.common.Update,\n\n    /*\n    ******************************************************\n      PROPERTIES\n    ******************************************************\n    */\n    properties: {\n      src: { check: \"String\", nullable: true },\n      id: { check: \"String\", nullable: true },\n      width: { check: \"String\", nullable: true },\n      height: { check: \"String\", nullable: true },\n      autoplay: { check: \"Boolean\", init: false },\n      loop: { check: \"Boolean\", init: false },\n      thresholdValue: { check: \"Number\", init: 1 }\n    },\n\n    /*\n    ******************************************************\n      MEMBERS\n    ******************************************************\n    */\n    members: {\n\n      // overridden\n      _getInnerDomString: function () {\n        // create the main structure\n        // create the actor\n        var style = '';\n        if (this.getWidth()) { style += 'width:' + this.getWidth() + ';'; }\n        if (this.getHeight()) { style += 'height:' + this.getHeight() + ';'; }\n        if (style !== '') { style = 'style=\"' + style + '\"'; }\n        var autoplay = (this.isAutoplay()) ? ' autoplay ' : '';\n        var loop = (this.isLoop()) ? ' loop ' : '';\n        return '<div class=\"actor\"><audio id=\"' + this.getId() + '\" ' + autoplay + loop + style + ' controls> <source src=\"' + this.getSrc()+ '\" > </audio> </div>';\n      },\n\n      // overridden\n      getActor: function() {\n        return this.getDomElement().querySelector(\".actor audio\");\n      },\n\n      /**\n       * Handles updates of incoming data for this widget\n       *\n       * @param address {String} Source address of the incoming data\n       * @param value {String} Incoming data\n       */\n      _update: function (address, value) {\n        var on = this.applyMapping(this.getThresholdValue());\n        if (value >= on) {\n          var audioWidget = this.getActor();\n          if (audioWidget.paused === true) {\n            audioWidget.play();\n          }\n        }\n      }\n    },\n\n    defer: function(statics) {\n      cv.ui.structure.WidgetFactory.registerClass(\"audio\", statics);\n    }\n  });\n"
  ]
}