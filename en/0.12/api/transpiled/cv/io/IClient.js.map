{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/client/source/class/cv/io/IClient.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "properties",
    "connected",
    "check",
    "init",
    "event",
    "server",
    "nullable",
    "members",
    "getBackend",
    "hasProvider",
    "name",
    "getProviderUrl",
    "getProviderConvertFunction",
    "setInitialAddresses",
    "addresses",
    "subscribe",
    "filters",
    "login",
    "loginOnly",
    "credentials",
    "callback",
    "context",
    "authorize",
    "req",
    "getResourcePath",
    "params",
    "hasCustomChartsDataProcessor",
    "processChartsData",
    "data",
    "write",
    "address",
    "value",
    "options",
    "getLastError",
    "restart",
    "full",
    "update",
    "json",
    "record",
    "type",
    "showError",
    "message",
    "args",
    "cv",
    "io",
    "IClient"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * Interface all CometVisu-Client must implement.\n */\nqx.Interface.define('cv.io.IClient', {\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n\n    connected: {\n      check: \"Boolean\",\n      init: false,\n      event: \"changeConnected\"\n    },\n\n    /**\n     * The server the client is currently speaking to\n     */\n    server: {\n      check: \"String\",\n      nullable: true,\n      event: 'changedServer'\n    }\n  },\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    /**\n     * Returns the current backend configuration\n     * @return {Map}\n     */\n    getBackend: function() { },\n\n    /**\n     * Returns true, when the backend provides a special data provider for this kins of data\n     * @param name {String}\n     * @return {Boolean}\n     */\n    hasProvider: function (name) {},\n\n    /**\n     * URL to the provided data\n     * @param name\n     * @return {String}\n     */\n    getProviderUrl: function (name) {},\n\n    /**\n     * Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.\n     * @param name {String}\n     */\n    getProviderConvertFunction : function (name) { },\n\n    /**\n     * Set a subset of addresses the client should request initially (e.g. the ones one the start page).\n     * This can be used to increase the init state loading speed by sending an initial request with a smaller\n     * subset of addresses to the backend and send the rest later.\n     * @param addresses {Array}\n     */\n    setInitialAddresses: function(addresses) { },\n\n    /**\n     * Subscribe to the addresses in the parameter. The second parameter\n     * (filter) is optional\n     *\n     * @param addresses {Array?} addresses to subscribe to\n     * @param filters {Array?} Filters\n     *\n     */\n    subscribe : function (addresses, filters) { },\n\n    /**\n     * This function starts the communication by a login and then runs the\n     * ongoing communication task\n     *\n     * @param loginOnly {Boolean} if true only login and backend configuration, no subscription\n     *                            to addresses (default: false)\n     * @param credentials {Map} map with \"username\" and \"password\" (optional)\n     * @param callback {Function} call this function when login is done\n     * @param context {Object} context for the callback (this)\n     *\n     */\n    login : function (loginOnly, credentials, callback, context) {},\n\n    /**\n     * Authorize a Request by adding the necessary headers.\n     * @param req {qx.io.request.Xhr}\n     */\n    authorize: function (req) {},\n\n    /**\n     * return the relative path to a resource on the currently used backend\n     *\n     * @param name {String} Name of the resource (e.g. login, read, write, rrd)\n     * @param params {Map?} optional data needed to generate the resource path\n     * @return {String|null} relative path to the resource, returns `null` when the backend does not provide that resource\n     */\n    getResourcePath : function (name, params) {},\n\n    /**\n     * This client provides an own processor for charts data\n     * @return {Boolean}\n     */\n    hasCustomChartsDataProcessor : function () {},\n\n    /**\n     * For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle\n     * @param data {var}\n     */\n    processChartsData : function (data) {},\n\n    /**\n     * This function sends a value\n     * @param address {String} address to send the value to\n     * @param value {String} value to send\n     * @param options {Object} optional options, depending on backend\n     *\n     */\n    write : function (address, value, options) {},\n\n    /**\n     * Get the last recorded error\n     *\n     * @return {{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}\n     */\n    getLastError: function() {},\n\n    /**\n     * Restart the connection\n     */\n    restart: function(full) {},\n\n\n    /**\n     * Handle the incoming state updates. This method is not implemented by the client itself.\n     * It is injected by the project using the client.\n     * @param json\n     */\n    update: function(json) {},\n\n    /**\n     * Can be overridden to record client communication with backend\n     * @param type {String} type of event to record\n     * @param data {Object} data to record\n     */\n    record: function(type, data) {},\n\n    /**\n     * Can be overridden to provide an error handler for client errors\n     * @param type {Number} one of cv.io.Client.ERROR_CODES\n     * @param message {String} detailed error message\n     * @param args\n     */\n    showError: function(type, message, args) {}\n  },\n});\n"
  ]
}