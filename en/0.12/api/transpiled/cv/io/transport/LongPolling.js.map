{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/client/source/class/cv/io/transport/LongPolling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "client",
    "watchdog",
    "cv",
    "io",
    "Watchdog",
    "setClient",
    "members",
    "doRestart",
    "xhr",
    "lastIndex",
    "retryCounter",
    "retryServerErrorCounter",
    "sessionId",
    "running",
    "handleSession",
    "args",
    "connect",
    "json",
    "getResponse",
    "s",
    "hasOwnProperty",
    "error",
    "showError",
    "Client",
    "ERROR_CODES",
    "PROTOCOL_MISSING_VERSION",
    "version",
    "v",
    "split",
    "parseInt",
    "data",
    "successCallback",
    "initialAddresses",
    "length",
    "buildRequest",
    "handleReadStart",
    "handleRead",
    "__startReading",
    "start",
    "callback",
    "t",
    "options",
    "beforeSend",
    "bind",
    "listeners",
    "handleError",
    "doRequest",
    "getResourcePath",
    "Array",
    "prototype",
    "slice",
    "call",
    "arguments",
    "setDataReceived",
    "delay",
    "Math",
    "pow",
    "info",
    "isActive",
    "event",
    "Timer",
    "once",
    "ping",
    "PROTOCOL_INVALID_READ_RESPONSE_MISSING_I",
    "i",
    "d",
    "readResendHeaderValues",
    "update",
    "setConnected",
    "url",
    "getUrl",
    "shift",
    "getQueryString",
    "setUrl",
    "send",
    "diffAddresses",
    "addresses",
    "includes",
    "push",
    "removeListener",
    "addListener",
    "ev",
    "req",
    "getTarget",
    "indexOf",
    "getStatus",
    "backend",
    "maxRetries",
    "serverErrorHandled",
    "restart",
    "getReadyState",
    "getStatusText",
    "headerName",
    "resendHeaders",
    "undefined",
    "setRequestHeader",
    "headers",
    "getResponseHeader",
    "isConnectionRunning",
    "doFullReload",
    "abort",
    "hooks",
    "onClose",
    "stop",
    "transport",
    "LongPolling"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* LongPolling.js \n * \n * copyright (c) 2010-2016, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\nqx.Class.define('cv.io.transport.LongPolling', {\n  extend: qx.core.Object,\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  /**\n   *\n   * @param client {cv.io.Client}\n   */\n  construct: function(client) {\n    this.client = client;\n    this.watchdog = new cv.io.Watchdog();\n    this.watchdog.setClient(client);\n  },\n\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    watchdog: null,\n    doRestart: false, // are we currently in a restart, e.g. due to the watchdog\n    xhr: null, // the ongoing AJAX request\n    lastIndex: -1,    // index returned by the last request\n    retryCounter: 0,      // count number of retries (reset with each valid response)\n    retryServerErrorCounter: 0, // count number of successive temporary server errors\n    sessionId: null,\n    client: null,\n    running: null,\n\n    /**\n     * This function gets called once the communication is established\n     * and this.client information is available.\n     *\n     * @param args {Array} arguments from the XHR response callback\n     * @param connect {Boolean} whether to start the connection or not\n     */\n    handleSession: function (args, connect) {\n      var json =  this.client.getResponse(args);\n      this.sessionId = json.s;\n      if (!json.hasOwnProperty('v')) {\n        this.error('CometVisu protocol error: missing protocol version');\n        this.client.showError(cv.io.Client.ERROR_CODES.PROTOCOL_MISSING_VERSION, json);\n      } else {\n        this.version = json.v.split('.', 3);\n\n        if (0 < parseInt(this.version[0]) || 1 < parseInt(this.version[1])) {\n          this.error('ERROR CometVisu Client: too new protocol version (' + json.v + ') used!');\n        }\n        if (connect) {\n          this.connect();\n        }\n      }\n    },\n\n    connect: function () {\n      this.running = true;\n      // send first request\n\n      var data = [];\n      var successCallback = null;\n      if (this.client.initialAddresses.length) {\n        data = this.client.buildRequest(this.client.initialAddresses);\n        successCallback = this.handleReadStart;\n      } else {\n        // old behaviour -> start full query\n        data = this.client.buildRequest();\n        successCallback = this.handleRead;\n      }\n      this.__startReading(data, successCallback);\n      this.watchdog.start(5);\n    },\n\n    __startReading: function(data, callback) {\n      data = data || this.client.buildRequest();\n      callback = callback || this.handleRead;\n      data.t = 0;\n      var options = {\n        beforeSend: this.beforeSend.bind(this),\n        listeners: {\n          error: this.handleError\n        }\n      };\n      this.xhr = this.client.doRequest(this.client.getResourcePath(\"read\"), data, callback, this, options);\n    },\n\n    /**\n     * This function gets called once the communication is established\n     * and this.client information is available\n     */\n    handleRead: function () {\n      var json = this.client.getResponse(Array.prototype.slice.call(arguments, 0));\n      if (this.doRestart || (!json && (-1 === this.lastIndex))) {\n        this.client.setDataReceived(false);\n        if (this.running) { // retry initial request\n          var delay = 100 * Math.pow(this.retryCounter, 2);\n          this.retryCounter++;\n          if (this.doRestart) {\n            // planned restart, only inform user\n            this.info(\"restarting XHR read requests in \"+delay+\" ms\");\n          } else {\n            this.error(\"restarting XHR read requests in \"+delay+\" ms\");\n          }\n          if (!this.watchdog.isActive()) {\n            // watchdog has been stopped in the abort function -> restart it\n            this.watchdog.start(5);\n          }\n          qx.event.Timer.once(function () {\n            this.__startReading();\n            this.watchdog.ping(true);\n          }, this, delay);\n        }\n        return;\n      }\n\n      var data;\n      if (json && !this.doRestart) {\n        if (!json.hasOwnProperty('i')) {\n          this.error('CometVisu protocol error: backend responded to a read request without an \"i\"-parameter');\n          this.client.showError(cv.io.Client.ERROR_CODES.PROTOCOL_INVALID_READ_RESPONSE_MISSING_I, json);\n          return;\n        }\n        this.lastIndex = json.i;\n        data = json.d;\n        this.readResendHeaderValues();\n        this.client.update(data);\n        this.retryCounter = 0;\n        this.client.setDataReceived(true);\n        this.client.setConnected(true);\n      }\n\n      this.retryServerErrorCounter = 0; // server has successfully responded\n      if (this.running) { // keep the requests going\n        this.retryCounter++;\n        data = this.client.buildRequest();\n        data.i = this.lastIndex;\n        var url = this.xhr.getUrl().split(\"?\").shift()+\"?\"+this.client.getQueryString(data);\n        this.xhr.setUrl(url);\n        this.xhr.send();\n        this.watchdog.ping();\n      }\n    },\n\n    handleReadStart: function () {\n      var json = this.client.getResponse(Array.prototype.slice.call(arguments, 0));\n      if (!json && (-1 === this.lastIndex)) {\n        this.client.setDataReceived(false);\n        if (this.running) { // retry initial request\n          this.xhr.send();\n          this.watchdog.ping();\n        }\n        return;\n      }\n      if (json && !this.doRestart) {\n        this.readResendHeaderValues();\n        this.client.update(json.d);\n        this.client.setDataReceived(true);\n        this.client.setConnected(true);\n      }\n      this.retryServerErrorCounter = 0; // server has successfully responded\n      if (this.running) { // keep the requests going, but only\n        // request\n        // addresses-startPageAddresses\n        var diffAddresses = [];\n        for (var i = 0; i < this.client.addresses.length; i++) {\n          if (!this.client.initialAddresses.includes(this.client.addresses[i])) {\n            diffAddresses.push(this.client.addresses[i]);\n          }\n        }\n        var data = this.client.buildRequest(diffAddresses);\n        data.t = 0;\n        var url = this.xhr.getUrl().split(\"?\").shift()+\"?\"+this.client.getQueryString(data);\n        this.xhr.setUrl(url);\n        this.xhr.removeListener(\"success\", this.handleReadStart, this);\n        this.xhr.addListener(\"success\", this.handleRead, this);\n        this.xhr.send();\n        this.watchdog.ping();\n      }\n    },\n\n    /**\n     * This function gets called on an error\n     *\n     *\n     * @param ev {Event}\n     */\n    handleError: qx.core.Environment.select(\"cv.xhr\", {\n      \"qx\": function (ev) {\n        var req = ev.getTarget();\n        // check for temporary server errors and retry a few times\n        if([408,444,499,502,503,504].indexOf(req.getStatus()) >= 0 && this.retryServerErrorCounter < this.client.backend.maxRetries) {\n          this.info('Temporary connection problem (status: ' + req.getStatus() + ') - retry count: ' + this.retryServerErrorCounter);\n          this.retryServerErrorCounter++;\n          req.serverErrorHandled = true;\n          this.restart();\n          return;\n        }\n        // ignore error when connection is irrelevant\n        if (this.running && req.getReadyState() !== 4 && !this.doRestart && req.getStatus() !== 0) {\n          this.error('Error! Type: \"' + req.getResponse() + '\" readyState: ' + req.getStatusText());\n          this.client.setConnected(false);\n        }\n      },\n      \"jquery\": function(xhr, str, excptObj) {\n        // ignore error when connection is irrelevant\n        if (this.running && xhr.readyState !== 4 && !this.doRestart && xhr.status !== 0) {\n          var readyState = 'UNKNOWN';\n          switch (xhr.readyState) {\n            case 0:\n              readyState = 'UNINITIALIZED';\n              break;\n            case 1:\n              readyState = 'LOADING';\n              break;\n            case 2:\n              readyState = 'LOADED';\n              break;\n            case 3:\n              readyState = 'INTERACTIVE';\n              break;\n            case 4:\n              readyState = 'COMPLETED';\n              break;\n          }\n          this.error('Error! Type: \"' + str + '\" ExceptionObject: \"'+ excptObj + '\" readyState: ' + readyState);\n          this.client.setConnected(false);\n        }\n      }\n    }),\n\n    /**\n     * manipulates the header of the current ajax query before it is\n     * been send to the server\n     *\n     * @param xhr {Object} the native XHR object\n     *\n     */\n    beforeSend: function (xhr) {\n      for (var headerName in this.resendHeaders) {\n        if (this.resendHeaders[headerName] !== undefined) {\n          xhr.setRequestHeader(headerName, this.resendHeaders[headerName]);\n        }\n      }\n      for (headerName in this.headers) {\n        if (this.headers[headerName] !== undefined) {\n          xhr.setRequestHeader(headerName, this.headers[headerName]);\n        }\n      }\n    },\n\n    /**\n     * read the header values of a response and stores them to the\n     * resendHeaders array\n     */\n    readResendHeaderValues: function () {\n      for (var headerName in this.resendHeaders) {\n        this.resendHeaders[headerName] = this.xhr\n          .getResponseHeader(headerName);\n      }\n    },\n\n    /**\n     * Check if the connection is still running.\n     */\n    isConnectionRunning: function () {\n      return true;\n    },\n\n    /**\n     * Restart the read request, e.g. when the watchdog kicks in\n     *\n     * @param doFullReload {Boolean} reload all data and not only restart connection\n     */\n    restart: function (doFullReload) {\n      if (doFullReload) {\n        this.lastIndex = -1; // reload all data\n      }\n      this.doRestart = true;\n      this.abort();\n      this.handleRead(); // restart\n      this.doRestart = false;\n    },\n    /**\n     * Abort the read request properly\n     *\n     */\n    abort: function () {\n      if (this.xhr && this.xhr.abort) {\n        this.xhr.abort();\n        this.xhr = null;\n\n        if (this.client.backend && this.client.backend.hooks.onClose) {\n          this.client.backend.hooks.onClose.bind(this);\n        }\n      }\n      this.watchdog.stop();\n    }\n  }\n});\n"
  ]
}