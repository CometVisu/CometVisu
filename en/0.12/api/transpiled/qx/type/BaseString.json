{
  "className": "qx.type.BaseString",
  "packageName": "qx.type",
  "name": "BaseString",
  "superClass": "Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 35,
        "column": 0
      },
      "end": {
        "line": 405,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Fabian Jakobs (fjakobs)\n Jonathan Wei√ü (jonathan_rass)\n   ======================================================================\n     This class uses documentation of the native String methods from the MDC\n     documentation of Mozilla.\n     License:\n       CC Attribution-Sharealike License:\n       http://creativecommons.org/licenses/by-sa/2.5/\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This class emulates the built-in JavaScript String class. It can be used as\n base class for classes, which need to derive from String.\n Instances of this class can be used in any place a JavaScript string can.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 42,
        "column": 14
      },
      "end": {
        "line": 50,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "txt {String?\"\"} Initialize with this string",
          "paramName": "txt",
          "description": " Initialize with this string",
          "optional": true,
          "defaultValue": "\"\"",
          "type": "String"
        }
      ]
    }
  },
  "members": {
    "$$isString": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 54,
          "column": 21
        }
      },
      "type": "variable",
      "access": "public"
    },
    "length": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 55,
          "column": 14
        }
      },
      "type": "variable",
      "access": "public"
    },
    "__txt": {
      "location": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 56,
          "column": 16
        }
      },
      "type": "variable",
      "access": "private"
    },
    "charAt": {
      "location": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the specified character from a string.\n Characters in a string are indexed from left to right. The index of the\n first character is 0, and the index of the last character in a string\n called stringName is stringName.length - 1. If the index you supply is\n out of range, JavaScript returns an empty string.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(index)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} An integer between 0 and 1 less than the length\n   of the string.",
            "paramName": "index",
            "description": " An integer between 0 and 1 less than the length\n   of the string.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The character.",
            "type": "String",
            "description": " The character."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "charCodeAt": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a number indicating the Unicode value of the character at the given index.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(index)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} An integer greater than 0 and less than the length\n   of the string; if it is not a number, it defaults to 0.",
            "paramName": "index",
            "description": " An integer greater than 0 and less than the length\n   of the string; if it is not a number, it defaults to 0.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The number.",
            "type": "Integer",
            "description": " The number."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "concat": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Combines the text of two or more strings and returns a new string.\n Changes to the text in one string do not affect the other string.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(stringN)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "stringN {String} One or more strings to be combined.",
            "paramName": "stringN",
            "description": " One or more strings to be combined.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The combined string.",
            "type": "String",
            "description": " The combined string."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index within the calling String object of the first\n occurrence of the specified value, starting the search at fromIndex,\n returns -1 if the value is not found.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(index, offset)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {String} A string representing the value to search for.",
            "paramName": "index",
            "description": " A string representing the value to search for.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "offset {Integer?0} The location within the calling string to start\n   the search from. It can be any integer between 0 and the length of the\n   string. The default value is 0.",
            "paramName": "offset",
            "description": " The location within the calling string to start\n   the search from. It can be any integer between 0 and the length of the\n   string. The default value is 0.",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index or -1.",
            "type": "Integer",
            "description": " The index or -1."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "lastIndexOf": {
      "location": {
        "start": {
          "line": 154,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index within the calling String object of the last occurrence\n of the specified value, or -1 if not found. The calling string is\n searched backward, starting at fromIndex.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(index, offset)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {String} A string representing the value to search for.",
            "paramName": "index",
            "description": " A string representing the value to search for.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "offset {Integer?0} The location within the calling string to start\n   the search from, indexed from left to right. It can be any integer\n   between 0 and the length of the string. The default value is the length\n    of the string.",
            "paramName": "offset",
            "description": " The location within the calling string to start\n   the search from, indexed from left to right. It can be any integer\n   between 0 and the length of the string. The default value is the length\n    of the string.",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index or -1.",
            "type": "Integer",
            "description": " The index or -1."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "match": {
      "location": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used to retrieve the matches when matching a string against a regular\n expression.\n If the regular expression does not include the g flag, returns the same\n result as regexp.exec(string). If the regular expression includes the g\n flag, the method returns an Array containing all matches.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(regexp)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regexp {Object} A regular expression object. If a non-RegExp object\n  obj is passed, it is implicitly converted to a RegExp by using\n   new RegExp(obj).",
            "paramName": "regexp",
            "description": " A regular expression object. If a non-RegExp object\n  obj is passed, it is implicitly converted to a RegExp by using\n   new RegExp(obj).",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The matching RegExp object or an array containing all\n   matches.",
            "type": "Object",
            "description": " The matching RegExp object or an array containing all\n   matches."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "replace": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds a match between a regular expression and a string, and replaces the\n matched substring with a new substring.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(regexp, aFunction)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regexp {Object} A RegExp object. The match is replaced by the\n   return value of parameter #2. Or a String that is to be replaced by\n   newSubStr.",
            "paramName": "regexp",
            "description": " A RegExp object. The match is replaced by the\n   return value of parameter #2. Or a String that is to be replaced by\n   newSubStr.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "aFunction {Function} A function to be invoked to create the new\n   substring (to put in place of the substring received from parameter\n   #1).",
            "paramName": "aFunction",
            "description": " A function to be invoked to create the new\n   substring (to put in place of the substring received from parameter\n   #1).",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The new substring.",
            "type": "String",
            "description": " The new substring."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "search": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 203,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes the search for a match between a regular expression and this\n String object.\n If successful, search returns the index of the regular expression inside\n the string. Otherwise, it returns -1.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(regexp)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regexp {Object} A regular expression object. If a non-RegExp object\n  obj is passed, it is implicitly converted to a RegExp by using\n   new RegExp(obj).",
            "paramName": "regexp",
            "description": " A regular expression object. If a non-RegExp object\n  obj is passed, it is implicitly converted to a RegExp by using\n   new RegExp(obj).",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The matching RegExp object or -1.\n   matches.",
            "type": "Object",
            "description": " The matching RegExp object or -1.\n   matches."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 220,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Extracts a section of a string and returns a new string.\n Slice extracts the text from one string and returns a new string. Changes\n to the text in one string do not affect the other string.\n As a negative index, endSlice indicates an offset from the end of the\n string.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(beginslice, endSlice)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "beginslice {Integer} The zero-based index at which to begin\n   extraction.",
            "paramName": "beginslice",
            "description": " The zero-based index at which to begin\n   extraction.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "endSlice {Integer?null} The zero-based index at which to end\n   extraction. If omitted, slice extracts to the end of the string.",
            "paramName": "endSlice",
            "description": " The zero-based index at which to end\n   extraction. If omitted, slice extracts to the end of the string.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The extracted string.",
            "type": "String",
            "description": " The extracted string."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "split": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 246,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Splits a String object into an array of strings by separating the string\n into substrings.\n When found, separator is removed from the string and the substrings are\n returned in an array. If separator is omitted, the array contains one\n element consisting of the entire string.\n If separator is a regular expression that contains capturing parentheses,\n then each time separator is matched the results (including any undefined\n results) of the capturing parentheses are spliced into the output array.\n However, not all browsers support this capability.\n Note: When the string is empty, split returns an array containing one</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(separator, limit)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator {String?null} Specifies the character to use for\n   separating the string. The separator is treated as a string or a regular\n   expression. If separator is omitted, the array returned contains one\n   element consisting of the entire string.",
            "paramName": "separator",
            "description": " Specifies the character to use for\n   separating the string. The separator is treated as a string or a regular\n   expression. If separator is omitted, the array returned contains one\n   element consisting of the entire string.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "limit {Integer?null} Integer specifying a limit on the number of\n   splits to be found.",
            "paramName": "limit",
            "description": " Integer specifying a limit on the number of\n   splits to be found.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The Array containing substrings.",
            "type": "qx.type.Array",
            "description": " The Array containing substrings."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "substr": {
      "location": {
        "start": {
          "line": 266,
          "column": 4
        },
        "end": {
          "line": 266,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the characters in a string beginning at the specified location\n through the specified number of characters.\n Start is a character index. The index of the first character is 0, and the\n index of the last character is 1 less than the length of the string. substr\n  begins extracting characters at start and collects length characters\n (unless it reaches the end of the string first, in which case it will\n return fewer).\n If start is positive and is greater than or equal to the length of the\n string, substr returns an empty string.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(start, length)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} Location at which to begin extracting characters\n   (an integer between 0 and one less than the length of the string).",
            "paramName": "start",
            "description": " Location at which to begin extracting characters\n   (an integer between 0 and one less than the length of the string).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "length {Integer?null} The number of characters to extract.",
            "paramName": "length",
            "description": " The number of characters to extract.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The substring.",
            "type": "String",
            "description": " The substring."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "substring": {
      "location": {
        "start": {
          "line": 290,
          "column": 4
        },
        "end": {
          "line": 290,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a subset of a String object.\n substring extracts characters from indexA up to but not including indexB.\n In particular:\n If indexA equals indexB, substring returns an empty string.\n If indexB is omitted, substring extracts characters to the end of the\n string.\n If either argument is less than 0 or is NaN, it is treated as if it were\n 0.\n If either argument is greater than stringName.length, it is treated as if\n it were stringName.length.\n If indexA is larger than indexB, then the effect of substring is as if\n the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(indexA, indexB)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "indexA {Integer} An integer between 0 and one less than the\n   length of the string.",
            "paramName": "indexA",
            "description": " An integer between 0 and one less than the\n   length of the string.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "indexB {Integer?null} (optional) An integer between 0 and the\n   length of the string.",
            "paramName": "indexB",
            "description": " (optional) An integer between 0 and the\n   length of the string.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The subset.",
            "type": "String",
            "description": " The subset."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "toLowerCase": {
      "location": {
        "start": {
          "line": 300,
          "column": 4
        },
        "end": {
          "line": 300,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the calling string value converted to lowercase.\n The toLowerCase method returns the value of the string converted to\n lowercase. toLowerCase does not affect the value of the string itself.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The new string.",
            "type": "String",
            "description": " The new string."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "toUpperCase": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 310,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the calling string value converted to uppercase.\n The toUpperCase method returns the value of the string converted to\n uppercase. toUpperCase does not affect the value of the string itself.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The new string.",
            "type": "String",
            "description": " The new string."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "toHashCode": {
      "location": {
        "start": {
          "line": 318,
          "column": 4
        },
        "end": {
          "line": 320,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return unique hash code of object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} unique hash code of the object",
            "type": "Integer",
            "description": " unique hash code of the object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toLocaleLowerCase": {
      "location": {
        "start": {
          "line": 333,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The characters within a string are converted to lower case while\n respecting the current locale.\n The toLowerCase method returns the value of the string converted to\n lowercase. toLowerCase does not affect the value of the string itself.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The new string.",
            "type": "String",
            "description": " The new string."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "toLocaleUpperCase": {
      "location": {
        "start": {
          "line": 344,
          "column": 4
        },
        "end": {
          "line": 344,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The characters within a string are converted to upper case while\n respecting the current locale.\n The toUpperCase method returns the value of the string converted to\n uppercase. toUpperCase does not affect the value of the string itself.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The new string.",
            "type": "String",
            "description": " The new string."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "base": {
      "location": {
        "start": {
          "line": 353,
          "column": 4
        },
        "end": {
          "line": 355,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Call the same method of the super class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} the arguments variable of the calling method",
            "paramName": "args",
            "description": " the arguments variable of the calling method",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "varags {var} variable number of arguments passed to the overwritten function",
            "paramName": "varags",
            "description": " variable number of arguments passed to the overwritten function",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the return value of the method of the base class.",
            "type": "var",
            "description": " the return value of the method of the base class."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 366,
        "column": 11
      },
      "end": {
        "line": 403,
        "column": 4
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n  DEFER\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": [
    "qx.locale.LocalizedString"
  ]
}