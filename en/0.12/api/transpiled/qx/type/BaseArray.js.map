{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/type/BaseArray.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Array",
    "construct",
    "length_or_items",
    "members",
    "toArray",
    "valueOf",
    "pop",
    "push",
    "reverse",
    "shift",
    "sort",
    "splice",
    "unshift",
    "concat",
    "join",
    "slice",
    "toString",
    "indexOf",
    "lastIndexOf",
    "forEach",
    "filter",
    "map",
    "some",
    "every",
    "createStackConstructor",
    "stack",
    "core",
    "Environment",
    "get",
    "Stack",
    "prototype",
    "length",
    "$$isArray",
    "args",
    "split",
    "constructor",
    "i",
    "arguments",
    "copy",
    "call",
    "apply",
    "toLocaleString",
    "ret",
    "PseudoArray",
    "type",
    "BaseArray"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,mBAApB,EACA;AACEC,IAAAA,MAAM,EAAGC,KADX;;AAIE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,eAAT,EAA0B,CAAE,CA/B1C;;AAkCE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,IAPZ;;AASE;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,IAfZ;;AAiBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,GAAG,EAAG,IAzBR;;AA2BE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG,IApCT;;AAsCE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,IA9CZ;;AAgDE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAG,IAxDV;;AA0DE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG,IApET;;AAsEE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAG,IAnFX;;AAqFE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,IA9FZ;;AAgGE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAG,IAzGX;;AA2GE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG,IAnHT;;AAqHE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAG,IAlIV;;AAoIE;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,QAAQ,EAAG,IA1Ib;;AA4IE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,IAzJZ;;AA2JE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,WAAW,EAAG,IAxKhB;;AA0KE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,IAtMZ;;AAwME;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAG,IAzOX;;AA2OE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,GAAG,EAAG,IAvQR;;AAyQE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n   ======================================================================\n\n   This class uses ideas and code snippets presented at\n   http://webreflection.blogspot.com/2008/05/habemus-array-unlocked-length-in-ie8.html\n   http://webreflection.blogspot.com/2008/05/stack-and-arrayobject-how-to-create.html\n\n   Author:\n     Andrea Giammarchi\n\n   License:\n     MIT: http://www.opensource.org/licenses/mit-license.php\n\n   ======================================================================\n\n   This class uses documentation of the native Array methods from the MDC\n   documentation of Mozilla.\n\n   License:\n     CC Attribution-Sharealike License:\n     http://creativecommons.org/licenses/by-sa/2.5/\n\n************************************************************************ */\n\n/**\n * This class is the common superclass for most array classes in\n * qooxdoo. It supports all of the shiny 1.6 JavaScript array features\n * like <code>forEach</code> and <code>map</code>.\n *\n * This class may be instantiated instead of the native Array if\n * one wants to work with a feature-unified Array instead of the native\n * one. This class uses native features whereever possible but fills\n * all missing implementations with custom ones.\n *\n * Through the ability to extend from this class one could add even\n * more utility features on top of it.\n *\n * @require(qx.bom.client.Engine)\n * @require(qx.lang.normalize.Array)\n */\nqx.Bootstrap.define(\"qx.type.BaseArray\",\n{\n  extend : Array,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new Array with the given length or the listed elements.\n   *\n   * <pre class=\"javascript\">\n   * var arr1 = new qx.type.BaseArray(arrayLength);\n   * var arr2 = new qx.type.BaseArray(item0, item1, ..., itemN);\n   * </pre>\n   *\n   * * <code>arrayLength</code>: The initial length of the array. You can access\n   * this value using the length property. If the value specified is not a\n   * number, an array of length 1 is created, with the first element having\n   * the specified value. The maximum length allowed for an\n   * array is 2^32-1, i.e. 4,294,967,295.\n   * * <code>itemN</code>:  A value for the element in that position in the\n   * array. When this form is used, the array is initialized with the specified\n   * values as its elements, and the array's length property is set to the\n   * number of arguments.\n   *\n   * @param length_or_items {Integer|var?null} The initial length of the array\n   *        OR an argument list of values.\n   */\n  construct : function(length_or_items) {},\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Converts a base array to a native Array\n     *\n     * @signature function()\n     * @return {Array} The native array\n     */\n    toArray : null,\n\n    /**\n     * Returns the current number of items stored in the Array\n     *\n     * @signature function()\n     * @return {Integer} number of items\n     */\n    valueOf : null,\n\n    /**\n     * Removes the last element from an array and returns that element.\n     *\n     * This method modifies the array.\n     *\n     * @signature function()\n     * @return {var} The last element of the array.\n     */\n    pop : null,\n\n    /**\n     * Adds one or more elements to the end of an array and returns the new length of the array.\n     *\n     * This method modifies the array.\n     *\n     * @signature function(varargs)\n     * @param varargs {var} The elements to add to the end of the array.\n     * @return {Integer} The new array's length\n     */\n    push : null,\n\n    /**\n     * Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\n     *\n     * This method modifies the array.\n     *\n     * @signature function()\n     * @return {Array} Returns the modified array (works in place)\n     */\n    reverse : null,\n\n    /**\n     * Removes the first element from an array and returns that element.\n     *\n     * This method modifies the array.\n     *\n     * @signature function()\n     * @return {var} The first element of the array.\n     */\n    shift : null,\n\n    /**\n     * Sorts the elements of an array.\n     *\n     * This method modifies the array.\n     *\n     * @signature function(compareFunction)\n     * @param compareFunction {Function?null} Specifies a function that defines the sort order. If omitted,\n     *   the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.\n     * @return {Array} Returns the modified array (works in place)\n     */\n    sort : null,\n\n    /**\n     * Adds and/or removes elements from an array.\n     *\n     * @signature function(index, howMany, varargs)\n     * @param index {Integer} Index at which to start changing the array. If negative, will begin\n     *   that many elements from the end.\n     * @param howMany {Integer} An integer indicating the number of old array elements to remove.\n     *   If <code>howMany</code> is 0, no elements are removed. In this case, you should specify\n     *   at least one new element.\n     * @param varargs {var?null} The elements to add to the array. If you don't specify any elements,\n     *   splice simply removes elements from the array.\n     * @return {qx.type.BaseArray} New array with the removed elements.\n     */\n    splice : null,\n\n    /**\n     * Adds one or more elements to the front of an array and returns the new length of the array.\n     *\n     * This method modifies the array.\n     *\n     * @signature function(varargs)\n     * @param varargs {var} The elements to add to the front of the array.\n     * @return {Integer} The new array's length\n     */\n    unshift : null,\n\n    /**\n     * Returns a new array comprised of this array joined with other array(s) and/or value(s).\n     *\n     * This method does not modify the array and returns a modified copy of the original.\n     *\n     * @signature function(varargs)\n     * @param varargs {Array|var} Arrays and/or values to concatenate to the resulting array.\n     * @return {qx.type.BaseArray} New array built of the given arrays or values.\n     */\n    concat : null,\n\n    /**\n     * Joins all elements of an array into a string.\n     *\n     * @signature function(separator)\n     * @param separator {String} Specifies a string to separate each element of the array. The separator is\n     *   converted to a string if necessary. If omitted, the array elements are separated with a comma.\n     * @return {String} The stringified values of all elements divided by the given separator.\n     */\n    join : null,\n\n    /**\n     * Extracts a section of an array and returns a new array.\n     *\n     * @signature function(begin, end)\n     * @param begin {Integer} Zero-based index at which to begin extraction. As a negative index, start indicates\n     *   an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element\n     *   in the sequence.\n     * @param end {Integer?length} Zero-based index at which to end extraction. slice extracts up to but not including end.\n     *   <code>slice(1,4)</code> extracts the second element through the fourth element (elements indexed 1, 2, and 3).\n     *   As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\n     *   If end is omitted, slice extracts to the end of the sequence.\n     * @return {qx.type.BaseArray} An new array which contains a copy of the given region.\n     */\n    slice : null,\n\n    /**\n     * Returns a string representing the array and its elements. Overrides the Object.prototype.toString method.\n     *\n     * @signature function()\n     * @return {String} The string representation of the array.\n     */\n    toString : null,\n\n    /**\n     * Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\n     *\n     * @signature function(searchElement, fromIndex)\n     * @param searchElement {var} Element to locate in the array.\n     * @param fromIndex {Integer?0} The index at which to begin the search. Defaults to 0, i.e. the\n     *   whole array will be searched. If the index is greater than or equal to the length of the\n     *   array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as\n     *   the offset from the end of the array. Note that even when the index is negative, the array\n     *   is still searched from front to back. If the calculated index is less than 0, the whole\n     *   array will be searched.\n     * @return {Integer} The index of the given element\n     */\n    indexOf : null,\n\n    /**\n     * Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n     *\n     * @signature function(searchElement, fromIndex)\n     * @param searchElement {var} Element to locate in the array.\n     * @param fromIndex {Integer?length} The index at which to start searching backwards. Defaults to\n     *   the array's length, i.e. the whole array will be searched. If the index is greater than\n     *   or equal to the length of the array, the whole array will be searched. If negative, it\n     *   is taken as the offset from the end of the array. Note that even when the index is\n     *   negative, the array is still searched from back to front. If the calculated index is\n     *   less than 0, -1 is returned, i.e. the array will not be searched.\n     * @return {Integer} The index of the given element\n     */\n    lastIndexOf : null,\n\n    /**\n     * Executes a provided function once per array element.\n     *\n     * <code>forEach</code> executes the provided function (<code>callback</code>) once for each\n     * element present in the array.  <code>callback</code> is invoked only for indexes of the array\n     * which have assigned values; it is not invoked for indexes which have been deleted or which\n     * have never been assigned values.\n     *\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index\n     * of the element, and the Array object being traversed.\n     *\n     * If a <code>obj</code> parameter is provided to <code>forEach</code>, it will be used\n     * as the <code>this</code> for each invocation of the <code>callback</code>.  If it is not\n     * provided, or is <code>null</code>, the global object associated with <code>callback</code>\n     * is used instead.\n     *\n     * <code>forEach</code> does not mutate the array on which it is called.\n     *\n     * The range of elements processed by <code>forEach</code> is set before the first invocation of\n     * <code>callback</code>.  Elements which are appended to the array after the call to\n     * <code>forEach</code> begins will not be visited by <code>callback</code>. If existing elements\n     * of the array are changed, or deleted, their value as passed to <code>callback</code> will be\n     * the value at the time <code>forEach</code> visits them; elements that are deleted are not visited.\n     *\n     * @signature function(callback, obj)\n     * @param callback {Function} Function to execute for each element.\n     * @param obj {Object} Object to use as this when executing callback.\n     */\n    forEach : null,\n\n    /**\n     * Creates a new array with all elements that pass the test implemented by the provided\n     * function.\n     *\n     * <code>filter</code> calls a provided <code>callback</code> function once for each\n     * element in an array, and constructs a new array of all the values for which\n     * <code>callback</code> returns a true value.  <code>callback</code> is invoked only\n     * for indexes of the array which have assigned values; it is not invoked for indexes\n     * which have been deleted or which have never been assigned values.  Array elements which\n     * do not pass the <code>callback</code> test are simply skipped, and are not included\n     * in the new array.\n     *\n     * <code>callback</code> is invoked with three arguments: the value of the element, the\n     * index of the element, and the Array object being traversed.\n     *\n     * If a <code>obj</code> parameter is provided to <code>filter</code>, it will\n     * be used as the <code>this</code> for each invocation of the <code>callback</code>.\n     * If it is not provided, or is <code>null</code>, the global object associated with\n     * <code>callback</code> is used instead.\n     *\n     * <code>filter</code> does not mutate the array on which it is called. The range of\n     * elements processed by <code>filter</code> is set before the first invocation of\n     * <code>callback</code>. Elements which are appended to the array after the call to\n     * <code>filter</code> begins will not be visited by <code>callback</code>. If existing\n     * elements of the array are changed, or deleted, their value as passed to <code>callback</code>\n     * will be the value at the time <code>filter</code> visits them; elements that are deleted\n     * are not visited.\n     *\n     * @signature function(callback, obj)\n     * @param callback {Function} Function to test each element of the array.\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\n     * @return {qx.type.BaseArray} The newly created array with all matching elements\n     */\n    filter : null,\n\n    /**\n     * Creates a new array with the results of calling a provided function on every element in this array.\n     *\n     * <code>map</code> calls a provided <code>callback</code> function once for each element in an array,\n     * in order, and constructs a new array from the results.  <code>callback</code> is invoked only for\n     * indexes of the array which have assigned values; it is not invoked for indexes which have been\n     * deleted or which have never been assigned values.\n     *\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index of the\n     * element, and the Array object being traversed.\n     *\n     * If a <code>obj</code> parameter is provided to <code>map</code>, it will be used as the\n     * <code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n     * <code>null</code>, the global object associated with <code>callback</code> is used instead.\n     *\n     * <code>map</code> does not mutate the array on which it is called.\n     *\n     * The range of elements processed by <code>map</code> is set before the first invocation of\n     * <code>callback</code>. Elements which are appended to the array after the call to <code>map</code>\n     * begins will not be visited by <code>callback</code>.  If existing elements of the array are changed,\n     * or deleted, their value as passed to <code>callback</code> will be the value at the time\n     * <code>map</code> visits them; elements that are deleted are not visited.\n     *\n     * @signature function(callback, obj)\n     * @param callback {Function} Function produce an element of the new Array from an element of the current one.\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\n     * @return {qx.type.BaseArray} A new array which contains the return values of every item executed through the given function\n     */\n    map : null,\n\n    /**\n     * Tests whether some element in the array passes the test implemented by the provided function.\n     *\n     * <code>some</code> executes the <code>callback</code> function once for each element present in\n     * the array until it finds one where <code>callback</code> returns a true value. If such an element\n     * is found, <code>some</code> immediately returns <code>true</code>. Otherwise, <code>some</code>\n     * returns <code>false</code>. <code>callback</code> is invoked only for indexes of the array which\n     * have assigned values; it is not invoked for indexes which have been deleted or which have never\n     * been assigned values.\n     *\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index of the\n     * element, and the Array object being traversed.\n     *\n     * If a <code>obj</code> parameter is provided to <code>some</code>, it will be used as the\n     * <code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n     * <code>null</code>, the global object associated with <code>callback</code> is used instead.\n     *\n     * <code>some</code> does not mutate the array on which it is called.\n     *\n     * The range of elements processed by <code>some</code> is set before the first invocation of\n     * <code>callback</code>.  Elements that are appended to the array after the call to <code>some</code>\n     * begins will not be visited by <code>callback</code>. If an existing, unvisited element of the array\n     * is changed by <code>callback</code>, its value passed to the visiting <code>callback</code> will\n     * be the value at the time that <code>some</code> visits that element's index; elements that are\n     * deleted are not visited.\n     *\n     * @signature function(callback, obj)\n     * @param callback {Function} Function to test for each element.\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\n     * @return {Boolean} Whether at least one elements passed the test\n     */\n    some : null,\n\n    /**\n     * Tests whether all elements in the array pass the test implemented by the provided function.\n     *\n     * <code>every</code> executes the provided <code>callback</code> function once for each element\n     * present in the array until it finds one where <code>callback</code> returns a false value. If\n     * such an element is found, the <code>every</code> method immediately returns <code>false</code>.\n     * Otherwise, if <code>callback</code> returned a true value for all elements, <code>every</code>\n     * will return <code>true</code>.  <code>callback</code> is invoked only for indexes of the array\n     * which have assigned values; it is not invoked for indexes which have been deleted or which have\n     * never been assigned values.\n     *\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index of\n     * the element, and the Array object being traversed.\n     *\n     * If a <code>obj</code> parameter is provided to <code>every</code>, it will be used as\n     * the <code>this</code> for each invocation of the <code>callback</code>. If it is not provided,\n     * or is <code>null</code>, the global object associated with <code>callback</code> is used instead.\n     *\n     * <code>every</code> does not mutate the array on which it is called. The range of elements processed\n     * by <code>every</code> is set before the first invocation of <code>callback</code>. Elements which\n     * are appended to the array after the call to <code>every</code> begins will not be visited by\n     * <code>callback</code>.  If existing elements of the array are changed, their value as passed\n     * to <code>callback</code> will be the value at the time <code>every</code> visits them; elements\n     * that are deleted are not visited.\n     *\n     * @signature function(callback, obj)\n     * @param callback {Function} Function to test for each element.\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\n     * @return {Boolean} Whether all elements passed the test\n     */\n    every : null\n  }\n});\n\n(function() {\n\nfunction createStackConstructor(stack)\n{\n  // In IE don't inherit from Array but use an empty object as prototype\n  // and copy the methods from Array\n  if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n  {\n    Stack.prototype = {\n      length : 0,\n      $$isArray : true\n    };\n\n    var args = \"pop.push.reverse.shift.sort.splice.unshift.join.slice\".split(\".\");\n\n    for (var length = args.length; length;) {\n      Stack.prototype[args[--length]] = Array.prototype[args[length]];\n    }\n  };\n\n  // Remember Array's slice method\n  var slice = Array.prototype.slice;\n\n  // Fix \"concat\" method\n  Stack.prototype.concat = function()\n  {\n    var constructor = this.slice(0);\n\n    for (var i=0, length=arguments.length; i<length; i++)\n    {\n      var copy;\n\n      if (arguments[i] instanceof Stack) {\n        copy = slice.call(arguments[i], 0);\n      } else if (arguments[i] instanceof Array) {\n        copy = arguments[i];\n      } else {\n        copy = [arguments[i]];\n      }\n\n      constructor.push.apply(constructor, copy);\n    }\n\n    return constructor;\n  };\n\n  // Fix \"toString\" method\n  Stack.prototype.toString = function(){\n    return slice.call(this, 0).toString();\n  };\n\n  // Fix \"toLocaleString\"\n  Stack.prototype.toLocaleString = function() {\n    return slice.call(this, 0).toLocaleString();\n  };\n\n  // Fix constructor\n  Stack.prototype.constructor = Stack;\n\n\n  // Add JS 1.6 Array features\n  Stack.prototype.indexOf = Array.prototype.indexOf;\n  Stack.prototype.lastIndexOf = Array.prototype.lastIndexOf;\n  Stack.prototype.forEach = Array.prototype.forEach;\n  Stack.prototype.some = Array.prototype.some;\n  Stack.prototype.every = Array.prototype.every;\n\n  var filter = Array.prototype.filter;\n  var map = Array.prototype.map;\n\n\n  // Fix methods which generates a new instance\n  // to return an instance of the same class\n  Stack.prototype.filter = function()\n  {\n    var ret = new this.constructor;\n    ret.push.apply(ret, filter.apply(this, arguments));\n    return ret;\n  };\n\n  Stack.prototype.map = function()\n  {\n    var ret = new this.constructor;\n    ret.push.apply(ret, map.apply(this, arguments));\n    return ret;\n  };\n\n  Stack.prototype.slice = function()\n  {\n    var ret = new this.constructor;\n    ret.push.apply(ret, Array.prototype.slice.apply(this, arguments));\n    return ret;\n  };\n\n  Stack.prototype.splice = function()\n  {\n    var ret = new this.constructor;\n    ret.push.apply(ret, Array.prototype.splice.apply(this, arguments));\n    return ret;\n  };\n\n  // Add new \"toArray\" method for convert a base array to a native Array\n  Stack.prototype.toArray = function() {\n    return Array.prototype.slice.call(this, 0);\n  };\n\n  // Add valueOf() to return the length\n  Stack.prototype.valueOf = function(){\n    return this.length;\n  };\n\n  // Return final class\n  return Stack;\n}\n\n\nfunction Stack(length)\n{\n  if(arguments.length === 1 && typeof length === \"number\") {\n    this.length = -1 < length && length === length >> .5 ? length : this.push(length);\n  } else if(arguments.length) {\n    this.push.apply(this, arguments);\n  }\n};\n\nfunction PseudoArray(){};\nPseudoArray.prototype = [];\nStack.prototype = new PseudoArray;\nStack.prototype.length = 0;\n\nqx.type.BaseArray = createStackConstructor(Stack);\n\n})();\n"
  ]
}