{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/type/BaseString.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "Object",
    "construct",
    "txt",
    "__txt",
    "length",
    "members",
    "$$isString",
    "toString",
    "charAt",
    "valueOf",
    "charCodeAt",
    "concat",
    "indexOf",
    "lastIndexOf",
    "match",
    "replace",
    "search",
    "slice",
    "split",
    "substr",
    "substring",
    "toLowerCase",
    "toUpperCase",
    "toHashCode",
    "core",
    "ObjectRegistry",
    "toLocaleLowerCase",
    "toLocaleUpperCase",
    "base",
    "args",
    "varags",
    "prototype",
    "apply",
    "arguments",
    "defer",
    "statics",
    "mappedFunctions",
    "i",
    "l",
    "String",
    "type",
    "BaseString"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n   ======================================================================\n\n     This class uses documentation of the native String methods from the MDC\n     documentation of Mozilla.\n\n     License:\n       CC Attribution-Sharealike License:\n       http://creativecommons.org/licenses/by-sa/2.5/\n\n************************************************************************ */\n\n/**\n * This class emulates the built-in JavaScript String class. It can be used as\n * base class for classes, which need to derive from String.\n *\n * Instances of this class can be used in any place a JavaScript string can.\n */\nqx.Class.define(\"qx.type.BaseString\",\n{\n  extend : Object,\n\n  /**\n   * @param txt {String?\"\"} Initialize with this string\n   */\n  construct : function(txt)\n  {\n    var txt = txt || \"\";\n\n    // no base call needed\n\n    this.__txt = txt;\n    this.length = txt.length;\n  },\n\n  members :\n  {\n    $$isString : true,\n    length : 0,\n    __txt : null,\n\n\n    /**\n     * Returns a string representing the specified object.\n     *\n     * The valueOf method of String returns the primitive value of a String\n     * object as a string data type.\n     * This method is usually called internally by JavaScript and not\n     * explicitly in code.\n     *\n     * @return {String} A new string containing the string value.\n     */\n    toString : function() {\n      return this.__txt;\n    },\n\n\n    /**\n     *  Returns the specified character from a string.\n     *\n     * Characters in a string are indexed from left to right. The index of the\n     * first character is 0, and the index of the last character in a string\n     * called stringName is stringName.length - 1. If the index you supply is\n     * out of range, JavaScript returns an empty string.\n     *\n     * @signature function(index)\n     * @param index {Integer} An integer between 0 and 1 less than the length\n     *   of the string.\n     * @return {String} The character.\n     */\n    charAt : null,\n\n\n    /**\n     * Returns the primitive value of a String object.\n     *\n     * The valueOf method of String returns the primitive value of a String\n     * object as a string data type.\n     * This method is usually called internally by JavaScript and not\n     * explicitly in code.\n     *\n     * @signature function()\n     * @return {String} A new string containing the primitive value.\n     */\n    valueOf : null,\n\n\n    /**\n     * Returns a number indicating the Unicode value of the character at the given index.\n     *\n     * @signature function(index)\n     * @param index {Integer} An integer greater than 0 and less than the length\n     *   of the string; if it is not a number, it defaults to 0.\n     * @return {Integer} The number.\n     */\n    charCodeAt : null,\n\n\n    /**\n     * Combines the text of two or more strings and returns a new string.\n     * Changes to the text in one string do not affect the other string.\n     *\n     * @signature function(stringN)\n     * @param stringN {String} One or more strings to be combined.\n     * @return {String} The combined string.\n     */\n    concat : null,\n\n\n    /**\n     * Returns the index within the calling String object of the first\n     * occurrence of the specified value, starting the search at fromIndex,\n     * returns -1 if the value is not found.\n     *\n     * @signature function(index, offset)\n     * @param index {String} A string representing the value to search for.\n     * @param offset {Integer?0} The location within the calling string to start\n     *   the search from. It can be any integer between 0 and the length of the\n     *   string. The default value is 0.\n     * @return {Integer} The index or -1.\n     */\n    indexOf : null,\n\n\n    /**\n     * Returns the index within the calling String object of the last occurrence\n     * of the specified value, or -1 if not found. The calling string is\n     * searched backward, starting at fromIndex.\n     *\n     * @signature function(index, offset)\n     * @param index {String} A string representing the value to search for.\n     * @param offset {Integer?0} The location within the calling string to start\n     *   the search from, indexed from left to right. It can be any integer\n     *   between 0 and the length of the string. The default value is the length\n     *    of the string.\n     * @return {Integer} The index or -1.\n     */\n    lastIndexOf : null,\n\n    /**\n     * Used to retrieve the matches when matching a string against a regular\n     * expression.\n     *\n     * If the regular expression does not include the g flag, returns the same\n     * result as regexp.exec(string). If the regular expression includes the g\n     * flag, the method returns an Array containing all matches.\n     *\n     * @signature function(regexp)\n     * @param regexp {Object} A regular expression object. If a non-RegExp object\n     *  obj is passed, it is implicitly converted to a RegExp by using\n     *   new RegExp(obj).\n     * @return {Object} The matching RegExp object or an array containing all\n     *   matches.\n     */\n    match : null,\n\n    /**\n     * Finds a match between a regular expression and a string, and replaces the\n     * matched substring with a new substring.\n     *\n     * @signature function(regexp, aFunction)\n     * @param regexp {Object} A RegExp object. The match is replaced by the\n     *   return value of parameter #2. Or a String that is to be replaced by\n     *   newSubStr.\n     * @param aFunction {Function} A function to be invoked to create the new\n     *   substring (to put in place of the substring received from parameter\n     *   #1).\n     * @return {String} The new substring.\n     */\n    replace : null,\n\n\n    /**\n     * Executes the search for a match between a regular expression and this\n     * String object.\n     *\n     * If successful, search returns the index of the regular expression inside\n     * the string. Otherwise, it returns -1.\n     *\n     * @signature function(regexp)\n     * @param regexp {Object} A regular expression object. If a non-RegExp object\n     *  obj is passed, it is implicitly converted to a RegExp by using\n     *   new RegExp(obj).\n     * @return {Object} The matching RegExp object or -1.\n     *   matches.\n     */\n    search : null,\n\n    /**\n     * Extracts a section of a string and returns a new string.\n     *\n     * Slice extracts the text from one string and returns a new string. Changes\n     * to the text in one string do not affect the other string.\n     * As a negative index, endSlice indicates an offset from the end of the\n     * string.\n     *\n     * @signature function(beginslice, endSlice)\n     * @param beginslice {Integer} The zero-based index at which to begin\n     *   extraction.\n     * @param endSlice {Integer?null} The zero-based index at which to end\n     *   extraction. If omitted, slice extracts to the end of the string.\n     * @return {String} The extracted string.\n     */\n    slice : null,\n\n    /**\n     * Splits a String object into an array of strings by separating the string\n     * into substrings.\n     *\n     * When found, separator is removed from the string and the substrings are\n     * returned in an array. If separator is omitted, the array contains one\n     * element consisting of the entire string.\n     *\n     * If separator is a regular expression that contains capturing parentheses,\n     * then each time separator is matched the results (including any undefined\n     * results) of the capturing parentheses are spliced into the output array.\n     * However, not all browsers support this capability.\n     *\n     * Note: When the string is empty, split returns an array containing one\n     *\n     * @signature function(separator, limit)\n     * @param separator {String?null} Specifies the character to use for\n     *   separating the string. The separator is treated as a string or a regular\n     *   expression. If separator is omitted, the array returned contains one\n     *   element consisting of the entire string.\n     * @param limit {Integer?null} Integer specifying a limit on the number of\n     *   splits to be found.\n     * @return {Array} The Array containing substrings.\n     */\n    split : null,\n\n   /**\n    * Returns the characters in a string beginning at the specified location\n    * through the specified number of characters.\n    *\n    * Start is a character index. The index of the first character is 0, and the\n    * index of the last character is 1 less than the length of the string. substr\n    *  begins extracting characters at start and collects length characters\n    * (unless it reaches the end of the string first, in which case it will\n    * return fewer).\n    * If start is positive and is greater than or equal to the length of the\n    * string, substr returns an empty string.\n    *\n    * @signature function(start, length)\n    * @param start {Integer} Location at which to begin extracting characters\n    *   (an integer between 0 and one less than the length of the string).\n    * @param length {Integer?null} The number of characters to extract.\n    * @return {String} The substring.\n    */\n    substr : null,\n\n    /**\n     * Returns a subset of a String object.\n     *\n     * substring extracts characters from indexA up to but not including indexB.\n     * In particular:\n     * If indexA equals indexB, substring returns an empty string.\n     * If indexB is omitted, substring extracts characters to the end of the\n     * string.\n     * If either argument is less than 0 or is NaN, it is treated as if it were\n     * 0.\n     * If either argument is greater than stringName.length, it is treated as if\n     * it were stringName.length.\n     * If indexA is larger than indexB, then the effect of substring is as if\n     * the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).\n     *\n     * @signature function(indexA, indexB)\n     * @param indexA {Integer} An integer between 0 and one less than the\n     *   length of the string.\n     * @param indexB {Integer?null} (optional) An integer between 0 and the\n     *   length of the string.\n     * @return {String} The subset.\n     */\n    substring : null,\n\n    /**\n     * Returns the calling string value converted to lowercase.\n     * The toLowerCase method returns the value of the string converted to\n     * lowercase. toLowerCase does not affect the value of the string itself.\n     *\n     * @signature function()\n     * @return {String} The new string.\n     */\n    toLowerCase : null,\n\n    /**\n     * Returns the calling string value converted to uppercase.\n     * The toUpperCase method returns the value of the string converted to\n     * uppercase. toUpperCase does not affect the value of the string itself.\n     *\n     * @signature function()\n     * @return {String} The new string.\n     */\n    toUpperCase : null,\n\n\n    /**\n     * Return unique hash code of object\n     *\n     * @return {Integer} unique hash code of the object\n     */\n    toHashCode : function() {\n      return qx.core.ObjectRegistry.toHashCode(this);\n    },\n\n\n   /**\n    * The characters within a string are converted to lower case while\n    * respecting the current locale.\n    *\n    * The toLowerCase method returns the value of the string converted to\n    * lowercase. toLowerCase does not affect the value of the string itself.\n    *\n    * @signature function()\n    * @return {String} The new string.\n    */\n    toLocaleLowerCase : null,\n\n   /**\n    * The characters within a string are converted to upper case while\n    * respecting the current locale.\n    * The toUpperCase method returns the value of the string converted to\n    * uppercase. toUpperCase does not affect the value of the string itself.\n    *\n    * @signature function()\n    * @return {String} The new string.\n    */\n    toLocaleUpperCase : null,\n\n    /**\n     * Call the same method of the super class.\n     *\n     * @param args {arguments} the arguments variable of the calling method\n     * @param varags {var} variable number of arguments passed to the overwritten function\n     * @return {var} the return value of the method of the base class.\n     */\n    base : function(args, varags) {\n      return qx.core.Object.prototype.base.apply(this, arguments);\n    }\n\n\n  },\n\n  /*\n   *****************************************************************************\n      DEFER\n   *****************************************************************************\n   */\n\n   defer : function(statics, members)\n   {\n     // add asserts into each debug build\n     if (qx.core.Environment.get(\"qx.debug\")) {\n       qx.Class.include(statics, qx.core.MAssert);\n     }\n\n     var mappedFunctions = [\n       'charAt',\n       'charCodeAt',\n       'concat',\n       'indexOf',\n       'lastIndexOf',\n       'match',\n       'replace',\n       'search',\n       'slice',\n       'split',\n       'substr',\n       'substring',\n       'toLowerCase',\n       'toUpperCase',\n       'toLocaleLowerCase',\n       'toLocaleUpperCase',\n       'trim'\n     ];\n\n     // feature/bug detection:\n     // Some older Firefox version (<2) break if valueOf is overridden\n     members.valueOf = members.toString;\n     if (new statics(\"\").valueOf() == null) {\n       delete members.valueOf;\n     }\n\n     for (var i=0, l=mappedFunctions.length; i<l; i++) {\n       members[mappedFunctions[i]] = String.prototype[mappedFunctions[i]];\n     }\n   }\n\n});"
  ]
}