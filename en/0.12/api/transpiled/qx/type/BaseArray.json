{
  "className": "qx.type.BaseArray",
  "packageName": "qx.type",
  "name": "BaseArray",
  "superClass": "Array",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 57,
        "column": 0
      },
      "end": {
        "line": 429,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Fabian Jakobs (fjakobs)\n   ======================================================================\n   This class uses ideas and code snippets presented at\n   http://webreflection.blogspot.com/2008/05/habemus-array-unlocked-length-in-ie8.html\n   http://webreflection.blogspot.com/2008/05/stack-and-arrayobject-how-to-create.html\n   Author:\n     Andrea Giammarchi\n   License:\n     MIT: http://www.opensource.org/licenses/mit-license.php\n   ======================================================================\n   This class uses documentation of the native Array methods from the MDC\n   documentation of Mozilla.\n   License:\n     CC Attribution-Sharealike License:\n     http://creativecommons.org/licenses/by-sa/2.5/\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This class is the common superclass for most array classes in\n qooxdoo. It supports all of the shiny 1.6 JavaScript array features\n like <code>forEach</code> and <code>map</code>.\n This class may be instantiated instead of the native Array if\n one wants to work with a feature-unified Array instead of the native\n one. This class uses native features whereever possible but fills\n all missing implementations with custom ones.\n Through the ability to extend from this class one could add even\n more utility features on top of it.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.client.Engine"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Array"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 89,
        "column": 14
      },
      "end": {
        "line": 89,
        "column": 42
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": "<p>Creates a new Array with the given length or the listed elements.\n </p>\n<pre class=\"javascript\">\n var arr1 = new qx.type.BaseArray(arrayLength);\n var arr2 = new qx.type.BaseArray(item0, item1, ..., itemN);\n </pre>\n<ul>\n<li><code>arrayLength</code>: The initial length of the array. You can access\nthis value using the length property. If the value specified is not a\nnumber, an array of length 1 is created, with the first element having\nthe specified value. The maximum length allowed for an\narray is 2^32-1, i.e. 4,294,967,295.</li>\n<li><code>itemN</code>:  A value for the element in that position in the\narray. When this form is used, the array is initialized with the specified\nvalues as its elements, and the array's length property is set to the\nnumber of arguments.</li>\n</ul>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "length_or_items {Integer|var?null} The initial length of the array\n        OR an argument list of values.",
          "paramName": "length_or_items",
          "description": " The initial length of the array\n        OR an argument list of values.",
          "optional": true,
          "defaultValue": "null",
          "type": [
            "Integer",
            "var"
          ]
        }
      ]
    }
  },
  "members": {
    "toArray": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a base array to a native Array</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The native array",
            "type": "qx.type.Array",
            "description": " The native array"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "pop": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 14
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the last element from an array and returns that element.\n This method modifies the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The last element of the array.",
            "type": "var",
            "description": " The last element of the array."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "push": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 15
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds one or more elements to the end of an array and returns the new length of the array.\n This method modifies the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The elements to add to the end of the array.",
            "paramName": "varargs",
            "description": " The elements to add to the end of the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The new array's length",
            "type": "Integer",
            "description": " The new array's length"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "reverse": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\n This method modifies the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns the modified array (works in place)",
            "type": "qx.type.Array",
            "description": " Returns the modified array (works in place)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "shift": {
      "location": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the first element from an array and returns that element.\n This method modifies the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The first element of the array.",
            "type": "var",
            "description": " The first element of the array."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "sort": {
      "location": {
        "start": {
          "line": 167,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 15
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sorts the elements of an array.\n This method modifies the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(compareFunction)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "compareFunction {Function?null} Specifies a function that defines the sort order. If omitted,\n   the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.",
            "paramName": "compareFunction",
            "description": " Specifies a function that defines the sort order. If omitted,\n   the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns the modified array (works in place)",
            "type": "qx.type.Array",
            "description": " Returns the modified array (works in place)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "splice": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds and/or removes elements from an array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(index, howMany, varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index at which to start changing the array. If negative, will begin\n   that many elements from the end.",
            "paramName": "index",
            "description": " Index at which to start changing the array. If negative, will begin\n   that many elements from the end.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "howMany {Integer} An integer indicating the number of old array elements to remove.\n   If <code>howMany</code> is 0, no elements are removed. In this case, you should specify\n   at least one new element.",
            "paramName": "howMany",
            "description": " An integer indicating the number of old array elements to remove.\n   If <code>howMany</code> is 0, no elements are removed. In this case, you should specify\n   at least one new element.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {var?null} The elements to add to the array. If you don't specify any elements,\n   splice simply removes elements from the array.",
            "paramName": "varargs",
            "description": " The elements to add to the array. If you don't specify any elements,\n   splice simply removes elements from the array.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.type.BaseArray} New array with the removed elements.",
            "type": "qx.type.BaseArray",
            "description": " New array with the removed elements."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "unshift": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds one or more elements to the front of an array and returns the new length of the array.\n This method modifies the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The elements to add to the front of the array.",
            "paramName": "varargs",
            "description": " The elements to add to the front of the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The new array's length",
            "type": "Integer",
            "description": " The new array's length"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "concat": {
      "location": {
        "start": {
          "line": 204,
          "column": 4
        },
        "end": {
          "line": 204,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new array comprised of this array joined with other array(s) and/or value(s).\n This method does not modify the array and returns a modified copy of the original.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {Array|var} Arrays and/or values to concatenate to the resulting array.",
            "paramName": "varargs",
            "description": " Arrays and/or values to concatenate to the resulting array.",
            "type": [
              "Array",
              "var"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.type.BaseArray} New array built of the given arrays or values.",
            "type": "qx.type.BaseArray",
            "description": " New array built of the given arrays or values."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "join": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 15
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Joins all elements of an array into a string.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(separator)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator {String} Specifies a string to separate each element of the array. The separator is\n   converted to a string if necessary. If omitted, the array elements are separated with a comma.",
            "paramName": "separator",
            "description": " Specifies a string to separate each element of the array. The separator is\n   converted to a string if necessary. If omitted, the array elements are separated with a comma.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The stringified values of all elements divided by the given separator.",
            "type": "String",
            "description": " The stringified values of all elements divided by the given separator."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Extracts a section of an array and returns a new array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(begin, end)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "begin {Integer} Zero-based index at which to begin extraction. As a negative index, start indicates\n   an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element\n   in the sequence.",
            "paramName": "begin",
            "description": " Zero-based index at which to begin extraction. As a negative index, start indicates\n   an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element\n   in the sequence.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "end {Integer?length} Zero-based index at which to end extraction. slice extracts up to but not including end.\n   <code>slice(1,4)</code> extracts the second element through the fourth element (elements indexed 1, 2, and 3).\n   As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\n   If end is omitted, slice extracts to the end of the sequence.",
            "paramName": "end",
            "description": " Zero-based index at which to end extraction. slice extracts up to but not including end.\n   <code>slice(1,4)</code> extracts the second element through the fourth element (elements indexed 1, 2, and 3).\n   As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\n   If end is omitted, slice extracts to the end of the sequence.",
            "optional": true,
            "defaultValue": "length",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.type.BaseArray} An new array which contains a copy of the given region.",
            "type": "qx.type.BaseArray",
            "description": " An new array which contains a copy of the given region."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(searchElement, fromIndex)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "searchElement {var} Element to locate in the array.",
            "paramName": "searchElement",
            "description": " Element to locate in the array.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "fromIndex {Integer?0} The index at which to begin the search. Defaults to 0, i.e. the\n   whole array will be searched. If the index is greater than or equal to the length of the\n   array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as\n   the offset from the end of the array. Note that even when the index is negative, the array\n   is still searched from front to back. If the calculated index is less than 0, the whole\n   array will be searched.",
            "paramName": "fromIndex",
            "description": " The index at which to begin the search. Defaults to 0, i.e. the\n   whole array will be searched. If the index is greater than or equal to the length of the\n   array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as\n   the offset from the end of the array. Note that even when the index is negative, the array\n   is still searched from front to back. If the calculated index is less than 0, the whole\n   array will be searched.",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index of the given element",
            "type": "Integer",
            "description": " The index of the given element"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "lastIndexOf": {
      "location": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(searchElement, fromIndex)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "searchElement {var} Element to locate in the array.",
            "paramName": "searchElement",
            "description": " Element to locate in the array.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "fromIndex {Integer?length} The index at which to start searching backwards. Defaults to\n   the array's length, i.e. the whole array will be searched. If the index is greater than\n   or equal to the length of the array, the whole array will be searched. If negative, it\n   is taken as the offset from the end of the array. Note that even when the index is\n   negative, the array is still searched from back to front. If the calculated index is\n   less than 0, -1 is returned, i.e. the array will not be searched.",
            "paramName": "fromIndex",
            "description": " The index at which to start searching backwards. Defaults to\n   the array's length, i.e. the whole array will be searched. If the index is greater than\n   or equal to the length of the array, the whole array will be searched. If negative, it\n   is taken as the offset from the end of the array. Note that even when the index is\n   negative, the array is still searched from back to front. If the calculated index is\n   less than 0, -1 is returned, i.e. the array will not be searched.",
            "optional": true,
            "defaultValue": "length",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index of the given element",
            "type": "Integer",
            "description": " The index of the given element"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 297,
          "column": 4
        },
        "end": {
          "line": 297,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes a provided function once per array element.\n <code>forEach</code> executes the provided function (<code>callback</code>) once for each\n element present in the array.  <code>callback</code> is invoked only for indexes of the array\n which have assigned values; it is not invoked for indexes which have been deleted or which\n have never been assigned values.\n <code>callback</code> is invoked with three arguments: the value of the element, the index\n of the element, and the Array object being traversed.\n If a <code>obj</code> parameter is provided to <code>forEach</code>, it will be used\n as the <code>this</code> for each invocation of the <code>callback</code>.  If it is not\n provided, or is <code>null</code>, the global object associated with <code>callback</code>\n is used instead.\n <code>forEach</code> does not mutate the array on which it is called.\n The range of elements processed by <code>forEach</code> is set before the first invocation of\n <code>callback</code>.  Elements which are appended to the array after the call to\n <code>forEach</code> begins will not be visited by <code>callback</code>. If existing elements\n of the array are changed, or deleted, their value as passed to <code>callback</code> will be\n the value at the time <code>forEach</code> visits them; elements that are deleted are not visited.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(callback, obj)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function to execute for each element.",
            "paramName": "callback",
            "description": " Function to execute for each element.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "obj {Object} Object to use as this when executing callback.",
            "paramName": "obj",
            "description": " Object to use as this when executing callback.",
            "type": "Object"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 332,
          "column": 4
        },
        "end": {
          "line": 332,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new array with all elements that pass the test implemented by the provided\n function.\n <code>filter</code> calls a provided <code>callback</code> function once for each\n element in an array, and constructs a new array of all the values for which\n <code>callback</code> returns a true value.  <code>callback</code> is invoked only\n for indexes of the array which have assigned values; it is not invoked for indexes\n which have been deleted or which have never been assigned values.  Array elements which\n do not pass the <code>callback</code> test are simply skipped, and are not included\n in the new array.\n <code>callback</code> is invoked with three arguments: the value of the element, the\n index of the element, and the Array object being traversed.\n If a <code>obj</code> parameter is provided to <code>filter</code>, it will\n be used as the <code>this</code> for each invocation of the <code>callback</code>.\n If it is not provided, or is <code>null</code>, the global object associated with\n <code>callback</code> is used instead.\n <code>filter</code> does not mutate the array on which it is called. The range of\n elements processed by <code>filter</code> is set before the first invocation of\n <code>callback</code>. Elements which are appended to the array after the call to\n <code>filter</code> begins will not be visited by <code>callback</code>. If existing\n elements of the array are changed, or deleted, their value as passed to <code>callback</code>\n will be the value at the time <code>filter</code> visits them; elements that are deleted\n are not visited.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(callback, obj)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function to test each element of the array.",
            "paramName": "callback",
            "description": " Function to test each element of the array.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.",
            "paramName": "obj",
            "description": " Object to use as <code>this</code> when executing <code>callback</code>.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.type.BaseArray} The newly created array with all matching elements",
            "type": "qx.type.BaseArray",
            "description": " The newly created array with all matching elements"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 362,
          "column": 14
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new array with the results of calling a provided function on every element in this array.\n <code>map</code> calls a provided <code>callback</code> function once for each element in an array,\n in order, and constructs a new array from the results.  <code>callback</code> is invoked only for\n indexes of the array which have assigned values; it is not invoked for indexes which have been\n deleted or which have never been assigned values.\n <code>callback</code> is invoked with three arguments: the value of the element, the index of the\n element, and the Array object being traversed.\n If a <code>obj</code> parameter is provided to <code>map</code>, it will be used as the\n <code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n <code>null</code>, the global object associated with <code>callback</code> is used instead.\n <code>map</code> does not mutate the array on which it is called.\n The range of elements processed by <code>map</code> is set before the first invocation of\n <code>callback</code>. Elements which are appended to the array after the call to <code>map</code>\n begins will not be visited by <code>callback</code>.  If existing elements of the array are changed,\n or deleted, their value as passed to <code>callback</code> will be the value at the time\n <code>map</code> visits them; elements that are deleted are not visited.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(callback, obj)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function produce an element of the new Array from an element of the current one.",
            "paramName": "callback",
            "description": " Function produce an element of the new Array from an element of the current one.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.",
            "paramName": "obj",
            "description": " Object to use as <code>this</code> when executing <code>callback</code>.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.type.BaseArray} A new array which contains the return values of every item executed through the given function",
            "type": "qx.type.BaseArray",
            "description": " A new array which contains the return values of every item executed through the given function"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 395,
          "column": 4
        },
        "end": {
          "line": 395,
          "column": 15
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether some element in the array passes the test implemented by the provided function.\n <code>some</code> executes the <code>callback</code> function once for each element present in\n the array until it finds one where <code>callback</code> returns a true value. If such an element\n is found, <code>some</code> immediately returns <code>true</code>. Otherwise, <code>some</code>\n returns <code>false</code>. <code>callback</code> is invoked only for indexes of the array which\n have assigned values; it is not invoked for indexes which have been deleted or which have never\n been assigned values.\n <code>callback</code> is invoked with three arguments: the value of the element, the index of the\n element, and the Array object being traversed.\n If a <code>obj</code> parameter is provided to <code>some</code>, it will be used as the\n <code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\n <code>null</code>, the global object associated with <code>callback</code> is used instead.\n <code>some</code> does not mutate the array on which it is called.\n The range of elements processed by <code>some</code> is set before the first invocation of\n <code>callback</code>.  Elements that are appended to the array after the call to <code>some</code>\n begins will not be visited by <code>callback</code>. If an existing, unvisited element of the array\n is changed by <code>callback</code>, its value passed to the visiting <code>callback</code> will\n be the value at the time that <code>some</code> visits that element's index; elements that are\n deleted are not visited.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(callback, obj)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function to test for each element.",
            "paramName": "callback",
            "description": " Function to test for each element.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.",
            "paramName": "obj",
            "description": " Object to use as <code>this</code> when executing <code>callback</code>.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether at least one elements passed the test",
            "type": "Boolean",
            "description": " Whether at least one elements passed the test"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "every": {
      "location": {
        "start": {
          "line": 427,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether all elements in the array pass the test implemented by the provided function.\n <code>every</code> executes the provided <code>callback</code> function once for each element\n present in the array until it finds one where <code>callback</code> returns a false value. If\n such an element is found, the <code>every</code> method immediately returns <code>false</code>.\n Otherwise, if <code>callback</code> returned a true value for all elements, <code>every</code>\n will return <code>true</code>.  <code>callback</code> is invoked only for indexes of the array\n which have assigned values; it is not invoked for indexes which have been deleted or which have\n never been assigned values.\n <code>callback</code> is invoked with three arguments: the value of the element, the index of\n the element, and the Array object being traversed.\n If a <code>obj</code> parameter is provided to <code>every</code>, it will be used as\n the <code>this</code> for each invocation of the <code>callback</code>. If it is not provided,\n or is <code>null</code>, the global object associated with <code>callback</code> is used instead.\n <code>every</code> does not mutate the array on which it is called. The range of elements processed\n by <code>every</code> is set before the first invocation of <code>callback</code>. Elements which\n are appended to the array after the call to <code>every</code> begins will not be visited by\n <code>callback</code>.  If existing elements of the array are changed, their value as passed\n to <code>callback</code> will be the value at the time <code>every</code> visits them; elements\n that are deleted are not visited.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(callback, obj)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function to test for each element.",
            "paramName": "callback",
            "description": " Function to test for each element.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.",
            "paramName": "obj",
            "description": " Object to use as <code>this</code> when executing <code>callback</code>.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether all elements passed the test",
            "type": "Boolean",
            "description": " Whether all elements passed the test"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "descendants": [
    "qx.type.Array",
    "qx.util.StringBuilder",
    "qxWeb"
  ]
}