{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/lang/String.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__unicodeLetters",
    "__unicodeFirstLetterInWordRegexp",
    "__stringsMap",
    "camelCase",
    "str",
    "result",
    "replace",
    "match",
    "chr",
    "toUpperCase",
    "indexOf",
    "hyphenate",
    "charAt",
    "toLowerCase",
    "capitalize",
    "unicodeEscapePrefix",
    "RegExp",
    "clean",
    "trim",
    "trimLeft",
    "trimRight",
    "startsWith",
    "fullstr",
    "substr",
    "endsWith",
    "repeat",
    "times",
    "length",
    "Array",
    "join",
    "pad",
    "ch",
    "padLength",
    "firstUp",
    "firstLow",
    "contains",
    "substring",
    "format",
    "pattern",
    "args",
    "regexp",
    "isArray",
    "argsIsObject",
    "matchedSubString",
    "numberArgument",
    "namedArgument",
    "index",
    "escapeRegexpChars",
    "toArray",
    "split",
    "stripTags",
    "stripScripts",
    "exec",
    "scripts",
    "text",
    "arguments",
    "lang",
    "Function",
    "globalEval",
    "quote",
    "String"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;AASAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,gBAApB,EACA;AACEC,IAAAA,OAAO,EACP;AAEE;;;AAGAC,MAAAA,gBAAgB,EAAG,2sFALrB;;AAOE;;;AAGAC,MAAAA,gCAAgC,EAAG,IAVrC;;AAYE;;;;AAIAC,MAAAA,YAAY,EAAG,EAhBjB;;AAkBE;;;;;;;;;AASAC,MAAAA,SAAS,EAAG,mBAASC,GAAT,EACZ;AACE,YAAIC,MAAM,GAAG,KAAKH,YAAL,CAAkBE,GAAlB,CAAb;;AACA,YAAI,CAACC,MAAL,EAAa;AACXA,UAAAA,MAAM,GAAGD,GAAG,CAACE,OAAJ,CAAY,YAAZ,EAA0B,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AACtD,mBAAOA,GAAG,CAACC,WAAJ,EAAP;AACD,WAFQ,CAAT;;AAGA,cAAIL,GAAG,CAACM,OAAJ,CAAY,GAAZ,KAAoB,CAAxB,EAA2B;AACzB,iBAAKR,YAAL,CAAkBE,GAAlB,IAAyBC,MAAzB;AACD;AACF;;AACD,eAAOA,MAAP;AACD,OAvCH;;AA0CE;;;;;;;;;AASAM,MAAAA,SAAS,EAAE,mBAASP,GAAT,EACX;AACE,YAAIC,MAAM,GAAG,KAAKH,YAAL,CAAkBE,GAAlB,CAAb;;AACA,YAAI,CAACC,MAAL,EAAa;AACXA,UAAAA,MAAM,GAAGD,GAAG,CAACE,OAAJ,CAAY,QAAZ,EAAsB,UAASC,KAAT,EAAe;AAC5C,mBAAS,MAAMA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgBC,WAAhB,EAAf;AACD,WAFQ,CAAT;;AAGA,cAAIT,GAAG,CAACM,OAAJ,CAAY,GAAZ,KAAoB,CAAC,CAAzB,EAA4B;AAC1B,iBAAKR,YAAL,CAAkBE,GAAlB,IAAyBC,MAAzB;AACD;AACF;;AACD,eAAOA,MAAP;AACD,OA/DH;;AAkEE;;;;;;;;;AASAS,MAAAA,UAAU,EAAE,oBAASV,GAAT,EAAa;AACvB,YAAG,KAAKH,gCAAL,KAA0C,IAA7C,EAAmD;AACjD,cAAIc,mBAAmB,GAAG,KAA1B;AACA,eAAKd,gCAAL,GAAwC,IAAIe,MAAJ,CAAW,UAAU,KAAKhB,gBAAL,CAAsBM,OAAtB,CAA8B,cAA9B,EAA6C,UAASC,KAAT,EAAe;AAAC,mBAAOQ,mBAAmB,GAACR,KAA3B;AAAkC,WAA/F,CAAV,GAA6G,KAA7G,GAAqH,KAAKP,gBAAL,CAAsBM,OAAtB,CAA8B,cAA9B,EAA6C,UAASC,KAAT,EAAe;AAAC,mBAAOQ,mBAAmB,GAACR,KAA3B;AAAkC,WAA/F,CAArH,GAAwN,GAAnO,EAAwO,GAAxO,CAAxC;AACD;;AACD,eAAOH,GAAG,CAACE,OAAJ,CAAY,KAAKL,gCAAjB,EAAmD,UAASM,KAAT,EAAgB;AACxE,iBAAOA,KAAK,CAACE,WAAN,EAAP;AACD,SAFM,CAAP;AAGD,OAnFH;;AAsFE;;;;;;;;;;;;;;AAcAQ,MAAAA,KAAK,EAAE,eAASb,GAAT,EAAa;AAClB,eAAOA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,EAAyBY,IAAzB,EAAP;AACD,OAtGH;;AAyGE;;;;;;AAMAC,MAAAA,QAAQ,EAAG,kBAASf,GAAT,EAAc;AACvB,eAAOA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAP;AACD,OAjHH;;AAoHE;;;;;;AAMAc,MAAAA,SAAS,EAAG,mBAAShB,GAAT,EAAc;AACxB,eAAOA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAP;AACD,OA5HH;;AA+HE;;;;;;;;;AASAe,MAAAA,UAAU,EAAG,oBAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACrC,eAAOD,OAAO,CAACD,UAAR,CAAmBE,MAAnB,CAAP;AACD,OA1IH;;AA6IE;;;;;;;;;AASAC,MAAAA,QAAQ,EAAG,kBAASF,OAAT,EAAkBC,MAAlB,EAA0B;AACnC,eAAOD,OAAO,CAACE,QAAR,CAAiBD,MAAjB,CAAP;AACD,OAxJH;;AA2JE;;;;;;;AAOAE,MAAAA,MAAM,EAAG,gBAASrB,GAAT,EAAcsB,KAAd,EAAqB;AAC5B,eAAOtB,GAAG,CAACuB,MAAJ,GAAa,CAAb,GAAiB,IAAIC,KAAJ,CAAUF,KAAK,GAAG,CAAlB,EAAqBG,IAArB,CAA0BzB,GAA1B,CAAjB,GAAkD,EAAzD;AACD,OApKH;;AAuKE;;;;;;;;AAQA0B,MAAAA,GAAG,EAAG,aAAS1B,GAAT,EAAcuB,MAAd,EAAsBI,EAAtB,EACN;AACE,YAAIC,SAAS,GAAGL,MAAM,GAAGvB,GAAG,CAACuB,MAA7B;;AACA,YAAIK,SAAS,GAAG,CAAhB,EACA;AACE,cAAI,OAAOD,EAAP,KAAc,WAAlB,EAA+B;AAC7BA,YAAAA,EAAE,GAAG,GAAL;AACD;;AACD,iBAAO,KAAKN,MAAL,CAAYM,EAAZ,EAAgBC,SAAhB,IAA6B5B,GAApC;AACD,SAND,MAQA;AACE,iBAAOA,GAAP;AACD;AACF,OA7LH;;AAgME;;;;;;;AAOA6B,MAAAA,OAAO,EAAGvC,EAAE,CAACC,SAAH,CAAasC,OAvMzB;;AA0ME;;;;;;;AAOAC,MAAAA,QAAQ,EAAGxC,EAAE,CAACC,SAAH,CAAauC,QAjN1B;;AAoNE;;;;;;;AAOAC,MAAAA,QAAQ,EAAG,kBAAS/B,GAAT,EAAcgC,SAAd,EAAyB;AAClC,eAAOhC,GAAG,CAACM,OAAJ,CAAY0B,SAAZ,KAA0B,CAAC,CAAlC;AACD,OA7NH;;AAgOE;;;;;;;;;;;;;;AAcAC,MAAAA,MAAM,EAAG,gBAASC,OAAT,EAAkBC,IAAlB,EACT;AACE,YAAInC,GAAG,GAAGkC,OAAV;AACA,YAAIE,MAAM,GAAG,kBAAb;;AACA,YAAI,CAACZ,KAAK,CAACa,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxBA,UAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AAED,YAAIG,YAAY,GAAIH,IAAI,CAACZ,MAAL,KAAgB,CAAhB,IAAqB,QAAOY,IAAI,CAAC,CAAD,CAAX,MAAmB,QAA5D;AAEAnC,QAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAYkC,MAAZ,EAAoB,UAASG,gBAAT,EAA2BC,cAA3B,EAA2CC,aAA3C,EAA0D;AAClF,cAAIA,aAAJ,EAAmB;AACjB,gBAAIH,YAAJ,EAAkB;AAChB,qBAAOH,IAAI,CAAC,CAAD,CAAJ,CAAQM,aAAR,CAAP;AACD;;AAED,mBAAOA,aAAP;AACD;;AAED,cAAID,cAAc,IAAIA,cAAc,GAAG,CAAnC,IAAwCL,IAAI,CAACZ,MAAL,IAAeiB,cAA3D,EAA2E;AACzE,gBAAIE,KAAK,GAAGF,cAAc,GAAG,CAA7B;AACA,mBAAOL,IAAI,CAACO,KAAD,CAAX;AACD;;AAED,iBAAOH,gBAAP;AACD,SAfK,CAAN;AAgBA,eAAOvC,GAAP;AACD,OAzQH;;AA4QE;;;;;;AAMA2C,MAAAA,iBAAiB,EAAG,2BAAS3C,GAAT,EAAc;AAChC,eAAOA,GAAG,CAACE,OAAJ,CAAY,yBAAZ,EAAuC,MAAvC,CAAP;AACD,OApRH;;AAuRE;;;;;;;AAOA0C,MAAAA,OAAO,EAAG,iBAAS5C,GAAT,EAAc;AACtB,eAAOA,GAAG,CAAC6C,KAAJ,CAAU,QAAV,CAAP;AACD,OAhSH;;AAmSE;;;;;;;;AAQAC,MAAAA,SAAS,EAAG,mBAAS9C,GAAT,EAAc;AACxB,eAAOA,GAAG,CAACE,OAAJ,CAAY,cAAZ,EAA4B,EAA5B,CAAP;AACD,OA7SH;;AAgTE;;;;;;;AAOA6C,MAAAA,YAAY,EAAE,sBAAS/C,GAAT,EAAcgD,IAAd,EACd;AACE,YAAIC,OAAO,GAAG,EAAd;AACA,YAAIC,IAAI,GAAGlD,GAAG,CAACE,OAAJ,CAAY,qCAAZ,EAAmD,YAC9D;AACE+C,UAAAA,OAAO,IAAIE,SAAS,CAAC,CAAD,CAAT,GAAe,IAA1B;AACA,iBAAO,EAAP;AACD,SAJU,CAAX;;AAMA,YAAIH,IAAI,KAAK,IAAb,EAAmB;AACjB1D,UAAAA,EAAE,CAAC8D,IAAH,CAAQC,QAAR,CAAiBC,UAAjB,CAA4BL,OAA5B;AACD;;AAED,eAAOC,IAAP;AACD,OArUH;;AAwUE;;;;;AAKAK,MAAAA,KAAK,EAAG,eAASvD,GAAT,EAAc;AACpB,eAAO,MAAMA,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmB,MAAnB,EAA2BA,OAA3B,CAAmC,KAAnC,EAA0C,MAA1C,CAAN,GAA0D,GAAjE;AACD;AA/UH;AAFF,GADA;AAzDAZ,EAAAA,EAAE,CAAC8D,IAAH,CAAQI,MAAR,CAAe/D,aAAf,GAA+BA,aAA/B",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Mootools\n     http://mootools.net/\n     Version 1.1.1\n\n     Copyright:\n       (c) 2007 Valerio Proietti\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n   and\n\n   * XRegExp\n   http://xregexp.com/\n   Version 1.5\n\n   Copyright:\n       (c) 2006-2007, Steven Levithan <http://stevenlevithan.com>\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       * Steven Levithan\n\n************************************************************************ */\n\n/**\n * String helper functions\n *\n * The native JavaScript String is not modified by this class. However,\n * there are modifications to the native String in {@link qx.lang.normalize.String} for\n * browsers that do not support certain features.\n *\n * @require(qx.lang.normalize.String)\n */\nqx.Bootstrap.define(\"qx.lang.String\",\n{\n  statics :\n  {\n\n    /**\n     * Unicode letters.  they are taken from Steve Levithan's excellent XRegExp library [http://xregexp.com/addons/unicode/unicode-base.js]\n     */\n    __unicodeLetters : \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05250531-055605590561-058705D0-05EA05F0-05F20621-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280904-0939093D09500958-0961097109720979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10D05-0D0C0D0E-0D100D12-0D280D2A-0D390D3D0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC0EDD0F000F40-0F470F49-0F6C0F88-0F8B1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510D0-10FA10FC1100-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209421022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2D00-2D252D30-2D652D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31B731F0-31FF3400-4DB54E00-9FCBA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A65FA662-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78BA78CA7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA2DFA30-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\n\n    /**\n     * A RegExp that matches the first letter in a word - unicode aware\n     */\n    __unicodeFirstLetterInWordRegexp : null,\n\n    /**\n     * @type {Map} Cache for often used string operations [camelCasing and hyphenation]\n     * e.g. marginTop => margin-top\n     */\n    __stringsMap : {},\n\n    /**\n     * Converts a hyphenated string (separated by '-') to camel case.\n     *\n     * Example:\n     * <pre class='javascript'>qx.lang.String.camelCase(\"I-like-cookies\"); //returns \"ILikeCookies\"</pre>\n     *\n     * @param str {String} hyphenated string\n     * @return {String} camelcase string\n     */\n    camelCase : function(str)\n    {\n      var result = this.__stringsMap[str];\n      if (!result) {\n        result = str.replace(/\\-([a-z])/g, function(match, chr) {\n          return chr.toUpperCase();\n        });\n        if (str.indexOf(\"-\") >= 0) {\n          this.__stringsMap[str] = result;\n        }\n      }\n      return result;\n    },\n\n\n    /**\n     * Converts a camelcased string to a hyphenated (separated by '-') string.\n     *\n     * Example:\n     * <pre class='javascript'>qx.lang.String.hyphenate(\"weLikeCookies\"); //returns \"we-like-cookies\"</pre>\n     *\n     * @param str {String} camelcased string\n     * @return {String} hyphenated string\n     */\n    hyphenate: function(str)\n    {\n      var result = this.__stringsMap[str];\n      if (!result) {\n        result = str.replace(/[A-Z]/g, function(match){\n          return  ('-' + match.charAt(0).toLowerCase());\n        });\n        if (str.indexOf(\"-\") == -1) {\n          this.__stringsMap[str] = result;\n        }\n      }\n      return result;\n    },\n\n\n    /**\n     * Converts a string to camel case.\n     *\n     * Example:\n     * <pre class='javascript'>qx.lang.String.camelCase(\"i like cookies\"); //returns \"I Like Cookies\"</pre>\n     *\n     * @param str {String} any string\n     * @return {String} capitalized string\n     */\n    capitalize: function(str){\n      if(this.__unicodeFirstLetterInWordRegexp === null) {\n        var unicodeEscapePrefix = '\\\\u';\n        this.__unicodeFirstLetterInWordRegexp = new RegExp(\"(^|[^\" + this.__unicodeLetters.replace(/[0-9A-F]{4}/g,function(match){return unicodeEscapePrefix+match;}) + \"])[\" + this.__unicodeLetters.replace(/[0-9A-F]{4}/g,function(match){return unicodeEscapePrefix+match;}) + \"]\", \"g\");\n      }\n      return str.replace(this.__unicodeFirstLetterInWordRegexp, function(match) {\n        return match.toUpperCase();\n      });\n    },\n\n\n    /**\n     * Removes all extraneous whitespace from a string and trims it\n     *\n     * Example:\n     *\n     * <code>\n     * qx.lang.String.clean(\" i      like     cookies      \\n\\n\");\n     * </code>\n     *\n     * Returns \"i like cookies\"\n     *\n     * @param str {String} the string to clean up\n     * @return {String} Cleaned up string\n     */\n    clean: function(str){\n      return str.replace(/\\s+/g, ' ').trim();\n    },\n\n\n    /**\n     * removes white space from the left side of a string\n     *\n     * @param str {String} the string to trim\n     * @return {String} the trimmed string\n     */\n    trimLeft : function(str) {\n      return str.replace(/^\\s+/, \"\");\n    },\n\n\n    /**\n     * removes white space from the right side of a string\n     *\n     * @param str {String} the string to trim\n     * @return {String} the trimmed string\n     */\n    trimRight : function(str) {\n      return str.replace(/\\s+$/, \"\");\n    },\n\n\n    /**\n     * Check whether the string starts with the given substring\n     *\n     * @deprecated {6.0} Please use String instance startsWith method instead\n     *\n     * @param fullstr {String} the string to search in\n     * @param substr {String} the substring to look for\n     * @return {Boolean} whether the string starts with the given substring\n     */\n    startsWith : function(fullstr, substr) {\n      return fullstr.startsWith(substr);\n    },\n\n\n    /**\n     * Check whether the string ends with the given substring\n     *\n     * @deprecated {6.0} Please use String instance endsWith method instead\n     *\n     * @param fullstr {String} the string to search in\n     * @param substr {String} the substring to look for\n     * @return {Boolean} whether the string ends with the given substring\n     */\n    endsWith : function(fullstr, substr) {\n      return fullstr.endsWith(substr);\n    },\n\n\n    /**\n     * Returns a string, which repeats a string 'length' times\n     *\n     * @param str {String} string used to repeat\n     * @param times {Integer} the number of repetitions\n     * @return {String} repeated string\n     */\n    repeat : function(str, times) {\n      return str.length > 0 ? new Array(times + 1).join(str) : \"\";\n    },\n\n\n    /**\n     * Pad a string up to a given length. Padding characters are added to the left of the string.\n     *\n     * @param str {String} the string to pad\n     * @param length {Integer} the final length of the string\n     * @param ch {String} character used to fill up the string\n     * @return {String} padded string\n     */\n    pad : function(str, length, ch)\n    {\n      var padLength = length - str.length;\n      if (padLength > 0)\n      {\n        if (typeof ch === \"undefined\") {\n          ch = \"0\";\n        }\n        return this.repeat(ch, padLength) + str;\n      }\n      else\n      {\n        return str;\n      }\n    },\n\n\n    /**\n     * Convert the first character of the string to upper case.\n     *\n     * @signature function(str)\n     * @param str {String} the string\n     * @return {String} the string with an upper case first character\n     */\n    firstUp : qx.Bootstrap.firstUp,\n\n\n    /**\n     * Convert the first character of the string to lower case.\n     *\n     * @signature function(str)\n     * @param str {String} the string\n     * @return {String} the string with a lower case first character\n     */\n    firstLow : qx.Bootstrap.firstLow,\n\n\n    /**\n     * Check whether the string contains a given substring\n     *\n     * @param str {String} the string\n     * @param substring {String} substring to search for\n     * @return {Boolean} whether the string contains the substring\n     */\n    contains : function(str, substring) {\n      return str.indexOf(substring) != -1;\n    },\n\n\n    /**\n     * Print a list of arguments using a format string\n     * In the format string occurrences of %n are replaced by the n'th element of the args list.\n     * You can give an object as argument.\n     * In this case you should specify namedArgument in your string with %{namedArgument}.\n     * The named argument will be replace by the value of the property of the object named \"namedArgument\"\n     * Example:\n     * <pre class='javascript'>qx.lang.String.format(\"Hello %1, my name is %2\", [\"Egon\", \"Franz\"]) == \"Hello Egon, my name is Franz\"</pre>\n     * <pre class='javascript'>qx.lang.String.format(\"Hello %{yourName}, my name is %{myName}\", {yourName: \"Egon\", myName: \"Franz\"}) == \"Hello Egon, my name is Franz\"</pre>\n     *\n     * @param pattern {String} format string\n     * @param args {Array} array of arguments to insert into the format string\n     * @return {String} the formatted string\n     */\n    format : function(pattern, args)\n    {\n      var str = pattern;\n      var regexp = /%(\\d+)|%{(\\S*)}/g;\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n\n      var argsIsObject = (args.length === 1 && typeof args[0] === \"object\");\n\n      str = str.replace(regexp, function(matchedSubString, numberArgument, namedArgument) {\n        if (namedArgument) {\n          if (argsIsObject) {\n            return args[0][namedArgument];\n          }\n\n          return namedArgument;\n        }\n\n        if (numberArgument && numberArgument > 0 && args.length >= numberArgument) {\n          var index = numberArgument - 1;\n          return args[index];\n        }\n\n        return matchedSubString;\n      });\n      return str;\n    },\n\n\n    /**\n     * Escapes all chars that have a special meaning in regular expressions\n     *\n     * @param str {String} the string where to escape the chars.\n     * @return {String} the string with the escaped chars.\n     */\n    escapeRegexpChars : function(str) {\n      return str.replace(/([.*+?^${}()|[\\]\\/\\\\])/g, '\\\\$1');\n    },\n\n\n    /**\n     * Converts a string to an array of characters.\n     * <pre>\"hello\" => [ \"h\", \"e\", \"l\", \"l\", \"o\" ];</pre>\n     *\n     * @param str {String} the string which should be split\n     * @return {Array} the result array of characters\n     */\n    toArray : function(str) {\n      return str.split(/\\B|\\b/g);\n    },\n\n\n    /**\n     * Remove HTML/XML tags from a string\n     * Example:\n     * <pre class='javascript'>qx.lang.String.stripTags(\"&lt;h1>Hello&lt;/h1>\") == \"Hello\"</pre>\n     *\n     * @param str {String} string containing tags\n     * @return {String} the string with stripped tags\n     */\n    stripTags : function(str) {\n      return str.replace(/<\\/?[^>]+>/gi, \"\");\n    },\n\n\n    /**\n     * Strips <script> tags including its content from the given string.\n     *\n     * @param str {String} string containing tags\n     * @param exec {Boolean?false} Whether the filtered code should be executed\n     * @return {String} The filtered string\n     */\n    stripScripts: function(str, exec)\n    {\n      var scripts = \"\";\n      var text = str.replace(/<script[^>]*>([\\s\\S]*?)<\\/script>/gi, function()\n      {\n        scripts += arguments[1] + '\\n';\n        return \"\";\n      });\n\n      if (exec === true) {\n        qx.lang.Function.globalEval(scripts);\n      }\n\n      return text;\n    },\n\n\n    /**\n     * Quotes the given string.\n     * @param str {String} String to quote.\n     * @return {String} The quoted string.\n     */\n    quote : function(str) {\n      return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\\"/g, \"\\\\\\\"\") + '\"';\n    }\n  }\n});\n"
  ]
}