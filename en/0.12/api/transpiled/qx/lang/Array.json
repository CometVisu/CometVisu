{
  "className": "qx.lang.Array",
  "packageName": "qx.lang",
  "name": "Array",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 56,
        "column": 0
      },
      "end": {
        "line": 680,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n   ======================================================================\n   This class contains code based on the following work:\n jQuery\n     http://jquery.com\n     Version 1.3.1\n     Copyright:\n       2009 John Resig\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n Underscore.js\n     http://underscorejs.org\n     Copyright:\n       2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Static helper functions for arrays with a lot of often used convenience\n methods like <code>remove</code> or <code>contains</code>.\n The native JavaScript Array is not modified by this class. However,\n there are modifications to the native Array in {@link qx.lang.normalize.Array} for\n browsers that do not support certain JavaScript features natively .</p>"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.data"
        },
        {
          "name": "@ignore",
          "body": "qx.data.IListData"
        },
        {
          "name": "@ignore",
          "body": "qx.Class.*"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.lang.normalize.Date"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "cast": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts an array like object to any other array like\n object.\n Attention: The returned array may be same\n instance as the incoming one if the constructor is identical!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {var} any array-like object",
            "paramName": "object",
            "description": " any array-like object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "constructor {Function} constructor of the new instance",
            "paramName": "constructor",
            "description": " constructor of the new instance",
            "type": "qx.lang.Function"
          },
          {
            "name": "@param",
            "body": "offset {Integer?0} position to start from",
            "paramName": "offset",
            "description": " position to start from",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the converted array",
            "type": "qx.lang.Array",
            "description": " the converted array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fromArguments": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert an arguments object into an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} arguments object",
            "paramName": "args",
            "description": " arguments object",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "offset {Integer?0} position to start from",
            "paramName": "offset",
            "description": " position to start from",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} a newly created array (copy) with the content of the arguments object.",
            "type": "qx.lang.Array",
            "description": " a newly created array (copy) with the content of the arguments object."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fromCollection": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert a (node) collection into an array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coll {var} node collection",
            "paramName": "coll",
            "description": " node collection",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} a newly created array (copy) with the content of the node collection.",
            "type": "qx.lang.Array",
            "description": " a newly created array (copy) with the content of the node collection."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fromShortHand": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Expand shorthand definition to a four element list.\n This is an utility function for padding/margin and all other shorthand handling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "input {Array} arr with one to four elements",
            "paramName": "input",
            "description": " arr with one to four elements",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an arr with four elements",
            "type": "qx.lang.Array",
            "description": " an arr with four elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clone": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a copy of the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array to copy",
            "paramName": "arr",
            "description": " the array to copy",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} copy of the array",
            "type": "qx.lang.Array",
            "description": " copy of the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAt": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element at a given position into the array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "obj {var} the element to insert",
            "paramName": "obj",
            "description": " the element to insert",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "i {Integer} position where to insert the element into the array",
            "paramName": "i",
            "description": " position where to insert the element into the array",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "qx.lang.Array",
            "description": " the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertBefore": {
      "location": {
        "start": {
          "line": 219,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array before a given second element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 before this object",
            "paramName": "obj2",
            "description": " insert obj1 before this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "qx.lang.Array",
            "description": " the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAfter": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array after a given second element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 after this object",
            "paramName": "obj2",
            "description": " insert obj1 after this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "qx.lang.Array",
            "description": " the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 262,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array at the given index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "i {Integer} index of the element to be removed",
            "paramName": "i",
            "description": " index of the element to be removed",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed element.",
            "type": "var",
            "description": " The removed element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 273,
          "column": 4
        },
        "end": {
          "line": 277,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all elements from the array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} empty array",
            "type": "qx.lang.Array",
            "description": " empty array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "append": {
      "location": {
        "start": {
          "line": 288,
          "column": 4
        },
        "end": {
          "line": 307,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append the elements of an array to the array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} the array",
            "paramName": "arr1",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} the elements of this array will be appended to other one",
            "paramName": "arr2",
            "description": " the elements of this array will be appended to other one",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "qx.lang.Array",
            "description": " The modified array."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the arguments is not an array",
            "type": "Error",
            "description": " if one of the arguments is not an array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 319,
          "column": 4
        },
        "end": {
          "line": 341,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Modifies the first array as it removes all elements\n which are listed in the second array as well.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} the array",
            "paramName": "arr1",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} the elements of this array will be excluded from the other one",
            "paramName": "arr2",
            "description": " the elements of this array will be excluded from the other one",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "qx.lang.Array",
            "description": " The modified array."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the arguments is not an array",
            "type": "Error",
            "description": " if one of the arguments is not an array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 351,
          "column": 4
        },
        "end": {
          "line": 364,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "obj {var} element to be removed from the array",
            "paramName": "obj",
            "description": " element to be removed from the array",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the removed element",
            "type": "var",
            "description": " the removed element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 377,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the array contains the given element</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use Array instance include method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "obj {var} object to look for",
            "paramName": "obj",
            "description": " object to look for",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the arr contains the element",
            "type": "Boolean",
            "description": " whether the arr contains the element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "equals": {
      "location": {
        "start": {
          "line": 387,
          "column": 4
        },
        "end": {
          "line": 408,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the two arrays have the same content. Checks only the\n equality of the arrays' content.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} first array",
            "paramName": "arr1",
            "description": " first array",
            "type": "qx.lang.Array"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} second array",
            "paramName": "arr2",
            "description": " second array",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal",
            "type": "Boolean",
            "description": " Whether the two arrays are equal"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sum": {
      "location": {
        "start": {
          "line": 418,
          "column": 4
        },
        "end": {
          "line": 428,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the sum of all values in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Number[]} Array to process",
            "paramName": "arr",
            "description": " Array to process",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The sum of all values.",
            "type": "qx.lang.Number",
            "description": " The sum of all values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "max": {
      "location": {
        "start": {
          "line": 438,
          "column": 4
        },
        "end": {
          "line": 454,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the highest value in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Number[]} Array to process",
            "paramName": "arr",
            "description": " Array to process",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The highest of all values or undefined if array is empty.",
            "type": "Number | null",
            "description": " The highest of all values or undefined if array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "min": {
      "location": {
        "start": {
          "line": 464,
          "column": 4
        },
        "end": {
          "line": 480,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the lowest value in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Number[]} Array to process",
            "paramName": "arr",
            "description": " Array to process",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The lowest of all values or undefined if array is empty.",
            "type": "Number | null",
            "description": " The lowest of all values or undefined if array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unique": {
      "location": {
        "start": {
          "line": 493,
          "column": 4
        },
        "end": {
          "line": 587,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recreates an array which is free of all duplicate elements from the original.\n This method does not modify the original array!\n Keep in mind that this methods deletes undefined indexes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} Incoming array",
            "paramName": "arr",
            "description": " Incoming array",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns a copy with no duplicates",
            "type": "qx.lang.Array",
            "description": " Returns a copy with no duplicates"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "range": {
      "location": {
        "start": {
          "line": 597,
          "column": 4
        },
        "end": {
          "line": 615,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new array with integers from start to stop incremented or decremented by step.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the new array, defaults to 0",
            "paramName": "start",
            "description": " start of the new array, defaults to 0",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "stop {Integer} stop of the new array",
            "paramName": "stop",
            "description": " stop of the new array",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "step {Integer} increment / decrement - depends whether you use positive or negative values",
            "paramName": "step",
            "description": " increment / decrement - depends whether you use positive or negative values",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns a new array with integers",
            "type": "qx.lang.Array",
            "description": " Returns a new array with integers"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "replace": {
      "location": {
        "start": {
          "line": 625,
          "column": 4
        },
        "end": {
          "line": 649,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces the contents of the array <code>dest</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dest {Array|qx.data.Array} the array to edit (if null then a new array is created)",
            "paramName": "dest",
            "description": " the array to edit (if null then a new array is created)",
            "type": [
              "Array",
              "qx.data.Array"
            ]
          },
          {
            "name": "@param",
            "body": "src {Array|qx.data.Array} the array to copy from, or null",
            "paramName": "src",
            "description": " the array to copy from, or null",
            "type": [
              "Array",
              "qx.data.Array"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the edited array (or the new array, if dest is null)",
            "type": "qx.lang.Array",
            "description": " the edited array (or the new array, if dest is null)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toNativeArray": {
      "location": {
        "start": {
          "line": 661,
          "column": 4
        },
        "end": {
          "line": 678,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a native array from src where possible; qx.data.Array is converted to its native array,\n in which case unless <code>clone</code> parameter is set to true the rules of qx.data.Array.toArray should\n be followed, ie that the array should not be manipulated directly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the object to return as an array",
            "paramName": "src",
            "description": " the object to return as an array",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          },
          {
            "name": "@param",
            "body": "clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "qx.lang.Array",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}