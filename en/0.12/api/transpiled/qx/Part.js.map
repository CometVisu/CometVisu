{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/Part.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "loader",
    "bootPackageKey",
    "parts",
    "boot",
    "__loader",
    "__partListners",
    "__packageListeners",
    "__packageClosureListeners",
    "__packages",
    "key",
    "packages",
    "pkg",
    "io",
    "part",
    "Package",
    "__decodeUris",
    "uris",
    "__parts",
    "closureParts",
    "name",
    "pkgKeys",
    "i",
    "length",
    "push",
    "ClosurePart",
    "Part",
    "statics",
    "TIMEOUT",
    "getInstance",
    "$$instance",
    "$$loader",
    "require",
    "partNames",
    "callback",
    "self",
    "preload",
    "$$notifyLoad",
    "id",
    "closure",
    "saveClosure",
    "members",
    "addToPackage",
    "getId",
    "Error",
    "listeners",
    "getParts",
    "window",
    "isString",
    "undefined",
    "registeredPartNames",
    "keys",
    "join",
    "partsLoaded",
    "onLoad",
    "states",
    "getReadyState",
    "call",
    "load",
    "partsPreloaded",
    "__getUris",
    "decodeUris",
    "addPartListener",
    "getName",
    "onpart",
    "notifyPartResult",
    "addPackageListener",
    "notifyPackageResult"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The part loader knows about all generated packages and parts.\n *\n * It contains functionality to load parts.\n */\nqx.Bootstrap.define(\"qx.Part\",\n{\n  // !! Careful when editing this file. Do not extend the dependencies !!\n\n  /**\n   * @param loader {Object} The data structure from the boot script about all\n   *   known parts and packages. Usually <code>qx.$$loader</code>.\n   */\n  construct : function(loader)\n  {\n    // assert: boot part has a single package\n    var bootPackageKey = loader.parts[loader.boot][0];\n\n    this.__loader = loader;\n\n    // initialize the pseudo event listener maps\n    this.__partListners = {};\n    this.__packageListeners = {};\n    this.__packageClosureListeners = {};\n\n    // create the packages\n    this.__packages = {};\n    for (var key in loader.packages)\n    {\n      var pkg = new qx.io.part.Package(\n        this.__decodeUris(loader.packages[key].uris), key, key==bootPackageKey\n      );\n      this.__packages[key] = pkg;\n    };\n\n    // create the parts\n    this.__parts = {};\n    var parts = loader.parts;\n    var closureParts = loader.closureParts || {};\n\n    for (var name in parts)\n    {\n      var pkgKeys = parts[name];\n      var packages = [];\n      for (var i = 0; i < pkgKeys.length; i++) {\n        packages.push(this.__packages[pkgKeys[i]]);\n      }\n\n      // check for closure loading\n      if (closureParts[name]) {\n        var part = new qx.io.part.ClosurePart(name, packages, this);\n      } else {\n        var part = new qx.io.part.Part(name, packages, this);\n      }\n\n      this.__parts[name] = part;\n    }\n  },\n\n\n  statics :\n  {\n    /**\n     * Default timeout in ms for the error handling of the closure loading.\n     */\n    TIMEOUT : 7500,\n\n\n    /**\n     * Get the default part loader instance\n     *\n     * @return {qx.Part} the default part loader\n     */\n    getInstance : function()\n    {\n      if (!this.$$instance) {\n        this.$$instance = new this(qx.$$loader);\n      }\n      return this.$$instance;\n    },\n\n\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String[]} List of parts names to load as defined in the\n     *    config file at compile time.\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require : function(partNames, callback, self) {\n      this.getInstance().require(partNames, callback, self);\n    },\n\n\n    /**\n     * Preloads one or more closure parts but does not execute them. This means\n     * the closure (the whole code of the part) is already loaded but not\n     * executed so you can't use the classes in the the part after a preload.\n     * If you want to execute them, just use the regular {@link #require}\n     * function.\n     *\n     * @param partNames {String[]} List of parts names to preload as defined\n     *   in the config file at compile time.\n     */\n    preload : function(partNames) {\n      this.getInstance().preload(partNames);\n    },\n\n\n    /**\n     * Loaded closure packages have to call this method to indicate\n     * successful loading and to get their closure stored.\n     *\n     * @param id {String} The id of the package.\n     * @param closure {Function} The wrapped code of the package.\n     */\n    $$notifyLoad : function(id, closure) {\n      this.getInstance().saveClosure(id, closure);\n    }\n  },\n\n\n  members :\n  {\n    __loader : null,\n    __packages : null,\n    __parts : null,\n    __packageClosureListeners : null,\n\n\n    /**\n     * This method is only for testing purposes! Don't use it!\n     *\n     * @internal\n     * @param pkg {qx.io.part.Package} The package to add to the internal\n     *   registry of packages.\n     */\n    addToPackage : function(pkg) {\n      this.__packages[pkg.getId()] = pkg;\n    },\n\n\n    /**\n     * Internal helper method to save the closure and notify that the load.\n     *\n     * @internal\n     * @param id {String} The hash of the package.\n     * @param closure {Function} The code of the package wrappen into a closure.\n     */\n    saveClosure : function(id, closure)\n    {\n      // search for the package\n      var pkg = this.__packages[id];\n\n      // error if no package could be found\n      if (!pkg) {\n        throw new Error(\"Package not available: \" + id);\n      }\n\n      // save the closure in the package itself\n      pkg.saveClosure(closure);\n\n      // call the listeners\n      var listeners = this.__packageClosureListeners[id];\n      if (!listeners) {\n        return;\n      }\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i](\"complete\", id);\n      }\n      // get rid of all closure package listeners for that package\n      this.__packageClosureListeners[id] = [];\n    },\n\n\n    /**\n     * Internal method for testing purposes which returns the internal parts\n     * store.\n     *\n     * @internal\n     * @return {Array} An array of parts.\n     */\n    getParts : function() {\n      return this.__parts;\n    },\n\n\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String|String[]} List of parts names to load as defined\n     *   in the config file at compile time. The method also accepts a single\n     *   string as parameter to only load one part.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require : function(partNames, callback, self)\n    {\n      var callback = callback || function() {};\n      var self = self || window;\n\n      if (qx.Bootstrap.isString(partNames)) {\n        partNames = [partNames];\n      }\n\n      var parts = [];\n      for (var i=0; i<partNames.length; i++) {\n        var part = this.__parts[partNames[i]];\n        if (part === undefined) {\n          var registeredPartNames = qx.Bootstrap.keys(this.getParts());\n          throw new Error('Part \"' + partNames[i] + '\" not found in parts (' +\n            registeredPartNames.join(', ') + ')');\n        } else {\n          parts.push(part);\n        }\n      }\n\n      var partsLoaded = 0;\n      var onLoad = function() {\n        partsLoaded += 1;\n        // done?\n        if (partsLoaded >= parts.length) {\n          // gather the ready states of the parts\n          var states = [];\n          for (var i = 0; i < parts.length; i++) {\n            states.push(parts[i].getReadyState());\n          }\n          callback.call(self, states);\n        }\n      };\n\n      for (var i=0; i<parts.length; i++) {\n        parts[i].load(onLoad, this);\n      }\n    },\n\n\n    /**\n     * Preloader for the given part.\n     *\n     * @param partNames {String} The hash of the part to preload.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    preload : function(partNames, callback, self)\n    {\n      if (qx.Bootstrap.isString(partNames)) {\n        partNames = [partNames];\n      }\n\n      var partsPreloaded = 0;\n      for (var i=0; i<partNames.length; i++) {\n\n        this.__parts[partNames[i]].preload(function() {\n          partsPreloaded++;\n\n          if (partsPreloaded >= partNames.length) {\n            // gather the ready states of the parts\n            var states = [];\n            for (var i = 0; i < partNames.length; i++) {\n              states.push(this.__parts[partNames[i]].getReadyState());\n            };\n            if (callback) {\n              callback.call(self, states);\n            }\n          };\n        }, this);\n      }\n    },\n\n\n    /**\n     * Get the URI lists of all packages\n     *\n     * @return {String[][]} Array of URI lists for each package\n     */\n    __getUris : function()\n    {\n      var packages = this.__loader.packages;\n      var uris = [];\n      for (var key in packages) {\n        uris.push(this.__decodeUris(packages[key].uris));\n      }\n      return uris;\n    },\n\n\n    /**\n     * Decodes a list of source URIs. The function is defined in the loader\n     * script.\n     *\n     * @signature function(compressedUris)\n     * @param compressedUris {String[]} Array of compressed URIs\n     * @return {String[]} decompressed URIs\n     */\n    __decodeUris : qx.$$loader.decodeUris,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PART\n    ---------------------------------------------------------------------------\n    */\n\n    __partListners : null,\n\n\n    /**\n     * Register callback, which is called after the given part has been loaded\n     * or fails with an error. After the call the listener is removed.\n     *\n     * @internal\n     *\n     * @param part {Object} Part to load\n     * @param callback {Object} the listener\n     */\n    addPartListener : function(part, callback)\n    {\n      var key = part.getName();\n      if (!this.__partListners[key]) {\n        this.__partListners[key] = [];\n      }\n      this.__partListners[key].push(callback);\n    },\n\n\n    /**\n     * If defined this method is called after each part load.\n     */\n    onpart : null,\n\n\n    /**\n     * This method is called after a part has been loaded or failed to load.\n     * It calls all listeners for this part.\n     *\n     * @internal\n     * @param part {Object} The loaded part\n     */\n    notifyPartResult : function(part)\n    {\n      var key = part.getName();\n\n      var listeners = this.__partListners[key];\n      if (listeners)\n      {\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i](part.getReadyState());\n        }\n        this.__partListners[key] = [];\n      }\n\n      if (typeof this.onpart === \"function\") {\n        this.onpart(part);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PACKAGE\n    ---------------------------------------------------------------------------\n    */\n\n    __packageListeners : null,\n\n\n    /**\n     * Register callback, which is called after the given package has been loaded\n     * or fails with an error. After the call the listener is removed.\n     *\n     * @internal\n     *\n     * @param pkg {Object} Package to load\n     * @param callback {Object} the listener\n     */\n    addPackageListener : function(pkg, callback)\n    {\n      var key = pkg.getId();\n      if (!this.__packageListeners[key]) {\n        this.__packageListeners[key] = [];\n      }\n      this.__packageListeners[key].push(callback);\n    },\n\n\n    /**\n     * This method is called after a packages has been loaded or failed to load.\n     * It calls all listeners for this package.\n     *\n     * @internal\n     * @param pkg {Object} The loaded package\n     */\n    notifyPackageResult : function(pkg)\n    {\n      var key = pkg.getId();\n\n      var listeners = this.__packageListeners[key];\n      if (!listeners) {\n        return;\n      }\n      for (var i=0; i<listeners.length; i++) {\n        listeners[i](pkg.getReadyState());\n      }\n      this.__packageListeners[key] = [];\n    }\n  }\n});\n"
  ]
}