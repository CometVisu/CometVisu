{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/AsyncWrapper.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "delay",
    "deferredFunction",
    "context",
    "undefined",
    "Environment",
    "get",
    "setDelay",
    "getDelay",
    "parseInt",
    "i",
    "lang",
    "Type",
    "isFunction",
    "arguments",
    "setDeferredFunction",
    "isNumber",
    "setContext",
    "properties",
    "check",
    "init",
    "nullable",
    "dev",
    "unit",
    "AsyncWrapper"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,0BAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;;AAME;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,KAAT,EAAgBC,gBAAhB,EAAkCC,OAAlC,EACZ;AACE,UAAIF,KAAK,KAAKG,SAAV,IAAuBF,gBAAgB,KAAKE,SAAhD,EAA2D;AACzD;AACA,YAAIb,EAAE,CAACO,IAAH,CAAQO,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAJ,EAAoD;AAClD,eAAKC,QAAL,CAAc,KAAKC,QAAL,KAAkBC,QAAQ,CAAClB,EAAE,CAACO,IAAH,CAAQO,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAD,EAAiD,EAAjD,CAAxC;AACD;AACF,OALD,MAKO;AACL,aAAK,IAAII,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB,cAAInB,EAAE,CAACoB,IAAH,CAAQC,IAAR,CAAaC,UAAb,CAAwBC,SAAS,CAACJ,CAAD,CAAjC,CAAJ,EAA2C;AACzC,iBAAKK,mBAAL,CAAyBD,SAAS,CAACJ,CAAD,CAAlC;AACD,WAFD,MAEO,IAAInB,EAAE,CAACoB,IAAH,CAAQC,IAAR,CAAaI,QAAb,CAAsBF,SAAS,CAACJ,CAAD,CAA/B,CAAJ,EAAyC;AAC9C,gBAAInB,EAAE,CAACO,IAAH,CAAQO,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAJ,EAAoD;AAClD,mBAAKC,QAAL,CAAcO,SAAS,CAACJ,CAAD,CAAT,GAAeD,QAAQ,CAAClB,EAAE,CAACO,IAAH,CAAQO,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAD,EAAiD,EAAjD,CAArC;AACD,aAFD,MAEO;AACL,mBAAKC,QAAL,CAAcO,SAAS,CAACJ,CAAD,CAAvB;AACD;AACF;AACF;AACF;;AAED,UAAIP,OAAJ,EAAa;AACX,aAAKc,UAAL,CAAgBd,OAAhB;AACD;AACF,KA1CH;AA4CEe,IAAAA,UAAU,EACV;AACE;AACAhB,MAAAA,gBAAgB,EAChB;AACEiB,QAAAA,KAAK,EAAG,UADV;AAEEC,QAAAA,IAAI,EAAG;AAFT,OAHF;;AAQE;AACAjB,MAAAA,OAAO,EACP;AACEgB,QAAAA,KAAK,EAAG,QADV;AAEEC,QAAAA,IAAI,EAAG;AAFT,OAVF;;AAeE;AACAnB,MAAAA,KAAK,EACL;AACEkB,QAAAA,KAAK,EAAE,SADT;AAEEE,QAAAA,QAAQ,EAAG,KAFb;AAGED,QAAAA,IAAI,EAAG;AAHT;AAjBF;AA7CF,GADA;AAtBA7B,EAAAA,EAAE,CAAC+B,GAAH,CAAOC,IAAP,CAAYC,YAAZ,CAAyB9B,aAAzB,GAAyCA,aAAzC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n *  This class stores the information needed to instruct a running test to wait.\n *  It is thrown as an exception to be caught by the method executing the test.\n */\nqx.Class.define(\"qx.dev.unit.AsyncWrapper\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param delay {Integer?} The amount of time in milliseconds to wait\n   * @param deferredFunction {Function?} The function to run after the timeout\n   * has expired.\n   * @param context {Object?window} Optional execution context for deferredFunction\n   */\n  construct : function(delay, deferredFunction, context)\n  {\n    if (delay === undefined && deferredFunction === undefined) {\n      // scale default delay if wait() is called without arguments\n      if (qx.core.Environment.get(\"qx.test.delay.scale\")) {\n        this.setDelay(this.getDelay() * parseInt(qx.core.Environment.get(\"qx.test.delay.scale\"), 10));\n      }\n    } else {\n      for (var i=0; i<2; i++) {\n        if (qx.lang.Type.isFunction(arguments[i])) {\n          this.setDeferredFunction(arguments[i]);\n        } else if (qx.lang.Type.isNumber(arguments[i])) {\n          if (qx.core.Environment.get(\"qx.test.delay.scale\")) {\n            this.setDelay(arguments[i] * parseInt(qx.core.Environment.get(\"qx.test.delay.scale\"), 10));\n          } else {\n            this.setDelay(arguments[i]);\n          }\n        }\n      }\n    }\n\n    if (context) {\n      this.setContext(context);\n    }\n  },\n\n  properties :\n  {\n    /** The function to run after the timeout has expired */\n    deferredFunction :\n    {\n      check : \"Function\",\n      init : false\n    },\n\n    /** The context in which the timeout function should be executed  */\n    context :\n    {\n      check : \"Object\",\n      init : null\n    },\n\n    /** The amount of time in milliseconds to wait */\n    delay :\n    {\n      check: \"Integer\",\n      nullable : false,\n      init : 10000\n    }\n  }\n\n});\n"
  ]
}