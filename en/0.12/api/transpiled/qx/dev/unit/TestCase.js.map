{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/dev/unit/TestCase.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "MAssert",
    "events",
    "assertionFailed",
    "properties",
    "testResult",
    "init",
    "testFunc",
    "members",
    "__autoDispose",
    "isDebugOn",
    "wait",
    "delay",
    "deferredFunction",
    "context",
    "dev",
    "unit",
    "AsyncWrapper",
    "resume",
    "self",
    "getTestResult",
    "run",
    "getTestFunc",
    "resumeSetUp",
    "func",
    "inst",
    "method",
    "getName",
    "ex",
    "resumeHandler",
    "that",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "bind",
    "apply",
    "concat",
    "skip",
    "message",
    "RequirementError",
    "addAutoDispose",
    "obj",
    "push",
    "doAutoDispose",
    "forEach",
    "isDisposed",
    "ui",
    "Widget",
    "destroy",
    "dispose",
    "TestCase"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;AAGAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,sBAAhB,EACA;AACEC,IAAAA,MAAM,EAAIN,EAAE,CAACO,IAAH,CAAQC,MADpB;AAEEC,IAAAA,OAAO,EAAG,CAACT,EAAE,CAACO,IAAH,CAAQG,OAAT,CAFZ;AAIEC,IAAAA,MAAM,EACN;AACE;;;;;;;AAOAC,MAAAA,eAAe,EAAG;AARpB,KALF;AAgBEC,IAAAA,UAAU,EACV;AACE;AACAC,MAAAA,UAAU,EACV;AACEC,QAAAA,IAAI,EAAG;AADT,OAHF;;AAME;AACAC,MAAAA,QAAQ,EACR;AACED,QAAAA,IAAI,EAAG;AADT;AARF,KAjBF;AA8BEE,IAAAA,OAAO,EACP;AACEC,MAAAA,aAAa,EAAG,IADlB;;AAGE;;;;;;AAMAC,MAAAA,SAAS,EAAG,qBAAW;AACrB,eAAO,QAAwC,IAAxC,GAA+C,KAAtD;AACD,OAXH;;AAaE;;;;;;;;;AASAC,MAAAA,IAAI,EAAG,cAASC,KAAT,EAAgBC,gBAAhB,EAAkCC,OAAlC,EAA2C;AAChD,cAAM,IAAIvB,EAAE,CAACwB,GAAH,CAAOC,IAAP,CAAYC,YAAhB,CAA6BL,KAA7B,EAAoCC,gBAApC,EAAsDC,OAAtD,CAAN;AACD,OAxBH;;AA0BE;;;;;;;;;;;;;;;;;AAiBAI,MAAAA,MAAM,EAAG,gBAASL,gBAAT,EAA2BM,IAA3B,EACT;AACE,eAAO,KAAKC,aAAL,GAAqBC,GAArB,CACL,KAAKC,WAAL,EADK,EAELT,gBAAgB,IAAK,YAAW,CAAE,CAF7B,EAGLM,IAAI,IAAI,IAHH,EAIL,IAJK,CAAP;AAMD,OAnDH;;AAqDE;;;;;;AAMAI,MAAAA,WAAW,EAAG,uBAAW;AACvB,YAAIC,IAAI,GAAG,KAAKF,WAAL,EAAX;AACA,YAAIG,IAAI,GAAG,IAAX;AACA,YAAIC,MAAM,GAAGF,IAAI,CAACG,OAAL,EAAb;AAEA,eAAO,KAAKP,aAAL,GAAqBC,GAArB,CACLG,IADK,EAEL,YACA;AACE,cAAI;AACFC,YAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,WAFD,CAEE,OAAOE,EAAP,EAAW;AACX,kBAAMA,EAAN;AACD;AACF,SATI,EAUL,IAVK,EAWL,IAXK,CAAP;AAaD,OA7EH;;AAgFE;;;;;;;;;;;;;;;;;;AAkBAC,MAAAA,aAAa,EAAG,uBAAShB,gBAAT,EAA2BM,IAA3B,EAChB;AAKE,YAAIK,IAAI,GAAGX,gBAAX;AACA,YAAIiB,IAAI,GAAG,IAAX;AAEA,eAAO,YAAU;AACf;AACA,cAAIC,IAAI,GAAGxC,EAAE,CAACyC,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BC,SAA5B,CAAX;AAEA,iBAAOL,IAAI,CAACZ,MAAL,CAAYM,IAAI,CAACY,IAAL,CAAUC,KAAV,CAAgBb,IAAhB,EAAsB,CAACL,IAAI,IAAI,IAAT,EAAemB,MAAf,CAAsBP,IAAtB,CAAtB,CAAZ,EAAgEZ,IAAhE,CAAP;AACD,SALD;AAMD,OAjHH;;AAoHE;;;;;AAKAoB,MAAAA,IAAI,EAAG,cAASC,OAAT,EACP;AACE,cAAM,IAAIjD,EAAE,CAACwB,GAAH,CAAOC,IAAP,CAAYyB,gBAAhB,CAAiC,IAAjC,EAAuCD,OAAO,IAAI,eAAlD,CAAN;AACD,OA5HH;;AA+HE;;;;;;AAMAE,MAAAA,cAAc,EAAG,wBAASC,GAAT,EACjB;AACE,YAAI,CAAC,KAAKlC,aAAV,EAAyB;AACvB,eAAKA,aAAL,GAAqB,EAArB;AACD;;AACD,aAAKA,aAAL,CAAmBmC,IAAnB,CAAwBD,GAAxB;AACD,OA3IH;;AA6IE;;;AAGAE,MAAAA,aAAa,EAAG,yBAChB;AACE,YAAI,KAAKpC,aAAT,EAAwB;AACtB,eAAKA,aAAL,CAAmBqC,OAAnB,CAA2B,UAASH,GAAT,EAAc;AACvC,gBAAI,CAACA,GAAG,CAACI,UAAJ,EAAL,EAAuB;AACrB,kBAAIJ,GAAG,YAAYpD,EAAE,CAACyD,EAAH,CAAMlD,IAAN,CAAWmD,MAA9B,EAAsC;AACpCN,gBAAAA,GAAG,CAACO,OAAJ;AACD,eAFD,MAGK,IAAIP,GAAG,YAAYpD,EAAE,CAACO,IAAH,CAAQC,MAA3B,EAAmC;AACtC4C,gBAAAA,GAAG,CAACQ,OAAJ;AACD;AACF;AACF,WATD;;AAUA,eAAK1C,aAAL,GAAqB,IAArB;AACD;AACF;AA/JH;AA/BF,GADA;AAtBAlB,EAAAA,EAAE,CAACwB,GAAH,CAAOC,IAAP,CAAYoC,QAAZ,CAAqB1D,aAArB,GAAqCA,aAArC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * Base class for all unit tests.\n */\nqx.Class.define(\"qx.dev.unit.TestCase\",\n{\n  extend  : qx.core.Object,\n  include : [qx.core.MAssert],\n\n  events :\n  {\n    /**\n     * This event can be fired by assertion functions instead of throwing a\n     * {@link qx.core.AssertionError}, ensuring that any code defined after the\n     * assertion call will still run.\n     *\n     * Event data: The {@link qx.core.AssertionError}\n     */\n    assertionFailed : \"qx.event.type.Data\"\n  },\n\n  properties :\n  {\n    /** The TestResult instance that runs the test */\n    testResult :\n    {\n      init : null\n    },\n    /** The test currently running */\n    testFunc :\n    {\n      init : null\n    }\n  },\n\n  members :\n  {\n    __autoDispose : null,\n\n    /**\n     * Whether If debugging code is enabled. (i.e. the setting\n     * <code>qx.debug</code> has the value <code>on</code>.)\n     *\n     * @return {Boolean} Whether debugging is enabled\n     */\n    isDebugOn : function() {\n      return (qx.core.Environment.get(\"qx.debug\")) ? true : false;\n    },\n\n    /**\n     * Instruct the test to wait. Used for asynchronous tests.\n     *\n     * @param delay {Integer?5000} Amount of time in milliseconds to wait.\n     * @param deferredFunction {Function?false} Optional function to run after\n     * timeout has expired.\n     * @param context {Object?window} Optional execution context for\n     * deferredFunction\n     */\n    wait : function(delay, deferredFunction, context) {\n      throw new qx.dev.unit.AsyncWrapper(delay, deferredFunction, context);\n    },\n\n    /**\n     * Cancel a timeout started with <code>wait()</code> and run the given\n     * function. Used for asynchronous tests, e.g. in a listener's callback\n     * function.\n     *\n     * *Important*\n     *\n     * The used *deferredFunction* is the last function which is executed before\n     * the whole test case is disposed. But you are able to use a new\n     * <code>wait()</code> / <code>resume()</code> pair in the call sequence of the deferred function.\n     *\n     * @param deferredFunction {Function?} Function to run\n     * @param self {Object?} reference to the ‘this’ variable inside the\n     * callback. By default the test instance is used.\n     *\n     * @return {var} The return value of the deferred function\n     */\n    resume : function(deferredFunction, self)\n    {\n      return this.getTestResult().run(\n        this.getTestFunc(),\n        deferredFunction || (function() {}),\n        self || this,\n        true\n      );\n    },\n\n    /**\n     * Cancel a timeout started with <code>wait()</code> in setUp() and run the test\n     * function. Used for asynchronous setUp of tests.\n     *\n     * @return {var} The return value of the testRun\n     */\n    resumeSetUp : function() {\n      var func = this.getTestFunc();\n      var inst = this;\n      var method = func.getName();\n\n      return this.getTestResult().run(\n        func,\n        function()\n        {\n          try {\n            inst[method]();\n          } catch (ex) {\n            throw ex;\n          }\n        },\n        this,\n        true\n      );\n    },\n\n\n    /**\n     * Cancel a timeout started with <code>wait()</code> and return a function,\n     * which calls {@link #resume}. This function is useful\n     * to wrap an event handler or callback function within the resume call sequence.\n     * It provides the deferred function with all parameters from original caller.\n     *<pre>\n     * obj.addListener(\"appear\", this.resumeHandler(function(e){\n     *   // do some nice\n     * }));\n     *\n     * this.wait();\n     *</pre>\n     *\n     * @param deferredFunction {Function} Function to run as event handler or callback\n     * @param self {Object?} reference to the ‘this’ variable inside the\n     *        callback. By default the test instance is used.\n     * @return {Function} Wrapper function which runs resume with deferred function\n     */\n    resumeHandler : function(deferredFunction, self)\n    {\n      if(qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFunction(deferredFunction, \"First parameter of resumeHandler() must be a function!\");\n      }\n\n      var func = deferredFunction;\n      var that = this;\n\n      return function(){\n        // bind arguments to deferŕedFunction\n        var args = qx.lang.Array.fromArguments(arguments);\n\n        return that.resume(func.bind.apply(func, [self || this].concat(args)), self);\n      };\n    },\n\n\n    /**\n     * Skip this test. Any code after a call to this method will not be executed.\n     *\n     * @param message {String|null} Optional message (reason why the test was skipped)\n     */\n    skip : function(message)\n    {\n      throw new qx.dev.unit.RequirementError(null, message || \"Called skip()\");\n    },\n\n\n    /**\n     * Add an object to the auto dispose list. This can be cleared manually or will\n     * be flushed when the test case is disposed.\n     *\n     * @param obj {qx.core.Object} Object to be automatically disposed.\n     */\n    addAutoDispose : function(obj)\n    {\n      if (!this.__autoDispose) {\n        this.__autoDispose = [];\n      }\n      this.__autoDispose.push(obj);\n    },\n\n    /**\n     * Dispose all objects that got registered for auto disposal.\n     */\n    doAutoDispose : function()\n    {\n      if (this.__autoDispose) {\n        this.__autoDispose.forEach(function(obj) {\n          if (!obj.isDisposed()) {\n            if (obj instanceof qx.ui.core.Widget) {\n              obj.destroy();\n            }\n            else if (obj instanceof qx.core.Object) {\n              obj.dispose();\n            }\n          }\n        });\n        this.__autoDispose = null;\n      }\n    }\n  }\n});\n"
  ]
}