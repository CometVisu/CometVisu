{
  "className": "qx.dev.unit.TestResult",
  "packageName": "qx.dev.unit",
  "name": "TestResult",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 426,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Fabian Jakobs (fjakobs)\n Daniel Wagner (d_wagner)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>The test result class runs the test functions and fires events depending on\n the result of the test run.</p>"
        }
      ]
    }
  },
  "type": "class",
  "events": {
    "startTest": {
      "location": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 43,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the test is started\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "startTest",
      "type": "qx.event.type.Data"
    },
    "endTest": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the test has finished\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "endTest",
      "type": "qx.event.type.Data"
    },
    "error": {
      "location": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 56,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the test raised an {@link qx.core.AssertionError}\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "error",
      "type": "qx.event.type.Data"
    },
    "failure": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the test failed with a different exception\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "failure",
      "type": "qx.event.type.Data"
    },
    "wait": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if an asynchronous test sets a timeout\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "wait",
      "type": "qx.event.type.Data"
    },
    "skip": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the test was skipped, e.g. because a requirement was not met.\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "skip",
      "type": "qx.event.type.Data"
    },
    "endMeasurement": {
      "location": {
        "start": {
          "line": 84,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a performance test returned results.\n Event data: The test {@link qx.dev.unit.TestFunction}</p>"
          }
        ]
      },
      "name": "endMeasurement",
      "type": "qx.event.type.Data"
    }
  },
  "statics": {
    "run": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Run a test function using a given test result</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "testResult {qx.dev.unit.TestResult} The test result to use to run the test",
            "paramName": "testResult",
            "description": " The test result to use to run the test",
            "type": "qx.dev.unit.TestResult"
          },
          {
            "name": "@param",
            "body": "test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test",
            "paramName": "test",
            "description": " The test",
            "type": [
              "qx.dev.unit.TestSuite",
              "qx.dev.unit.TestFunction"
            ]
          },
          {
            "name": "@param",
            "body": "testFunction {var} The test function",
            "paramName": "testFunction",
            "description": " The test function",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "_timeout": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 19
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "run": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 313,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Run the test</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test",
            "paramName": "test",
            "description": " The test",
            "type": [
              "qx.dev.unit.TestSuite",
              "qx.dev.unit.TestFunction"
            ]
          },
          {
            "name": "@param",
            "body": "testFunction {Function} The test function",
            "paramName": "testFunction",
            "description": " The test function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object?} The context in which to run the test function",
            "paramName": "self",
            "description": " The context in which to run the test function",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "resume {Boolean?} Resume a currently waiting test",
            "paramName": "resume",
            "description": " Resume a currently waiting test",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the test function",
            "type": "var",
            "description": " The return value of the test function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_createError": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 335,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire an error event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "eventName {String} Name of the event",
            "paramName": "eventName",
            "description": " Name of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "exceptions {Error[]} The exception(s), which caused the test to fail",
            "paramName": "exceptions",
            "description": " The exception(s), which caused the test to fail",
            "type": "Error[]"
          },
          {
            "name": "@param",
            "body": "test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test",
            "paramName": "test",
            "description": " The test",
            "type": [
              "qx.dev.unit.TestSuite",
              "qx.dev.unit.TestFunction"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__wrapAddListener": {
      "location": {
        "start": {
          "line": 347,
          "column": 4
        },
        "end": {
          "line": 365,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Wraps the AUT's qx.event.Registration.addListener function so that it\n stores references to all added listeners in an array attached to the\n current test function. This is done so that any listeners left over after\n test execution can be removed to make sure they don't influence other\n tests.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "testFunction {qx.dev.unit.TestFunction} The current test",
            "paramName": "testFunction",
            "description": " The current test",
            "type": "qx.dev.unit.TestFunction"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeListeners": {
      "location": {
        "start": {
          "line": 373,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes any listeners left over after a test's run.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "testFunction {qx.dev.unit.TestFunction} The current test",
            "paramName": "testFunction",
            "description": " The current test",
            "type": "qx.dev.unit.TestFunction"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "tearDown": {
      "location": {
        "start": {
          "line": 395,
          "column": 4
        },
        "end": {
          "line": 420,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calls the generic tearDown method on the test class, then the specific\n tearDown for the test, if one is defined.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "test {Object} The test object (first argument of {@link #run})",
            "paramName": "test",
            "description": " The test object (first argument of {@link #run})",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 423,
        "column": 13
      },
      "end": {
        "line": 425,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qx.dev.unit.JsUnitTestResult"
  ]
}