{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MMock.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "sinon",
    "__getSinon",
    "__exposeAssertions",
    "__sandbox",
    "sandbox",
    "members",
    "__fakeXhr",
    "temp",
    "assert",
    "expose",
    "includeFail",
    "method",
    "dev",
    "unit",
    "Sinon",
    "getSinon",
    "spy",
    "function_or_object",
    "apply",
    "arguments",
    "stub",
    "object",
    "mock",
    "useFakeXMLHttpRequest",
    "getRequests",
    "requests",
    "useFakeServer",
    "getServer",
    "server",
    "getSandbox",
    "deepStub",
    "__getOwnProperties",
    "forEach",
    "prop",
    "__stubProperty",
    "shallowStub",
    "targetClazz",
    "propsToExclude",
    "indexOf",
    "injectStub",
    "property",
    "customStub",
    "returns",
    "revealMock",
    "customObject",
    "source",
    "__deepClone",
    "obj",
    "clone",
    "clazz",
    "constructor",
    "clazzes",
    "properties",
    "superclass",
    "push",
    "length",
    "found",
    "some",
    "prototype",
    "hasOwnProperty",
    "MMock"
  ],
  "mappings": ";;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EACA;AACEC,IAAAA,SAAS,EAAE,qBACX;AACE,UAAIC,KAAK,GAAG,KAAKC,SAAL,EAAZ;;AACA,WAAKC,SAAL;;AAEA,WAAKC,SAAL,GAAiBH,KAAK,CAACI,OAAvB;AACD,KAPH;AASEC,IAAAA,OAAO,EACP;AAEEF,MAAAA,SAAS,EAAE,IAFb;AAIEG,MAAAA,SAAS,EAAE,IAJb;;AAME;AACJ;AACA;AACA;AACA;AACA;AACA;AACIJ,MAAAA,SAAkB,EAAG,qBAAW;AAC9B,YAAIK,IAAI,GAAG,EAAX;AACAP,QAAAA,KAAK,CAACQ,MAAN,CAAaC,MAAb,CAAoBF,IAApB,EAA0B;AAACG,UAAAA,WAAW,EAAE;AAAd,SAA1B;;AACA,aAAK,IAAIC,MAAT,IAAmBJ,IAAnB,EAAyB;AACvB,cAAI,CAAC,KAAKI,MAAL,CAAL,EAAmB;AACjB,iBAAKA,MAAL,IAAeJ,IAAI,CAACI,MAAD,CAAnB;AACD;AACF;AACF,OArBH;;AAuBE;AACJ;AACA;AACA;AACA;AACA;AACIV,MAAAA,SAAU,EAAE,qBAAW;AACrB,eAAOR,EAAE,CAACmB,GAAH,CAAOC,IAAP,CAAYC,KAAZ,CAAkBC,QAAlB,EAAP;AACD,OA/BH;;AAiCE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,GAAG,EAAE,aAASC,kBAAT,EAA6BN,MAA7B,EAAqC;AACxC,eAAO,KAAKR,SAAL,CAAea,GAAf,CAAmBE,KAAnB,CAAyB,KAAKf,SAA9B,EAAyCgB,SAAzC,CAAP;AACD,OA9GH;;AAgHE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAE,cAASC,MAAT,EAAiBV,MAAjB,EAAyB;AAC7B,eAAO,KAAKR,SAAL,CAAeiB,IAAf,CAAoBF,KAApB,CAA0B,KAAKf,SAA/B,EAA0CgB,SAA1C,CAAP;AACD,OA9JH;;AAgKE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIG,MAAAA,IAAI,EAAE,cAASD,MAAT,EAAiB;AACrB,YAAIrB,KAAK,GAAG,KAAKC,SAAL,EA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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n/**\n *\n * Provides test spies, stubs and mocks as well as custom assertions.\n *\n * Here is a simple example:\n *\n * <pre class=\"javascript\">\n *\n * // Test\n * qx&#046;Class.define(\"qx.test.Klass\",\n * {\n *   extend : qx.dev.unit.TestCase,\n *\n *   include : qx.dev.unit.MMock,\n *\n *   members :\n *   {\n *     \"test: doSpecial on condition xyz\": function() {\n *       // Set-Up\n *       var obj = new qx.Klass();\n *\n *       // Wraps obj.doSpecial in a spy function and\n *       // replaces the original method with this spy.\n *       this.spy(obj, \"doSpecial\");\n *\n *       // Run code that is expected to fulfill condition\n *       obj.onCondition(\"xyz\");\n *\n *       // Assert that spy was called\n *       this.assertCalled(obj.doSpecial);\n *     },\n *\n *     tearDown: function() {\n *       // Restore all stubs, spies and overridden host objects.\n *       //\n *       // It is a good idea to always run this in the <code>tearDown()</code>\n *       // method, especially when overwriting global or host objects.\n *       this.getSandbox().restore();\n *     }\n *   }\n * });\n *\n * // Implementation\n * qx&#046;Class.define(\"qx.Klass\",\n * {\n *   extend : qx.core.Object,\n *\n *   members :\n *   {\n *     onCondition: function(condition) {\n *\n *       // Complex code determining mustDoSpecial\n *       // by examining condition passed\n *\n *       if (mustDoSpecial) {\n *         this.doSpecial();\n *       }\n *     },\n *\n *     doSpecial: function() {\n *\n *     }\n *   }\n * });\n *\n * </pre>\n *\n * This mixin provides assertions such as assertCalled() that work\n * with spies and stubs. Besides offering a compact way to express expectations,\n * those assertions have the advantage that meaningful error messages can be\n * generated.\n *\n * For full list of assertions see http://sinonjs.org/docs/#assertions.\n * Note that sinon.assert.xyz() translates as assertXyz().\n *\n */\nqx.Mixin.define(\"qx.dev.unit.MMock\",\n{\n  construct: function()\n  {\n    var sinon = this.__getSinon();\n    this.__exposeAssertions();\n\n    this.__sandbox = sinon.sandbox;\n  },\n\n  members :\n  {\n\n    __sandbox: null,\n\n    __fakeXhr: null,\n\n    /**\n     * Expose Sinon.JS assertions. Provides methods such\n     * as assertCalled(), assertCalledWith().\n     * (http://sinonjs.org/docs/#assert-expose)\n     * Does not override existing assertion methods.\n     * @ignore(sinon.assert.expose)\n     */\n    __exposeAssertions : function() {\n      var temp = {};\n      sinon.assert.expose(temp, {includeFail: false});\n      for (var method in temp) {\n        if (!this[method]) {\n          this[method] = temp[method];\n        }\n      }\n    },\n\n    /**\n    * Get the Sinon.JS object.\n    *\n    * @return {Object}\n    * @internal\n    */\n    __getSinon: function() {\n      return qx.dev.unit.Sinon.getSinon();\n    },\n\n    /**\n    * Test spies allow introspection on how a function is used\n    * throughout the system under test.\n    *\n    * * spy()\n    *   Creates an anonymous function that records arguments,\n    *   this value, exceptions and return values for all calls.\n    *\n    * * spy(func)\n    *   Spies on the provided function\n    *\n    * * spy(object, \"method\")\n    *   Creates a spy for object.method and replaces the original method\n    *   with the spy. The spy acts exactly like the original method in all cases.\n    *   The original method can be restored by calling object.method.restore().\n    *   The returned spy is the function object which replaced the original method.\n    *   spy === object.method.\n    *\n    * * spy.withArgs(arg1[, arg2, ...])\n    *   Creates a spy that only records calls when the received arguments matches those\n    *   passed to <code>withArgs</code>.\n    *\n    * A spy has a rich interface to introspect how the wrapped function was used:\n    *\n    * * spy.withArgs(arg1[, arg2, ...]);\n    * * spy.callCount\n    * * spy.called\n    * * spy.calledOnce\n    * * spy.calledTwice\n    * * spy.calledThrice\n    * * spy.firstCall\n    * * spy.secondCall\n    * * spy.thirdCall\n    * * spy.lastCall\n    * * spy.calledBefore(anotherSpy)\n    * * spy.calledAfter(anotherSpy)\n    * * spy.calledOn(obj)\n    * * spy.alwaysCalledOn(obj)\n    * * spy.calledWith(arg1, arg2, ...)\n    * * spy.alwaysCalledWith(arg1, arg2, ...)\n    * * spy.calledWithExactly(arg1, arg2, ...)\n    * * spy.alwaysCalledWithExactly(arg1, arg2, ...)\n    * * spy.calledWithMatch(arg1, arg2, ...);\n    * * spy.alwaysCalledWithMatch(arg1, arg2, ...);\n    * * spy.calledWithNew();\n    * * spy.neverCalledWith(arg1, arg2, ...);\n    * * spy.neverCalledWithMatch(arg1, arg2, ...);\n    * * spy.threw()\n    * * spy.threw(\"TypeError\")\n    * * spy.threw(obj)\n    * * spy.alwaysThrew()\n    * * spy.alwaysThrew(\"TypeError\")\n    * * spy.alwaysThrew(obj)\n    * * spy.returned(obj)\n    * * spy.alwaysReturned(obj)\n    * * spy.getCall(n)\n    * * spy.thisValues\n    * * spy.args\n    * * spy.exceptions\n    * * spy.returnValues\n    * * spy.reset()\n    * * spy.printf(\"format string\", [arg1, arg2, ...])\n    *\n    * See http://sinonjs.org/docs/#spies.\n    *\n    * Note: Spies are transparently added to a sandbox. To restore\n    * the original function for all spies run <code>this.getSandbox().restore()</code>\n    * in your <code>tearDown()</code> method.\n    *\n    * @param function_or_object {Function|Object} Spies on the\n    *   provided function or object.\n    * @param method {String?null} The method to spy upon if an object was given.\n    * @return {Function} The wrapped function enhanced with properties and methods\n    *   that allow for introspection. See http://sinonjs.org/docs/#spies.\n    */\n    spy: function(function_or_object, method) {\n      return this.__sandbox.spy.apply(this.__sandbox, arguments);\n    },\n\n    /**\n    * Test stubs are functions (spies) with pre-programmed behavior.\n    *\n    * * stub()\n    *   Creates an anonymous stub function\n    *\n    * * stub(object, \"method\")\n    *   Replaces object.method with a stub function. The original function\n    *   can be restored by calling object.method.restore() (or stub.restore()).\n    *   An exception is thrown if the property is not already a function,\n    *   to help avoid typos when stubbing methods.\n    *\n    * * stub(obj)\n    *   Stubs all the object's methods.\n    *\n    * * stub.withArgs(arg1[, arg2, ...])\n    *   Stubs the method only for the provided arguments. Can be used to create\n    *   a stub that acts differently in response to different arguments.\n    *\n    * A stub has the interface of a spy in addition to methods that allow to define behaviour:\n    *\n    * * stub.returns(obj)\n    * * stub.throws()\n    * * stub.throws(\"TypeError\")\n    * * stub.throws(obj)\n    * * stub.callsArg(index)\n    * * stub.callsArg(0)\n    * * stub.callsArgWith(index, arg1, arg2, ...)\n    *\n    * See http://sinonjs.org/docs/#stubs.\n    *\n    * Note: Stubs are transparently added to a sandbox. To restore\n    * the original function for all stubs run <code>this.getSandbox().restore()</code>\n    * in your <code>tearDown()</code> method.\n    *\n    * @param object {Object?null} Object to stub. Creates an anonymous stub function\n    *   if not given.\n    * @param  method {String?null} Replaces object.method with a stub function.\n    *   An exception is thrown if the property is not already a function, to\n    *   help avoid typos when stubbing methods.\n    * @return {Function} A stub. Has the interface of a spy in addition to methods\n    *   that allow to define behaviour. See http://sinonjs.org/docs/#stubs.\n    *\n    */\n    stub: function(object, method) {\n      return this.__sandbox.stub.apply(this.__sandbox, arguments);\n    },\n\n    /**\n    * Mocks are slightly different from spies and stubs in that you mock an\n    * object, and then set an expectation on one or more of its objects.\n    *\n    * * var mock = mock(obj)\n    *   Creates a mock for the provided object. Does not change the object, but\n    *   returns a mock object to set expectations on the object's methods.\n    *\n    * * var expectation = mock.expects(\"method\")\n    *   Overrides obj.method with a mock function and returns an expectation\n    *   object. Expectations implement both the spy and stub interface plus\n    *   the methods described below.\n    *\n    * Set expectations with following methods. All methods return the expectation\n    * itself, meaning expectations can be chained.\n    *\n    * * expectation.atLeast(number);\n    * * expectation.atMost(number);\n    * * expectation.never();\n    * * expectation.once();\n    * * expectation.twice();\n    * * expectation.thrice();\n    * * expectation.exactly(number);\n    * * expectation.withArgs(arg1, arg2, ...);\n    * * expectation.withExactArgs(arg1, arg2, ...);\n    * * expectation.on(obj);\n    * * expectation.verify();\n    *\n    * See http://sinonjs.org/docs/#mocks.\n    *\n    * @param object {Object} The object to create a mock of.\n    * @return {Function} A mock to set expectations on. See http://sinonjs.org/docs/#mocks.\n    */\n    mock: function(object) {\n      var sinon = this.__getSinon();\n      return sinon.mock.apply(sinon, arguments);\n    },\n\n    /**\n    * Replace the native XMLHttpRequest object in browsers that support it with\n    * a custom implementation which does not send actual requests.\n    *\n    * Note: The fake XHR is transparently added to a sandbox. To restore\n    * the original host method run <code>this.getSandbox().restore()</code>\n    * in your <code>tearDown()</code> method.\n    *\n    * See http://sinonjs.org/docs/#useFakeXMLHttpRequest.\n    *\n    * @return {Object}\n    */\n    useFakeXMLHttpRequest: function() {\n      return this.__fakeXhr = this.__sandbox.useFakeXMLHttpRequest();\n    },\n\n    /**\n    * Get requests made with faked XHR or server.\n    *\n    * Each request can be queried for url, method, requestHeaders,\n    * status and more.\n    *\n    * See http://sinonjs.org/docs/#FakeXMLHttpRequest.\n    *\n    * @return {Array} Array of faked requests.\n    */\n    getRequests: function() {\n      return this.__fakeXhr.requests;\n    },\n\n    /**\n    * As {@link #useFakeXMLHttpRequest}, but additionally provides a high-level\n    * API to setup server responses. To setup responses, use the server\n    * returned by {@link #getServer}.\n    *\n    * See http://sinonjs.org/docs/#server.\n    *\n    * Note: The fake server is transparently added to a sandbox. To restore\n    * the original host method run <code>this.getSandbox().restore()</code>\n    * in your <code>tearDown()</code> method.\n    *\n    * @return {Object}\n    */\n    useFakeServer: function() {\n      return this.__fakeXhr = this.__sandbox.useFakeServer();\n    },\n\n    /**\n    * Get fake server created by {@link #useFakeServer}.\n    *\n    * @return {Object} Fake server.\n    */\n    getServer: function() {\n      return this.__sandbox.server;\n    },\n\n    /**\n    * Get sandbox.\n    *\n    * The sandbox holds all stubs and mocks. Run <code>this.getSandbox().restore()</code>\n    * to restore all mock objects.\n    *\n    * @return {Object}\n    *        Sandbox object.\n    */\n    getSandbox: function() {\n      return this.__sandbox;\n    },\n\n    /**\n     *\n     * Returns a deep copied, API-identical stubbed out clone of the given\n     * object.\n     *\n     * In contrast to the shallow {@link #stub}, also stubs out properties that\n     * belong to the prototype chain.\n     *\n     * @param object {Object} Object to stub deeply.\n     * @return {Object} A stub.\n     */\n    deepStub: function(object) {\n      this.__getOwnProperties(object).forEach(function(prop) {\n        this.__stubProperty(object, prop);\n      }, this);\n\n      return object;\n    },\n\n    /**\n     *\n     * Shallowly stub all methods (except excluded) that belong to classes found in inheritance\n     * chain up to (but including) the given class.\n     *\n     * @param object {Object} Object to stub shallowly.\n     * @param targetClazz {Object} Class which marks the end of the chain.\n     * @param propsToExclude {Array} Array with properties which shouldn't be stubbed.\n     * @return {Object} A stub.\n     */\n    shallowStub: function(object, targetClazz, propsToExclude) {\n      this.__getOwnProperties(object, targetClazz).forEach(function(prop) {\n        if (propsToExclude && propsToExclude.indexOf(prop) >= 0) {\n          // don't stub excluded prop\n          return;\n        }\n        this.__stubProperty(object, prop);\n      }, this);\n\n      return object;\n    },\n\n    /**\n     *\n     * Changes the given factory (e.g. a constructor) to return a stub. The\n     * method itself returns this stub.\n     *\n     * By default, the stub returned by the changed factory is the object built\n     * by the original factory, but deeply stubbed (see {@link #deepStub}).\n     * Alternatively, a custom stub may be given explicitly that is used instead.\n     *\n     * @param object {Object} Namespace to hold factory, e.g. qx.html.\n     * @param property {String} Property as string that functions as\n     *  constructor, e.g. \"Element\".\n     * @param customStub {Object?} Stub to inject.\n     * @return {Object} Injected stub.\n     */\n    injectStub: function(object, property, customStub) {\n      var stub = customStub || this.deepStub(new object[property]);\n\n      this.stub(object, property).returns(stub);\n      return stub;\n    },\n\n    /**\n     * Changes the given factory (e.g. a constructor) to make a mock of the\n     * object returned. The method itself returns this mock.\n     *\n     * By default, the object returned by the changed factory (that a mock is\n     * made of) is a deep copied, API-identical clone of the object built by the\n     * original factory. Alternatively, the object returned can be given\n     * explicitly.\n     *\n     * @param object {Object} Namespace to hold factory, e.g. qx.html.\n     * @param property {String} Property as string that functions as\n     *  constructor, e.g. \"Element\".\n     * @param customObject {Object?} Object to inject.\n     * @return {Object} Mock of the object built.\n     */\n    revealMock: function(object, property, customObject) {\n      var source = customObject ||\n        this.__deepClone(new object[property]);\n\n      this.stub(object, property).returns(source);\n      return this.mock(source);\n    },\n\n    /**\n     * Deep clone object by copying properties from prototype.\n     *\n     * @param obj {Object} Object to prepare (that is, clone).\n     * @return {Object} Prepared (deeply cloned) object.\n     */\n    __deepClone: function(obj) {\n      var clone = {};\n\n      // Copy from prototype\n      for (var prop in obj) {\n        clone[prop] = obj[prop];\n      }\n\n      return clone;\n    },\n\n    /**\n     * Get the object’s own properties.\n     *\n     * @param object {Object} Object to analyze.\n     * @param targetClazz {Object} Class which marks the end of the chain.\n     * @return {Array} Array of the object’s own properties.\n     */\n    __getOwnProperties: function(object, targetClazz) {\n      var clazz = object.constructor,\n          clazzes = [],\n          properties = [];\n\n      // Find classes in inheritance chain up to targetClazz\n      if (targetClazz) {\n        while(clazz.superclass) {\n          clazzes.push(clazz);\n          clazz = clazz.superclass;\n          if (clazz == targetClazz.superclass) {\n            break;\n          }\n        }\n      }\n\n      // Check if property is own in one of the classes in chain\n      for (var prop in object) {\n\n        if (clazzes.length) {\n          var found = clazzes.some(function(clazz) {\n            return clazz.prototype.hasOwnProperty(prop);\n          });\n          if (!found) {\n            continue;\n          }\n        }\n\n        properties.push(prop);\n      }\n\n      return properties;\n    },\n\n    /**\n     * Safely stub property.\n     *\n     * @param object {Object} Object to stub.\n     * @param prop {String} Property to stub.\n     */\n    __stubProperty: function(object, prop) {\n      // Leave constructor and properties intact\n      if(prop === \"constructor\" || typeof object[prop] !== \"function\") {\n        return;\n      }\n\n      this.stub(object, prop);\n    }\n  }\n});\n"
  ]
}