{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestResult.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "events",
    "startTest",
    "endTest",
    "error",
    "failure",
    "wait",
    "skip",
    "endMeasurement",
    "statics",
    "run",
    "testResult",
    "test",
    "testFunction",
    "members",
    "_timeout",
    "self",
    "resume",
    "testClass",
    "getTestClass",
    "hasListener",
    "addListener",
    "ev",
    "exception",
    "getData",
    "fireDataEvent",
    "getFullName",
    "qxEx",
    "type",
    "BaseError",
    "_createError",
    "undefined",
    "stop",
    "dispose",
    "setUp",
    "ex",
    "dev",
    "unit",
    "AsyncWrapper",
    "getDelay",
    "that",
    "defaultTimeoutFunction",
    "AssertionError",
    "timeoutFunc",
    "getDeferredFunction",
    "context",
    "getContext",
    "window",
    "event",
    "Timer",
    "once",
    "tearDown",
    "except",
    "classname",
    "message",
    "DEFAULTMESSAGE",
    "returnValue",
    "call",
    "MeasurementResult",
    "eventName",
    "exceptions",
    "errors",
    "i",
    "l",
    "length",
    "push",
    "__wrapAddListener",
    "_addedListeners",
    "Registration",
    "addListenerOriginal",
    "target",
    "listener",
    "capture",
    "listenerId",
    "store",
    "indexOf",
    "__removeListeners",
    "listeners",
    "id",
    "removeListenerById",
    "specificTearDown",
    "lang",
    "String",
    "firstUp",
    "getName",
    "doAutoDispose",
    "Debug",
    "disposeProfilingActive",
    "testName",
    "undisposed",
    "stopDisposeProfiling",
    "trace",
    "stackTrace",
    "join",
    "top",
    "log",
    "Logger",
    "warn",
    "object",
    "toHashCode",
    "destruct",
    "TestResult"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * The test result class runs the test functions and fires events depending on\n * the result of the test run.\n */\nqx.Class.define(\"qx.dev.unit.TestResult\",\n{\n  extend : qx.core.Object,\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * Fired before the test is started\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    startTest : \"qx.event.type.Data\",\n\n    /** Fired after the test has finished\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    endTest   : \"qx.event.type.Data\",\n\n    /**\n     * Fired if the test raised an {@link qx.core.AssertionError}\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    error     : \"qx.event.type.Data\",\n\n    /**\n     * Fired if the test failed with a different exception\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    failure   : \"qx.event.type.Data\",\n\n    /**\n     * Fired if an asynchronous test sets a timeout\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    wait   : \"qx.event.type.Data\",\n\n    /**\n     * Fired if the test was skipped, e.g. because a requirement was not met.\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    skip : \"qx.event.type.Data\",\n\n    /**\n     * Fired if a performance test returned results.\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    endMeasurement : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Run a test function using a given test result\n     *\n     * @param testResult {qx.dev.unit.TestResult} The test result to use to run the test\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\n     * @param testFunction {var} The test function\n     */\n    run : function(testResult, test, testFunction) {\n      testResult.run(test, testFunction);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    _timeout : null,\n\n    /**\n     * Run the test\n     *\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\n     * @param testFunction {Function} The test function\n     * @param self {Object?} The context in which to run the test function\n     * @param resume {Boolean?} Resume a currently waiting test\n     *\n     * @return {var} The return value of the test function\n     */\n    run : function(test, testFunction, self, resume)\n    {\n      if(!this._timeout) {\n        this._timeout = {};\n      }\n\n      var testClass = test.getTestClass();\n      if (!testClass.hasListener(\"assertionFailed\")) {\n        testClass.addListener(\"assertionFailed\", function(ev) {\n          var error = [{\n            exception : ev.getData(),\n            test      : test\n          }];\n          this.fireDataEvent(\"failure\", error);\n        }, this);\n      }\n\n      if (resume && !this._timeout[test.getFullName()]) {\n        this._timeout[test.getFullName()] = \"failed\";\n        var qxEx = new qx.type.BaseError(\"Error in asynchronous test\", \"resume() called before wait()\");\n        this._createError(\"failure\", [qxEx], test);\n        this.fireDataEvent(\"endTest\", test);\n        return undefined;\n      }\n\n      this.fireDataEvent(\"startTest\", test);\n\n      if (qx.core.Environment.get(\"qx.debug.dispose\")) {\n        qx.dev.Debug.startDisposeProfiling();\n      }\n\n      if (this._timeout[test.getFullName()])\n      {\n        if (this._timeout[test.getFullName()] !== \"failed\") {\n          this._timeout[test.getFullName()].stop();\n          this._timeout[test.getFullName()].dispose();\n        }\n        delete this._timeout[test.getFullName()];\n      }\n      else\n      {\n        try {\n          test.setUp();\n        }\n        catch(ex)\n        {\n\n          if (ex instanceof qx.dev.unit.AsyncWrapper)\n          {\n\n            if (this._timeout[test.getFullName()]) {\n              // Do nothing if there's already a timeout for this test\n              return;\n            }\n\n            if (ex.getDelay()) {\n              var that = this;\n              var defaultTimeoutFunction = function() {\n                throw new qx.core.AssertionError(\n                  \"Asynchronous Test Error in setUp\",\n                  \"Timeout of \" + ex.getDelay() + \" ms reached before resume() was called.\"\n                );\n              };\n              var timeoutFunc = (ex.getDeferredFunction() ? ex.getDeferredFunction() : defaultTimeoutFunction);\n              var context = (ex.getContext() ? ex.getContext() : window);\n              this._timeout[test.getFullName()] = qx.event.Timer.once(function() {\n                this.run(test, timeoutFunc, context);\n              }, that, ex.getDelay());\n              this.fireDataEvent(\"wait\", test);\n            }\n            return undefined;\n          } else {\n\n            try {\n              this.tearDown(test);\n            }\n            catch (except) {\n              /* Any exceptions here are likely caused by setUp having failed\n               previously, so we'll ignore them. */\n            }\n\n            if (ex.classname == \"qx.dev.unit.RequirementError\") {\n              this._createError(\"skip\", [ex], test);\n              this.fireDataEvent(\"endTest\", test);\n            }\n            else {\n              if (ex instanceof qx.type.BaseError && ex.message == qx.type.BaseError.DEFAULTMESSAGE) {\n                ex.message = \"setUp failed\";\n              }\n              else {\n                ex.message = \"setUp failed: \" + ex.message;\n              }\n              this._createError(\"error\", [ex], test);\n              this.fireDataEvent(\"endTest\", test);\n            }\n\n            return undefined;\n          }\n        }\n      }\n\n      var returnValue;\n\n      try {\n        returnValue = testFunction.call(self || window);\n      }\n      catch(ex)\n      {\n        var error = true;\n        if (ex instanceof qx.dev.unit.AsyncWrapper)\n        {\n\n          if (this._timeout[test.getFullName()]) {\n            // Do nothing if there's already a timeout for this test\n            return;\n          }\n\n          if (ex.getDelay()) {\n            var that = this;\n            var defaultTimeoutFunction = function() {\n              throw new qx.core.AssertionError(\n                \"Asynchronous Test Error\",\n                \"Timeout of \" + ex.getDelay() + \" ms reached before resume() was called.\"\n              );\n            };\n            var timeoutFunc = (ex.getDeferredFunction() ? ex.getDeferredFunction() : defaultTimeoutFunction);\n            var context = (ex.getContext() ? ex.getContext() : window);\n            this._timeout[test.getFullName()] = qx.event.Timer.once(function() {\n               this.run(test, timeoutFunc, context);\n            }, that, ex.getDelay());\n            this.fireDataEvent(\"wait\", test);\n          }\n\n        } else if (ex instanceof qx.dev.unit.MeasurementResult) {\n          error = false;\n          this._createError(\"endMeasurement\", [ex], test);\n        } else {\n          try {\n            this.tearDown(test);\n          } catch(except) {}\n          if (ex.classname == \"qx.core.AssertionError\") {\n            this._createError(\"failure\", [ex], test);\n            this.fireDataEvent(\"endTest\", test);\n          } else if (ex.classname == \"qx.dev.unit.RequirementError\") {\n            this._createError(\"skip\", [ex], test);\n            this.fireDataEvent(\"endTest\", test);\n          } else {\n            this._createError(\"error\", [ex], test);\n            this.fireDataEvent(\"endTest\", test);\n          }\n        }\n      }\n\n      if (!error)\n      {\n        try {\n          this.tearDown(test);\n          this.fireDataEvent(\"endTest\", test);\n        } catch(ex) {\n          if (ex instanceof qx.type.BaseError &&\n            ex.message == qx.type.BaseError.DEFAULTMESSAGE)\n          {\n            ex.message = \"tearDown failed\";\n          }\n          else {\n            ex.message = \"tearDown failed: \" + ex.message;\n          }\n\n          this._createError(\"error\", [ex], test);\n          this.fireDataEvent(\"endTest\", test);\n        }\n      }\n\n      /*\n      if (!this._timeout[test.getFullName()]) {\n        this.__removeListeners(test.getTestClass()[test.getName()]);\n      }\n      */\n\n      return returnValue;\n    },\n\n\n    /**\n     * Fire an error event\n     *\n     * @param eventName {String} Name of the event\n     * @param exceptions {Error[]} The exception(s), which caused the test to fail\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\n     */\n    _createError : function(eventName, exceptions, test)\n    {\n      var errors = [];\n      for (var i=0,l=exceptions.length; i<l; i++) {\n        // WebKit and Opera\n        errors.push({\n          exception : exceptions[i],\n          test      : test\n        });\n      }\n\n      this.fireDataEvent(eventName, errors);\n    },\n\n\n    /**\n     * Wraps the AUT's qx.event.Registration.addListener function so that it\n     * stores references to all added listeners in an array attached to the\n     * current test function. This is done so that any listeners left over after\n     * test execution can be removed to make sure they don't influence other\n     * tests.\n     *\n     * @param testFunction {qx.dev.unit.TestFunction} The current test\n     */\n    __wrapAddListener : function(testFunction)\n    {\n      testFunction._addedListeners = [];\n      if (!qx.event.Registration.addListenerOriginal) {\n        qx.event.Registration.addListenerOriginal = qx.event.Registration.addListener;\n        qx.event.Registration.addListener = function(target, type, listener, self, capture) {\n          var listenerId =  qx.event.Registration.addListenerOriginal(target, type, listener, self, capture);\n          var store = true;\n          if ( (target.classname && target.classname.indexOf(\"testrunner.unit\") == 0)\n               || (self && self.classname && self.classname.indexOf(\"testrunner.unit\") == 0) ) {\n            store = false;\n          }\n          if (store) {\n            testFunction._addedListeners.push([target, listenerId]);\n          }\n          return listenerId;\n        };\n      }\n    },\n\n\n    /**\n     * Removes any listeners left over after a test's run.\n     *\n     * @param testFunction {qx.dev.unit.TestFunction} The current test\n     */\n    __removeListeners : function(testFunction)\n    {\n      // remove listeners added during test execution\n      if (testFunction._addedListeners) {\n        var listeners = testFunction._addedListeners;\n        for (var i=0,l=listeners.length; i<l; i++) {\n          var target = listeners[i][0];\n          var id = listeners[i][1];\n          try {\n            qx.event.Registration.removeListenerById(target, id);\n          } catch(ex) {}\n        }\n      }\n    },\n\n\n    /**\n     * Calls the generic tearDown method on the test class, then the specific\n     * tearDown for the test, if one is defined.\n     *\n     * @param test {Object} The test object (first argument of {@link #run})\n     */\n    tearDown : function(test)\n    {\n      test.tearDown();\n      var testClass = test.getTestClass();\n      var specificTearDown = \"tearDown\" + qx.lang.String.firstUp(test.getName());\n      if (testClass[specificTearDown]) {\n        testClass[specificTearDown]();\n      }\n      testClass.doAutoDispose();\n\n      if (qx.core.Environment.get(\"qx.debug.dispose\")\n        && qx.dev.Debug.disposeProfilingActive)\n      {\n        var testName = test.getFullName();\n        var undisposed = qx.dev.Debug.stopDisposeProfiling();\n        for (var i=0; i<undisposed.length; i++) {\n          var trace;\n          if (undisposed[i].stackTrace) {\n            trace = undisposed[i].stackTrace.join(\"\\n\");\n          }\n          window.top.qx.log.Logger.warn(\"Undisposed object in \" + testName + \": \"\n          + undisposed[i].object.classname + \"[\" + undisposed[i].object.toHashCode()\n          + \"]\" + \"\\n\" + trace);\n        }\n      }\n    }\n  },\n\n  destruct : function() {\n    this._timeout = null;\n  }\n});\n"
  ]
}