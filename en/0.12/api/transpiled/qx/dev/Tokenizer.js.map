{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/Tokenizer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "tokenizeJavaScript",
    "javaScriptText",
    "keywords",
    "atoms",
    "qxkeys",
    "reg",
    "str",
    "RegExp",
    "str_re_line_comment",
    "str_re_full_comment",
    "str_re_ident",
    "str_re_integer",
    "str_re_float",
    "str_re_doublequote",
    "str_re_singlequote",
    "str_re_tab",
    "str_re_nl",
    "str_re_space",
    "re_regexp_part",
    "str_re_regexp_all",
    "join",
    "re_line_comment",
    "re_full_comment",
    "re_ident",
    "re_integer",
    "re_float",
    "re_doublequote",
    "re_singlequote",
    "re_tab",
    "re_nl",
    "re_space",
    "re_regexp_all",
    "re_token",
    "tokens",
    "a",
    "match",
    "i",
    "length",
    "token",
    "push",
    "type",
    "value",
    "javaScriptToHtml",
    "forPreTag",
    "dev",
    "Tokenizer",
    "js",
    "util",
    "StringBuilder",
    "htmlValue",
    "bom",
    "String",
    "escape",
    "add",
    "nl",
    "Environment",
    "get",
    "ws"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;AAGEC,IAAAA,OAAO,EACP;AAEE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,kBAAkB,EAAG,4BAASC,cAAT,EACrB;AACE,YAAIC,QAAQ,GAAG;AACb,mBAAU,CADG;AAEb,kBAAS,CAFI;AAGb,mBAAU,CAHG;AAIb,sBAAa,CAJA;AAKb,qBAAY,CALC;AAMb,oBAAW,CANE;AAOb,gBAAO,CAPM;AAQb,kBAAS,CARI;AASb,qBAAY,CATC;AAUb,iBAAQ,CAVK;AAWb,sBAAa,CAXA;AAYb,gBAAO,CAZM;AAab,gBAAO,CAbM;AAcb,wBAAe,CAdF;AAeb,iBAAQ,CAfK;AAgBb,oBAAW,CAhBE;AAiBb,oBAAW,CAjBE;AAkBb,mBAAU,CAlBG;AAmBb,iBAAQ,CAnBK;AAoBb,oBAAW,CApBE;AAqBb,iBAAQ,CArBK;AAsBb,mBAAU,CAtBG;AAuBb,kBAAS;AAvBI,SAAf;AA0BA,YAAIC,KAAK,GAAG;AACV,kBAAS,CADC;AAEV,kBAAS,CAFC;AAGV,kBAAS,CAHC;AAIV,mBAAU,CAJA;AAKV,iBAAQ,CALE;AAMV,sBAAa,CANH;AAOV,kBAAS;AAPC,SAAZ;AAUA,YAAIC,MAAM,GAAG;AACX,qBAAY,CADD;AAEX,qBAAY,CAFD;AAGX,uBAAc,CAHH;AAIX,sBAAa,CAJF;AAKX,oBAAW,CALA;AAMX,wBAAe,CANJ;AAOX,oBAAW,CAPA;AAQX,uBAAc;AARH,SAAb;;AAWA,YAAIC,GAAG,GAAG,SAANA,GAAM,CAASC,GAAT,EAAc;AACtB,iBAAO,IAAIC,MAAJ,CAAW,MAAMD,GAAN,GAAY,GAAvB,CAAP;AACD,SAFD;;AAIA,YAAIE,mBAAmB,GAAG,oBAA1B;AACA,YAAIC,mBAAmB,GAAG,8BAA1B;AACA,YAAIC,YAAY,GAAG,2BAAnB;AACA,YAAIC,cAAc,GAAG,WAArB;AACA,YAAIC,YAAY,GAAG,uCAAnB;AACA,YAAIC,kBAAkB,GAAG,aAAzB;AACA,YAAIC,kBAAkB,GAAG,aAAzB;AACA,YAAIC,UAAU,GAAG,KAAjB;AACA,YAAIC,SAAS,GAAG,gBAAhB;AACA,YAAIC,YAAY,GAAG,KAAnB;AAEA,YAAIC,cAAc,GAAG,gDAArB;AACA,YAAIC,iBAAiB,GAAG,CACtB,iDAAiDD,cAAjD,GAAkE,iBAD5C,EAEtB,sCAAsCA,cAAtC,GAAuD,iBAFjC,EAGtB,iBAAiBA,cAAjB,GAAkC,iCAHZ,EAItB,4BAA4BA,cAA5B,GAA6C,UAJvB,EAKtB,eAAeA,cAAf,GAAgC,YALV,EAMtBE,IANsB,CAMjB,GANiB,CAAxB;AAQA,YAAIC,eAAe,GAAGhB,GAAG,CAACG,mBAAD,CAAzB;AACA,YAAIc,eAAe,GAAGjB,GAAG,CAACI,mBAAD,CAAzB;AACA,YAAIc,QAAQ,GAAGlB,GAAG,CAACK,YAAD,CAAlB;AACA,YAAIc,UAAU,GAAGnB,GAAG,CAACM,cAAD,CAApB;AACA,YAAIc,QAAQ,GAAGpB,GAAG,CAACO,YAAD,CAAlB;AACA,YAAIc,cAAc,GAAGrB,GAAG,CAACQ,kBAAD,CAAxB;AACA,YAAIc,cAAc,GAAGtB,GAAG,CAACS,kBAAD,CAAxB;AACA,YAAIc,MAAM,GAAGvB,GAAG,CAACU,UAAD,CAAhB;AACA,YAAIc,KAAK,GAAGxB,GAAG,CAACW,SAAD,CAAf;AACA,YAAIc,QAAQ,GAAGzB,GAAG,CAACY,YAAD,CAAlB;AACA,YAAIc,aAAa,GAAG1B,GAAG,CAACc,iBAAD,CAAvB;AAEA,YAAIa,QAAQ,GAAG,IAAIzB,MAAJ,CAAW,CACxBC,mBADwB,EAExBC,mBAFwB,EAGxBC,YAHwB,EAIxBC,cAJwB,EAKxBC,YALwB,EAMxBC,kBANwB,EAOxBC,kBAPwB,EAQxBA,kBARwB,EASxBC,UATwB,EAUxBC,SAVwB,EAWxBC,YAXwB,EAYxBE,iBAZwB,EAaxB,GAbwB,EAcxBC,IAdwB,CAcnB,GAdmB,CAAX,EAcF,GAdE,CAAf;AAgBA,YAAIa,MAAM,GAAG,EAAb;AAEA,YAAIC,CAAC,GAAGjC,cAAc,CAACkC,KAAf,CAAqBH,QAArB,CAAR;;AAEA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EACA;AACE,cAAIE,KAAK,GAAGJ,CAAC,CAACE,CAAD,CAAb;;AACA,cAAIE,KAAK,CAACH,KAAN,CAAYd,eAAZ,CAAJ,EAAkC;AAChCY,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,aAAP;AAAsBC,cAAAA,KAAK,EAAEH;AAA7B,aAAZ;AACD,WAFD,MAGK,IAAIA,KAAK,CAACH,KAAN,CAAYb,eAAZ,CAAJ,EAAkC;AACrCW,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,aAAP;AAAsBC,cAAAA,KAAK,EAAEH;AAA7B,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYJ,aAAZ,CAAJ,EAAgC;AACnCE,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,QAAP;AAAiBC,cAAAA,KAAK,EAAEH;AAAxB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYR,cAAZ,CAAJ,EAAiC;AACpCM,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,MAAP;AAAeC,cAAAA,KAAK,EAAEH;AAAtB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYT,cAAZ,CAAJ,EAAiC;AACpCO,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,OAAP;AAAgBC,cAAAA,KAAK,EAAEH;AAAvB,aAAZ;AACD,WAFI,MAGA,IAAGpC,QAAQ,CAACoC,KAAD,CAAX,EAAoB;AACvBL,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,SAAP;AAAkBC,cAAAA,KAAK,EAAEH;AAAzB,aAAZ;AACD,WAFI,MAGA,IAAGnC,KAAK,CAACmC,KAAD,CAAR,EAAiB;AACpBL,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,MAAP;AAAeC,cAAAA,KAAK,EAAEH;AAAtB,aAAZ;AACD,WAFI,MAGA,IAAGlC,MAAM,CAACkC,KAAD,CAAT,EAAkB;AACrBL,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,OAAP;AAAgBC,cAAAA,KAAK,EAAEH;AAAvB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYZ,QAAZ,CAAJ,EAA2B;AAC9BU,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,OAAP;AAAgBC,cAAAA,KAAK,EAAEH;AAAvB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYV,QAAZ,CAAJ,EAA2B;AAC9BQ,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,MAAP;AAAeC,cAAAA,KAAK,EAAEH;AAAtB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYX,UAAZ,CAAJ,EAA6B;AAChCS,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,KAAP;AAAcC,cAAAA,KAAK,EAAEH;AAArB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYN,KAAZ,CAAJ,EAAwB;AAC3BI,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,IAAP;AAAaC,cAAAA,KAAK,EAAEH;AAApB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAY9B,GAAG,CAACyB,QAAD,CAAf,CAAJ,EAAgC;AACnCG,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,IAAP;AAAaC,cAAAA,KAAK,EAAEH;AAApB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,CAACH,KAAN,CAAYP,MAAZ,CAAJ,EAAyB;AAC5BK,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,KAAP;AAAcC,cAAAA,KAAK,EAAEH;AAArB,aAAZ;AACD,WAFI,MAGA,IAAIA,KAAK,IAAI,GAAb,EAAkB;AACrBL,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,KAAP;AAAcC,cAAAA,KAAK,EAAE;AAArB,aAAZ;AACD,WAFI,MAGA,IAAIH,KAAK,IAAI,GAAb,EAAkB;AACrBL,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,KAAP;AAAcC,cAAAA,KAAK,EAAE;AAArB,aAAZ;AACD,WAFI,MAGC,IAAIH,KAAK,IAAI,GAAb,EAAkB;AACtBL,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,KAAP;AAAcC,cAAAA,KAAK,EAAE;AAArB,aAAZ;AACD,WAFK,MAGD;AACHR,YAAAA,MAAM,CAACM,IAAP,CAAY;AAACC,cAAAA,IAAI,EAAE,KAAP;AAAcC,cAAAA,KAAK,EAAEH;AAArB,aAAZ;AACD;AACF;;AAED,eAAOL,MAAP;AACD,OA/KH;;AAkLE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIS,MAAAA,gBAAgB,EAAG,0BAASzC,cAAT,EAAyB0C,SAAzB,EACnB;AACE,YAAIV,MAAM,GAAG3C,EAAE,CAACsD,GAAH,CAAOC,SAAP,CAAiB7C,kBAAjB,CAAoCC,cAApC,CAAb;AACA,YAAI6C,EAAE,GAAG,IAAIxD,EAAE,CAACyD,IAAH,CAAQC,aAAZ,EAAT;;AACA,aAAK,IAAIZ,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,MAAM,CAACI,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,cAAIE,KAAK,GAAGL,MAAM,CAACG,CAAD,CAAlB;AACA,cAAIa,SAAS,GAAG3D,EAAE,CAAC4D,GAAH,CAAOC,MAAP,CAAcC,MAAd,CAAqBd,KAAK,CAACG,KAA3B,CAAhB;;AACA,kBAAOH,KAAK,CAACE,IAAb;AACE,iBAAK,QAAL;AACEM,cAAAA,EAAE,CAACO,GAAH,CAAO,uBAAP,EAAgCJ,SAAhC,EAA2C,SAA3C;AACA;;AAEF,iBAAK,OAAL;AACEH,cAAAA,EAAE,CAACO,GAAH,CAAO,sBAAP,EAA+BJ,SAA/B,EAA0C,SAA1C;AACA;;AAEF,iBAAK,aAAL;AACA,iBAAK,aAAL;AACEH,cAAAA,EAAE,CAACO,GAAH,CAAO,wBAAP,EAAiCJ,SAAjC,EAA4C,SAA5C;AACA;;AAEF,iBAAK,MAAL;AACA,iBAAK,OAAL;AACEH,cAAAA,EAAE,CAACO,GAAH,CAAO,uBAAP,EAAgCJ,SAAhC,EAA2C,SAA3C;AACA;;AAEF,iBAAK,SAAL;AACA,iBAAK,MAAL;AACA,iBAAK,OAAL;AACEH,cAAAA,EAAE,CAACO,GAAH,CAAO,eAAP,EAAwBf,KAAK,CAACE,IAA9B,EAAoC,IAApC,EAA0CS,SAA1C,EAAqD,SAArD;AACA;;AAEF,iBAAK,IAAL;AACE,kBAAIK,EAAE,GAAGhE,EAAE,CAACO,IAAH,CAAQ0D,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,QAA1C,IAAsD,CAACb,SAAvD,GAAmE,MAAnE,GAA4E,IAArF;AACAG,cAAAA,EAAE,CAACO,GAAH,CAAOC,EAAP;AACA;;AAEF,iBAAK,IAAL;AACE,kBAAIG,EAAE,GAAGnE,EAAE,CAACO,IAAH,CAAQ0D,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,QAA1C,IACN,CAACb,SADK,GACO,QADP,GACkB,GAD3B;AAEAG,cAAAA,EAAE,CAACO,GAAH,CAAOI,EAAP;AACA;;AAEF;AACEX,cAAAA,EAAE,CAACO,GAAH,CAAOJ,SAAP;AArCJ;AAuCD;;AACD,eAAOH,EAAE,CAACU,GAAH,EAAP;AACD;AA9OH;AAJF,GADA;AA7BAlE,EAAAA,EAAE,CAACsD,GAAH,CAAOC,SAAP,CAAiBpD,aAAjB,GAAiCA,aAAjC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n     Based on Public Domain code by Christopher Diggins\n     http://www.cdiggins.com/tokenizer.html\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Christopher Diggins (original tokenizer code)\n\n************************************************************************ */\n\n/**\n * Simple JavaScript tokenizer used to print syntax highlighted\n * JavaScript code.\n *\n * Based on Public Domain code by Christopher Diggins\n * http://www.cdiggins.com/tokenizer.html\n */\nqx.Class.define(\"qx.dev.Tokenizer\",\n{\n  extend : qx.core.Object,\n\n  statics :\n  {\n\n    /**\n     * Tokenizes a string of JavaScript code.\n     *\n     * @param javaScriptText {String} String of JavaScript code to tokenize\n     * @return {Map[]} Array of tokens. A token is a map with the fields\n     *   <code>type</code> containing the token type and <code>value</code>,\n     *   which contains the string value of the token from the input string.\n     */\n    tokenizeJavaScript : function(javaScriptText)\n    {\n      var keywords = {\n        \"break\" : 1,\n        \"case\" : 1,\n        \"catch\" : 1,\n        \"continue\" : 1,\n        \"default\" : 1,\n        \"delete\" : 1,\n        \"do\" : 1,\n        \"else\" : 1,\n        \"finally\" : 1,\n        \"for\" : 1,\n        \"function\" : 1,\n        \"if\" : 1,\n        \"in\" : 1,\n        \"instanceof\" : 1,\n        \"new\" : 1,\n        \"return\" : 1,\n        \"switch\" : 1,\n        \"throw\" : 1,\n        \"try\" : 1,\n        \"typeof\" : 1,\n        \"var\" : 1,\n        \"while\" : 1,\n        \"with\" : 1\n      };\n\n      var atoms = {\n        \"void\" : 1,\n        \"null\" : 1,\n        \"true\" : 1,\n        \"false\" : 1,\n        \"NaN\" : 1,\n        \"Infinity\" : 1,\n        \"this\" : 1\n      };\n\n      var qxkeys = {\n        \"statics\" : 1,\n        \"members\" : 1,\n        \"construct\" : 1,\n        \"destruct\" : 1,\n        \"events\" : 1,\n        \"properties\" : 1,\n        \"extend\" : 1,\n        \"implement\" : 1\n      };\n\n      var reg = function(str) {\n        return new RegExp(\"^\" + str + \"$\");\n      };\n\n      var str_re_line_comment = \"\\\\/\\\\/.*?[\\\\n\\\\r$]\";\n      var str_re_full_comment = \"\\\\/\\\\*(?:.|[\\\\n\\\\r])*?\\\\*\\\\/\";\n      var str_re_ident = \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\";\n      var str_re_integer = \"[+-]?\\\\d+\";\n      var str_re_float = \"[+-]?\\\\d+(([.]\\\\d+)*([eE][+-]?\\\\d+))?\";\n      var str_re_doublequote = '[\"][^\"]*[\"]';\n      var str_re_singlequote = \"['][^']*[']\";\n      var str_re_tab = \"\\\\t\";\n      var str_re_nl = \"\\\\r\\\\n|\\\\r|\\\\n\";\n      var str_re_space = \"\\\\s\";\n\n      var re_regexp_part = \"(?:\\\\/(?!\\\\*)[^\\\\t\\\\n\\\\r\\\\f\\\\v\\\\/]+?\\\\/[mgi]*)\";\n      var str_re_regexp_all = [\n        \"\\\\.(?:match|search|split)\\\\s*\\\\(\\\\s*\\\\(*\\\\s*\" + re_regexp_part + \"\\\\s*\\\\)*\\\\s*\\\\)\",\n        \"\\\\.(?:replace)\\\\s*\\\\(\\\\s*\\\\(*\\\\s*\" + re_regexp_part + \"\\\\s*\\\\)*\\\\s*?,?\",\n        \"\\\\s*\\\\(*\\\\s*\" + re_regexp_part + \"\\\\)*\\\\.(?:test|exec)\\\\s*\\\\(\\\\s*\",\n        \"(?::|=|\\\\?)\\\\s*\\\\(*\\\\s*\" + re_regexp_part + \"\\\\s*\\\\)*\",\n        \"[\\\\(,]\\\\s*\" + re_regexp_part + \"\\\\s*[,\\\\)]\"\n      ].join(\"|\");\n\n      var re_line_comment = reg(str_re_line_comment);\n      var re_full_comment = reg(str_re_full_comment);\n      var re_ident = reg(str_re_ident);\n      var re_integer = reg(str_re_integer);\n      var re_float = reg(str_re_float);\n      var re_doublequote = reg(str_re_doublequote);\n      var re_singlequote = reg(str_re_singlequote);\n      var re_tab = reg(str_re_tab);\n      var re_nl = reg(str_re_nl);\n      var re_space = reg(str_re_space);\n      var re_regexp_all = reg(str_re_regexp_all);\n\n      var re_token = new RegExp([\n        str_re_line_comment,\n        str_re_full_comment,\n        str_re_ident,\n        str_re_integer,\n        str_re_float,\n        str_re_doublequote,\n        str_re_singlequote,\n        str_re_singlequote,\n        str_re_tab,\n        str_re_nl,\n        str_re_space,\n        str_re_regexp_all,\n        \".\"\n      ].join(\"|\"), \"g\");\n\n      var tokens = [];\n\n      var a = javaScriptText.match(re_token);\n\n      for (var i = 0; i < a.length; i++)\n      {\n        var token = a[i];\n        if (token.match(re_line_comment)) {\n          tokens.push({type: \"linecomment\", value: token});\n        }\n        else if (token.match(re_full_comment)) {\n          tokens.push({type: \"fullcomment\", value: token});\n        }\n        else if (token.match(re_regexp_all)) {\n          tokens.push({type: \"regexp\", value: token});\n        }\n        else if (token.match(re_singlequote)) {\n          tokens.push({type: \"qstr\", value: token});\n        }\n        else if (token.match(re_doublequote)) {\n          tokens.push({type: \"qqstr\", value: token});\n        }\n        else if(keywords[token]) {\n          tokens.push({type: \"keyword\", value: token});\n        }\n        else if(atoms[token]) {\n          tokens.push({type: \"atom\", value: token});\n        }\n        else if(qxkeys[token]) {\n          tokens.push({type: \"qxkey\", value: token});\n        }\n        else if (token.match(re_ident)) {\n          tokens.push({type: \"ident\", value: token});\n        }\n        else if (token.match(re_float)) {\n          tokens.push({type: \"real\", value: token});\n        }\n        else if (token.match(re_integer)) {\n          tokens.push({type: \"int\", value: token});\n        }\n        else if (token.match(re_nl)) {\n          tokens.push({type: \"nl\", value: token});\n        }\n        else if (token.match(reg(re_space))) {\n          tokens.push({type: \"ws\", value: token});\n        }\n        else if (token.match(re_tab)) {\n          tokens.push({type: \"tab\", value: token});\n        }\n        else if (token == \">\") {\n          tokens.push({type: \"sym\", value: \">\"});\n        }\n        else if (token == \"<\") {\n          tokens.push({type: \"sym\", value: \"<\"});\n        }\n        else  if (token == \"&\") {\n          tokens.push({type: \"sym\", value: \"&\"});\n        }\n        else {\n          tokens.push({type: \"sym\", value: token});\n        }\n      }\n\n      return tokens;\n    },\n\n\n    /**\n     * Create a colored HTML string for a string of JavaScript code.\n     * The colored elements are placed in <code>span</code> elements\n     * with class names corresponding to the token types. The returned code\n     * should be placed into <code>pre</code> tags to preserve the\n     * indentation.\n     *\n     * @param javaScriptText {String} String of JavaScript code to tokenize\n     * @param forPreTag {Boolean ? false} Whatever the HTML should be generated\n     *   for a pre tag or not\n     * @return {String} HTML fragment with the colored JavaScript code.\n     */\n    javaScriptToHtml : function(javaScriptText, forPreTag)\n    {\n      var tokens = qx.dev.Tokenizer.tokenizeJavaScript(javaScriptText);\n      var js = new qx.util.StringBuilder();\n      for (var i=0; i<tokens.length; i++) {\n        var token = tokens[i];\n        var htmlValue = qx.bom.String.escape(token.value);\n        switch(token.type) {\n          case \"regexp\":\n            js.add(\"<span class='regexp'>\", htmlValue, \"</span>\");\n            break;\n\n          case \"ident\":\n            js.add(\"<span class='ident'>\", htmlValue, \"</span>\");\n            break;\n\n          case \"linecomment\":\n          case \"fullcomment\":\n            js.add(\"<span class='comment'>\", htmlValue, \"</span>\");\n            break;\n\n          case \"qstr\":\n          case \"qqstr\":\n            js.add(\"<span class='string'>\", htmlValue, \"</span>\");\n            break;\n\n          case \"keyword\":\n          case \"atom\":\n          case \"qxkey\":\n            js.add(\"<span class='\", token.type, \"'>\", htmlValue, \"</span>\");\n            break;\n\n          case \"nl\":\n            var nl = qx.core.Environment.get(\"engine.name\") == \"mshtml\" && !forPreTag ? \"<br>\" : \"\\n\";\n            js.add(nl);\n            break;\n\n          case \"ws\":\n            var ws = qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n               !forPreTag ? \"&nbsp;\" : \" \";\n            js.add(ws);\n            break;\n\n          default:\n            js.add(htmlValue);\n        }\n      }\n      return js.get();\n    }\n  }\n});\n"
  ]
}