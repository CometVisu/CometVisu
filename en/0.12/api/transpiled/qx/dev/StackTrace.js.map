{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/dev/StackTrace.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "FILENAME_TO_CLASSNAME",
    "FORMAT_STACKTRACE",
    "getStackTrace",
    "trace",
    "Error",
    "ex",
    "dev",
    "StackTrace",
    "hasEnvironmentCheck",
    "core",
    "Environment",
    "get",
    "errorTrace",
    "getStackTraceFromError",
    "callerTrace",
    "getStackTraceFromCaller",
    "arguments",
    "lang",
    "Array",
    "removeAt",
    "length",
    "i",
    "Math",
    "min",
    "callerCall",
    "indexOf",
    "methodName",
    "callerArr",
    "split",
    "mO",
    "exec",
    "pop",
    "callerClassName",
    "join",
    "errorCall",
    "errorArr",
    "errorClassName",
    "lineNumber",
    "columnNumber",
    "className",
    "Class",
    "getByName",
    "line",
    "args",
    "isStrictMode",
    "fcn",
    "Function",
    "getCaller",
    "knownFunction",
    "fcnName",
    "getName",
    "push",
    "caller",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "error",
    "lineRe",
    "hit",
    "fileName",
    "url",
    "traceProp",
    "stack",
    "__fileNameToClassName",
    "__formatStackTrace",
    "fileReParens",
    "fileRe",
    "fileMatch",
    "stacktrace",
    "message",
    "traceString",
    "trim",
    "lines",
    "reResult",
    "match",
    "sourceURL",
    "convertedName",
    "Type",
    "isString",
    "__fileNameToClassNameDefault",
    "scriptDir",
    "jsPos",
    "paramPos",
    "substring",
    "replace",
    "isArray",
    "defer",
    "bom",
    "client",
    "EcmaScript"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Methods to get information about the JavaScript call stack.\n *\n * @require(qx.lang.normalize.String)\n * @ignore(qx.bom.client.EcmaScript.*)\n * @ignore(qx.bom.client)\n * @ignore(qx.bom)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.dev.StackTrace\",\n{\n  statics:\n  {\n\n    /**\n     * Optional user-defined function to convert source file names into readable\n     * class names. Will be called with the source file name extracted from the\n     * browser's stack trace information as the only argument. The returned\n     * string is used in the output of {@link #getStackTraceFromError}\n     */\n    FILENAME_TO_CLASSNAME : null,\n\n    /**\n     * Optional user-defined formatting function for stack trace information.\n     * Will be called by with an array of strings representing the calls in the\n     * stack trace. {@link #getStackTraceFromError} will return the output of\n     * this function. Must return an array of strings.\n     */\n    FORMAT_STACKTRACE : null,\n\n    /**\n     * Get a stack trace of the current position in the code.\n     *\n     * Browser compatibility:\n     * <ul>\n     *   <li>In new versions of Gecko, WebKit and Opera, the output of\n     *   {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is\n     *   combined to generate the richest trace, including line numbers.</li>\n     *   <li>For Internet Explorer (and other engines that do not provide stack\n     *    traces), {@link #getStackTraceFromCaller} is used</li>\n     * </ul>\n     *\n     * @return {String[]} Stack trace of the current position in the code. Each line in the array\n     *     represents one call in the stack trace.\n     */\n    getStackTrace : function()\n    {\n      var trace = [];\n      try {\n        throw new Error();\n      }\n      catch(ex) {\n        if (qx.dev.StackTrace.hasEnvironmentCheck &&\n            qx.core.Environment.get(\"ecmascript.error.stacktrace\"))\n        {\n          var errorTrace = qx.dev.StackTrace.getStackTraceFromError(ex);\n          var callerTrace = qx.dev.StackTrace.getStackTraceFromCaller(arguments);\n          qx.lang.Array.removeAt(errorTrace, 0);\n\n          trace = callerTrace.length > errorTrace.length ? callerTrace : errorTrace;\n          for (var i=0; i<Math.min(callerTrace.length, errorTrace.length); i++)\n          {\n            var callerCall = callerTrace[i];\n            if (callerCall.indexOf(\"anonymous\") >= 0) {\n              continue;\n            }\n\n            var methodName = null;\n            var callerArr = callerCall.split(\".\");\n            var mO = /(.*?)\\(/.exec(callerArr[callerArr.length - 1]);\n            if (mO && mO.length == 2) {\n              methodName = mO[1];\n              callerArr.pop();\n            }\n            if (callerArr[callerArr.length - 1] == \"prototype\") {\n              callerArr.pop();\n            }\n            var callerClassName = callerArr.join(\".\");\n\n            var errorCall = errorTrace[i];\n            var errorArr = errorCall.split(\":\");\n            var errorClassName = errorArr[0];\n            var lineNumber = errorArr[1];\n            var columnNumber;\n            if (errorArr[2]) {\n              columnNumber = errorArr[2];\n            }\n\n            var className = null;\n            if (qx.Class && qx.Class.getByName(errorClassName)) {\n              className = errorClassName;\n            } else {\n              className = callerClassName;\n            }\n            var line = className;\n            if (methodName) {\n              line += \".\" + methodName;\n            }\n            line += \":\" + lineNumber;\n            if (columnNumber) {\n              line += \":\" + columnNumber;\n            }\n            trace[i] = line;\n          }\n        }\n        else {\n          trace = this.getStackTraceFromCaller(arguments);\n        }\n      }\n\n      return trace;\n    },\n\n\n    /**\n     * Get a stack trace from the arguments special variable using the\n     * <code>caller</code> property.\n     *\n     * This methods returns class/mixin and function names of each step\n     * in the call stack.\n     *\n     * Recursion is not supported.\n     *\n     * @param args {arguments} arguments variable.\n     * @return {String[]} Stack trace of caller of the function the arguments variable belongs to.\n     *     Each line in the array represents one call in the stack trace.\n     * @signature function(args)\n     */\n    getStackTraceFromCaller : function(args)\n    {\n      var isStrictMode = function () {\n        return (typeof this == 'undefined');\n      };\n\n      var trace = [];\n      var fcn = null;\n      if (!isStrictMode()) {\n        try {\n          fcn = qx.lang.Function.getCaller(args);\n        }catch(ex) {\n          // Nothing\n        }\n      }\n      var knownFunction = {};\n      while (fcn)\n      {\n        var fcnName = qx.lang.Function.getName(fcn);\n        trace.push(fcnName);\n\n        try {\n          fcn = fcn.caller;\n        } catch(ex) {\n          break;\n        }\n\n        if (!fcn) {\n          break;\n        }\n\n        // avoid infinite recursion\n        var hash = qx.core.ObjectRegistry.toHashCode(fcn);\n        if (knownFunction[hash]) {\n          trace.push(\"...\");\n          break;\n        }\n        knownFunction[hash] = fcn;\n      }\n      return trace;\n    },\n\n\n    /**\n     * Try to get a stack trace from an Error object. Mozilla sets the field\n     * <code>stack</code> for Error objects thrown using <code>throw new Error()</code>.\n     * From this field it is possible to get a stack trace from the position\n     * the exception was thrown at.\n     *\n     * This will get the JavaScript file names and the line numbers of each call.\n     * The file names are converted into qooxdoo class names if possible (customizable\n     * via {@link #FILENAME_TO_CLASSNAME}).\n     *\n     * The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.\n     *\n     * This works reliably in Gecko-based browsers. Later Opera versions and\n     * Chrome also provide a useful stack trace. For Safari, only the class or\n     * file name and line number where the error occurred are returned.\n     * IE 6/7/8/9 does not attach any stack information to error objects so an\n     * empty array is returned.\n     *\n     * @param error {Error} Error exception instance.\n     * @return {String[]} Stack trace of the exception. Each line in the array\n     *     represents one call in the stack trace.\n     */\n    getStackTraceFromError : function(error)\n    {\n      var trace = [];\n      var lineRe,\n          hit,\n          className,\n          lineNumber,\n          columnNumber,\n          fileName,\n          url;\n\n      var traceProp = qx.dev.StackTrace.hasEnvironmentCheck ?\n          qx.core.Environment.get(\"ecmascript.error.stacktrace\") : null;\n\n      if (traceProp === \"stack\") {\n        if (!error.stack) {\n          return trace;\n        }\n        // Gecko style, e.g. \"()@http://localhost:8080/webcomponent-test-SNAPSHOT/webcomponent/js/com/ptvag/webcomponent/common/log/Logger:253\"\n        lineRe = /@(.+):(\\d+)$/gm;\n\n        while ((hit = lineRe.exec(error.stack)) != null)\n        {\n          url = hit[1];\n          lineNumber = hit[2];\n\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber);\n        }\n\n        if (trace.length > 0) {\n          return this.__formatStackTrace(trace);\n        }\n        /*\n         * Chrome trace info comes in two flavors:\n         * at [jsObject].function (fileUrl:line:char)\n         * at fileUrl:line:char\n         */\n        lineRe = /at (.*)/gm;\n        var fileReParens = /\\((.*?)(:[\\d:]+)\\)/;\n        var fileRe = /(.*?)(:[\\d:]+$)/;\n        while ((hit = lineRe.exec(error.stack)) != null) {\n          var fileMatch = fileReParens.exec(hit[1]);\n          if (!fileMatch) {\n            fileMatch = fileRe.exec(hit[1]);\n          }\n\n          if (fileMatch) {\n            className = this.__fileNameToClassName(fileMatch[1]);\n            trace.push(className + fileMatch[2]);\n          } else {\n            trace.push(hit[1]);\n          }\n        }\n      }\n      else if (traceProp === \"stacktrace\")\n      {\n        // Opera\n        var stacktrace = error.stacktrace;\n        if (!stacktrace) {\n          return trace;\n        }\n        if (stacktrace.indexOf(\"Error created at\") >= 0) {\n          stacktrace = stacktrace.split(\"Error created at\")[0];\n        }\n\n        // new Opera style (10.6+)\n        lineRe = /line\\ (\\d+?),\\ column\\ (\\d+?)\\ in\\ (?:.*?)\\ in\\ (.*?):[^\\/]/gm;\n        while ((hit = lineRe.exec(stacktrace)) != null) {\n          lineNumber = hit[1];\n          columnNumber = hit[2];\n          url = hit[3];\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber + \":\" + columnNumber);\n        }\n\n        if (trace.length > 0) {\n          return this.__formatStackTrace(trace);\n        }\n\n        // older Opera style\n        lineRe = /Line\\ (\\d+?)\\ of\\ linked\\ script\\ (.*?)$/gm;\n        while ((hit = lineRe.exec(stacktrace)) != null) {\n          lineNumber = hit[1];\n          url = hit[2];\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber);\n        }\n      }\n      else if (error.message && error.message.indexOf(\"Backtrace:\") >= 0) {\n        // Some old Opera versions append the trace to the message property\n        var traceString = error.message.split(\"Backtrace:\")[1].trim();\n        var lines = traceString.split(\"\\n\");\n        for (var i=0; i<lines.length; i++)\n        {\n          var reResult = lines[i].match(/\\s*Line ([0-9]+) of.* (\\S.*)/);\n          if (reResult && reResult.length >= 2) {\n            lineNumber = reResult[1];\n            fileName = this.__fileNameToClassName(reResult[2]);\n            trace.push(fileName + \":\" + lineNumber);\n          }\n        }\n      }\n      else if (error.sourceURL && error.line) {\n        // Safari\n        trace.push(this.__fileNameToClassName(error.sourceURL) + \":\" + error.line);\n      }\n\n      return this.__formatStackTrace(trace);\n    },\n\n    /**\n     * Converts the URL of a JavaScript file to a class name using either a\n     * user-defined ({@link #FILENAME_TO_CLASSNAME}) or default\n     * ({@link #__fileNameToClassNameDefault}) converter\n     *\n     * @param fileName {String} URL of the JavaScript file\n     * @return {String} Result of the conversion\n     */\n    __fileNameToClassName : function(fileName)\n    {\n      if (typeof qx.dev.StackTrace.FILENAME_TO_CLASSNAME == \"function\") {\n        var convertedName = qx.dev.StackTrace.FILENAME_TO_CLASSNAME(fileName);\n        if (qx.core.Environment.get(\"qx.debug\") &&\n          !qx.lang.Type.isString(convertedName))\n        {\n          throw new Error(\"FILENAME_TO_CLASSNAME must return a string!\");\n        }\n        return convertedName;\n      }\n\n      return qx.dev.StackTrace.__fileNameToClassNameDefault(fileName);\n    },\n\n\n    /**\n     * Converts the URL of a JavaScript file to a class name if the file is\n     * named using the qooxdoo naming conventions.\n     *\n     * @param fileName {String} URL of the JavaScript file\n     * @return {String} class name of the file if conversion was possible.\n     * Otherwise the fileName is returned unmodified.\n     */\n    __fileNameToClassNameDefault : function(fileName)\n    {\n      var scriptDir = \"/source/class/\";\n      var jsPos = fileName.indexOf(scriptDir);\n      var paramPos = fileName.indexOf(\"?\");\n      if (paramPos >= 0) {\n        fileName = fileName.substring(0, paramPos);\n      }\n      var className = (jsPos == -1) ? fileName : fileName.substring(jsPos + scriptDir.length).replace(/\\//g, \".\").replace(/\\.js$/, \"\");\n      return className;\n    },\n\n\n    /**\n     * Runs the given stack trace array through the formatter function\n     * ({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the\n     * original array is returned\n     *\n     * @param trace {String[]} Stack trace information\n     * @return {String[]} Formatted stack trace info\n     */\n    __formatStackTrace : function(trace)\n    {\n      if (typeof qx.dev.StackTrace.FORMAT_STACKTRACE == \"function\") {\n        trace = qx.dev.StackTrace.FORMAT_STACKTRACE(trace);\n        // Can't use qx.core.Assert here since it throws an AssertionError which\n        // calls getStackTrace in its constructor, leading to infinite recursion\n        if (qx.core.Environment.get(\"qx.debug\") && !qx.lang.Type.isArray(trace)) {\n          throw new Error(\"FORMAT_STACKTRACE must return an array of strings!\");\n        }\n      }\n      return trace;\n    }\n  },\n\n  defer : function(statics)\n  {\n    // This is necessary to avoid an infinite loop when logging the absence\n    // of the \"ecmascript.error.stacktrace\" environment key.\n    statics.hasEnvironmentCheck = qx.bom && qx.bom.client &&\n      qx.bom.client.EcmaScript && qx.bom.client.EcmaScript.getStackTrace;\n  }\n});\n"
  ]
}