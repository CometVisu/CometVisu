{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/bom/Shortcut.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "shortcut",
    "__modifier",
    "__key",
    "setShortcut",
    "initEnabled",
    "events",
    "properties",
    "enabled",
    "init",
    "check",
    "event",
    "apply",
    "nullable",
    "autoRepeat",
    "members",
    "execute",
    "target",
    "fireDataEvent",
    "__onKeyDown",
    "getEnabled",
    "__matchesKeyEvent",
    "isAutoRepeat",
    "getTarget",
    "stop",
    "__onKeyPress",
    "_applyEnabled",
    "value",
    "old",
    "Registration",
    "addListener",
    "document",
    "documentElement",
    "removeListener",
    "_applyShortcut",
    "search",
    "msg",
    "error",
    "Error",
    "index",
    "a",
    "length",
    "push",
    "substring",
    "al",
    "i",
    "identifier",
    "__normalizeKeyIdentifier",
    "e",
    "key",
    "Shift",
    "isShiftPressed",
    "Control",
    "isCtrlPressed",
    "Meta",
    "isMetaPressed",
    "Alt",
    "isAltPressed",
    "getKeyIdentifier",
    "__oldKeyNameToKeyIdentifierMap",
    "esc",
    "ctrl",
    "print",
    "del",
    "pageup",
    "pagedown",
    "numlock",
    "numpad_0",
    "numpad_1",
    "numpad_2",
    "numpad_3",
    "numpad_4",
    "numpad_5",
    "numpad_6",
    "numpad_7",
    "numpad_8",
    "numpad_9",
    "numpad_divide",
    "numpad_multiply",
    "numpad_minus",
    "numpad_plus",
    "keyName",
    "kbUtil",
    "util",
    "Keyboard",
    "keyIdentifier",
    "isValidKeyIdentifier",
    "toUpperCase",
    "toLowerCase",
    "lang",
    "String",
    "firstUp",
    "toString",
    "str",
    "modifier",
    "locale",
    "Key",
    "getKeyName",
    "join",
    "destruct",
    "setEnabled",
    "bom",
    "Shortcut"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Shortcuts can be used to globally define keyboard shortcuts.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.bom.Shortcut\",\n{\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance of Command\n   *\n   * @param shortcut {String} shortcuts can be composed of optional modifier\n   *    keys Control, Alt, Shift, Meta and a non modifier key.\n   *    If no non modifier key is specified, the second parameter is evaluated.\n   *    The key must be separated by a <code>+</code> or <code>-</code> character.\n   *    Examples: Alt+F1, Control+C, Control+Alt+Delete\n   */\n  construct : function(shortcut)\n  {\n    this.base(arguments);\n\n    this.__modifier = {};\n    this.__key = null;\n\n    if (shortcut != null) {\n      this.setShortcut(shortcut);\n    }\n\n    this.initEnabled();\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * Fired when the command is executed. Sets the \"data\" property of the event to\n     * the object that issued the command.\n     */\n    \"execute\" : \"qx.event.type.Data\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** whether the command should be respected/enabled */\n    enabled :\n    {\n      init : true,\n      check : \"Boolean\",\n      event : \"changeEnabled\",\n      apply : \"_applyEnabled\"\n    },\n\n\n    /** The command shortcut */\n    shortcut :\n    {\n      check : \"String\",\n      apply : \"_applyShortcut\",\n      nullable : true\n    },\n\n\n    /**\n     * Whether the execute event should be fired repeatedly if the user keep\n     * the keys pressed.\n     */\n    autoRepeat :\n    {\n      check : \"Boolean\",\n      init : false\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __modifier : \"\",\n    __key : \"\",\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire the \"execute\" event on this shortcut.\n     *\n     * @param target {Object} Object which issued the execute event\n     */\n    execute : function(target) {\n      this.fireDataEvent(\"execute\", target);\n    },\n\n\n    /**\n     * Key down event handler.\n     *\n     * @param event {qx.event.type.KeySequence} The key event object\n     */\n    __onKeyDown : function(event)\n    {\n      if (this.getEnabled() && this.__matchesKeyEvent(event))\n      {\n        if (!this.isAutoRepeat()) {\n          this.execute(event.getTarget());\n        }\n        event.stop();\n      }\n    },\n\n\n    /**\n     * Key press event handler.\n     *\n     * @param event {qx.event.type.KeySequence} The key event object\n     */\n    __onKeyPress : function(event)\n    {\n      if (this.getEnabled() && this.__matchesKeyEvent(event))\n      {\n        if (this.isAutoRepeat()) {\n          this.execute(event.getTarget());\n        }\n        event.stop();\n      }\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n\n    // property apply\n    _applyEnabled : function(value, old)\n    {\n      if (value) {\n        qx.event.Registration.addListener(document.documentElement, \"keydown\", this.__onKeyDown, this);\n        qx.event.Registration.addListener(document.documentElement, \"keypress\", this.__onKeyPress, this);\n      } else {\n        qx.event.Registration.removeListener(document.documentElement, \"keydown\", this.__onKeyDown, this);\n        qx.event.Registration.removeListener(document.documentElement, \"keypress\", this.__onKeyPress, this);\n      }\n    },\n\n\n    // property apply\n    _applyShortcut : function(value, old)\n    {\n      if (value)\n      {\n        // do not allow whitespaces within shortcuts\n        if (value.search(/[\\s]+/) != -1)\n        {\n          var msg = \"Whitespaces are not allowed within shortcuts\";\n          this.error(msg);\n          throw new Error(msg);\n        }\n\n        this.__modifier = { \"Control\" : false,\n                            \"Shift\"   : false,\n                            \"Meta\"    : false,\n                            \"Alt\"     : false };\n        this.__key = null;\n\n        // To support shortcuts with \"+\" and \"-\" as keys it is necessary\n        // to split the given value in a different way to determine the\n        // several keyIdentifiers\n        var index;\n        var a = [];\n        while (value.length > 0 && index != -1)\n        {\n          // search for delimiters \"+\" and \"-\"\n          index = value.search(/[-+]+/);\n\n          // add identifiers - take value if no separator was found or\n          // only one char is left (second part of shortcut)\n          a.push((value.length == 1 || index == -1) ? value : value.substring(0, index));\n\n          // extract the already detected identifier\n          value = value.substring(index + 1);\n        }\n        var al = a.length;\n\n        for (var i=0; i<al; i++)\n        {\n          var identifier = this.__normalizeKeyIdentifier(a[i]);\n\n          switch(identifier)\n          {\n            case \"Control\":\n            case \"Shift\":\n            case \"Meta\":\n            case \"Alt\":\n              this.__modifier[identifier] = true;\n              break;\n\n            case \"Unidentified\":\n              var msg = \"Not a valid key name for a shortcut: \" + a[i];\n              this.error(msg);\n              throw msg;\n\n            default:\n              if (this.__key)\n              {\n                var msg = \"You can only specify one non modifier key!\";\n                this.error(msg);\n                throw msg;\n              }\n\n              this.__key = identifier;\n          }\n        }\n      }\n\n      return true;\n    },\n\n\n\n\n    /*\n    --------------------------------------------------------------------------\n      INTERNAL MATCHING LOGIC\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Checks whether the given key event matches the shortcut's shortcut\n     *\n     * @param e {qx.event.type.KeySequence} the key event object\n     * @return {Boolean} whether the shortcuts shortcut matches the key event\n     */\n    __matchesKeyEvent : function(e)\n    {\n      var key = this.__key;\n\n      if (!key)\n      {\n        // no shortcut defined.\n        return false;\n      }\n\n      // for check special keys\n      // and check if a shortcut is a single char and special keys are pressed\n      if (\n        (!this.__modifier.Shift && e.isShiftPressed()) ||\n        (this.__modifier.Shift && !e.isShiftPressed()) ||\n        (!this.__modifier.Control && e.isCtrlPressed()) ||\n        (this.__modifier.Control && !e.isCtrlPressed()) ||\n        (!this.__modifier.Meta && e.isMetaPressed()) ||\n        (this.__modifier.Meta && !e.isMetaPressed()) ||\n        (!this.__modifier.Alt && e.isAltPressed()) ||\n        (this.__modifier.Alt && !e.isAltPressed())\n      ) {\n        return false;\n      }\n\n      if (key == e.getKeyIdentifier()) {\n        return true;\n      }\n\n      return false;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      COMPATIBILITY TO COMMAND\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @lint ignoreReferenceField(__oldKeyNameToKeyIdentifierMap)\n     */\n    __oldKeyNameToKeyIdentifierMap :\n    {\n      // all other keys are converted by converting the first letter to uppercase\n      esc             : \"Escape\",\n      ctrl            : \"Control\",\n      print           : \"PrintScreen\",\n      del             : \"Delete\",\n      pageup          : \"PageUp\",\n      pagedown        : \"PageDown\",\n      numlock         : \"NumLock\",\n      numpad_0        : \"0\",\n      numpad_1        : \"1\",\n      numpad_2        : \"2\",\n      numpad_3        : \"3\",\n      numpad_4        : \"4\",\n      numpad_5        : \"5\",\n      numpad_6        : \"6\",\n      numpad_7        : \"7\",\n      numpad_8        : \"8\",\n      numpad_9        : \"9\",\n      numpad_divide   : \"/\",\n      numpad_multiply : \"*\",\n      numpad_minus    : \"-\",\n      numpad_plus     : \"+\"\n    },\n\n\n    /**\n     * Checks and normalizes the key identifier.\n     *\n     * @param keyName {String} name of the key.\n     * @return {String} normalized keyIdentifier or \"Unidentified\" if a conversion was not possible\n     */\n    __normalizeKeyIdentifier : function(keyName)\n    {\n      var kbUtil = qx.event.util.Keyboard;\n      var keyIdentifier = \"Unidentified\";\n\n      if (kbUtil.isValidKeyIdentifier(keyName)) {\n        return keyName;\n      }\n\n      if (keyName.length == 1 && keyName >= \"a\" && keyName <= \"z\") {\n        return keyName.toUpperCase();\n      }\n\n      keyName = keyName.toLowerCase();\n      var keyIdentifier = this.__oldKeyNameToKeyIdentifierMap[keyName] || qx.lang.String.firstUp(keyName);\n\n      if (kbUtil.isValidKeyIdentifier(keyIdentifier)) {\n        return keyIdentifier;\n      } else {\n        return \"Unidentified\";\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      STRING CONVERSION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the shortcut as string using the currently selected locale.\n     *\n     * @return {String} shortcut\n     */\n    toString : function()\n    {\n      var key = this.__key;\n\n      var str = [];\n\n      for (var modifier in this.__modifier) {\n        // this.__modifier holds a map with shortcut combination keys\n        // like \"Control\", \"Alt\", \"Meta\" and \"Shift\" as keys with\n        // Boolean values\n        if (this.__modifier[modifier])\n        {\n          str.push(qx.locale.Key.getKeyName(\"short\", modifier));\n        }\n      }\n\n      if (key) {\n        str.push(qx.locale.Key.getKeyName(\"short\", key));\n      }\n\n      return str.join(\"+\");\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    // this will remove the event listener\n    this.setEnabled(false);\n\n    this.__modifier = this.__key = null;\n  }\n});\n"
  ]
}