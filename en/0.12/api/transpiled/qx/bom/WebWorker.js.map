{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/WebWorker.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "src",
    "__isNative",
    "Environment",
    "get",
    "__initNative",
    "__initFake",
    "events",
    "members",
    "_worker",
    "_handleErrorBound",
    "_handleMessageBound",
    "__fake",
    "window",
    "Worker",
    "lang",
    "Function",
    "bind",
    "_handleMessage",
    "_handleError",
    "bom",
    "Event",
    "addNativeListener",
    "that",
    "req",
    "request",
    "Xhr",
    "onload",
    "postMessage",
    "e",
    "fireDataEvent",
    "eval",
    "responseText",
    "onmessage",
    "open",
    "send",
    "msg",
    "setTimeout",
    "data",
    "ex",
    "message",
    "destruct",
    "removeNativeListener",
    "terminate",
    "WebWorker"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n\n/**\n *\n * Web Workers allows us to run JavaScript in parallel on a web page,\n * without blocking the user interface. A 'worker' is just another script\n * file that will be loaded and executed in the background.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * For more information see:\n * http://www.w3.org/TR/workers/\n */\nqx.Class.define(\"qx.bom.WebWorker\",\n{\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n\n\n  /**\n   * Create a new instance.\n   *\n   * @param src {String} The path to worker as an URL\n   */\n  construct: function(src)\n  {\n    this.base(arguments);\n    this.__isNative = qx.core.Environment.get(\"html.webworker\");\n    this.__isNative ? this.__initNative(src) : this.__initFake(src);\n  },\n\n\n  events :\n  {\n    /** Fired when worker sends a message */\n    \"message\": \"qx.event.type.Data\",\n\n    /** Fired when an error occurs */\n    \"error\": \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n    _worker : null,\n    _handleErrorBound : null,\n    _handleMessageBound : null,\n\n    __isNative : true,\n    __fake : null,\n\n\n\n    /**\n     * Initialize the native worker\n     * @param src {String} The path to worker as an URL\n     */\n    __initNative: function(src) {\n      this._worker = new window.Worker(src);\n      this._handleMessageBound = qx.lang.Function.bind(this._handleMessage, this);\n      this._handleErrorBound = qx.lang.Function.bind(this._handleError, this);\n\n      qx.bom.Event.addNativeListener(this._worker, \"message\", this._handleMessageBound);\n      qx.bom.Event.addNativeListener(this._worker, \"error\", this._handleErrorBound);\n    },\n\n    /**\n     * Initialize the fake worker\n     * @param src {String} The path to worker as an URL\n     * @lint ignoreDeprecated(eval)\n     */\n    __initFake: function(src) {\n      var that = this;\n      var req = new qx.bom.request.Xhr();\n      req.onload = function() {\n        that.__fake = (function() {\n          var postMessage = function(e) {\n            that.fireDataEvent('message', e);\n          };\n          //set up context vars before evaluating the code\n          eval(\"var onmessage = null, postMessage = \" + postMessage + \";\" +\n            req.responseText);\n\n          //pick the right onmessage because of the uglyfier\n          return {\n            onmessage: eval(\"onmessage\"),\n            postMessage: postMessage\n          };\n        })();\n      };\n\n      req.open(\"GET\", src, false);\n      req.send();\n    },\n\n\n    /**\n     * Send a message to the worker.\n     * @param msg {String} the message\n     */\n    postMessage: function(msg) {\n      var that = this;\n\n      if (this.__isNative) {\n        this._worker.postMessage(msg);\n      } else {\n        setTimeout(function() {\n          try {\n            that.__fake.onmessage && that.__fake.onmessage({data: msg});\n          } catch (ex) {\n            that.fireDataEvent(\"error\", ex);\n          }\n        }, 0);\n      }\n    },\n\n\n    /**\n     * Message handler\n     * @param e {Event} message event\n     */\n    _handleMessage: function(e) {\n      this.fireDataEvent(\"message\", e.data);\n    },\n\n\n    /**\n     * Error handler\n     * @param e {Event} error event\n     */\n    _handleError: function(e) {\n      this.fireDataEvent(\"error\", e.message);\n    }\n  },\n\n\n  destruct : function()\n  {\n    if (this.__isNative) {\n      qx.bom.Event.removeNativeListener(this._worker, \"message\", this._handleMessageBound);\n      qx.bom.Event.removeNativeListener(this._worker, \"error\", this._handleErrorBound);\n      if (this._worker)\n      {\n        this._worker.terminate();\n        this._worker = null;\n      }\n    } else {\n      if (this.__fake) {\n        this.__fake = null;\n      }\n    }\n  }\n});\n"
  ]
}