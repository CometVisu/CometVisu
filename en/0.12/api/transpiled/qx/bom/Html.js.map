{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/Html.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__fixNonDirectlyClosableHelper",
    "all",
    "front",
    "tag",
    "match",
    "__convertMap",
    "opt",
    "leg",
    "table",
    "tr",
    "td",
    "col",
    "def",
    "core",
    "Environment",
    "select",
    "fixEmptyTags",
    "html",
    "replace",
    "__convertHtmlString",
    "context",
    "div",
    "createElement",
    "bom",
    "Html",
    "tags",
    "substring",
    "toLowerCase",
    "wrap",
    "map",
    "indexOf",
    "innerHTML",
    "depth",
    "lastChild",
    "get",
    "hasBody",
    "test",
    "tbody",
    "firstChild",
    "childNodes",
    "j",
    "length",
    "tagName",
    "parentNode",
    "removeChild",
    "insertBefore",
    "createTextNode",
    "lang",
    "Array",
    "fromCollection",
    "clean",
    "objs",
    "fragment",
    "document",
    "ownerDocument",
    "exec",
    "obj",
    "ret",
    "i",
    "l",
    "nodeType",
    "push",
    "type",
    "BaseArray",
    "qxWeb",
    "apply",
    "prototype",
    "slice",
    "call",
    "toElement",
    "extractScripts",
    "elements",
    "scripts",
    "elem",
    "scriptList",
    "getElementsByTagName",
    "splice",
    "concat",
    "appendChild"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 Sebastian Werner, http://sebastian-werner.net\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery\n     http://jquery.com\n     Version 1.3.1\n\n     Copyright:\n       2009 John Resig\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * This class is mainly a convenience wrapper for DOM elements to\n * qooxdoo's event system.\n *\n * @ignore(qxWeb)\n */\nqx.Bootstrap.define(\"qx.bom.Html\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Helper method for XHTML replacement.\n     *\n     * @param all {String} Complete string\n     * @param front {String} Front of the match\n     * @param tag {String} Tag name\n     * @return {String} XHTML corrected tag\n     */\n    __fixNonDirectlyClosableHelper : function(all, front, tag)\n    {\n      return tag.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i) ?\n        all : front + \"></\" + tag + \">\";\n    },\n\n\n    /** @type {Map} Contains wrap fragments for specific HTML matches */\n    __convertMap :\n    {\n      opt : [ 1, \"<select multiple='multiple'>\", \"</select>\" ], // option or optgroup\n      leg : [ 1, \"<fieldset>\", \"</fieldset>\" ],\n      table : [ 1, \"<table>\", \"</table>\" ],\n      tr : [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n      td : [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n      col : [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ],\n      def : qx.core.Environment.select(\"engine.name\",\n      {\n        \"mshtml\" : [ 1, \"div<div>\", \"</div>\" ],\n        \"default\" : null\n      })\n    },\n\n\n    /**\n     * Fixes \"XHTML\"-style tags in all browsers.\n     * Replaces tags which are not allowed to be closed directly such as\n     * <code>div</code> or <code>p</code>. They are patched to use opening and\n     * closing tags instead, e.g. <code>&lt;p&gt;</code> => <code>&lt;p&gt;&lt;/p&gt;</code>\n     *\n     * @param html {String} HTML to fix\n     * @return {String} Fixed HTML\n     */\n    fixEmptyTags : function(html)\n    {\n      return html.replace(/(<(\\w+)[^>]*?)\\/>/g, this.__fixNonDirectlyClosableHelper);\n    },\n\n\n    /**\n     * Translates a HTML string into an array of elements.\n     *\n     * @param html {String} HTML string\n     * @param context {Document} Context document in which (helper) elements should be created\n     * @return {Array} List of resulting elements\n     */\n    __convertHtmlString : function(html, context)\n    {\n      var div = context.createElement(\"div\");\n\n      html = qx.bom.Html.fixEmptyTags(html);\n\n      // Trim whitespace, otherwise indexOf won't work as expected\n      var tags = html.replace(/^\\s+/, \"\").substring(0, 5).toLowerCase();\n\n      // Auto-wrap content into required DOM structure\n      var wrap, map = this.__convertMap;\n      if (!tags.indexOf(\"<opt\")) {\n        wrap = map.opt;\n      } else if (!tags.indexOf(\"<leg\")) {\n        wrap = map.leg;\n      } else if (tags.match(/^<(thead|tbody|tfoot|colg|cap)/)) {\n        wrap = map.table;\n      } else if (!tags.indexOf(\"<tr\")) {\n        wrap = map.tr;\n      } else if (!tags.indexOf(\"<td\") || !tags.indexOf(\"<th\")) {\n        wrap = map.td;\n      } else if (!tags.indexOf(\"<col\")) {\n        wrap = map.col;\n      } else {\n        wrap = map.def;\n      }\n\n      // Omit string concat when no wrapping is needed\n      if (wrap)\n      {\n        // Go to html and back, then peel off extra wrappers\n        div.innerHTML = wrap[1] + html + wrap[2];\n\n        // Move to the right depth\n        var depth = wrap[0];\n        while (depth--) {\n          div = div.lastChild;\n        }\n      }\n      else\n      {\n        div.innerHTML = html;\n      }\n\n      // Fix IE specific bugs\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        // Remove IE's autoinserted <tbody> from table fragments\n        // String was a <table>, *may* have spurious <tbody>\n        var hasBody = /<tbody/i.test(html);\n\n        // String was a bare <thead> or <tfoot>\n        var tbody = !tags.indexOf(\"<table\") && !hasBody ?\n          div.firstChild && div.firstChild.childNodes :\n          wrap[1] == \"<table>\" && !hasBody ? div.childNodes :\n          [];\n\n        for (var j=tbody.length-1; j>=0 ; --j)\n        {\n          if (tbody[j].tagName.toLowerCase() === \"tbody\" && !tbody[j].childNodes.length) {\n            tbody[j].parentNode.removeChild(tbody[j]);\n          }\n        }\n\n        // IE completely kills leading whitespace when innerHTML is used\n        if (/^\\s/.test(html)) {\n          div.insertBefore(context.createTextNode(html.match(/^\\s*/)[0]), div.firstChild);\n        }\n      }\n\n      return qx.lang.Array.fromCollection(div.childNodes);\n    },\n\n\n    /**\n     * Cleans-up the given HTML and append it to a fragment\n     *\n     * When no <code>context</code> is given the global document is used to\n     * create new DOM elements.\n     *\n     * When a <code>fragment</code> is given the nodes are appended to this\n     * fragment except the script tags. These are returned in a separate Array.\n     *\n     * Please note: HTML coming from user input must be validated prior\n     * to passing it to this method. HTML is temporarily inserted to the DOM\n     * using <code>innerHTML</code>. As a consequence, scripts included in\n     * attribute event handlers may be executed.\n     *\n     * @param objs {Element[]|String[]} Array of DOM elements or HTML strings\n     * @param context {Document?document} Context in which the elements should be created\n     * @param fragment {Element?null} Document fragment to appends elements to\n     * @return {Element[]} Array of elements (when a fragment is given it only contains script elements)\n     */\n    clean: function(objs, context, fragment)\n    {\n      context = context || document;\n\n      // !context.createElement fails in IE with an error but returns typeof 'object'\n      if (typeof context.createElement === \"undefined\") {\n        context = context.ownerDocument || context[0] && context[0].ownerDocument || document;\n      }\n\n      // Fast-Path:\n      // If a single string is passed in and it's a single tag\n      // just do a createElement and skip the rest\n      if (!fragment && objs.length === 1 && typeof objs[0] === \"string\")\n      {\n        var match = /^<(\\w+)\\s*\\/?>$/.exec(objs[0]);\n        if (match) {\n          return [context.createElement(match[1])];\n        }\n      }\n\n      // Iterate through items in incoming array\n      var obj, ret=[];\n      for (var i=0, l=objs.length; i<l; i++)\n      {\n        obj = objs[i];\n\n        // Convert HTML string into DOM nodes\n        if (typeof obj === \"string\") {\n          obj = this.__convertHtmlString(obj, context);\n        }\n\n        // Append or merge depending on type\n        if (obj.nodeType) {\n          ret.push(obj);\n        } else if (obj instanceof qx.type.BaseArray ||\n            (typeof qxWeb !== \"undefined\" && obj instanceof qxWeb)) {\n          ret.push.apply(ret, Array.prototype.slice.call(obj, 0));\n        } else if (obj.toElement) {\n          ret.push(obj.toElement());\n        } else {\n          ret.push.apply(ret, obj);\n        }\n      }\n\n      // Append to fragment and filter out scripts... or...\n      if (fragment)\n      {\n        return qx.bom.Html.extractScripts(ret, fragment);\n      }\n\n      // Otherwise return the array of all elements\n      return ret;\n    },\n\n\n    /**\n     * Extracts script elements from an element list. Optionally\n     * attaches them to a given document fragment\n     *\n     * @param elements {Element[]} list of elements\n     * @param fragment {Document?} document fragment\n     * @return {Element[]} Array containing the script elements\n     */\n    extractScripts : function(elements, fragment) {\n      var scripts=[], elem;\n      for (var i=0; elements[i]; i++) {\n        elem = elements[i];\n\n        if (elem.nodeType == 1 && elem.tagName.toLowerCase() === \"script\" && (!elem.type || elem.type.toLowerCase() === \"text/javascript\"))\n        {\n          // Trying to remove the element from DOM\n          if (elem.parentNode) {\n            elem.parentNode.removeChild(elements[i]);\n          }\n\n          // Store in script list\n          scripts.push(elem);\n        }\n        else\n        {\n          if (elem.nodeType === 1)\n          {\n            // Recursively search for scripts and append them to the list of elements to process\n            var scriptList = qx.lang.Array.fromCollection(elem.getElementsByTagName(\"script\"));\n            elements.splice.apply(elements, [i+1, 0].concat(scriptList));\n          }\n\n          // Finally append element to fragment\n          if (fragment) {\n            fragment.appendChild(elem);\n          }\n        }\n      }\n\n      return scripts;\n    }\n  }\n});\n"
  ]
}