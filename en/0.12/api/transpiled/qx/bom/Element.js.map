{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Element.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "addListener",
    "element",
    "type",
    "listener",
    "self",
    "capture",
    "event",
    "Registration",
    "removeListener",
    "removeListenerById",
    "target",
    "id",
    "hasListener",
    "focus",
    "getManager",
    "getHandler",
    "handler",
    "Focus",
    "blur",
    "activate",
    "deactivate",
    "containerCapture",
    "getDispatcher",
    "dispatch",
    "MouseCapture",
    "activateCapture",
    "releaseCapture",
    "clone",
    "events",
    "core",
    "Environment",
    "get",
    "xml",
    "Document",
    "isXmlDocument",
    "mgr",
    "all",
    "dom",
    "Hierarchy",
    "getDescendants",
    "push",
    "i",
    "l",
    "length",
    "toggleAttachedEvents",
    "cloneNode",
    "cloneAll",
    "eventList",
    "cloneElem",
    "origElem",
    "eventEntry",
    "il",
    "serializeListeners",
    "j",
    "jl",
    "bom",
    "Element"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * This class is mainly a convenience wrapper for DOM elements to\n * qooxdoo's event system.\n *\n * @require(qx.event.dispatch.Direct)\n * @require(qx.event.dispatch.DomBubbling)\n * @require(qx.event.handler.Keyboard)\n * @require(qx.event.handler.Mouse)\n * @require(qx.event.handler.Element)\n * @require(qx.event.handler.Appear)\n * @require(qx.event.handler.Touch)\n * @require(qx.event.handler.Offline)\n * @require(qx.event.handler.Input)\n * @require(qx.event.handler.Pointer)\n * @require(qx.event.handler.Gesture)\n */\nqx.Class.define(\"qx.bom.Element\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      EVENTS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add an event listener to a DOM element. The event listener is passed an\n     * instance of {@link Event} containing all relevant information\n     * about the event as parameter.\n     *\n     * @param element {Element} DOM element to attach the event on.\n     * @param type {String} Name of the event e.g. \"click\", \"keydown\", ...\n     * @param listener {Function} Event listener function\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean} Whether to attach the event to the\n     *       capturing phase or the bubbling phase of the event. The default is\n     *       to attach the event handler to the bubbling phase.\n     * @return {String} An opaque id, which can be used to remove the event listener\n     *       using the {@link #removeListenerById} method.\n     */\n    addListener : function(element, type, listener, self, capture) {\n      return qx.event.Registration.addListener(element, type, listener, self, capture);\n    },\n\n\n    /**\n     * Remove an event listener from a from DOM node.\n     *\n     * Note: All registered event listeners will automatically be removed from\n     *   the DOM at page unload so it is not necessary to detach events yourself.\n     *\n     * @param element {Element} DOM Element\n     * @param type {String} Name of the event\n     * @param listener {Function} The pointer to the event listener\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener.\n     * @param capture {Boolean} Whether to remove the event listener of\n     *       the bubbling or of the capturing phase.\n     * @return {Boolean} <code>true</code> if the listener was removed\n     */\n    removeListener : function(element, type, listener, self, capture) {\n      return qx.event.Registration.removeListener(element, type, listener, self, capture);\n    },\n\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param target {Object} The event target\n     * @param id {String} The id returned by {@link #addListener}\n     * @return {Boolean} <code>true</code> if the listener was removed\n     */\n    removeListenerById : function(target, id) {\n      return qx.event.Registration.removeListenerById(target, id);\n    },\n\n\n    /**\n     * Check whether there are one or more listeners for an event type\n     * registered at the element.\n     *\n     * @param element {Element} DOM element\n     * @param type {String} The event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *       the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the element has event listeners of the given type.\n     */\n    hasListener : function(element, type, capture) {\n      return qx.event.Registration.hasListener(element, type, capture);\n    },\n\n\n    /**\n     * Focuses the given element. The element needs to have a positive <code>tabIndex</code> value.\n     *\n     * @param element {Element} DOM element to focus\n     */\n    focus : function(element) {\n      qx.event.Registration.getManager(element).getHandler(qx.event.handler.Focus).focus(element);\n    },\n\n\n    /**\n     * Blurs the given element\n     *\n     * @param element {Element} DOM element to blur\n     */\n    blur : function(element) {\n      qx.event.Registration.getManager(element).getHandler(qx.event.handler.Focus).blur(element);\n    },\n\n\n    /**\n     * Activates the given element. The active element receives all key board events.\n     *\n     * @param element {Element} DOM element to focus\n     */\n    activate : function(element) {\n      qx.event.Registration.getManager(element).getHandler(qx.event.handler.Focus).activate(element);\n    },\n\n\n    /**\n     * Deactivates the given element. The active element receives all key board events.\n     *\n     * @param element {Element} DOM element to focus\n     */\n    deactivate : function(element) {\n      qx.event.Registration.getManager(element).getHandler(qx.event.handler.Focus).deactivate(element);\n    },\n\n\n    /**\n     * Captures the given element\n     *\n     * @param element {Element} DOM element to capture\n     * @param containerCapture {Boolean?true} If true all events originating in\n     *   the container are captured. If false events originating in the container\n     *   are not captured.\n     */\n    capture : function(element, containerCapture) {\n      qx.event.Registration.getManager(element).getDispatcher(qx.event.dispatch.MouseCapture).activateCapture(element, containerCapture);\n    },\n\n\n    /**\n     * Releases the given element (from a previous {@link #capture} call)\n     *\n     * @param element {Element} DOM element to release\n     */\n    releaseCapture : function(element) {\n      qx.event.Registration.getManager(element).getDispatcher(qx.event.dispatch.MouseCapture).releaseCapture(element);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Clone given DOM element. May optionally clone all attached\n     * events (recursively) as well.\n     *\n     * @param element {Element} Element to clone\n     * @param events {Boolean?false} Whether events should be copied as well\n     * @return {Element} The copied element\n     */\n    clone : function(element, events)\n    {\n      var clone;\n\n      if (events || ((qx.core.Environment.get(\"engine.name\") == \"mshtml\") && !qx.xml.Document.isXmlDocument(element)))\n      {\n        var mgr = qx.event.Registration.getManager(element);\n        var all = qx.dom.Hierarchy.getDescendants(element);\n        all.push(element);\n      }\n\n      // IE copies events bound via attachEvent() when\n      // using cloneNode(). Calling detachEvent() on the\n      // clone will also remove the events from the original.\n      //\n      // In order to get around this, we detach all locally\n      // attached events first, do the cloning and recover\n      // them afterwards again.\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        for (var i=0, l=all.length; i<l; i++) {\n          mgr.toggleAttachedEvents(all[i], false);\n        }\n      }\n\n      // Do the native cloning\n      var clone = element.cloneNode(true);\n\n      // Recover events on original elements\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        for (var i=0, l=all.length; i<l; i++) {\n          mgr.toggleAttachedEvents(all[i], true);\n        }\n      }\n\n      // Attach events from original element\n      if (events === true)\n      {\n        // Produce recursive list of elements in the clone\n        var cloneAll = qx.dom.Hierarchy.getDescendants(clone);\n        cloneAll.push(clone);\n\n        // Process all elements and copy over listeners\n        var eventList, cloneElem, origElem, eventEntry;\n        for (var i=0, il=all.length; i<il; i++)\n        {\n          origElem = all[i];\n          eventList = mgr.serializeListeners(origElem);\n\n          if (eventList.length > 0)\n          {\n            cloneElem = cloneAll[i];\n\n            for (var j=0, jl=eventList.length; j<jl; j++)\n            {\n              eventEntry = eventList[j];\n              mgr.addListener(cloneElem, eventEntry.type, eventEntry.handler, eventEntry.self, eventEntry.capture);\n            }\n          }\n        }\n      }\n\n      // Finally return the clone\n      return clone;\n    }\n  }\n});\n"
  ]
}