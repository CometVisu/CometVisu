{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Font.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "size",
    "family",
    "__lookupMap",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "textDecoration",
    "lineHeight",
    "color",
    "textShadow",
    "undefined",
    "setSize",
    "setFamily",
    "statics",
    "fromString",
    "str",
    "font",
    "bom",
    "Font",
    "parts",
    "split",
    "name",
    "part",
    "i",
    "length",
    "setBold",
    "setItalic",
    "setDecoration",
    "temp",
    "parseInt",
    "lang",
    "String",
    "contains",
    "push",
    "fromConfig",
    "config",
    "set",
    "__defaultStyles",
    "getDefaultStyles",
    "properties",
    "check",
    "nullable",
    "apply",
    "comparisonString",
    "init",
    "version",
    "value",
    "test",
    "bold",
    "italic",
    "decoration",
    "weight",
    "members",
    "_applySize",
    "old",
    "_applyLineHeight",
    "_applyFamily",
    "l",
    "indexOf",
    "_applyBold",
    "_applyItalic",
    "_applyDecoration",
    "_applyColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "resolve",
    "_applyWeight",
    "_applyTextShadow",
    "getStyles"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n     * Mustafa Sak (msak)\n\n************************************************************************ */\n\n/**\n * A wrapper for CSS font styles. Fond objects can be applied to instances\n * of {@link qx.html.Element}.\n */\nqx.Class.define(\"qx.bom.Font\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param size {String?} The font size (Unit: pixel)\n   * @param family {String[]?} A sorted list of font families\n   */\n  construct : function(size, family)\n  {\n    this.base(arguments);\n\n    this.__lookupMap =\n    {\n      fontFamily: \"\",\n      fontSize: null,\n      fontWeight: null,\n      fontStyle: null,\n      textDecoration: null,\n      lineHeight: null,\n      color: null,\n      textShadow: null\n    };\n\n    if (size !== undefined) {\n      this.setSize(size);\n    }\n\n    if (family !== undefined) {\n      this.setFamily(family);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Converts a typical CSS font definition string to an font object\n     *\n     * Example string: <code>bold italic 20px Arial</code>\n     *\n     * @param str {String} the CSS string\n     * @return {qx.bom.Font} the created instance\n     */\n    fromString : function(str)\n    {\n      var font = new qx.bom.Font();\n      var parts = str.split(/\\s+/);\n      var name = [];\n      var part;\n\n      for (var i=0; i<parts.length; i++)\n      {\n        switch(part = parts[i])\n        {\n          case \"bold\":\n            font.setBold(true);\n            break;\n\n          case \"italic\":\n            font.setItalic(true);\n            break;\n\n          case \"underline\":\n            font.setDecoration(\"underline\");\n            break;\n\n          default:\n            var temp = parseInt(part, 10);\n\n            if (temp == part || qx.lang.String.contains(part, \"px\")) {\n              font.setSize(temp);\n            } else {\n              name.push(part);\n            }\n\n            break;\n        }\n      }\n\n      if (name.length > 0) {\n        font.setFamily(name);\n      }\n\n      return font;\n    },\n\n\n    /**\n     * Converts a map property definition into a font object.\n     *\n     * @param config {Map} map of property values\n     * @return {qx.bom.Font} the created instance\n     */\n    fromConfig : function(config)\n    {\n      var font = new qx.bom.Font;\n      font.set(config);\n      return font;\n    },\n\n\n    /** @type {Map} Default (empty) CSS styles */\n    __defaultStyles :\n    {\n      fontFamily: \"\",\n      fontSize: \"\",\n      fontWeight: \"\",\n      fontStyle: \"\",\n      textDecoration: \"\",\n      lineHeight: 1.2,\n      color: \"\",\n      textShadow: \"\"\n    },\n\n\n    /**\n     * Returns a map of all properties in empty state.\n     *\n     * This is useful for resetting previously configured\n     * font styles.\n     *\n     * @return {Map} Default styles\n     */\n    getDefaultStyles : function() {\n      return this.__defaultStyles;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The font size (Unit: pixel) */\n    size :\n    {\n      check : \"Integer\",\n      nullable : true,\n      apply : \"_applySize\"\n    },\n\n    /**\n     * The line height as scaling factor of the default line height. A value\n     * of 1 corresponds to the default line height\n     */\n    lineHeight :\n    {\n      check : \"Number\",\n      nullable: true,\n      apply : \"_applyLineHeight\"\n    },\n\n    /**\n     * Characters that are used to test if the font has loaded properly. These\n     * default to \"WEei\" in `qx.bom.webfont.Validator` and can be overridden\n     * for certain cases like icon fonts that do not provide the predefined\n     * characters.\n     */\n    comparisonString :\n    {\n      check : \"String\",\n      init : null,\n      nullable : true\n    },\n\n    /**\n     * Version identifier that is appended to the URL to be loaded. Fonts\n     * that are defined thru themes may be managed by the resource manager.\n     * In this case updated fonts persist due to aggressive fontface caching\n     * of some browsers. To get around this, set the `version` property to\n     * the version of your font. It will be appended to the CSS URL and forces\n     * the browser to re-validate.\n     *\n     * The version needs to be URL friendly, so only characters, numbers,\n     * dash and dots are allowed here.\n     */\n    version :\n    {\n      check : function(value) {\n        return value === null || (typeof value === \"string\" && /^[a-zA-Z0-9.-]+$/.test(value));\n      },\n      init : null,\n      nullable : true\n    },\n\n    /** A sorted list of font families */\n    family :\n    {\n      check : \"Array\",\n      nullable : true,\n      apply : \"_applyFamily\"\n    },\n\n    /** Whether the font is bold */\n    bold :\n    {\n      check : \"Boolean\",\n      nullable : true,\n      apply : \"_applyBold\"\n    },\n\n    /** Whether the font is italic */\n    italic :\n    {\n      check : \"Boolean\",\n      nullable : true,\n      apply : \"_applyItalic\"\n    },\n\n    /** The text decoration for this font */\n    decoration :\n    {\n      check : [ \"underline\", \"line-through\", \"overline\" ],\n      nullable : true,\n      apply : \"_applyDecoration\"\n    },\n\n    /** The text color for this font */\n    color :\n    {\n      check : \"Color\",\n      nullable: true,\n      apply: \"_applyColor\"\n    },\n\n    /** The text shadow for this font */\n    textShadow :\n    {\n      nullable : true,\n      check : \"String\",\n      apply : \"_applyTextShadow\"\n    },\n    /** The weight property of the font as opposed to just setting it to 'bold' by setting the bold property to true */\n    weight :\n    {\n      nullable : true,\n      check : \"String\",\n      apply : \"_applyWeight\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __lookupMap : null,\n\n\n    // property apply\n    _applySize : function(value, old) {\n      this.__lookupMap.fontSize = value === null ? null : value + \"px\";\n    },\n\n\n    _applyLineHeight : function(value, old) {\n      this.__lookupMap.lineHeight = value === null ? null : value;\n    },\n\n\n    // property apply\n    _applyFamily : function(value, old)\n    {\n      var family = \"\";\n\n      for (var i=0, l=value.length; i<l; i++)\n      {\n        // in FireFox 2 and WebKit fonts like 'serif' or 'sans-serif' must\n        // not be quoted!\n        if (value[i].indexOf(\" \") > 0) {\n          family += '\"' + value[i] + '\"';\n        } else {\n          family += value[i];\n        }\n\n        if (i !== l-1) {\n          family += \",\";\n        }\n      }\n\n      // font family is a special case. In order to render the labels correctly\n      // we have to return a font family - even if it's an empty string to prevent\n      // the browser from applying the element style\n      this.__lookupMap.fontFamily = family;\n    },\n\n\n    // property apply\n    _applyBold : function(value, old) {\n      this.__lookupMap.fontWeight = value == null ? null : value ? \"bold\" : \"normal\";\n    },\n\n\n    // property apply\n    _applyItalic : function(value, old) {\n      this.__lookupMap.fontStyle = value == null ? null : value ? \"italic\" : \"normal\";\n    },\n\n\n    // property apply\n    _applyDecoration : function(value, old) {\n      this.__lookupMap.textDecoration = value == null ? null : value;\n    },\n\n    // property apply\n    _applyColor : function(value, old) {\n      this.__lookupMap.color = null;\n      if (value) {\n        this.__lookupMap.color = qx.theme.manager.Color.getInstance().resolve(value);\n      }\n    },\n\n    // property apply\n    _applyWeight : function(value, old) {\n      this.__lookupMap.fontWeight = value;\n    },\n\n    // property apply\n    _applyTextShadow : function(value, old) {\n      this.__lookupMap.textShadow = value == null ? null : value;\n    },\n\n\n    /**\n     * Get a map of all CSS styles, which will be applied to the widget. Only\n     * the styles which are set are returned.\n     *\n     * @return {Map} Map containing the current styles. The keys are property\n     * names which can directly be used with the <code>set</code> method of each\n     * widget.\n     */\n    getStyles : function() {\n      return this.__lookupMap;\n    }\n  }\n});\n"
  ]
}