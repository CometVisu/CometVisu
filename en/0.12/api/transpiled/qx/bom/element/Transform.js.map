{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Transform.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__cssKeys",
    "core",
    "Environment",
    "get",
    "transform",
    "el",
    "transforms",
    "transformCss",
    "getTransformValue",
    "style",
    "translate",
    "value",
    "scale",
    "rotate",
    "skew",
    "getCss",
    "bom",
    "Style",
    "getCssName",
    "setOrigin",
    "getOrigin",
    "setStyle",
    "getStyle",
    "setPerspective",
    "getPerspective",
    "setPerspectiveOrigin",
    "getPerspectiveOrigin",
    "valueX",
    "valueY",
    "setBackfaceVisibility",
    "getBackfaceVisibility",
    "properties3d",
    "property",
    "params",
    "isArray",
    "length",
    "indexOf",
    "_compute3dProperty",
    "_computeAxisProperties",
    "trim",
    "cssValue",
    "i",
    "join",
    "dimensions",
    "element",
    "Transform"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This class is responsible for applying CSS3 transforms to plain DOM elements.\n * The implementation is mostly a cross browser wrapper for applying the\n * transforms.\n * The API is keep to the spec as close as possible.\n *\n * http://www.w3.org/TR/css3-3d-transforms/\n */\nqx.Bootstrap.define(\"qx.bom.element.Transform\",\n{\n  statics :\n  {\n    /** Internal storage of the CSS names */\n    __cssKeys : qx.core.Environment.get(\"css.transform\"),\n\n\n    /**\n     * Method to apply multiple transforms at once to the given element. It\n     * takes a map containing the transforms you want to apply plus the values\n     * e.g.<code>{scale: 2, rotate: \"5deg\"}</code>.\n     * The values can be either singular, which means a single value will\n     * be added to the CSS. If you give an array, the values will be split up\n     * and each array entry will be used for the X, Y or Z dimension in that\n     * order e.g. <code>{scale: [2, 0.5]}</code> will result in a element\n     * double the size in X direction and half the size in Y direction.\n     * The values can be either singular, which means a single value will\n     * be added to the CSS. If you give an array, the values will be join to\n     * a string.\n     * 3d suffixed properties will be taken for translate and scale if they are\n     * available and an array with three values is given.\n     * Make sure your browser supports all transformations you apply.\n     *\n     * @param el {Element} The element to apply the transformation.\n     * @param transforms {Map} The map containing the transforms and value.\n     */\n    transform : function(el, transforms) {\n      var transformCss = this.getTransformValue(transforms);\n      if (this.__cssKeys != null) {\n        var style = this.__cssKeys[\"name\"];\n        el.style[style] = transformCss;\n      }\n    },\n\n\n    /**\n     * Translates the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {String|Array} The value to translate e.g. <code>\"10px\"</code>.\n     */\n    translate : function(el, value) {\n      this.transform(el, {translate: value});\n    },\n\n\n    /**\n     * Scales the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {Number|Array} The value to scale.\n     */\n    scale : function(el, value) {\n      this.transform(el, {scale: value});\n    },\n\n\n    /**\n     * Rotates the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {String|Array} The value to rotate e.g. <code>\"90deg\"</code>.\n     */\n    rotate : function(el, value) {\n      this.transform(el, {rotate: value});\n    },\n\n\n    /**\n     * Skews the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {String|Array} The value to skew e.g. <code>\"90deg\"</code>.\n     */\n    skew : function(el, value) {\n      this.transform(el, {skew: value});\n    },\n\n\n    /**\n     * Converts the given map to a string which could be added to a css\n     * stylesheet.\n     * @param transforms {Map} The transforms map. For a detailed description,\n     * take a look at the {@link #transform} method.\n     * @return {String} The CSS value.\n     */\n    getCss : function(transforms) {\n      var transformCss = this.getTransformValue(transforms);\n      if (this.__cssKeys != null) {\n        var style = this.__cssKeys[\"name\"];\n        return qx.bom.Style.getCssName(style) + \":\" + transformCss + \";\";\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the transform-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     */\n    setOrigin : function(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"origin\"]] = value;\n      }\n    },\n\n\n    /**\n     * Returns the transform-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, e.g. <code>50% 50%</code>\n     */\n    getOrigin : function(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"origin\"]];\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the transform-style property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {String} Either <code>flat</code> or <code>preserve-3d</code>.\n     */\n    setStyle : function(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"style\"]] = value;\n      }\n    },\n\n\n    /**\n     * Returns the transform-style property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, either <code>flat</code> or\n     *   <code>preserve-3d</code>.\n     */\n    getStyle : function(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"style\"]];\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the perspective property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {Number} The perspective layer. Numbers between 100\n     *   and 5000 give the best results.\n     */\n    setPerspective : function(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"perspective\"]] = value + \"px\";\n      }\n    },\n\n\n    /**\n     * Returns the perspective property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, e.g. <code>500</code>\n     */\n    getPerspective : function(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"perspective\"]];\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the perspective-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     */\n    setPerspectiveOrigin : function(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"perspective-origin\"]] = value;\n      }\n    },\n\n\n    /**\n     * Returns the perspective-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, e.g. <code>50% 50%</code>\n     */\n    getPerspectiveOrigin : function(el) {\n      if (this.__cssKeys != null) {\n        var value = el.style[this.__cssKeys[\"perspective-origin\"]];\n        if (value != \"\") {\n          return value;\n        } else {\n          var valueX = el.style[this.__cssKeys[\"perspective-origin\"] + \"X\"];\n          var valueY = el.style[this.__cssKeys[\"perspective-origin\"] + \"Y\"];\n          if (valueX != \"\") {\n            return valueX + \" \" + valueY;\n          }\n        }\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the backface-visibility property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {Boolean} <code>true</code> if the backface should be visible.\n     */\n    setBackfaceVisibility : function(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"backface-visibility\"]] = value ? \"visible\" : \"hidden\";\n      }\n    },\n\n\n    /**\n     * Returns the backface-visibility property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     * @param el {Element} The dom element to read the property.\n     * @return {Boolean} <code>true</code>, if the backface is visible.\n     */\n    getBackfaceVisibility : function(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"backface-visibility\"]] == \"visible\";\n      }\n      return true;\n    },\n\n\n    /**\n     * Converts the given transforms map to a valid CSS string.\n     *\n     * @param transforms {Map} A map containing the transforms.\n     * @return {String} The CSS transforms.\n     */\n    getTransformValue : function(transforms) {\n      var value = \"\";\n      var properties3d = [\"translate\", \"scale\"];\n\n      for (var property in transforms) {\n        var params = transforms[property];\n\n        // if an array is given\n        if (qx.Bootstrap.isArray(params)) {\n          // use 3d properties for translate and scale if all 3 parameter are given\n          if (params.length === 3 &&\n            properties3d.indexOf(property) > -1 &&\n            qx.core.Environment.get(\"css.transform.3d\")\n          ) {\n            value += this._compute3dProperty(property, params);\n          }\n\n          // use axis related properties\n          else {\n            value += this._computeAxisProperties(property, params);\n          }\n\n        // case for single values given\n        } else {\n          // single value case\n          value += property + \"(\" + params + \") \";\n        }\n      }\n\n      return value.trim();\n    },\n\n\n    /**\n     * Helper function to create 3d property.\n     *\n     * @param property {String} Property of transform, e.g. translate\n     * @param params {Array} Array with three values, each one stands for an axis.\n     *\n     * @return {String} Computed property and its value\n     */\n    _compute3dProperty : function(property, params)\n    {\n      var cssValue = \"\";\n      property += \"3d\";\n\n      for (var i=0; i < params.length; i++) {\n        if (params[i] == null) {\n          params[i] = 0;\n        }\n      }\n\n      cssValue += property + \"(\" + params.join(\", \") + \") \";\n\n      return cssValue;\n    },\n\n\n    /**\n     * Helper function to create axis related properties.\n     *\n     * @param property {String} Property of transform, e.g. rotate\n     * @param params {Array} Array with values, each one stands for an axis.\n     *\n     * @return {String} Computed property and its value\n     */\n    _computeAxisProperties : function(property, params)\n    {\n      var value = \"\";\n      var dimensions = [\"X\", \"Y\", \"Z\"];\n      for (var i=0; i < params.length; i++) {\n        if (params[i] == null ||\n          (i == 2 && !qx.core.Environment.get(\"css.transform.3d\"))) {\n          continue;\n        }\n        value += property + dimensions[i] + \"(\";\n        value += params[i];\n        value += \") \";\n      }\n\n      return value;\n    }\n  }\n});\n"
  ]
}