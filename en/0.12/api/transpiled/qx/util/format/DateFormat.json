{
  "className": "qx.util.format.DateFormat",
  "packageName": "qx.util.format",
  "name": "DateFormat",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.util.format.IFormat"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 71,
        "column": 0
      },
      "end": {
        "line": 1760,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Til Schneider (til132)\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>A formatter and parser for dates, see\n http://www.unicode.org/reports/tr35/#Date<em>Format</em>Patterns\n Here is a quick overview of the format pattern keys:\n </p>\n<table>\n <tr><th>Key &nbsp;<th>Description\n <tr><td><code> G </code><td> era, e.g. \"AD\"\n <tr><td><code> y </code><td> year\n <tr><td><code> Y </code><td> week year\n <tr><td><code> u </code><td> extended year [Not supported yet]\n <tr><td><code> Q </code><td> quarter\n <tr><td><code> q </code><td> stand-alone quarter\n <tr><td><code> M </code><td> month\n <tr><td><code> L </code><td> stand-alone month\n <tr><td><code> I </code><td> chinese leap month [Not supported yet]\n <tr><td><code> w </code><td> week of year\n <tr><td><code> W </code><td> week of month\n <tr><td><code> d </code><td> day of month\n <tr><td><code> D </code><td> day of year\n <tr><td><code> F </code><td> day of week in month [Not supported yet]\n <tr><td><code> g </code><td> modified Julian day [Not supported yet]\n <tr><td><code> E </code><td> day of week\n <tr><td><code> e </code><td> local day of week\n <tr><td><code> c </code><td> stand-alone local day of week\n <tr><td><code> a </code><td> period of day (am or pm)\n <tr><td><code> h </code><td> 12-hour hour\n <tr><td><code> H </code><td> 24-hour hour\n <tr><td><code> K </code><td> hour [0-11]\n <tr><td><code> k </code><td> hour [1-24]\n <tr><td><code> j </code><td> special symbol [Not supported yet]\n <tr><td><code> m </code><td> minute\n <tr><td><code> s </code><td> second\n <tr><td><code> S </code><td> fractional second\n <tr><td><code> A </code><td> millisecond in day [Not supported yet]\n <tr><td><code> z </code><td> time zone, specific non-location format\n <tr><td><code> Z </code><td> time zone, rfc822/gmt format\n <tr><td><code> v </code><td> time zone, generic non-location format [Not supported yet]\n <tr><td><code> V </code><td> time zone, like z except metazone abbreviations [Not supported yet]\n </table>\n<p>(This list is preliminary, not all format keys might be implemented). Most\n keys support repetitions that influence the meaning of the format. Parts of the\n format string that should not be interpreted as format keys have to be\n single-quoted.\n The same format patterns will be used for both parsing and output formatting.\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 90,
        "column": 14
      },
      "end": {
        "line": 110,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "format {String|null} The format to use. If null, the locale's default\n format is used.",
          "paramName": "format",
          "description": " The format to use. If null, the locale's default\n format is used.",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "@param",
          "body": "locale {String?} optional locale to be used. In case this is not present, the {@link #locale} property of DateFormat\n will be following the {@link qx.locale.Manager#locale} property of qx.locale.Manager",
          "paramName": "locale",
          "description": " optional locale to be used. In case this is not present, the {@link #locale} property of DateFormat\n will be following the {@link qx.locale.Manager#locale} property of qx.locale.Manager",
          "optional": true,
          "type": "String"
        }
      ]
    }
  },
  "statics": {
    "getDateInstance": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience factory that returns a <code>DateFomat</code> instance that\n uses a short date-only format. Beware that the overall layout of the\n date/time format string is that of the locale in effect when the factory\n function is called.\n Implemented as a quasi-singleton, so beware of side effects.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{DateFormat} a DateFormat instance.",
            "type": "qx.util.format.DateFormat",
            "description": " a DateFormat instance."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDateTimeInstance": {
      "location": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience factory that returns a <code>DateFomat</code> instance that\n uses a long date/time format. Beware that the overall layout of the\n date/time format string is that of the locale in effect when the factory\n function is called.\n Implemented as a quasi-singleton, so beware of side effects.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{DateFormat} a DateFormat instance.",
            "type": "qx.util.format.DateFormat",
            "description": " a DateFormat instance."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "ASSUME_YEAR_2000_THRESHOLD": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 177,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The threshold until when a year should be assumed to belong to the\n   21st century (e.g. 12 -> 2012). Years over this threshold but below 100 will be\n   assumed to belong to the 20th century (e.g. 88 -> 1988). Years over 100 will be\n   used unchanged (e.g. 1792 -> 1792)."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "ISO_MASKS": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 185,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Special masks of patterns that are used frequently"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "AM_MARKER": {
      "location": {
        "start": {
          "line": 188,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} The am marker."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "PM_MARKER": {
      "location": {
        "start": {
          "line": 191,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} The pm marker."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__locale": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 206,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__initialLocale": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__format": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__parseFeed": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__parseRules": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__formatTree": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__UTC": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 212,
          "column": 16
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__fillNumber": {
      "location": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fills a number with leading zeros (\"25\" -&gt; \"0025\").</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "number {Integer} the number to fill.",
            "paramName": "number",
            "description": " the number to fill.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "minSize {Integer} the minimum size the returned string should have.",
            "paramName": "minSize",
            "description": " the minimum size the returned string should have.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the filled number as string.",
            "type": "String",
            "description": " the filled number as string."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getDayInYear": {
      "location": {
        "start": {
          "line": 239,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the day in year of a date.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} the date.",
            "paramName": "date",
            "description": " the date.",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the day in year.",
            "type": "Integer",
            "description": " the day in year."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__thursdayOfSameWeek": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 263,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the thursday in the same week as the date.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} the date to get the thursday of.",
            "paramName": "date",
            "description": " the date to get the thursday of.",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Date} the thursday in the same week as the date.",
            "type": "Date",
            "description": " the thursday in the same week as the date."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getWeekInYear": {
      "location": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 287,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the week in year of a date.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} the date to get the week in year of.",
            "paramName": "date",
            "description": " the date to get the week in year of.",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the week in year.",
            "type": "Integer",
            "description": " the week in year."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getWeekInMonth": {
      "location": {
        "start": {
          "line": 295,
          "column": 4
        },
        "end": {
          "line": 300,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the week in month of a date.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} the date to get the week in year of.",
            "paramName": "date",
            "description": " the date to get the week in year of.",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the week in month.",
            "type": "Integer",
            "description": " the week in month."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getWeekYear": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 315,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the week year of a date. (that is the year of the week where this date happens to be)\n For a week in the middle of the summer, the year is easily obtained, but for a week\n when New Year's Eve takes place, the year of that week is ambiguous.\n The thursday day of that week is used to determine the year.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} the date to get the week in year of.",
            "paramName": "date",
            "description": " the date to get the week in year of.",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the week year.",
            "type": "Integer",
            "description": " the week year."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isLeapYear": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 328,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true if the year is a leap one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "year {Integer} the year to check.",
            "paramName": "year",
            "description": " the year to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if it is a leap year.",
            "type": "Boolean",
            "description": " true if it is a leap year."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getMonthAndDayFromDayOfYear": {
      "location": {
        "start": {
          "line": 337,
          "column": 4
        },
        "end": {
          "line": 365,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a json object with month and day as keys.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dayOfYear {Integer} the day of year.",
            "paramName": "dayOfYear",
            "description": " the day of year.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "year {Integer} the year to check.",
            "paramName": "year",
            "description": " the year to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} a json object {month: M, day: D}.",
            "type": "Object",
            "description": " a json object {month: M, day: D}."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getYearFromWeekYearAndMonth": {
      "location": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 395,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the year of a date when we know the week year</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "weekYear {Integer} the week year.",
            "paramName": "weekYear",
            "description": " the week year.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "month {Integer} the month",
            "paramName": "month",
            "description": " the month",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "dayOfMonth {Integer} the day in month",
            "paramName": "dayOfMonth",
            "description": " the day in month",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the year.",
            "type": "Integer",
            "description": " the year."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "setLocale": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 408,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the new value for locale property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} The new value.",
            "paramName": "value",
            "description": " The new value.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetLocale": {
      "location": {
        "start": {
          "line": 413,
          "column": 4
        },
        "end": {
          "line": 415,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the Locale</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLocale": {
      "location": {
        "start": {
          "line": 420,
          "column": 4
        },
        "end": {
          "line": 426,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the locale</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "format": {
      "location": {
        "start": {
          "line": 434,
          "column": 4
        },
        "end": {
          "line": 716,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats a date.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} The date to format.",
            "paramName": "date",
            "description": " The date to format.",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the formatted date.",
            "type": "String",
            "description": " the formatted date."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.format.IFormat",
      "appearsIn": [
        "qx.util.format.IFormat"
      ]
    },
    "parse": {
      "location": {
        "start": {
          "line": 727,
          "column": 4
        },
        "end": {
          "line": 830,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parses a date.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dateStr {String} the date to parse.",
            "paramName": "dateStr",
            "description": " the date to parse.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Date} the parsed date.",
            "type": "Date",
            "description": " the parsed date."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the format is not well formed or if the date string does not\n       match to the format.",
            "type": "Error",
            "description": " If the format is not well formed or if the date string does not\n       match to the format."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.format.IFormat",
      "appearsIn": [
        "qx.util.format.IFormat"
      ]
    },
    "__initFormatTree": {
      "location": {
        "start": {
          "line": 838,
          "column": 4
        },
        "end": {
          "line": 1003,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for {@link #format()} and {@link #parse()}.\n Parses the date format.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__initParseFeed": {
      "location": {
        "start": {
          "line": 1014,
          "column": 4
        },
        "end": {
          "line": 1099,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the parse feed.\n The parse contains everything needed for parsing: The regular expression\n (in compiled and uncompiled form) and the used rules.</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the date format is malformed.",
            "type": "Error",
            "description": " If the date format is malformed."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isRuleForWildcard": {
      "location": {
        "start": {
          "line": 1108,
          "column": 4
        },
        "end": {
          "line": 1124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the rule matches the wildcard or not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rule {Object} the rule we try to match with the wildcard",
            "paramName": "rule",
            "description": " the rule we try to match with the wildcard",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "wildcardChar {String} the character in the wildcard",
            "paramName": "wildcardChar",
            "description": " the character in the wildcard",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "wildcardSize {Integer} the number of  wildcardChar characters in the wildcard",
            "paramName": "wildcardSize",
            "description": " the number of  wildcardChar characters in the wildcard",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} if the rule matches or not",
            "type": "Boolean",
            "description": " if the rule matches or not"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__initParseRules": {
      "location": {
        "start": {
          "line": 1129,
          "column": 4
        },
        "end": {
          "line": 1758,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the static parse rules.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": []
}