{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/ObjectPool.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "size",
    "__pool",
    "setSize",
    "properties",
    "check",
    "init",
    "Infinity",
    "members",
    "getObject",
    "clazz",
    "$$disposed",
    "Error",
    "obj",
    "pool",
    "classname",
    "pop",
    "$$pooled",
    "poolObject",
    "length",
    "getSize",
    "destroy",
    "dispose",
    "push",
    "destruct",
    "list",
    "i",
    "l",
    "util",
    "ObjectPool"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     Simon Bull\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Simon Bull (sbull)\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * This class manages pooled Object instances.\n *\n * It exists mainly to minimize the amount of browser memory usage by reusing\n * window instances after they have been closed.  However, it could equally be\n * used to pool instances of any type of Object (expect singletons).\n *\n * It is the client's responsibility to ensure that pooled objects are not\n * referenced or used from anywhere else in the application.\n */\nqx.Class.define(\"qx.util.ObjectPool\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param size {Integer} Size of each class pool\n   */\n  construct : function(size)\n  {\n    this.base(arguments);\n\n    this.__pool = {};\n\n    if (size != null) {\n      this.setSize(size);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Number of objects of each class, which are pooled.\n     *\n     * A size of \"null\" represents an unlimited pool.\n     */\n    size :\n    {\n      check : \"Integer\",\n      init : Infinity\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {Map} Stores arrays of instances for all managed classes */\n    __pool : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      IMPL\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method finds and returns an instance of a requested type in the pool,\n     * if there is one.  Note that the pool determines which instance (if any) to\n     * return to the client.  The client cannot get a specific instance from the\n     * pool.\n     *\n     * @param clazz {Class} A reference to a class from which an instance should be created.\n     * @return {Object} An instance of the requested type. If non existed in the pool a new\n     *   one is transparently created and returned.\n     */\n    getObject : function(clazz)\n    {\n      if (this.$$disposed) {\n        return new clazz;\n      }\n\n      if (!clazz) {\n        throw new Error(\"Class needs to be defined!\");\n      }\n\n      var obj = null;\n      var pool = this.__pool[clazz.classname];\n\n      if (pool) {\n        obj = pool.pop();\n      }\n\n      if (obj) {\n        obj.$$pooled = false;\n      } else {\n        obj = new clazz;\n      }\n\n      return obj;\n    },\n\n\n    /**\n     * This method places an Object in a pool of Objects of its type. Note that\n     * once an instance has been pooled, there is no means to get that exact\n     * instance back. The instance may be discarded for garbage collection if\n     * the pool of its type is already full.\n     *\n     * It is assumed that no other references exist to this Object, and that it will\n     * not be used at all while it is pooled.\n     *\n     * @param obj {Object} An Object instance to pool.\n     */\n    poolObject : function(obj)\n    {\n      // Dispose check\n      if (!this.__pool) {\n        return;\n      }\n\n      var classname = obj.classname;\n      var pool = this.__pool[classname];\n\n      if (obj.$$pooled) {\n        throw new Error(\"Object is already pooled: \" + obj);\n      }\n\n      if (!pool) {\n        this.__pool[classname] = pool = [];\n      }\n\n      // Check to see whether the pool for this type is already full\n      if (pool.length > this.getSize())\n      {\n        // Use enhanced destroy() method instead of simple dispose\n        // when available to work together with queues etc.\n        if (obj.destroy) {\n          obj.destroy();\n        } else {\n          obj.dispose();\n        }\n\n        return;\n      }\n\n      obj.$$pooled = true;\n      pool.push(obj);\n    }\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    var pool = this.__pool;\n    var classname, list, i, l;\n\n    for (classname in pool)\n    {\n      list = pool[classname];\n      for (i=0, l=list.length; i<l; i++) {\n        list[i].dispose();\n      }\n    }\n\n    delete this.__pool;\n  }\n});\n"
  ]
}