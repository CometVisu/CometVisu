{
  "className": "qx.util.fsm.Transition",
  "packageName": "qx.util.fsm",
  "name": "Transition",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 437,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Derrell Lipman (derrell)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Create a new possible transition from one state to another.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 130,
        "column": 14
      },
      "end": {
        "line": 191,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "transitionName {String}\n   The name of this transition, used in debug messages.",
          "paramName": "transitionName",
          "description": "\n   The name of this transition, used in debug messages.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "transitionInfo {Object}\n   <pre>\n   An object optionally containing any of the following properties:\n     context -\n       A context in which all of the following functions should be run.\n     predicate -\n       A function which is called to determine whether this transition is\n       acceptable.  An acceptable transition will cause the transition's\n       \"ontransition\" function to be run, the current state's \"onexit\"\n       function to be run, and the new state's \"onentry\" function to be\n       run.\n       The predicate function's signature is function(fsm, event) and it\n       is saved in the predicate property of the transition object.  In\n       the predicate function:\n         fsm -\n           The finite state machine object to which this state is\n           attached.\n         event -\n           The event that caused a run of the finite state machine\n       The predicate function should return one of the following three\n       values:\n         - true means the transition is acceptable\n         - false means the transition is not acceptable, and the next\n           transition (if one exists) should be tried to determine if it\n           is acceptable\n         - null means that the transition determined that no further\n           transitions should be tried.  This might be used when the\n           transition ascertained that the event is for a target that is\n           not available in the current state, and the event has called\n           fsm.queueEvent() to have the event delivered upon state\n           transition.\n       It is possible to create a default predicate -- one that will cause\n       a transition to be acceptable always -- by either not providing a\n       predicate property, or by explicitly either setting the predicate\n       property to 'true' or setting it to a function that unconditionally\n       returns 'true'.  This default transition should, of course, always\n       be the last transition added to a state, since no transition added\n       after it will ever be tried.\n     nextState -\n       The state to which we transition, if the predicate returns true\n       (meaning the transition is acceptable).  The value of nextState may\n       be:\n         - a string, the state name of the state to transition to\n         - One of the constants:\n           - qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\n               Remain in whatever is the current state\n           - qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\n               Transition to the state at the top of the saved-state\n               stack, and remove the top element from the saved-state\n               stack.  Elements are added to the saved-state stack using\n               fsm.pushState().  It is an error if no state exists on the\n               saved-state stack.\n           - qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\n               TBD\n     autoActionsBeforeOntransition -\n     autoActionsAfterOntransition -\n       Automatic actions which take place at the time specified by the\n       property name.  In all cases, the action takes place immediately\n       before or after the specified function.\n       The property value for each of these properties is an object which\n       describes some number of functions to invoke on a set of specified\n       objects (typically widgets).\n       See {@link qx.util.fsm.State} for an example of autoActions.\n     ontransition -\n       A function which is called if the predicate function for this\n       transition returns true.  Its signature is function(fsm, event) and\n       it is saved in the ontransition property of the transition object.\n       In the ontransition function:\n         fsm -\n           The finite state machine object to which this state is\n           attached.\n         event -\n           The event that caused a run of the finite state machine\n     Additional properties may be provided in transInfo.  They will not be\n     used by the finite state machine, but will be available via\n     this.getUserData(\"<propertyName>\") during the transition's predicate\n     and ontransition functions.\n   </pre>",
          "paramName": "transitionInfo",
          "description": "\n   <pre>\n   An object optionally containing any of the following properties:\n     context -\n       A context in which all of the following functions should be run.\n     predicate -\n       A function which is called to determine whether this transition is\n       acceptable.  An acceptable transition will cause the transition's\n       \"ontransition\" function to be run, the current state's \"onexit\"\n       function to be run, and the new state's \"onentry\" function to be\n       run.\n       The predicate function's signature is function(fsm, event) and it\n       is saved in the predicate property of the transition object.  In\n       the predicate function:\n         fsm -\n           The finite state machine object to which this state is\n           attached.\n         event -\n           The event that caused a run of the finite state machine\n       The predicate function should return one of the following three\n       values:\n         - true means the transition is acceptable\n         - false means the transition is not acceptable, and the next\n           transition (if one exists) should be tried to determine if it\n           is acceptable\n         - null means that the transition determined that no further\n           transitions should be tried.  This might be used when the\n           transition ascertained that the event is for a target that is\n           not available in the current state, and the event has called\n           fsm.queueEvent() to have the event delivered upon state\n           transition.\n       It is possible to create a default predicate -- one that will cause\n       a transition to be acceptable always -- by either not providing a\n       predicate property, or by explicitly either setting the predicate\n       property to 'true' or setting it to a function that unconditionally\n       returns 'true'.  This default transition should, of course, always\n       be the last transition added to a state, since no transition added\n       after it will ever be tried.\n     nextState -\n       The state to which we transition, if the predicate returns true\n       (meaning the transition is acceptable).  The value of nextState may\n       be:\n         - a string, the state name of the state to transition to\n         - One of the constants:\n           - qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\n               Remain in whatever is the current state\n           - qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\n               Transition to the state at the top of the saved-state\n               stack, and remove the top element from the saved-state\n               stack.  Elements are added to the saved-state stack using\n               fsm.pushState().  It is an error if no state exists on the\n               saved-state stack.\n           - qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\n               TBD\n     autoActionsBeforeOntransition -\n     autoActionsAfterOntransition -\n       Automatic actions which take place at the time specified by the\n       property name.  In all cases, the action takes place immediately\n       before or after the specified function.\n       The property value for each of these properties is an object which\n       describes some number of functions to invoke on a set of specified\n       objects (typically widgets).\n       See {@link qx.util.fsm.State} for an example of autoActions.\n     ontransition -\n       A function which is called if the predicate function for this\n       transition returns true.  Its signature is function(fsm, event) and\n       it is saved in the ontransition property of the transition object.\n       In the ontransition function:\n         fsm -\n           The finite state machine object to which this state is\n           attached.\n         event -\n           The event that caused a run of the finite state machine\n     Additional properties may be provided in transInfo.  They will not be\n     used by the finite state machine, but will be available via\n     this.getUserData(\"<propertyName>\") during the transition's predicate\n     and ontransition functions.\n   </pre>",
          "type": "Object"
        }
      ]
    }
  },
  "properties": {
    "name": {
      "location": {
        "start": {
          "line": 199,
          "column": 4
        },
        "end": {
          "line": 203,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of this transition</p>"
          }
        ]
      },
      "name": "name",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "predicate": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The predicate function for this transition.  This is documented in the\n constructor, and is typically provided through the constructor's\n transitionInfo object, but it is also possible (but highly NOT\n recommended) to change this dynamically.</p>"
          }
        ]
      },
      "name": "predicate",
      "propertyType": "new"
    },
    "nextState": {
      "location": {
        "start": {
          "line": 230,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The state to transition to, if the predicate determines that this\n transition is acceptable.  This is documented in the constructor, and\n is typically provided through the constructor's transitionInfo object,\n but it is also possible (but highly NOT recommended) to change this\n dynamically.</p>"
          }
        ]
      },
      "name": "nextState",
      "propertyType": "new",
      "init": "qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE",
      "defaultValue": "qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE"
    },
    "autoActionsBeforeOntransition": {
      "location": {
        "start": {
          "line": 244,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Automatic actions to take prior to calling the transition's\n ontransition function.  This is documented in the constructor, and is\n typically provided through the constructor's transitionInfo object, but\n it is also possible (but highly NOT recommended) to change this\n dynamically.</p>"
          }
        ]
      },
      "name": "autoActionsBeforeOntransition",
      "propertyType": "new"
    },
    "autoActionsAfterOntransition": {
      "location": {
        "start": {
          "line": 258,
          "column": 4
        },
        "end": {
          "line": 262,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Automatic actions to take immediately after calling the transition's\n ontransition function.  This is documented in the constructor, and is\n typically provided through the constructor's transitionInfo object, but\n it is also possible (but highly NOT recommended) to change this\n dynamically.</p>"
          }
        ]
      },
      "name": "autoActionsAfterOntransition",
      "propertyType": "new"
    },
    "ontransition": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The function run when the transition is accepted.  This is documented\n in the constructor, and is typically provided through the constructor's\n transitionInfo object, but it is also possible (but highly NOT\n recommended) to change this dynamically.</p>"
          }
        ]
      },
      "name": "ontransition",
      "propertyType": "new"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__transformPredicate": {
      "location": {
        "start": {
          "line": 287,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validate the predicate. Converts all incoming values to functions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} incoming value",
            "paramName": "value",
            "description": " incoming value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} predicate function",
            "type": "Function",
            "description": " predicate function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformNextState": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 353,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformAutoActionsBeforeOntransition": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformAutoActionsAfterOntransition": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformOntransition": {
      "location": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 409,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__bindIfFunction": {
      "location": {
        "start": {
          "line": 425,
          "column": 4
        },
        "end": {
          "line": 435,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If given a function, bind it to a specified context.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "f {Function|var}\n   The (possibly) function to be bound to the specified context.",
            "paramName": "f",
            "description": "\n   The (possibly) function to be bound to the specified context.",
            "type": [
              "Function",
              "var"
            ]
          },
          {
            "name": "@param",
            "body": "context {Object}\n   The context to bind the function to.",
            "paramName": "context",
            "description": "\n   The context to bind the function to.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function}\n   If f was a function, the return value is f wrapped such that it will\n   be called in the specified context. Otherwise, f is returned\n   unaltered.",
            "type": "Function",
            "description": "\n   If f was a function, the return value is f wrapped such that it will\n   be called in the specified context. Otherwise, f is returned\n   unaltered."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getName": {
      "type": "function",
      "name": "getName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for name"
          }
        ]
      }
    },
    "setName": {
      "type": "function",
      "name": "setName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for name"
          }
        ]
      }
    },
    "resetName": {
      "type": "function",
      "name": "resetName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>name</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ]
      }
    },
    "getPredicate": {
      "type": "function",
      "name": "getPredicate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>predicate</code>.\n\nFor further details take a look at the property definition: {@link #predicate}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for predicate"
          }
        ]
      }
    },
    "setPredicate": {
      "type": "function",
      "name": "setPredicate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>predicate</code>.\n\nFor further details take a look at the property definition: {@link #predicate}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for predicate"
          }
        ]
      }
    },
    "resetPredicate": {
      "type": "function",
      "name": "resetPredicate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>predicate</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #predicate}."
          }
        ]
      }
    },
    "getNextState": {
      "type": "function",
      "name": "getNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nextState</code>.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for nextState"
          }
        ]
      }
    },
    "setNextState": {
      "type": "function",
      "name": "setNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nextState</code>.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for nextState"
          }
        ]
      }
    },
    "resetNextState": {
      "type": "function",
      "name": "resetNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nextState</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ]
      }
    },
    "getAutoActionsBeforeOntransition": {
      "type": "function",
      "name": "getAutoActionsBeforeOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoActionsBeforeOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsBeforeOntransition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for autoActionsBeforeOntransition"
          }
        ]
      }
    },
    "setAutoActionsBeforeOntransition": {
      "type": "function",
      "name": "setAutoActionsBeforeOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoActionsBeforeOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsBeforeOntransition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for autoActionsBeforeOntransition"
          }
        ]
      }
    },
    "resetAutoActionsBeforeOntransition": {
      "type": "function",
      "name": "resetAutoActionsBeforeOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoActionsBeforeOntransition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoActionsBeforeOntransition}."
          }
        ]
      }
    },
    "getAutoActionsAfterOntransition": {
      "type": "function",
      "name": "getAutoActionsAfterOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoActionsAfterOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsAfterOntransition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for autoActionsAfterOntransition"
          }
        ]
      }
    },
    "setAutoActionsAfterOntransition": {
      "type": "function",
      "name": "setAutoActionsAfterOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoActionsAfterOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsAfterOntransition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for autoActionsAfterOntransition"
          }
        ]
      }
    },
    "resetAutoActionsAfterOntransition": {
      "type": "function",
      "name": "resetAutoActionsAfterOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoActionsAfterOntransition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoActionsAfterOntransition}."
          }
        ]
      }
    },
    "getOntransition": {
      "type": "function",
      "name": "getOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>ontransition</code>.\n\nFor further details take a look at the property definition: {@link #ontransition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for ontransition"
          }
        ]
      }
    },
    "setOntransition": {
      "type": "function",
      "name": "setOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>ontransition</code>.\n\nFor further details take a look at the property definition: {@link #ontransition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for ontransition"
          }
        ]
      }
    },
    "resetOntransition": {
      "type": "function",
      "name": "resetOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>ontransition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #ontransition}."
          }
        ]
      }
    }
  },
  "descendants": []
}