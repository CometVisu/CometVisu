{
  "className": "qx.util.fsm.FiniteStateMachine",
  "packageName": "qx.util.fsm",
  "name": "FiniteStateMachine",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0
      },
      "end": {
        "line": 1312,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Derrell Lipman (derrell)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>A finite state machine.\n See {@link qx.util.fsm.State} for details on creating States,\n and {@link qx.util.fsm.Transition} for details on creating\n transitions between states.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 34,
        "column": 14
      },
      "end": {
        "line": 80,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "machineName {String} The name of this finite state machine",
          "paramName": "machineName",
          "description": " The name of this finite state machine",
          "type": "String"
        }
      ]
    }
  },
  "statics": {
    "StateChange": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Constants which may be values of the nextState member in the\n transitionInfo parameter of the Transition constructor.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "EventHandling": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Constants for use in the events member of the transitionInfo parameter\n of the Transition constructor.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "DebugFlags": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Debug bitmask values.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "events": {
    "terminated": {
      "location": {
        "start": {
          "line": 150,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the finite state machine terminates. Data is the last state\n before termination.</p>"
          }
        ]
      },
      "name": "terminated",
      "type": "qx.event.type.Data"
    }
  },
  "properties": {
    "name": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 162,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of this finite state machine (for debug messages)</p>"
          }
        ]
      },
      "name": "name",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "state": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 172,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The current state of the finite state machine.</p>"
          }
        ]
      },
      "name": "state",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "previousState": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 185,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The previous state of the finite state machine, i.e. the state from\n which we most recently transitioned.  Note that this could be the same\n as the current state if a successful transition brought us back to the\n same state.</p>"
          }
        ]
      },
      "name": "previousState",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "nextState": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 197,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The state to which we will be transitioning.  This property is valid\n only during a Transition's ontransition function and a State's onexit\n function.  At all other times, it is null.</p>"
          }
        ]
      },
      "name": "nextState",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "maxSavedStates": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum number of states which may pushed onto the state-stack.  It\n is generally a poor idea to have very many states saved on a stack.\n Following program logic becomes very difficult, and the code can be\n highly unmaintainable.  The default should be more than adequate.\n You've been warned.</p>"
          }
        ]
      },
      "name": "maxSavedStates",
      "propertyType": "new",
      "init": 2,
      "check": "Number",
      "defaultValue": 2
    },
    "debugFlags": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Debug flags, composed of the bitmask values in the DebugFlags constant.\n Set the debug flags from the application by or-ing together bits, akin\n to this:\n </p>\n<pre class='javascript'>\n var FSM = qx.util.fsm.FiniteStateMachine;\n fsm.setDebugFlags(FSM.DebugFlags.EVENTS |\n                   FSM.DebugFlags.TRANSITIONS |\n                   FSM.DebugFlags.FUNCTION_DETAIL |\n                   FSM.DebugFlags.OBJECT_NOT_FOUND);\n </pre>"
          }
        ]
      },
      "name": "debugFlags",
      "propertyType": "new",
      "init": 7,
      "check": "Number",
      "defaultValue": 7
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__states": {
      "location": {
        "start": {
          "line": 243,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__startState": {
      "location": {
        "start": {
          "line": 244,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__eventQueue": {
      "location": {
        "start": {
          "line": 245,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blockedEvents": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 246,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__savedStates": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__friendlyToObject": {
      "location": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__friendlyToHash": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 249,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__hashToFriendly": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 250,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__groupToFriendly": {
      "location": {
        "start": {
          "line": 251,
          "column": 4
        },
        "end": {
          "line": 251,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__friendlyToGroups": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__bEventProcessingInProgress": {
      "location": {
        "start": {
          "line": 253,
          "column": 4
        },
        "end": {
          "line": 253,
          "column": 40
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__bTerminated": {
      "location": {
        "start": {
          "line": 254,
          "column": 4
        },
        "end": {
          "line": 254,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "isTerminated": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the finite state machine is terminated or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the finite state machine is terminated.",
            "type": "Boolean",
            "description": " If the finite state machine is terminated."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addState": {
      "location": {
        "start": {
          "line": 278,
          "column": 4
        },
        "end": {
          "line": 305,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a state to the finite state machine.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {qx.util.fsm.State}\n   An object of class qx.util.fsm.State representing a state which is to\n   be a part of this finite state machine.",
            "paramName": "state",
            "description": "\n   An object of class qx.util.fsm.State representing a state which is to\n   be a part of this finite state machine.",
            "type": "qx.util.fsm.State"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the given state is not an instanceof of qx.util.fsm.State.",
            "type": "Error",
            "description": " If the given state is not an instanceof of qx.util.fsm.State."
          },
          {
            "name": "@throws",
            "body": "{Error} If the given state already exists.",
            "type": "Error",
            "description": " If the given state already exists."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "replaceState": {
      "location": {
        "start": {
          "line": 330,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replace a state in the finite state machine.  This is useful if\n initially \"dummy\" states are created which load the real state table\n for a series of operations (and possibly also load the gui associated\n with the new states at the same time).  Having portions of the finite\n state machine and their associated gui pages loaded at run time can\n help prevent long delays at application start-up time.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {qx.util.fsm.State}\n   An object of class qx.util.fsm.State representing a state which is to\n   be a part of this finite state machine.",
            "paramName": "state",
            "description": "\n   An object of class qx.util.fsm.State representing a state which is to\n   be a part of this finite state machine.",
            "type": "qx.util.fsm.State"
          },
          {
            "name": "@param",
            "body": "bDispose {Boolean}\n   If <i>true</i>, then dispose the old state object.  If <i>false</i>,\n   the old state object is returned for disposing by the caller.",
            "paramName": "bDispose",
            "description": "\n   If <i>true</i>, then dispose the old state object.  If <i>false</i>,\n   the old state object is returned for disposing by the caller.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}\n   The old state object if it was not disposed; otherwise null.",
            "type": "Object",
            "description": "\n   The old state object if it was not disposed; otherwise null."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the given state is not an instanceof of qx.util.fsm.State.",
            "type": "Error",
            "description": " If the given state is not an instanceof of qx.util.fsm.State."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addObject": {
      "location": {
        "start": {
          "line": 374,
          "column": 4
        },
        "end": {
          "line": 421,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an object (typically a widget) that is to be accessed during state\n transitions, to the finite state machine.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "friendlyName {String}\n   The friendly name to used for access to the object being added.",
            "paramName": "friendlyName",
            "description": "\n   The friendly name to used for access to the object being added.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "obj {Object}\n   The object to associate with the specified friendly name",
            "paramName": "obj",
            "description": "\n   The object to associate with the specified friendly name",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "groupNames {Array}\n   An optional list of group names of which this object is a member.",
            "paramName": "groupNames",
            "description": "\n   An optional list of group names of which this object is a member.",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeObject": {
      "location": {
        "start": {
          "line": 433,
          "column": 4
        },
        "end": {
          "line": 474,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an object which had previously been added by {@link #addObject}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "friendlyName {String}\n   The friendly name associated with an object, specifying which object\n   is to be removed.",
            "paramName": "friendlyName",
            "description": "\n   The friendly name associated with an object, specifying which object\n   is to be removed.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getObject": {
      "location": {
        "start": {
          "line": 489,
          "column": 4
        },
        "end": {
          "line": 492,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retrieve an object previously saved via {@link #addObject}, using its\n Friendly Name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "friendlyName {String}\n   The friendly name of the object to be retrieved.",
            "paramName": "friendlyName",
            "description": "\n   The friendly name of the object to be retrieved.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}\n   The object which has the specified friendly name, or undefined if no\n   object has been associated with that name.",
            "type": "Object",
            "description": "\n   The object which has the specified friendly name, or undefined if no\n   object has been associated with that name."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFriendlyName": {
      "location": {
        "start": {
          "line": 506,
          "column": 4
        },
        "end": {
          "line": 510,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the friendly name of an object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object}\n   The object for which the friendly name is desired",
            "paramName": "obj",
            "description": "\n   The object for which the friendly name is desired",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}\n   If the object has been previously registered via {@link #addObject},\n   then the friendly name of the object is returned; otherwise, null.",
            "type": "String",
            "description": "\n   If the object has been previously registered via {@link #addObject},\n   then the friendly name of the object is returned; otherwise, null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getGroupObjects": {
      "location": {
        "start": {
          "line": 525,
          "column": 4
        },
        "end": {
          "line": 535,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retrieve the list of objects which have registered, via {@link #addObject}\n as being members of the specified group.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "groupName {String}\n   The name of the group for which the member list is desired.",
            "paramName": "groupName",
            "description": "\n   The name of the group for which the member list is desired.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}\n   An array containing the friendly names of any objects which are\n   members of the specified group.  The resultant array may be empty.",
            "type": "Array",
            "description": "\n   An array containing the friendly names of any objects which are\n   members of the specified group.  The resultant array may be empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "displayAllObjects": {
      "location": {
        "start": {
          "line": 542,
          "column": 4
        },
        "end": {
          "line": 556,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Display all of the saved objects and their reverse mappings.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getInternalData": {
      "location": {
        "start": {
          "line": 576,
          "column": 4
        },
        "end": {
          "line": 591,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get internal data for debugging</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}\n   A map containing the following:\n     __states\n     __startState\n     __eventQueue\n     __blockedEvents\n     __savedStates\n     __friendlyToObject\n     __friendlyToHash\n     __hashToFriendly\n     __groupToFriendly\n     __friendlyToGroups\n     __bEventProcessingInProgress",
            "type": "Map",
            "description": "\n   A map containing the following:\n     __states\n     __startState\n     __eventQueue\n     __blockedEvents\n     __savedStates\n     __friendlyToObject\n     __friendlyToHash\n     __hashToFriendly\n     __groupToFriendly\n     __friendlyToGroups\n     __bEventProcessingInProgress"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "start": {
      "location": {
        "start": {
          "line": 600,
          "column": 4
        },
        "end": {
          "line": 644,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start (or restart, after it has terminated) the finite state machine\n from the starting state.  The starting state is defined as the first\n state added to the finite state machine.</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the machine stared with not available state.",
            "type": "Error",
            "description": " If the machine stared with not available state."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pushState": {
      "location": {
        "start": {
          "line": 672,
          "column": 4
        },
        "end": {
          "line": 695,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Save the current or previous state on the saved-state stack.  A future\n transition can then provide, as its nextState value, the class\n constant:\n   <code>\n   qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK\n   </code>\n which will cause the next state to be whatever is at the top of the\n saved-state stack, and remove that top element from the saved-state\n stack.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {Boolean|String}\n   When <i>true</i>, then push the current state onto the stack.  This\n   might be used in a transition, before the state has changed.  When\n   <i>false</i>, then push the previous state onto the stack.  This\n   might be used in an on entry function to save the previous state to\n   return to.  If this parameter is a string, it is taken to be the\n   name of the state to transition to.",
            "paramName": "state",
            "description": "\n   When <i>true</i>, then push the current state onto the stack.  This\n   might be used in a transition, before the state has changed.  When\n   <i>false</i>, then push the previous state onto the stack.  This\n   might be used in an on entry function to save the previous state to\n   return to.  If this parameter is a string, it is taken to be the\n   name of the state to transition to.",
            "type": [
              "Boolean",
              "String"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the saved-state stack is full.",
            "type": "Error",
            "description": " If the saved-state stack is full."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "popState": {
      "location": {
        "start": {
          "line": 705,
          "column": 4
        },
        "end": {
          "line": 715,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pop the saved state stack.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|Boolean}\n   The name of a state or a boolean flag that had most recently been\n   pushed onto the saved-state stack.",
            "type": "String|Boolean",
            "description": "\n   The name of a state or a boolean flag that had most recently been\n   pushed onto the saved-state stack."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "postponeEvent": {
      "location": {
        "start": {
          "line": 726,
          "column": 4
        },
        "end": {
          "line": 731,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add the specified event to a list of events to be passed to the next\n state following state transition.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Event}\n   The event to add to the event queue for processing after state change.",
            "paramName": "event",
            "description": "\n   The event to add to the event queue for processing after state change.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "enqueueEvent": {
      "location": {
        "start": {
          "line": 747,
          "column": 4
        },
        "end": {
          "line": 778,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enqueue an event for processing</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Event}\n   The event to be enqueued",
            "paramName": "event",
            "description": "\n   The event to be enqueued",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "bAddAtHead {Boolean}\n   If <i>true</i>, put the event at the head of the queue for immediate\n   processing.  If <i>false</i>, place the event at the tail of the\n   queue so that it receives in-order processing.",
            "paramName": "bAddAtHead",
            "description": "\n   If <i>true</i>, put the event at the head of the queue for immediate\n   processing.  If <i>false</i>, place the event at the tail of the\n   queue so that it receives in-order processing.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "eventListener": {
      "location": {
        "start": {
          "line": 786,
          "column": 4
        },
        "end": {
          "line": 808,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for all event types in the finite state machine</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event that was dispatched.",
            "paramName": "event",
            "description": " The event that was dispatched.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fireImmediateEvent": {
      "location": {
        "start": {
          "line": 827,
          "column": 4
        },
        "end": {
          "line": 852,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event and send it immediately to the finite state machine.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String}\n   The type of event, e.g. \"execute\"",
            "paramName": "type",
            "description": "\n   The type of event, e.g. \"execute\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {qx.core.Object}\n   The target of the event",
            "paramName": "target",
            "description": "\n   The target of the event",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "data {Object|null}\n   The data, if any, to issue in the event.  If this parameter is null\n   then a qx.event.type.Event is instantiated.  Otherwise, an event of\n   type qx.event.type.Data is instantiated and this data is applied to\n   it.",
            "paramName": "data",
            "description": "\n   The data, if any, to issue in the event.  If this parameter is null\n   then a qx.event.type.Event is instantiated.  Otherwise, an event of\n   type qx.event.type.Data is instantiated and this data is applied to\n   it.",
            "type": [
              "Object",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scheduleEvent": {
      "location": {
        "start": {
          "line": 875,
          "column": 4
        },
        "end": {
          "line": 884,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create and schedule an event to be sent to the finite state machine\n \"shortly\".  This allows such things as letting a progress cursor\n display prior to handling the event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String}\n   The type of event, e.g. \"execute\"",
            "paramName": "type",
            "description": "\n   The type of event, e.g. \"execute\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {qx.core.Object}\n   The target of the event",
            "paramName": "target",
            "description": "\n   The target of the event",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "data {Object|null}\n   See {@link #fireImmediateEvent} for details.",
            "paramName": "data",
            "description": "\n   See {@link #fireImmediateEvent} for details.",
            "type": [
              "Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "timeout {Integer|null}\n   If provided, this is the number of milliseconds to wait before firing\n   the event.  If not provided, a default short interval (on the order\n   of 20 milliseconds) is used.",
            "paramName": "timeout",
            "description": "\n   If provided, this is the number of milliseconds to wait before firing\n   the event.  If not provided, a default short interval (on the order\n   of 20 milliseconds) is used.",
            "type": [
              "Integer",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__processEvents": {
      "location": {
        "start": {
          "line": 891,
          "column": 4
        },
        "end": {
          "line": 922,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Process all of the events on the event queue.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__run": {
      "location": {
        "start": {
          "line": 945,
          "column": 4
        },
        "end": {
          "line": 1302,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Run the finite state machine to process a single event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Event}\n   An event that has been dispatched.  The event may be handled (if the\n   current state handles this event type), queued (if the current state\n   blocks this event type), or discarded (if the current state neither\n   handles nor blocks this event type).",
            "paramName": "event",
            "description": "\n   An event that has been dispatched.  The event may be handled (if the\n   current state handles this event type), queued (if the current state\n   blocks this event type), or discarded (if the current state neither\n   handles nor blocks this event type).",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}\n   Whether the event should be disposed.  If it was blocked, we've\n   pushed it back onto the event queue, and it should not be disposed.",
            "type": "Boolean",
            "description": "\n   Whether the event should be disposed.  If it was blocked, we've\n   pushed it back onto the event queue, and it should not be disposed."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the explicit transitions does not exist.",
            "type": "Error",
            "description": " If the explicit transitions does not exist."
          },
          {
            "name": "@throws",
            "body": "{Error} If the transition returns an invalid value.",
            "type": "Error",
            "description": " If the transition returns an invalid value."
          },
          {
            "name": "@throws",
            "body": "{Error} If the next step will transit to an nonexistent state.",
            "type": "Error",
            "description": " If the next step will transit to an nonexistent state."
          },
          {
            "name": "@throws",
            "body": "{Error} If the state stack is empty and the next state is POP_STATE_STACK",
            "type": "Error",
            "description": " If the state stack is empty and the next state is POP_STATE_STACK"
          },
          {
            "name": "@throws",
            "body": "{Error} If the next state is invalid.",
            "type": "Error",
            "description": " If the next state is invalid."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getName": {
      "type": "function",
      "name": "getName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for name"
          }
        ]
      }
    },
    "setName": {
      "type": "function",
      "name": "setName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for name"
          }
        ]
      }
    },
    "resetName": {
      "type": "function",
      "name": "resetName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>name</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ]
      }
    },
    "getState": {
      "type": "function",
      "name": "getState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for state"
          }
        ]
      }
    },
    "setState": {
      "type": "function",
      "name": "setState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for state"
          }
        ]
      }
    },
    "resetState": {
      "type": "function",
      "name": "resetState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>state</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ]
      }
    },
    "getPreviousState": {
      "type": "function",
      "name": "getPreviousState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>previousState</code>.\n\nFor further details take a look at the property definition: {@link #previousState}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for previousState"
          }
        ]
      }
    },
    "setPreviousState": {
      "type": "function",
      "name": "setPreviousState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>previousState</code>.\n\nFor further details take a look at the property definition: {@link #previousState}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for previousState"
          }
        ]
      }
    },
    "resetPreviousState": {
      "type": "function",
      "name": "resetPreviousState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>previousState</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #previousState}."
          }
        ]
      }
    },
    "getNextState": {
      "type": "function",
      "name": "getNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nextState</code>.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for nextState"
          }
        ]
      }
    },
    "setNextState": {
      "type": "function",
      "name": "setNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nextState</code>.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for nextState"
          }
        ]
      }
    },
    "resetNextState": {
      "type": "function",
      "name": "resetNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nextState</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ]
      }
    },
    "getMaxSavedStates": {
      "type": "function",
      "name": "getMaxSavedStates",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxSavedStates</code>.\n\nFor further details take a look at the property definition: {@link #maxSavedStates}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for maxSavedStates"
          }
        ]
      }
    },
    "setMaxSavedStates": {
      "type": "function",
      "name": "setMaxSavedStates",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxSavedStates</code>.\n\nFor further details take a look at the property definition: {@link #maxSavedStates}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for maxSavedStates"
          }
        ]
      }
    },
    "resetMaxSavedStates": {
      "type": "function",
      "name": "resetMaxSavedStates",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxSavedStates</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxSavedStates}."
          }
        ]
      }
    },
    "getDebugFlags": {
      "type": "function",
      "name": "getDebugFlags",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>debugFlags</code>.\n\nFor further details take a look at the property definition: {@link #debugFlags}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for debugFlags"
          }
        ]
      }
    },
    "setDebugFlags": {
      "type": "function",
      "name": "setDebugFlags",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>debugFlags</code>.\n\nFor further details take a look at the property definition: {@link #debugFlags}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for debugFlags"
          }
        ]
      }
    },
    "resetDebugFlags": {
      "type": "function",
      "name": "resetDebugFlags",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>debugFlags</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #debugFlags}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1306,
        "column": 13
      },
      "end": {
        "line": 1311,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}