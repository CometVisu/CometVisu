{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/FiniteStateMachine.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "machineName",
    "setName",
    "__states",
    "__startState",
    "__savedStates",
    "__eventQueue",
    "__blockedEvents",
    "__friendlyToObject",
    "__friendlyToHash",
    "__hashToFriendly",
    "__groupToFriendly",
    "__friendlyToGroups",
    "statics",
    "StateChange",
    "CURRENT_STATE",
    "POP_STATE_STACK",
    "TERMINATE",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "DebugFlags",
    "EVENTS",
    "TRANSITIONS",
    "FUNCTION_DETAIL",
    "OBJECT_NOT_FOUND",
    "events",
    "properties",
    "name",
    "check",
    "nullable",
    "state",
    "previousState",
    "nextState",
    "maxSavedStates",
    "init",
    "debugFlags",
    "members",
    "__bEventProcessingInProgress",
    "__bTerminated",
    "isTerminated",
    "addState",
    "util",
    "fsm",
    "State",
    "Error",
    "stateName",
    "getName",
    "replaceState",
    "bDispose",
    "oldState",
    "_bNeedDispose",
    "addObject",
    "friendlyName",
    "obj",
    "groupNames",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "i",
    "length",
    "groupName",
    "push",
    "removeObject",
    "objName",
    "bGroupEmpty",
    "getObject",
    "getFriendlyName",
    "getGroupObjects",
    "a",
    "displayAllObjects",
    "debug",
    "_getInternalData",
    "start",
    "setState",
    "setPreviousState",
    "setNextState",
    "debugFunctions",
    "getDebugFlags",
    "FiniteStateMachine",
    "getAutoActionsBeforeOnentry",
    "getOnentry",
    "getAutoActionsAfterOnentry",
    "pushState",
    "getMaxSavedStates",
    "getState",
    "getPreviousState",
    "popState",
    "pop",
    "postponeEvent",
    "event",
    "unshift",
    "enqueueEvent",
    "bAddAtHead",
    "friendly",
    "getTarget",
    "getType",
    "eventListener",
    "e",
    "clone",
    "__processEvents",
    "fireImmediateEvent",
    "type",
    "target",
    "data",
    "Registration",
    "createEvent",
    "Data",
    "Event",
    "setTarget",
    "scheduleEvent",
    "timeout",
    "Timer",
    "once",
    "__run",
    "dispose",
    "thisState",
    "prevState",
    "currentState",
    "transitions",
    "action",
    "debugEvents",
    "debugTransitions",
    "debugObjectNotFound",
    "getEvents",
    "trans",
    "t",
    "getPredicate",
    "getNextState",
    "getAutoActionsBeforeOntransition",
    "getOntransition",
    "getAutoActionsAfterOntransition",
    "getAutoActionsBeforeOnexit",
    "getOnexit",
    "getAutoActionsAfterOnexit",
    "fireDataEvent",
    "undefined",
    "destruct",
    "_disposeArray"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A finite state machine.\n *\n * See {@link qx.util.fsm.State} for details on creating States,\n * and {@link qx.util.fsm.Transition} for details on creating\n * transitions between states.\n */\nqx.Class.define(\"qx.util.fsm.FiniteStateMachine\",\n{\n  extend : qx.core.Object,\n\n\n  /**\n   * @param machineName {String} The name of this finite state machine\n   */\n  construct : function(machineName)\n  {\n    // Call our superclass' constructor\n    this.base(arguments);\n\n    // Save the machine name\n    this.setName(machineName);\n\n    // Initialize the states object\n    this.__states = {};\n\n    // The first state added will become the start state\n    this.__startState = null;\n\n    // Initialize the saved-states stack\n    this.__savedStates = [];\n\n    // Initialize the pending event queue\n    this.__eventQueue = [];\n\n    // Initialize the blocked events queue\n    this.__blockedEvents = [];\n\n    // Create the friendlyToObject\" object.  Each object has as its property\n    // name, the friendly name of the object; and as its property value, the\n    // object itself.\n    this.__friendlyToObject = {};\n\n    // Create the \"friendlyToHash\" object.  Each object has as its property\n    // name, the friendly name of the object; and as its property value, the\n    // hash code of the object.\n    this.__friendlyToHash = {};\n\n    // Create the \"hashToFriendly\" object.  Each object has as its property\n    // name, the hash code of the object; and as its property value, the\n    // friendly name of the object.\n    this.__hashToFriendly = {};\n\n    // Friendly names can be added to groups, for easy manipulation of\n    // enabling and disabling groups of widgets.  Track which friendly names\n    // are in which group.\n    this.__groupToFriendly = {};\n\n    // We also need to be able to map back from friendly name to the groups it\n    // is in.\n    this.__friendlyToGroups = {};\n  },\n\n\n  statics :\n  {\n    /**\n     * Constants which may be values of the nextState member in the\n     * transitionInfo parameter of the Transition constructor.\n     */\n    StateChange :\n    {\n\n      /** When used as a nextState value, means remain in current state */\n      CURRENT_STATE   : 1,\n\n      /**\n       * When used as a nextState value, means go to most-recently pushed state\n       */\n      POP_STATE_STACK : 2,\n\n      /** When used as a nextState value, means terminate this state machine */\n      TERMINATE       : 3\n    },\n\n\n    /**\n     * Constants for use in the events member of the transitionInfo parameter\n     * of the Transition constructor.\n     */\n    EventHandling :\n    {\n      /**\n       * This event is handled by this state, but the predicate of a transition\n       * will determine whether to use that transition.\n       */\n      PREDICATE : 1,\n\n      /** Enqueue this event for possible use by the next state */\n      BLOCKED   : 2\n    },\n\n\n    /**\n     * Debug bitmask values.\n     */\n    DebugFlags :\n    {\n\n      /** Show events */\n      EVENTS           : 1,\n\n      /** Show transitions */\n      TRANSITIONS      : 2,\n\n      /** Show individual function invocations during transitions */\n      FUNCTION_DETAIL  : 4,\n\n      /**\n       * When object friendly names are referenced but not found, show message\n       */\n      OBJECT_NOT_FOUND : 8\n    }\n  },\n\n  events :\n  {\n    /**\n     * Fired when the finite state machine terminates. Data is the last state\n     * before termination.\n     */\n    \"terminated\" : \"qx.event.type.Data\"\n  },\n\n  properties :\n  {\n    /**\n     * The name of this finite state machine (for debug messages)\n     */\n    name :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * The current state of the finite state machine.\n     */\n    state :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * The previous state of the finite state machine, i.e. the state from\n     * which we most recently transitioned.  Note that this could be the same\n     * as the current state if a successful transition brought us back to the\n     * same state.\n     */\n    previousState :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * The state to which we will be transitioning.  This property is valid\n     * only during a Transition's ontransition function and a State's onexit\n     * function.  At all other times, it is null.\n     */\n    nextState :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * The maximum number of states which may pushed onto the state-stack.  It\n     * is generally a poor idea to have very many states saved on a stack.\n     * Following program logic becomes very difficult, and the code can be\n     * highly unmaintainable.  The default should be more than adequate.\n     * You've been warned.\n     */\n    maxSavedStates :\n    {\n      check : \"Number\",\n      init : 2\n    },\n\n\n    /**\n     * Debug flags, composed of the bitmask values in the DebugFlags constant.\n     *\n     * Set the debug flags from the application by or-ing together bits, akin\n     * to this:\n     *\n     * <pre class='javascript'>\n     * var FSM = qx.util.fsm.FiniteStateMachine;\n     * fsm.setDebugFlags(FSM.DebugFlags.EVENTS |\n     *                   FSM.DebugFlags.TRANSITIONS |\n     *                   FSM.DebugFlags.FUNCTION_DETAIL |\n     *                   FSM.DebugFlags.OBJECT_NOT_FOUND);\n     * </pre>\n     */\n    debugFlags :\n    {\n      check : \"Number\",\n\n      // Default:\n      // (qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS |\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS |\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND)\n      init  : 7\n    }\n  },\n\n\n  members :\n  {\n    __states                     : null,\n    __startState                 : null,\n    __eventQueue                 : null,\n    __blockedEvents              : null,\n    __savedStates                : null,\n    __friendlyToObject           : null,\n    __friendlyToHash             : null,\n    __hashToFriendly             : null,\n    __groupToFriendly            : null,\n    __friendlyToGroups           : null,\n    __bEventProcessingInProgress : false,\n    __bTerminated                : true,\n\n    /**\n     * Checks whether the finite state machine is terminated or not.\n     *\n     * @return {Boolean} If the finite state machine is terminated.\n     */\n    isTerminated : function()\n    {\n      return this.__bTerminated;\n    },\n\n    /**\n     * Add a state to the finite state machine.\n     *\n     *\n     * @param state {qx.util.fsm.State}\n     *   An object of class qx.util.fsm.State representing a state which is to\n     *   be a part of this finite state machine.\n     *\n     *\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\n     * @throws {Error} If the given state already exists.\n     */\n    addState : function(state)\n    {\n      // Ensure that we got valid state info\n      if (!state instanceof qx.util.fsm.State)\n      {\n        throw new Error(\"Invalid state: not an instance of \" +\n                        \"qx.util.fsm.State\");\n      }\n\n      // Retrieve the name of this state\n      var stateName = state.getName();\n\n      // Ensure that the state name doesn't already exist\n      if (stateName in this.__states)\n      {\n        throw new Error(\"State \" + stateName + \" already exists\");\n      }\n\n      // Is this the first state being added?\n      if (this.__startState == null)\n      {\n        // Yup.  Save this state as the start state.\n        this.__startState = stateName;\n      }\n\n      // Add the new state object to the finite state machine\n      this.__states[stateName] = state;\n    },\n\n\n    /**\n     * Replace a state in the finite state machine.  This is useful if\n     * initially \"dummy\" states are created which load the real state table\n     * for a series of operations (and possibly also load the gui associated\n     * with the new states at the same time).  Having portions of the finite\n     * state machine and their associated gui pages loaded at run time can\n     * help prevent long delays at application start-up time.\n     *\n     *\n     * @param state {qx.util.fsm.State}\n     *   An object of class qx.util.fsm.State representing a state which is to\n     *   be a part of this finite state machine.\n     *\n     * @param bDispose {Boolean}\n     *   If <i>true</i>, then dispose the old state object.  If <i>false</i>,\n     *   the old state object is returned for disposing by the caller.\n     *\n     * @return {Object}\n     *   The old state object if it was not disposed; otherwise null.\n     *\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\n     */\n    replaceState : function(state, bDispose)\n    {\n      // Ensure that we got valid state info\n      if (!state instanceof qx.util.fsm.State)\n      {\n        throw new Error(\"Invalid state: not an instance of \" +\n                        \"qx.util.fsm.State\");\n      }\n\n      // Retrieve the name of this state\n      var stateName = state.getName();\n\n      // Save the old state object, so we can return it to be disposed\n      var oldState = this.__states[stateName];\n\n      // Replace the old state with the new state object.\n      this.__states[stateName] = state;\n\n      // Did they request that the old state be disposed?\n      if (bDispose)\n      {\n        // Yup.  Mark it to be disposed.\n        oldState._bNeedDispose = true;\n      }\n\n      return oldState;\n    },\n\n\n    /**\n     * Add an object (typically a widget) that is to be accessed during state\n     * transitions, to the finite state machine.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name to used for access to the object being added.\n     *\n     * @param obj {Object}\n     *   The object to associate with the specified friendly name\n     *\n     * @param groupNames {Array}\n     *   An optional list of group names of which this object is a member.\n     *\n     */\n    addObject : function(friendlyName, obj, groupNames)\n    {\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\n      this.__friendlyToHash[friendlyName] = hash;\n      this.__hashToFriendly[hash] = friendlyName;\n      this.__friendlyToObject[friendlyName] = obj;\n\n      // If no groupNames are specified, we're done.\n      if (!groupNames)\n      {\n        return;\n      }\n\n      // Allow either a single group name or an array of group names.  If the\n      // former, we convert it to the latter to make the subsequent code\n      // simpler.\n      if (typeof (groupNames) == \"string\")\n      {\n        groupNames = [ groupNames ];\n      }\n\n      // For each group that this friendly name is to be a member of...\n      for (var i=0; i<groupNames.length; i++)\n      {\n        var groupName = groupNames[i];\n\n        // If the group name doesn't yet exist...\n        if (!this.__groupToFriendly[groupName])\n        {\n          // ... then create it.\n          this.__groupToFriendly[groupName] = {};\n        }\n\n        // Add the friendly name to the list of names in this group\n        this.__groupToFriendly[groupName][friendlyName] = true;\n\n        // If the friendly name group mapping doesn't yet exist...\n        if (!this.__friendlyToGroups[friendlyName])\n        {\n          // ... then create it.\n          this.__friendlyToGroups[friendlyName] = [];\n        }\n\n        // Append this group name to the list of groups this friendly name is\n        // in\n        this.__friendlyToGroups[friendlyName].push(groupName);\n      }\n    },\n\n\n    /**\n     * Remove an object which had previously been added by {@link #addObject}.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name associated with an object, specifying which object\n     *   is to be removed.\n     *\n     */\n    removeObject : function(friendlyName)\n    {\n      var             hash;\n      var             groupName;\n      var             objName;\n      var             bGroupEmpty;\n\n      hash = this.__friendlyToHash[friendlyName];\n\n      // Delete references to any groups this friendly name was in\n      if (this.__friendlyToGroups[friendlyName])\n      {\n        for (var i = 0; i < this.__friendlyToGroups[friendlyName].length; i++)\n        {\n          groupName = this.__friendlyToGroups[friendlyName][i];\n          delete this.__groupToFriendly[groupName][friendlyName];\n\n          // Is the group empty now?\n          bGroupEmpty = true;\n          for (objName in this.__groupToFriendly[groupName])\n          {\n            // The group is not empty. That's all we wanted to know.\n            bGroupEmpty = false;\n            break;\n          }\n\n          // If the group is empty...\n          if (bGroupEmpty)\n          {\n            // ... then we can delete the entire entry\n            delete this.__groupToFriendly[groupName];\n          }\n        }\n\n        delete this.__friendlyToGroups[friendlyName];\n      }\n\n      // Delete the friendly name\n      delete this.__hashToFriendly[hash];\n      delete this.__friendlyToHash[friendlyName];\n      delete this.__friendlyToObject[friendlyName];\n    },\n\n\n    /**\n     * Retrieve an object previously saved via {@link #addObject}, using its\n     * Friendly Name.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name of the object to be retrieved.\n     *\n     * @return {Object}\n     *   The object which has the specified friendly name, or undefined if no\n     *   object has been associated with that name.\n     */\n    getObject : function(friendlyName)\n    {\n      return this.__friendlyToObject[friendlyName];\n    },\n\n\n    /**\n     * Get the friendly name of an object.\n     *\n     *\n     * @param obj {Object}\n     *   The object for which the friendly name is desired\n     *\n     * @return {String}\n     *   If the object has been previously registered via {@link #addObject},\n     *   then the friendly name of the object is returned; otherwise, null.\n     */\n    getFriendlyName : function(obj)\n    {\n      var hash = obj ? qx.core.ObjectRegistry.toHashCode(obj) : null;\n      return hash ? this.__hashToFriendly[hash] : null;\n    },\n\n\n    /**\n     * Retrieve the list of objects which have registered, via {@link #addObject}\n     * as being members of the specified group.\n     *\n     *\n     * @param groupName {String}\n     *   The name of the group for which the member list is desired.\n     *\n     * @return {Array}\n     *   An array containing the friendly names of any objects which are\n     *   members of the specified group.  The resultant array may be empty.\n     */\n    getGroupObjects : function(groupName)\n    {\n      var a = [];\n\n      for (var name in this.__groupToFriendly[groupName])\n      {\n        a.push(name);\n      }\n\n      return a;\n    },\n\n\n    /**\n     * Display all of the saved objects and their reverse mappings.\n     *\n     */\n    displayAllObjects : function()\n    {\n      for (var friendlyName in this.__friendlyToHash)\n      {\n        var hash = this.__friendlyToHash[friendlyName];\n        var obj = this.getObject(friendlyName);\n        this.debug(friendlyName + \" => \" + hash);\n        this.debug(\"  \" + hash + \" => \" + this.__hashToFriendly[hash]);\n        this.debug(\"  \" +\n                   friendlyName + \" => \" + this.getObject(friendlyName));\n        this.debug(\"  \" +\n                   this.getObject(friendlyName) + \" => \" +\n                   this.getFriendlyName(obj));\n      }\n    },\n\n\n    /**\n     * Get internal data for debugging\n     *\n     * @return {Map}\n     *   A map containing the following:\n     *     __states\n     *     __startState\n     *     __eventQueue\n     *     __blockedEvents\n     *     __savedStates\n     *     __friendlyToObject\n     *     __friendlyToHash\n     *     __hashToFriendly\n     *     __groupToFriendly\n     *     __friendlyToGroups\n     *     __bEventProcessingInProgress\n     */\n    _getInternalData : function()\n    {\n      return (\n        {\n          \"states\"           : this.__states,\n          \"startState\"       : this.__startState,\n          \"eventQueue\"       : this.__eventQueue,\n          \"blockedEvents\"    : this.__blockedEvents,\n          \"savedStates\"      : this.__savedStates,\n          \"friendlyToObject\" : this.__friendlyToObject,\n          \"friendlyToHash\"   : this.__friendlyToHash,\n          \"hashToFriendly\"   : this.__hashToFriendly,\n          \"groupToFriendly\"  : this.__groupToFriendly,\n          \"friendlyToGroups\" : this.__friendlyToGroups\n        });\n    },\n\n    /**\n     * Start (or restart, after it has terminated) the finite state machine\n     * from the starting state.  The starting state is defined as the first\n     * state added to the finite state machine.\n     *\n     * @throws {Error} If the machine stared with not available state.\n     */\n    start : function()\n    {\n      this.__bTerminated = false;\n\n      var stateName = this.__startState;\n\n      if (stateName == null)\n      {\n        throw new Error(\"Machine started with no available states\");\n      }\n\n      // Set the start state to be the first state which was added to the\n      // machine\n      this.setState(stateName);\n      this.setPreviousState(null);\n      this.setNextState(null);\n\n      var debugFunctions =\n        (this.getDebugFlags() &\n         qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL);\n\n      // Run the actionsBeforeOnentry actions for the initial state\n      if (debugFunctions)\n      {\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsBeforeOnentry\");\n      }\n\n      this.__states[stateName].getAutoActionsBeforeOnentry()(this);\n\n      // Run the entry function for the new state, if one is specified\n      if (debugFunctions)\n      {\n        this.debug(this.getName() + \"#\" + stateName + \"#entry\");\n      }\n\n      this.__states[stateName].getOnentry()(this, null);\n\n      // Run the actionsAfterOnentry actions for the initial state\n      if (debugFunctions)\n      {\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsAfterOnentry\");\n      }\n\n      this.__states[stateName].getAutoActionsAfterOnentry()(this);\n    },\n\n\n    /**\n     * Save the current or previous state on the saved-state stack.  A future\n     * transition can then provide, as its nextState value, the class\n     * constant:\n     *\n     *   <code>\n     *   qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK\n     *   </code>\n     *\n     * which will cause the next state to be whatever is at the top of the\n     * saved-state stack, and remove that top element from the saved-state\n     * stack.\n     *\n     *\n     * @param state {Boolean|String}\n     *   When <i>true</i>, then push the current state onto the stack.  This\n     *   might be used in a transition, before the state has changed.  When\n     *   <i>false</i>, then push the previous state onto the stack.  This\n     *   might be used in an on entry function to save the previous state to\n     *   return to.  If this parameter is a string, it is taken to be the\n     *   name of the state to transition to.\n     *\n     *\n     * @throws {Error} If the saved-state stack is full.\n     */\n    pushState : function(state)\n    {\n      // See if there's room on the state stack for a new state\n      if (this.__savedStates.length >= this.getMaxSavedStates())\n      {\n        // Nope.  Programmer error.\n        throw new Error(\"Saved-state stack is full\");\n      }\n\n      if (state === true)\n      {\n        // Push the current state onto the saved-state stack\n        this.__savedStates.push(this.getState());\n      }\n      else if (state)\n      {\n        this.__savedStates.push(state);\n      }\n      else\n      {\n        // Push the previous state onto the saved-state stack\n        this.__savedStates.push(this.getPreviousState());\n      }\n    },\n\n\n    /**\n     * Pop the saved state stack.\n     *\n     * @return {String|Boolean}\n     *   The name of a state or a boolean flag that had most recently been\n     *   pushed onto the saved-state stack.\n     */\n    popState : function()\n    {\n      // Is there anything on the saved-state stack?\n      if (this.__savedStates.length == 0)\n      {\n        // Nope. Programmer error.\n        throw new Error(\"Saved-state stack is empty\");\n      }\n\n      return this.__savedStates.pop();\n    },\n\n    /**\n     * Add the specified event to a list of events to be passed to the next\n     * state following state transition.\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   The event to add to the event queue for processing after state change.\n     *\n     */\n    postponeEvent : function(event)\n    {\n      // Add this event to the blocked event queue, so it will be passed to the\n      // next state upon transition.\n      this.__blockedEvents.unshift(event);\n    },\n\n\n    /**\n     * Enqueue an event for processing\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   The event to be enqueued\n     *\n     * @param bAddAtHead {Boolean}\n     *   If <i>true</i>, put the event at the head of the queue for immediate\n     *   processing.  If <i>false</i>, place the event at the tail of the\n     *   queue so that it receives in-order processing.\n     *\n     */\n    enqueueEvent : function(event, bAddAtHead)\n    {\n      // Add the event to the event queue\n      if (bAddAtHead)\n      {\n        // Put event at the head of the queue\n        this.__eventQueue.push(event);\n      }\n      else\n      {\n        // Put event at the tail of the queue\n        this.__eventQueue.unshift(event);\n      }\n\n      if (this.getDebugFlags() &\n          qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS)\n      {\n        // Individual objects are listed.  Ensure target is a saved object\n        var friendly = this.getFriendlyName(event.getTarget());\n\n        if (bAddAtHead)\n        {\n          this.debug(this.getName() + \": Pushed event: \" + event.getType() +\n                   (friendly ? \" on \" + friendly : \"\"));\n        }\n        else\n        {\n          this.debug(this.getName() + \": Queued event: \" + event.getType() +\n                   (friendly ? \" on \" + friendly : \"\"));\n        }\n      }\n    },\n\n\n    /**\n     * Event listener for all event types in the finite state machine\n     *\n     * @param event {qx.event.type.Event} The event that was dispatched.\n     */\n    eventListener : function(event)\n    {\n      if (this.__bTerminated)\n      {\n        this.debug(this.getName() + \": Cannot listen to event '\" +\n                   event.getType() +\n                   \"', because the finite state machine is not running.\");\n        return;\n      }\n\n      // Events are enqueued upon receipt.  Some events are then processed\n      // immediately; other events get processed later.  We need to allow the\n      // event dispatcher to free the source event upon our return, so we'll\n      // clone it and enqueue our clone.  The source event can then be\n      // disposed upon our return.\n      var e = event.clone();\n\n      // Enqueue the new event on the tail of the queue\n      this.enqueueEvent(e, false);\n\n      // Process events\n      this.__processEvents();\n    },\n\n\n    /**\n     * Create an event and send it immediately to the finite state machine.\n     *\n     * @param type {String}\n     *   The type of event, e.g. \"execute\"\n     *\n     * @param target {qx.core.Object}\n     *   The target of the event\n     *\n     * @param data {Object|null}\n     *   The data, if any, to issue in the event.  If this parameter is null\n     *   then a qx.event.type.Event is instantiated.  Otherwise, an event of\n     *   type qx.event.type.Data is instantiated and this data is applied to\n     *   it.\n     *\n     */\n    fireImmediateEvent : function(type, target, data)\n    {\n      if (this.__bTerminated)\n      {\n        this.debug(this.getName() + \": Cannot listen to event '\" + type +\n                   \"', because the finite state machine is not running.\");\n        return;\n      }\n\n      if (data)\n      {\n        var event =\n          qx.event.Registration.createEvent(type,\n                                            qx.event.type.Data,\n                                            [ data, null, false ]);\n      }\n      else\n      {\n        var event =\n          qx.event.Registration.createEvent(type,\n                                            qx.event.type.Event,\n                                            [ false, false ]);\n      }\n      event.setTarget(target);\n      this.eventListener(event);\n    },\n\n\n    /**\n     * Create and schedule an event to be sent to the finite state machine\n     * \"shortly\".  This allows such things as letting a progress cursor\n     * display prior to handling the event.\n     *\n     * @param type {String}\n     *   The type of event, e.g. \"execute\"\n     *\n     * @param target {qx.core.Object}\n     *   The target of the event\n     *\n     * @param data {Object|null}\n     *   See {@link #fireImmediateEvent} for details.\n     *\n     * @param timeout {Integer|null}\n     *   If provided, this is the number of milliseconds to wait before firing\n     *   the event.  If not provided, a default short interval (on the order\n     *   of 20 milliseconds) is used.\n     *\n     */\n    scheduleEvent : function(type, target, data, timeout)\n    {\n      qx.event.Timer.once(\n        function()\n        {\n          this.fireImmediateEvent(type, target, data);\n        },\n        this,\n        timeout || 20);\n    },\n\n\n    /**\n     * Process all of the events on the event queue.\n     *\n     */\n    __processEvents : function()\n    {\n      // eventListener() can potentially be called while we're processing\n      // events\n      if (this.__bEventProcessingInProgress)\n      {\n        // We were processing already, so don't process concurrently.\n        return ;\n      }\n\n      // Track that we're processing events\n      this.__bEventProcessingInProgress = true;\n\n      // Process each of the events on the event queue\n      while (this.__eventQueue.length > 0)\n      {\n        // Pull the next event from the pending event queue\n        var event = this.__eventQueue.pop();\n\n        // Run the finite state machine with this event\n        var bDispose = this.__run(event);\n\n        // If we didn't block (and re-queue) the event, dispose it.\n        if (bDispose)\n        {\n          event.dispose();\n        }\n      }\n\n      // We're no longer processing events\n      this.__bEventProcessingInProgress = false;\n    },\n\n\n    /**\n     * Run the finite state machine to process a single event.\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   An event that has been dispatched.  The event may be handled (if the\n     *   current state handles this event type), queued (if the current state\n     *   blocks this event type), or discarded (if the current state neither\n     *   handles nor blocks this event type).\n     *\n     * @return {Boolean}\n     *   Whether the event should be disposed.  If it was blocked, we've\n     *   pushed it back onto the event queue, and it should not be disposed.\n     *\n     * @throws {Error} If the explicit transitions does not exist.\n     * @throws {Error} If the transition returns an invalid value.\n     * @throws {Error} If the next step will transit to an nonexistent state.\n     * @throws {Error} If the state stack is empty and the next state is POP_STATE_STACK\n     * @throws {Error} If the next state is invalid.\n     */\n    __run : function(event)\n    {\n      // For use in generated functions...\n      // State name variables\n      var thisState;\n      var nextState;\n      var prevState;\n\n      // The current State object\n      var currentState;\n\n      // The transitions available in the current State\n      var transitions;\n\n      // Events handled by the current State\n      var e;\n\n      // The action to take place upon receipt of a particular event\n      var action;\n\n      // Get the debug flags\n      var debugFlags = this.getDebugFlags();\n\n      // Allow slightly faster access to determine if debug is enabled\n      var debugEvents =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS;\n      var debugTransitions =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS;\n      var debugFunctions =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\n      var debugObjectNotFound =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND;\n\n      // Individual objects are listed.  Ensure target is a saved object\n      var friendly = this.getFriendlyName(event.getTarget());\n\n      if (debugEvents)\n      {\n        this.debug(this.getName() + \": Process event: \" + event.getType() +\n                   (friendly ? \" on \" + friendly : \"\"));\n      }\n\n      // Get the current state name\n      thisState = this.getState();\n\n      // Get the current State object\n      currentState = this.__states[thisState];\n\n      // Get a list of the transitions available from this state\n      transitions = currentState.transitions;\n\n      // Determine how to handle this event\n      e = currentState.getEvents()[event.getType()];\n\n      // See if we actually found this event type\n      if (!e)\n      {\n        if (debugEvents)\n        {\n          this.debug(this.getName() + \": Event '\" + event.getType() + \"'\" +\n                     \" not handled.  Ignoring.\");\n        }\n\n        return true;\n      }\n\n      // We might have found a constant (PREDICATE or BLOCKED) or an object\n      // with each property name being the friendly name of a saved object,\n      // and the property value being one of the constants (PREDICATE or\n      // BLOCKED).\n      if (typeof (e) == \"object\")\n      {\n        if (!friendly)\n        {\n          // Nope, it doesn't seem so.  Just discard it.\n          if (debugObjectNotFound)\n          {\n            this.debug(this.getName() +\n                       \": Could not find friendly name for '\" +\n                       event.getType() + \"' on '\" + event.getTarget() + \"'\");\n          }\n\n          return true;\n        }\n\n        action = e[friendly];\n\n        // Do we handle this event type for the widget from which it\n        // originated?\n        if (! action)\n        {\n          // Nope.\n          if (debugEvents)\n          {\n            this.debug(this.getName() + \": Event '\" + event.getType() + \"'\" +\n                       \" not handled for target \" + friendly + \".  Ignoring.\");\n          }\n\n          return true;\n        }\n      }\n      else\n      {\n        action = e;\n      }\n\n      switch(action)\n      {\n        case qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE:\n          // Process this event.  One of the transitions should handle it.\n          break;\n\n        case qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED:\n          // This event is blocked.  Enqueue it for later, and get outta here.\n          if (debugEvents)\n          {\n            this.debug(this.getName() + \": Event '\" + event.getType() + \"'\" +\n                       \" blocked.  Re-queuing.\");\n          }\n\n          this.__blockedEvents.unshift(event);\n          return false;\n\n        default:\n          // See if we've been given an explicit transition name\n          if (typeof (action) == \"string\")\n          {\n            // Yup!  Ensure that it exists\n            if (transitions[action])\n            {\n              // Yup.  Create a transitions object containing only this\n              // transition.\n              var trans = transitions[action];\n              transitions = {};\n              transitions[action] = trans;\n            }\n            else\n            {\n              throw new Error(\"Explicit transition \" +\n                              action + \" does not exist\");\n            }\n\n            break;\n          }\n      }\n\n      // We handle the event.  Try each transition in turn until we find one\n      // that is acceptable.\n      for (var t in transitions)\n      {\n        var trans = transitions[t];\n\n        // Does the predicate allow use of this transition?\n        switch(trans.getPredicate()(this, event))\n        {\n          case true:\n            // Transition is allowed.  Proceed.\n            break;\n\n          case false:\n            // Transition is not allowed.  Try next transition.\n            continue;\n\n          case null:\n            // Transition indicates not to try further transitions\n            return true;\n\n          default:\n            throw new Error(\"Transition \" + thisState + \":\" + t +\n                            \" returned a value other than \" +\n                            \"true, false, or null.\");\n        }\n\n        // We think we can transition to the next state.  Set next state.\n        nextState = trans.getNextState();\n\n        if (typeof (nextState) == \"string\")\n        {\n          // We found a literal state name.  Ensure it exists.\n          if (!nextState in this.__states)\n          {\n            throw new Error(\"Attempt to transition to nonexistent state \" +\n                            nextState);\n          }\n\n          // It exists.  Track it being the next state.\n          this.setNextState(nextState);\n        }\n        else\n        {\n          // If it's not a string, nextState must be a StateChange constant\n          switch(nextState)\n          {\n            case qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\n              // They want to remain in the same state.\n              nextState = thisState;\n              this.setNextState(nextState);\n              break;\n\n            case qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\n              // Switch to the state at the top of the state stack.\n              if (this.__savedStates.length == 0)\n              {\n                throw new Error(\"Attempt to transition to POP_STATE_STACK \" +\n                                \"while state stack is empty.\");\n              }\n\n              // Pop the state stack to retrieve the state to transition to\n              nextState = this.__savedStates.pop();\n              this.setNextState(nextState);\n              break;\n\n            case qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\n              // Terminate fsm\n              this.__bTerminated = true;\n              this.setNextState(null);\n              break;\n\n            default:\n              throw new Error(\"Internal error: invalid nextState\");\n          }\n        }\n\n        // Run the actionsBeforeOntransition actions for this transition\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState + \"#\" + t +\n                     \"#autoActionsBeforeOntransition\");\n        }\n\n        trans.getAutoActionsBeforeOntransition()(this);\n\n        // Run the 'ontransition' function\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState + \"#\" + t +\n                     \"#ontransition\");\n        }\n\n        trans.getOntransition()(this, event);\n\n        // Run the autoActionsAfterOntransition actions for this transition\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState + \"#\" + t +\n                     \"#autoActionsAfterOntransition\");\n        }\n\n        trans.getAutoActionsAfterOntransition()(this);\n\n        // Run the autoActionsBeforeOnexit actions for the old state\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState +\n                     \"#autoActionsBeforeOnexit\");\n        }\n\n        currentState.getAutoActionsBeforeOnexit()(this);\n\n        // Run the exit function for the old state\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState + \"#exit\");\n        }\n\n        currentState.getOnexit()(this, event);\n\n        // Run the autoActionsAfterOnexit actions for the old state\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState +\n                     \"#autoActionsAfterOnexit\");\n        }\n\n        currentState.getAutoActionsAfterOnexit()(this);\n\n        // If this state has been replaced and we're supposed to dispose it...\n        if (currentState._bNeedDispose)\n        {\n          // ... then dispose it now that it's no longer in use\n          currentState.dispose();\n        }\n\n        // It the fsm has terminated, stop right here\n        if (this.__bTerminated)\n        {\n          if (debugFunctions)\n          {\n            this.debug(this.getName() + \"#\" + \"TERMINATED\");\n          }\n          this.fireDataEvent(\"terminated\", thisState);\n          return true;\n        }\n\n        // Reset currentState to the new state object\n        currentState = this.__states[this.getNextState()];\n\n        // set previousState and state, and clear nextState, for transition\n        this.setPreviousState(thisState);\n        this.setState(this.getNextState());\n        this.setNextState(null);\n        prevState = thisState;\n        thisState = nextState;\n        nextState = undefined;\n\n        // Run the autoActionsBeforeOnentry actions for the new state\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState +\n                     \"#autoActionsBeforeOnentry\");\n        }\n\n        currentState.getAutoActionsBeforeOnentry()(this);\n\n        // Run the entry function for the new state, if one is specified\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState + \"#entry\");\n        }\n\n        currentState.getOnentry()(this, event);\n\n        // Run the autoActionsAfterOnentry actions for the new state\n        if (debugFunctions)\n        {\n          this.debug(this.getName() + \"#\" + thisState +\n                     \"#autoActionsAfterOnentry\");\n        }\n\n        currentState.getAutoActionsAfterOnentry()(this);\n\n        // Add any blocked events back onto the pending event queue\n        for (var i=0; i<this.__blockedEvents.length; i++)\n        {\n          e = this.__blockedEvents.pop();\n          this.__eventQueue.unshift(e);\n        }\n\n        if (debugTransitions)\n        {\n          this.debug(this.getName() + \"#\" + prevState + \" => \" +\n                     this.getName() + \"#\" + thisState);\n        }\n\n        // See ya!\n        return true;\n      }\n\n      if (debugTransitions)\n      {\n        this.debug(this.getName() +\n                   \"#\" + thisState + \": event '\" +\n                   event.getType() + \"'\" +\n                   \": no transition found.  No state change.\");\n      }\n\n      return true;\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._disposeArray(\"__eventQueue\");\n    this._disposeArray(\"__blockedEvents\");\n    this.__savedStates = this.__states = null;\n  }\n});\n"
  ]
}