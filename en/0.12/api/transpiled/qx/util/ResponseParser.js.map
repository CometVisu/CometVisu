{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ResponseParser.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "parser",
    "undefined",
    "setParser",
    "statics",
    "PARSER",
    "json",
    "lang",
    "Json",
    "parse",
    "xml",
    "Document",
    "fromString",
    "members",
    "__parser",
    "response",
    "contentType",
    "_getParser",
    "call",
    "util",
    "ResponseParser",
    "contentTypeOrig",
    "contentTypeNormalized",
    "replace",
    "test"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,wBAApB,EACA;AAEE;AACF;AACA;AACEC,IAAAA,SAAS,EAAE,mBAASC,MAAT,EAAiB;AAC1B,UAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxB,aAAKC,SAAL,CAAeF,MAAf;AACD;AACF,KATH;AAWEG,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAEX,EAAE,CAACY,IAAH,CAAQC,IAAR,CAAaC,KADb;AAENC,QAAAA,GAAG,EAAEf,EAAE,CAACe,GAAH,CAAOC,QAAP,CAAgBC;AAFf;AAPV,KAZF;AAyBEC,IAAAA,OAAO,EACP;AACEC,MAAAA,SAAQ,EAAE,IADZ;;AAGE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIL,MAAAA,KAAK,EAAE,eAASM,QAAT,EAAmBC,WAAnB,EAAgC;AACrC,YAAIf,MAAM,GAAG,KAAKgB,UAAL,CAAgBD,WAAhB,CAAb;;AAEA,YAAI,OAAOf,MAAP,KAAkB,UAAtB,EAAkC;AAChC,cAAIc,QAAQ,KAAK,EAAjB,EAAqB;AACnB,mBAAOd,MAAM,CAACiB,IAAP,CAAY,IAAZ,EAAkBH,QAAlB,CAAP;AACD;AACF;;AAED,eAAOA,QAAP;AACD,OArBH;;AAwBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIZ,MAAAA,SAAS,EAAE,mBAASF,MAAT,EAAiB;AAC1B;AACA,YAAI,OAAON,EAAE,CAACwB,IAAH,CAAQC,cAAR,CAAuBf,MAAvB,CAA8BJ,MAA9B,CAAP,KAAiD,UAArD,EAAiE;AAC/D,iBAAO,KAAKa,SAAL,GAAgBnB,EAAE,CAACwB,IAAH,CAAQC,cAAR,CAAuBf,MAAvB,CAA8BJ,MAA9B,CAAvB;AACD,SAJyB,CAM1B;;;AAKA,eAAO,KAAKa,SAAL,GAAgBb,MAAvB;AACD,OA/DH;;AAkEE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIgB,MAAAA,UAAU,EAAE,oBAASD,WAAT,EAAsB;AAChC,YAAIf,MAAM,GAAG,KAAKa,SAAlB;AAAA,YACIO,eAAe,GAAG,EADtB;AAAA,YAEIC,qBAAqB,GAAG,EAF5B,CADgC,CAKhC;;AACA,YAAIrB,MAAJ,EAAY;AACV,iBAAOA,MAAP;AACD,SAR+B,CAUhC;;;AAEAoB,QAAAA,eAAe,GAAGL,WAAW,IAAI,EAAjC,CAZgC,CAchC;;AACAM,QAAAA,qBAAqB,GAAGD,eAAe,CAACE,OAAhB,CAAwB,MAAxB,EAAgC,EAAhC,CAAxB;;AAEA,YAAK,gCAAD,CAAmCC,IAAnC,CAAwCF,qBAAxC,CAAJ,EAAoE;AAClErB,UAAAA,MAAM,GAAGN,EAAE,CAACwB,IAAH,CAAQC,cAAR,CAAuBf,MAAvB,CAA8BC,IAAvC;AACD;;AAED,YAAK,oBAAD,CAAuBkB,IAAvB,CAA4BF,qBAA5B,CAAJ,EAAwD;AACtDrB,UAAAA,MAAM,GAAGN,EAAE,CAACwB,IAAH,CAAQC,cAAR,CAAuBf,MAAvB,CAA8BK,GAAvC;AACD,SAvB+B,CAyBhC;;;AACA,YAAK,sBAAD,CAAyBc,IAAzB,CAA8BH,eAA9B,CAAJ,EAAoD;AAClDpB,UAAAA,MAAM,GAAGN,EAAE,CAACwB,IAAH,CAAQC,cAAR,CAAuBf,MAAvB,CAA8BK,GAAvC;AACD;;AAED,eAAOT,MAAP;AACD;AA/GH;AA1BF,GADA;AAzBAN,EAAAA,EAAE,CAACwB,IAAH,CAAQC,cAAR,CAAuBtB,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Parsers for parsing response strings (especially for XHR).\n *\n * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\n *\n * @require(qx.util.ResponseParser#parse)\n */\nqx.Bootstrap.define(\"qx.util.ResponseParser\",\n{\n\n  /**\n   * @param parser {String|Function} See {@link #setParser}.\n   */\n  construct: function(parser) {\n    if (parser !== undefined) {\n      this.setParser(parser);\n    }\n  },\n\n  statics:\n  {\n    /**\n     * @type {Map} Map of parser functions. Parsers defined here can be\n     * referenced symbolically, e.g. with {@link #setParser}.\n     *\n     * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\n     */\n    PARSER: {\n      json: qx.lang.Json.parse,\n      xml: qx.xml.Document.fromString\n    }\n  },\n\n  members :\n  {\n    __parser: null,\n\n    /**\n     * Returns given response parsed with parser\n     * determined by {@link #_getParser}.\n     *\n     * @param response {String} response (e.g JSON/XML string)\n     * @param contentType {String} contentType (e.g. 'application/json')\n     * @return {String|Object} The parsed response of the request.\n     */\n    parse: function(response, contentType) {\n      var parser = this._getParser(contentType);\n\n      if (typeof parser === \"function\") {\n        if (response !== \"\") {\n          return parser.call(this, response);\n        }\n      }\n\n      return response;\n    },\n\n\n    /**\n     * Set parser used to parse response once request has\n     * completed successfully.\n     *\n     * Usually, the parser is correctly inferred from the\n     * content type of the response. This method allows to force the\n     * parser being used, e.g. if the content type returned from\n     * the backend is wrong or the response needs special parsing.\n     *\n     * Parser most typically used can be referenced symbolically.\n     * To cover edge cases, a function can be given. When parsing\n     * the response, this function is called with the raw response as\n     * first argument.\n     *\n     * @param parser {String|Function}\n     *\n     * Can be:\n     *\n     * <ul>\n     *   <li>A parser defined in {@link qx.util.ResponseParser#PARSER},\n     *       referenced by string.</li>\n     *   <li>The function to invoke.\n     *       Receives the raw response as argument.</li>\n     * </ul>\n     *\n     * @return {Function} The parser function\n     */\n    setParser: function(parser) {\n      // Symbolically given known parser\n      if (typeof qx.util.ResponseParser.PARSER[parser] === \"function\") {\n        return this.__parser = qx.util.ResponseParser.PARSER[parser];\n      }\n\n      // If parser is not a symbol, it must be a function\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertFunction(parser);\n      }\n\n      return this.__parser = parser;\n    },\n\n\n    /**\n     * Gets the parser.\n     *\n     * If not defined explicitly using {@link #setParser},\n     * the parser is inferred from the content type.\n     *\n     * Override this method to extend the list of content types\n     * being handled.\n     *\n     * @param contentType {String}\n     * @return {Function|null} The parser function or <code>null</code> if the\n     * content type is undetermined.\n     *\n     */\n    _getParser: function(contentType) {\n      var parser = this.__parser,\n          contentTypeOrig = \"\",\n          contentTypeNormalized = \"\";\n\n      // Use user-provided parser, if any\n      if (parser) {\n        return parser;\n      }\n\n      // See http://restpatterns.org/Glossary/MIME_Type\n\n      contentTypeOrig = contentType || \"\";\n\n      // Ignore parameters (e.g. the character set)\n      contentTypeNormalized = contentTypeOrig.replace(/;.*$/, \"\");\n\n      if ((/^application\\/(\\w|\\.)*\\+?json$/).test(contentTypeNormalized)) {\n        parser = qx.util.ResponseParser.PARSER.json;\n      }\n\n      if ((/^application\\/xml$/).test(contentTypeNormalized)) {\n        parser = qx.util.ResponseParser.PARSER.xml;\n      }\n\n      // Deprecated\n      if ((/[^\\/]+\\/[^\\+]+\\+xml$/).test(contentTypeOrig)) {\n        parser = qx.util.ResponseParser.PARSER.xml;\n      }\n\n      return parser;\n    }\n  }\n});\n\n"
  ]
}