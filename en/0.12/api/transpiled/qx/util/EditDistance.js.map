{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/EditDistance.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "OPERATION_DELETE",
    "OPERATION_INSERT",
    "OPERATION_REPLACE",
    "__computeLevenshteinDistance",
    "dataA",
    "dataB",
    "distance",
    "posA",
    "posB",
    "cost",
    "length",
    "undefined",
    "Math",
    "min",
    "__computeEditOperations",
    "operations",
    "i",
    "push",
    "operation",
    "pos",
    "old",
    "value",
    "getEditOperations",
    "util",
    "EditDistance"
  ],
  "mappings": "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",
  "sourcesContent": [
    "\n\n/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Class to implement different edit distance ideas.\n *\n * <a href=\"http://en.wikipedia.org/wiki/Edit_distance\">Edit distance on Wikipedia</a>\n * <a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance on Wikipedia</a>\n */\nqx.Class.define(\"qx.util.EditDistance\",\n{\n  statics :\n  {\n    OPERATION_DELETE : 1,\n    OPERATION_INSERT : 2,\n    OPERATION_REPLACE : 3,\n\n\n    /**\n     * Returns a distant matrix following a concept\n     * named Levenshtein distance for two data structures\n     *\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Integer[][]} outgoing matrix\n     */\n    __computeLevenshteinDistance : function(dataA, dataB)\n    {\n      // distance is dataA table with dataA.length+1 rows and dataB.length+1 columns\n      var distance = [];\n\n      // posA and posB are used to iterate over str1 and str2\n      var posA, posB, cost;\n\n      for (posA=0; posA<=dataA.length; posA++)\n      {\n        distance[posA] = [];\n        distance[posA][0] = posA;\n      }\n\n      for (posB=1; posB<=dataB.length; posB++) {\n        distance[0][posB] = posB;\n      }\n\n      for (posA=1; posA<=dataA.length; posA++)\n      {\n        for (posB=1; posB<=dataB.length; posB++)\n        {\n          cost = dataA[posA-1] === dataB[posB-1] ? 0 : 1;\n\n          if (distance[posA] === undefined) {\n            distance[posA] = [];\n          }\n\n          distance[posA][posB] = Math.min(\n            distance[posA-1][posB  ] + 1,     // deletion\n            distance[posA  ][posB-1] + 1,     // insertion\n            distance[posA-1][posB-1] + cost   // substitution\n          );\n        }\n      }\n\n      return distance;\n    },\n\n\n    /**\n     * Computes the operations needed to transform dataA to dataB.\n     *\n     * @param distance {Integer[][]} Precomputed matrix for the data fields\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Map[]} Array of maps describing the operations needed\n     */\n    __computeEditOperations : function(distance, dataA, dataB)\n    {\n      var operations = [];\n      var posA = dataA.length;\n      var posB = dataB.length;\n\n      if (posA===0)\n      {\n        // insert from begin to end\n        // reverted order than in all other cases for optimal performance\n        for (var i=0; i<posB; i++) {\n          operations.push({ operation : this.OPERATION_INSERT, pos : i, old : null, value : dataB[i] });\n        }\n\n        return operations;\n      }\n\n      if (posB===0)\n      {\n        // remove from end to begin\n        for (var i=posA-1; i>=0; i--) {\n          operations.push({ operation : this.OPERATION_DELETE, pos : i, old : dataA[i], value : null });\n        }\n\n        return operations;\n      }\n\n      while(posA !== 0 || posB !== 0)\n      {\n        if (posA != 0 && distance[posA][posB] == distance[posA-1][posB] + 1)\n        {\n          operations.push({ operation : this.OPERATION_DELETE, pos : posA-1, old : dataA[posA-1], value : null });\n\n          posA-=1;\n        }\n        else if (posB != 0 && distance[posA][posB] == distance[posA][posB-1] + 1)\n        {\n          operations.push({ operation : this.OPERATION_INSERT, pos : posA, old : null, value : dataB[posB-1] });\n\n          posB-=1;\n        }\n        else\n        {\n          if (dataA[posA-1]!==dataB[posB-1])\n          {\n            operations.push({ operation : this.OPERATION_REPLACE, pos : posA-1, old : dataA[posA-1], value : dataB[posB-1] });\n          }\n\n          posA-=1;\n          posB-=1;\n        }\n      }\n\n      return operations;\n    },\n\n\n    /**\n     * Returns the operations needed to transform dataA to dataB.\n     *\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Map[]} Array of maps describing the operations needed\n     */\n    getEditOperations : function(dataA, dataB)\n    {\n      var distance = this.__computeLevenshteinDistance(dataA, dataB);\n      var operations = this.__computeEditOperations(distance, dataA, dataB);\n\n      return operations;\n    }\n  }\n});\n"
  ]
}