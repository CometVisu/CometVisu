{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/ColorUtil.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "REGEXP",
    "hexShort",
    "hexLong",
    "hex3",
    "hex6",
    "rgb",
    "rgba",
    "SYSTEM",
    "activeborder",
    "activecaption",
    "appworkspace",
    "background",
    "buttonface",
    "buttonhighlight",
    "buttonshadow",
    "buttontext",
    "captiontext",
    "graytext",
    "highlight",
    "highlighttext",
    "inactiveborder",
    "inactivecaption",
    "inactivecaptiontext",
    "infobackground",
    "infotext",
    "menu",
    "menutext",
    "scrollbar",
    "threeddarkshadow",
    "threedface",
    "threedhighlight",
    "threedlightshadow",
    "threedshadow",
    "window",
    "windowframe",
    "windowtext",
    "NAMED",
    "black",
    "silver",
    "gray",
    "white",
    "maroon",
    "red",
    "purple",
    "fuchsia",
    "green",
    "lime",
    "olive",
    "yellow",
    "navy",
    "blue",
    "teal",
    "aqua",
    "transparent",
    "magenta",
    "orange",
    "brown",
    "isNamedColor",
    "value",
    "undefined",
    "isSystemColor",
    "supportsThemes",
    "Class",
    "isDefined",
    "isThemedColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "isDynamic",
    "stringToRgb",
    "str",
    "resolveDynamic",
    "cssStringToRgb",
    "color",
    "concat",
    "Error",
    "isRgbaString",
    "__rgbaStringToRgb",
    "isRgbString",
    "__rgbStringToRgb",
    "ishexShortString",
    "__hexShortStringToRgb",
    "ishexLongString",
    "__hexLongStringToRgb",
    "length",
    "pop",
    "stringToRgbString",
    "rgbToRgbString",
    "map",
    "v",
    "Math",
    "round",
    "join",
    "rgbToHexString",
    "lang",
    "String",
    "pad",
    "toString",
    "toUpperCase",
    "isValidPropertyValue",
    "isCssString",
    "test",
    "isHex3String",
    "isHex6String",
    "parseInt",
    "RegExp",
    "$1",
    "$2",
    "$3",
    "alpha",
    "parseFloat",
    "$4",
    "__hex3StringToRgb",
    "__hex6StringToRgb",
    "$5",
    "$6",
    "hex3StringToRgb",
    "hex3StringToHex6String",
    "hex6StringToRgb",
    "hexStringToRgb",
    "rgbToHsb",
    "hue",
    "saturation",
    "brightness",
    "cmax",
    "cmin",
    "redc",
    "greenc",
    "bluec",
    "hsbToRgb",
    "hsb",
    "i",
    "f",
    "p",
    "r",
    "t",
    "tov",
    "floor",
    "rgbToHsl",
    "g",
    "b",
    "a",
    "max",
    "n",
    "min",
    "abs",
    "h",
    "hslToRgb",
    "hsl",
    "s",
    "l",
    "k",
    "randomColor",
    "random",
    "__tuner",
    "tuneMap",
    "tuner",
    "hue_tuner",
    "key",
    "forEach",
    "scale",
    "scaleMap",
    "adjust",
    "adjustMap",
    "offset",
    "luminance",
    "lum",
    "c",
    "pow",
    "contrast",
    "back",
    "front",
    "bl",
    "fl",
    "util",
    "ColorUtil"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Christian Hagendorn (cs)\n\n************************************************************************ */\n\n/**\n * Methods to convert colors between different color spaces.\n *\n * @ignore(qx.theme.*)\n * @ignore(qx.Class)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.util.ColorUtil\",\n{\n  statics :\n  {\n    /**\n     * Regular expressions for color strings\n     */\n    REGEXP :\n    {\n      hexShort : /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?$/,\n      hexLong : /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?$/,\n      hex3 : /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\n      hex6 : /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\n      rgb : /^rgb\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*\\)$/,\n      rgba : /^rgba\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,2}[0-9]*)\\s*\\)$/\n    },\n\n\n    /**\n     * CSS3 system color names.\n     */\n    SYSTEM :\n    {\n      activeborder        : true,\n      activecaption       : true,\n      appworkspace        : true,\n      background          : true,\n      buttonface          : true,\n      buttonhighlight     : true,\n      buttonshadow        : true,\n      buttontext          : true,\n      captiontext         : true,\n      graytext            : true,\n      highlight           : true,\n      highlighttext       : true,\n      inactiveborder      : true,\n      inactivecaption     : true,\n      inactivecaptiontext : true,\n      infobackground      : true,\n      infotext            : true,\n      menu                : true,\n      menutext            : true,\n      scrollbar           : true,\n      threeddarkshadow    : true,\n      threedface          : true,\n      threedhighlight     : true,\n      threedlightshadow   : true,\n      threedshadow        : true,\n      window              : true,\n      windowframe         : true,\n      windowtext          : true\n    },\n\n\n    /**\n     * Named colors, only the 16 basic colors plus the following ones:\n     * transparent, grey, magenta, orange and brown\n     */\n    NAMED :\n    {\n      black       : [ 0, 0, 0 ],\n      silver      : [ 192, 192, 192 ],\n      gray        : [ 128, 128, 128 ],\n      white       : [ 255, 255, 255 ],\n      maroon      : [ 128, 0, 0 ],\n      red         : [ 255, 0, 0 ],\n      purple      : [ 128, 0, 128 ],\n      fuchsia     : [ 255, 0, 255 ],\n      green       : [ 0, 128, 0 ],\n      lime        : [ 0, 255, 0 ],\n      olive       : [ 128, 128, 0 ],\n      yellow      : [ 255, 255, 0 ],\n      navy        : [ 0, 0, 128 ],\n      blue        : [ 0, 0, 255 ],\n      teal        : [ 0, 128, 128 ],\n      aqua        : [ 0, 255, 255 ],\n\n      // Additional values\n      transparent : [ -1, -1, -1 ],\n      magenta     : [ 255, 0, 255 ],   // alias for fuchsia\n      orange      : [ 255, 165, 0 ],\n      brown       : [ 165, 42, 42 ]\n    },\n\n\n    /**\n     * Whether the incoming value is a named color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a named color\n     */\n    isNamedColor : function(value) {\n      return this.NAMED[value] !== undefined;\n    },\n\n\n    /**\n     * Whether the incoming value is a system color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a system color\n     */\n    isSystemColor : function(value) {\n      return this.SYSTEM[value] !== undefined;\n    },\n\n\n    /**\n     * Whether the color theme manager is loaded. Generally\n     * part of the GUI of qooxdoo.\n     *\n     * @return {Boolean} <code>true</code> when color theme support is ready.\n     **/\n    supportsThemes : function() {\n      if (qx.Class) {\n        return qx.Class.isDefined(\"qx.theme.manager.Color\");\n      }\n      return false;\n    },\n\n\n    /**\n     * Whether the incoming value is a themed color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a themed color\n     */\n    isThemedColor : function(value)\n    {\n      if (!this.supportsThemes()) {\n        return false;\n      }\n\n      if (qx.theme && qx.theme.manager && qx.theme.manager.Color) {\n        return qx.theme.manager.Color.getInstance().isDynamic(value);\n      }\n      return false;\n    },\n\n\n    /**\n     * Try to convert an incoming string to an RGBA array.\n     * Supports themed, named and system colors, but also RGBA strings,\n     * hex[3468] values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue and optional alpha on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgb : function(str)\n    {\n      if (this.supportsThemes() && this.isThemedColor(str)) {\n        str = qx.theme.manager.Color.getInstance().resolveDynamic(str);\n      }\n      return this.cssStringToRgb(str);\n    },\n\n    /**\n     * Try to convert an incoming string to an RGB array with optional alpha.\n     * Support named colors, RGB strings, RGBA strings, hex[3468] values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    cssStringToRgb : function(str)\n    {\n      var color;\n      if (this.isNamedColor(str))\n      {\n        color = this.NAMED[str].concat();\n      }\n      else if (this.isSystemColor(str))\n      {\n          throw new Error(\"Could not convert system colors to RGB: \" + str);\n      }\n      else if (this.isRgbaString(str)) {\n        color = this.__rgbaStringToRgb(str);\n      }\n      else if (this.isRgbString(str))\n      {\n        color = this.__rgbStringToRgb();\n      }\n      else if (this.ishexShortString(str))\n      {\n        color = this.__hexShortStringToRgb();\n      }\n      else if (this.ishexLongString(str))\n      {\n        color = this.__hexLongStringToRgb();\n      }\n      if (color) {\n        // don't mention alpha if the color is opaque\n        if (color.length === 3 && color[3] == 1) {\n          color.pop();\n        }\n        return color;\n      }\n      throw new Error(\"Could not parse color: \" + str);\n    },\n\n\n    /**\n     * Try to convert an incoming string to an RGB string, which can be used\n     * for all color properties.\n     * Supports themed, named and system colors, but also RGB strings,\n     * hexShort and hexLong values.\n     *\n     * @param str {String} any string\n     * @return {String} a RGB string\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgbString : function(str) {\n      return this.rgbToRgbString(this.stringToRgb(str));\n    },\n\n\n    /**\n     * Converts a RGB array to an RGB string\n     *\n     * @param rgb {Array} an array with red, green and blue values and optionally\n     * an alpha value\n     * @return {String} an RGB string\n     */\n    rgbToRgbString : function(rgb) {\n      return \"rgb\" + (rgb.length === 4 ? \"a\" : \"\") +  \"(\" + rgb.map(function(v){return Math.round(v*1000)/1000 }).join(\",\") + \")\";\n    },\n\n\n    /**\n     * Converts a RGB array to a hex[68] string\n     *\n     * @param rgb {Array} an array with red, green, blue and optional alpha\n     * @return {String} a hex[68] string (#xxxxxx)\n     */\n    rgbToHexString : function(rgb)\n    {\n      return (\n        \"#\" +\n        qx.lang.String.pad(rgb[0].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[1].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[2].toString(16).toUpperCase(), 2) +\n        ( rgb.length === 4 && rgb[3] !== 1\n          ? qx.lang.String.pad(\n              Math.round(rgb[3]*255).toString(16).toUpperCase(),2\n            )\n          : \"\"\n        )\n      );\n    },\n\n\n    /**\n     * Detects if a string is a valid qooxdoo color\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid qooxdoo color\n     */\n    isValidPropertyValue : function(str) {\n      return (\n        this.isThemedColor(str) ||\n        this.isNamedColor(str) ||\n        this.ishexShortString(str) ||\n        this.ishexLongString(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str));\n    },\n\n\n    /**\n     * Detects if a string is a valid CSS color string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid CSS color string\n     */\n    isCssString : function(str) {\n      return (\n        this.isSystemColor(str) ||\n        this.isNamedColor(str) ||\n        this.ishexShortString(str) ||\n        this.ishexLongString(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str));\n    },\n\n    /**\n     * Detects if a string is a valid hexShort string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hexShort string\n     */\n    ishexShortString : function(str) {\n      return this.REGEXP.hexShort.test(str);\n    },\n    /**\n     * Detects if a string is a valid hex3 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex3 string\n     */\n    isHex3String : function(str) {\n      return this.REGEXP.hex3.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid hex6 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex6 string\n     */\n    isHex6String : function(str) {\n      return this.REGEXP.hex6.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid hex6/8 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex8 string\n     */\n    ishexLongString : function(str) {\n      return this.REGEXP.hexLong.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid RGB string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGB string\n     */\n    isRgbString : function(str) {\n      return this.REGEXP.rgb.test(str);\n    },\n\n\n    /**\n     * Detects if a string is a valid RGBA string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGBA string\n     */\n    isRgbaString : function(str) {\n      return this.REGEXP.rgba.test(str);\n    },\n\n\n   /**\n    * Converts a regexp object match of a rgb string to an RGBA array.\n    *\n    * @return {Array} an array with red, green, blue\n    */\n    __rgbStringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n\n      return [red, green, blue];\n    },\n\n    /**\n    * Converts a regexp object match of a rgba string to an RGB array.\n    *\n    * @return {Array} an array with red, green, blue\n    */\n    __rgbaStringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n      var alpha = parseFloat(RegExp.$4, 10);\n\n      if (red === 0 && green === 0 & blue === 0 && alpha === 0) {\n        // this is the (pre-alpha) representation of transparency\n        // in qooxdoo\n        return [-1, -1, -1];\n      }\n\n      return alpha == 1 ? [red,green,blue] : [red, green, blue, alpha];\n    },\n\n\n\n    /**\n     * Converts a regexp object match of a hexShort string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hexShortStringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n      var alpha = Math.round(parseInt(( RegExp.$4 || 'f' ), 16) / 15*1000)/1000;\n      return alpha == 1 ? [red,green,blue] : [red, green, blue, alpha];\n    },\n\n\n    /**\n     * Converts a regexp object match of a hex3 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex3StringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n\n      return [red, green, blue];\n    },\n\n\n    /**\n     * Converts a regexp object match of a hex6 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex6StringToRgb : function()\n    {\n      var red = (parseInt(RegExp.$1, 16) * 16) + parseInt(RegExp.$2, 16);\n      var green = (parseInt(RegExp.$3, 16) * 16) + parseInt(RegExp.$4, 16);\n      var blue = (parseInt(RegExp.$5, 16) * 16) + parseInt(RegExp.$6, 16);\n\n      return [red, green, blue];\n    },\n\n\n    /**\n     * Converts a regexp object match of a hexLong string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hexLongStringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 16);\n      var green = parseInt(RegExp.$2, 16);\n      var blue = parseInt(RegExp.$3, 16);\n      var alpha = Math.round(parseInt((RegExp.$4 || 'ff'), 16) / 255 * 1000)/1000;\n      return alpha == 1 ? [red,green,blue] : [red, green, blue, alpha];\n    },\n\n\n    /**\n     * Converts a hex3 string to an RGB array\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex3StringToRgb : function(value)\n    {\n      if (this.isHex3String(value)) {\n        return this.__hex3StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex3 value: \" + value);\n    },\n\n\n    /**\n     * Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {String} The hex6 (#xxxxxx) string or the passed value when the\n     *   passed value is not an hex3 (#xxx) value.\n     */\n    hex3StringToHex6String : function(value)\n    {\n      if (this.isHex3String(value)) {\n        return this.rgbToHexString(this.hex3StringToRgb(value));\n      }\n      return value;\n    },\n\n\n    /**\n     * Converts a hex6 string to an RGB array\n     *\n     * @param value {String} a hex6 (#xxxxxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex6StringToRgb : function(value)\n    {\n      if (this.isHex6String(value)) {\n        return this.__hex6StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex6 value: \" + value);\n    },\n\n\n    /**\n     * Converts a hex string to an RGB array\n     *\n     * @param value {String} a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string\n     * @return {Array} an array with red, green, blue and alpha\n     */\n    hexStringToRgb : function(value)\n    {\n      if (this.ishexShortString(value)) {\n        return this.__hexShortStringToRgb(value);\n      }\n\n      if (this.ishexLongString(value)) {\n        return this.__hexLongStringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex value: \" + value);\n    },\n\n\n    /**\n     * Convert RGB colors to HSB/HSV\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and brightness/value\n     */\n    rgbToHsb : function(rgb)\n    {\n      var hue, saturation, brightness;\n\n      var red = rgb[0];\n      var green = rgb[1];\n      var blue = rgb[2];\n\n      var cmax = (red > green) ? red : green;\n\n      if (blue > cmax) {\n        cmax = blue;\n      }\n\n      var cmin = (red < green) ? red : green;\n\n      if (blue < cmin) {\n        cmin = blue;\n      }\n\n      brightness = cmax / 255.0;\n\n      if (cmax != 0) {\n        saturation = (cmax - cmin) / cmax;\n      } else {\n        saturation = 0;\n      }\n\n      if (saturation == 0)\n      {\n        hue = 0;\n      }\n      else\n      {\n        var redc = (cmax - red) / (cmax - cmin);\n        var greenc = (cmax - green) / (cmax - cmin);\n        var bluec = (cmax - blue) / (cmax - cmin);\n\n        if (red == cmax) {\n          hue = bluec - greenc;\n        } else if (green == cmax) {\n          hue = 2.0 + redc - bluec;\n        } else {\n          hue = 4.0 + greenc - redc;\n        }\n\n        hue = hue / 6.0;\n\n        if (hue < 0) {\n          hue = hue + 1.0;\n        }\n      }\n\n      return [ Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100) ];\n    },\n\n\n    /**\n     * Convert HSB/HSV colors to RGB\n     *\n     * @param hsb {Number[]} an array with hue, saturation and brightness/value\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hsbToRgb : function(hsb)\n    {\n      var i, f, p, r, t;\n\n      var hue = hsb[0] / 360;\n      var saturation = hsb[1] / 100;\n      var brightness = hsb[2] / 100;\n\n      if (hue >= 1.0) {\n        hue %= 1.0;\n      }\n\n      if (saturation > 1.0) {\n        saturation = 1.0;\n      }\n\n      if (brightness > 1.0) {\n        brightness = 1.0;\n      }\n\n      var tov = Math.floor(255 * brightness);\n      var rgb = {};\n\n      if (saturation == 0.0)\n      {\n        rgb.red = rgb.green = rgb.blue = tov;\n      }\n      else\n      {\n        hue *= 6.0;\n\n        i = Math.floor(hue);\n\n        f = hue - i;\n\n        p = Math.floor(tov * (1.0 - saturation));\n        r = Math.floor(tov * (1.0 - (saturation * f)));\n        t = Math.floor(tov * (1.0 - (saturation * (1.0 - f))));\n\n        switch(i)\n        {\n          case 0:\n            rgb.red = tov;\n            rgb.green = t;\n            rgb.blue = p;\n            break;\n\n          case 1:\n            rgb.red = r;\n            rgb.green = tov;\n            rgb.blue = p;\n            break;\n\n          case 2:\n            rgb.red = p;\n            rgb.green = tov;\n            rgb.blue = t;\n            break;\n\n          case 3:\n            rgb.red = p;\n            rgb.green = r;\n            rgb.blue = tov;\n            break;\n\n          case 4:\n            rgb.red = t;\n            rgb.green = p;\n            rgb.blue = tov;\n            break;\n\n          case 5:\n            rgb.red = tov;\n            rgb.green = p;\n            rgb.blue = r;\n            break;\n        }\n      }\n\n      return [rgb.red, rgb.green, rgb.blue];\n    },\n\n    /**\n     * Convert RGB colors to HSL\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and lightness\n     */\n    rgbToHsl: function(rgb){\n      var r = rgb[0]/255;\n      var g = rgb[1]/255;\n      var b = rgb[2]/255;\n      // implementation from\n      // https://stackoverflow.com/questions/2348597/why-doesnt-this-javascript-rgb-to-hsl-code-work/54071699#54071699\n      var a = Math.max(r,g,b);\n      var n = a-Math.min(r,g,b);\n      var f = (1-Math.abs(a+a-n-1));\n      var h = n && ((a==r) ? (g-b)/n : ((a==g) ? 2+(b-r)/n : 4+(r-g)/n));\n      return [60*(h<0?h+6:h), 100 * (f ? n/f : 0), 100*(a+a-n)/2];\n    },\n    /**\n     * Convert HSL colors to RGB\n     *\n     * @param hsl {Number[]} an array with hue, saturation and lightness\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hslToRgb: function(hsl){\n      var h = hsl[0];\n      var s = hsl[1]/100;\n      var l = hsl[2]/100;\n      // implementation from\n      // https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex/54014428#54014428\n      var a = s*Math.min(l,1-l);\n      var f = function(n){\n        var k = (n+h/30)%12;\n        return l - a*Math.max(Math.min(k-3,9-k,1),-1);\n      };\n      return [f(0),f(8),f(4)].map(function(v){ return Math.round(v*2550)/10});\n    },\n    /**\n     * Creates a random color.\n     *\n     * @return {String} a valid qooxdoo/CSS rgb color string.\n     */\n    randomColor : function()\n    {\n      var r = Math.round(Math.random() * 255);\n      var g = Math.round(Math.random() * 255);\n      var b = Math.round(Math.random() * 255);\n\n      return this.rgbToRgbString([r, g, b]);\n    },\n\n    /**\n     * Tune a color string according to the tuneMap\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map}  as described above\n     * @param tuner {Function}  function\n     * @param hue_tuner {Function}  function\n     * @return {String} a valid CSS rgb color string.*\n     */\n    __tuner: function(color,tuneMap,tuner,hue_tuner){\n      var rgba = this.stringToRgb(color);\n      for (var key in tuneMap) {\n        if (tuneMap[key] == 0) {\n            continue;\n        }\n        switch (key) {\n          case 'red':\n            rgba[0] = tuner(rgba[0],tuneMap[key],255);\n            break;\n          case 'green':\n            rgba[1] = tuner(rgba[1],tuneMap[key],255);\n            break;\n          case 'blue':\n            rgba[2] = tuner(rgba[2],tuneMap[key],255);\n            break;\n          case 'alpha':\n            rgba[3] = tuner(rgba[3]||1,tuneMap[key],1);\n            break;\n          case 'hue':\n            if (hue_tuner){\n              var hsb = this.rgbToHsb(rgba);\n              hsb[0] = hue_tuner(hsb[0],tuneMap[key]);\n              var rgb = this.hsbToRgb(hsb);\n              rgb[3] = rgba[3];\n              rgba = rgb;\n            }\n            else {\n              throw new Error(\"Invalid key in map: \" + key);\n            }\n            break;\n          case 'saturation':\n            var hsb = this.rgbToHsb(rgba);\n            hsb[1] = tuner(hsb[1],tuneMap[key],100);\n            rgb = this.hsbToRgb(hsb);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          case 'brightness':\n            var hsb = this.rgbToHsb(rgba);\n            hsb[2] = tuner(hsb[2],tuneMap[key],100);\n            rgb = this.hsbToRgb(hsb);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          case 'lightness':\n            var hsl = this.rgbToHsl(rgba);\n            hsl[2] = tuner(hsl[2],tuneMap[key],100);\n            rgb = this.hslToRgb(hsl);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          default:\n            throw new Error(\"Invalid key in tune map: \" + key);\n        }\n      }\n      if (rgba.length === 4){\n          if ( rgba[3] === undefined || rgba[3] >= 1){\n            rgba.pop();\n          }\n          else if ( rgba[3] < 0){\n            rgba[3] = 0\n          }\n      }\n      [0,1,2].forEach(function(i){\n        if (rgba[i] < 0){\n          rgba[i] = 0;\n          return;\n        }\n        if (rgba[i] > 255){\n          rgba[i] = 255;\n          return;\n        }\n      });\n      return this.rgbToRgbString(rgba);\n    },\n    /**\n     * Scale\n     *\n\n     * Scale the given properties of the input color according to the\n     * configuration given in the `scaleMap`. Each key argument must point to a\n     * number between -100% and 100% (inclusive). This indicates how far the\n     * corresponding property should be moved from its original position\n     * towards the maximum (if the argument is positive) or the minimum (if the\n     * argument is negative). This means that, for example, `lightness: \"50%\"`\n     * will make all colors 50% closer to maximum lightness without making them\n     * fully white.\n     *\n     * Supported keys are:\n     * `red`, `green`, `blue`, `alpha`, `saturation`,\n     * `brightness`, `value`, `lightness`.\n     *\n     * @param color {String}  a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map}  as described above\n     * @return {String} a valid CSS rgb color string.\n     */\n    scale: function(color,scaleMap){\n      return this.__tuner(color,scaleMap,function(value,scale,max) {\n        if (value > max){\n          value = max;\n        }\n        if (scale > 0){\n          if (scale > 100){\n            scale = 100;\n          }\n          return value + (max - value) * scale / 100;\n        }\n        // scale < 0\n        if (scale < -100){\n          scale = -100;\n        }\n        return value + value * scale / 100;\n      });\n    },\n    /**\n     * Adjust\n     *\n     * Increases or decreases one or more properties of the input color\n     * by fixed amounts according to the configuration given in the\n     * `adjustMap`. The value of the corresponding key is added to the\n     * original value and the final result is adjusted to stay within legal\n     * bounds. Hue values can go full circle.a1\n     *\n     * Supported keys are:\n     * `red`, `green`, `blue`, `alpha`, `hue`, `saturation`, `brightness`,\n     * `lightness`\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map} as described above\n     * @return {String} a valid CSS rgb color string.\n     */\n    adjust: function(color,adjustMap){\n      return this.__tuner(color,adjustMap, function(value,offset,max) {\n        value += offset;\n        if (value > max){\n          return max;\n        }\n        if (value < 0){\n          return 0;\n        }\n        return value;\n      },\n      function(value,offset) {\n        value += offset;\n        while (value >= 360){\n          value -= 360;\n        }\n        while (value < 0){\n          value += 360;\n        }\n        return value;\n      });\n    },\n    /**\n     * RgbToLuminance\n     *\n     * Calculate the [luminance](https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests) of the given rgb color.\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @return {Number} luminance\n     */\n    luminance: function(color){\n      var rgb = this.stringToRgb(color);\n      var lum = function(i) {\n        var c = rgb[i] / 255;\n        return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n      }\n      return .2126 * lum(0) + .7152 * lum(1) + .0722 * lum(2);\n    },\n    /**\n     * contrast\n     *\n     * Calculate the contrast of two given rgb colors.\n     *\n     * @param back {String} a valid qooxdoo/CSS rgb color string\n     * @param front {String} a valid qooxdoo/CSS rgb color string\n     * @return {Number} contrast\n     */\n    contrast: function(back,front){\n        var bl = this.luminance(back) + .05;\n        var fl = this.luminance(front) + 0.5;\n        return Math.max(bl,fl) / Math.min(bl,fl);\n    }\n  }\n});\n"
  ]
}