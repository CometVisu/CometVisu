{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/placement/KeepAlignAxis.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "_moveToEdgeAndAlign",
    "util",
    "placement",
    "AbstractAxis",
    "_isInRange",
    "computeStart",
    "size",
    "target",
    "offsets",
    "areaSize",
    "position",
    "start",
    "range1End",
    "range2Start",
    "end",
    "Math",
    "max",
    "KeepAlignAxis"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,iCAApB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,mBAAmB,EAAGN,EAAE,CAACO,IAAH,CAAQC,SAAR,CAAkBC,YAAlB,CAA+BH,mBAdvD;;AAgBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACII,MAAAA,UAAU,EAAGV,EAAE,CAACO,IAAH,CAAQC,SAAR,CAAkBC,YAAlB,CAA+BC,UAzB9C;;AA2BE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,YAAY,EAAG,sBAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,QAAhC,EAA0CC,QAA1C,EACf;AACE,YAAIC,KAAK,GAAG,KAAKX,mBAAL,CAAyBM,IAAzB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDE,QAAhD,CAAZ;;AACA,YAAIE,SAAJ,EAAeC,WAAf;;AAEA,YAAI,KAAKT,UAAL,CAAgBO,KAAhB,EAAuBL,IAAvB,EAA6BG,QAA7B,CAAJ,EAA4C;AAC1C,iBAAOE,KAAP;AACD;;AAED,YAAID,QAAQ,IAAI,YAAZ,IAA4BA,QAAQ,IAAI,UAA5C,EACA;AACEE,UAAAA,SAAS,GAAGL,MAAM,CAACI,KAAP,GAAeH,OAAO,CAACM,GAAnC;AACAD,UAAAA,WAAW,GAAGN,MAAM,CAACO,GAAP,GAAaN,OAAO,CAACG,KAAnC;AACD,SAJD,MAMA;AACEC,UAAAA,SAAS,GAAGL,MAAM,CAACO,GAAP,GAAaN,OAAO,CAACM,GAAjC;AACAD,UAAAA,WAAW,GAAGN,MAAM,CAACI,KAAP,GAAeH,OAAO,CAACG,KAArC;AACD;;AAED,YAAIC,SAAS,GAAGH,QAAQ,GAAGI,WAA3B,EAAwC;AACtCF,UAAAA,KAAK,GAAGI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,SAAS,GAAGN,IAAxB,CAAR;AACD,SAFD,MAEO;AACLK,UAAAA,KAAK,GAAGE,WAAR;AACD;;AAED,eAAOF,KAAP;AACD;AAzEH;AAFF,GADA;AAxBAjB,EAAAA,EAAE,CAACO,IAAH,CAAQC,SAAR,CAAkBe,aAAlB,CAAgCpB,aAAhC,GAAgDA,aAAhD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Places the object to the target. If parts of the object are outside of the\n * range this class places the object at the best \"edge\", \"alignment\"\n * combination so that the overlap between object and range is maximized.\n */\nqx.Bootstrap.define(\"qx.util.placement.KeepAlignAxis\",\n{\n  statics :\n  {\n    /**\n     * Computes the start of the object by taking only the attachment and\n     * alignment into account. The object by be not fully visible.\n     *\n     * @param size {Integer} Size of the object to align\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>start</code> and <code>end</code>.\n     * @param offsets {Map} Map with all offsets on each side.\n     *   Comes with the keys <code>start</code> and <code>end</code>.\n     * @param position {String} Accepts the same values as the <code> position</code>\n     *   argument of {@link #computeStart}.\n     * @return {Integer} The computed start position of the object.\n     */\n    _moveToEdgeAndAlign : qx.util.placement.AbstractAxis._moveToEdgeAndAlign,\n\n    /**\n     * Whether the object specified by <code>start</code> and <code>size</code>\n     * is completely inside of the axis' range..\n     *\n     * @param start {Integer} Computed start position of the object\n     * @param size {Integer} Size of the object\n     * @param areaSize {Integer} The size of the axis\n     * @return {Boolean} Whether the object is inside of the axis' range\n     */\n    _isInRange : qx.util.placement.AbstractAxis._isInRange,\n\n    /**\n     * Computes the start of the object on the axis\n     *\n     * @param size {Integer} Size of the object to align\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>start</code> and <code>end</code>.\n     * @param offsets {Map} Map with all offsets on each side.\n     *   Comes with the keys <code>start</code> and <code>end</code>.\n     * @param areaSize {Integer} Size of the axis.\n     * @param position {String} Alignment of the object on the target. Valid values are\n     *   <ul>\n     *   <li><code>edge-start</code> The object is placed before the target</li>\n     *   <li><code>edge-end</code> The object is placed after the target</li>\n     *   <li><code>align-start</code>The start of the object is aligned with the start of the target</li>\n     *   <li><code>align-center</code>The center of the object is aligned with the center of the target</li>\n     *   <li><code>align-end</code>The end of the object is aligned with the end of the object</li>\n     *   </ul>\n     * @return {Integer} The computed start position of the object.\n     */\n    computeStart : function(size, target, offsets, areaSize, position)\n    {\n      var start = this._moveToEdgeAndAlign(size, target, offsets, position);\n      var range1End, range2Start;\n\n      if (this._isInRange(start, size, areaSize)) {\n        return start;\n      }\n\n      if (position == \"edge-start\" || position == \"edge-end\")\n      {\n        range1End = target.start - offsets.end;\n        range2Start = target.end + offsets.start;\n      }\n      else\n      {\n        range1End = target.end - offsets.end;\n        range2Start = target.start + offsets.start;\n      }\n\n      if (range1End > areaSize - range2Start) {\n        start = Math.max(0, range1End - size);\n      } else {\n        start = range2Start;\n      }\n\n      return start;\n    }\n  }\n});"
  ]
}