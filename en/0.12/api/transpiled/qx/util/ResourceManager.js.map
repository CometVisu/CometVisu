{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ResourceManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "statics",
    "__registry",
    "$$resources",
    "__urlPrefix",
    "members",
    "findHighResolutionSource",
    "lowResImgSrc",
    "factor",
    "pixelRatioCandidates",
    "parseFloat",
    "bom",
    "client",
    "Device",
    "getDevicePixelRatio",
    "toFixed",
    "i",
    "length",
    "hiResImgSrc",
    "k",
    "getHighResolutionSource",
    "source",
    "pixelRatio",
    "fileExtIndex",
    "lastIndexOf",
    "pixelRatioIdentifier",
    "candidate",
    "slice",
    "has",
    "getIds",
    "pathfragment",
    "registry",
    "keys",
    "filter",
    "key",
    "indexOf",
    "id",
    "getData",
    "getImageWidth",
    "size",
    "startsWith",
    "part",
    "split",
    "parseInt",
    "entry",
    "width",
    "Math",
    "ceil",
    "getImageHeight",
    "getImageFormat",
    "getCombinedFormat",
    "clippedtype",
    "isclipped",
    "constructor",
    "combId",
    "combImg",
    "toUri",
    "lib",
    "urlPrefix",
    "Environment",
    "get",
    "util",
    "LibraryManager",
    "getInstance",
    "toDataUri",
    "resid",
    "resentry",
    "combined",
    "uri",
    "resstruct",
    "isFontUri",
    "defer",
    "$$libraries",
    "resourceUri",
    "href",
    "baseElements",
    "document",
    "getElementsByTagName",
    "match",
    "window",
    "location",
    "protocol",
    "host",
    "url",
    "URL",
    "substring",
    "index",
    "ResourceManager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains information about images (size, format, clipping, ...) and\n * other resources like CSS files, local data, ...\n */\nqx.Class.define(\"qx.util.ResourceManager\",\n{\n  extend  : qx.core.Object,\n  type    : \"singleton\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Map} the shared image registry */\n    __registry : qx.$$resources || {},\n\n    /** @type {Map} prefix per library used in HTTPS mode for IE */\n    __urlPrefix : {}\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Detects whether there is a high-resolution image available.\n     * A high-resolution image is assumed to have the same file name as\n     * the parameter source, but with a pixelRatio identifier before the file\n     * extension, like \"@2x\".\n     * Medium Resolution: \"example.png\", high-resolution: \"example@2x.png\"\n     *\n     * @param lowResImgSrc {String} source of the low resolution image.\n     * @param factor {Number} Factor to find the right image. If not set calculated by getDevicePixelRatio()\n     * @return {String|Boolean} If a high-resolution image source.\n     */\n     findHighResolutionSource: function(lowResImgSrc, factor) {\n      var pixelRatioCandidates = [\"3\", \"2\", \"1.5\"];\n\n      // Calculate the optimal ratio, based on the rem scale factor of the application and the device pixel ratio.\n      if (!factor) {\n        factor = parseFloat(qx.bom.client.Device.getDevicePixelRatio().toFixed(2));\n      }\n      if (factor <= 1) {\n        return false;\n      }\n\n      var i = pixelRatioCandidates.length;\n      while (i > 0 && factor > pixelRatioCandidates[--i]) {}\n\n      var hiResImgSrc;\n      var k;\n\n      // Search for best img with a higher resolution.\n      for (k = i; k >= 0; k--) {\n        hiResImgSrc = this.getHighResolutionSource(lowResImgSrc, pixelRatioCandidates[k]);\n        if (hiResImgSrc) {\n          return hiResImgSrc;\n        }\n      }\n\n      // Search for best img with a lower resolution.\n      for (k = i + 1; k < pixelRatioCandidates.length; k++) {\n        hiResImgSrc = this.getHighResolutionSource(lowResImgSrc, pixelRatioCandidates[k]);\n        if (hiResImgSrc) {\n          return hiResImgSrc;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns the source name for the high-resolution image based on the passed\n     * parameters.\n     * @param source {String} the source of the medium resolution image.\n     * @param pixelRatio {Number} the pixel ratio of the high-resolution image.\n     * @return {String} the high-resolution source name or null if no source could be found.\n     */\n    getHighResolutionSource : function(source, pixelRatio) {\n      var fileExtIndex = source.lastIndexOf('.');\n      if (fileExtIndex > -1) {\n        var pixelRatioIdentifier = \"@\" + pixelRatio + \"x\";\n        var candidate = source.slice(0, fileExtIndex) + pixelRatioIdentifier + source.slice(fileExtIndex);\n\n        if(this.has(candidate)) {\n          return candidate;\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Get all known resource IDs.\n     *\n     * @param pathfragment{String|null|undefined} an optional path fragment to check against with id.indexOf(pathfragment)\n     * @return {Array|null} an array containing the IDs or null if the registry is not initialized\n     */\n    getIds : function(pathfragment) {\n      var registry = this.self(arguments).__registry;\n      if(!registry) {\n        return null;\n      }\n      return Object.keys(registry).filter(function(key){\n        return !pathfragment || key.indexOf(pathfragment) != -1;\n      });\n    },\n\n    /**\n     * Whether the registry has information about the given resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Boolean} <code>true</code> when the resource is known.\n     */\n    has : function(id) {\n      return !!this.self(arguments).__registry[id];\n    },\n\n\n    /**\n     * Get information about an resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Array} Registered data or <code>null</code>\n     */\n    getData : function(id) {\n      return this.self(arguments).__registry[id] || null;\n    },\n\n\n    /**\n     * Returns the width of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image width, maybe <code>null</code> when the width is unknown\n     */\n    getImageWidth : function(id)\n    {\n      var size;\n      if (id && id.startsWith(\"@\")) {\n        var part = id.split(\"/\");\n        size = parseInt(part[2],10);\n        if (size) {\n          id = part[0]+\"/\"+part[1];\n        }\n      }\n      var entry = this.self(arguments).__registry[id]; // [ width, height, codepoint ]\n      if (size && entry) {\n        var width = Math.ceil(size / entry[1] * entry[0]);\n        return width;\n      }\n      return entry ? entry[0] : null;\n    },\n\n\n    /**\n     * Returns the height of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image height, maybe <code>null</code> when the height is unknown\n     */\n    getImageHeight : function(id)\n    {\n      if (id && id.startsWith(\"@\")) {\n        var part = id.split(\"/\");\n        var size = parseInt(part[2],10);\n        if (size) {\n          return size;\n        }\n      }\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[1] : null;\n    },\n\n\n    /**\n     * Returns the format of the given resource ID,\n     * when it is not a known image <code>null</code>\n     * is returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} File format of the image\n     */\n    getImageFormat : function(id)\n    {\n      if (id && id.startsWith(\"@\")) {\n        return \"font\";\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[2] : null;\n    },\n\n    /**\n     * Returns the format of the combined image (png, gif, ...), if the given\n     * resource identifier is an image contained in one, or the empty string\n     * otherwise.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} The type of the combined image containing id\n     */\n    getCombinedFormat : function(id)\n    {\n      var clippedtype = \"\";\n      var entry = this.self(arguments).__registry[id];\n      var isclipped = entry && entry.length > 4 && typeof(entry[4]) == \"string\"\n        && this.constructor.__registry[entry[4]];\n      if (isclipped){\n        var combId  = entry[4];\n        var combImg = this.constructor.__registry[combId];\n        clippedtype = combImg[2];\n      }\n      return clippedtype;\n    },\n\n\n    /**\n     * Converts the given resource ID to a full qualified URI\n     *\n     * @param id {String} Resource ID\n     * @return {String} Resulting URI\n     */\n    toUri : function(id)\n    {\n      if (id == null) {\n        return id;\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      if (!entry) {\n        return id;\n      }\n\n      if (typeof entry === \"string\") {\n        var lib = entry;\n      }\n      else\n      {\n        var lib = entry[3];\n\n        // no lib reference\n        // may mean that the image has been registered dynamically\n        if (!lib) {\n          return id;\n        }\n      }\n\n      var urlPrefix = \"\";\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\") &&\n          qx.core.Environment.get(\"io.ssl\")) {\n        urlPrefix = this.self(arguments).__urlPrefix[lib];\n      }\n\n      return urlPrefix + qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\") + \"/\" + id;\n    },\n\n    /**\n     * Construct a data: URI for an image resource.\n     *\n     * Constructs a data: URI for a given resource id, if this resource is\n     * contained in a base64 combined image. If this is not the case (e.g.\n     * because the combined image has not been loaded yet), returns the direct\n     * URI to the image file itself.\n     *\n     * @param resid {String} resource id of the image\n     * @return {String} \"data:\" or \"http:\" URI\n     */\n    toDataUri : function (resid)\n    {\n      var resentry = this.constructor.__registry[resid];\n      var combined = resentry ? this.constructor.__registry[resentry[4]] : null;\n      var uri;\n      if (combined) {\n        var resstruct = combined[4][resid];\n        uri = \"data:image/\" + resstruct[\"type\"] + \";\" + resstruct[\"encoding\"] +\n              \",\" + resstruct[\"data\"];\n      }\n      else {\n        uri = this.toUri(resid);\n      }\n      return uri;\n    },\n\n    /**\n     * Checks whether a given resource id for an image is a font handle.\n     *\n     * @param resid {String} resource id of the image\n     * @return {Boolean} True if it's a font URI\n     */\n    isFontUri : function (resid)\n    {\n      return resid ? resid.startsWith(\"@\") : false;\n    }\n  },\n\n\n  defer : function(statics)\n  {\n    if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n    {\n      // To avoid a \"mixed content\" warning in IE when the application is\n      // delivered via HTTPS a prefix has to be added. This will transform the\n      // relative URL to an absolute one in IE.\n      // Though this warning is only displayed in conjunction with images which\n      // are referenced as a CSS \"background-image\", every resource path is\n      // changed when the application is served with HTTPS.\n      if (qx.core.Environment.get(\"io.ssl\"))\n      {\n        for (var lib in qx.$$libraries)\n        {\n          var resourceUri;\n          if (qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\")) {\n            resourceUri = qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\");\n          }\n          else\n          {\n            // default for libraries without a resourceUri set\n            statics.__urlPrefix[lib] = \"\";\n            continue;\n          }\n\n          var href;\n          //first check if there is base url set\n          var baseElements = document.getElementsByTagName(\"base\");\n          if (baseElements.length > 0) {\n            href = baseElements[0].href;\n          }\n\n          // It is valid to to begin a URL with \"//\" so this case has to\n          // be considered. If the to resolved URL begins with \"//\" the\n          // manager prefixes it with \"https:\" to avoid any problems for IE\n          if (resourceUri.match(/^\\/\\//) != null) {\n            statics.__urlPrefix[lib] = window.location.protocol;\n          }\n          // If the resourceUri begins with a single slash, include the current\n          // hostname\n          else if (resourceUri.match(/^\\//) != null)\n          {\n            if (href)\n            {\n              statics.__urlPrefix[lib] = href;\n            }\n            else\n            {\n              statics.__urlPrefix[lib] = window.location.protocol + \"//\" + window.location.host;\n            }\n          }\n          // If the resolved URL begins with \"./\" the final URL has to be\n          // put together using the document.URL property.\n          // IMPORTANT: this is only applicable for the source version\n          else if (resourceUri.match(/^\\.\\//) != null)\n          {\n            var url = document.URL;\n            statics.__urlPrefix[lib] = url.substring(0, url.lastIndexOf(\"/\") + 1);\n          } else if (resourceUri.match(/^http/) != null) {\n            // Let absolute URLs pass through\n            statics.__urlPrefix[lib] = \"\";\n          }\n          else\n          {\n            if (!href)\n            {\n              // check for parameters with URLs as value\n              var index = window.location.href.indexOf(\"?\");\n\n              if (index == -1)\n              {\n                href = window.location.href;\n              }\n              else\n              {\n                href = window.location.href.substring(0, index);\n              }\n            }\n\n            statics.__urlPrefix[lib] = href.substring(0, href.lastIndexOf(\"/\") + 1);\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}