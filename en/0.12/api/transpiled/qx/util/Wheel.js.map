{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/Wheel.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "MAXSCROLL",
    "MINSCROLL",
    "FACTOR",
    "IS_TOUCHPAD",
    "getDelta",
    "domEvent",
    "axis",
    "undefined",
    "delta",
    "wheelDelta",
    "detail",
    "deltaY",
    "__normalize",
    "x",
    "wheelDeltaX",
    "HORIZONTAL_AXIS",
    "deltaX",
    "y",
    "wheelDeltaY",
    "util",
    "Wheel",
    "absDelta",
    "Math",
    "abs",
    "__recalculateMultiplicator",
    "range",
    "ret",
    "log",
    "min",
    "max",
    "maxRet"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n ************************************************************************ */\n\n/**\n * Util for mouse wheel normalization.\n */\nqx.Bootstrap.define(\"qx.util.Wheel\", {\n  statics: {\n    /**\n     * The maximal measured scroll wheel delta.\n     * @internal\n     */\n    MAXSCROLL: null,\n\n    /**\n     * The minimal measured scroll wheel delta.\n     * @internal\n     */\n    MINSCROLL: null,\n\n    /**\n     * The normalization factor for the speed calculation.\n     * @internal\n     */\n    FACTOR: 1,\n\n    /**\n     * Is the Wheel actually a touchpad ?\n     * @internal\n     */\n    IS_TOUCHPAD: false,\n\n    /**\n     * Get the amount the wheel has been scrolled\n     *\n     * @param domEvent {Event} The native wheel event.\n     * @param axis {String?} Optional parameter which defines the scroll axis.\n     *   The value can either be <code>\"x\"</code> or <code>\"y\"</code>.\n     * @return {Integer} Scroll wheel movement for the given axis. If no axis\n     *   is given, the y axis is used.\n     */\n    getDelta: function (domEvent, axis) {\n      // default case\n      if (axis === undefined) {\n        // default case\n        var delta = 0;\n        if (domEvent.wheelDelta !== undefined) {\n          delta = -domEvent.wheelDelta;\n        } else if (domEvent.detail !== 0) {\n          delta = domEvent.detail;\n        } else if (domEvent.deltaY !== undefined) {\n          // use deltaY as default for firefox\n          delta = domEvent.deltaY;\n        }\n        return this.__normalize(delta);\n      }\n\n      // get the x scroll delta\n      if (axis === \"x\") {\n        var x = 0;\n        if (domEvent.wheelDelta !== undefined) {\n          if (domEvent.wheelDeltaX !== undefined) {\n            x = domEvent.wheelDeltaX ? this.__normalize(-domEvent.wheelDeltaX) : 0;\n          }\n        } else {\n          if (domEvent.axis && domEvent.axis == domEvent.HORIZONTAL_AXIS &&\n            (domEvent.detail !== undefined) && (domEvent.detail > 0)\n          ) {\n            x = this.__normalize(domEvent.detail);\n          } else if (domEvent.deltaX !== undefined) {\n            x = this.__normalize(domEvent.deltaX);\n          }\n        }\n        return x;\n      }\n\n      // get the y scroll delta\n      if (axis === \"y\") {\n        var y = 0;\n        if (domEvent.wheelDelta !== undefined) {\n          if (domEvent.wheelDeltaY !== undefined) {\n            y = domEvent.wheelDeltaY ? this.__normalize(-domEvent.wheelDeltaY) : 0;\n          } else {\n            y = this.__normalize(-domEvent.wheelDelta);\n          }\n        } else {\n          if (!(domEvent.axis && domEvent.axis == domEvent.HORIZONTAL_AXIS) &&\n            (domEvent.detail !== undefined) && (domEvent.detail > 0)\n          ) {\n            y = this.__normalize(domEvent.detail);\n          } else if (domEvent.deltaY !== undefined) {\n            y = this.__normalize(domEvent.deltaY);\n          }\n        }\n        return y;\n      }\n      // default case, return 0\n      return 0;\n    },\n\n\n    /**\n     * Normalizer for the mouse wheel data.\n     *\n     * @param delta {Number} The mouse delta.\n     * @return {Number} The normalized delta value\n     */\n    __normalize: function (delta) {\n      if (qx.util.Wheel.IS_TOUCHPAD) {\n        // Reset normalization values that may be re-computed once a real mouse is plugged.\n        qx.util.Wheel.MINSCROLL = null;\n        qx.util.Wheel.MAXSCROLL = null;\n        qx.util.Wheel.FACTOR = 1;\n        return delta;\n      }\n      var absDelta = Math.abs(delta);\n\n      if (absDelta === 0) {\n        return 0;\n      }\n\n      // store the min value\n      if (\n        qx.util.Wheel.MINSCROLL == null ||\n        qx.util.Wheel.MINSCROLL > absDelta\n        ) {\n        qx.util.Wheel.MINSCROLL = absDelta;\n        this.__recalculateMultiplicator();\n      }\n\n      // store the max value\n      if (\n        qx.util.Wheel.MAXSCROLL == null ||\n        qx.util.Wheel.MAXSCROLL < absDelta\n        ) {\n        qx.util.Wheel.MAXSCROLL = absDelta;\n        this.__recalculateMultiplicator();\n      }\n\n      // special case for systems not speeding up\n      if (\n        qx.util.Wheel.MAXSCROLL === absDelta &&\n        qx.util.Wheel.MINSCROLL === absDelta\n        ) {\n        return 2 * (delta / absDelta);\n      }\n\n      var range =\n        qx.util.Wheel.MAXSCROLL - qx.util.Wheel.MINSCROLL;\n      var ret = (delta / range) * Math.log(range) * qx.util.Wheel.FACTOR;\n\n      // return at least 1 or -1\n      return ret < 0 ? Math.min(ret, -1) : Math.max(ret, 1);\n    },\n\n\n    /**\n     * Recalculates the factor with which the calculated delta is normalized.\n     */\n    __recalculateMultiplicator: function () {\n      var max = qx.util.Wheel.MAXSCROLL || 0;\n      var min = qx.util.Wheel.MINSCROLL || max;\n      if (max <= min) {\n        return;\n      }\n      var range = max - min;\n      var maxRet = (max / range) * Math.log(range);\n      if (maxRet == 0) {\n        maxRet = 1;\n      }\n      qx.util.Wheel.FACTOR = 6 / maxRet;\n      if (qx.core.Environment.get(\"qx.debug.touchpad.detection\")) {\n        qx.log.Logger.debug(this, \"FACTOR : \" + qx.util.Wheel.FACTOR);\n      }\n    }\n  }\n});\n"
  ]
}