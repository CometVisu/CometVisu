{
  "className": "qx.event.dispatch.MouseCapture",
  "packageName": "qx.event.dispatch",
  "name": "MouseCapture",
  "superClass": "qx.event.dispatch.AbstractBubbling",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 267,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Implementation of the Internet Explorer specific event capturing mode for\n mouse events http://msdn2.microsoft.com/en-us/library/ms536742.aspx.\n This class is used internally by {@link qx.event.Manager} to do mouse event\n capturing.</p>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.event.handler.Focus"
        },
        {
          "name": "@use",
          "body": "qx.event.handler.Window"
        },
        {
          "name": "@use",
          "body": "qx.event.handler.Capture"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 39,
        "column": 14
      },
      "end": {
        "line": 48,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        },
        {
          "name": "@param",
          "body": "registration {qx.event.Registration} The event registration to use",
          "paramName": "registration",
          "description": " The event registration to use",
          "type": "qx.event.Registration"
        }
      ]
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 54,
          "column": 51
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this dispatcher"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__registration": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__captureElement": {
      "location": {
        "start": {
          "line": 61,
          "column": 4
        },
        "end": {
          "line": 61,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__containerCapture": {
      "location": {
        "start": {
          "line": 62,
          "column": 4
        },
        "end": {
          "line": 62,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__window": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_getParent": {
      "location": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target which parent should be found",
            "paramName": "target",
            "description": " The target which parent should be found",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The parent of the given target",
            "type": "var",
            "description": " The parent of the given target"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling"
      ]
    },
    "canDispatchEvent": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 85,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  EVENT DISPATCHER INTERFACE\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event object",
            "paramName": "event",
            "description": " The event object",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event dispatcher is responsible for the this event",
            "type": "Boolean",
            "description": " Whether the event dispatcher is responsible for the this event"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling",
        "qx.event.IEventDispatcher"
      ]
    },
    "dispatchEvent": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} event object to dispatch",
            "paramName": "event",
            "description": " event object to dispatch",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one or more of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": " a promise, if one or more of the event handlers returned a promise"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling",
        "qx.event.IEventDispatcher",
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "__captureEvents": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  HELPER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__captureEvents)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "activateCapture": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  USER ACCESS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Set the given element as target for event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The element which should capture the mouse events.",
            "paramName": "element",
            "description": " The element which should capture the mouse events.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. IF false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. IF false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCaptureElement": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the element currently capturing events.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} The current capture element. This value may be\n    null.",
            "type": "Element|null",
            "description": " The current capture element. This value may be\n    null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop capturing of mouse events.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasNativeCapture": {
      "location": {
        "start": {
          "line": 217,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the browser should use native mouse capturing</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "nativeSetCapture": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If the browser supports native mouse capturing, sets the mouse capture to\n the object that belongs to the current document.\n Please note that under Windows 7 (but not Windows 8), capturing is\n not only applied to mouse events as expected, but also to native pointer events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The capture DOM element",
            "paramName": "element",
            "description": " The capture DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, containerCapture)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "nativeReleaseCapture": {
      "location": {
        "start": {
          "line": 253,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If the browser supports native mouse capturing, removes mouse capture\n from the object in the current document.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to release the capture for",
            "paramName": "element",
            "description": " The DOM element to release the capture for",
            "type": "Element"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "reset"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 264,
        "column": 10
      },
      "end": {
        "line": 266,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}