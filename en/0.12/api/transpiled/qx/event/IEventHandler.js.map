{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/IEventHandler.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "statics",
    "TARGET_DOMNODE",
    "TARGET_WINDOW",
    "TARGET_OBJECT",
    "TARGET_DOCUMENT",
    "members",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "event",
    "IEventHandler"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,wBAApB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,cAAc,EAAE,CAFlB;;AAIE;AACAC,MAAAA,aAAa,EAAG,CALlB;;AAOE;AACAC,MAAAA,aAAa,EAAE,CARjB;;AAUE;AACAC,MAAAA,eAAe,EAAE;AAXnB,KAFF;AAiBEC,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,cAAc,EAAG,wBAASC,MAAT,EAAiBC,IAAjB,EAAuB,CAAE,CAd5C;;AAiBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,aAAa,EAAG,uBAASF,MAAT,EAAiBC,IAAjB,EAAuBE,OAAvB,EAAgC,CAAE,CA3BpD;;AA8BE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,eAAe,EAAG,yBAASJ,MAAT,EAAiBC,IAAjB,EAAuBE,OAAvB,EAAgC,CAAE;AAzCtD;AAlBF,GADA;AAxBAhB,EAAAA,EAAE,CAACkB,KAAH,CAASC,aAAT,CAAuBhB,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Event handler Interface.\n *\n * All custom event handler like mouse or keyboard event handler must implement\n * this interface.\n */\nqx.Interface.define(\"qx.event.IEventHandler\",\n{\n  statics :\n  {\n    /** @type {Integer} The event target must be a dom node */\n    TARGET_DOMNODE: 1,\n\n    /** @type {Integer} The event target must be a window object */\n    TARGET_WINDOW : 2,\n\n    /** @type {Integer} The event target must be a qooxdoo object */\n    TARGET_OBJECT: 4,\n\n    /** @type {Integer} The event target must be a document node */\n    TARGET_DOCUMENT: 8\n  },\n\n\n  members :\n  {\n    /**\n     * Whether the event handler can handle events of the given type. If the\n     * event handler class has a static variable called <code>IGNORE_CAN_HANDLE</code>\n     * with the value <code>true</code> this function is not called. Whether the\n     * handler can handle the event is them only determined by the static variables\n     * <code>SUPPORTED_TYPES</code> and <code>TARGET_CHECK</code>.\n     *\n     * @param target {var} The target to, which the event handler should\n     *     be attached\n     * @param type {String} event type\n     * @return {Boolean} Whether the event handler can handle events of the\n     *     given type.\n     */\n    canHandleEvent : function(target, type) {},\n\n\n    /**\n     * This method is called each time an event listener, for one of the\n     * supported events, is added using {@link qx.event.Manager#addListener}.\n     *\n     * @param target {var} The target to, which the event handler should\n     *     be attached\n     * @param type {String} event type\n     * @param capture {Boolean} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event.\n     */\n    registerEvent : function(target, type, capture) {},\n\n\n    /**\n     * This method is called each time an event listener, for one of the\n     * supported events, is removed by using {@link qx.event.Manager#removeListener}\n     * and no other event listener is listening on this type.\n     *\n     * @param target {var} The target from, which the event handler should\n     *     be removed\n     * @param type {String} event type\n     * @param capture {Boolean} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event.\n     */\n    unregisterEvent : function(target, type, capture) {}\n  }\n});\n"
  ]
}