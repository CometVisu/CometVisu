{
  "className": "qx.event.Emitter",
  "packageName": "qx.event",
  "name": "Emitter",
  "superClass": "Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 244,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2012 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (wittemann)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Basic implementation for an event emitter. This supplies a basic and\n minimalistic event mechanism.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__storage": {
      "location": {
        "start": {
          "line": 28,
          "column": 4
        },
        "end": {
          "line": 28,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Static storage for all event listener</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    }
  },
  "members": {
    "__listener": {
      "location": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 33,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__any": {
      "location": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 34,
          "column": 16
        }
      },
      "type": "variable",
      "access": "private"
    },
    "on": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach a listener to the event emitter. The given <code>name</code>\n will define the type of event. Handing in a <code>'*'</code> will\n listen to all events emitted by the event emitter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": " An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "once": {
      "location": {
        "start": {
          "line": 65,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach a listener to the event emitter which will be executed only once.\n The given <code>name</code> will define the type of event. Handing in a\n <code>'*'</code> will listen to all events emitted by the event emitter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": " An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "off": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove a listener from the event emitter. The given <code>name</code>\n will define the type of event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} The listener's id if it was removed or\n <code>null</code> if it wasn't found",
            "type": "Integer|null",
            "description": " The listener's id if it was removed or\n <code>null</code> if it wasn't found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "offById": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 111,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the listener identified by the given <code>id</code>. The id\n will be return on attaching the listener and can be stored for removing.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer} The id of the listener.",
            "paramName": "id",
            "description": " The id of the listener.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} The listener's id if it was removed or\n <code>null</code> if it wasn't found",
            "type": "Integer|null",
            "description": " The listener's id if it was removed or\n <code>null</code> if it wasn't found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addListener": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #on}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": " An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addListenerOnce": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #once}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": " An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #off}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 157,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #offById}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer} The id of the listener.",
            "paramName": "id",
            "description": " The id of the listener.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "emit": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Emits an event with the given name. The data will be passed\n to the listener.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to emit.",
            "paramName": "name",
            "description": " The name of the event to emit.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var?undefined} The data which should be passed to the listener.",
            "paramName": "data",
            "description": " The data which should be passed to the listener.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getListeners": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the internal attached listener.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map which has the event name as key. The values are\n   arrays containing a map with 'listener' and 'ctx'.",
            "type": "Map",
            "description": " A map which has the event name as key. The values are\n   arrays containing a map with 'listener' and 'ctx'."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getEntryById": {
      "location": {
        "start": {
          "line": 215,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data entry for a given event id. If the entry could\n not be found, undefined will be returned.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Number} The listeners id",
            "paramName": "id",
            "description": " The listeners id",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|undefined} The data entry if found",
            "type": "Map|undefined",
            "description": " The data entry if found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getStorage": {
      "location": {
        "start": {
          "line": 234,
          "column": 4
        },
        "end": {
          "line": 242,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper which will return the storage for the given name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event.",
            "paramName": "name",
            "description": " The name of the event.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array which is the storage for the listener and\n   the given event name.",
            "type": "Array",
            "description": " An array which is the storage for the listener and\n   the given event name."
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "descendants": [
    "qx.bom.AnimationFrame",
    "qx.bom.FullScreen",
    "qx.bom.MediaQuery",
    "qx.bom.PageVisibility",
    "qx.bom.element.AnimationHandle",
    "qx.bom.request.SimpleXhr",
    "qx.bom.rest.Resource"
  ]
}