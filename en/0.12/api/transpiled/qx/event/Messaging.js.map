{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/event/Messaging.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "_listener",
    "__listenerIdCount",
    "__channelToIdMapping",
    "members",
    "on",
    "channel",
    "type",
    "handler",
    "scope",
    "_addListener",
    "onAny",
    "listeners",
    "id",
    "params",
    "param",
    "lang",
    "Type",
    "isString",
    "paramsRegexp",
    "exec",
    "push",
    "RegExp",
    "replace",
    "regExp",
    "remove",
    "listener",
    "has",
    "path",
    "Object",
    "isEmpty",
    "test",
    "emit",
    "customData",
    "_emit",
    "listenerMatchedAny",
    "_emitListeners",
    "listenerMatched",
    "info",
    "_emitRoute",
    "match",
    "value",
    "shift",
    "i",
    "length",
    "call",
    "undefined",
    "event",
    "Messaging"
  ],
  "mappings": ";;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,oBAApB,EACA;AACEC,IAAAA,SAAS,EAAG,qBACZ;AACE,WAAKC,SAAL,GAAiB,EAAjB,EACA,KAAKC,SAAL,GAAyB,CADzB;AAEA,WAAKC,SAAL,GAA4B,EAA5B;AACD,KANH;AASEC,IAAAA,OAAO,EACP;AACEH,MAAAA,SAAS,EAAG,IADd;AAEEC,MAAAA,SAAiB,EAAG,IAFtB;AAGEC,MAAAA,SAAoB,EAAG,IAHzB;;AAME;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,MAAAA,EAAE,EAAG,YAASC,OAAT,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AAC3C,eAAO,KAAKC,YAAL,CAAkBJ,OAAlB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0CC,KAA1C,CAAP;AACD,OAlBH;;AAsBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,MAAAA,KAAK,EAAG,eAASJ,IAAT,EAAeC,OAAf,EAAwBC,KAAxB,EAA+B;AACrC,eAAO,KAAKC,YAAL,CAAkB,KAAlB,EAAyBH,IAAzB,EAA+BC,OAA/B,EAAwCC,KAAxC,CAAP;AACD,OAjCH;;AAoCE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,YAAY,EAAG,sBAASJ,OAAT,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AACrD,YAAIG,SAAS,GAAG,KAAKX,SAAL,CAAeK,OAAf,IAA0B,KAAKL,SAAL,CAAeK,OAAf,KAA2B,EAArE;AACA,YAAIO,EAAE,GAAG,KAAKX,SAAL,EAAT;AACA,YAAIY,MAAM,GAAG,EAAb;AACA,YAAIC,KAAK,GAAG,IAAZ,CAJqD,CAMrD;;AACA,YAAIpB,EAAE,CAACqB,IAAH,CAAQC,IAAR,CAAaC,QAAb,CAAsBX,IAAtB,CAAJ,EACA;AACE,cAAIY,YAAY,GAAG,gBAAnB;;AAEA,iBAAO,CAACJ,KAAK,GAAGI,YAAY,CAACC,IAAb,CAAkBb,IAAlB,CAAT,MAAsC,IAA7C,EAAmD;AACjDO,YAAAA,MAAM,CAACO,IAAP,CAAYN,KAAK,CAAC,CAAD,CAAjB;AACD;;AACDR,UAAAA,IAAI,GAAG,IAAIe,MAAJ,CAAW,MAAMf,IAAI,CAACgB,OAAL,CAAaJ,YAAb,EAA2B,UAA3B,CAAN,GAA+C,GAA1D,CAAP;AACD;;AAEDP,QAAAA,SAAS,CAACC,EAAD,CAAT,GAAgB;AAACW,UAAAA,MAAM,EAACjB,IAAR;AAAcO,UAAAA,MAAM,EAACA,MAArB;AAA6BN,UAAAA,OAAO,EAACA,OAArC;AAA8CC,UAAAA,KAAK,EAACA;AAApD,SAAhB;AACA,aAAKN,SAAL,CAA0BU,EAA1B,IAAgCP,OAAhC;AACA,eAAOO,EAAP;AACD,OAjEH;;AAoEE;AACJ;AACA;AACA;AACA;AACIY,MAAAA,MAAM,EAAG,gBAASZ,EAAT,EAAa;AACpB,YAAIP,OAAO,GAAG,KAAKH,SAAL,CAA0BU,EAA1B,CAAd;AACA,YAAIa,QAAQ,GAAG,KAAKzB,SAAL,CAAeK,OAAf,CAAf;AACA,eAAOoB,QAAQ,CAACb,EAAD,CAAf;AACA,eAAO,KAAKV,SAAL,CAA0BU,EAA1B,CAAP;AACD,OA9EH;;AAiFE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIc,MAAAA,GAAG,EAAG,aAASrB,OAAT,EAAkBsB,IAAlB,EAAwB;AAC5B,YAAIhB,SAAS,GAAG,KAAKX,SAAL,CAAeK,OAAf,CAAhB;;AACA,YAAI,CAACM,SAAD,IAAcjB,EAAE,CAACqB,IAAH,CAAQa,MAAR,CAAeC,OAAf,CAAuBlB,SAAvB,CAAlB,EAAqD;AACnD,iBAAO,KAAP;AACD;;AAED,aAAK,IAAIC,EAAT,IAAeD,SAAf,EACA;AACE,cAAIc,QAAQ,GAAGd,SAAS,CAACC,EAAD,CAAxB;;AACA,cAAIa,QAAQ,CAACF,MAAT,CAAgBO,IAAhB,CAAqBH,IAArB,CAAJ,EAAgC;AAC9B,mBAAO,IAAP;AACD;AACF;;AAED,eAAO,KAAP;AACD,OAvGH;;AAyGE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACII,MAAAA,IAAI,EAAG,cAAS1B,OAAT,EAAkBsB,IAAlB,EAAwBd,MAAxB,EAAgCmB,UAAhC,EAA4C;AACjD,aAAKC,KAAL,CAAW5B,OAAX,EAAoBsB,IAApB,EAA0Bd,MAA1B,EAAkCmB,UAAlC;AACD,OAnHH;;AAsHE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAG,eAAS5B,OAAT,EAAkBsB,IAAlB,EAAwBd,MAAxB,EAAgCmB,UAAhC,EACR;AACE,YAAIE,kBAAkB,GAAG,KAAzB;AACA,YAAIT,QAAQ,GAAG,KAAKzB,SAAL,CAAe,KAAf,CAAf;AACAkC,QAAAA,kBAAkB,GAAG,KAAKC,cAAL,CAAoB9B,OAApB,EAA6BsB,IAA7B,EAAmCF,QAAnC,EAA6CZ,MAA7C,EAAqDmB,UAArD,CAArB;AAEA,YAAII,eAAe,GAAG,KAAtB;AACAX,QAAAA,QAAQ,GAAG,KAAKzB,SAAL,CAAeK,OAAf,CAAX;AACA+B,QAAAA,eAAe,GAAG,KAAKD,cAAL,CAAoB9B,OAApB,EAA6BsB,IAA7B,EAAmCF,QAAnC,EAA6CZ,MAA7C,EAAqDmB,UAArD,CAAlB;;AAEA,YAAI,CAACI,eAAD,IAAoB,CAACF,kBAAzB,EAA6C;AAC3CxC,UAAAA,EAAE,CAACC,SAAH,CAAa0C,IAAb,CAAkB,2BAA2BV,IAA7C;AACD;AACF,OA5IH;;AA+IE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIQ,MAAAA,cAAc,EAAG,wBAAS9B,OAAT,EAAkBsB,IAAlB,EAAwBhB,SAAxB,EAAmCE,MAAnC,EAA2CmB,UAA3C,EACjB;AACE,YAAI,CAACrB,SAAD,IAAcjB,EAAE,CAACqB,IAAH,CAAQa,MAAR,CAAeC,OAAf,CAAuBlB,SAAvB,CAAlB,EAAqD;AACnD,iBAAO,KAAP;AACD;;AACD,YAAIyB,eAAe,GAAG,KAAtB;;AACA,aAAK,IAAIxB,EAAT,IAAeD,SAAf,EACA;AACE,cAAIc,QAAQ,GAAGd,SAAS,CAACC,EAAD,CAAxB;AACAwB,UAAAA,eAAe,IAAI,KAAKE,UAAL,CAAgBjC,OAAhB,EAAyBsB,IAAzB,EAA+BF,QAA/B,EAAyCZ,MAAzC,EAAiDmB,UAAjD,CAAnB;AACD;;AACD,eAAOI,eAAP;AACD,OAvKH;;AA0KE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,MAAAA,UAAU,EAAG,oBAASjC,OAAT,EAAkBsB,IAAlB,EAAwBF,QAAxB,EAAkCZ,MAAlC,EAA0CmB,UAA1C,EACb;AACE,YAAIO,KAAK,GAAGd,QAAQ,CAACF,MAAT,CAAgBJ,IAAhB,CAAqBQ,IAArB,CAAZ;;AACA,YAAIY,KAAJ,EACA;AACE,cAAI1B,MAAM,GAAGA,MAAM,IAAI,EAAvB;AACA,cAAIC,KAAK,GAAG,IAAZ;AACA,cAAI0B,KAAK,GAAG,IAAZ;AACAD,UAAAA,KAAK,CAACE,KAAN,GAJF,CAIiB;;AACf,eAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,KAAK,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EACA;AACEF,YAAAA,KAAK,GAAGD,KAAK,CAACG,CAAD,CAAb;AACA5B,YAAAA,KAAK,GAAGW,QAAQ,CAACZ,MAAT,CAAgB6B,CAAhB,CAAR;;AACA,gBAAI5B,KAAJ,EAAW;AACTD,cAAAA,MAAM,CAACC,KAAD,CAAN,GAAgB0B,KAAhB;AACD,aAFD,MAEO;AACL3B,cAAAA,MAAM,CAAC6B,CAAD,CAAN,GAAYF,KAAZ;AACD;AACF;;AACDf,UAAAA,QAAQ,CAAClB,OAAT,CAAiBqC,IAAjB,CAAsBnB,QAAQ,CAACjB,KAA/B,EAAsC;AAACmB,YAAAA,IAAI,EAACA,IAAN;AAAYd,YAAAA,MAAM,EAACA,MAAnB;AAA2BmB,YAAAA,UAAU,EAACA;AAAtC,WAAtC;AACD;;AAED,eAAOO,KAAK,IAAIM,SAAhB;AACD;AA7MH;AAVF,GADA;AAzCAnD,EAAAA,EAAE,CAACoD,KAAH,CAASC,SAAT,CAAmBlD,aAAnB,GAAmCA,aAAnC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * Define messages to react on certain channels.\n *\n * The channel names will be used in the {@link #on} method to define handlers which will\n * be called on certain channels and routes. The {@link #emit} method can be used\n * to execute a given route on a channel. {@link #onAny} defines a handler on any channel.\n *\n * *Example*\n *\n * Here is a little example of how to use the messaging.\n *\n * <pre class='javascript'>\n *   var m = new qx.event.Messaging();\n *\n *   m.on(\"get\", \"/address/{id}\", function(data) {\n *     var id = data.params.id; // 1234\n *     // do something with the id...\n *   },this);\n *\n *   m.emit(\"get\", \"/address/1234\");\n * </pre>\n */\nqx.Bootstrap.define(\"qx.event.Messaging\",\n{\n  construct : function()\n  {\n    this._listener = {},\n    this.__listenerIdCount = 0;\n    this.__channelToIdMapping = {};\n  },\n\n\n  members :\n  {\n    _listener : null,\n    __listenerIdCount : null,\n    __channelToIdMapping : null,\n\n\n    /**\n     * Adds a route handler for the given channel. The route is called\n     * if the {@link #emit} method finds a match.\n     *\n     * @param channel {String} The channel of the message.\n     * @param type {String|RegExp} The type, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call if the route matches the executed path.\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     */\n    on : function(channel, type, handler, scope) {\n      return this._addListener(channel, type, handler, scope);\n    },\n\n\n\n    /**\n     * Adds a handler for the \"any\" channel. The \"any\" channel is called\n     * before all other channels.\n     *\n     * @param type {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call if the route matches the executed path\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     */\n    onAny : function(type, handler, scope) {\n      return this._addListener(\"any\", type, handler, scope);\n    },\n\n\n    /**\n     * Adds a listener for a certain channel.\n     *\n     * @param channel {String} The channel the route should be registered for\n     * @param type {String|RegExp} The type, used for checking if the executed path matches\n     * @param handler {Function} The handler to call if the route matches the executed path\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     */\n    _addListener : function(channel, type, handler, scope) {\n      var listeners = this._listener[channel] = this._listener[channel] || {};\n      var id = this.__listenerIdCount++;\n      var params = [];\n      var param = null;\n\n      // Convert the route to a regular expression.\n      if (qx.lang.Type.isString(type))\n      {\n        var paramsRegexp = /\\{([\\w\\d]+)\\}/g;\n\n        while ((param = paramsRegexp.exec(type)) !== null) {\n          params.push(param[1]);\n        }\n        type = new RegExp(\"^\" + type.replace(paramsRegexp, \"([^\\/]+)\") + \"$\");\n      }\n\n      listeners[id] = {regExp:type, params:params, handler:handler, scope:scope};\n      this.__channelToIdMapping[id] = channel;\n      return id;\n    },\n\n\n    /**\n     * Removes a registered listener by the given id.\n     *\n     * @param id {String} The id of the registered listener.\n     */\n    remove : function(id) {\n      var channel = this.__channelToIdMapping[id];\n      var listener = this._listener[channel];\n      delete listener[id];\n      delete this.__channelToIdMapping[id];\n    },\n\n\n    /**\n     * Checks if a listener is registered for the given path in the given channel.\n     *\n     * @param channel {String} The channel of the message.\n     * @param path {String} The path to check.\n     * @return {Boolean} Whether a listener is registered.\n     */\n    has : function(channel, path) {\n      var listeners = this._listener[channel];\n      if (!listeners || qx.lang.Object.isEmpty(listeners)) {\n        return false;\n      }\n\n      for (var id in listeners)\n      {\n        var listener = listeners[id];\n        if (listener.regExp.test(path)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Sends a message on the given channel and informs all matching route handlers.\n     *\n     * @param channel {String} The channel of the message.\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    emit : function(channel, path, params, customData) {\n      this._emit(channel, path, params, customData);\n    },\n\n\n    /**\n     * Executes a certain channel with a given path. Informs all\n     * route handlers that match with the path.\n     *\n     * @param channel {String} The channel to execute.\n     * @param path {String} The path to check\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    _emit : function(channel, path, params, customData)\n    {\n      var listenerMatchedAny = false;\n      var listener = this._listener[\"any\"];\n      listenerMatchedAny = this._emitListeners(channel, path, listener, params, customData);\n\n      var listenerMatched = false;\n      listener = this._listener[channel];\n      listenerMatched = this._emitListeners(channel, path, listener, params, customData);\n\n      if (!listenerMatched && !listenerMatchedAny) {\n        qx.Bootstrap.info(\"No listener found for \" + path);\n      }\n    },\n\n\n    /**\n     * Executes all given listener for a certain channel. Checks all listeners if they match\n     * with the given path and executes the stored handler of the matching route.\n     *\n     * @param channel {String} The channel to execute.\n     * @param path {String} The path to check\n     * @param listeners {Map[]} All routes to test and execute.\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     *\n     * @return {Boolean} Whether the route has been executed\n     */\n    _emitListeners : function(channel, path, listeners, params, customData)\n    {\n      if (!listeners || qx.lang.Object.isEmpty(listeners)) {\n        return false;\n      }\n      var listenerMatched = false;\n      for (var id in listeners)\n      {\n        var listener = listeners[id];\n        listenerMatched |= this._emitRoute(channel, path, listener, params, customData);\n      }\n      return listenerMatched;\n    },\n\n\n    /**\n     * Executes a certain listener. Checks if the listener matches the given path and\n     * executes the stored handler of the route.\n     *\n     * @param channel {String} The channel to execute.\n     * @param path {String} The path to check\n     * @param listener {Map} The route data.\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     *\n     * @return {Boolean} Whether the route has been executed\n     */\n    _emitRoute : function(channel, path, listener, params, customData)\n    {\n      var match = listener.regExp.exec(path);\n      if (match)\n      {\n        var params = params || {};\n        var param = null;\n        var value = null;\n        match.shift(); // first match is the whole path\n        for (var i=0; i < match.length; i++)\n        {\n          value = match[i];\n          param = listener.params[i];\n          if (param) {\n            params[param] = value;\n          } else {\n            params[i] = value;\n          }\n        }\n        listener.handler.call(listener.scope, {path:path, params:params, customData:customData});\n      }\n\n      return match != undefined;\n    }\n  }\n});\n"
  ]
}