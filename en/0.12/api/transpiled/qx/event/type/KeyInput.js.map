{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/KeyInput.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Dom",
    "members",
    "init",
    "domEvent",
    "target",
    "charCode",
    "_charCode",
    "clone",
    "embryo",
    "getCharCode",
    "getChar",
    "String",
    "fromCharCode",
    "KeyInput"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,KAAH,CAASC,IAAT,CAAcC,GADzB;;AAME;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG,cAASC,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,EACP;AACE,8DAAqBF,QAArB,EAA+BC,MAA/B,EAAuC,IAAvC,EAA6C,IAA7C,EAAmD,IAAnD;AAEA,aAAKE,SAAL,GAAiBD,QAAjB;AAEA,eAAO,IAAP;AACD,OAhBH;AAmBE;AACAE,MAAAA,KAAK,EAAG,eAASC,MAAT,EACR;AACE,YAAID,KAAK,0DAAwBC,MAAxB,CAAT;AAEAD,QAAAA,KAAK,CAACD,SAAN,GAAkB,KAAKA,SAAvB;AAEA,eAAOC,KAAP;AACD,OA3BH;;AA8BE;AACJ;AACA;AACA;AACA;AACIE,MAAAA,WAAW,EAAG,uBAAW;AACvB,eAAO,KAAKH,SAAZ;AACD,OArCH;;AAwCE;AACJ;AACA;AACA;AACA;AACII,MAAAA,OAAO,EAAG,mBAAW;AACnB,eAAOC,MAAM,CAACC,YAAP,CAAoB,KAAKN,SAAzB,CAAP;AACD;AA/CH;AAbF,GADA;AA1BAf,EAAAA,EAAE,CAACO,KAAH,CAASC,IAAT,CAAcc,QAAd,CAAuBnB,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Keyboard input event object.\n *\n * the interface of this class is based on the DOM Level 3 keyboard event\n * interface: http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\n */\nqx.Class.define(\"qx.event.type.KeyInput\",\n{\n  extend : qx.event.type.Dom,\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Initialize the fields of the event.\n     *\n     * @param domEvent {Event} DOM event\n     * @param target {Object} The event target\n     * @param charCode {Integer} the character code\n     * @return {qx.event.type.KeyInput} The initialized key event instance\n     */\n    init : function(domEvent, target, charCode)\n    {\n      this.base(arguments, domEvent, target, null, true, true);\n\n      this._charCode = charCode;\n\n      return this;\n    },\n\n\n    // overridden\n    clone : function(embryo)\n    {\n      var clone = this.base(arguments, embryo);\n\n      clone._charCode = this._charCode;\n\n      return clone;\n    },\n\n\n    /**\n     * Unicode number of the pressed character.\n     *\n     * @return {Integer} Unicode number of the pressed character\n     */\n    getCharCode : function() {\n      return this._charCode;\n    },\n\n\n    /**\n     * Returns the pressed character\n     *\n     * @return {String} The character\n     */\n    getChar : function() {\n      return String.fromCharCode(this._charCode);\n    }\n  }\n});\n"
  ]
}