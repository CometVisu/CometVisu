{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/event/type/Data.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Event",
    "members",
    "__data",
    "__old",
    "init",
    "data",
    "old",
    "cancelable",
    "clone",
    "embryo",
    "getData",
    "getOldData",
    "Data"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;AAGAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,KAAH,CAASC,IAAT,CAAcC,KADzB;;AAME;;;;;AAMAC,IAAAA,OAAO,EACP;AACEC,MAAAA,SAAM,EAAG,IADX;AAEEC,MAAAA,SAAK,EAAG,IAFV;;AAKE;;;;;;;;;;;;;AAaAC,MAAAA,IAAI,EAAG,cAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EACP;AACE,0DAAqB,KAArB,EAA4BA,UAA5B;AAEA,aAAKL,SAAL,GAAcG,IAAd;AACA,aAAKF,SAAL,GAAaG,GAAb;AAEA,eAAO,IAAP;AACD,OA1BH;;AA6BE;;;;;;;;;AASAE,MAAAA,KAAK,EAAG,eAASC,MAAT,EACR;AACE,YAAID,KAAK,sDAAwBC,MAAxB,CAAT;AAEAD,QAAAA,KAAK,CAACN,SAAN,GAAe,KAAKA,SAApB;AACAM,QAAAA,KAAK,CAACL,SAAN,GAAc,KAAKA,SAAnB;AAEA,eAAOK,KAAP;AACD,OA9CH;;AAiDE;;;;;;AAMAE,MAAAA,OAAO,EAAG,mBAAW;AACnB,eAAO,KAAKR,SAAZ;AACD,OAzDH;;AA4DE;;;;;;AAMAS,MAAAA,UAAU,EAAG,sBAAW;AACtB,eAAO,KAAKR,SAAZ;AACD;AApEH;AAbF,GADA;AAtBAZ,EAAAA,EAAE,CAACO,KAAH,CAASC,IAAT,CAAca,IAAd,CAAmBlB,aAAnB,GAAmCA,aAAnC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Event object for data holding event or data changes.\n */\nqx.Class.define(\"qx.event.type.Data\",\n{\n  extend : qx.event.type.Event,\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __data : null,\n    __old : null,\n\n\n    /**\n     * Initializes an event object.\n     *\n     * @param data {var} The event's new data\n     * @param old {var?null} The event's old data (optional)\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link qx.event.type.Event#preventDefault}\n     * @return {qx.event.type.Data} the initialized instance.\n     */\n    init : function(data, old, cancelable)\n    {\n      this.base(arguments, false, cancelable);\n\n      this.__data = data;\n      this.__old = old;\n\n      return this;\n    },\n\n\n    /**\n     * Get a copy of this object\n     *\n     * @param embryo {qx.event.type.Data?null} Optional event class, which will\n     *     be configured using the data of this event instance. The event must be\n     *     an instance of this event class. If the data is <code>null</code>,\n     *     a new pooled instance is created.\n     * @return {qx.event.type.Data} a copy of this object\n     */\n    clone : function(embryo)\n    {\n      var clone = this.base(arguments, embryo);\n\n      clone.__data = this.__data;\n      clone.__old = this.__old;\n\n      return clone;\n    },\n\n\n    /**\n     * The new data of the event sending this data event.\n     * The return data type is the same as the event data type.\n     *\n     * @return {var} The new data of the event\n     */\n    getData : function() {\n      return this.__data;\n    },\n\n\n    /**\n     * The old data of the event sending this data event.\n     * The return data type is the same as the event data type.\n     *\n     * @return {var} The old data of the event\n     */\n    getOldData : function() {\n      return this.__old;\n    }\n  }\n});\n"
  ]
}