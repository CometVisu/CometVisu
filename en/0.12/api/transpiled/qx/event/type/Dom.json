{
  "className": "qx.event.type.Dom",
  "packageName": "qx.event.type",
  "name": "Dom",
  "superClass": "qx.event.type.Native",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 219,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Common base class for all DOM events.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "SHIFT_MASK": {
      "location": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 33,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the shift key."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "CTRL_MASK": {
      "location": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 36,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the control key."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "ALT_MASK": {
      "location": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 39,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the alt key."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "META_MASK": {
      "location": {
        "start": {
          "line": 42,
          "column": 4
        },
        "end": {
          "line": 42,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the meta key (e.g. apple key on Macs)."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "CAPSLOCK_MASK": {
      "location": {
        "start": {
          "line": 45,
          "column": 4
        },
        "end": {
          "line": 45,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the CapsLock modifier."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "NUMLOCK_MASK": {
      "location": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the NumLock modifier."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SCROLLLOCK_MASK": {
      "location": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The modifier mask for the ScrollLock modifier."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "_cloneNativeEvent": {
      "location": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 79,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nativeEvent {Event} The native browser event",
            "paramName": "nativeEvent",
            "description": " The native browser event",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "clone {Object} The initialized clone.",
            "paramName": "clone",
            "description": " The initialized clone.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The cloned event",
            "type": "Object",
            "description": " The cloned event"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.type.Native",
      "appearsIn": [
        "qx.event.type.Native"
      ]
    },
    "getModifiers": {
      "location": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return in a bit map, which modifier keys are pressed. The constants\n {@link #SHIFT<em>MASK}, {@link #CTRL</em>MASK}, {@link #ALT<em>MASK},\n {@link #META</em>MASK} and {@link #CAPSLOCK_MASK} define the bit positions\n of the corresponding keys.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} A bit map with the pressed modifier keys.",
            "type": "Integer",
            "description": " A bit map with the pressed modifier keys."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getKeyLockState": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return in a bit map, which lock keys are pressed. The constants\n {@link #CAPSLOCK<em>MASK}, {@link #NUMLOCK</em>MASK}, and {@link #SCROLLLOCK_MASK}\n define the bit positions of the corresponding keys.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} A bit map with the locked keys.",
            "type": "Integer",
            "description": " A bit map with the locked keys."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCtrlPressed": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the ctrl key is pressed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the ctrl key is pressed.",
            "type": "Boolean",
            "description": " whether the ctrl key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isShiftPressed": {
      "location": {
        "start": {
          "line": 148,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the shift key is pressed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the shift key is pressed.",
            "type": "Boolean",
            "description": " whether the shift key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isAltPressed": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the alt key is pressed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the alt key is pressed.",
            "type": "Boolean",
            "description": " whether the alt key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isMetaPressed": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 170,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the meta key is pressed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the meta key is pressed.",
            "type": "Boolean",
            "description": " whether the meta key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCapsLocked": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 179,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the caps-lock modifier is active</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the CapsLock key is pressed.",
            "type": "Boolean",
            "description": " whether the CapsLock key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isNumLocked": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the num-lock modifier is active</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the NumLock key is pressed.",
            "type": "Boolean",
            "description": " whether the NumLock key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isScrollLocked": {
      "location": {
        "start": {
          "line": 195,
          "column": 4
        },
        "end": {
          "line": 197,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the scroll-lock modifier is active</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the ScrollLock key is pressed.",
            "type": "Boolean",
            "description": " whether the ScrollLock key is pressed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCtrlOrCommandPressed": {
      "location": {
        "start": {
          "line": 205,
          "column": 4
        },
        "end": {
          "line": 217,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the ctrl key or (on the Mac) the command key is pressed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the command key is pressed on the Mac\n           or the ctrl key is pressed on another system.",
            "type": "Boolean",
            "description": " <code>true</code> if the command key is pressed on the Mac\n           or the ctrl key is pressed on another system."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": [
    "qx.event.type.KeyInput",
    "qx.event.type.KeySequence",
    "qx.event.type.Mouse",
    "qx.event.type.Touch"
  ]
}