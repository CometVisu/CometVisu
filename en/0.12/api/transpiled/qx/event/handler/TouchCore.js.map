{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/event/handler/TouchCore.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "implement",
    "core",
    "IDisposable",
    "statics",
    "TAP_MAX_DISTANCE",
    "Environment",
    "get",
    "SWIPE_DIRECTION",
    "x",
    "y",
    "SWIPE_MIN_DISTANCE",
    "SWIPE_MIN_VELOCITY",
    "LONGTAP_TIME",
    "construct",
    "target",
    "emitter",
    "__target",
    "__emitter",
    "_initTouchObserver",
    "__pointers",
    "__touchStartPosition",
    "members",
    "__onTouchEventWrapper",
    "__originalTarget",
    "__startTime",
    "__beginScalingDistance",
    "__beginRotation",
    "__touchEventNames",
    "lang",
    "Function",
    "listener",
    "_onTouchEvent",
    "engineVersion",
    "parseInt",
    "i",
    "length",
    "bom",
    "Event",
    "addNativeListener",
    "_stopTouchObserver",
    "removeNativeListener",
    "domEvent",
    "_commonTouchEventHandler",
    "_getScalingDistance",
    "touch0",
    "touch1",
    "Math",
    "sqrt",
    "pow",
    "pageX",
    "pageY",
    "_getRotationAngle",
    "atan2",
    "PI",
    "_calcTouchesDelta",
    "touches",
    "delta",
    "push",
    "_calcSingleTouchDelta",
    "touch",
    "hasOwnProperty",
    "identifier",
    "touchStartPosition",
    "deltaX",
    "floor",
    "clientX",
    "deltaY",
    "clientY",
    "axis",
    "abs",
    "type",
    "_mapPointerEvent",
    "_detectTouchesByPointer",
    "changedTouches",
    "targetTouches",
    "_getTarget",
    "scale",
    "currentScalingDistance",
    "rotation",
    "currentRotation",
    "_rotation",
    "_fireEvent",
    "pointerId",
    "pointer",
    "toLowerCase",
    "indexOf",
    "getTarget",
    "nodeType",
    "parentNode",
    "targetForIE",
    "__evaluateTarget",
    "hitTargets",
    "document",
    "msElementsFromPoint",
    "currentTarget",
    "pointerEvents",
    "element",
    "Style",
    "emit",
    "dispose",
    "event",
    "handler",
    "TouchCore"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Tino Butz (tbtz)\n     * Christian Hagendorn (chris_schmidt)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Listens for native touch events and fires composite events like \"tap\" and\n * \"swipe\"\n *\n * @ignore(qx.event.*)\n */\nqx.Bootstrap.define(\"qx.event.handler.TouchCore\", {\n\n  extend : Object,\n  implement: [ qx.core.IDisposable ],\n\n  statics :\n  {\n    /** @type {Integer} The maximum distance of a tap. Only if the x or y distance of\n     *      the performed tap is less or equal the value of this constant, a tap\n     *      event is fired.\n     */\n    TAP_MAX_DISTANCE : qx.core.Environment.get(\"os.name\") != \"android\" ? 10 : 40,\n\n\n    /** @type {Map} The direction of a swipe relative to the axis */\n    SWIPE_DIRECTION :\n    {\n      x : [\"left\", \"right\"],\n      y : [\"up\", \"down\"]\n    },\n\n\n    /** @type {Integer} The minimum distance of a swipe. Only if the x or y distance\n     *      of the performed swipe is greater as or equal the value of this\n     *      constant, a swipe event is fired.\n     */\n    SWIPE_MIN_DISTANCE : qx.core.Environment.get(\"os.name\") != \"android\" ? 11 : 41,\n\n    /** @type {Integer} The minimum velocity of a swipe. Only if the velocity of the\n     *      performed swipe is greater as or equal the value of this constant, a\n     *      swipe event is fired.\n     */\n    SWIPE_MIN_VELOCITY : 0,\n\n\n    /**\n     * @type {Integer} The time delta in milliseconds to fire a long tap event.\n     */\n    LONGTAP_TIME : qx.core.Environment.get(\"device.touch\")? 500: 99999\n  },\n\n\n  /**\n   * Create a new instance\n   *\n   * @param target {Element} element on which to listen for native touch events\n   * @param emitter {qx.event.Emitter} Event emitter object\n   */\n  construct : function(target, emitter)\n  {\n    this.__target = target;\n    this.__emitter = emitter;\n    this._initTouchObserver();\n    this.__pointers = [];\n\n    this.__touchStartPosition = {};\n  },\n\n\n  members :\n  {\n    __target : null,\n    __emitter : null,\n    __onTouchEventWrapper : null,\n\n    __originalTarget : null,\n\n    __touchStartPosition : null,\n    __startTime : null,\n\n    __beginScalingDistance : null,\n    __beginRotation : null,\n\n    __pointers : null,\n\n    __touchEventNames : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native touch event listeners.\n     */\n    _initTouchObserver : function()\n    {\n      this.__onTouchEventWrapper = qx.lang.Function.listener(this._onTouchEvent, this);\n\n      this.__touchEventNames = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"];\n\n      if (qx.core.Environment.get(\"event.mspointer\")) {\n        var engineVersion = parseInt(qx.core.Environment.get(\"engine.version\"), 10);\n        if (engineVersion == 10) {\n          // IE 10\n          this.__touchEventNames = [\"MSPointerDown\", \"MSPointerMove\", \"MSPointerUp\", \"MSPointerCancel\"];\n        } else {\n          // IE 11+\n          this.__touchEventNames = [\"pointerdown\", \"pointermove\", \"pointerup\", \"pointercancel\"];\n        }\n      }\n\n      for (var i = 0; i < this.__touchEventNames.length; i++) {\n        qx.bom.Event.addNativeListener(this.__target, this.__touchEventNames[i], this.__onTouchEventWrapper);\n      }\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Disconnects the native touch event listeners.\n     */\n    _stopTouchObserver : function()\n    {\n      for (var i = 0; i < this.__touchEventNames.length; i++) {\n        qx.bom.Event.removeNativeListener(this.__target, this.__touchEventNames[i], this.__onTouchEventWrapper);\n      }\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for native touch events.\n     *\n     * @param domEvent {Event} The touch event from the browser.\n     */\n    _onTouchEvent : function(domEvent)\n    {\n      this._commonTouchEventHandler(domEvent);\n    },\n\n\n    /**\n     * Calculates the scaling distance between two touches.\n     * @param touch0 {Event} The touch event from the browser.\n     * @param touch1 {Event} The touch event from the browser.\n     * @return {Number} the calculated distance.\n     */\n    _getScalingDistance : function(touch0, touch1) {\n      return(Math.sqrt( Math.pow(touch0.pageX - touch1.pageX, 2) + Math.pow(touch0.pageY - touch1.pageY, 2) ));\n    },\n\n\n    /**\n     * Calculates the rotation between two touches.\n     * @param touch0 {Event} The touch event from the browser.\n     * @param touch1 {Event} The touch event from the browser.\n     * @return {Number} the calculated rotation.\n     */\n    _getRotationAngle :  function(touch0, touch1) {\n      var x = touch0.pageX - touch1.pageX;\n      var y = touch0.pageY - touch1.pageY;\n      return(Math.atan2(y, x)*180/Math.PI);\n    },\n\n\n    /**\n     * Calculates the delta of the touch position relative to its position when <code>touchstart/code> event occurred.\n     * @param touches {Array} an array with the current active touches, provided by <code>touchmove/code> event.\n     * @return {Array} an array containing objects with the calculated delta as <code>x</code>,\n     * <code>y</code> and the identifier of the corresponding touch.\n     */\n    _calcTouchesDelta : function(touches) {\n      var delta = [];\n      for (var i = 0; i < touches.length; i++) {\n        delta.push(this._calcSingleTouchDelta(touches[i]));\n      }\n      return delta;\n    },\n\n\n    /**\n     * Calculates the delta of one single touch position relative to its position when <code>touchstart/code> event occurred.\n     * @param touch {Event} the current active touch, provided by <code>touchmove/code> event.\n     * @return {Map} a map containing deltaX as <code>x</code>, deltaY as <code>y</code>, the direction of the movement as <code>axis</code> and the touch identifier as <code>identifier</code>.\n     */\n    _calcSingleTouchDelta : function(touch) {\n      if (this.__touchStartPosition.hasOwnProperty(touch.identifier)) {\n        var touchStartPosition = this.__touchStartPosition[touch.identifier];\n        var deltaX = Math.floor(touch.clientX - touchStartPosition[0]);\n        var deltaY = Math.floor(touch.clientY - touchStartPosition[1]);\n        var axis = \"x\";\n        if (Math.abs(deltaX / deltaY) < 1) {\n          axis = \"y\";\n        }\n        return {\n          \"x\": deltaX,\n          \"y\": deltaY,\n          \"axis\": axis,\n          \"identifier\": touch.identifier\n        };\n      } else {\n        return {\n          \"x\": 0,\n          \"y\": 0,\n          \"axis\": null,\n          \"identifier\": touch.identifier\n        };\n      }\n    },\n\n\n    /**\n     * Called by an event handler.\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String ? null} type of the event\n     */\n    _commonTouchEventHandler : function(domEvent, type)\n    {\n      var type = type || domEvent.type;\n      if (qx.core.Environment.get(\"event.mspointer\")) {\n        type = this._mapPointerEvent(type);\n        var touches = this._detectTouchesByPointer(domEvent, type);\n\n        domEvent.changedTouches = touches;\n        domEvent.targetTouches = touches;\n        domEvent.touches = touches;\n      }\n\n      domEvent.delta = [];\n\n      if (type == \"touchstart\") {\n        this.__originalTarget = this._getTarget(domEvent);\n\n        if(domEvent.touches && domEvent.touches.length > 1) {\n          this.__beginScalingDistance = this._getScalingDistance(domEvent.touches[0],domEvent.touches[1]);\n          this.__beginRotation = this._getRotationAngle(domEvent.touches[0], domEvent.touches[1]);\n        }\n\n        for (var i = 0; i < domEvent.changedTouches.length; i++) {\n          var touch = domEvent.changedTouches[i];\n          this.__touchStartPosition[touch.identifier] = [touch.clientX,touch.clientY];\n        }\n      }\n\n      if(type == \"touchmove\") {\n        // Polyfill for scale\n        if(typeof domEvent.scale == \"undefined\" && domEvent.targetTouches.length > 1) {\n          var currentScalingDistance = this._getScalingDistance(domEvent.targetTouches[0],domEvent.targetTouches[1]);\n          domEvent.scale = currentScalingDistance / this.__beginScalingDistance;\n        }\n        // Polyfill for rotation\n        if((typeof domEvent.rotation == \"undefined\" || qx.core.Environment.get(\"event.mspointer\")) && domEvent.targetTouches.length > 1) {\n          var currentRotation = this._getRotationAngle(domEvent.targetTouches[0], domEvent.targetTouches[1]);\n          domEvent._rotation = currentRotation - this.__beginRotation;\n        }\n\n        domEvent.delta = this._calcTouchesDelta(domEvent.targetTouches);\n      }\n\n      this._fireEvent(domEvent, type, this.__originalTarget);\n\n      if (qx.core.Environment.get(\"event.mspointer\")) {\n        if (type == \"touchend\" || type == \"touchcancel\") {\n          delete this.__pointers[domEvent.pointerId];\n        }\n      }\n\n      if ((type == \"touchend\" || type == \"touchcancel\") && domEvent.changedTouches[0]) {\n        delete this.__touchStartPosition[domEvent.changedTouches[0].identifier];\n      }\n    },\n\n\n    /**\n    * Creates an array with all current used touches out of multiple serial pointer events.\n    * Needed because pointerEvents do not provide a touch list.\n    * @param domEvent {Event} DOM event\n    * @param type {String ? null} type of the event\n    * @return {Array} touch list array.\n    */\n    _detectTouchesByPointer : function(domEvent, type) {\n      var touches = [];\n      if (type == \"touchstart\") {\n        this.__pointers[domEvent.pointerId] = domEvent;\n      } else if (type == \"touchmove\") {\n        this.__pointers[domEvent.pointerId] = domEvent;\n      }\n\n      for (var pointerId in this.__pointers) {\n        var pointer = this.__pointers[pointerId];\n        touches.push(pointer);\n      }\n\n      return touches;\n    },\n\n\n    /**\n    * Maps a pointer event type to the corresponding touch event type.\n    * @param type {String} the event type to parse.\n    * @return {String} the parsed event name.\n    */\n    _mapPointerEvent : function(type)\n    {\n      type = type.toLowerCase();\n\n      if (type.indexOf(\"pointerdown\") !== -1) {\n        return \"touchstart\";\n      } else if (type.indexOf(\"pointerup\") !== -1) {\n        return \"touchend\";\n      } else if (type.indexOf(\"pointermove\") !== -1) {\n          return \"touchmove\";\n      } else if (type.indexOf(\"pointercancel\") !== -1) {\n        return \"touchcancel\";\n      }\n\n      return type;\n    },\n\n\n    /**\n     * Return the target of the event.\n     *\n     * @param domEvent {Event} DOM event\n     * @return {Element} Event target\n     */\n    _getTarget : function(domEvent)\n    {\n      var target = qx.bom.Event.getTarget(domEvent);\n\n      // Text node. Fix Safari Bug, see http://www.quirksmode.org/js/events_properties.html\n      if (qx.core.Environment.get(\"engine.name\") == \"webkit\")\n      {\n        if (target && target.nodeType == 3) {\n          target = target.parentNode;\n        }\n      } else if(qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n                qx.core.Environment.get(\"browser.documentmode\") < 11) {\n        // Fix for IE10 and pointer-events:none\n        //\n        // Changed the condition above to match exactly those browsers\n        // for which the fix was intended\n        // See: https://github.com/qooxdoo/qooxdoo/issues/9481\n        //\n        var targetForIE = this.__evaluateTarget(domEvent);\n        if(targetForIE) {\n          target = targetForIE;\n        }\n      }\n\n      return target;\n    },\n\n\n    /**\n     * This method fixes \"pointer-events:none\" for Internet Explorer 10.\n     * Checks which elements are placed to position x/y and traverses the array\n     * till one element has no \"pointer-events:none\" inside its style attribute.\n     * @param domEvent {Event} DOM event\n     * @return {Element | null} Event target\n     */\n    __evaluateTarget : function(domEvent) {\n      var clientX = null;\n      var clientY = null;\n      if(domEvent && domEvent.touches && domEvent.touches.length !== 0){\n        clientX = domEvent.touches[0].clientX;\n        clientY = domEvent.touches[0].clientY;\n      }\n\n      // Retrieve an array with elements on point X/Y.\n      var hitTargets = document.msElementsFromPoint(clientX, clientY);\n      if(hitTargets) {\n        // Traverse this array for the elements which has no pointer-events:none inside.\n        for (var i = 0; i < hitTargets.length; i++) {\n          var currentTarget = hitTargets[i];\n          var pointerEvents = qx.bom.element.Style.get(currentTarget, \"pointer-events\", 3);\n\n          if (pointerEvents != \"none\") {\n            return currentTarget;\n          }\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Fire a touch event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String ? null} type of the event\n     * @param target {Element ? null} event target\n     */\n    _fireEvent : function(domEvent, type, target)\n    {\n      if (!target) {\n        target = this._getTarget(domEvent);\n      }\n\n      var type = type || domEvent.type;\n\n      if (target && target.nodeType && this.__emitter)\n      {\n        this.__emitter.emit(type, domEvent);\n      }\n    },\n\n    /**\n     * Dispose this object\n     */\n    dispose : function()\n    {\n      this._stopTouchObserver();\n      this.__originalTarget = this.__target = this.__touchEventNames = this.__pointers = this.__emitter = this.__beginScalingDistance = this.__beginRotation = null;\n    }\n  }\n\n});\n"
  ]
}