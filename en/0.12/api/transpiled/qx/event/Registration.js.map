{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/Registration.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__managers",
    "getManager",
    "target",
    "window",
    "nodeType",
    "dom",
    "Node",
    "getWindow",
    "isWindow",
    "hash",
    "$$hash",
    "core",
    "ObjectRegistry",
    "toHashCode",
    "manager",
    "event",
    "Manager",
    "removeManager",
    "mgr",
    "id",
    "getWindowId",
    "addListener",
    "type",
    "listener",
    "self",
    "capture",
    "removeListener",
    "removeListenerById",
    "removeAllListeners",
    "deleteAllListeners",
    "targetKey",
    "hasListener",
    "serializeListeners",
    "createEvent",
    "clazz",
    "args",
    "Event",
    "obj",
    "Pool",
    "getInstance",
    "getObject",
    "init",
    "apply",
    "setType",
    "dispatchEvent",
    "__fireEvent",
    "evt",
    "fireEvent",
    "tracker",
    "Utils",
    "then",
    "getDefaultPrevented",
    "fireEventAsync",
    "Environment",
    "get",
    "Promise",
    "resolve",
    "Error",
    "classname",
    "__fireNonBubblingEvent",
    "fireNonBubblingEvent",
    "arguments",
    "fireNonBubblingEventAsync",
    "select",
    "promise",
    "PRIORITY_FIRST",
    "PRIORITY_NORMAL",
    "PRIORITY_LAST",
    "__handlers",
    "addHandler",
    "handler",
    "push",
    "sort",
    "a",
    "b",
    "PRIORITY",
    "getHandlers",
    "__dispatchers",
    "addDispatcher",
    "dispatcher",
    "priority",
    "getDispatchers",
    "Registration"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Wrapper for browser generic event handling.\n *\n * Supported events differ from target to target. Generally the handlers\n * in {@link qx.event.handler} defines the available features.\n *\n * @require(qx.event.Manager)\n * @require(qx.dom.Node)\n * @require(qx.lang.Function)\n */\nqx.Class.define(\"qx.event.Registration\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Static list of all instantiated event managers. The key is the qooxdoo\n     * hash value of the corresponding window\n     */\n    __managers : {},\n\n\n    /**\n     * Get an instance of the event manager, which can handle events for the\n     * given target.\n     *\n     * @param target {Object} Any valid event target\n     * @return {qx.event.Manager} The event manger for the target.\n     */\n    getManager : function(target)\n    {\n      if (target == null)\n      {\n        if (qx.core.Environment.get(\"qx.debug\"))\n        {\n          qx.log.Logger.error(\"qx.event.Registration.getManager(null) was called!\");\n          qx.log.Logger.trace(this);\n        }\n\n        target = window;\n      }\n      else if (target.nodeType)\n      {\n        target = qx.dom.Node.getWindow(target);\n      }\n      else if (!qx.dom.Node.isWindow(target))\n      {\n        target = window;\n      }\n\n      var hash = target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var manager = this.__managers[hash];\n\n      if (!manager)\n      {\n        manager = new qx.event.Manager(target, this);\n        this.__managers[hash] = manager;\n      }\n\n      return manager;\n    },\n\n\n    /**\n     * Removes a manager for a specific window from the list.\n     *\n     * Normally only used when the manager gets disposed through\n     * an unload event of the attached window.\n     *\n     * @param mgr {qx.event.Manager} The manager to remove\n     */\n    removeManager : function(mgr)\n    {\n      var id = mgr.getWindowId();\n      delete this.__managers[id];\n    },\n\n\n    /**\n     * Add an event listener to a DOM target. The event listener is passed an\n     * instance of {@link qx.event.type.Event} containing all relevant information\n     * about the event as parameter.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Name of the event e.g. \"click\", \"keydown\", ...\n     * @param listener {Function} Event listener function\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {var} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener : function(target, type, listener, self, capture) {\n      return this.getManager(target).addListener(target, type, listener, self, capture);\n    },\n\n\n    /**\n     * Remove an event listener from an event target.\n     *\n     * Note: All registered event listeners will automatically at page unload\n     *   so it is not necessary to detach events in the destructor.\n     *\n     * @param target {Object} The event target\n     * @param type {String} Name of the event\n     * @param listener {Function} The pointer to the event listener\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener.\n     * @param capture {Boolean} Whether to remove the event listener of\n     *    the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the event was removed. Return <code>false</code> if\n     *    the event was already removed before.\n     */\n    removeListener : function(target, type, listener, self, capture) {\n      return this.getManager(target).removeListener(target, type, listener, self, capture);\n    },\n\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param target {Object} The event target\n     * @param id {var} The id returned by {@link #addListener}\n     * @return {Boolean} Whether the event was removed. Return <code>false</code> if\n     *    the event was already removed before.\n     */\n    removeListenerById : function(target, id) {\n      return this.getManager(target).removeListenerById(target, id);\n    },\n\n\n    /**\n     * Remove all event listeners, which are attached to the given event target.\n     *\n     * @param target {Object} The event target to remove all event listeners from.\n     * @return {Boolean} Whether the events were existant and were removed successfully.\n     */\n    removeAllListeners : function(target) {\n      return this.getManager(target).removeAllListeners(target);\n    },\n\n\n    /**\n     * Internal helper for deleting the listeners map used during shutdown.\n     *\n     * @param target {Object} The event target to delete the internal map for\n     *    all event listeners.\n     *\n     * @internal\n     */\n    deleteAllListeners : function(target) {\n      var targetKey = target.$$hash;\n      if (targetKey) {\n        this.getManager(target).deleteAllListeners(targetKey);\n      }\n    },\n\n\n    /**\n     * Check whether there are one or more listeners for an event type\n     * registered at the target.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} The event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the target has event listeners of the given type.\n     */\n    hasListener : function(target, type, capture) {\n      return this.getManager(target).hasListener(target, type, capture);\n    },\n\n\n    /**\n     * Returns a serialized array of all events attached on the given target.\n     *\n     * @param target {Object} Any valid event target\n     * @return {Map[]} Array of maps where everyone contains the keys:\n     *   <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.\n     */\n    serializeListeners : function(target) {\n      return this.getManager(target).serializeListeners(target);\n    },\n\n\n    /**\n     * Get an event instance of the given class, which can be dispatched using\n     * an event manager. The created events must be initialized using\n     * {@link qx.event.type.Event#init}.\n     *\n     * @param type {String} The type of the event to create\n     * @param clazz {Object?qx.event.type.Event} The event class to use\n     * @param args {Array?null} Array which will be passed to\n     *       the event's init method.\n     * @return {qx.event.type.Event} An instance of the given class.\n     */\n    createEvent : function(type, clazz, args)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (arguments.length > 1 && clazz === undefined) {\n          throw new Error(\"Create event of type \" + type + \" with undefined class. Please use null to explicit fallback to default event type!\");\n        }\n      }\n\n      // Fallback to default\n      if (clazz == null) {\n        clazz = qx.event.type.Event;\n      }\n\n      var obj = qx.event.Pool.getInstance().getObject(clazz);\n\n      // Initialize with given arguments\n      args ? obj.init.apply(obj, args) : obj.init();\n\n      // Setup the type\n      // Note: Native event may setup this later or using init() above\n      // using the native information.\n      if (type) {\n        obj.setType(type);\n      }\n\n      return obj;\n    },\n\n\n    /**\n     * Dispatch an event object on the given target.\n     *\n     * It is normally better to use {@link #fireEvent} because it uses\n     * the event pooling and is quite handy otherwise as well. After dispatching\n     * the event object will be pooled for later reuse or disposed.\n     *\n     * @param target {Object} Any valid event target\n     * @param event {qx.event.type.Event} The event object to dispatch. The event\n     *       object must be obtained using {@link #createEvent} and initialized\n     *       using {@link qx.event.type.Event#init}.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    dispatchEvent : function(target, event) {\n      return this.getManager(target).dispatchEvent(target, event);\n    },\n\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Event} the event\n     * @see #createEvent\n     */\n    __fireEvent : function(target, type, clazz, args)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (arguments.length > 2 && clazz === undefined && args !== undefined) {\n          throw new Error(\"Create event of type \" + type + \" with undefined class. Please use null to explicit fallback to default event type!\");\n        }\n\n        var msg = \"Could not fire event '\" + type + \"' on target '\" + (target ? target.classname : \"undefined\") +\"': \";\n\n        qx.core.Assert.assertNotUndefined(target, msg + \"Invalid event target.\");\n        qx.core.Assert.assertNotNull(target, msg + \"Invalid event target.\");\n      }\n\n      var evt = this.createEvent(type, clazz||null, args);\n      this.getManager(target).dispatchEvent(target, evt);\n      return evt;\n    },\n\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     *\n     * Note about Promises in v6.0: this method has changed to return either a boolean (true if the\n     * event was prevented) or a promise which will evaluate to the same thing; this is\n     * because events are now asynchronous and preventDefault is inherently synchronous.\n     * However, although this changing in the return type is conspicuous it does not necessarily\n     * introduce a backwards compatibility issue because the \"truthy\" nature of the return\n     * is preserved.  Code which needs to take care of asynchronous issues will need to change,\n     * but that was necessary anyway, and it is rare to use the return value of this method (only\n     * one class in Qooxdoo used it).\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     * @see #createEvent\n     */\n    fireEvent : function(target, type, clazz, args)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (arguments.length > 2 && clazz === undefined && args !== undefined) {\n          throw new Error(\"Create event of type \" + type + \" with undefined class. Please use null to explicit fallback to default event type!\");\n        }\n\n        var msg = \"Could not fire event '\" + type + \"' on target '\" + (target ? target.classname : \"undefined\") +\"': \";\n\n        qx.core.Assert.assertNotUndefined(target, msg + \"Invalid event target.\");\n        qx.core.Assert.assertNotNull(target, msg + \"Invalid event target.\");\n      }\n\n      var evt = this.createEvent(type, clazz||null, args);\n      var tracker = {};\n      var self = this;\n      qx.event.Utils.then(tracker, function() {\n          return self.getManager(target).dispatchEvent(target, evt);\n        });\n      return qx.event.Utils.then(tracker, function() {\n        return !evt.getDefaultPrevented();\n      });\n    },\n\n\n    /**\n     * Create an event object and dispatch it on the given target; equivalent to fireEvent, except that it\n     * always returns a promise\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     * \tif the default was prevented, the promise is rejected\n     * @see #createEvent\n     */\n    fireEventAsync : function(target, type, clazz, args)\n    {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        return qx.Promise.resolve(this.fireEvent(target, type, clazz, args));\n      } else {\n        throw new Error(this.classname + \".fireEventAsync not supported because qx.promise==false\");\n      }\n    },\n\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Event} the event\n     * @see #createEvent\n     */\n    __fireNonBubblingEvent : function(target, type, clazz, args)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (arguments.length > 2 && clazz === undefined && args !== undefined) {\n          throw new Error(\"Create event of type \" + type + \" with undefined class. Please use null to explicit fallback to default event type!\");\n        }\n      }\n\n      var mgr = this.getManager(target);\n      if (!mgr.hasListener(target, type, false)) {\n        return null;\n      }\n\n      var evt = this.createEvent(type, clazz||null, args);\n      mgr.dispatchEvent(target, evt);\n      return evt;\n    },\n\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     * @see #createEvent\n     */\n    fireNonBubblingEvent : function(target, type, clazz, args)\n    {\n      var evt = this.__fireNonBubblingEvent.apply(this, arguments);\n      if (evt === null) {\n      \treturn true;\n      }\n      return !evt.getDefaultPrevented();\n    },\n\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     * \tif the default was prevented, the promise is rejected\n     * @see #createEvent\n     */\n    fireNonBubblingEventAsync : qx.core.Environment.select(\"qx.promise\", {\n      \"true\": function(target, type, clazz, args) {\n        var evt = this.__fireNonBubblingEvent.apply(this, arguments);\n        if (evt === null) {\n          return qx.Promise.resolve(true);\n        }\n        return evt.promise();\n      },\n      \"false\": function() {\n        throw new Error(this.classname + \".fireNonBubblingEventAsync not supported because qx.promise==false\");\n      }\n    }),\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER/DISPATCHER PRIORITY\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Integer} Highest priority. Used by handlers and dispatchers. */\n    PRIORITY_FIRST : -32000,\n\n    /** @type {Integer} Default priority. Used by handlers and dispatchers. */\n    PRIORITY_NORMAL : 0,\n\n    /** @type {Integer} Lowest priority. Used by handlers and dispatchers. */\n    PRIORITY_LAST : 32000,\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER REGISTRATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Array} Contains all known event handlers */\n    __handlers : [],\n\n\n    /**\n     * Register an event handler.\n     *\n     * @param handler {qx.event.IEventHandler} Event handler to add\n     * @throws {Error} if the handler does not have the IEventHandler interface.\n     */\n    addHandler : function(handler)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInterface(handler, qx.event.IEventHandler, \"Invalid event handler.\");\n      }\n\n      // Append to list\n      this.__handlers.push(handler);\n\n      // Re-sort list\n      this.__handlers.sort(function(a, b) {\n        return a.PRIORITY - b.PRIORITY;\n      });\n    },\n\n\n    /**\n     * Get a list of registered event handlers.\n     *\n     * @return {qx.event.IEventHandler[]} registered event handlers\n     */\n    getHandlers : function() {\n      return this.__handlers;\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT DISPATCHER REGISTRATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Array} Contains all known event dispatchers */\n    __dispatchers : [],\n\n\n    /**\n     * Register an event dispatcher.\n     *\n     * @param dispatcher {qx.event.IEventDispatcher} Event dispatcher to add\n     * @param priority {Integer} One of\n     * {@link qx.event.Registration#PRIORITY_FIRST},\n     * {@link qx.event.Registration#PRIORITY_NORMAL}\n     *       or {@link qx.event.Registration#PRIORITY_LAST}.\n     * @throws {Error} if the dispatcher does not have the IEventHandler interface.\n     */\n    addDispatcher : function(dispatcher, priority)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInterface(dispatcher, qx.event.IEventDispatcher, \"Invalid event dispatcher!\");\n      }\n\n      // Append to list\n      this.__dispatchers.push(dispatcher);\n\n      // Re-sort list\n      this.__dispatchers.sort(function(a, b) {\n        return a.PRIORITY - b.PRIORITY;\n      });\n    },\n\n\n    /**\n     * Get a list of registered event dispatchers.\n     *\n     * @return {qx.event.IEventDispatcher[]} all registered event dispatcher\n     */\n    getDispatchers : function() {\n      return this.__dispatchers;\n    }\n  }\n});\n"
  ]
}