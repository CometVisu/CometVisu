{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/core/MBindTo.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "bindTo",
    "func",
    "varargs",
    "lang",
    "Function",
    "create",
    "self",
    "args",
    "arguments",
    "length",
    "Array",
    "fromArguments",
    "core",
    "MBindTo"
  ],
  "mappings": ";;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,iBAAhB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;;;;;;;;;;;;;AAaAC,MAAAA,MAAM,EAAG,gBAASC,IAAT,EAAeC,OAAf,EACT;AACE,eAAOT,EAAE,CAACU,IAAH,CAAQC,QAAR,CAAiBC,MAAjB,CACLJ,IADK,EAEL;AACEK,UAAAA,IAAI,EAAI,IADV;AAEEC,UAAAA,IAAI,EAAKC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GACEhB,EAAE,CAACU,IAAH,CAAQO,KAAR,CAAcC,aAAd,CAA4BH,SAA5B,EAAuC,CAAvC,CADF,GAEA;AAJX,SAFK,CAAP;AAQD;AAxBH;AAFF,GADA;AA9CAf,EAAAA,EAAE,CAACmB,IAAH,CAAQC,OAAR,CAAgBjB,aAAhB,GAAgCA,aAAhC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright:\n     2009-2010 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Mixin to add a bindTo method to a class, making it easy to bind a function\n * to an object instance for use in lieu of calls to static method\n * qx.lang.Function.bind().\n *\n * The easiest (but not necessarily most efficient) way to use this mixin is\n * to include it in qx.core.Object by adding this line some place in the\n * application code (typically in main()):\n *\n * <pre>\n *   qx.Class.include(qx.core.Object, qx.core.MBindTo);\n * </pre>\n *\n * If object footprint (memory use) is of significant concern, that may be a\n * bit excessive since every object which is a descendent of qx.core.Object\n * will have the methods defined in the mixin. Instead, if a certain class\n * will have many functions bound to it (of particular use for callback\n * functions), qx.Class.include() could be used to include this mixin in that\n * class instead of in qx.core.Object.\n *\n * Alternatively, that class may be subclassed, and the 'include' key of the\n * class configuration could be used to always include this mixin in the\n * subclass. e.g.\n *\n * <pre>\n *   qx.Class.define(\"custom.Table\",\n *   {\n *     extend  : qx.ui.table.Table,\n *     include : [ qx.core.MBindTo ]\n *   });\n * </pre>\n */\nqx.Mixin.define(\"qx.core.MBindTo\",\n{\n  members :\n  {\n    /**\n     * Bind a function to this object\n     *\n     * @param func {Function}\n     *   The function to be bound\n     *\n     * @param varargs {var?}\n     *   Optional arguments to be passed to the function.\n     *\n     * @return {Function}\n     *   A wrapped version of the function that binds 'this' to the\n     *   user-provided function.\n     */\n    bindTo : function(func, varargs)\n    {\n      return qx.lang.Function.create(\n        func,\n        {\n          self  : this,\n          args  : (arguments.length > 1\n                   ? qx.lang.Array.fromArguments(arguments, 1) :\n                   null)\n        });\n    }\n  }\n});\n"
  ]
}