{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/dom/Element.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "hasChild",
    "parent",
    "child",
    "parentNode",
    "hasChildren",
    "element",
    "firstChild",
    "hasChildElements",
    "nodeType",
    "nextSibling",
    "getParentElement",
    "isInDom",
    "win",
    "window",
    "domElements",
    "document",
    "getElementsByTagName",
    "nodeName",
    "i",
    "l",
    "length",
    "insertAt",
    "node",
    "index",
    "ref",
    "childNodes",
    "insertBefore",
    "appendChild",
    "insertBegin",
    "insertEnd",
    "insertAfter",
    "lastChild",
    "remove",
    "removeChild",
    "removeChildAt",
    "replaceChild",
    "newNode",
    "oldNode",
    "replaceAt",
    "__helperElement",
    "getHelperElement",
    "key",
    "location",
    "href",
    "dom",
    "Element",
    "helper",
    "createElement",
    "core",
    "Environment",
    "get",
    "style",
    "display",
    "body",
    "create",
    "name",
    "attributes",
    "Error",
    "bom",
    "Attribute",
    "set",
    "empty",
    "innerHTML"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Manages children structures of an element. Easy and convenient APIs\n * to insert, remove and replace children.\n */\nqx.Bootstrap.define(\"qx.dom.Element\",\n{\n  statics :\n  {\n    /**\n     * Whether the given <code>child</code> is a child of <code>parent</code>\n     *\n     * @param parent {Element} parent element\n     * @param child {Node} child node\n     * @return {Boolean} true when the given <code>child</code> is a child of <code>parent</code>\n     */\n    hasChild : function(parent, child) {\n      return child.parentNode === parent;\n    },\n\n\n    /**\n     * Whether the given <code>element</code> has children.\n     *\n     * @param element {Element} element to test\n     * @return {Boolean} true when the given <code>element</code> has at least one child node\n     */\n    hasChildren : function(element) {\n      return !!element.firstChild;\n    },\n\n\n    /**\n     * Whether the given <code>element</code> has any child elements.\n     *\n     * @param element {Element} element to test\n     * @return {Boolean} true when the given <code>element</code> has at least one child element\n     */\n    hasChildElements : function(element)\n    {\n      element = element.firstChild;\n\n      while(element)\n      {\n        if (element.nodeType === 1) {\n          return true;\n        }\n\n        element = element.nextSibling;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Returns the parent element of the given element.\n     *\n     * @param element {Element} Element to find the parent for\n     * @return {Element} The parent element\n     */\n    getParentElement : function(element) {\n      return element.parentNode;\n    },\n\n\n    /**\n     * Checks if the <code>element</code> is in the DOM, but note that\n     * the method is very expensive!\n     *\n     * @param element {Element} The DOM element to check.\n     * @param win {Window} The window to check for.\n     * @return {Boolean} <code>true</code> if the <code>element</code> is in\n     *          the DOM, <code>false</code> otherwise.\n     */\n    isInDom :function(element, win)\n    {\n      if (!win) {\n        win = window;\n      }\n\n      var domElements = win.document.getElementsByTagName(element.nodeName);\n\n      for (var i=0, l=domElements.length; i<l; i++)\n      {\n        if (domElements[i] === element) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INSERTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Inserts <code>node</code> at the given <code>index</code>\n     * inside <code>parent</code>.\n     *\n     * @param node {Node} node to insert\n     * @param parent {Element} parent element node\n     * @param index {Integer} where to insert\n     * @return {Boolean} returns true (successful)\n     */\n    insertAt : function(node, parent, index)\n    {\n      var ref = parent.childNodes[index];\n\n      if (ref) {\n        parent.insertBefore(node, ref);\n      } else {\n        parent.appendChild(node);\n      }\n\n      return true;\n    },\n\n\n    /**\n     * Insert <code>node</code> into <code>parent</code> as first child.\n     * Indexes of other children will be incremented by one.\n     *\n     * @param node {Node} Node to insert\n     * @param parent {Element} parent element node\n     * @return {Boolean} returns true (successful)\n     */\n    insertBegin : function(node, parent)\n    {\n      if (parent.firstChild) {\n        this.insertBefore(node, parent.firstChild);\n      } else {\n        parent.appendChild(node);\n      }\n      return true;\n    },\n\n\n    /**\n     * Insert <code>node</code> into <code>parent</code> as last child.\n     *\n     * @param node {Node} Node to insert\n     * @param parent {Element} parent element node\n     * @return {Boolean} returns true (successful)\n     */\n    insertEnd : function(node, parent) {\n      parent.appendChild(node);\n      return true;\n    },\n\n\n    /**\n     * Inserts <code>node</code> before <code>ref</code> in the same parent.\n     *\n     * @param node {Node} Node to insert\n     * @param ref {Node} Node which will be used as reference for insertion\n     * @return {Boolean} returns true (successful)\n     */\n    insertBefore : function(node, ref)\n    {\n      ref.parentNode.insertBefore(node, ref);\n      return true;\n    },\n\n\n    /**\n     * Inserts <code>node</code> after <code>ref</code> in the same parent.\n     *\n     * @param node {Node} Node to insert\n     * @param ref {Node} Node which will be used as reference for insertion\n     * @return {Boolean} returns true (successful)\n     */\n    insertAfter : function(node, ref)\n    {\n      var parent = ref.parentNode;\n\n      if (ref == parent.lastChild) {\n        parent.appendChild(node);\n      } else {\n        return this.insertBefore(node, ref.nextSibling);\n      }\n\n      return true;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REMOVAL\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Removes the given <code>node</code> from its parent element.\n     *\n     * @param node {Node} Node to remove\n     * @return {Boolean} <code>true</code> when node was successfully removed,\n     *   otherwise <code>false</code>\n     */\n    remove : function(node)\n    {\n      if (!node.parentNode) {\n        return false;\n      }\n\n      node.parentNode.removeChild(node);\n      return true;\n    },\n\n\n    /**\n     * Removes the given <code>node</code> from the <code>parent</code>.\n     *\n     * @param node {Node} Node to remove\n     * @param parent {Element} parent element which contains the <code>node</code>\n     * @return {Boolean} <code>true</code> when node was successfully removed,\n     *   otherwise <code>false</code>\n     */\n    removeChild : function(node, parent)\n    {\n      if (node.parentNode !== parent) {\n        return false;\n      }\n\n      parent.removeChild(node);\n      return true;\n    },\n\n\n    /**\n     * Removes the node at the given <code>index</code>\n     * from the <code>parent</code>.\n     *\n     * @param index {Integer} position of the node which should be removed\n     * @param parent {Element} parent DOM element\n     * @return {Boolean} <code>true</code> when node was successfully removed,\n     *   otherwise <code>false</code>\n     */\n    removeChildAt : function(index, parent)\n    {\n      var child = parent.childNodes[index];\n\n      if (!child) {\n        return false;\n      }\n\n      parent.removeChild(child);\n      return true;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REPLACE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Replaces <code>oldNode</code> with <code>newNode</code> in the current\n     * parent of <code>oldNode</code>.\n     *\n     * @param newNode {Node} DOM node to insert\n     * @param oldNode {Node} DOM node to remove\n     * @return {Boolean} <code>true</code> when node was successfully replaced\n     */\n    replaceChild : function(newNode, oldNode)\n    {\n      if (!oldNode.parentNode) {\n        return false;\n      }\n\n      oldNode.parentNode.replaceChild(newNode, oldNode);\n      return true;\n    },\n\n\n    /**\n     * Replaces the node at <code>index</code> with <code>newNode</code> in\n     * the given parent.\n     *\n     * @param newNode {Node} DOM node to insert\n     * @param index {Integer} position of old DOM node\n     * @param parent {Element} parent DOM element\n     * @return {Boolean} <code>true</code> when node was successfully replaced\n     */\n    replaceAt : function(newNode, index, parent)\n    {\n      var oldNode = parent.childNodes[index];\n\n      if (!oldNode) {\n        return false;\n      }\n\n      parent.replaceChild(newNode, oldNode);\n      return true;\n    },\n\n\n    /**\n     * Stores helper element for element creation in WebKit\n     *\n     * @internal\n     */\n    __helperElement : {},\n\n\n\n    /**\n     * Creates and returns a DOM helper element.\n     *\n     * @param win {Window?} Window to create the element for\n     * @return {Element} The created element node\n     */\n    getHelperElement : function (win)\n    {\n      if (!win) {\n        win = window;\n      }\n\n      // key is needed to allow using different windows\n      var key = win.location.href;\n\n      if (!qx.dom.Element.__helperElement[key])\n      {\n        var helper = qx.dom.Element.__helperElement[key] = win.document.createElement(\"div\");\n\n        // innerHTML will only parsed correctly if element is appended to document\n        if (qx.core.Environment.get(\"engine.name\") == \"webkit\")\n        {\n          helper.style.display = \"none\";\n\n          win.document.body.appendChild(helper);\n        }\n      }\n\n      return qx.dom.Element.__helperElement[key];\n    },\n\n\n    /**\n     * Creates a DOM element.\n     *\n     * @param name {String} Tag name of the element\n     * @param attributes {Map?} Map of attributes to apply\n     * @param win {Window?} Window to create the element for\n     * @return {Element} The created element node\n     */\n    create : function(name, attributes, win)\n    {\n      if (!win) {\n        win = window;\n      }\n\n      if (!name) {\n        throw new Error(\"The tag name is missing!\");\n      }\n\n      var element = win.document.createElement(name);\n\n      for (var key in attributes)\n      {\n        qx.bom.element.Attribute.set(element, key, attributes[key]);\n      }\n\n      return element;\n    },\n\n\n    /**\n     * Removes all content from the given element\n     *\n     * @param element {Element} element to clean\n     * @return {String} empty string (new HTML content)\n     */\n    empty : function(element) {\n      return element.innerHTML = \"\";\n    }\n  }\n});\n"
  ]
}