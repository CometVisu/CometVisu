{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/data/store/Json.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "url",
    "delegate",
    "_marshaler",
    "data",
    "marshal",
    "Json",
    "_delegate",
    "setUrl",
    "events",
    "properties",
    "model",
    "nullable",
    "event",
    "state",
    "check",
    "init",
    "apply",
    "members",
    "__request",
    "_applyUrl",
    "value",
    "old",
    "util",
    "AliasManager",
    "getInstance",
    "resolve",
    "ResourceManager",
    "toUri",
    "_createRequest",
    "_getRequest",
    "_setRequest",
    "request",
    "dispose",
    "req",
    "io",
    "Xhr",
    "setAccept",
    "setParser",
    "addListener",
    "_onSuccess",
    "_onParseError",
    "del",
    "lang",
    "Type",
    "isFunction",
    "configureRequest",
    "_onChangePhase",
    "_onFail",
    "send",
    "ev",
    "requestPhase",
    "getData",
    "requestPhaseToStorePhase",
    "setState",
    "getTarget",
    "fireDataEvent",
    "isDisposed",
    "getResponse",
    "manipulateData",
    "toClass",
    "oldModel",
    "getModel",
    "setModel",
    "toModel",
    "reload",
    "getUrl",
    "destruct",
    "_disposeObjects",
    "_disposeSingletonObjects",
    "store"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;;AAIE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,GAAT,EAAcC,QAAd,EACZ;AACE,4CADF,CAIE;;AACA,WAAKC,UAAL,GAAkB,IAAIZ,EAAE,CAACa,IAAH,CAAQC,OAAR,CAAgBC,IAApB,CAAyBJ,QAAzB,CAAlB;AACA,WAAKK,SAAL,GAAiBL,QAAjB;;AAEA,UAAID,GAAG,IAAI,IAAX,EAAiB;AACf,aAAKO,MAAL,CAAYP,GAAZ;AACD;AACF,KAxBH;AA2BEQ,IAAAA,MAAM,EACN;AACE;AACJ;AACA;AACA;AACI,gBAAW,oBALb;;AAOE;AACJ;AACA;AACA;AACA;AACI,oBAAe,oBAZjB;;AAcE;AACJ;AACA;AACA;AACA;AACI,eAAU;AAnBZ,KA5BF;AAmDEC,IAAAA,UAAU,EACV;AACE;AACJ;AACA;AACIC,MAAAA,KAAK,EAAG;AACNC,QAAAA,QAAQ,EAAE,IADJ;AAENC,QAAAA,KAAK,EAAE;AAFD,OAJV;;AAUE;AACJ;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAG;AACNC,QAAAA,KAAK,EAAG,CACN,YADM,EACQ,QADR,EACkB,SADlB,EAC6B,WAD7B,EAEN,WAFM,EAEO,SAFP,EAEkB,SAFlB,EAE6B,QAF7B,CADF;AAKNC,QAAAA,IAAI,EAAG,YALD;AAMNH,QAAAA,KAAK,EAAG;AANF,OAfV;;AAyBE;AACJ;AACA;AACIZ,MAAAA,GAAG,EAAG;AACJc,QAAAA,KAAK,EAAE,QADH;AAEJE,QAAAA,KAAK,EAAE,WAFH;AAGJJ,QAAAA,KAAK,EAAE,WAHH;AAIJD,QAAAA,QAAQ,EAAE;AAJN;AA5BR,KApDF;AAyFEM,IAAAA,OAAO,EACP;AACEf,MAAAA,UAAU,EAAG,IADf;AAEEI,MAAAA,SAAS,EAAG,IAFd;AAIEY,MAAAA,SAAS,EAAG,IAJd;AAME;AACAC,MAAAA,SAAS,EAAE,mBAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAC9B,YAAID,KAAK,IAAI,IAAb,EAAmB;AACjB;AACAA,UAAAA,KAAK,GAAG9B,EAAE,CAACgC,IAAH,CAAQC,YAAR,CAAqBC,WAArB,GAAmCC,OAAnC,CAA2CL,KAA3C,CAAR;AACAA,UAAAA,KAAK,GAAG9B,EAAE,CAACgC,IAAH,CAAQI,eAAR,CAAwBF,WAAxB,GAAsCG,KAAtC,CAA4CP,KAA5C,CAAR;;AAEA,eAAKQ,cAAL,CAAoBR,KAApB;AACD;AACF,OAfH;;AAiBE;AACJ;AACA;AACA;AACA;AACIS,MAAAA,WAAW,EAAE,uBAAW;AACtB,eAAO,KAAKX,SAAZ;AACD,OAxBH;;AA2BE;AACJ;AACA;AACA;AACA;AACIY,MAAAA,WAAW,EAAE,qBAASC,OAAT,EAAkB;AAC7B,aAAKb,SAAL,GAAiBa,OAAjB;AACD,OAlCH;;AAqCE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIH,MAAAA,cAAc,EAAE,wBAAS5B,GAAT,EAAc;AAC5B;AACA,YAAI,KAAKkB,SAAT,EAAoB;AAClB,eAAKA,SAAL,CAAec,OAAf;;AACA,eAAKd,SAAL,GAAiB,IAAjB;AACD;;AAED,YAAIe,GAAG,GAAG,IAAI3C,EAAE,CAAC4C,EAAH,CAAMH,OAAN,CAAcI,GAAlB,CAAsBnC,GAAtB,CAAV;;AACA,aAAK8B,WAAL,CAAiBG,GAAjB,EAR4B,CAU5B;;;AACAA,QAAAA,GAAG,CAACG,SAAJ,CAAc,kBAAd,EAX4B,CAa5B;;AACAH,QAAAA,GAAG,CAACI,SAAJ,CAAc,MAAd,EAd4B,CAgB5B;AACA;;AACAJ,QAAAA,GAAG,CAACK,WAAJ,CAAgB,SAAhB,EAA2B,KAAKC,UAAhC,EAA4C,IAA5C;AACAN,QAAAA,GAAG,CAACK,WAAJ,CAAgB,YAAhB,EAA8B,KAAKE,aAAnC,EAAkD,IAAlD,EAnB4B,CAqB5B;;AACA,YAAIC,GAAG,GAAG,KAAKnC,SAAf;;AACA,YAAImC,GAAG,IAAInD,EAAE,CAACoD,IAAH,CAAQC,IAAR,CAAaC,UAAb,CAAwBH,GAAG,CAACI,gBAA5B,CAAX,EAA0D;AACxD,eAAKvC,SAAL,CAAeuC,gBAAf,CAAgCZ,GAAhC;AACD,SAzB2B,CA2B5B;;;AACAA,QAAAA,GAAG,CAACK,WAAJ,CAAgB,aAAhB,EAA+B,KAAKQ,cAApC,EAAoD,IAApD,EA5B4B,CA8B5B;;AACAb,QAAAA,GAAG,CAACK,WAAJ,CAAgB,MAAhB,EAAwB,KAAKS,OAA7B,EAAsC,IAAtC;AAEAd,QAAAA,GAAG,CAACe,IAAJ;AACD,OA/EH;;AAkFE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIF,MAAAA,cAAc,EAAG,wBAASG,EAAT,EAAa;AAC5B,YAAIC,YAAY,GAAGD,EAAE,CAACE,OAAH,EAAnB;AAAA,YACIC,wBAAwB,GAAG,EAD/B;AAAA,YAEIvC,KAFJ;AAIAuC,QAAAA,wBAAwB,GAAG;AACzB,oBAAU,YADe;AAEzB,kBAAQ,SAFiB;AAGzB,qBAAW,WAHc;AAIzB,qBAAW,WAJc;AAKzB,mBAAS,SALgB;AAMzB,qBAAW,SANc;AAOzB,yBAAe;AAPU,SAA3B;AAUAvC,QAAAA,KAAK,GAAGuC,wBAAwB,CAACF,YAAD,CAAhC;;AACA,YAAIrC,KAAJ,EAAW;AACT,eAAKwC,QAAL,CAAcxC,KAAd;AACD;AACF,OA5GH;;AA+GE;AACJ;AACA;AACA;AACA;AACIkC,MAAAA,OAAO,EAAG,iBAASE,EAAT,EAAa;AACrB,YAAIhB,GAAG,GAAGgB,EAAE,CAACK,SAAH,EAAV;AACA,aAAKC,aAAL,CAAmB,OAAnB,EAA4BtB,GAA5B;AACD,OAvHH;;AA0HE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIO,MAAAA,aAAa,EAAG,uBAASS,EAAT,EAAa;AAC3B,aAAKM,aAAL,CAAmB,YAAnB,EAAiCN,EAAE,CAACE,OAAH,EAAjC;AACD,OAnIH;;AAsIE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIZ,MAAAA,UAAU,EAAG,oBAASU,EAAT,EACb;AACE,YAAI,KAAKO,UAAL,EAAJ,EAAuB;AACrB;AACD;;AAEA,YAAIvB,GAAG,GAAGgB,EAAE,CAACK,SAAH,EAAV;AAAA,YACInD,IAAI,GAAG8B,GAAG,CAACwB,WAAJ,EADX,CALH,CAQG;;AACA,YAAIhB,GAAG,GAAG,KAAKnC,SAAf;;AACA,YAAImC,GAAG,IAAInD,EAAE,CAACoD,IAAH,CAAQC,IAAR,CAAaC,UAAb,CAAwBH,GAAG,CAACiB,cAA5B,CAAX,EAAwD;AACtDvD,UAAAA,IAAI,GAAG,KAAKG,SAAL,CAAeoD,cAAf,CAA8BvD,IAA9B,CAAP;AACD,SAZJ,CAcG;;;AACA,aAAKD,UAAL,CAAgByD,OAAhB,CAAwBxD,IAAxB,EAA8B,IAA9B;;AAEA,YAAIyD,QAAQ,GAAG,KAAKC,QAAL,EAAf,CAjBH,CAmBG;;AACA,aAAKC,QAAL,CAAc,KAAK5D,UAAL,CAAgB6D,OAAhB,CAAwB5D,IAAxB,CAAd,EApBH,CAsBG;;AACA,YAAIyD,QAAQ,IAAIA,QAAQ,CAAC5B,OAAzB,EAAkC;AAChC4B,UAAAA,QAAQ,CAAC5B,OAAT;AACD,SAzBJ,CA2BG;;;AACA,aAAKuB,aAAL,CAAmB,QAAnB,EAA6B,KAAKM,QAAL,EAA7B,EA5BH,CA8BG;;AACA,YAAI,KAAK3C,SAAT,EAAoB;AAClB,eAAKA,SAAL,CAAec,OAAf;;AACA,eAAKd,SAAL,GAAiB,IAAjB;AACD;AACH,OAjLH;;AAoLE;AACJ;AACA;AACI8C,MAAAA,MAAM,EAAE,kBAAW;AACjB,YAAIhE,GAAG,GAAG,KAAKiE,MAAL,EAAV;;AACA,YAAIjE,GAAG,IAAI,IAAX,EAAiB;AACf,eAAK4B,cAAL,CAAoB5B,GAApB;AACD;AACF;AA5LH,KA1FF;;AAyRE;AACF;AACA;AACA;AACA;AAEEkE,IAAAA,QAAQ,EAAG,oBACX;AACE,UAAI,KAAKhD,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,aAAKiD,eAAL,CAAqB,WAArB;AACD,OAHH,CAKE;AACA;;;AACA,WAAKC,wBAAL,CAA8B,YAA9B;;AACA,WAAK9D,SAAL,GAAiB,IAAjB;AACD;AAzSH,GADA;AA5CAhB,EAAAA,EAAE,CAACa,IAAH,CAAQkE,KAAR,CAAchE,IAAd,CAAmBZ,aAAnB,GAAmCA,aAAnC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * The JSON data store is responsible for fetching data from an url. The type\n * of the data has to be json.\n *\n * The loaded data will be parsed and saved in qooxdoo objects. Every value\n * of the loaded data will be stored in a qooxdoo property. The model classes\n * for the data will be created automatically.\n *\n * For the fetching itself it uses the {@link qx.io.request.Xhr} class and\n * for parsing the loaded javascript objects into qooxdoo objects, the\n * {@link qx.data.marshal.Json} class will be used.\n *\n * Please note that if you\n *\n * * upgrade from qooxdoo 1.4 or lower\n * * choose not to force the old transport\n * * use a delegate with qx.data.store.IStoreDelegate#configureRequest\n *\n * you probably need to change the implementation of your delegate to configure\n * the {@link qx.io.request.Xhr} request.\n * \n * This class only needs to be disposed if you want to abort any current I/O\n * request\n *\n */\nqx.Class.define(\"qx.data.store.Json\",\n{\n  extend : qx.core.Object,\n\n\n  /**\n   * @param url {String|null} The url where to find the data. The store starts\n   *   loading as soon as the URL is give. If you want to change some details\n   *   concerning the request, add null here and set the URL as soon as\n   *   everything is set up.\n   * @param delegate {Object?null} The delegate containing one of the methods\n   *   specified in {@link qx.data.store.IStoreDelegate}.\n   */\n  construct : function(url, delegate)\n  {\n    this.base(arguments);\n\n\n    // store the marshaler and the delegate\n    this._marshaler = new qx.data.marshal.Json(delegate);\n    this._delegate = delegate;\n\n    if (url != null) {\n      this.setUrl(url);\n    }\n  },\n\n\n  events :\n  {\n    /**\n     * Data event fired after the model has been created. The data will be the\n     * created model.\n     */\n    \"loaded\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when a parse error (i.e. broken JSON) occurred\n     * during the load. The data contains a hash of the original\n     * response and the parser error (exception object).\n     */\n    \"parseError\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when an error (aborted, timeout or failed) occurred\n     * during the load. The data contains the response of the request.\n     * If you want more details, use the {@link #changeState} event.\n     */\n    \"error\" : \"qx.event.type.Data\"\n  },\n\n\n  properties :\n  {\n    /**\n     * Property for holding the loaded model instance.\n     */\n    model : {\n      nullable: true,\n      event: \"changeModel\"\n    },\n\n\n    /**\n     * The state of the request as an url. If you want to check if the request\n     * did itâ€™s job, use, the {@link #changeState} event and check for one of the\n     * listed values.\n     */\n    state : {\n      check : [\n        \"configured\", \"queued\", \"sending\", \"receiving\",\n        \"completed\", \"aborted\", \"timeout\", \"failed\"\n      ],\n      init : \"configured\",\n      event : \"changeState\"\n    },\n\n\n    /**\n     * The url where the request should go to.\n     */\n    url : {\n      check: \"String\",\n      apply: \"_applyUrl\",\n      event: \"changeUrl\",\n      nullable: true\n    }\n  },\n\n\n  members :\n  {\n    _marshaler : null,\n    _delegate : null,\n\n    __request : null,\n\n    // apply function\n    _applyUrl: function(value, old) {\n      if (value != null) {\n        // take care of the resource management\n        value = qx.util.AliasManager.getInstance().resolve(value);\n        value = qx.util.ResourceManager.getInstance().toUri(value);\n\n        this._createRequest(value);\n      }\n    },\n\n    /**\n     * Get request\n     *\n     * @return {Object} The request.\n     */\n    _getRequest: function() {\n      return this.__request;\n    },\n\n\n    /**\n     * Set request.\n     *\n     * @param request {Object} The request.\n     */\n    _setRequest: function(request) {\n      this.__request = request;\n    },\n\n\n    /**\n     * Creates and sends a GET request with the given url.\n     *\n     * Listeners will be added to respond to the requestâ€™s \"success\",\n     * \"changePhase\" and \"fail\" event.\n     *\n     * @param url {String} The url for the request.\n     */\n    _createRequest: function(url) {\n      // dispose old request\n      if (this.__request) {\n        this.__request.dispose();\n        this.__request = null;\n      }\n\n      var req = new qx.io.request.Xhr(url);\n      this._setRequest(req);\n\n      // request json representation\n      req.setAccept(\"application/json\");\n\n      // parse as json no matter what content type is returned\n      req.setParser(\"json\");\n\n      // register the internal event before the user has the change to\n      // register its own event in the delegate\n      req.addListener(\"success\", this._onSuccess, this);\n      req.addListener(\"parseError\", this._onParseError, this);\n\n      // check for the request configuration hook\n      var del = this._delegate;\n      if (del && qx.lang.Type.isFunction(del.configureRequest)) {\n        this._delegate.configureRequest(req);\n      }\n\n      // map request phase to itâ€™s own phase\n      req.addListener(\"changePhase\", this._onChangePhase, this);\n\n      // add failed, aborted and timeout listeners\n      req.addListener(\"fail\", this._onFail, this);\n\n      req.send();\n    },\n\n\n    /**\n     * Handler called when request phase changes.\n     *\n     * Sets the storeâ€™s state.\n     *\n     * @param ev {qx.event.type.Data} The requestâ€™s changePhase event.\n     */\n    _onChangePhase : function(ev) {\n      var requestPhase = ev.getData(),\n          requestPhaseToStorePhase = {},\n          state;\n\n      requestPhaseToStorePhase = {\n        \"opened\": \"configured\",\n        \"sent\": \"sending\",\n        \"loading\": \"receiving\",\n        \"success\": \"completed\",\n        \"abort\": \"aborted\",\n        \"timeout\": \"timeout\",\n        \"statusError\": \"failed\"\n      };\n\n      state = requestPhaseToStorePhase[requestPhase];\n      if (state) {\n        this.setState(state);\n      }\n    },\n\n\n    /**\n     * Handler called when not completing the request successfully.\n     *\n     * @param ev {qx.event.type.Event} The requestâ€™s fail event.\n     */\n    _onFail : function(ev) {\n      var req = ev.getTarget();\n      this.fireDataEvent(\"error\", req);\n    },\n\n\n    /**\n     * Handler called when not completing the request successfully because\n     * of parse errors.\n     *\n     * @param ev {qx.event.type.Data} Hash map containing the original 'request'\n     *                                and the original parser 'error' exception object.\n     */\n    _onParseError : function(ev) {\n      this.fireDataEvent(\"parseError\", ev.getData());\n    },\n\n\n    /**\n     * Handler for the completion of the requests. It invokes the creation of\n     * the needed classes and instances for the fetched data using\n     * {@link qx.data.marshal.Json}.\n     *\n     * @param ev {qx.event.type.Event} The requestâ€™s success event.\n     */\n    _onSuccess : function(ev)\n    {\n      if (this.isDisposed()) {\n        return;\n      }\n\n       var req = ev.getTarget(),\n           data = req.getResponse();\n\n       // check for the data manipulation hook\n       var del = this._delegate;\n       if (del && qx.lang.Type.isFunction(del.manipulateData)) {\n         data = this._delegate.manipulateData(data);\n       }\n\n       // create the class\n       this._marshaler.toClass(data, true);\n\n       var oldModel = this.getModel();\n\n       // set the initial data\n       this.setModel(this._marshaler.toModel(data));\n\n       // get rid of the old model\n       if (oldModel && oldModel.dispose) {\n         oldModel.dispose();\n       }\n\n       // fire complete event\n       this.fireDataEvent(\"loaded\", this.getModel());\n\n       // get rid of the request object\n       if (this.__request) {\n         this.__request.dispose();\n         this.__request = null;\n       }\n    },\n\n\n    /**\n     * Reloads the data with the url set in the {@link #url} property.\n     */\n    reload: function() {\n      var url = this.getUrl();\n      if (url != null) {\n        this._createRequest(url);\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function()\n  {\n    if (this.__request != null) {\n      this._disposeObjects(\"__request\");\n    }\n\n    // The marshaler internally uses the singleton pattern\n    // (constructor.$$instance.\n    this._disposeSingletonObjects(\"_marshaler\");\n    this._delegate = null;\n  }\n});\n"
  ]
}