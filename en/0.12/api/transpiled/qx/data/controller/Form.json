{
  "className": "qx.data.controller.Form",
  "packageName": "qx.data.controller",
  "name": "Form",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 45,
        "column": 0
      },
      "end": {
        "line": 391,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (martinwittemann)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<h2>Form Controller</h2>\n<p><em>General idea</em>\n The form controller is responsible for connecting a form with a model. If no\n model is given, a model can be created. This created model will fit exactly\n to the given form and can be used for serialization. All the connections\n between the form items and the model are handled by an internal\n {@link qx.data.controller.Object}.\n<em>Features</em></p>\n<ul>\n<li>Connect a form to a model (bidirectional)</li>\n<li>Create a model for a given form\n<em>Usage</em>\nThe controller only works if both a controller and a model are set.\nCreating a model will automatically set the created model.\n<em>Cross reference</em></li>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 60,
        "column": 14
      },
      "end": {
        "line": 74,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "model {qx.core.Object | null} The model to bind the target to. The\n   given object will be set as {@link #model} property.",
          "paramName": "model",
          "description": " The model to bind the target to. The\n   given object will be set as {@link #model} property.",
          "type": [
            "qx.core.Object",
            "null"
          ]
        },
        {
          "name": "@param",
          "body": "target {qx.ui.form.Form | null} The form which contains the form\n   items. The given form will be set as {@link #target} property.",
          "paramName": "target",
          "description": " The form which contains the form\n   items. The given form will be set as {@link #target} property.",
          "type": [
            "qx.ui.form.Form",
            "null"
          ]
        },
        {
          "name": "@param",
          "body": "selfUpdate {Boolean?false} If set to true, you need to call the\n   {@link #updateModel} method to get the data in the form to the model.\n   Otherwise, the data will be synced automatically on every change of\n   the form.",
          "paramName": "selfUpdate",
          "description": " If set to true, you need to call the\n   {@link #updateModel} method to get the data in the form to the model.\n   Otherwise, the data will be synced automatically on every change of\n   the form.",
          "optional": true,
          "defaultValue": "false",
          "type": "Boolean"
        }
      ]
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data object containing the data which should be shown in the target.</p>"
          }
        ]
      },
      "name": "model",
      "propertyType": "new",
      "event": "changeModel",
      "apply": "_applyModel",
      "nullable": true,
      "allowNull": true,
      "check": "qx.core.Object"
    },
    "target": {
      "location": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The target widget which should show the data.</p>"
          }
        ]
      },
      "name": "target",
      "propertyType": "new",
      "event": "changeTarget",
      "apply": "_applyTarget",
      "nullable": true,
      "allowNull": true,
      "check": "qx.ui.form.Form"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__objectController": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__bindingOptions": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "addBindingOptions": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 144,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The form controller uses for setting up the bindings the fundamental\n binding layer, the {@link qx.data.SingleValueBinding}. To achieve a\n binding in both directions, two bindings are needed. With this method,\n you have the opportunity to set the options used for the bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the form item for which the options\n   should be used.",
            "paramName": "name",
            "description": " The name of the form item for which the options\n   should be used.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "model2target {Map} Options map used for the binding from model\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "model2target",
            "description": " Options map used for the binding from model\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "target2model {Map} Options map used for the binding from target\n   to model. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "target2model",
            "description": " Options map used for the binding from target\n   to model. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createModel": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 202,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and sets a model using the {@link qx.data.marshal.Json} object.\n Remember that this method can only work if the form is set. The created\n model will fit exactly that form. Changing the form or adding an item to\n the form will need a new model creation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "includeBubbleEvents {Boolean} Whether the model should support\n   the bubbling of change events or not.",
            "paramName": "includeBubbleEvents",
            "description": " Whether the model should support\n   the bubbling of change events or not.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object} The created model.",
            "type": "qx.core.Object",
            "description": " The created model."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateModel": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 231,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for syncing the data from entered in the form to the model.\n Please keep in mind that this method only works if you create the form\n with <code>selfUpdate</code> set to true. Otherwise, this method will\n do nothing because updates will be synced automatically on every\n change.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyTarget": {
      "location": {
        "start": {
          "line": 235,
          "column": 4
        },
        "end": {
          "line": 250,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>apply method</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "target"
      ]
    },
    "_applyModel": {
      "location": {
        "start": {
          "line": 254,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>apply method</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "model"
      ]
    },
    "__setUpBinding": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for setting up the bindings using\n {@link qx.data.controller.Object#addTarget}. All bindings are set\n up bidirectional.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__tearDownBinding": {
      "location": {
        "start": {
          "line": 342,
          "column": 4
        },
        "end": {
          "line": 358,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for removing all set up bindings using\n {@link qx.data.controller.Object#removeTarget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "oldTarget {qx.ui.form.Form} The form which has been removed.",
            "paramName": "oldTarget",
            "description": " The form which has been removed.",
            "type": "qx.ui.form.Form"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isModelSelectable": {
      "location": {
        "start": {
          "line": 370,
          "column": 4
        },
        "end": {
          "line": 373,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the given item implements\n {@link qx.ui.core.ISingleSelection} and\n {@link qx.ui.form.IModelSelection}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IForm} The form item to check.",
            "paramName": "item",
            "description": " The form item to check.",
            "type": "qx.ui.form.IForm"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if given item fits.",
            "type": "Boolean",
            "description": " true, if given item fits."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for model"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for model"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>model</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ]
      }
    },
    "getTarget": {
      "type": "function",
      "name": "getTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.form.Form",
            "desc": "Returns the value for target"
          }
        ]
      }
    },
    "setTarget": {
      "type": "function",
      "name": "setTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.form.Form",
            "paramName": "value",
            "desc": "Value for target"
          }
        ]
      }
    },
    "resetTarget": {
      "type": "function",
      "name": "resetTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>target</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 385,
        "column": 14
      },
      "end": {
        "line": 390,
        "column": 4
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n  DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}