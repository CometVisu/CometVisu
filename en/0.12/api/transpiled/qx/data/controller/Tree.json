{
  "className": "qx.data.controller.Tree",
  "packageName": "qx.data.controller",
  "name": "Tree",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.data.controller.ISelection"
  ],
  "mixins": [
    "qx.data.controller.MSelection"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 49,
        "column": 0
      },
      "end": {
        "line": 939,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (martinwittemann)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<h2>Tree Controller</h2>\n<p><em>General idea</em>\n The tree controller is the controller made for the {@link qx.ui.tree.Tree}\n widget in qooxdoo. Therefore, it is responsible for creating and adding the\n tree folders to the tree given as target.\n<em>Features</em></p>\n<ul>\n<li>Synchronize the model and the target</li>\n<li>Label and icon are bindable</li>\n<li>Takes care of the selection</li>\n<li>Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n<em>Usage</em>\nAs model, you can use every qooxdoo widget structure having one property,\nwhich is a data array holding the children of the current node. There can\nbe as many additional as you like.\nYou need to specify a model, a target, a child path and a label path to\nmake the controller work.\n<em>Cross reference</em></li>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bin a form widget, use {@link qx.data.controller.Form}</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 74,
        "column": 14
      },
      "end": {
        "line": 96,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "model {qx.core.Object?null} The root element of the model, which holds\n   the data.",
          "paramName": "model",
          "description": " The root element of the model, which holds\n   the data.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.core.Object"
        },
        {
          "name": "@param",
          "body": "target {qx.ui.tree.Tree?null} The target widgets which should be a tree.",
          "paramName": "target",
          "description": " The target widgets which should be a tree.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.ui.tree.Tree"
        },
        {
          "name": "@param",
          "body": "childPath {String?null} The name of the property in the model, which\n   holds the data array containing the children.",
          "paramName": "childPath",
          "description": " The name of the property in the model, which\n   holds the data array containing the children.",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "labelPath {String?null} The name of the property in the model,\n   which holds the value to be displayed as the label of the tree items.",
          "paramName": "labelPath",
          "description": " The name of the property in the model,\n   which holds the value to be displayed as the label of the tree items.",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The root element of the data.</p>"
          }
        ]
      },
      "name": "model",
      "propertyType": "new",
      "event": "changeModel",
      "apply": "_applyModel",
      "nullable": true,
      "allowNull": true,
      "check": "qx.core.Object"
    },
    "target": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The tree to bind the data to.</p>"
          }
        ]
      },
      "name": "target",
      "propertyType": "new",
      "event": "changeTarget",
      "apply": "_applyTarget",
      "nullable": true,
      "allowNull": true
    },
    "childPath": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the children are stored in the model.</p>"
          }
        ]
      },
      "name": "childPath",
      "propertyType": "new",
      "apply": "_applyChildPath",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "labelPath": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the value for the tree folders label\n is stored in the model classes.</p>"
          }
        ]
      },
      "name": "labelPath",
      "propertyType": "new",
      "apply": "_applyLabelPath",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "iconPath": {
      "location": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the source for the tree folders icon\n is stored in the model classes.</p>"
          }
        ]
      },
      "name": "iconPath",
      "propertyType": "new",
      "apply": "_applyIconPath",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "labelOptions": {
      "location": {
        "start": {
          "line": 167,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the label binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "name": "labelOptions",
      "propertyType": "new",
      "apply": "_applyLabelOptions",
      "nullable": true,
      "allowNull": true
    },
    "iconOptions": {
      "location": {
        "start": {
          "line": 178,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the icon binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "name": "iconOptions",
      "propertyType": "new",
      "apply": "_applyIconOptions",
      "nullable": true,
      "allowNull": true
    },
    "delegate": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delegation object, which can have one ore more function defined by the\n {@link IControllerDelegate} interface.</p>"
          }
        ]
      },
      "name": "delegate",
      "propertyType": "new",
      "apply": "_applyDelegate",
      "nullable": true,
      "allowNull": true
    },
    "selection": {
      "type": "property",
      "name": "selection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__childrenRef": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>private members</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__bindings": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__boundProperties": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__oldChildrenPath": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applyDelegate": {
      "location": {
        "start": {
          "line": 226,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   APPLY METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>If a new delegate is set, it applies the stored configuration for the\n tree folder to the already created folders once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "delegate"
      ]
    },
    "_applyIconOptions": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 242,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the icon options had been\n changed. This method will invoke a renewing of all bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map|null} The new options map.",
            "paramName": "value",
            "description": " The new options map.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old options map.",
            "paramName": "old",
            "description": " The old options map.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "iconOptions"
      ]
    },
    "_applyLabelOptions": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 254,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the label options had been\n changed. This method will invoke a renewing of all bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map|null} The new options map.",
            "paramName": "value",
            "description": " The new options map.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old options map.",
            "paramName": "old",
            "description": " The old options map.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "labelOptions"
      ]
    },
    "_applyTarget": {
      "location": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 279,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the target had been\n changed. This method will clean up the old tree and will initially\n build up the new tree containing the data from the model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.tree.Tree|null} The new tree.",
            "paramName": "value",
            "description": " The new tree.",
            "type": [
              "qx.ui.tree.Tree",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.tree.Tree|null} The old tree.",
            "paramName": "old",
            "description": " The old tree.",
            "type": [
              "qx.ui.tree.Tree",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "target"
      ]
    },
    "_applyModel": {
      "location": {
        "start": {
          "line": 289,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the model had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new tree.",
            "paramName": "value",
            "description": " The new tree.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old tree.",
            "paramName": "old",
            "description": " The old tree.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "model"
      ]
    },
    "_applyChildPath": {
      "location": {
        "start": {
          "line": 301,
          "column": 4
        },
        "end": {
          "line": 307,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the child path had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new path to the children property.",
            "paramName": "value",
            "description": " The new path to the children property.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old path to the children property.",
            "paramName": "old",
            "description": " The old path to the children property.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "childPath"
      ]
    },
    "_applyIconPath": {
      "location": {
        "start": {
          "line": 317,
          "column": 4
        },
        "end": {
          "line": 319,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the icon path had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new path to the icon property.",
            "paramName": "value",
            "description": " The new path to the icon property.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old path or the icon property.",
            "paramName": "old",
            "description": " The old path or the icon property.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "iconPath"
      ]
    },
    "_applyLabelPath": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 331,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the label path had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new path to the label property.",
            "paramName": "value",
            "description": " The new path to the label property.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old path of the label property.",
            "paramName": "old",
            "description": " The old path of the label property.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "labelPath"
      ]
    },
    "__changeModelChildren": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   EVENT HANDLER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Handler function handling the change of a length of a children array.\n This method invokes a rebuild of the corresponding subtree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Event} The changeLength event of a data array.",
            "paramName": "ev",
            "description": " The changeLength event of a data array.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__changeChildrenArray": {
      "location": {
        "start": {
          "line": 364,
          "column": 4
        },
        "end": {
          "line": 402,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler function taking care of the changes of the children array itself.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Change event for the children property.",
            "paramName": "e",
            "description": " Change event for the children property.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_createItem": {
      "location": {
        "start": {
          "line": 416,
          "column": 4
        },
        "end": {
          "line": 430,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   ITEM HANDLING\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Creates a TreeFolder and delegates the configure method if a delegate is\n set and the needed function (configureItem) is available.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.",
            "type": "qx.ui.tree.core.AbstractTreeItem",
            "description": " The created and configured TreeFolder."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__buildTree": {
      "location": {
        "start": {
          "line": 439,
          "column": 4
        },
        "end": {
          "line": 468,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper function to build up the tree corresponding to the data\n stored in the model. This function creates the root node and hands the\n recursive creation of all subtrees to the {#__updateTreeChildren}\n function.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateTreeChildren": {
      "location": {
        "start": {
          "line": 481,
          "column": 4
        },
        "end": {
          "line": 561,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Main method building up the tree folders corresponding to the given\n model node. The new created subtree will be added to the given tree node.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new\n   created subtree.",
            "paramName": "rootNode",
            "description": " The tree folder to add the new\n   created subtree.",
            "type": "qx.ui.tree.TreeFolder"
          },
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} The model nodes which represent the\n   data in the current subtree.",
            "paramName": "modelNode",
            "description": " The model nodes which represent the\n   data in the current subtree.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emptyTarget": {
      "location": {
        "start": {
          "line": 568,
          "column": 4
        },
        "end": {
          "line": 589,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all folders and bindings for the current set target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "tree {qx.ui.tree.Tree} The tree to empty.",
            "paramName": "tree",
            "description": " The tree to empty.",
            "type": "qx.ui.tree.Tree"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeAllFolders": {
      "location": {
        "start": {
          "line": 598,
          "column": 4
        },
        "end": {
          "line": 607,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all child folders of the given tree node. Also removes all\n bindings for the removed folders.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.",
            "paramName": "node",
            "description": " The used tree folder.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeFolder": {
      "location": {
        "start": {
          "line": 619,
          "column": 4
        },
        "end": {
          "line": 646,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method removing the given folder form the given root\n node. All set bindings will be removed and the old tree folder will be\n destroyed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.",
            "paramName": "treeFolder",
            "description": " The folder to remove.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the\n   treeFolder.",
            "paramName": "rootNode",
            "description": " The folder holding the\n   treeFolder.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "bindProperty": {
      "location": {
        "start": {
          "line": 670,
          "column": 4
        },
        "end": {
          "line": 699,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   BINDING STUFF\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Helper method for binding a given property from the model to the target\n widget.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePath {String | null} The path to the property in the model.\n   If you use an empty string, the whole model item will be bound.",
            "paramName": "sourcePath",
            "description": " The path to the property in the model.\n   If you use an empty string, the whole model item will be bound.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "targetPath {String} The name of the property in the target\n   widget.",
            "paramName": "targetPath",
            "description": " The name of the property in the target\n   widget.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map | null} The options to use by\n  {@link qx.data.SingleValueBinding#bind} for the binding.",
            "paramName": "options",
            "description": " The options to use by\n  {@link qx.data.SingleValueBinding#bind} for the binding.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.",
            "paramName": "targetWidget",
            "description": " The target widget.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "modelNode {var} The model node which should be bound to the target.",
            "paramName": "modelNode",
            "description": " The model node which should be bound to the target.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "bindPropertyReverse": {
      "location": {
        "start": {
          "line": 717,
          "column": 4
        },
        "end": {
          "line": 750,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for binding a given property from the target widget to\n the model.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetPath {String | null} The path to the property in the model.",
            "paramName": "targetPath",
            "description": " The path to the property in the model.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "sourcePath {String} The name of the property in the target\n   widget.",
            "paramName": "sourcePath",
            "description": " The name of the property in the target\n   widget.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map | null} The options to use by\n   {@link qx.data.SingleValueBinding#bind} for the binding.",
            "paramName": "options",
            "description": " The options to use by\n   {@link qx.data.SingleValueBinding#bind} for the binding.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.",
            "paramName": "sourceWidget",
            "description": " The source widget.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "modelNode {var} The model node which should be bound to the target.",
            "paramName": "modelNode",
            "description": " The model node which should be bound to the target.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "bindDefaultProperties": {
      "location": {
        "start": {
          "line": 765,
          "column": 4
        },
        "end": {
          "line": 774,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for binding the default properties (label and icon) from\n the model to the target widget.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node\n   corresponding to the model node.",
            "paramName": "treeNode",
            "description": " The tree node\n   corresponding to the model node.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} The model node holding the data.",
            "paramName": "modelNode",
            "description": " The model node holding the data.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__renewBindings": {
      "location": {
        "start": {
          "line": 781,
          "column": 4
        },
        "end": {
          "line": 799,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method renewing all bindings with the currently saved options and\n paths.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addBinding": {
      "location": {
        "start": {
          "line": 810,
          "column": 4
        },
        "end": {
          "line": 820,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method adding the right bindings from the given\n modelNode to the given treeNode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} The model node holding the data.",
            "paramName": "modelNode",
            "description": " The model node holding the data.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder\n   to the model node.",
            "paramName": "treeNode",
            "description": " The corresponding tree folder\n   to the model node.",
            "type": "qx.ui.tree.TreeFolder"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeBinding": {
      "location": {
        "start": {
          "line": 829,
          "column": 4
        },
        "end": {
          "line": 845,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method for removing bindings for a given model node.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} the model node for which the bindings\n   should be removed.",
            "paramName": "modelNode",
            "description": " the model node for which the bindings\n   should be removed.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_setConfigureItem": {
      "location": {
        "start": {
          "line": 860,
          "column": 4
        },
        "end": {
          "line": 870,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   DELEGATE HELPER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a configureItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "qx.data.controller.Object"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "qx.data.controller.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setCreateItem": {
      "location": {
        "start": {
          "line": 880,
          "column": 4
        },
        "end": {
          "line": 900,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate. It checks if a createItem\n is set and invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "qx.data.controller.Object"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "qx.data.controller.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setBindItem": {
      "location": {
        "start": {
          "line": 910,
          "column": 4
        },
        "end": {
          "line": 919,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a bindItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "qx.data.controller.Object"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "qx.data.controller.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.ISelection",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Setter for the selection.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.IListData} The data of the selection.",
            "paramName": "value",
            "description": " The data of the selection.",
            "type": "qx.data.IListData"
          }
        ]
      }
    },
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.ISelection",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Getter for the selection list.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "description": " The current selection."
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.ISelection",
      "property": "reset"
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value.",
            "paramName": "selection",
            "description": " List data to select as value.",
            "type": [
              "qx.data.IListData",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation.",
            "type": "null",
            "description": " The status of this operation."
          }
        ]
      }
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "description": " The current selection."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_applySelection": {
      "type": "function",
      "name": "_applySelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   APPLY METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Apply-method for setting a new selection array. Only the change listener\n will be removed from the old array and added to the new.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} The new data array for the selection.",
            "paramName": "value",
            "description": " The new data array for the selection.",
            "type": "qx.data.Array"
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array|null} The old data array for the selection.",
            "paramName": "old",
            "description": " The old data array for the selection.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          }
        ]
      }
    },
    "__changeSelectionArray": {
      "type": "function",
      "name": "__changeSelectionArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_changeTargetSelection": {
      "type": "function",
      "name": "_changeTargetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_addChangeTargetListener": {
      "type": "function",
      "name": "_addChangeTargetListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   SELECTION\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Helper method which should be called by the classes including this\n Mixin when the target changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.core.Widget|null} The new target.",
            "paramName": "value",
            "description": " The new target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.core.Widget|null} The old target.",
            "paramName": "old",
            "description": " The old target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      }
    },
    "_updateSelection": {
      "type": "function",
      "name": "_updateSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "__targetSupportsMultiSelection": {
      "type": "function",
      "name": "__targetSupportsMultiSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports multi selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports multi selection.",
            "type": "Boolean",
            "description": " true, if the target supports multi selection."
          }
        ]
      }
    },
    "__targetSupportsSingleSelection": {
      "type": "function",
      "name": "__targetSupportsSingleSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports single selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports single selection.",
            "type": "Boolean",
            "description": " true, if the target supports single selection."
          }
        ]
      }
    },
    "__selectItem": {
      "type": "function",
      "name": "__selectItem",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for selecting an item in the target. The item to select\n is defined by a given model item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} A model element.",
            "paramName": "item",
            "description": " A model element.",
            "type": "qx.core.Object"
          }
        ]
      }
    },
    "__getSelectableForModel": {
      "type": "function",
      "name": "__getSelectableForModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list item storing the given model in its model property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "model {var} The representing model of a selectable.",
            "paramName": "model",
            "description": " The representing model of a selectable.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object|null} List item or <code>null</code> if none was found",
            "type": "Object|null",
            "description": " List item or <code>null</code> if none was found"
          }
        ]
      }
    },
    "_startSelectionModification": {
      "type": "function",
      "name": "_startSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_endSelectionModification": {
      "type": "function",
      "name": "_endSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_inSelectionModification": {
      "type": "function",
      "name": "_inSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for checking the state of the selection modification.\n {@link #<em>startSelectionModification}\n {@link #</em>endSelectionModification}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if selection modification is active",
            "type": "Boolean",
            "description": " <code>true</code> if selection modification is active"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for model"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for model"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>model</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ]
      }
    },
    "getTarget": {
      "type": "function",
      "name": "getTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for target"
          }
        ]
      }
    },
    "setTarget": {
      "type": "function",
      "name": "setTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for target"
          }
        ]
      }
    },
    "resetTarget": {
      "type": "function",
      "name": "resetTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>target</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ]
      }
    },
    "getChildPath": {
      "type": "function",
      "name": "getChildPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>childPath</code>.\n\nFor further details take a look at the property definition: {@link #childPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for childPath"
          }
        ]
      }
    },
    "setChildPath": {
      "type": "function",
      "name": "setChildPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>childPath</code>.\n\nFor further details take a look at the property definition: {@link #childPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for childPath"
          }
        ]
      }
    },
    "resetChildPath": {
      "type": "function",
      "name": "resetChildPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>childPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #childPath}."
          }
        ]
      }
    },
    "getLabelPath": {
      "type": "function",
      "name": "getLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelPath</code>.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for labelPath"
          }
        ]
      }
    },
    "setLabelPath": {
      "type": "function",
      "name": "setLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelPath</code>.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for labelPath"
          }
        ]
      }
    },
    "resetLabelPath": {
      "type": "function",
      "name": "resetLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ]
      }
    },
    "getIconPath": {
      "type": "function",
      "name": "getIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconPath</code>.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for iconPath"
          }
        ]
      }
    },
    "setIconPath": {
      "type": "function",
      "name": "setIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconPath</code>.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for iconPath"
          }
        ]
      }
    },
    "resetIconPath": {
      "type": "function",
      "name": "resetIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ]
      }
    },
    "getLabelOptions": {
      "type": "function",
      "name": "getLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelOptions</code>.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for labelOptions"
          }
        ]
      }
    },
    "setLabelOptions": {
      "type": "function",
      "name": "setLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelOptions</code>.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for labelOptions"
          }
        ]
      }
    },
    "resetLabelOptions": {
      "type": "function",
      "name": "resetLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ]
      }
    },
    "getIconOptions": {
      "type": "function",
      "name": "getIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconOptions</code>.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for iconOptions"
          }
        ]
      }
    },
    "setIconOptions": {
      "type": "function",
      "name": "setIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconOptions</code>.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for iconOptions"
          }
        ]
      }
    },
    "resetIconOptions": {
      "type": "function",
      "name": "resetIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ]
      }
    },
    "getDelegate": {
      "type": "function",
      "name": "getDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>delegate</code>.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for delegate"
          }
        ]
      }
    },
    "setDelegate": {
      "type": "function",
      "name": "setDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>delegate</code>.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for delegate"
          }
        ]
      }
    },
    "resetDelegate": {
      "type": "function",
      "name": "resetDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>delegate</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 930,
        "column": 14
      },
      "end": {
        "line": 938,
        "column": 4
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n  DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}