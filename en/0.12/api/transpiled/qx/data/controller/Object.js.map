{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Object.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "model",
    "__bindings",
    "__targets",
    "setModel",
    "properties",
    "check",
    "event",
    "apply",
    "nullable",
    "dereference",
    "members",
    "_applyModel",
    "value",
    "old",
    "i",
    "length",
    "targetObject",
    "targetProperty",
    "sourceProperty",
    "bidirectional",
    "options",
    "reverseOptions",
    "undefined",
    "isDisposed",
    "__removeTargetFrom",
    "__addTarget",
    "ObjectRegistry",
    "inShutDown",
    "indexOf",
    "lang",
    "String",
    "firstUp",
    "open",
    "index",
    "parseInt",
    "substring",
    "targetArray",
    "setItem",
    "addTarget",
    "push",
    "getModel",
    "id",
    "bind",
    "idReverse",
    "targetHash",
    "toHashCode",
    "removeTarget",
    "splice",
    "sourceObject",
    "currentListing",
    "removeBinding",
    "destruct",
    "data",
    "controller"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n\n/**\n * <h2>Object Controller</h2>\n *\n * *General idea*\n *\n * The idea of the object controller is to make the binding of one model object\n * containing one or more properties as easy as possible. Therefore the\n * controller can take a model as property. Every property in that model can be\n * bound to one or more target properties. The binding will be for\n * atomic types only like Numbers, Strings, ...\n *\n * *Features*\n *\n * * Manages the bindings between the model properties and the different targets\n * * No need for the user to take care of the binding ids\n * * Can create an bidirectional binding (read- / write-binding)\n * * Handles the change of the model which means adding the old targets\n *\n * *Usage*\n *\n * The controller only can work if a model is set. If the model property is\n * null, the controller is not working. But it can be null on any time.\n *\n * *Cross reference*\n *\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.Object\",\n{\n  extend : qx.core.Object,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.core.Object?null} The model for the model property.\n   */\n  construct : function(model)\n  {\n    this.base(arguments);\n\n    // create a map for all created binding ids\n    this.__bindings = {};\n    // create an array to store all current targets\n    this.__targets = [];\n\n    if (model != null) {\n      this.setModel(model);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The model object which does have the properties for the binding. */\n    model :\n    {\n      check: \"qx.core.Object\",\n      event: \"changeModel\",\n      apply: \"_applyModel\",\n      nullable: true,\n      dereference: true\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // private members\n    __targets : null,\n    __bindings : null,\n\n    /**\n     * Apply-method which will be called if a new model has been set.\n     * All bindings will be moved to the new model.\n     *\n     * @param value {qx.core.Object|null} The new model.\n     * @param old {qx.core.Object|null} The old model.\n     */\n    _applyModel: function(value, old) {\n      // for every target\n      for (var i = 0; i < this.__targets.length; i++) {\n        // get the properties\n        var targetObject = this.__targets[i][0];\n        var targetProperty = this.__targets[i][1];\n        var sourceProperty = this.__targets[i][2];\n        var bidirectional = this.__targets[i][3];\n        var options = this.__targets[i][4];\n        var reverseOptions = this.__targets[i][5];\n\n        // remove it from the old if possible\n        if (old != undefined && !old.isDisposed()) {\n          this.__removeTargetFrom(targetObject, targetProperty, sourceProperty, old);\n        }\n\n        // add it to the new if available\n        if (value != undefined) {\n          this.__addTarget(\n            targetObject, targetProperty, sourceProperty, bidirectional,\n            options, reverseOptions\n          );\n        } else {\n          // in shutdown situations, it may be that something is already\n          // disposed [BUG #4343]\n          if (targetObject.isDisposed() || qx.core.ObjectRegistry.inShutDown) {\n            continue;\n          }\n          // if the model is null, reset the current target\n          if (targetProperty.indexOf(\"[\") == -1) {\n            targetObject[\"reset\" + qx.lang.String.firstUp(targetProperty)]();\n          } else {\n            var open = targetProperty.indexOf(\"[\");\n            var index = parseInt(\n              targetProperty.substring(open + 1, targetProperty.length - 1), 10\n            );\n            targetProperty = targetProperty.substring(0, open);\n            var targetArray = targetObject[\"get\" + qx.lang.String.firstUp(targetProperty)]();\n            if (index == \"last\") {\n              index = targetArray.length;\n            }\n            if (targetArray) {\n              targetArray.setItem(index, null);\n            }\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Adds a new target to the controller. After adding the target, the given\n     * property of the model will be bound to the targets property.\n     *\n     * @param targetObject {qx.core.Object} The object on which the property\n     *   should be bound.\n     *\n     * @param targetProperty {String} The property to which the binding should\n     *   go.\n     *\n     * @param sourceProperty {String} The name of the property in the model.\n     *\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\n     *   in the reverse direction, from the target to source.\n     *\n     * @param options {Map?null} The options Map used by the binding from source\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     *\n     * @param reverseOptions {Map?null} The options used by the binding in the\n     *   reverse direction. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    addTarget: function(\n      targetObject, targetProperty, sourceProperty,\n      bidirectional, options, reverseOptions\n    ) {\n\n      // store the added target\n      this.__targets.push([\n        targetObject, targetProperty, sourceProperty,\n        bidirectional, options, reverseOptions\n      ]);\n\n      // delegate the adding\n      this.__addTarget(\n        targetObject, targetProperty, sourceProperty,\n        bidirectional, options, reverseOptions\n      );\n    },\n\n\n    /**\n    * Does the work for {@link #addTarget} but without saving the target\n    * to the internal target registry.\n    *\n    * @param targetObject {qx.core.Object} The object on which the property\n    *   should be bound.\n    *\n    * @param targetProperty {String} The property to which the binding should\n    *   go.\n    *\n    * @param sourceProperty {String} The name of the property in the model.\n    *\n    * @param bidirectional {Boolean?false} Signals if the binding should also work\n    *   in the reverse direction, from the target to source.\n    *\n    * @param options {Map?null} The options Map used by the binding from source\n    *   to target. The possible options can be found in the\n    *   {@link qx.data.SingleValueBinding} class.\n    *\n    * @param reverseOptions {Map?null} The options used by the binding in the\n    *   reverse direction. The possible options can be found in the\n    *   {@link qx.data.SingleValueBinding} class.\n    */\n    __addTarget: function(\n      targetObject, targetProperty, sourceProperty,\n      bidirectional, options, reverseOptions\n    ) {\n\n      // do nothing if no model is set\n      if (this.getModel() == null) {\n        return;\n      }\n\n      // create the binding\n      var id = this.getModel().bind(\n        sourceProperty, targetObject, targetProperty, options\n      );\n      // create the reverse binding if necessary\n      var idReverse = null;\n      if (bidirectional) {\n        idReverse = targetObject.bind(\n          targetProperty, this.getModel(), sourceProperty, reverseOptions\n        );\n      }\n\n      // save the binding\n      var targetHash = targetObject.toHashCode();\n      if (this.__bindings[targetHash] == undefined) {\n        this.__bindings[targetHash] = [];\n      }\n      this.__bindings[targetHash].push(\n        [id, idReverse, targetProperty, sourceProperty, options, reverseOptions]\n      );\n    },\n\n    /**\n     * Removes the target identified by the three properties.\n     *\n     * @param targetObject {qx.core.Object} The target object on which the\n     *   binding exist.\n     *\n     * @param targetProperty {String} The targets property name used by the\n     *   adding of the target.\n     *\n     * @param sourceProperty {String} The name of the property of the model.\n     */\n    removeTarget: function(targetObject, targetProperty, sourceProperty) {\n      this.__removeTargetFrom(\n        targetObject, targetProperty, sourceProperty, this.getModel()\n      );\n\n      // delete the target in the targets reference\n      for (var i = 0; i < this.__targets.length; i++) {\n        if (\n          this.__targets[i][0] == targetObject\n          && this.__targets[i][1] == targetProperty\n          && this.__targets[i][2] == sourceProperty\n        ) {\n          this.__targets.splice(i, 1);\n        }\n      }\n    },\n\n\n    /**\n     * Does the work for {@link #removeTarget} but without removing the target\n     * from the internal registry.\n     *\n     * @param targetObject {qx.core.Object} The target object on which the\n     *   binding exist.\n     *\n     * @param targetProperty {String} The targets property name used by the\n     *   adding of the target.\n     *\n     * @param sourceProperty {String} The name of the property of the model.\n     *\n     * @param sourceObject {String} The source object from which the binding\n     *   comes.\n     */\n    __removeTargetFrom: function(\n      targetObject, targetProperty, sourceProperty, sourceObject\n    ) {\n      // check for not fitting targetObjects\n      if (!(targetObject instanceof qx.core.Object)) {\n        // just do nothing\n        return;\n      }\n\n      var currentListing = this.__bindings[targetObject.toHashCode()];\n      // if no binding is stored\n      if (currentListing == undefined || currentListing.length == 0) {\n        return;\n      }\n\n      // go threw all listings for the object\n      for (var i = 0; i < currentListing.length; i++) {\n        // if it is the listing\n        if (\n          currentListing[i][2] == targetProperty &&\n          currentListing[i][3] == sourceProperty\n        ) {\n          // remove the binding\n          var id = currentListing[i][0];\n          sourceObject.removeBinding(id);\n          // check for the reverse binding\n          if (currentListing[i][1] != null) {\n            targetObject.removeBinding(currentListing[i][1]);\n          }\n          // delete the entry and return\n          currentListing.splice(i, 1);\n          return;\n        }\n      }\n    }\n  },\n\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function() {\n    // set the model to null to get the bindings removed\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\n      this.setModel(null);\n    }\n  }\n});\n"
  ]
}