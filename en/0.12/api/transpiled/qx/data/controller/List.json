{
  "className": "qx.data.controller.List",
  "packageName": "qx.data.controller",
  "name": "List",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.data.controller.ISelection"
  ],
  "mixins": [
    "qx.data.controller.MSelection"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 58,
        "column": 0
      },
      "end": {
        "line": 1104,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (martinwittemann)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<h2>List Controller</h2>\n<p><em>General idea</em>\n The list controller is responsible for synchronizing every list like widget\n with a data array. It does not matter if the array contains atomic values\n like strings of complete objects where one property holds the value for\n the label and another property holds the icon url. You can even use converters\n that make the label show a text corresponding to the icon, by binding both\n label and icon to the same model property and converting one of them.\n<em>Features</em></p>\n<ul>\n<li>Synchronize the model and the target</li>\n<li>Label and icon are bindable</li>\n<li>Takes care of the selection</li>\n<li>Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n<em>Usage</em>\nAs model, only {@link qx.data.Array}s do work. The currently supported\ntargets are</li>\n<li>{@link qx.ui.form.SelectBox}</li>\n<li>{@link qx.ui.form.List}</li>\n<li>{@link qx.ui.form.ComboBox}\nAll the properties like model, target or any property path is bindable.\nEspecially the model is nice to bind to another selection for example.\nThe controller itself can only work if it has a model and a target set. The\nrest of the properties may be empty.\n<em>Cross reference</em></li>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n<li>If you want to bind a form widget, use {@link qx.data.controller.Form}</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 80,
        "column": 14
      },
      "end": {
        "line": 102,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "model {qx.data.Array?null} The array containing the data.",
          "paramName": "model",
          "description": " The array containing the data.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.data.Array"
        },
        {
          "name": "@param",
          "body": "target {qx.ui.core.Widget?null} The widget which should show the\n   ListItems.",
          "paramName": "target",
          "description": " The widget which should show the\n   ListItems.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "@param",
          "body": "labelPath {String?null} If the model contains objects, the labelPath\n   is the path reference to the property in these objects which should be\n   shown as label.",
          "paramName": "labelPath",
          "description": " If the model contains objects, the labelPath\n   is the path reference to the property in these objects which should be\n   shown as label.",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data array containing the data which should be shown in the list.</p>"
          }
        ]
      },
      "name": "model",
      "propertyType": "new",
      "event": "changeModel",
      "apply": "_applyModel",
      "nullable": true,
      "allowNull": true,
      "check": "qx.data.IListData"
    },
    "target": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The target widget which should show the data.</p>"
          }
        ]
      },
      "name": "target",
      "propertyType": "new",
      "event": "changeTarget",
      "apply": "_applyTarget",
      "nullable": true,
      "allowNull": true
    },
    "labelPath": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n shown as a label. This is only needed if objects are stored in the model.</p>"
          }
        ]
      },
      "name": "labelPath",
      "propertyType": "new",
      "apply": "_applyLabelPath",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "iconPath": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 158,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n shown as an icon. This is only needed if objects are stored in the model\n and if the icon should be shown.</p>"
          }
        ]
      },
      "name": "iconPath",
      "propertyType": "new",
      "apply": "_applyIconPath",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "labelOptions": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 169,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the label binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "name": "labelOptions",
      "propertyType": "new",
      "apply": "_applyLabelOptions",
      "nullable": true,
      "allowNull": true
    },
    "iconOptions": {
      "location": {
        "start": {
          "line": 176,
          "column": 4
        },
        "end": {
          "line": 180,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the icon binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "name": "iconOptions",
      "propertyType": "new",
      "apply": "_applyIconOptions",
      "nullable": true,
      "allowNull": true
    },
    "delegate": {
      "location": {
        "start": {
          "line": 187,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delegation object, which can have one or more functions defined by the\n {@link IControllerDelegate} interface.</p>"
          }
        ]
      },
      "name": "delegate",
      "propertyType": "new",
      "event": "changeDelegate",
      "apply": "_applyDelegate",
      "nullable": true,
      "allowNull": true
    },
    "allowNull": {
      "location": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a special \"null\" value is included in the list</p>"
          }
        ]
      },
      "name": "allowNull",
      "propertyType": "new",
      "event": "changeAllowNull",
      "apply": "_applyAllowNull",
      "nullable": false,
      "init": false,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "nullValueTitle": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 217,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Title for the special null value entry</p>"
          }
        ]
      },
      "name": "nullValueTitle",
      "propertyType": "new",
      "event": "changeNullValueTitle",
      "apply": "_applyNullValueTitle",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "nullValueIcon": {
      "location": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Icon for the special null value entry</p>"
          }
        ]
      },
      "name": "nullValueIcon",
      "propertyType": "new",
      "event": "changeNullValueIcon",
      "apply": "_applyNullValueIcon",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "selection": {
      "type": "property",
      "name": "selection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__changeModelListenerId": {
      "location": {
        "start": {
          "line": 243,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>private members</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__lookupTable": {
      "location": {
        "start": {
          "line": 244,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onUpdate": {
      "location": {
        "start": {
          "line": 245,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__boundProperties": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 246,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__boundPropertiesReverse": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 35
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__syncTargetSelection": {
      "location": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 32
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__syncModelSelection": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 249,
          "column": 31
        }
      },
      "type": "variable",
      "access": "private"
    },
    "update": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 266,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   PUBLIC API\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Updates the filter and the target. This could be used if the filter\n uses an additional parameter which changes the filter result.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyDelegate": {
      "location": {
        "start": {
          "line": 281,
          "column": 4
        },
        "end": {
          "line": 286,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   APPLY METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>If a new delegate is set, it applies the stored configuration for the\n list items to the already created list items once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "delegate"
      ]
    },
    "_applyIconOptions": {
      "location": {
        "start": {
          "line": 296,
          "column": 4
        },
        "end": {
          "line": 298,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if the icon options has been changed.\n It invokes a renewing of all set bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map|null} The new icon options.",
            "paramName": "value",
            "description": " The new icon options.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old icon options.",
            "paramName": "old",
            "description": " The old icon options.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "iconOptions"
      ]
    },
    "_applyLabelOptions": {
      "location": {
        "start": {
          "line": 308,
          "column": 4
        },
        "end": {
          "line": 310,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if the label options has been changed.\n It invokes a renewing of all set bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map|null} The new label options.",
            "paramName": "value",
            "description": " The new label options.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old label options.",
            "paramName": "old",
            "description": " The old label options.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "labelOptions"
      ]
    },
    "_applyIconPath": {
      "location": {
        "start": {
          "line": 320,
          "column": 4
        },
        "end": {
          "line": 322,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if the icon path has been changed.\n It invokes a renewing of all set bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new icon path.",
            "paramName": "value",
            "description": " The new icon path.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old icon path.",
            "paramName": "old",
            "description": " The old icon path.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "iconPath"
      ]
    },
    "_applyLabelPath": {
      "location": {
        "start": {
          "line": 332,
          "column": 4
        },
        "end": {
          "line": 334,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if the label path has been changed.\n It invokes a renewing of all set bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new label path.",
            "paramName": "value",
            "description": " The new label path.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old label path.",
            "paramName": "old",
            "description": " The old label path.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "labelPath"
      ]
    },
    "_applyAllowNull": {
      "location": {
        "start": {
          "line": 340,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for the <code>allowNull</code> property</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "allowNull"
      ]
    },
    "_applyNullValueTitle": {
      "location": {
        "start": {
          "line": 347,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for the <code>allowNull</code> property</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "nullValueTitle"
      ]
    },
    "_applyNullValueIcon": {
      "location": {
        "start": {
          "line": 354,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for the <code>allowNull</code> property</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "nullValueIcon"
      ]
    },
    "__refreshModel": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 366,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Refreshes the model, uses when the model and target are not changing but the appearance\n and bindings may need to be updated</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyModel": {
      "location": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 423,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if the model has been changed. It\n removes all the listeners from the old model and adds the needed\n listeners to the new model. It also invokes the initial filling of the\n target widgets if there is a target set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array|null} The new model array.",
            "paramName": "value",
            "description": " The new model array.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array|null} The old model array.",
            "paramName": "old",
            "description": " The old model array.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "model"
      ]
    },
    "_applyTarget": {
      "location": {
        "start": {
          "line": 435,
          "column": 4
        },
        "end": {
          "line": 458,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if the target has been changed.\n When the target changes, every binding needs to be reset and the old\n target needs to be cleaned up. If there is a model, the target will be\n filled with the data of the model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.core.Widget|null} The new target.",
            "paramName": "value",
            "description": " The new target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.core.Widget|null} The old target.",
            "paramName": "old",
            "description": " The old target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "target"
      ]
    },
    "__inChangeModel": {
      "location": {
        "start": {
          "line": 471,
          "column": 4
        },
        "end": {
          "line": 471,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   EVENT HANDLER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Event handler for the change event of the model. If the model changes,\n Only the selection needs to be changed. The change of the data will\n be done by the binding.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__changeModel": {
      "location": {
        "start": {
          "line": 476,
          "column": 4
        },
        "end": {
          "line": 491,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the changeModel of the model. Updates the controller.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "syncWidget": {
      "location": {
        "start": {
          "line": 501,
          "column": 4
        },
        "end": {
          "line": 510,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal method used to sync the selection. The controller uses the\n widget queue to schedule the selection update. An asynchronous handling of\n the selection is needed because the bindings (event listeners for the\n binding) need to be executed before the selection is updated.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__changeModelLength": {
      "location": {
        "start": {
          "line": 517,
          "column": 4
        },
        "end": {
          "line": 551,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the changeLength of the model. If the length changes\n of the model, either ListItems need to be removed or added to the target.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__moveChangeListenerAtTheEnd": {
      "location": {
        "start": {
          "line": 559,
          "column": 4
        },
        "end": {
          "line": 569,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which removes and adds the change listener of the\n controller to the model. This is sometimes necessary to ensure that the\n listener of the controller is executed as the last listener of the chain.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_createItem": {
      "location": {
        "start": {
          "line": 583,
          "column": 4
        },
        "end": {
          "line": 597,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   ITEM HANDLING\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Creates a ListItem and delegates the configure method if a delegate is\n set and the needed function (configureItem) is available.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.ListItem} The created and configured ListItem.",
            "type": "qx.ui.form.ListItem",
            "description": " The created and configured ListItem."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__addItem": {
      "location": {
        "start": {
          "line": 606,
          "column": 4
        },
        "end": {
          "line": 613,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper to add ListItems to the target including the creation\n of the binding.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index of the item to add.",
            "paramName": "index",
            "description": " The index of the item to add.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeItem": {
      "location": {
        "start": {
          "line": 620,
          "column": 4
        },
        "end": {
          "line": 632,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper to remove ListItems from the target. Also the binding\n will be removed properly.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getVisibleModels": {
      "location": {
        "start": {
          "line": 642,
          "column": 4
        },
        "end": {
          "line": 654,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all models currently visible by the list. This method is only\n useful if you use the filter via the {@link #delegate}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new data array container all the models\n   which representation items are currently visible.",
            "type": "qx.data.Array",
            "description": " A new data array container all the models\n   which representation items are currently visible."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_bindListItem": {
      "location": {
        "start": {
          "line": 669,
          "column": 4
        },
        "end": {
          "line": 685,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   BINDING STUFF\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Sets up the binding for the given ListItem and index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.ListItem} The internally created and used\n   ListItem.",
            "paramName": "item",
            "description": " The internally created and used\n   ListItem.",
            "type": "qx.ui.form.ListItem"
          },
          {
            "name": "@param",
            "body": "index {Number} The index of the ListItem.",
            "paramName": "index",
            "description": " The index of the ListItem.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "bindDefaultProperties": {
      "location": {
        "start": {
          "line": 700,
          "column": 4
        },
        "end": {
          "line": 718,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for binding the default properties (label, icon and model)\n from the model to the target widget.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.ListItem} The internally created and used\n   ListItem.",
            "paramName": "item",
            "description": " The internally created and used\n   ListItem.",
            "type": "qx.ui.form.ListItem"
          },
          {
            "name": "@param",
            "body": "index {Number} The index of the ListItem.",
            "paramName": "index",
            "description": " The index of the ListItem.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "bindProperty": {
      "location": {
        "start": {
          "line": 737,
          "column": 4
        },
        "end": {
          "line": 764,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for binding a given property from the model to the target\n widget.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePath {String | null} The path to the property in the model.\n   If you use an empty string, the whole model item will be bound.",
            "paramName": "sourcePath",
            "description": " The path to the property in the model.\n   If you use an empty string, the whole model item will be bound.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The name of the property in the target\n   widget.",
            "paramName": "targetProperty",
            "description": " The name of the property in the target\n   widget.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map | null} The options used by\n   {@link qx.data.SingleValueBinding#bind} to use for the binding.",
            "paramName": "options",
            "description": " The options used by\n   {@link qx.data.SingleValueBinding#bind} to use for the binding.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "targetWidget {qx.ui.core.Widget} The target widget.",
            "paramName": "targetWidget",
            "description": " The target widget.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "index {Number} The index of the current binding.",
            "paramName": "index",
            "description": " The index of the current binding.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "bindPropertyReverse": {
      "location": {
        "start": {
          "line": 781,
          "column": 4
        },
        "end": {
          "line": 797,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for binding a given property from the target widget to\n the model.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetPath {String | null} The path to the property in the model.",
            "paramName": "targetPath",
            "description": " The path to the property in the model.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "sourcePath {String} The name of the property in the target.",
            "paramName": "sourcePath",
            "description": " The name of the property in the target.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map | null} The options to use by\n   {@link qx.data.SingleValueBinding#bind} for the binding.",
            "paramName": "options",
            "description": " The options to use by\n   {@link qx.data.SingleValueBinding#bind} for the binding.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "sourceWidget {qx.ui.core.Widget} The source widget.",
            "paramName": "sourceWidget",
            "description": " The source widget.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "index {Number} The index of the current binding.",
            "paramName": "index",
            "description": " The index of the current binding.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onBindingSet": {
      "location": {
        "start": {
          "line": 808,
          "column": 4
        },
        "end": {
          "line": 821,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method which will be called on the invoke of every binding. It takes\n care of the selection on the change of the binding.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index of the current binding.",
            "paramName": "index",
            "description": " The index of the current binding.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source object of the binding.",
            "paramName": "sourceObject",
            "description": " The source object of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object of the binding.",
            "paramName": "targetObject",
            "description": " The target object of the binding.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeBindingsFrom": {
      "location": {
        "start": {
          "line": 830,
          "column": 4
        },
        "end": {
          "line": 849,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method to remove the binding of the given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {Number} The item of which the binding which should\n   be removed.",
            "paramName": "item",
            "description": " The item of which the binding which should\n   be removed.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__renewBindings": {
      "location": {
        "start": {
          "line": 855,
          "column": 4
        },
        "end": {
          "line": 873,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method to renew all set bindings.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_setConfigureItem": {
      "location": {
        "start": {
          "line": 888,
          "column": 4
        },
        "end": {
          "line": 895,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   DELEGATE HELPER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a configureItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "qx.data.controller.Object"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "qx.data.controller.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setBindItem": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 914,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a bindItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "qx.data.controller.Object"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "qx.data.controller.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setCreateItem": {
      "location": {
        "start": {
          "line": 924,
          "column": 4
        },
        "end": {
          "line": 952,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a createItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "qx.data.controller.Object"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "qx.data.controller.Object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setFilter": {
      "location": {
        "start": {
          "line": 964,
          "column": 4
        },
        "end": {
          "line": 1022,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-Method for setting the filter. It removes all bindings,\n check if the length has changed and adds or removes the items in the\n target. After that, the bindings will be set up again and the selection\n will be updated.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Function|null} The new filter function.",
            "paramName": "value",
            "description": " The new filter function.",
            "type": [
              "Function",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Function|null} The old filter function.",
            "paramName": "old",
            "description": " The old filter function.",
            "type": [
              "Function",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__removeFilter": {
      "location": {
        "start": {
          "line": 1029,
          "column": 4
        },
        "end": {
          "line": 1042,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This helper is responsible for removing the filter and setting the\n controller to a valid state without a filtering.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__buildUpLookupTable": {
      "location": {
        "start": {
          "line": 1054,
          "column": 4
        },
        "end": {
          "line": 1075,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   LOOKUP STUFF\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Helper-Method which builds up the index lookup for the filter feature.\n If no filter is set, the lookup table will be a 1:1 mapping.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__lookup": {
      "location": {
        "start": {
          "line": 1084,
          "column": 4
        },
        "end": {
          "line": 1086,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function for accessing the lookup table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} The index of the lookup table.",
            "paramName": "index",
            "description": " The index of the lookup table.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Item index from lookup table",
            "type": "Number",
            "description": " Item index from lookup table"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selection</code>.\n\nFor further details take a look at the property definition: {@link #selection}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.data.Array",
            "paramName": "value",
            "desc": "Value for selection"
          }
        ]
      }
    },
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selection</code>.\n\nFor further details take a look at the property definition: {@link #selection}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.data.Array",
            "desc": "Returns the value for selection"
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selection</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selection}."
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value.",
            "paramName": "selection",
            "description": " List data to select as value.",
            "type": [
              "qx.data.IListData",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation.",
            "type": "null",
            "description": " The status of this operation."
          }
        ]
      }
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "description": " The current selection."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_applySelection": {
      "type": "function",
      "name": "_applySelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   APPLY METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Apply-method for setting a new selection array. Only the change listener\n will be removed from the old array and added to the new.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} The new data array for the selection.",
            "paramName": "value",
            "description": " The new data array for the selection.",
            "type": "qx.data.Array"
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array|null} The old data array for the selection.",
            "paramName": "old",
            "description": " The old data array for the selection.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          }
        ]
      }
    },
    "__changeSelectionArray": {
      "type": "function",
      "name": "__changeSelectionArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_changeTargetSelection": {
      "type": "function",
      "name": "_changeTargetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_addChangeTargetListener": {
      "type": "function",
      "name": "_addChangeTargetListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n   SELECTION\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Helper method which should be called by the classes including this\n Mixin when the target changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.core.Widget|null} The new target.",
            "paramName": "value",
            "description": " The new target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.core.Widget|null} The old target.",
            "paramName": "old",
            "description": " The old target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      }
    },
    "_updateSelection": {
      "type": "function",
      "name": "_updateSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "__targetSupportsMultiSelection": {
      "type": "function",
      "name": "__targetSupportsMultiSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports multi selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports multi selection.",
            "type": "Boolean",
            "description": " true, if the target supports multi selection."
          }
        ]
      }
    },
    "__targetSupportsSingleSelection": {
      "type": "function",
      "name": "__targetSupportsSingleSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports single selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports single selection.",
            "type": "Boolean",
            "description": " true, if the target supports single selection."
          }
        ]
      }
    },
    "__selectItem": {
      "type": "function",
      "name": "__selectItem",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for selecting an item in the target. The item to select\n is defined by a given model item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} A model element.",
            "paramName": "item",
            "description": " A model element.",
            "type": "qx.core.Object"
          }
        ]
      }
    },
    "__getSelectableForModel": {
      "type": "function",
      "name": "__getSelectableForModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list item storing the given model in its model property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "model {var} The representing model of a selectable.",
            "paramName": "model",
            "description": " The representing model of a selectable.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object|null} List item or <code>null</code> if none was found",
            "type": "Object|null",
            "description": " List item or <code>null</code> if none was found"
          }
        ]
      }
    },
    "_startSelectionModification": {
      "type": "function",
      "name": "_startSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_endSelectionModification": {
      "type": "function",
      "name": "_endSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection"
    },
    "_inSelectionModification": {
      "type": "function",
      "name": "_inSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for checking the state of the selection modification.\n {@link #<em>startSelectionModification}\n {@link #</em>endSelectionModification}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if selection modification is active",
            "type": "Boolean",
            "description": " <code>true</code> if selection modification is active"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.data.IListData",
            "desc": "Returns the value for model"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.data.IListData",
            "paramName": "value",
            "desc": "Value for model"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>model</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ]
      }
    },
    "getTarget": {
      "type": "function",
      "name": "getTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for target"
          }
        ]
      }
    },
    "setTarget": {
      "type": "function",
      "name": "setTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for target"
          }
        ]
      }
    },
    "resetTarget": {
      "type": "function",
      "name": "resetTarget",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>target</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ]
      }
    },
    "getLabelPath": {
      "type": "function",
      "name": "getLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelPath</code>.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for labelPath"
          }
        ]
      }
    },
    "setLabelPath": {
      "type": "function",
      "name": "setLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelPath</code>.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for labelPath"
          }
        ]
      }
    },
    "resetLabelPath": {
      "type": "function",
      "name": "resetLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ]
      }
    },
    "getIconPath": {
      "type": "function",
      "name": "getIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconPath</code>.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for iconPath"
          }
        ]
      }
    },
    "setIconPath": {
      "type": "function",
      "name": "setIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconPath</code>.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for iconPath"
          }
        ]
      }
    },
    "resetIconPath": {
      "type": "function",
      "name": "resetIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ]
      }
    },
    "getLabelOptions": {
      "type": "function",
      "name": "getLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelOptions</code>.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for labelOptions"
          }
        ]
      }
    },
    "setLabelOptions": {
      "type": "function",
      "name": "setLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelOptions</code>.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for labelOptions"
          }
        ]
      }
    },
    "resetLabelOptions": {
      "type": "function",
      "name": "resetLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ]
      }
    },
    "getIconOptions": {
      "type": "function",
      "name": "getIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconOptions</code>.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for iconOptions"
          }
        ]
      }
    },
    "setIconOptions": {
      "type": "function",
      "name": "setIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconOptions</code>.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for iconOptions"
          }
        ]
      }
    },
    "resetIconOptions": {
      "type": "function",
      "name": "resetIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ]
      }
    },
    "getDelegate": {
      "type": "function",
      "name": "getDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>delegate</code>.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for delegate"
          }
        ]
      }
    },
    "setDelegate": {
      "type": "function",
      "name": "setDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>delegate</code>.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for delegate"
          }
        ]
      }
    },
    "resetDelegate": {
      "type": "function",
      "name": "resetDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>delegate</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ]
      }
    },
    "getAllowNull": {
      "type": "function",
      "name": "getAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowNull</code>.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowNull"
          }
        ]
      }
    },
    "isAllowNull": {
      "type": "function",
      "name": "isAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowNull</code>.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowNull"
          }
        ]
      }
    },
    "setAllowNull": {
      "type": "function",
      "name": "setAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowNull</code>.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowNull"
          }
        ]
      }
    },
    "resetAllowNull": {
      "type": "function",
      "name": "resetAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowNull</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ]
      }
    },
    "getNullValueTitle": {
      "type": "function",
      "name": "getNullValueTitle",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nullValueTitle</code>.\n\nFor further details take a look at the property definition: {@link #nullValueTitle}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for nullValueTitle"
          }
        ]
      }
    },
    "setNullValueTitle": {
      "type": "function",
      "name": "setNullValueTitle",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nullValueTitle</code>.\n\nFor further details take a look at the property definition: {@link #nullValueTitle}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for nullValueTitle"
          }
        ]
      }
    },
    "resetNullValueTitle": {
      "type": "function",
      "name": "resetNullValueTitle",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nullValueTitle</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nullValueTitle}."
          }
        ]
      }
    },
    "getNullValueIcon": {
      "type": "function",
      "name": "getNullValueIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nullValueIcon</code>.\n\nFor further details take a look at the property definition: {@link #nullValueIcon}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for nullValueIcon"
          }
        ]
      }
    },
    "setNullValueIcon": {
      "type": "function",
      "name": "setNullValueIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nullValueIcon</code>.\n\nFor further details take a look at the property definition: {@link #nullValueIcon}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for nullValueIcon"
          }
        ]
      }
    },
    "resetNullValueIcon": {
      "type": "function",
      "name": "resetNullValueIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nullValueIcon</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nullValueIcon}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1097,
        "column": 14
      },
      "end": {
        "line": 1103,
        "column": 4
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n  DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}