{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/application/Routing.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "__messaging",
    "event",
    "Messaging",
    "__navigationHandler",
    "bom",
    "History",
    "getInstance",
    "addListener",
    "__onChangeHash",
    "statics",
    "DEFAULT_PATH",
    "__back",
    "__forward",
    "members",
    "__currentGetPath",
    "init",
    "defaultPath",
    "path",
    "getState",
    "_getPathOrFallback",
    "_executeGet",
    "has",
    "application",
    "Routing",
    "onGet",
    "route",
    "handler",
    "scope",
    "on",
    "onPost",
    "onPut",
    "onDelete",
    "onAny",
    "remove",
    "id",
    "evt",
    "getData",
    "customData",
    "fromEvent",
    "history",
    "__getFromHistory",
    "data",
    "fromHistory",
    "action",
    "__replaceCustomData",
    "__addToHistory",
    "setState",
    "emit",
    "executeGet",
    "execute",
    "executePost",
    "params",
    "executePut",
    "executeDelete",
    "unshift",
    "register",
    "i",
    "length",
    "j",
    "back",
    "forward",
    "found",
    "entry",
    "toForward",
    "splice",
    "a",
    "toBack",
    "shift",
    "state",
    "dispose",
    "removeListener"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n*\n * Basic application routing manager.\n *\n * Define routes to react on certain GET / POST / DELETE / PUT operations.\n *\n * * GET is triggered when the hash value of the url is changed. Can be called\n *   manually by calling the {@link #executeGet} method.\n * * POST / DELETE / PUT has to be triggered manually right now (will be changed later)\n *    by calling the {@link #executePost}, {@link #executeDelete}, {@link #executePut} method.\n *\n * This manager can also be used to provide browser history.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var r = new qx.application.Routing();\n *\n *   // show the start page, when no hash is given or the hash is \"#/\"\n *   r.onGet(\"/\", function(data) {\n *     startPage.show();\n *   }, this);\n *\n *   // whenever the url /address is called show the address book page.\n *   r.onGet(\"/address\", function(data) {\n *     addressBookPage.show();\n *   }, this);\n *\n *   // address with the parameter \"id\"\n *   r.onGet(\"/address/{id}\", function(data) {\n *     addressPage.show();\n *     model.loadAddress(data.params.id);\n *   }, this);\n *\n *   // Alternative you can use regExp for a route\n *   r.onGet(/address\\/(.*)/, function(data) {\n *     addressPage.show();\n *     model.loadAddress(data.params.0);\n *   }, this);\n *\n *   // make sure that the data is always loaded\n *   r.onGet(\"/address.*\", function(data) {\n *     if (!model.isLoaded()) {\n *       model.loadAddresses();\n *     }\n *   }, this);\n *\n *   // update the address\n *   r.onPost(\"/address/{id}\", function(data) {\n *     model.updateAddress(data.params.id);\n *   }, this);\n *\n *   // delete the address and navigate back\n *   r.onDelete(\"/address/{id}\", function(data) {\n *     model.deleteAddress(data.params.id);\n *     r.executeGet(\"/address\", {reverse:true});\n *   }, this);\n * </pre>\n *\n * This example defines different routes to handle navigation events.\n * \n * Note this class must be disposed after use\n */\nqx.Bootstrap.define(\"qx.application.Routing\", {\n\timplement: [ qx.core.IDisposable ],\n\n  construct : function()\n  {\n    this.__messaging = new qx.event.Messaging();\n\n    this.__navigationHandler = qx.bom.History.getInstance();\n    this.__navigationHandler.addListener(\"changeState\", this.__onChangeHash, this);\n  },\n\n\n  statics : {\n    DEFAULT_PATH : \"/\",\n\n    __back : [],\n    __forward : []\n  },\n\n\n  members :\n  {\n    __navigationHandler : null,\n    __messaging : null,\n\n    __currentGetPath : null,\n\n\n    /**\n     * Initialization method used to execute the get route for the currently set history path.\n     * If no path is set, either the given argument named <code>defaultPath</code>\n     * or the {@link #DEFAULT_PATH} will be used for initialization.\n     *\n     * @param defaultPath {String?} Optional default path for initialization.\n     */\n    init : function(defaultPath)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (defaultPath != null) {\n          qx.core.Assert.assertString(defaultPath, \"Invalid argument 'defaultPath'\");\n        }\n      }\n\n      var path = this.getState();\n      path = this._getPathOrFallback(path, defaultPath);\n      this._executeGet(path, null, true);\n    },\n\n\n    /**\n     * Checks if path is valid and registered in channel \"get\" and then just returns it.\n     * If the path is not valid either the <code>defaultPath</code> (if given) or the\n     * {@link #DEFAULT_PATH} will be returned.\n     *\n     * @param path {String} Path which gets checked.\n     * @param defaultPath {String?} Optional default path.\n     * @return {String} A valid path.\n     */\n    _getPathOrFallback : function(path, defaultPath) {\n      if (path == \"\" || path == null || !this.__messaging.has(\"get\", path)) {\n        path = defaultPath || qx.application.Routing.DEFAULT_PATH;\n      }\n      return path;\n    },\n\n\n    /**\n     * Adds a route handler for the \"get\" operation. The route gets called\n     * when the {@link #executeGet} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    onGet : function(route, handler, scope) {\n      return this.__messaging.on(\"get\", route, handler, scope);\n    },\n\n\n    /**\n     * This is a shorthand for {@link #onGet}.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    on : function(route, handler, scope) {\n      return this.onGet(route, handler, scope);\n    },\n\n\n    /**\n     * Adds a route handler for the \"post\" operation. The route gets called\n     * when the {@link #executePost} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call, when the route matches with the executed path.\n     * @param scope {Object} The scope of the handler.\n     * @return {String} Event listener ID\n     */\n    onPost : function(route, handler, scope) {\n      return this.__messaging.on(\"post\", route, handler, scope);\n    },\n\n\n    /**\n     * Adds a route handler for the \"put\" operation. The route gets called\n     * when the {@link #executePut} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onPut : function(route, handler, scope) {\n      return this.__messaging.on(\"put\", route, handler, scope);\n    },\n\n\n    /**\n     * Adds a route handler for the \"delete\" operation. The route gets called\n     * when the {@link #executeDelete} method found a match.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onDelete : function(route, handler, scope) {\n      return this.__messaging.on(\"delete\", route, handler, scope);\n    },\n\n\n    /**\n     * Adds a route handler for the \"any\" operation. The \"any\" operation is called\n     * before all other operations.\n     *\n     * @param route {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call, when the route matches with the executed path\n     * @param scope {Object} The scope of the handler\n     * @return {String} Event listener ID\n     */\n    onAny : function(route, handler, scope) {\n      return this.__messaging.onAny(route, handler, scope);\n    },\n\n\n    /**\n     * Removes a registered route by the given id.\n     *\n     * @param id {String} The id of the registered route\n     */\n    remove : function(id) {\n      this.__messaging.remove(id);\n    },\n\n\n    /**\n     * Hash change event handler.\n     *\n     * @param evt {qx.event.type.Data} The changeHash event.\n     */\n    __onChangeHash : function(evt)\n    {\n      var path = evt.getData();\n      path = this._getPathOrFallback(path);\n\n      if (path != this.__currentGetPath) {\n        this._executeGet(path, null, true);\n      }\n    },\n\n\n    /**\n     * Executes the get operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     * @param fromEvent {var} Determines whether this method was called from history\n     *\n     */\n    _executeGet : function(path, customData, fromEvent)\n    {\n      this.__currentGetPath = path;\n\n      var history = this.__getFromHistory(path);\n      if (history)\n      {\n        if (!customData)\n        {\n          customData = history.data.customData || {};\n          customData.fromHistory = true;\n          customData.action = history.action;\n          customData.fromEvent = fromEvent;\n        } else {\n          this.__replaceCustomData(path, customData);\n        }\n      } else {\n        this.__addToHistory(path, customData);\n        qx.application.Routing.__forward = [];\n      }\n\n      this.__navigationHandler.setState(path);\n      this.__messaging.emit(\"get\", path, null, customData);\n    },\n\n\n    /**\n     * Executes the get operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executeGet : function(path, customData) {\n      this._executeGet(path, customData);\n    },\n\n\n    /**\n     * This is a shorthand for {@link #executeGet}.\n     *\n     * @param path {String} The path to execute\n     * @param customData {var} The given custom data that should be propagated\n     */\n    execute : function(path, customData) {\n      this.executeGet(path, customData);\n    },\n\n\n    /**\n     * Executes the post operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executePost : function(path, params, customData) {\n      this.__messaging.emit(\"post\", path, params, customData);\n    },\n\n\n    /**\n     * Executes the put operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executePut : function(path, params, customData) {\n      this.__messaging.emit(\"put\", path, params, customData);\n    },\n\n\n    /**\n     * Executes the delete operation and informs all matching route handler.\n     *\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    executeDelete : function(path, params, customData) {\n      this.__messaging.emit(\"delete\", path, params, customData);\n    },\n\n\n    /**\n     * Returns state value (history hash) of the navigation handler.\n     * @return {String} State of history navigation handler\n     */\n    getState : function() {\n      return this.__navigationHandler.getState();\n    },\n\n\n    /**\n     * Adds the custom data of a given path to the history.\n     *\n     * @param path {String} The path to store.\n     * @param customData {var} The custom data to store\n     */\n    __addToHistory : function(path, customData)\n    {\n      qx.application.Routing.__back.unshift({\n        path : path,\n        customData : customData\n      });\n    },\n\n\n    /**\n     * Replaces the customData in the history objects with the recent custom data.\n     * @param path {String} The path to replace.\n     * @param customData {var} The custom data to store.\n     */\n    __replaceCustomData : function(path, customData) {\n      var register = [qx.application.Routing.__back, qx.application.Routing.__forward];\n      for (var i=0; i < register.length; i++) {\n        for (var j=0; j < register[i].length; j++) {\n          if (register[i][j].path == path) {\n            register[i][j].customData = customData;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Returns a history entry for a certain path.\n     *\n     * @param path {String} The path of the entry\n     * @return {Map|null} The retrieved entry. <code>null</code> when no entry was found.\n     */\n    __getFromHistory : function(path)\n    {\n      var back = qx.application.Routing.__back;\n      var forward = qx.application.Routing.__forward;\n      var found = false;\n\n      var entry = null;\n      var length = back.length;\n      for (var i = 0; i < length; i++)\n      {\n        if (back[i].path == path)\n        {\n          entry = back[i];\n          var toForward = back.splice(0,i);\n          for (var a=0; a<toForward.length; a++){\n            forward.unshift(toForward[a]);\n          }\n          found = true;\n          break;\n        }\n      }\n      if (found){\n        return {\n          data : entry,\n          action : \"back\"\n        };\n      }\n\n      var length = forward.length;\n      for (var i = 0; i < length; i++)\n      {\n        if (forward[i].path == path)\n        {\n          entry = forward[i];\n          var toBack = forward.splice(0,i+1);\n          for (var a=0; a<toBack.length; a++){\n            back.unshift(toBack[a]);\n          }\n          break;\n        }\n      }\n\n      if (entry){\n        return {\n          data : entry,\n          action : \"forward\"\n        };\n      }\n      return entry;\n    },\n\n\n    /**\n    * Navigates back to the previously executed path.\n    *\n    * @param customData {Map?} The given custom data that should be propagated.\n    *   If it contains a key <code>defaultPath</code> and no history data is\n    *   available, its value is used as a target path. If it does not include\n    *   such a key, the routing's default path is used instead (again only for\n    *   empty history).\n    *   This behavior is useful for instance when reloading a page during\n    *   development but expecting the page's back button always to work.\n    */\n    back : function(customData)\n    {\n      var data = customData;\n      if (data) {\n        data[\"action\"] = \"back\";\n      } else {\n        data = {\n          \"action\": \"back\"\n        };\n      }\n\n      var path, back = qx.application.Routing.__back;\n\n      if (back.length > 0) {\n        // Remove current state\n        back.shift();\n      }\n\n      if (back.length > 0) {\n        // Get previous state\n        var state = back.shift();\n\n        this._executeGet(state.path, data);\n      }\n      else if (data.defaultPath)\n      {\n        path = data.defaultPath;\n        delete data.defaultPath;\n        this._executeGet(path, data);\n      }\n      else if (qx.application.Routing.DEFAULT_PATH)\n      {\n        this._executeGet(qx.application.Routing.DEFAULT_PATH, data);\n      }\n    },\n\n\n    /**\n     * Decouples the Routing from the navigation handler.\n     */\n    dispose : function() {\n      this.__navigationHandler.removeListener(\"changeState\", this.__onChangeHash, this);\n    }\n  }\n});\n"
  ]
}