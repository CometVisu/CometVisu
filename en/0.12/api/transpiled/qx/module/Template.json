{
  "className": "qx.module.Template",
  "packageName": "qx.module",
  "name": "Template",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0
      },
      "end": {
        "line": 107,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2012 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (wittemann)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>HTML templating module. This is a wrapper for mustache.js which is a\n \"framework-agnostic way to render logic-free views\".\n For further details, please visit the mustache.js documentation here:\n   https://github.com/janl/mustache.js/blob/master/README.md</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "get": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which provides direct access to templates stored as HTML in\n the DOM. The DOM node with the given ID will be treated as a template,\n parsed and a new DOM element will be returned containing the parsed data.\n Keep in mind that templates can only have one root element.\n Additionally, you should not put the template into a regular, hidden\n DOM element because the template may not be valid HTML due to the containing\n mustache tags. We suggest to put it into a script tag with the type\n <code>text/template</code>.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, template.get}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the HTML template in the DOM.",
            "paramName": "id",
            "description": " The id of the HTML template in the DOM.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "view {Object} The object holding the data to render.",
            "paramName": "view",
            "description": " The object holding the data to render.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "partials {Object} Object holding parts of a template.",
            "paramName": "partials",
            "description": " Object holding parts of a template.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} Collection containing a single DOM element with the parsed\n template data.",
            "type": "qxWeb",
            "description": " Collection containing a single DOM element with the parsed\n template data."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "render": {
      "location": {
        "start": {
          "line": 62,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Original and only template method of mustache.js. For further\n documentation, please visit <a href=\"https://github.com/janl/mustache.js\">mustache.js</a>.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, template.render}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "template {String} The String containing the template.",
            "paramName": "template",
            "description": " The String containing the template.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "view {Object} The object holding the data to render.",
            "paramName": "view",
            "description": " The object holding the data to render.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "partials {Object} Object holding parts of a template.",
            "paramName": "partials",
            "description": " Object holding parts of a template.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The parsed template.",
            "type": "String",
            "description": " The parsed template."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "renderToNode": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\n and output is equal to {@link #get}. The advantage over {@link #get}\n is that you don't need a HTML template but can use a template\n string and still get a collection. Keep in mind that templates\n can only have one root element.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, template.renderToNode}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "template {String} The String containing the template.",
            "paramName": "template",
            "description": " The String containing the template.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "view {Object} The object holding the data to render.",
            "paramName": "view",
            "description": " The object holding the data to render.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "partials {Object} Object holding parts of a template.",
            "paramName": "partials",
            "description": " Object holding parts of a template.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} Collection containing a single DOM element with the parsed\n template data.",
            "type": "qxWeb",
            "description": " Collection containing a single DOM element with the parsed\n template data."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__wrap": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If the given node is a DOM text node, wrap it in a span element and return\n the wrapper.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Node} a DOM node",
            "paramName": "el",
            "description": " a DOM node",
            "type": "Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} Original element or wrapper",
            "type": "Element",
            "description": " Original element or wrapper"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 104,
        "column": 10
      },
      "end": {
        "line": 106,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}