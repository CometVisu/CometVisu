{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/event/TouchHandler.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "register",
    "element",
    "__touchHandler",
    "$$emitter",
    "event",
    "Emitter",
    "handler",
    "TouchCore",
    "unregister",
    "hasTouchListener",
    "listeners",
    "getListeners",
    "module",
    "TouchHandler",
    "forEach",
    "type",
    "length",
    "defer",
    "qxWeb",
    "$registerEventHook"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAQAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,8BAApB,EAAoD;AAElDC,IAAAA,OAAO,EACP;AACE;;;AAGAC,MAAAA,KAAK,EAAG,CAAC,YAAD,EAAe,UAAf,EAA2B,WAA3B,EAAwC,aAAxC,CAJV;;AAME;;;;;;AAMAC,MAAAA,QAAQ,EAAG,kBAASC,OAAT,EACX;AACE,YAAI,CAACA,OAAO,CAACC,SAAb,EAA6B;AAC3B,cAAI,CAACD,OAAO,CAACE,SAAb,EAAwB;AACtBF,YAAAA,OAAO,CAACE,SAAR,GAAoB,IAAIV,EAAE,CAACW,KAAH,CAASC,OAAb,EAApB;AACD;;AACDJ,UAAAA,OAAO,CAACC,SAAR,GAAyB,IAAIT,EAAE,CAACW,KAAH,CAASE,OAAT,CAAiBC,SAArB,CAA+BN,OAA/B,EAAwCA,OAAO,CAACE,SAAhD,CAAzB;AACD;AACF,OApBH;;AAuBE;;;;;AAKAK,MAAAA,UAAU,EAAG,oBAASP,OAAT,EACb;AACE,YAAIA,OAAO,CAACC,SAAZ,EAA4B;AAC1B,cAAI,CAACD,OAAO,CAACE,SAAb,EAAwB;AACtBF,YAAAA,OAAO,CAACC,SAAR,GAAyB,IAAzB;AACD,WAFD,MAGK;AACH,gBAAIO,gBAAgB,GAAG,KAAvB;AACA,gBAAIC,SAAS,GAAGT,OAAO,CAACE,SAAR,CAAkBQ,YAAlB,EAAhB;AACAlB,YAAAA,EAAE,CAACmB,MAAH,CAAUR,KAAV,CAAgBS,YAAhB,CAA6Bd,KAA7B,CAAmCe,OAAnC,CAA2C,UAASC,IAAT,EAAe;AACxD,kBAAIA,IAAI,IAAIL,SAAR,IAAqBA,SAAS,CAACK,IAAD,CAAT,CAAgBC,MAAhB,GAAyB,CAAlD,EAAqD;AACnDP,gBAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF,aAJD;;AAKA,gBAAI,CAACA,gBAAL,EAAuB;AACrBR,cAAAA,OAAO,CAACC,SAAR,GAAyB,IAAzB;AACD;AACF;AACF;AACF;AA/CH,KAHkD;AAqDlDe,IAAAA,KAAK,EAAG,eAASnB,OAAT,EACR;AACEoB,MAAAA,KAAK,CAACC,kBAAN,CAAyBrB,OAAO,CAACC,KAAjC,EAAwCD,OAAO,CAACE,QAAhD,EAA0DF,OAAO,CAACU,UAAlE;AACD;AAxDiD,GAApD;AA1BAf,EAAAA,EAAE,CAACmB,MAAH,CAAUR,KAAV,CAAgBS,YAAhB,CAA6BjB,aAA7B,GAA6CA,aAA7C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Creates a touch event handler that fires high-level events such as \"swipe\"\n * based on low-level event sequences on the given element\n *\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.TouchHandler\", {\n\n  statics :\n  {\n    /**\n     * List of events that require a touch handler\n     */\n    TYPES : [\"touchstart\", \"touchend\", \"touchmove\", \"touchcancel\"],\n\n    /**\n     * Creates a touch handler for the given element when a touch event listener\n     * is attached to it\n     *\n     * @param element {Element} DOM element\n     */\n    register : function(element)\n    {\n      if (!element.__touchHandler) {\n        if (!element.$$emitter) {\n          element.$$emitter = new qx.event.Emitter();\n        }\n        element.__touchHandler = new qx.event.handler.TouchCore(element, element.$$emitter);\n      }\n    },\n\n\n    /**\n     * Removes the touch event handler from the element if there are no more\n     * touch event listeners attached to it\n     * @param element {Element} DOM element\n     */\n    unregister : function(element)\n    {\n      if (element.__touchHandler) {\n        if (!element.$$emitter) {\n          element.__touchHandler = null;\n        }\n        else {\n          var hasTouchListener = false;\n          var listeners = element.$$emitter.getListeners();\n          qx.module.event.TouchHandler.TYPES.forEach(function(type) {\n            if (type in listeners && listeners[type].length > 0) {\n              hasTouchListener = true;\n            }\n          });\n          if (!hasTouchListener) {\n            element.__touchHandler = null;\n          }\n        }\n      }\n    }\n  },\n\n  defer : function(statics)\n  {\n    qxWeb.$registerEventHook(statics.TYPES, statics.register, statics.unregister);\n  }\n});\n"
  ]
}