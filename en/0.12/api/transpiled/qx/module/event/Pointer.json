{
  "className": "qx.module.event.Pointer",
  "packageName": "qx.module.event",
  "name": "Pointer",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0
      },
      "end": {
        "line": 160,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2014 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Daniel Wagner (danielwagner)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Normalization for pointer events. Pointer events are hardware-agnostic and\n will be fired regardless of which input type of input device is used (e.g. mouse or touchscreen).</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Event"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getPointerType"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getViewportLeft"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getViewportTop"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getDocumentLeft"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getDocumentTop"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getScreenLeft"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Pointer#getScreenTop"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Event_Normalization"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "TYPES": {
      "location": {
        "start": {
          "line": 40,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 101
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of event types to be normalized</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getPointerType": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the device type which the event triggered. This can be one\n of the following strings: <code>mouse</code>, <code>pen</code>\n or <code>touch</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The type of the pointer.",
            "type": "String",
            "description": " The type of the pointer."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportLeft": {
      "location": {
        "start": {
          "line": 62,
          "column": 4
        },
        "end": {
          "line": 65,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position",
            "type": "Number",
            "description": " The horizontal mouse position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportTop": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position",
            "type": "Number",
            "description": " The vertical mouse position"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 91,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal position at which the event occurred relative to the\n left of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position in the document.",
            "type": "Number",
            "description": " The horizontal mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical position at which the event occurred relative to the\n top of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position in the document.",
            "type": "Number",
            "description": " The vertical mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenLeft": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position on the screen.",
            "type": "Number",
            "description": " The horizontal mouse position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenTop": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position on the screen.",
            "type": "Number",
            "description": " The vertical mouse position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "normalize": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Manipulates the native event object, adding methods if they're not\n already present</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} Native event object",
            "paramName": "event",
            "description": " Native event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "element {Element} DOM element the listener was attached to",
            "paramName": "element",
            "description": " DOM element the listener was attached to",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Event} Normalized event object",
            "type": "Event",
            "description": " Normalized event object"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 157,
        "column": 10
      },
      "end": {
        "line": 159,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}