{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/event/Keyboard.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "getKeyIdentifier",
    "type",
    "qxWeb",
    "env",
    "get",
    "charCode",
    "event",
    "util",
    "Keyboard",
    "charCodeToIdentifier",
    "keyCode",
    "keyCodeToIdentifier",
    "normalize",
    "element",
    "bindMethods",
    "module",
    "i",
    "l",
    "length",
    "bind",
    "registerInputFix",
    "__inputFix",
    "on",
    "_inputFix",
    "unregisterInputFix",
    "hasListener",
    "off",
    "ev",
    "target",
    "getTarget",
    "newValue",
    "getValue",
    "__oldInputValue",
    "_type",
    "$$emitter",
    "emit",
    "defer",
    "$registerEventNormalization",
    "$registerEventHook"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for native keyboard events.\n *\n * NOTE: Some browsers won't fire the <code>keypress</code> event for all keys.\n * It's generally better to listen for <code>keyup</code> or <code>keydown</code>\n * instead.\n *\n * @require(qx.module.Event)\n * @require(qx.module.Environment)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Keyboard\", {\n  statics :\n  {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES : [\"keydown\", \"keypress\", \"keyup\"],\n\n\n    /**\n     * List qx.module.event.Keyboard methods to be attached to native mouse event\n     * objects\n     * @internal\n     */\n    BIND_METHODS : [\"getKeyIdentifier\"],\n\n\n    /**\n     * Identifier of the pressed key. This property is modeled after the <em>KeyboardEvent.keyIdentifier</em> property\n     * of the W3C DOM 3 event specification\n     * (http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier).\n     *\n     * Printable keys are represented by an unicode string, non-printable keys\n     * have one of the following values:\n     *\n     * <table>\n     * <tr><th>Backspace</th><td>The Backspace (Back) key.</td></tr>\n     * <tr><th>Tab</th><td>The Horizontal Tabulation (Tab) key.</td></tr>\n     * <tr><th>Space</th><td>The Space (Spacebar) key.</td></tr>\n     * <tr><th>Enter</th><td>The Enter key. Note: This key identifier is also used for the Return (Macintosh numpad) key.</td></tr>\n     * <tr><th>Shift</th><td>The Shift key.</td></tr>\n     * <tr><th>Control</th><td>The Control (Ctrl) key.</td></tr>\n     * <tr><th>Alt</th><td>The Alt (Menu) key.</td></tr>\n     * <tr><th>CapsLock</th><td>The CapsLock key</td></tr>\n     * <tr><th>Meta</th><td>The Meta key. (Apple Meta and Windows key)</td></tr>\n     * <tr><th>Escape</th><td>The Escape (Esc) key.</td></tr>\n     * <tr><th>Left</th><td>The Left Arrow key.</td></tr>\n     * <tr><th>Up</th><td>The Up Arrow key.</td></tr>\n     * <tr><th>Right</th><td>The Right Arrow key.</td></tr>\n     * <tr><th>Down</th><td>The Down Arrow key.</td></tr>\n     * <tr><th>PageUp</th><td>The Page Up key.</td></tr>\n     * <tr><th>PageDown</th><td>The Page Down (Next) key.</td></tr>\n     * <tr><th>End</th><td>The End key.</td></tr>\n     * <tr><th>Home</th><td>The Home key.</td></tr>\n     * <tr><th>Insert</th><td>The Insert (Ins) key. (Does not fire in Opera/Win)</td></tr>\n     * <tr><th>Delete</th><td>The Delete (Del) Key.</td></tr>\n     * <tr><th>F1</th><td>The F1 key.</td></tr>\n     * <tr><th>F2</th><td>The F2 key.</td></tr>\n     * <tr><th>F3</th><td>The F3 key.</td></tr>\n     * <tr><th>F4</th><td>The F4 key.</td></tr>\n     * <tr><th>F5</th><td>The F5 key.</td></tr>\n     * <tr><th>F6</th><td>The F6 key.</td></tr>\n     * <tr><th>F7</th><td>The F7 key.</td></tr>\n     * <tr><th>F8</th><td>The F8 key.</td></tr>\n     * <tr><th>F9</th><td>The F9 key.</td></tr>\n     * <tr><th>F10</th><td>The F10 key.</td></tr>\n     * <tr><th>F11</th><td>The F11 key.</td></tr>\n     * <tr><th>F12</th><td>The F12 key.</td></tr>\n     * <tr><th>NumLock</th><td>The Num Lock key.</td></tr>\n     * <tr><th>PrintScreen</th><td>The Print Screen (PrintScrn, SnapShot) key.</td></tr>\n     * <tr><th>Scroll</th><td>The scroll lock key</td></tr>\n     * <tr><th>Pause</th><td>The pause/break key</td></tr>\n     * <tr><th>Win</th><td>The Windows Logo key</td></tr>\n     * <tr><th>Apps</th><td>The Application key (Windows Context Menu)</td></tr>\n     * </table>\n     *\n     * @return {String} The key identifier\n     */\n    getKeyIdentifier : function()\n    {\n      if (this.type == \"keypress\" &&\n      (qxWeb.env.get(\"engine.name\") != \"gecko\" || this.charCode !== 0))\n      {\n        return qx.event.util.Keyboard.charCodeToIdentifier(this.charCode || this.keyCode);\n      }\n      return qx.event.util.Keyboard.keyCodeToIdentifier(this.keyCode);\n    },\n\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize : function(event, element) {\n      if (!event) {\n        return event;\n      }\n      var bindMethods = qx.module.event.Keyboard.BIND_METHODS;\n      for (var i=0, l=bindMethods.length; i<l; i++) {\n        if (typeof event[bindMethods[i]] != \"function\") {\n          event[bindMethods[i]] = qx.module.event.Keyboard[bindMethods[i]].bind(event);\n        }\n      }\n\n      return event;\n    },\n\n\n    /**\n     * IE9 will not fire an \"input\" event on text input elements if the user changes\n     * the field's value by pressing the Backspace key. We fix this by listening\n     * for the \"keyup\" event and emitting the missing event if necessary\n     *\n     * @param element {Element} Target element\n     * @internal\n     */\n    registerInputFix : function(element) {\n      if (element.type === \"text\" || element.type === \"password\" || element.type === \"textarea\")\n      {\n        if (!element.__inputFix) {\n          element.__inputFix = qxWeb(element).on(\"keyup\", qx.module.event.Keyboard._inputFix);\n        }\n      }\n    },\n\n\n    /**\n     * Removes the IE9 input event fix\n     *\n     * @param element {Element} target element\n     * @internal\n     */\n    unregisterInputFix : function(element) {\n      if (element.__inputFix && !qxWeb(element).hasListener(\"input\")) {\n        qxWeb(element).off(\"keyup\", qx.module.event.Keyboard._inputFix);\n        element.__inputFix = null;\n      }\n    },\n\n\n    /**\n     * IE9 fix: Emits an \"input\" event if a text input element's value was changed\n     * using the Backspace key\n     * @param ev {Event} Keyup event\n     */\n    _inputFix : function(ev) {\n      if (ev.getKeyIdentifier() !== \"Backspace\") {\n        return;\n      }\n      var target = ev.getTarget();\n      var newValue = qxWeb(target).getValue();\n\n      if (!target.__oldInputValue || target.__oldInputValue !== newValue) {\n        target.__oldInputValue = newValue;\n        ev.type = ev._type = \"input\";\n        target.$$emitter.emit(\"input\", ev);\n      }\n    }\n  },\n\n  defer : function(statics) {\n    qxWeb.$registerEventNormalization(qx.module.event.Keyboard.TYPES, statics.normalize);\n\n    if (qxWeb.env.get(\"engine.name\") === \"mshtml\" && qxWeb.env.get(\"browser.documentmode\") === 9)\n    {\n      qxWeb.$registerEventHook(\"input\", statics.registerInputFix, statics.unregisterInputFix);\n    }\n  }\n});\n"
  ]
}