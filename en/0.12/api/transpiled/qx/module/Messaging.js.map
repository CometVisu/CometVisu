{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/Messaging.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "on",
    "onAny",
    "remove",
    "emit",
    "defer",
    "qxWeb",
    "$attachStatic",
    "event",
    "Messaging",
    "module"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,qBAApB,EAA2C;AACzCC,IAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,EAAE,EAAG,IAbE;;AAgBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAG,IA3BD;;AA8BP;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAG,IArCF;;AAwCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG;AAlDA,KADgC;AAuDzCC,IAAAA,KAAK,EAAG,eAASL,OAAT,EAAkB;AACxBM,MAAAA,KAAK,CAACC,aAAN,CAAoB;AAClB,qBAAc,IAAIZ,EAAE,CAACa,KAAH,CAASC,SAAb;AADI,OAApB;AAGD;AA3DwC,GAA3C;AA9BAd,EAAAA,EAAE,CAACe,MAAH,CAAUD,SAAV,CAAoBX,aAApB,GAAoCA,aAApC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * Define messages to react on certain channels.\n *\n * The channel names will be used in the q.messaging.on method to define handlers which will\n * be called on certain channels and routes. The q.messaging.emit method can be used\n * to execute a given route on a channel. q.messaging.onAny defines a handler on any channel.\n *\n * @require(qx.event.Messaging#on)\n * @require(qx.event.Messaging#onAny)\n * @require(qx.event.Messaging#remove)\n * @require(qx.event.Messaging#emit)\n */\nqx.Bootstrap.define(\"qx.module.Messaging\", {\n  statics: {\n    /**\n     * Adds a route handler for the given channel. The route is called\n     * if the {@link #emit} method finds a match.\n     *\n     * @attachStatic{qxWeb, messaging.on}\n     * @param channel {String} The channel of the message.\n     * @param type {String|RegExp} The type, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call if the route matches the executed path.\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     * @signature function(channel, type, handler, scope)\n     */\n    on : null,\n\n\n    /**\n     * Adds a handler for the \"any\" channel. The \"any\" channel is called\n     * before all other channels.\n     *\n     * @attachStatic{qxWeb, messaging.onAny}\n     * @param type {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call if the route matches the executed path\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     * @signature function(type, handler, scope)\n     */\n    onAny : null,\n\n\n    /**\n     * Removes a registered listener by the given id.\n     *\n     * @attachStatic{qxWeb, messaging.remove}\n     * @param id {String} The id of the registered listener.\n     * @signature function(id)\n     */\n    remove : null,\n\n\n    /**\n     * Sends a message on the given channel and informs all matching route handlers.\n     *\n     * @attachStatic{qxWeb, messaging.emit}\n     * @param channel {String} The channel of the message.\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     * @signature function(channel, path, params, customData)\n     */\n    emit : null\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachStatic({\n      \"messaging\" : new qx.event.Messaging()\n    });\n  }\n});\n"
  ]
}