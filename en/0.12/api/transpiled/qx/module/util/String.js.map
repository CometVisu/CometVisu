{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/util/String.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "camelCase",
    "str",
    "lang",
    "String",
    "call",
    "hyphenate",
    "firstUp",
    "firstLow",
    "startsWith",
    "fullstr",
    "substr",
    "endsWith",
    "escapeRegexpChars",
    "escapeHtml",
    "bom",
    "escape",
    "defer",
    "qxWeb",
    "$attachAll",
    "module",
    "util"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;AAOAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,uBAApB,EAA6C;AAC3CC,IAAAA,OAAO,EAAG;AACR;;;;;;;AAOAC,MAAAA,SAAS,EAAG,mBAASC,GAAT,EAAc;AACxB,eAAOP,EAAE,CAACQ,IAAH,CAAQC,MAAR,CAAeH,SAAf,CAAyBI,IAAzB,CAA8BV,EAAE,CAACQ,IAAH,CAAQC,MAAtC,EAA8CF,GAA9C,CAAP;AACD,OAVO;;AAaR;;;;;;;AAOAI,MAAAA,SAAS,EAAG,mBAASJ,GAAT,EAAc;AACxB,eAAOP,EAAE,CAACQ,IAAH,CAAQC,MAAR,CAAeE,SAAf,CAAyBD,IAAzB,CAA8BV,EAAE,CAACQ,IAAH,CAAQC,MAAtC,EAA8CF,GAA9C,CAAP;AACD,OAtBO;;AAyBR;;;;;;;;AAQAK,MAAAA,OAAO,EAAGZ,EAAE,CAACQ,IAAH,CAAQC,MAAR,CAAeG,OAjCjB;;AAoCR;;;;;;;;AAQAC,MAAAA,QAAQ,EAAGb,EAAE,CAACQ,IAAH,CAAQC,MAAR,CAAeI,QA5ClB;;AA+CR;;;;;;;;;AASAC,MAAAA,UAAU,EAAG,oBAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACtC,eAAOD,OAAO,CAACD,UAAR,CAAmBE,MAAnB,CAAP;AACD,OA1DO;;AA6DR;;;;;;;;;AASAC,MAAAA,QAAQ,EAAG,kBAAUF,OAAV,EAAmBC,MAAnB,EAA2B;AACpC,eAAOD,OAAO,CAACE,QAAR,CAAiBD,MAAjB,CAAP;AACD,OAxEO;;AA2ER;;;;;;;;AAQAE,MAAAA,iBAAiB,EAAGlB,EAAE,CAACQ,IAAH,CAAQC,MAAR,CAAeS,iBAnF3B;;AAsFR;;;;;;;;;AASAC,MAAAA,UAAU,EAAGnB,EAAE,CAACoB,GAAH,CAAOX,MAAP,CAAcY;AA/FnB,KADiC;AAoG3CC,IAAAA,KAAK,EAAG,eAASjB,OAAT,EAAkB;AACxBkB,MAAAA,KAAK,CAACC,UAAN,CAAiB,IAAjB,EAAuB,QAAvB;AACD;AAtG0C,GAA7C;AAxBAxB,EAAAA,EAAE,CAACyB,MAAH,CAAUC,IAAV,CAAejB,MAAf,CAAsBN,aAAtB,GAAsCA,aAAtC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n/**\n * Utility module to give some support to work with strings.\n *\n * *Info:* The <pre class='javascript'>trim</pre> method is available as <a href=\"#String\">Polyfill</a>.\n *\n * @group (Utilities)\n */\nqx.Bootstrap.define(\"qx.module.util.String\", {\n  statics : {\n    /**\n     * Converts a hyphenated string (separated by '-') to camel case.\n     *\n     * @attachStatic {qxWeb, string.camelCase}\n     * @param str {String} hyphenated string\n     * @return {String} camelcase string\n     */\n    camelCase : function(str) {\n      return qx.lang.String.camelCase.call(qx.lang.String, str);\n    },\n\n\n    /**\n     * Converts a camelcased string to a hyphenated (separated by '-') string.\n     *\n     * @attachStatic {qxWeb, string.hyphenate}\n     * @param str {String} camelcased string\n     * @return {String} hyphenated string\n     */\n    hyphenate : function(str) {\n      return qx.lang.String.hyphenate.call(qx.lang.String, str);\n    },\n\n\n    /**\n     * Convert the first character of the string to upper case.\n     *\n     * @attachStatic {qxWeb, string.firstUp}\n     * @signature function(str)\n     * @param str {String} the string\n     * @return {String} the string with an upper case first character\n     */\n    firstUp : qx.lang.String.firstUp,\n\n\n    /**\n     * Convert the first character of the string to lower case.\n     *\n     * @attachStatic {qxWeb, string.firstLow}\n     * @signature function(str)\n     * @param str {String} the string\n     * @return {String} the string with a lower case first character\n     */\n    firstLow : qx.lang.String.firstLow,\n\n\n    /**\n     * Check whether the string starts with the given substring.\n     *\n     * @attachStatic {qxWeb, string.startsWith}\n     * @signature function(fullstr, substr)\n     * @param fullstr {String} the string to search in\n     * @param substr {String} the substring to look for\n     * @return {Boolean} whether the string starts with the given substring\n     */\n    startsWith : function (fullstr, substr) {\n      return fullstr.startsWith(substr);\n    },\n\n\n    /**\n     * Check whether the string ends with the given substring.\n     *\n     * @attachStatic {qxWeb, string.endsWith}\n     * @signature function(fullstr, substr)\n     * @param fullstr {String} the string to search in\n     * @param substr {String} the substring to look for\n     * @return {Boolean} whether the string ends with the given substring\n     */\n    endsWith : function (fullstr, substr) {\n      return fullstr.endsWith(substr);\n    },\n\n\n    /**\n     * Escapes all chars that have a special meaning in regular expressions.\n     *\n     * @attachStatic {qxWeb, string.escapeRegexpChars}\n     * @signature function(str)\n     * @param str {String} the string where to escape the chars.\n     * @return {String} the string with the escaped chars.\n     */\n    escapeRegexpChars : qx.lang.String.escapeRegexpChars,\n\n\n    /**\n     * Escapes the characters in a <code>String</code> using HTML entities.\n     * Supports all known HTML 4.0 entities, including funky accents.\n     *\n     * @attachStatic {qxWeb, string.escapeHtml}\n     * @signature function(str)\n     * @param str {String} the String to escape\n     * @return {String} a new escaped String\n     */\n    escapeHtml : qx.bom.String.escape\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachAll(this, \"string\");\n  }\n});\n"
  ]
}