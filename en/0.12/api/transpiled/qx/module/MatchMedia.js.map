{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/MatchMedia.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "matchMedia",
    "query",
    "bom",
    "MediaQuery",
    "addSizeClasses",
    "qxWeb",
    "mediaQueryToClass",
    "__applyClass",
    "className",
    "isMatching",
    "addClass",
    "removeClass",
    "members",
    "queryString",
    "module",
    "MatchMedia",
    "callback",
    "bind",
    "on",
    "defer",
    "$attachAll"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013-2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Romeo Kenfack Tsakem (rkenfack)\n     * Tobias Oberrauch (toberrauch)\n\n************************************************************************ */\n\n/**\n * Module for mediaqueries evaluation. The module is a wrapper for media.match.js,\n * that implements a polyfill for window.matchMedia when it's not supported natively.\n */\nqx.Bootstrap.define(\"qx.module.MatchMedia\", {\n\n  statics: {\n    /**\n     * Evaluates the specified mediaquery list\n     *\n     * @param query {String} the media query to evaluate\n     * @return {qx.bom.MediaQuery}  The media query\n     * @attachStatic {qxWeb, matchMedia}\n     */\n    matchMedia: function (query) {\n      return new qx.bom.MediaQuery(query);\n    },\n\n\n    /**\n     * Adds screen size classes (e.g. small-only or medium-up) by pre-defined media queries using em.\n     * The range goes from small to medium, large and xlarge up to xxlarge:\n     *\n     * small: 0em - 40em\n     * medium: 40.063em - 64em\n     * large: 64.063em - 90em\n     * xlarge: 90.063em - 120em\n     * xxlarge: > 120.063em\n     *\n     * The suffix of the class name indicates either that the current screen\n     * is larger than this size (*-up) or in that range (*-only).\n     *\n     * @attachStatic {qxWeb}\n     */\n    addSizeClasses: function () {\n      qxWeb(\"html\").mediaQueryToClass(\"only screen\", \"small-up\");\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (max-width: 40em)\", \"small-only\");\n\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 40.063em)\", \"medium-up\");\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 40.063em) and (max-width: 64em)\", \"medium-only\");\n\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 64.063em)\", \"large-up\");\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 64.063em) and (max-width: 90em)\", \"large-only\");\n\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 90.063em)\", \"xlarge-up\");\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 90.063em) and (max-width: 120em)\", \"xlarge-only\");\n\n      qxWeb(\"html\").mediaQueryToClass(\"only screen and (min-width: 120.063em)\", \"xxlarge-up\");\n    },\n\n\n    /**\n     * Adds or removes a class depending on matching a given media query\n     *\n     * @param query {String} the media query to evaluate\n     * @param className {String} css class name that gets bind to an element\n     */\n    __applyClass: function (query, className) {\n      if (query.isMatching()) {\n        this.addClass(className);\n      } else {\n        this.removeClass(className);\n      }\n    }\n  },\n\n  members :\n  {\n    /**\n     * Listens for media query updates and applies/removes the css class.\n     *\n     * @param queryString {String} the media query to evaluate\n     * @param className {String} css class name that gets bind to an element\n     *\n     * @attach {qxWeb}\n     * @return {qxWeb} Self instance for chaining\n     */\n    mediaQueryToClass: function (queryString, className) {\n      var query = qx.module.MatchMedia.matchMedia(queryString);\n      var callback = qx.module.MatchMedia.__applyClass.bind(this, query, className);\n\n      // apply classes initially\n      callback(query, className);\n\n      query.on(\"change\", callback);\n\n      return this;\n    }\n  },\n\n\n  defer: function (statics) {\n    qxWeb.$attachAll(this);\n  }\n});\n"
  ]
}