{
  "className": "qx.xml.Element",
  "packageName": "qx.xml",
  "name": "Element",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 36,
        "column": 0
      },
      "end": {
        "line": 348,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Cross browser XML Element API\n API to select, query and serialize XML elements.\n Further information:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Parsing_and_serializing_XML\">MDN Parsing and Serializing XML</a>\nPlease note that nodes selected using the <code>selectSingleNode()</code> and\n<code>selectNodes()</code> methods remain in their document context so\n<code>qx.xml.Element.selectNodes(foo,\nwill search the entire document for any nodes named \"bar\", not just the\n<code>foo</code> node.</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__xpe": {
      "location": {
        "start": {
          "line": 40,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 16
        }
      },
      "type": "variable",
      "access": "private"
    },
    "XML_SERIALIZER": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 46,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} <code>true</code> if the native XMLSerializer should be used,\n <code>false</code> otherwise."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "serialize": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 65,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The subtree rooted by the specified element or document is serialized to a string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element | Document} The root of the subtree to be serialized. This could be any node, including a Document.",
            "paramName": "element",
            "description": " The root of the subtree to be serialized. This could be any node, including a Document.",
            "type": [
              "Element",
              "Document"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Serialized subtree",
            "type": "qx.xml.String",
            "description": " Serialized subtree"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "selectSingleNode": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects the first XmlNode that matches the XPath expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element | Document} root element for the search",
            "paramName": "element",
            "description": " root element for the search",
            "type": [
              "Element",
              "Document"
            ]
          },
          {
            "name": "@param",
            "body": "query {String} XPath query",
            "paramName": "query",
            "description": " XPath query",
            "type": "qx.xml.String"
          },
          {
            "name": "@param",
            "body": "namespaces {Map} optional map of prefixes and their namespace URIs",
            "paramName": "namespaces",
            "description": " optional map of prefixes and their namespace URIs",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} first matching element",
            "type": "qx.xml.Element",
            "description": " first matching element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "selectNodes": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects a list of nodes matching the XPath expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element | Document} root element for the search",
            "paramName": "element",
            "description": " root element for the search",
            "type": [
              "Element",
              "Document"
            ]
          },
          {
            "name": "@param",
            "body": "query {String} XPath query",
            "paramName": "query",
            "description": " XPath query",
            "type": "qx.xml.String"
          },
          {
            "name": "@param",
            "body": "namespaces {Map} optional map of prefixes and their namespace URIs",
            "paramName": "namespaces",
            "description": " optional map of prefixes and their namespace URIs",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element[]} List of matching elements",
            "type": "Element[]",
            "description": " List of matching elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getElementsByTagNameNS": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of elements with the given tag name belonging to the given namespace\n (See\n <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagNameNS\">MDN\n Reference</a>).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element | Document} the element from where the search should start.\n       Note that only the descendants of this element are included in the search, not the node itself.",
            "paramName": "element",
            "description": " the element from where the search should start.\n       Note that only the descendants of this element are included in the search, not the node itself.",
            "type": [
              "Element",
              "Document"
            ]
          },
          {
            "name": "@param",
            "body": "namespaceURI {var} is the namespace URI of elements to look for . For example, if you need to look\n       for XHTML elements, use the XHTML namespace URI, <tt>http://www.w3.org/1999/xhtml/</tt>.",
            "paramName": "namespaceURI",
            "description": " is the namespace URI of elements to look for . For example, if you need to look\n       for XHTML elements, use the XHTML namespace URI, <tt>http://www.w3.org/1999/xhtml/</tt>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "tagname {String} the tagname to look for",
            "paramName": "tagname",
            "description": " the tagname to look for",
            "type": "qx.xml.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element[]} a list of found elements in the order they appear in the tree.",
            "type": "Element[]",
            "description": " a list of found elements in the order they appear in the tree."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSingleNodeText": {
      "location": {
        "start": {
          "line": 235,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects the first XmlNode that matches the XPath expression and returns the text content of the element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element|Document} root element for the search",
            "paramName": "element",
            "description": " root element for the search",
            "type": [
              "Element",
              "Document"
            ]
          },
          {
            "name": "@param",
            "body": "query {String}  XPath query",
            "paramName": "query",
            "description": "  XPath query",
            "type": "qx.xml.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the joined text content of the found element or null if not appropriate.",
            "type": "qx.xml.String",
            "description": " the joined text content of the found element or null if not appropriate."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setAttributeNS": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds or sets an attribute with the given namespace on a node</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "document {Document} The node's parent document, created e.g. by\n {@link qx.xml.Document#create}",
            "paramName": "document",
            "description": " The node's parent document, created e.g. by\n {@link qx.xml.Document#create}",
            "type": "qx.xml.Document"
          },
          {
            "name": "@param",
            "body": "element {Element} XML/DOM element to modify",
            "paramName": "element",
            "description": " XML/DOM element to modify",
            "type": "qx.xml.Element"
          },
          {
            "name": "@param",
            "body": "namespaceUri {String} Namespace URI",
            "paramName": "namespaceUri",
            "description": " Namespace URI",
            "type": "qx.xml.String"
          },
          {
            "name": "@param",
            "body": "name {String} Attribute name",
            "paramName": "name",
            "description": " Attribute name",
            "type": "qx.xml.String"
          },
          {
            "name": "@param",
            "body": "value {String} Attribute value",
            "paramName": "value",
            "description": " Attribute value",
            "type": "qx.xml.String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAttributeNS": {
      "location": {
        "start": {
          "line": 277,
          "column": 4
        },
        "end": {
          "line": 299,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value of the attribute with the given namespace and name</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} XML/DOM element to modify",
            "paramName": "element",
            "description": " XML/DOM element to modify",
            "type": "qx.xml.Element"
          },
          {
            "name": "@param",
            "body": "namespaceUri {String} Namespace URI",
            "paramName": "namespaceUri",
            "description": " Namespace URI",
            "type": "qx.xml.String"
          },
          {
            "name": "@param",
            "body": "name {String} Attribute name",
            "paramName": "name",
            "description": " Attribute name",
            "type": "qx.xml.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the value of the attribute, empty string if not found",
            "type": "qx.xml.String",
            "description": " the value of the attribute, empty string if not found"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createSubElementNS": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 332,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates an element with the given namespace and appends it to an existing\n element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "document {Document} The node's parent document, created e.g. by\n {@link qx.xml.Document#create}",
            "paramName": "document",
            "description": " The node's parent document, created e.g. by\n {@link qx.xml.Document#create}",
            "type": "qx.xml.Document"
          },
          {
            "name": "@param",
            "body": "parent {Element} The parent element for the new sub-element",
            "paramName": "parent",
            "description": " The parent element for the new sub-element",
            "type": "qx.xml.Element"
          },
          {
            "name": "@param",
            "body": "name {String} The new element's name",
            "paramName": "name",
            "description": " The new element's name",
            "type": "qx.xml.String"
          },
          {
            "name": "@param",
            "body": "namespaceUri {String} Namespace URI for the new element",
            "paramName": "namespaceUri",
            "description": " Namespace URI for the new element",
            "type": "qx.xml.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The newly created sub-element",
            "type": "qx.xml.Element",
            "description": " The newly created sub-element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 341,
        "column": 10
      },
      "end": {
        "line": 347,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DEFER\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}