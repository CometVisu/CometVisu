{
  "className": "qx.io.remote.transport.Abstract",
  "packageName": "qx.io.remote.transport",
  "name": "Abstract",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 513,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Abstract for all transport implementations</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 37,
        "column": 14
      },
      "end": {
        "line": 44,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "events": {
    "created": {
      "location": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 57,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is created</p>"
          }
        ]
      },
      "name": "created",
      "type": "qx.event.type.Event"
    },
    "configured": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is configured</p>"
          }
        ]
      },
      "name": "configured",
      "type": "qx.event.type.Event"
    },
    "sending": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is send</p>"
          }
        ]
      },
      "name": "sending",
      "type": "qx.event.type.Event"
    },
    "receiving": {
      "location": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is received</p>"
          }
        ]
      },
      "name": "receiving",
      "type": "qx.event.type.Event"
    },
    "completed": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is completed</p>"
          }
        ]
      },
      "name": "completed",
      "type": "qx.event.type.Event"
    },
    "aborted": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is aborted</p>"
          }
        ]
      },
      "name": "aborted",
      "type": "qx.event.type.Event"
    },
    "failed": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request has failed</p>"
          }
        ]
      },
      "name": "failed",
      "type": "qx.event.type.Event"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request has timed out</p>"
          }
        ]
      },
      "name": "timeout",
      "type": "qx.event.type.Event"
    }
  },
  "properties": {
    "url": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Target url to issue the request to</p>"
          }
        ]
      },
      "name": "url",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "method": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determines what type of request to issue</p>"
          }
        ]
      },
      "name": "method",
      "propertyType": "new",
      "nullable": true,
      "init": "GET",
      "allowNull": true,
      "check": "String",
      "defaultValue": "GET"
    },
    "asynchronous": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 114,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the request to asynchronous</p>"
          }
        ]
      },
      "name": "asynchronous",
      "propertyType": "new",
      "nullable": true,
      "init": true,
      "allowNull": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "data": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the data to be sent via this request</p>"
          }
        ]
      },
      "name": "data",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "username": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Username to use for HTTP authentication</p>"
          }
        ]
      },
      "name": "username",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "password": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Password to use for HTTP authentication</p>"
          }
        ]
      },
      "name": "password",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "state": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The state of the current request</p>"
          }
        ]
      },
      "name": "state",
      "propertyType": "new",
      "event": "changeState",
      "apply": "_applyState",
      "init": "created",
      "possibleValues": [
        "created",
        "configured",
        "sending",
        "receiving",
        "completed",
        "aborted",
        "timeout",
        "failed"
      ],
      "defaultValue": "created"
    },
    "requestHeaders": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 156,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request headers</p>"
          }
        ]
      },
      "name": "requestHeaders",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Object"
    },
    "parameters": {
      "location": {
        "start": {
          "line": 160,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request parameters to send.</p>"
          }
        ]
      },
      "name": "parameters",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Object"
    },
    "formFields": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 172,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request form fields to send.</p>"
          }
        ]
      },
      "name": "formFields",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Object"
    },
    "responseType": {
      "location": {
        "start": {
          "line": 176,
          "column": 4
        },
        "end": {
          "line": 180,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Response Type</p>"
          }
        ]
      },
      "name": "responseType",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "useBasicHttpAuth": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Use Basic HTTP Authentication</p>"
          }
        ]
      },
      "name": "useBasicHttpAuth",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Boolean"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "send": {
      "location": {
        "start": {
          "line": 217,
          "column": 4
        },
        "end": {
          "line": 219,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  USER METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Sending a request.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "abort": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 238,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the aborted state (\"aborted\").\n Listeners of the \"aborted\" signal are notified about the event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 257,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the timeout state (\"timeout\").\n Listeners of the \"timeout\" signal are notified about the event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "failed": {
      "location": {
        "start": {
          "line": 266,
          "column": 4
        },
        "end": {
          "line": 276,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the failed state (\"failed\").\n Listeners of the \"failed\" signal are notified about the event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRequestHeader": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 300,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  REQUEST HEADER SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Add a request header to this transports qx.io.remote.Request.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Request header name",
            "paramName": "vLabel",
            "description": " Request header name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vValue {var} Value for the header",
            "paramName": "vValue",
            "description": " Value for the header",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseHeader": {
      "location": {
        "start": {
          "line": 322,
          "column": 4
        },
        "end": {
          "line": 324,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  RESPONSE HEADER SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Returns the request header of the request.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Response header name",
            "paramName": "vLabel",
            "description": " Response header name",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseHeaders": {
      "location": {
        "start": {
          "line": 337,
          "column": 4
        },
        "end": {
          "line": 339,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides an hash of all response headers.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStatusCode": {
      "location": {
        "start": {
          "line": 360,
          "column": 4
        },
        "end": {
          "line": 362,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  STATUS SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Returns the current status code of the request if available or -1 if not.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}",
            "type": "Integer",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStatusText": {
      "location": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 377,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the status text for the current request if available and null otherwise.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseText": {
      "location": {
        "start": {
          "line": 400,
          "column": 4
        },
        "end": {
          "line": 402,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  RESPONSE DATA SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Provides the response text from the request when available and null otherwise.\n By passing true as the \"partial\" parameter of this method, incomplete data will\n be made available to the caller.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseXml": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 419,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the XML provided by the response if any and null otherwise.\n By passing true as the \"partial\" parameter of this method, incomplete data will\n be made available to the caller.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Object",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFetchedLength": {
      "location": {
        "start": {
          "line": 432,
          "column": 4
        },
        "end": {
          "line": 434,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the length of the content as fetched thus far.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}",
            "type": "Integer",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyState": {
      "location": {
        "start": {
          "line": 452,
          "column": 4
        },
        "end": {
          "line": 497,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  APPLY ROUTINES\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Apply method for \"state\" property. For each state value a corresponding\n event is fired to inform the listeners.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "state"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>url</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ]
      }
    },
    "getMethod": {
      "type": "function",
      "name": "getMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>method</code>.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for method"
          }
        ]
      }
    },
    "setMethod": {
      "type": "function",
      "name": "setMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>method</code>.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for method"
          }
        ]
      }
    },
    "resetMethod": {
      "type": "function",
      "name": "resetMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>method</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ]
      }
    },
    "getAsynchronous": {
      "type": "function",
      "name": "getAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for asynchronous"
          }
        ]
      }
    },
    "isAsynchronous": {
      "type": "function",
      "name": "isAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for asynchronous"
          }
        ]
      }
    },
    "setAsynchronous": {
      "type": "function",
      "name": "setAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for asynchronous"
          }
        ]
      }
    },
    "resetAsynchronous": {
      "type": "function",
      "name": "resetAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>asynchronous</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ]
      }
    },
    "getData": {
      "type": "function",
      "name": "getData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>data</code>.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for data"
          }
        ]
      }
    },
    "setData": {
      "type": "function",
      "name": "setData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>data</code>.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for data"
          }
        ]
      }
    },
    "resetData": {
      "type": "function",
      "name": "resetData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>data</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ]
      }
    },
    "getUsername": {
      "type": "function",
      "name": "getUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for username"
          }
        ]
      }
    },
    "setUsername": {
      "type": "function",
      "name": "setUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for username"
          }
        ]
      }
    },
    "resetUsername": {
      "type": "function",
      "name": "resetUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>username</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ]
      }
    },
    "getPassword": {
      "type": "function",
      "name": "getPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for password"
          }
        ]
      }
    },
    "setPassword": {
      "type": "function",
      "name": "setPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for password"
          }
        ]
      }
    },
    "resetPassword": {
      "type": "function",
      "name": "resetPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>password</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ]
      }
    },
    "getState": {
      "type": "function",
      "name": "getState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for state"
          }
        ]
      }
    },
    "setState": {
      "type": "function",
      "name": "setState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for state"
          }
        ]
      }
    },
    "resetState": {
      "type": "function",
      "name": "resetState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>state</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ]
      }
    },
    "getRequestHeaders": {
      "type": "function",
      "name": "getRequestHeaders",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requestHeaders</code>.\n\nFor further details take a look at the property definition: {@link #requestHeaders}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for requestHeaders"
          }
        ]
      }
    },
    "setRequestHeaders": {
      "type": "function",
      "name": "setRequestHeaders",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requestHeaders</code>.\n\nFor further details take a look at the property definition: {@link #requestHeaders}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for requestHeaders"
          }
        ]
      }
    },
    "resetRequestHeaders": {
      "type": "function",
      "name": "resetRequestHeaders",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>requestHeaders</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #requestHeaders}."
          }
        ]
      }
    },
    "getParameters": {
      "type": "function",
      "name": "getParameters",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parameters</code>.\n\nFor further details take a look at the property definition: {@link #parameters}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for parameters"
          }
        ]
      }
    },
    "setParameters": {
      "type": "function",
      "name": "setParameters",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>parameters</code>.\n\nFor further details take a look at the property definition: {@link #parameters}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for parameters"
          }
        ]
      }
    },
    "resetParameters": {
      "type": "function",
      "name": "resetParameters",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>parameters</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #parameters}."
          }
        ]
      }
    },
    "getFormFields": {
      "type": "function",
      "name": "getFormFields",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>formFields</code>.\n\nFor further details take a look at the property definition: {@link #formFields}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for formFields"
          }
        ]
      }
    },
    "setFormFields": {
      "type": "function",
      "name": "setFormFields",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>formFields</code>.\n\nFor further details take a look at the property definition: {@link #formFields}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for formFields"
          }
        ]
      }
    },
    "resetFormFields": {
      "type": "function",
      "name": "resetFormFields",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>formFields</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #formFields}."
          }
        ]
      }
    },
    "getResponseType": {
      "type": "function",
      "name": "getResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>responseType</code>.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for responseType"
          }
        ]
      }
    },
    "setResponseType": {
      "type": "function",
      "name": "setResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>responseType</code>.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for responseType"
          }
        ]
      }
    },
    "resetResponseType": {
      "type": "function",
      "name": "resetResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>responseType</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ]
      }
    },
    "getUseBasicHttpAuth": {
      "type": "function",
      "name": "getUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "isUseBasicHttpAuth": {
      "type": "function",
      "name": "isUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "setUseBasicHttpAuth": {
      "type": "function",
      "name": "setUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useBasicHttpAuth"
          }
        ]
      }
    },
    "resetUseBasicHttpAuth": {
      "type": "function",
      "name": "resetUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>useBasicHttpAuth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 507,
        "column": 13
      },
      "end": {
        "line": 512,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": [
    "qx.io.remote.transport.Iframe",
    "qx.io.remote.transport.Script",
    "qx.io.remote.transport.XmlHttp"
  ]
}