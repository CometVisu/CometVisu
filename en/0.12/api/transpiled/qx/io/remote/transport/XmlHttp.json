{
  "className": "qx.io.remote.transport.XmlHttp",
  "packageName": "qx.io.remote.transport",
  "name": "XmlHttp",
  "superClass": "qx.io.remote.transport.Abstract",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 1016,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n     2006 Derrell Lipman\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n Derrell Lipman (derrell)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Transports requests to a server using the native XmlHttpRequest object.\n This class should not be used directly by client programmers.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "handles": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 54,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Capabilities of this transport type.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "createRequestObject": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a new XMLHttpRequest object suitable for the client browser.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} native XMLHttpRequest object",
            "type": "Object",
            "description": " native XMLHttpRequest object"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "isSupported": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the transport type is supported by the client.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} supported or not",
            "type": "Boolean",
            "description": " supported or not"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__timeout": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The timeout for Xhr requests</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "setTimeout": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the timeout for requests</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} This method is deprecated from the start because synchronous I/O itself is deprecated\n  in the W3C spec {@link https://xhr.spec.whatwg.org/} and timeouts are indicative of synchronous I/O and/or\n  other server issues.  However, this API is still supported by many browsers and this API is useful\n  for code which has not made the transition to asynchronous I/O"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTimeout": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the timeout for requests</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "parseJson": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If true and the responseType property is set to \"application/json\", getResponseContent() will\n return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().\n If false, the raw string data will be returned and the parsing must be done manually.\n This is useful for special JSON dialects / extensions which are not supported by\n qx.lang.Json.</p>"
          }
        ]
      },
      "name": "parseJson",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    }
  },
  "members": {
    "__localRequest": {
      "location": {
        "start": {
          "line": 164,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  CORE METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__lastReadyState": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__request": {
      "location": {
        "start": {
          "line": 166,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getRequest": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the native request object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} native XmlHTTPRequest object",
            "type": "Object",
            "description": " native XmlHTTPRequest object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "send": {
      "location": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 401,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  USER METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Implementation for sending the request</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "failedLocally": {
      "location": {
        "start": {
          "line": 411,
          "column": 4
        },
        "end": {
          "line": 421,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the failed state (\"failed\").\n This method should be used only if the requests URI was local\n access. I.e. it started with \"file://\".</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onreadystatechange": {
      "location": {
        "start": {
          "line": 439,
          "column": 4
        },
        "end": {
          "line": 489,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  EVENT HANDLER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Listener method for change of the \"readystate\".\n Sets the internal state and informs the transport layer.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} native event",
            "paramName": "e",
            "description": " native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "getReadyState": {
      "location": {
        "start": {
          "line": 507,
          "column": 4
        },
        "end": {
          "line": 516,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  READY STATE\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Get the ready state of this transports request.\n For qx.io.remote.transport.XmlHttp, ready state is a number between 1 to 4.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} ready state number",
            "type": "Integer",
            "description": " ready state number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRequestHeader": {
      "location": {
        "start": {
          "line": 533,
          "column": 4
        },
        "end": {
          "line": 535,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  REQUEST HEADER SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Set a request header to this transports request.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Request header name",
            "paramName": "vLabel",
            "description": " Request header name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vValue {var} Request header value",
            "paramName": "vValue",
            "description": " Request header value",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseHeader": {
      "location": {
        "start": {
          "line": 563,
          "column": 4
        },
        "end": {
          "line": 572,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  RESPONSE HEADER SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Returns a specific header provided by the server upon sending a request,\n with header name determined by the argument headerName.\n Only available at readyState 3 and 4 universally and in readyState 2\n in Gecko.\n Please note: Some servers/proxies (such as Selenium RC) will capitalize\n response header names. This is in accordance with RFC 2616[1], which\n states that HTTP 1.1 header names are case-insensitive, so your\n application should be case-agnostic when dealing with response headers.\n [1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Response header name",
            "paramName": "vLabel",
            "description": " Response header name",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Response header value",
            "type": "String|null",
            "description": " Response header value"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getStringResponseHeaders": {
      "location": {
        "start": {
          "line": 580,
          "column": 4
        },
        "end": {
          "line": 595,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all response headers of the request.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} response headers",
            "type": "var",
            "description": " response headers"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseHeaders": {
      "location": {
        "start": {
          "line": 603,
          "column": 4
        },
        "end": {
          "line": 623,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides a hash of all response headers.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} hash of all response headers",
            "type": "var",
            "description": " hash of all response headers"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getStatusCode": {
      "location": {
        "start": {
          "line": 639,
          "column": 4
        },
        "end": {
          "line": 655,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  STATUS SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Returns the current status code of the request if available or -1 if not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} current status code",
            "type": "Integer",
            "description": " current status code"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getStatusText": {
      "location": {
        "start": {
          "line": 664,
          "column": 4
        },
        "end": {
          "line": 673,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the status text for the current request if available and null\n otherwise.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} current status code text",
            "type": "String",
            "description": " current status code text"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseText": {
      "location": {
        "start": {
          "line": 691,
          "column": 4
        },
        "end": {
          "line": 705,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  RESPONSE DATA SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Provides the response text from the request when available and null\n otherwise.  By passing true as the \"partial\" parameter of this method,\n incomplete data will be made available to the caller.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Content of the response as string",
            "type": "String",
            "description": " Content of the response as string"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseXml": {
      "location": {
        "start": {
          "line": 716,
          "column": 4
        },
        "end": {
          "line": 759,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the XML provided by the response if any and null otherwise.  By\n passing true as the \"partial\" parameter of this method, incomplete data will\n be made available to the caller.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Content of the response as XML",
            "type": "String",
            "description": " Content of the response as XML"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If an error within the response occurs.",
            "type": "Error",
            "description": " If an error within the response occurs."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getFetchedLength": {
      "location": {
        "start": {
          "line": 767,
          "column": 4
        },
        "end": {
          "line": 771,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the length of the content as fetched thus far</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Length of the response text.",
            "type": "Integer",
            "description": " Length of the response text."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseContent": {
      "location": {
        "start": {
          "line": 779,
          "column": 4
        },
        "end": {
          "line": 903,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the content of the response</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null | String} Response content if available",
            "type": "null | String",
            "description": " Response content if available"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyState": {
      "location": {
        "start": {
          "line": 921,
          "column": 4
        },
        "end": {
          "line": 966,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  APPLY ROUTINES\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Apply method for the \"state\" property.\n Fires an event for each state value to inform the listeners.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getMethod": {
      "type": "function",
      "name": "getMethod",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>method</code>.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for method"
          }
        ]
      }
    },
    "setMethod": {
      "type": "function",
      "name": "setMethod",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>method</code>.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for method"
          }
        ]
      }
    },
    "resetMethod": {
      "type": "function",
      "name": "resetMethod",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getAsynchronous": {
      "type": "function",
      "name": "getAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for asynchronous"
          }
        ]
      }
    },
    "isAsynchronous": {
      "type": "function",
      "name": "isAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for asynchronous"
          }
        ]
      }
    },
    "setAsynchronous": {
      "type": "function",
      "name": "setAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for asynchronous"
          }
        ]
      }
    },
    "resetAsynchronous": {
      "type": "function",
      "name": "resetAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getData": {
      "type": "function",
      "name": "getData",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>data</code>.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for data"
          }
        ]
      }
    },
    "setData": {
      "type": "function",
      "name": "setData",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>data</code>.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for data"
          }
        ]
      }
    },
    "resetData": {
      "type": "function",
      "name": "resetData",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getUsername": {
      "type": "function",
      "name": "getUsername",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for username"
          }
        ]
      }
    },
    "setUsername": {
      "type": "function",
      "name": "setUsername",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for username"
          }
        ]
      }
    },
    "resetUsername": {
      "type": "function",
      "name": "resetUsername",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getPassword": {
      "type": "function",
      "name": "getPassword",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for password"
          }
        ]
      }
    },
    "setPassword": {
      "type": "function",
      "name": "setPassword",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for password"
          }
        ]
      }
    },
    "resetPassword": {
      "type": "function",
      "name": "resetPassword",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getState": {
      "type": "function",
      "name": "getState",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for state"
          }
        ]
      }
    },
    "setState": {
      "type": "function",
      "name": "setState",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for state"
          }
        ]
      }
    },
    "resetState": {
      "type": "function",
      "name": "resetState",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getRequestHeaders": {
      "type": "function",
      "name": "getRequestHeaders",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requestHeaders</code>.\n\nFor further details take a look at the property definition: {@link #requestHeaders}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for requestHeaders"
          }
        ]
      }
    },
    "setRequestHeaders": {
      "type": "function",
      "name": "setRequestHeaders",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requestHeaders</code>.\n\nFor further details take a look at the property definition: {@link #requestHeaders}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for requestHeaders"
          }
        ]
      }
    },
    "resetRequestHeaders": {
      "type": "function",
      "name": "resetRequestHeaders",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getParameters": {
      "type": "function",
      "name": "getParameters",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parameters</code>.\n\nFor further details take a look at the property definition: {@link #parameters}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for parameters"
          }
        ]
      }
    },
    "setParameters": {
      "type": "function",
      "name": "setParameters",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>parameters</code>.\n\nFor further details take a look at the property definition: {@link #parameters}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for parameters"
          }
        ]
      }
    },
    "resetParameters": {
      "type": "function",
      "name": "resetParameters",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getFormFields": {
      "type": "function",
      "name": "getFormFields",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>formFields</code>.\n\nFor further details take a look at the property definition: {@link #formFields}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for formFields"
          }
        ]
      }
    },
    "setFormFields": {
      "type": "function",
      "name": "setFormFields",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>formFields</code>.\n\nFor further details take a look at the property definition: {@link #formFields}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for formFields"
          }
        ]
      }
    },
    "resetFormFields": {
      "type": "function",
      "name": "resetFormFields",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getResponseType": {
      "type": "function",
      "name": "getResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>responseType</code>.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for responseType"
          }
        ]
      }
    },
    "setResponseType": {
      "type": "function",
      "name": "setResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>responseType</code>.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for responseType"
          }
        ]
      }
    },
    "resetResponseType": {
      "type": "function",
      "name": "resetResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getUseBasicHttpAuth": {
      "type": "function",
      "name": "getUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "isUseBasicHttpAuth": {
      "type": "function",
      "name": "isUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "setUseBasicHttpAuth": {
      "type": "function",
      "name": "setUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useBasicHttpAuth"
          }
        ]
      }
    },
    "resetUseBasicHttpAuth": {
      "type": "function",
      "name": "resetUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "property": "reset"
    },
    "getParseJson": {
      "type": "function",
      "name": "getParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parseJson</code>.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for parseJson"
          }
        ]
      }
    },
    "isParseJson": {
      "type": "function",
      "name": "isParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parseJson</code>.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for parseJson"
          }
        ]
      }
    },
    "setParseJson": {
      "type": "function",
      "name": "setParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>parseJson</code>.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for parseJson"
          }
        ]
      }
    },
    "resetParseJson": {
      "type": "function",
      "name": "resetParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>parseJson</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 977,
        "column": 10
      },
      "end": {
        "line": 982,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DEFER\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 993,
        "column": 13
      },
      "end": {
        "line": 1015,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}