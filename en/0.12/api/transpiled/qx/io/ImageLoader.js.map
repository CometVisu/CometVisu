{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/io/ImageLoader.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__data",
    "__defaultSize",
    "width",
    "height",
    "__knownImageTypesRegExp",
    "__dataUrlRegExp",
    "isLoaded",
    "source",
    "entry",
    "loaded",
    "isFailed",
    "failed",
    "isLoading",
    "loading",
    "getFormat",
    "format",
    "result",
    "exec",
    "lang",
    "Type",
    "isNumber",
    "getSize",
    "getWidth",
    "getHeight",
    "load",
    "callback",
    "context",
    "window",
    "callbacks",
    "push",
    "call",
    "el",
    "document",
    "createElement",
    "boundCallback",
    "Function",
    "listener",
    "__onload",
    "onload",
    "onerror",
    "src",
    "element",
    "abort",
    "aborted",
    "i",
    "l",
    "length",
    "event",
    "GlobalError",
    "observeMethod",
    "__onLoadHandler",
    "apply",
    "arguments",
    "bom",
    "client",
    "Engine",
    "getName",
    "parseFloat",
    "getVersion",
    "body",
    "appendChild",
    "isImageAvailable",
    "imgElem",
    "type",
    "removeChild",
    "dispose",
    "io",
    "ImageLoader"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * The ImageLoader can preload and manage loaded image resources. It easily\n * handles multiple requests and supports callbacks for successful and failed\n * requests.\n *\n * After loading of an image the dimension of the image is stored as long\n * as the application is running. This is quite useful for in-memory layouting.\n *\n * Use {@link #load} to preload your own images.\n */\nqx.Bootstrap.define(\"qx.io.ImageLoader\",\n{\n  statics :\n  {\n    /** @type {Map} Internal data structure to cache image sizes */\n    __data : {},\n\n\n    /** @type {Map} Default image size */\n    __defaultSize :\n    {\n      width : null,\n      height : null\n    },\n\n    /** @type {RegExp} Known image types */\n    __knownImageTypesRegExp : /\\.(png|gif|jpg|jpeg|bmp)\\b/i,\n\n    /** @type {RegExp} Image types of a data URL */\n    __dataUrlRegExp : /^data:image\\/(png|gif|jpg|jpeg|bmp)\\b/i,\n\n    /**\n     * Whether the given image has previously been loaded using the\n     * {@link #load} method.\n     *\n     * @param source {String} Image source to query\n     * @return {Boolean} <code>true</code> when the image is loaded\n     */\n    isLoaded : function(source)\n    {\n      var entry = this.__data[source];\n      return !!(entry && entry.loaded);\n    },\n\n\n    /**\n     * Whether the given image has previously been requested using the\n     * {@link #load} method but failed.\n     *\n     * @param source {String} Image source to query\n     * @return {Boolean} <code>true</code> when the image loading failed\n     */\n    isFailed : function(source)\n    {\n      var entry = this.__data[source];\n      return !!(entry && entry.failed);\n    },\n\n\n    /**\n     * Whether the given image is currently loading.\n     *\n     * @param source {String} Image source to query\n     * @return {Boolean} <code>true</code> when the image is loading in the moment.\n     */\n    isLoading : function(source)\n    {\n      var entry = this.__data[source];\n      return !!(entry && entry.loading);\n    },\n\n\n    /**\n     * Returns the format of a previously loaded image\n     *\n     * @param source {String} Image source to query\n     * @return {String ? null} The format of the image or <code>null</code>\n     */\n    getFormat : function(source)\n    {\n      var entry = this.__data[source];\n\n      if (! entry || ! entry.format)\n      {\n        var result = this.__dataUrlRegExp.exec(source);\n        if (result != null)\n        {\n          // If width and height aren't defined, provide some defaults\n          var width =\n            (entry && qx.lang.Type.isNumber(entry.width)\n             ? entry.width\n             : this.__defaultSize.width);\n\n          var height =\n            (entry && qx.lang.Type.isNumber(entry.height)\n             ? entry.height\n             : this.__defaultSize.height);\n\n          entry =\n            {\n              loaded : true,\n              format : result[1],\n              width  : width,\n              height : height\n            };\n        }\n      }\n      return entry ? entry.format : null;\n    },\n\n\n    /**\n     * Returns the size of a previously loaded image\n     *\n     * @param source {String} Image source to query\n     * @return {Map} The dimension of the image (<code>width</code> and\n     *    <code>height</code> as key). If the image is not yet loaded, the\n     *    dimensions are given as <code>null</code> for width and height.\n     */\n    getSize : function(source) {\n      var entry = this.__data[source];\n      return entry ? { width: entry.width, height: entry.height } : this.__defaultSize;\n    },\n\n\n    /**\n     * Returns the image width\n     *\n     * @param source {String} Image source to query\n     * @return {Integer} The width or <code>null</code> when the image is not loaded\n     */\n    getWidth : function(source)\n    {\n      var entry = this.__data[source];\n      return entry ? entry.width : null;\n    },\n\n\n    /**\n     * Returns the image height\n     *\n     * @param source {String} Image source to query\n     * @return {Integer} The height or <code>null</code> when the image is not loaded\n     */\n    getHeight : function(source)\n    {\n      var entry = this.__data[source];\n      return entry ? entry.height : null;\n    },\n\n\n    /**\n     * Loads the given image. Supports a callback which is\n     * executed when the image is loaded.\n     *\n     * This method works asynchronous.\n     *\n     * @param source {String} Image source to load\n     * @param callback {Function?} Callback function to execute\n     *   The first parameter of the callback is the given source url, the\n     *   second parameter is the data entry which contains additional\n     *   information about the image.\n     * @param context {Object?} Context in which the given callback should be executed\n     */\n    load : function(source, callback, context)\n    {\n      // Shorthand\n      var entry = this.__data[source];\n\n      if (!entry) {\n        entry = this.__data[source] = {};\n      }\n\n      // Normalize context\n      if (callback && !context) {\n        context = window;\n      }\n\n      // Already known image source\n      if (entry.loaded || entry.loading || entry.failed)\n      {\n        if (callback)\n        {\n          if (entry.loading) {\n            entry.callbacks.push(callback, context);\n          } else {\n            callback.call(context, source, entry);\n          }\n        }\n      }\n      else\n      {\n        // Updating entry\n        entry.loading = true;\n        entry.callbacks = [];\n\n        if (callback) {\n          entry.callbacks.push(callback, context);\n        }\n\n        // Create image element\n        var el = document.createElement('img');\n\n        // Create common callback routine\n        var boundCallback = qx.lang.Function.listener(this.__onload, this, el, source);\n\n        // Assign callback to element\n        el.onload = boundCallback;\n        el.onerror = boundCallback;\n\n        // Start loading of image\n        el.src = source;\n\n        // save the element for aborting\n        entry.element = el;\n      }\n    },\n\n\n    /**\n     * Abort the loading for the given url.\n     *\n     * @param source {String} URL of the image to abort its loading.\n     */\n    abort : function (source)\n    {\n      var entry = this.__data[source];\n\n      if (entry && !entry.loaded)\n      {\n        entry.aborted = true;\n\n        var callbacks = entry.callbacks;\n        var element = entry.element;\n\n        // Cleanup listeners\n        element.onload = element.onerror = null;\n\n        // prevent further loading\n        element.src = \"\";\n\n        // Cleanup entry\n        delete entry.callbacks;\n        delete entry.element;\n        delete entry.loading;\n\n        for (var i=0, l=callbacks.length; i<l; i+=2) {\n          callbacks[i].call(callbacks[i+1], source, entry);\n        }\n      }\n\n      this.__data[source] = null;\n    },\n\n\n    /**\n     * Calls a method based on qx.globalErrorHandling\n     */\n    __onload: function () {\n      var callback = qx.core.Environment.select(\"qx.globalErrorHandling\", {\n        \"true\": qx.event.GlobalError.observeMethod(this.__onLoadHandler),\n        \"false\": this.__onLoadHandler\n      });\n      callback.apply(this, arguments);\n    },\n\n\n    /**\n     * Internal event listener for all load/error events.\n     *\n     * @signature function(event, element, source)\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element which represents the image\n     * @param source {String} The image source loaded\n     */\n    __onLoadHandler: function (event, element, source) {\n      // Shorthand\n      var entry = this.__data[source];\n\n      // [BUG #9149]: When loading a SVG IE11 won't have\n      // the width/height of the element set, unless\n      // it is inserted into the DOM.\n      if(qx.bom.client.Engine.getName() == \"mshtml\" &&\n          parseFloat(qx.bom.client.Engine.getVersion()) === 11)\n      {\n        document.body.appendChild(element);\n      }\n\n      var isImageAvailable = function (imgElem) {\n        return (imgElem && imgElem.height !== 0);\n      };\n\n      // [BUG #7497]: IE11 doesn't properly emit an error event\n      // when loading fails so augment success check\n      if (event.type === \"load\" && isImageAvailable(element)) {\n        // Store dimensions\n        entry.loaded = true;\n        entry.width = element.width;\n        entry.height = element.height;\n\n        // try to determine the image format\n        var result = this.__knownImageTypesRegExp.exec(source);\n        if (result != null) {\n          entry.format = result[1];\n        }\n      }\n      else {\n        entry.failed = true;\n      }\n\n      if(qx.bom.client.Engine.getName() == \"mshtml\" &&\n          parseFloat(qx.bom.client.Engine.getVersion()) === 11)\n      {\n        document.body.removeChild(element);\n      }\n\n      // Cleanup listeners\n      element.onload = element.onerror = null;\n\n      // Cache callbacks\n      var callbacks = entry.callbacks;\n\n      // Cleanup entry\n      delete entry.loading;\n      delete entry.callbacks;\n      delete entry.element;\n\n      // Execute callbacks\n      for (var i = 0, l = callbacks.length; i < l; i += 2) {\n        callbacks[i].call(callbacks[i + 1], source, entry);\n      }\n    },\n\n\n    /**\n     * Dispose stored images.\n     */\n    dispose : function()\n    {\n      this.__data = {};\n    }\n  }\n});\n"
  ]
}