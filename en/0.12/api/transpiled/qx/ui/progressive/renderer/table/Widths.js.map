{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/Widths.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "numColumns",
    "__columnData",
    "i",
    "ui",
    "ColumnData",
    "members",
    "getData",
    "set",
    "column",
    "map",
    "key",
    "setWidth",
    "setMinWidth",
    "setMaxWidth",
    "Error",
    "width",
    "length",
    "setColumnWidth",
    "progressive",
    "renderer",
    "table",
    "Widths"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Column width array for a whole set of columns\n */\nqx.Class.define(\"qx.ui.progressive.renderer.table.Widths\",\n{\n  extend : qx.core.Object,\n\n  /**\n   * @param numColumns {Integer}\n   *   The number of columns being used.\n   */\n  construct : function(numColumns)\n  {\n    this.base(arguments);\n\n    // Create an array of the specified number of columns, and use the default\n    // column data.\n    this.__columnData = [ ];\n    for (var i = 0; i < numColumns; i++)\n    {\n      this.__columnData[i] = new qx.ui.core.ColumnData();\n    }\n  },\n\n  members :\n  {\n\n    __columnData : null,\n\n    /**\n     * Get the array of column data.\n     *\n     * @return {Array}\n     *   Array of column data\n     *\n     */\n    getData : function()\n    {\n      return this.__columnData;\n    },\n\n    /**\n     * Set the width, minimum width and/or maximum width of a column at one\n     * time.\n     *\n     * @param column {Integer}\n     *   The column number whose attributes are being set.\n     *\n     * @param map {Map}\n     *   An object with any or all of the three members, \"width\", \"minWidth\",\n     *   \"maxWidth\".  The property values are as described for {@link\n     *   #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n     *   respectively.\n     *\n     */\n    set : function(column, map)\n    {\n      for (var key in map)\n      {\n        switch(key)\n        {\n        case \"width\":\n          this.setWidth(column, map[key]);\n          break;\n\n        case \"minWidth\":\n          this.setMinWidth(column, map[key]);\n          break;\n\n        case \"maxWidth\":\n          this.setMaxWidth(column, map[key]);\n          break;\n\n        default:\n          throw new Error(\"Unrecognized key: \" + key);\n        }\n      }\n    },\n\n    /**\n     * Set the width of a column.\n     *\n     *\n     * @param column {Integer} The column whose width is to be set\n     *\n     * @param width {Integer|String}\n     *   The width of the specified column.  The width may be specified as\n     *   integer number of pixels (e.g. 100), a string representing percentage\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\n     *   representing a flex width (e.g. \"1*\").\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setWidth : function(column, width)\n    {\n      if (column > this.__columnData.length - 1 || column < 0)\n      {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setColumnWidth(width);\n    },\n\n    /**\n     * Set the minimum width of a column.\n     *\n     *\n     * @param column {Integer}\n     *   The column whose minimum width is to be set\n     *\n     * @param width {Integer}\n     *   The minimum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMinWidth : function(column, width)\n    {\n      if (column > this.__columnData.length - 1 || column < 0)\n      {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setMinWidth(width);\n    },\n\n    /**\n     * Set the maximum width of a column.\n     *\n     *\n     * @param column {Integer}\n     *   The column whose maximum width is to be set\n     *\n     * @param width {Integer}\n     *   The maximum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMaxWidth : function(column, width)\n    {\n      if (column > this.__columnData.length - 1 || column < 0)\n      {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setMaxWidth(width);\n    }\n  }\n});\n"
  ]
}