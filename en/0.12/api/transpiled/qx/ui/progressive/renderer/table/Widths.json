{
  "className": "qx.ui.progressive.renderer.table.Widths",
  "packageName": "qx.ui.progressive.renderer.table",
  "name": "Widths",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 172,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007-2008 Derrell Lipman\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Derrell Lipman (derrell)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Column width array for a whole set of columns</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 30,
        "column": 14
      },
      "end": {
        "line": 41,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "numColumns {Integer}\n   The number of columns being used.",
          "paramName": "numColumns",
          "description": "\n   The number of columns being used.",
          "type": "Integer"
        }
      ]
    }
  },
  "members": {
    "__columnData": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 46,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getData": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the array of column data.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}\n   Array of column data",
            "type": "Array",
            "description": "\n   Array of column data"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "set": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the width, minimum width and/or maximum width of a column at one\n time.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer}\n   The column number whose attributes are being set.",
            "paramName": "column",
            "description": "\n   The column number whose attributes are being set.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "map {Map}\n   An object with any or all of the three members, \"width\", \"minWidth\",\n   \"maxWidth\".  The property values are as described for {@link\n   #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n   respectively.",
            "paramName": "map",
            "description": "\n   An object with any or all of the three members, \"width\", \"minWidth\",\n   \"maxWidth\".  The property values are as described for {@link\n   #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n   respectively.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "setWidth": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column whose width is to be set",
            "paramName": "column",
            "description": " The column whose width is to be set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer|String}\n   The width of the specified column.  The width may be specified as\n   integer number of pixels (e.g. 100), a string representing percentage\n   of the inner width of the Table (e.g. \"25%\"), or a string\n   representing a flex width (e.g. \"1*\").",
            "paramName": "width",
            "description": "\n   The width of the specified column.  The width may be specified as\n   integer number of pixels (e.g. 100), a string representing percentage\n   of the inner width of the Table (e.g. \"25%\"), or a string\n   representing a flex width (e.g. \"1*\").",
            "type": [
              "Integer",
              "String"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setMinWidth": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the minimum width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer}\n   The column whose minimum width is to be set",
            "paramName": "column",
            "description": "\n   The column whose minimum width is to be set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer}\n   The minimum width of the specified column.",
            "paramName": "width",
            "description": "\n   The minimum width of the specified column.",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setMaxWidth": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 170,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the maximum width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer}\n   The column whose maximum width is to be set",
            "paramName": "column",
            "description": "\n   The column whose maximum width is to be set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer}\n   The maximum width of the specified column.",
            "paramName": "width",
            "description": "\n   The maximum width of the specified column.",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": []
}