{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/cell/Conditional.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "progressive",
    "renderer",
    "table",
    "cell",
    "Abstract",
    "construct",
    "align",
    "color",
    "style",
    "weight",
    "__numericAllowed",
    "__betweenAllowed",
    "__conditions",
    "__defaultTextAlign",
    "__defaultColor",
    "__defaultFontStyle",
    "__defaultFontWeight",
    "members",
    "__applyFormatting",
    "condition",
    "addNumericCondition",
    "value1",
    "target",
    "includes",
    "Error",
    "push",
    "addBetweenCondition",
    "value2",
    "addRegex",
    "regex",
    "_getCellStyle",
    "cellInfo",
    "length",
    "i",
    "bTestPassed",
    "compareValue",
    "test",
    "cellData",
    "element",
    "data",
    "the_pattern",
    "RegExp",
    "styleString",
    "key",
    "join",
    "destruct",
    "Conditional"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 by Tartan Solutions, Inc, http://www.tartansolutions.com\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Dan Hummon\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Table Cell Renderer for Progressive.\n */\nqx.Class.define(\"qx.ui.progressive.renderer.table.cell.Conditional\",\n{\n  extend     : qx.ui.progressive.renderer.table.cell.Abstract,\n\n\n  /**\n   * @param align {String}\n   *   The default alignment to format the cell with if the condition matches.\n   *\n   * @param color {String}\n   *   The default color to format the cell with if the condition matches.\n   *\n   * @param style {String}\n   *   The default style to format the cell with if the condition matches.\n   *\n   * @param weight {String}\n   *   The default weight to format the cell with if the condition matches.\n   */\n  construct : function(align, color, style, weight)\n  {\n    this.base(arguments);\n\n    this.__numericAllowed =\n      [\n        \"==\",\n        \"!=\",\n        \">\",\n        \"<\",\n        \">=\",\n        \"<=\"\n      ];\n\n    this.__betweenAllowed =\n      [\n        \"between\",\n        \"!between\"\n      ];\n\n    this.__conditions = [ ];\n\n    this.__defaultTextAlign = align || \"\";\n    this.__defaultColor = color || \"\";\n    this.__defaultFontStyle = style || \"\";\n    this.__defaultFontWeight = weight || \"\";\n  },\n\n\n\n  members :\n  {\n    __numericAllowed    : null,\n    __betweenAllowed    : null,\n    __conditions        : null,\n    __defaultTextAlign  : null,\n    __defaultColor      : null,\n    __defaultFontStyle  : null,\n    __defaultFontWeight : null,\n\n    /**\n     * Applies the cell styles to the style map.\n     *\n     * @param condition {Array}\n     *   The matched condition\n     *\n     * @param style {Map}\n     *   map of already applied styles.\n     */\n    __applyFormatting : function(condition, style)\n    {\n      if (condition.align)\n      {\n        style[\"text-align\"] = condition.align;\n      }\n\n      if (condition.color)\n      {\n        style[\"color\"] = condition.color;\n      }\n\n      if (condition.style)\n      {\n        style[\"font-style\"] = condition.style;\n      }\n\n      if (condition.weight)\n      {\n        style[\"font-weight\"] = condition.weight;\n      }\n    },\n\n\n    /**\n     * The addNumericCondition method is used to add a basic numeric condition\n     * to the cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the\n     * align, color, style and weight arguments. Null will allow pre-existing\n     * formatting to pass through, where an empty string will clear it back to\n     * the default formatting set in the constructor.\n     *\n     *\n     *\n     * @param condition {String}\n     *   The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\",\n     *   \">=\", and \"<=\".\n     *\n     * @param value1 {Integer}\n     *   The value to compare against.\n     *\n     * @param align {String}\n     *   The alignment to format the cell with if the condition matches.\n     *\n     * @param color {String}\n     *   The color to format the cell with if the condition matches.\n     *\n     * @param style {String}\n     *   The style to format the cell with if the condition matches.\n     *\n     * @param weight {String}\n     *   The weight to format the cell with if the condition matches.\n     *\n     * @param target {String}\n     *   The text value of the column to compare against. If this is null,\n     *   comparisons will be against the contents of this cell.\n     *\n     * @throws {Error} If the condition can not be recognized or the value\n     * is null.\n     */\n    addNumericCondition : function(condition, value1, align,\n                                   color, style, weight, target)\n    {\n      if (!this.__numericAllowed.includes(condition) ||\n          value1 == null)\n      {\n        throw new Error(\"Condition not recognized or value is null!\");\n      }\n\n      this.__conditions.push(\n        {\n          condition : condition,\n          align     : align,\n          color     : color,\n          style     : style,\n          weight    : weight,\n          value1    : value1,\n          target    :target\n        });\n    },\n\n\n    /**\n     * The addBetweenCondition method is used to add a between condition to\n     * the cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the\n     * align, color, style and weight arguments. Null will allow pre-existing\n     * formatting to pass through, where an empty string will clear it back to\n     * the default formatting set in the constructor.\n     *\n     *\n     *\n     * @param condition {String}\n     *   The type of condition. Accepted strings are \"between\" and \"!between\".\n     *\n     * @param value1 {Integer}\n     *   The first value to compare against.\n     *\n     * @param value2 {Integer}\n     *   The second value to compare against.\n     *\n     * @param align {String}\n     *   The alignment to format the cell with if the condition matches.\n     *\n     * @param color {String}\n     *   The color to format the cell with if the condition matches.\n     *\n     * @param style {String}\n     *   The style to format the cell with if the condition matches.\n     *\n     * @param weight {String}\n     *   The weight to format the cell with if the condition matches.\n     *\n     * @param target {String}\n     *   The text value of the column to compare against. If this is null,\n     *   comparisons will be against the contents of this cell.\n     *\n     *\n     * @throws {Error} If the condition can not recognized or one of the\n     * values is null.\n     */\n    addBetweenCondition : function(condition, value1, value2, align,\n                                   color, style, weight, target)\n    {\n      if (!this.__betweenAllowed.includes(condition) ||\n          value1 == null ||\n          value2 == null)\n      {\n        throw new Error(\"Condition not recognized or value1/value2 is null!\");\n      }\n\n      this.__conditions.push(\n        {\n          condition : condition,\n          align     : align,\n          color     : color,\n          style     : style,\n          weight    : weight,\n          value1    : value1,\n          value2    : value2,\n          target    : target\n        });\n    },\n\n\n    /**\n     * The addRegex method is used to add a regular expression condition to\n     * the cell renderer.\n     *\n     * Note: Passing null is different from passing an empty string in the\n     * align, color, style and weight arguments. Null will allow pre-existing\n     * formatting to pass through, where an empty string will clear it back to\n     * the default formatting set in the constructor.\n     *\n     *\n     *\n     * @param regex {String}\n     *   The regular expression to match against.\n     *\n     * @param align {String}\n     *   The alignment to format the cell with if the condition matches.\n     *\n     * @param color {String}\n     *   The color to format the cell with if the condition matches.\n     *\n     * @param style {String}\n     *   The style to format the cell with if the condition matches.\n     *\n     * @param weight {String}\n     *   The weight to format the cell with if the condition matches.\n     *\n     * @param target {String}\n     *   The text value of the column to compare against. If this is null,\n     *   comparisons will be against the contents of this cell.\n     *\n     * @throws {Error} If the regex is null.\n     */\n    addRegex : function(regex, align, color, style, weight, target)\n    {\n      if (! regex)\n      {\n        throw new Error(\"regex cannot be null!\");\n      }\n\n      this.__conditions.push(\n        {\n          condition : \"regex\",\n          align     : align,\n          color     : color,\n          style     : style,\n          weight    : weight,\n          regex     : regex,\n          target    : target\n        });\n    },\n\n\n    /**\n     * Overridden; called whenever the cell updates. The cell will iterate\n     * through each available condition and apply formatting for those that\n     * match. Multiple conditions can match, but later conditions will\n     * override earlier ones. Conditions with null values will stack with\n     * other conditions that apply to that value.\n     *\n     *\n     * @param cellInfo {Map}\n     *   The information about the cell.  See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @return {String}\n     */\n    _getCellStyle : function(cellInfo)\n    {\n      if (this.__conditions.length == 0)\n      {\n        return cellInfo.style || \"\";\n      }\n\n      var i;\n      var bTestPassed;\n      var compareValue;\n\n      var style =\n        {\n          \"text-align\"  : this.__defaultTextAlign,\n          \"color\"       : this.__defaultColor,\n          \"font-style\"  : this.__defaultFontStyle,\n          \"font-weight\" : this.__defaultFontWeight\n        };\n\n      for (i = 0; i < this.__conditions.length; i++)\n      {\n        var test = this.__conditions[i];\n\n        bTestPassed = false;\n\n        if (this.__numericAllowed.includes(test.condition))\n        {\n          if (test.target == null)\n          {\n            compareValue = cellInfo.cellData;\n          }\n          else\n          {\n            compareValue = cellInfo.element.data[test.target];\n          }\n\n          switch(test.condition)\n          {\n          case \"==\":\n            if (compareValue == test.value1)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n\n          case \"!=\":\n            if (compareValue != test.value1)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n\n          case \">\":\n            if (compareValue > test.value1)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n\n          case \"<\":\n            if (compareValue < test.value1)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n\n          case \">=\":\n            if (compareValue >= test.value1)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n\n          case \"<=\":\n            if (compareValue <= test.value1)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n          }\n        }\n        else if (this.__betweenAllowed.includes(test.condition))\n        {\n          if (test.target == null)\n          {\n            compareValue = cellInfo.cellData;\n          }\n          else\n          {\n            compareValue = cellInfo.element.data[test.target];\n          }\n\n          switch(test.condition)\n          {\n          case \"between\":\n            if (compareValue >= test.value1 &&\n                compareValue <= test.value2)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n\n          case \"!between\":\n            if (compareValue < test.value1 &&\n                compareValue > test.value2)\n            {\n              bTestPassed = true;\n            }\n\n            break;\n          }\n        }\n        else if (test.condition == \"regex\")\n        {\n          if (test.target == null)\n          {\n            compareValue = cellInfo.cellData;\n          }\n          else\n          {\n            compareValue = cellInfo.element.data[test.target];\n          }\n\n          var the_pattern = new RegExp(test.value1, 'g');\n          bTestPassed = the_pattern.test(compareValue);\n        }\n\n        // Apply formatting, if any.\n        if (bTestPassed)\n        {\n          this.__applyFormatting(test, style);\n        }\n\n        var styleString = [];\n        for(var key in style)\n        {\n          if (style[key])\n          {\n            styleString.push(key, \":\", style[key], \";\");\n          }\n        }\n      }\n\n      return styleString.join(\"\");\n    }\n  },\n\n  destruct : function() {\n    this.__numericAllowed = this.__betweenAllowed = this.__conditions = null;\n  }\n});\n"
  ]
}