{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/progressive/headfoot/TableHeading.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "progressive",
    "headfoot",
    "Abstract",
    "construct",
    "columnWidths",
    "labelArr",
    "__columnWidths",
    "columnData",
    "getData",
    "__labels",
    "i",
    "length",
    "label",
    "basic",
    "Atom",
    "setAppearance",
    "add",
    "spacer",
    "core",
    "Widget",
    "set",
    "height",
    "appearance",
    "minWidth",
    "width",
    "flex",
    "addListener",
    "_resizeColumns",
    "__layout",
    "layout",
    "HBox",
    "connectToWidget",
    "properties",
    "refine",
    "init",
    "members",
    "__bCalculateWidths",
    "join",
    "getLayoutChildren",
    "e",
    "getBounds",
    "bom",
    "element",
    "Scroll",
    "getScrollbarWidth",
    "padding",
    "top",
    "getPaddingTop",
    "right",
    "getPaddingRight",
    "bottom",
    "getPaddingBottom",
    "left",
    "getPaddingLeft",
    "renderLayout",
    "setWidth",
    "getComputedWidth",
    "destruct",
    "_disposeObjects",
    "TableHeading"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A header for a standard table.\n */\nqx.Class.define(\"qx.ui.progressive.headfoot.TableHeading\",\n{\n  extend     : qx.ui.progressive.headfoot.Abstract,\n\n  /**\n   * @param columnWidths {qx.ui.progressive.renderer.table.Widths}\n   *   The set of widths, minimum widths, and maximum widths to be used for\n   *   each of the columns in the table.\n   *\n   * @param labelArr {Array}\n   *   Array of labels, one for each of the columns.\n   *\n   */\n  construct : function(columnWidths, labelArr)\n  {\n    this.base(arguments);\n\n    // Save the Widths object containing all of our column widths\n    this.__columnWidths = columnWidths;\n\n    // Get the array of column width data\n    var columnData = columnWidths.getData();\n\n    // Create a place to put labels\n    this.__labels = [ ];\n\n    // For each label...\n    for (var i = 0; i < columnData.length; i++)\n    {\n      // ... create an atom to hold the label\n      var label = new qx.ui.basic.Atom(labelArr[i]);\n      label.setAppearance(\"progressive-table-header-cell\");\n\n      // Add the label to this heading.\n      this.add(label);\n\n      // Save this label so we can resize it later\n      this.__labels[i] = label;\n    }\n\n    // Add a spacer to take up the scroll-bar width\n    var spacer = new qx.ui.core.Widget();\n    spacer.set(\n    {\n      height : 16,\n      appearance : \"progressive-table-header-cell\",\n      minWidth : 0,\n      width : 0\n    });\n    this.add(spacer, { flex : 1 });\n\n    // Arrange to be called when the window appears or is resized, so we\n    // can set each style sheet's left and width field appropriately.\n    this.addListener(\"resize\", this._resizeColumns, this);\n\n    // This layout is not connected to a widget but to this class. This class\n    // must implement the method \"getLayoutChildren\", which must return all\n    // columns (LayoutItems) which should be recalculated. The call\n    // \"layout.renderLayout\" will call the method \"renderLayout\" on each\n    // column data object The advantage of the use of the normal layout\n    // manager is that the semantics of flex and percent are exactly the same\n    // as in the widget code.\n    this.__layout = new qx.ui.layout.HBox();\n    this.__layout.connectToWidget(this);\n  },\n\n  properties :\n  {\n    appearance :\n    {\n      refine : true,\n      init : \"progressive-table-header\"\n    }\n  },\n\n  members :\n  {\n\n    __columnWidths     : null,\n    __bCalculateWidths : null,\n    __labels           : null,\n    __layout           : null,\n\n    // overridden\n    join : function(progressive)\n    {\n      // Save the progressive handle\n      this.base(arguments, progressive);\n    },\n\n    /**\n     * This method is required by the box layout. If returns an array of items\n     * to relayout.\n     * @return {Array} List of child items\n     */\n    getLayoutChildren : function()\n    {\n      if (this.__bCalculateWidths)\n      {\n        return this.__columnWidths.getData();\n      }\n      else\n      {\n        return this.base(arguments);\n      }\n    },\n\n\n    /**\n     * Event handler for the \"resize\" event.  We recalculate and set the\n     * new widths of each of our columns.\n     *\n     * @param e {qx.event.type.Event}\n     *   Ignored.\n     *\n     */\n    _resizeColumns : function(e)\n    {\n      var width =\n        this.getBounds().width - qx.bom.element.Scroll.getScrollbarWidth();\n\n      // Compute the column widths\n      this.__bCalculateWidths = true;\n      var padding = {\n        top : this.getPaddingTop(),\n        right : this.getPaddingRight(),\n        bottom : this.getPaddingBottom(),\n        left : this.getPaddingLeft()\n      };\n      this.__layout.renderLayout(width, 100, padding);\n      this.__bCalculateWidths = false;\n\n      // Get the column data\n      var columnData = this.__columnWidths.getData();\n\n      // Get the column width data.  For each label...\n      for (var i = 0; i < columnData.length; i++)\n      {\n        // ... reset the width of the corresponding column (label)\n        this.__labels[i].setWidth(columnData[i].getComputedWidth());\n      }\n    }\n  },\n\n  destruct : function()\n  {\n    this.__columnWidths = this.__labels = null;\n\n    this._disposeObjects(\n      \"_layout\");\n  }\n});\n"
  ]
}