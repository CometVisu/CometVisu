{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/progressive/headfoot/Progress.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "progressive",
    "headfoot",
    "Abstract",
    "construct",
    "columnWidths",
    "labelArr",
    "setHeight",
    "setPadding",
    "__colors",
    "__linkColors",
    "set",
    "backgroundColor",
    "background",
    "__progressBar",
    "core",
    "Widget",
    "width",
    "indicatorDone",
    "add",
    "spacer",
    "indicatorUndone",
    "flex",
    "__percentDone",
    "basic",
    "Atom",
    "percentBackground",
    "textColor",
    "percentText",
    "exclude",
    "members",
    "__total",
    "_onChangeTheme",
    "colorMgr",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "resolve",
    "join",
    "addListener",
    "e",
    "getData",
    "initial",
    "show",
    "complete",
    "remaining",
    "mySize",
    "getBounds",
    "barWidth",
    "Math",
    "floor",
    "percent",
    "isNaN",
    "setMinWidth",
    "setLabel",
    "destruct",
    "_disposeObjects",
    "Progress"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * The standard footer used with Progressive's Table renderer, to show\n * progress of loading data into the table.\n */\nqx.Class.define(\"qx.ui.progressive.headfoot.Progress\",\n{\n  extend     : qx.ui.progressive.headfoot.Abstract,\n\n  /**\n   * @param columnWidths {qx.ui.progressive.renderer.table.Widths}\n   *   The set of widths, minimum widths, and maximum widths to be used for\n   *   each of the columns in the table.\n   *\n   * @param labelArr {Array}\n   *   Array of labels, one for each of the columns.\n   *\n   */\n  construct : function(columnWidths, labelArr)\n  {\n    this.base(arguments);\n\n    // Set a default height for the progress bar\n    this.setHeight(16);\n    this.setPadding(0);\n\n    this.__colors = {};\n\n    this.__linkColors();\n\n    this.set(\n    {\n      backgroundColor : this.__colors.background\n    });\n\n    // Create a widget that continually increases its width for progress bar\n    this.__progressBar = new qx.ui.core.Widget();\n    this.__progressBar.set(\n    {\n      width : 0,\n      backgroundColor : this.__colors.indicatorDone\n    });\n    this.add(this.__progressBar);\n\n    // Create a flex area between the progress bar and the percent done\n    var spacer = new qx.ui.core.Widget();\n    spacer.set(\n      {\n        backgroundColor : this.__colors.indicatorUndone\n      });\n    this.add(spacer, { flex : 1 });\n\n    // We also like to show progress as a percentage done string.\n    this.__percentDone = new qx.ui.basic.Atom(\"0%\");\n    this.__percentDone.set(\n    {\n      width           : 100,\n      backgroundColor : this.__colors.percentBackground,\n      textColor       : this.__colors.percentText\n    });\n    this.add(this.__percentDone);\n\n    // We're initially invisible\n    this.exclude();\n  },\n\n  members :\n  {\n    __total : null,\n    __colors : null,\n    __progressBar : null,\n    __percentDone : null,\n\n    // overridden\n    _onChangeTheme : function() {\n      this.base(arguments);\n      this.__linkColors();\n    },\n\n\n    /**\n     * Helper to link the theme colors to the current class.\n     */\n    __linkColors : function() {\n      // link to color theme\n      var colorMgr = qx.theme.manager.Color.getInstance();\n      this.__colors.background =\n        colorMgr.resolve(\"progressive-progressbar-background\");\n      this.__colors.indicatorDone =\n        colorMgr.resolve(\"progressive-progressbar-indicator-done\");\n      this.__colors.indicatorUndone =\n        colorMgr.resolve(\"progressive-progressbar-indicator-undone\");\n      this.__colors.percentBackground =\n        colorMgr.resolve(\"progressive-progressbar-percent-background\");\n      this.__colors.percentText =\n        colorMgr.resolve(\"progressive-progressbar-percent-text\");\n    },\n\n\n    // overridden\n    join : function(progressive)\n    {\n      // Save the progressive handle\n      this.base(arguments, progressive);\n\n      // Listen for the \"renderStart\" event, to save the number of elements on\n      // the queue, and to set ourself visible\n      progressive.addListener(\n        \"renderStart\",\n        function(e)\n        {\n          this.__total = e.getData().initial;\n          this.show();\n        },\n        this);\n\n      // Listen for the \"progress\" event, to update the progress bar\n      progressive.addListener(\n        \"progress\",\n        function(e)\n        {\n          var complete = 1.0 - (e.getData().remaining / this.__total);\n          var mySize = this.getBounds();\n          if (mySize)\n          {\n            var barWidth = Math.floor((mySize.width -\n                                       this.__percentDone.getBounds().width) *\n                                      complete);\n            var percent = Math.floor(complete * 100) + \"%\";\n\n            if (! isNaN(barWidth))\n            {\n              this.__progressBar.setMinWidth(barWidth);\n              this.__percentDone.setLabel(percent);\n            }\n          }\n        },\n                              this);\n\n      // Listen for the \"renderEnd\" event to make ourself invisible\n      progressive.addListener(\n        \"renderEnd\",\n        function(e)\n        {\n          this.exclude();\n        },\n        this);\n    }\n  },\n\n  destruct : function()\n  {\n    this.__colors = null;\n\n    this._disposeObjects(\n      \"__progressBar\",\n      \"__percentDone\");\n  }\n});\n"
  ]
}