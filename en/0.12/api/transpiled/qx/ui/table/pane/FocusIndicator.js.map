{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/FocusIndicator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "container",
    "Composite",
    "construct",
    "scroller",
    "layout",
    "Grow",
    "__scroller",
    "setKeepActive",
    "addListener",
    "_onKeyPress",
    "properties",
    "visibility",
    "refine",
    "init",
    "row",
    "check",
    "nullable",
    "column",
    "members",
    "e",
    "iden",
    "getKeyIdentifier",
    "stopPropagation",
    "moveToCell",
    "col",
    "editing",
    "getShowCellFocusIndicator",
    "getTable",
    "getTableModel",
    "isColumnEditable",
    "exclude",
    "show",
    "hide",
    "setRow",
    "setColumn",
    "xPos",
    "getTablePaneModel",
    "getX",
    "table",
    "columnModel",
    "getTableColumnModel",
    "paneModel",
    "firstRow",
    "getTablePane",
    "getFirstVisibleRow",
    "rowHeight",
    "getRowHeight",
    "wt",
    "wr",
    "wb",
    "wl",
    "decoKey",
    "getDecorator",
    "deco",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "getWidthTop",
    "getWidthRight",
    "getWidthBottom",
    "getWidthLeft",
    "userHeight",
    "userTop",
    "getMinCellEditHeight",
    "Math",
    "floor",
    "setUserBounds",
    "getColumnLeft",
    "getColumnWidth",
    "destruct",
    "pane",
    "FocusIndicator"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The focus indicator widget\n */\nqx.Class.define(\"qx.ui.table.pane.FocusIndicator\",\n{\n  extend : qx.ui.container.Composite,\n\n  /**\n   * @param scroller {qx.ui.table.pane.Scroller} The scroller, which contains this focus indicator\n   */\n  construct : function(scroller)\n  {\n    // use the grow layout to make sure that the editing control\n    // always fills the focus indicator box.\n    this.base(arguments, new qx.ui.layout.Grow());\n    this.__scroller = scroller;\n\n    this.setKeepActive(true);\n    this.addListener(\"keypress\", this._onKeyPress, this);\n  },\n\n  properties :\n  {\n    // overridden\n    visibility :\n    {\n      refine : true,\n      init : \"excluded\"\n    },\n\n    /** Table row, where the indicator is placed. */\n    row : {\n      check : \"Integer\",\n      nullable : true\n    },\n\n    /** Table column, where the indicator is placed. */\n    column : {\n      check : \"Integer\",\n      nullable : true\n    }\n  },\n\n  members :\n  {\n    __scroller : null,\n\n\n    /**\n     * Keypress handler. Suppress all key events but \"Enter\" and \"Escape\"\n     *\n     * @param e {qx.event.type.KeySequence} key event\n     */\n    _onKeyPress : function(e)\n    {\n      var iden = e.getKeyIdentifier();\n      if (iden !== \"Escape\" && iden !== \"Enter\") {\n        e.stopPropagation();\n      }\n    },\n\n\n    /**\n     * Move the focus indicator to the given table cell.\n     *\n     * @param col {Integer?null} The table column\n     * @param row {Integer?null} The table row\n     * @param editing {Boolean?null} Whether or not the cell is being edited\n     */\n    moveToCell : function(col, row, editing)\n    {\n      // check if the focus indicator is shown and if the new column is\n      // editable. if not, just exclude the indicator because the pointer events\n      // should go to the cell itself linked with HTML links [BUG #4250]\n      if (\n        !this.__scroller.getShowCellFocusIndicator() &&\n        !this.__scroller.getTable().getTableModel().isColumnEditable(col)\n      ) {\n        this.exclude();\n        return;\n      } else {\n        this.show();\n      }\n\n      if (col == null)\n      {\n        this.hide();\n        this.setRow(null);\n        this.setColumn(null);\n      }\n      else\n      {\n        var xPos = this.__scroller.getTablePaneModel().getX(col);\n\n        if (xPos === -1)\n        {\n          this.hide();\n          this.setRow(null);\n          this.setColumn(null);\n        }\n        else\n        {\n          var table = this.__scroller.getTable();\n          var columnModel = table.getTableColumnModel();\n          var paneModel = this.__scroller.getTablePaneModel();\n\n          var firstRow = this.__scroller.getTablePane().getFirstVisibleRow();\n          var rowHeight = table.getRowHeight();\n          var wt=0;\n          var wr=0;\n          var wb=0;\n          var wl=0;\n          var decoKey = this.getDecorator();\n          if (decoKey) {\n            var deco=qx.theme.manager.Decoration.getInstance().resolve(decoKey);\n            if (deco) {\n              wt = deco.getWidthTop();\n              wr = deco.getWidthRight();\n              wb = deco.getWidthBottom();\n              wl = deco.getWidthLeft();\n            }\n          }\n          var userHeight = rowHeight + (wl+wr-2);\n          var userTop = (row - firstRow) * rowHeight - (wr - 1);\n          if (editing && this.__scroller.getMinCellEditHeight() && this.__scroller.getMinCellEditHeight() > userHeight) {\n            userTop -= Math.floor((this.__scroller.getMinCellEditHeight() - userHeight) / 2);\n            userHeight = this.__scroller.getMinCellEditHeight();\n          }\n\n          this.setUserBounds(\n            paneModel.getColumnLeft(col) - (wt - 1),\n            userTop,\n            columnModel.getColumnWidth(col) + (wt+wb-3),\n            userHeight\n          );\n          this.show();\n          this.setRow(row);\n          this.setColumn(col);\n        }\n      }\n    }\n  },\n\n  destruct : function () {\n     this.__scroller = null;\n  }\n});\n"
  ]
}