{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Header.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "paneScroller",
    "_setLayout",
    "layout",
    "HBox",
    "__blocker",
    "Blocker",
    "__paneScroller",
    "members",
    "__moveFeedback",
    "__lastPointerOverColumn",
    "getPaneScroller",
    "getTable",
    "getBlocker",
    "onColOrderChanged",
    "_updateContent",
    "onPaneModelChanged",
    "onTableModelMetaDataChanged",
    "setColumnWidth",
    "col",
    "width",
    "isPointerAction",
    "child",
    "getHeaderWidgetAtColumn",
    "setWidth",
    "setPointerOverColumn",
    "widget",
    "removeState",
    "addState",
    "xPos",
    "getTablePaneModel",
    "getX",
    "_getChildren",
    "showColumnMoveFeedback",
    "x",
    "pos",
    "getContentLocation",
    "table",
    "cellWidget",
    "tableModel",
    "getTableModel",
    "columnModel",
    "getTableColumnModel",
    "cellInfo",
    "name",
    "getColumnName",
    "cellRenderer",
    "getHeaderCellRenderer",
    "feedback",
    "createHeaderCell",
    "size",
    "getBounds",
    "setHeight",
    "height",
    "setZIndex",
    "setOpacity",
    "setLayoutProperties",
    "top",
    "getApplicationRoot",
    "add",
    "left",
    "show",
    "hideColumnMoveFeedback",
    "destroy",
    "isShowingColumnMoveFeedback",
    "completeUpdate",
    "paneModel",
    "children",
    "colCount",
    "getColumnCount",
    "sortedColumn",
    "getSortColumnIndex",
    "_cleanUpCells",
    "sortedAscending",
    "isSortAscending",
    "getColumnAtX",
    "undefined",
    "colWidth",
    "getColumnWidth",
    "editable",
    "isColumnEditable",
    "sorted",
    "cachedWidget",
    "set",
    "_add",
    "updateHeaderCell",
    "length",
    "destruct",
    "dispose",
    "_disposeObjects",
    "pane",
    "Header"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * Shows the header of a table.\n */\nqx.Class.define(\"qx.ui.table.pane.Header\",\n{\n  extend : qx.ui.core.Widget,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\n   */\n  construct : function(paneScroller)\n  {\n    this.base(arguments);\n    this._setLayout(new qx.ui.layout.HBox());\n\n    // add blocker\n    this.__blocker = new qx.ui.core.Blocker(this);\n\n    this.__paneScroller = paneScroller;\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __paneScroller : null,\n    __moveFeedback : null,\n    __lastPointerOverColumn : null,\n    __blocker : null,\n\n    /**\n     * Returns the TablePaneScroller this header belongs to.\n     *\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\n     */\n    getPaneScroller : function() {\n      return this.__paneScroller;\n    },\n\n\n    /**\n     * Returns the table this header belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable : function() {\n      return this.__paneScroller.getTable();\n    },\n\n    /**\n     * Returns the blocker of the header.\n     *\n     * @return {qx.ui.core.Blocker} the blocker.\n     */\n    getBlocker : function() {\n      return this.__blocker;\n    },\n\n    /**\n     * Event handler. Called the column order has changed.\n     *\n     */\n    onColOrderChanged : function() {\n      this._updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    onPaneModelChanged : function() {\n      this._updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged : function() {\n      this._updateContent();\n    },\n\n\n    /**\n     * Sets the column width. This overrides the width from the column model.\n     *\n     * @param col {Integer}\n     *   The column to change the width for.\n     *\n     * @param width {Integer}\n     *   The new width.\n     *\n     * @param isPointerAction {Boolean}\n     *   <i>true</i> if the column width is being changed as a result of a\n     *   pointer drag in the header; false or undefined otherwise.\n     *\n     */\n    setColumnWidth : function(col, width, isPointerAction)\n    {\n      var child = this.getHeaderWidgetAtColumn(col);\n\n      if (child != null) {\n        child.setWidth(width);\n      }\n    },\n\n\n    /**\n     * Sets the column the pointer is currently over.\n     *\n     * @param col {Integer} the model index of the column the pointer is currently over or\n     *      null if the pointer is over no column.\n     */\n    setPointerOverColumn : function(col)\n    {\n      if (col != this.__lastPointerOverColumn)\n      {\n        if (this.__lastPointerOverColumn != null)\n        {\n          var widget = this.getHeaderWidgetAtColumn(this.__lastPointerOverColumn);\n\n          if (widget != null) {\n            widget.removeState(\"hovered\");\n          }\n        }\n\n        if (col != null) {\n          this.getHeaderWidgetAtColumn(col).addState(\"hovered\");\n        }\n\n        this.__lastPointerOverColumn = col;\n      }\n    },\n\n\n    /**\n     * Get the header widget for the given column\n     *\n     * @param col {Integer} The column number\n     * @return {qx.ui.table.headerrenderer.HeaderCell} The header cell widget\n     */\n    getHeaderWidgetAtColumn : function(col)\n    {\n      var xPos = this.getPaneScroller().getTablePaneModel().getX(col);\n      return this._getChildren()[xPos];\n    },\n\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param col {Integer} the model index of the column to show the move feedback for.\n     * @param x {Integer} the x position the left side of the feedback should have\n     *      (in pixels, relative to the left side of the header).\n     */\n    showColumnMoveFeedback : function(col, x)\n    {\n      var pos = this.getContentLocation();\n\n      if (this.__moveFeedback == null)\n      {\n        var table = this.getTable();\n        var xPos = this.getPaneScroller().getTablePaneModel().getX(col);\n        var cellWidget = this._getChildren()[xPos];\n\n        var tableModel = table.getTableModel();\n        var columnModel = table.getTableColumnModel();\n\n        var cellInfo =\n        {\n          xPos  : xPos,\n          col   : col,\n          name  : tableModel.getColumnName(col),\n          table : table\n        };\n\n        var cellRenderer = columnModel.getHeaderCellRenderer(col);\n        var feedback = cellRenderer.createHeaderCell(cellInfo);\n\n        var size = cellWidget.getBounds();\n\n        // Configure the feedback\n        feedback.setWidth(size.width);\n        feedback.setHeight(size.height);\n        feedback.setZIndex(1000000);\n        feedback.setOpacity(0.8);\n        feedback.setLayoutProperties({top: pos.top});\n\n        this.getApplicationRoot().add(feedback);\n        this.__moveFeedback = feedback;\n      }\n\n      this.__moveFeedback.setLayoutProperties({left: pos.left + x});\n      this.__moveFeedback.show();\n    },\n\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback : function()\n    {\n      if (this.__moveFeedback != null)\n      {\n        this.__moveFeedback.destroy();\n        this.__moveFeedback = null;\n      }\n    },\n\n\n    /**\n     * Returns whether the column move feedback is currently shown.\n     *\n     * @return {Boolean} <code>true</code> whether the column move feedback is\n     *    currently shown, <code>false</code> otherwise.\n     */\n    isShowingColumnMoveFeedback : function() {\n      return this.__moveFeedback != null;\n    },\n\n\n    /**\n     * Updates the content of the header.\n     *\n     * @param completeUpdate {Boolean} if true a complete update is performed. On a\n     *      complete update all header widgets are recreated.\n     */\n    _updateContent : function(completeUpdate)\n    {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var columnModel = table.getTableColumnModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n\n      var children = this._getChildren();\n      var colCount = paneModel.getColumnCount();\n\n      var sortedColumn = tableModel.getSortColumnIndex();\n\n      // Remove all widgets on the complete update\n      if (completeUpdate) {\n        this._cleanUpCells();\n      }\n\n      // Update the header\n      var cellInfo = {};\n      cellInfo.sortedAscending = tableModel.isSortAscending();\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        if (col === undefined) {\n          continue;\n        }\n\n        var colWidth = columnModel.getColumnWidth(col);\n\n        var cellRenderer = columnModel.getHeaderCellRenderer(col);\n\n        cellInfo.xPos = x;\n        cellInfo.col = col;\n        cellInfo.name = tableModel.getColumnName(col);\n        cellInfo.editable = tableModel.isColumnEditable(col);\n        cellInfo.sorted = (col == sortedColumn);\n        cellInfo.table = table;\n\n        // Get the cached widget\n        var cachedWidget = children[x];\n\n        // Create or update the widget\n        if (cachedWidget == null)\n        {\n          // We have no cached widget -> create it\n          cachedWidget = cellRenderer.createHeaderCell(cellInfo);\n\n          cachedWidget.set(\n          {\n            width  : colWidth\n          });\n\n          this._add(cachedWidget);\n        }\n        else\n        {\n          // This widget already created before -> recycle it\n          cellRenderer.updateHeaderCell(cellInfo, cachedWidget);\n        }\n\n        // set the states\n        if (x === 0) {\n          cachedWidget.addState(\"first\");\n          cachedWidget.removeState(\"last\");\n        } else if (x === colCount - 1) {\n          cachedWidget.removeState(\"first\");\n          cachedWidget.addState(\"last\");\n        } else {\n          cachedWidget.removeState(\"first\");\n          cachedWidget.removeState(\"last\");\n        }\n      }\n    },\n\n\n    /**\n     * Cleans up all header cells.\n     *\n     */\n    _cleanUpCells : function()\n    {\n      var children = this._getChildren();\n\n      for (var x=children.length-1; x>=0; x--)\n      {\n        var cellWidget = children[x];\n        cellWidget.destroy();\n      }\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__blocker.dispose();\n    this._disposeObjects(\"__paneScroller\");\n  }\n});\n"
  ]
}