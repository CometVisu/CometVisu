{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Scroller.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "scroll",
    "MScrollBarFactory",
    "construct",
    "table",
    "__table",
    "grid",
    "layout",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "_setLayout",
    "__header",
    "_showChildControl",
    "__tablePane",
    "__top",
    "container",
    "Composite",
    "HBox",
    "set",
    "minWidth",
    "_add",
    "row",
    "column",
    "colSpan",
    "_headerClipper",
    "_createHeaderClipper",
    "add",
    "addListener",
    "_onChangeCaptureHeader",
    "_onPointermoveHeader",
    "_onPointerdownHeader",
    "_onPointerupHeader",
    "_onTapHeader",
    "flex",
    "_paneClipper",
    "_createPaneClipper",
    "_onRoll",
    "_onPointermovePane",
    "_onPointerdownPane",
    "_onTapPane",
    "_onContextMenu",
    "Environment",
    "get",
    "_onDbltapPane",
    "_onResizePane",
    "__clipperContainer",
    "setLayout",
    "Canvas",
    "edge",
    "__horScrollBar",
    "__verScrollBar",
    "__focusIndicator",
    "getChildControl",
    "initShowCellFocusIndicator",
    "hide",
    "_onPointerout",
    "_onAppear",
    "_onDisappear",
    "__timer",
    "event",
    "Timer",
    "_oninterval",
    "initScrollTimeout",
    "statics",
    "MIN_COLUMN_WIDTH",
    "RESIZE_REGION_RADIUS",
    "TAP_TOLERANCE",
    "HORIZONTAL_SCROLLBAR",
    "VERTICAL_SCROLLBAR",
    "events",
    "properties",
    "horizontalScrollBarVisible",
    "check",
    "init",
    "apply",
    "nullable",
    "verticalScrollBarVisible",
    "tablePaneModel",
    "liveResize",
    "focusCellOnPointerMove",
    "selectBeforeFocus",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "resetSelectionOnHeaderTap",
    "scrollTimeout",
    "appearance",
    "refine",
    "members",
    "__lastRowCount",
    "__updateInterval",
    "__updateContentPlanned",
    "__onintervalWrapper",
    "_moveColumn",
    "__lastMoveColPos",
    "_lastMoveTargetX",
    "_lastMoveTargetScroller",
    "__lastMovePointerPageX",
    "__resizeColumn",
    "__lastResizePointerPageX",
    "__lastResizeWidth",
    "__lastPointerDownCell",
    "__firedTapEvent",
    "__ignoreTap",
    "__lastPointerPageX",
    "__lastPointerPageY",
    "__focusedCol",
    "__focusedRow",
    "_cellEditor",
    "__cellEditorFactory",
    "__topRightWidget",
    "__focusIndicatorPointerDownListener",
    "getPaneInsetRight",
    "topRight",
    "getTopRightWidget",
    "topRightWidth",
    "isVisible",
    "getBounds",
    "width",
    "getMarginLeft",
    "getMarginRight",
    "scrollBar",
    "scrollBarWidth",
    "getVerticalScrollBarVisible",
    "getVerticalScrollBarWidth",
    "Math",
    "max",
    "setPaneWidth",
    "isVerticalScrollBarVisible",
    "setWidth",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "getTable",
    "getNewTablePaneHeader",
    "getNewTablePane",
    "pane",
    "FocusIndicator",
    "setUserBounds",
    "setZIndex",
    "_onPointerupFocusIndicator",
    "show",
    "setDecorator",
    "_createScrollBar",
    "alignY",
    "_onScrollX",
    "setMinHeight",
    "AbstractScrollArea",
    "DEFAULT_SCROLLBAR_WIDTH",
    "bottom",
    "right",
    "left",
    "_onScrollY",
    "top",
    "_applyHorizontalScrollBarVisible",
    "value",
    "old",
    "setVisibility",
    "_applyVerticalScrollBarVisible",
    "_applyTablePaneModel",
    "removeListener",
    "_onPaneModelChanged",
    "_applyShowCellFocusIndicator",
    "_updateFocusIndicator",
    "getScrollY",
    "getPosition",
    "setScrollY",
    "scrollY",
    "renderSync",
    "scrollTo",
    "_updateContent",
    "getScrollX",
    "setScrollX",
    "scrollX",
    "Clipper",
    "onColVisibilityChanged",
    "updateHorScrollBarMaximum",
    "setColumnWidth",
    "col",
    "paneModel",
    "getTablePaneModel",
    "x",
    "getX",
    "onColOrderChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "rowCount",
    "getTableModel",
    "getRowCount",
    "colCount",
    "getTableColumnModel",
    "getOverallColumnCount",
    "updateVerScrollBarMaximum",
    "getFocusedRow",
    "setFocusedCell",
    "getFocusedColumn",
    "onSelectionChanged",
    "onFocusChanged",
    "onTableModelMetaDataChanged",
    "onPaneModelChanged",
    "_updateScrollBarVisibility",
    "paneSize",
    "getInnerSize",
    "scrollSize",
    "getTotalWidth",
    "setMaximum",
    "setKnobFactor",
    "pos",
    "setPosition",
    "min",
    "tableModel",
    "getKeepFirstVisibleRowComplete",
    "rowHeight",
    "getRowHeight",
    "height",
    "onKeepFirstVisibleRowCompleteChanged",
    "_startInterval",
    "getScrollTimeout",
    "_stopInterval",
    "e",
    "scrollLeft",
    "getData",
    "fireDataEvent",
    "getOldData",
    "scrollToX",
    "__inOnScrollY",
    "scrollbar",
    "delta",
    "abs",
    "getMaximum",
    "_postponedUpdateContent",
    "getPointerType",
    "getEnabled",
    "getDelta",
    "y",
    "scrollBy",
    "parseInt",
    "scrolled",
    "__isAtEdge",
    "getFocusCellOnPointerMove",
    "_focusCellAtPagePos",
    "stop",
    "stopMomentum",
    "position",
    "__handleResizeColumn",
    "pageX",
    "headerCell",
    "getHeaderWidgetAtColumn",
    "minColumnWidth",
    "getSizeHint",
    "newWidth",
    "getLiveResize",
    "columnModel",
    "_showResizeLine",
    "getColumnLeft",
    "__handleMoveColumn",
    "tapTolerance",
    "Scroller",
    "isShowingColumnMoveFeedback",
    "showColumnMoveFeedback",
    "targetScroller",
    "getTablePaneScrollerAtPageX",
    "hideColumnMoveFeedback",
    "useResizeCursor",
    "pointerOverColumn",
    "getDocumentLeft",
    "pageY",
    "getDocumentTop",
    "stopPropagation",
    "resizeCol",
    "_getResizeColumnForPageX",
    "_getColumnForPageX",
    "isColumnSortable",
    "cursor",
    "getApplicationRoot",
    "setGlobalCursor",
    "setCursor",
    "setPointerOverColumn",
    "_getRowForPagePos",
    "_startResizeHeader",
    "moveCol",
    "_startMoveHeader",
    "getColumnWidth",
    "capture",
    "isEditing",
    "stopEditing",
    "getRow",
    "getColumn",
    "fireEvent",
    "CellEvent",
    "_stopResizeHeader",
    "_stopMoveHeader",
    "_hideResizeLine",
    "releaseCapture",
    "fromVisXPos",
    "getFirstColumnX",
    "toVisXPos",
    "fromCol",
    "getVisibleColumnAtX",
    "toCol",
    "fromOverXPos",
    "getOverallX",
    "toOverXPos",
    "moveColumn",
    "sortCol",
    "getSortColumnIndex",
    "ascending",
    "isSortAscending",
    "data",
    "tapEvent",
    "sortByColumn",
    "getResetSelectionOnHeaderTap",
    "getSelectionModel",
    "resetSelection",
    "getSelectBeforeFocus",
    "getSelectionManager",
    "handleTap",
    "isHidden",
    "getContextMenuFromDataCellsOnly",
    "getShowCellFocusIndicator",
    "menu",
    "getContextMenu",
    "getChildren",
    "length",
    "openAtPointer",
    "exclude",
    "preventDefault",
    "_onContextMenuOpen",
    "startEditing",
    "resizeLine",
    "getWidth",
    "paneBounds",
    "round",
    "_excludeChildControl",
    "paneLeft",
    "getContentLocation",
    "getColumnCount",
    "targetXPos",
    "targetX",
    "currX",
    "xPos",
    "getColumnAtX",
    "colWidth",
    "scrollerLeft",
    "scrollerWidth",
    "lang",
    "Number",
    "limit",
    "scrollCellVisible",
    "clipperSize",
    "colLeft",
    "rowTop",
    "minScrollX",
    "maxScrollX",
    "minScrollY",
    "maxScrollY",
    "isColumnEditable",
    "getValue",
    "getCellEditorFactory",
    "cellInfo",
    "createCellEditor",
    "window",
    "Window",
    "setModal",
    "setShowClose",
    "_onCellEditorModalWindowClose",
    "f",
    "getModalCellEditorPreOpenFunction",
    "open",
    "addState",
    "setKeepActive",
    "focus",
    "activate",
    "flushEditor",
    "cancel",
    "getCellEditorValue",
    "oldValue",
    "setValue",
    "cancelEditing",
    "removeState",
    "removeListenerById",
    "destroy",
    "contentLocation",
    "regionRadius",
    "panePos",
    "floor",
    "tableY",
    "headerPos",
    "setTopRightWidget",
    "widget",
    "oldWidget",
    "remove",
    "getHeader",
    "getTablePane",
    "getNeededScrollBars",
    "forceHorizontal",
    "preventVertical",
    "verScrollBar",
    "verBarWidth",
    "horScrollBar",
    "horBarHeight",
    "getMarginTop",
    "getMarginBottom",
    "viewWidth",
    "viewHeight",
    "getHorizontalScrollBarVisible",
    "paneWidth",
    "paneHeight",
    "horNeeded",
    "verNeeded",
    "horBar",
    "verBar",
    "getPaneClipper",
    "getScrollAreaContainer",
    "_applyScrollTimeout",
    "timeout",
    "setInterval",
    "start",
    "GlobalError",
    "observeMethod",
    "_layoutPending",
    "oldFirstRow",
    "getFirstVisibleRow",
    "setFirstVisibleRow",
    "visibleRowCount",
    "ceil",
    "paneOffset",
    "firstVisibleRowComplete",
    "setVisibleRowCount",
    "scrollToY",
    "moveToCell",
    "destruct",
    "dispose",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Shows a whole meta column. This includes a {@link Header},\n * a {@link Pane} and the needed scroll bars. This class handles the\n * virtual scrolling and does all the pointer event handling.\n *\n * @childControl header {qx.ui.table.pane.Header} header pane\n * @childControl pane {qx.ui.table.pane.Pane} table pane to show the data\n * @childControl focus-indicator {qx.ui.table.pane.FocusIndicator} shows the current focused cell\n * @childControl resize-line {qx.ui.core.Widget} resize line widget\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n */\nqx.Class.define(\"qx.ui.table.pane.Scroller\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.scroll.MScrollBarFactory],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param table {qx.ui.table.Table} the table the scroller belongs to.\n   */\n  construct : function(table)\n  {\n    this.base(arguments);\n\n    this.__table = table;\n\n    // init layout\n    var grid = new qx.ui.layout.Grid();\n    grid.setColumnFlex(0, 1);\n    grid.setRowFlex(1, 1);\n    this._setLayout(grid);\n\n    // init child controls\n    this.__header = this._showChildControl(\"header\");\n    this.__tablePane = this._showChildControl(\"pane\");\n\n    // the top line containing the header clipper and the top right widget\n    this.__top = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n      minWidth: 0\n    });\n    this._add(this.__top, {row: 0, column: 0, colSpan: 2});\n\n    // embed header into a scrollable container\n    this._headerClipper = this._createHeaderClipper();\n    this._headerClipper.add(this.__header);\n    this._headerClipper.addListener(\"losecapture\", this._onChangeCaptureHeader, this);\n    this._headerClipper.addListener(\"pointermove\", this._onPointermoveHeader, this);\n    this._headerClipper.addListener(\"pointerdown\", this._onPointerdownHeader, this);\n    this._headerClipper.addListener(\"pointerup\", this._onPointerupHeader, this);\n    this._headerClipper.addListener(\"tap\", this._onTapHeader, this);\n    this.__top.add(this._headerClipper, {flex: 1});\n\n    // embed pane into a scrollable container\n    this._paneClipper = this._createPaneClipper();\n    this._paneClipper.add(this.__tablePane);\n    this._paneClipper.addListener(\"roll\", this._onRoll, this);\n    this._paneClipper.addListener(\"pointermove\", this._onPointermovePane, this);\n    this._paneClipper.addListener(\"pointerdown\", this._onPointerdownPane, this);\n    this._paneClipper.addListener(\"tap\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onContextMenu, this);\n    if (qx.core.Environment.get(\"device.type\") === \"desktop\") {\n      this._paneClipper.addListener(\"dblclick\", this._onDbltapPane, this);\n    } else {\n      this._paneClipper.addListener(\"dbltap\", this._onDbltapPane, this);\n    }\n    this._paneClipper.addListener(\"resize\", this._onResizePane, this);\n\n    // if we have overlayed scroll bars, we should use a separate container\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      this.__clipperContainer = new qx.ui.container.Composite();\n      this.__clipperContainer.setLayout(new qx.ui.layout.Canvas());\n      this.__clipperContainer.add(this._paneClipper, {edge: 0});\n      this._add(this.__clipperContainer, {row: 1, column: 0});\n    } else {\n      this._add(this._paneClipper, {row: 1, column: 0});\n    }\n\n    // init scroll bars\n    this.__horScrollBar = this._showChildControl(\"scrollbar-x\");\n    this.__verScrollBar = this._showChildControl(\"scrollbar-y\");\n\n    // init focus indicator\n    this.__focusIndicator = this.getChildControl(\"focus-indicator\");\n    // need to run the apply method at least once [BUG #4057]\n    this.initShowCellFocusIndicator();\n\n    // force creation of the resize line\n    this.getChildControl(\"resize-line\").hide();\n\n    this.addListener(\"pointerout\", this._onPointerout, this);\n    this.addListener(\"appear\", this._onAppear, this);\n    this.addListener(\"disappear\", this._onDisappear, this);\n\n    this.__timer = new qx.event.Timer();\n    this.__timer.addListener(\"interval\", this._oninterval, this);\n    this.initScrollTimeout();\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /** @type {int} The minimum width a column could get in pixels. */\n    MIN_COLUMN_WIDTH         : 10,\n\n    /** @type {int} The radius of the resize region in pixels. */\n    RESIZE_REGION_RADIUS     : 5,\n\n\n    /**\n     * (int) The number of pixels the pointer may move between pointer down and pointer up\n     * in order to count as a tap.\n     */\n    TAP_TOLERANCE          : 5,\n\n\n    /**\n     * (int) The mask for the horizontal scroll bar.\n     * May be combined with {@link #VERTICAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    HORIZONTAL_SCROLLBAR     : 1,\n\n\n    /**\n     * (int) The mask for the vertical scroll bar.\n     * May be combined with {@link #HORIZONTAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    VERTICAL_SCROLLBAR       : 2\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Dispatched if the pane is scrolled horizontally */\n    \"changeScrollY\" : \"qx.event.type.Data\",\n\n    /** Dispatched if the pane is scrolled vertically */\n    \"changeScrollX\" : \"qx.event.type.Data\",\n\n    /**See {@link qx.ui.table.Table#cellTap}.*/\n    \"cellTap\" : \"qx.ui.table.pane.CellEvent\",\n\n    /*** See {@link qx.ui.table.Table#cellDbltap}.*/\n    \"cellDbltap\" : \"qx.ui.table.pane.CellEvent\",\n\n    /**See {@link qx.ui.table.Table#cellContextmenu}.*/\n    \"cellContextmenu\" : \"qx.ui.table.pane.CellEvent\",\n\n    /** Dispatched when a sortable header was tapped */\n    \"beforeSort\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /**\n     * Whether to show the horizontal scroll bar. This is a tri-state\n     * value. `true` means show the scroll bar; `false` means exclude it; null\n     * means hide it so it retains its space but doesn't show a scroll bar.\n     */\n    horizontalScrollBarVisible :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyHorizontalScrollBarVisible\",\n      event : \"changeHorizontalScrollBarVisible\",\n      nullable : true\n    },\n\n    /** Whether to show the vertical scroll bar */\n    verticalScrollBarVisible :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyVerticalScrollBarVisible\",\n      event : \"changeVerticalScrollBarVisible\"\n    },\n\n    /** The table pane model. */\n    tablePaneModel :\n    {\n      check : \"qx.ui.table.pane.Model\",\n      apply : \"_applyTablePaneModel\",\n      event : \"changeTablePaneModel\"\n    },\n\n\n    /**\n     * Whether column resize should be live. If false, during resize only a line is\n     * shown and the real resize happens when the user releases the pointer button.\n     */\n    liveResize :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether to handle selections via the selection manager before setting the\n     * focus.  The traditional behavior is to handle selections after setting the\n     * focus, but setting the focus means redrawing portions of the table, and\n     * some subclasses may want to modify the data to be displayed based on the\n     * selection.\n     */\n    selectBeforeFocus :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyShowCellFocusIndicator\"\n    },\n\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n\n    /**\n     * Interval time (in milliseconds) for the table update timer.\n     * Setting this to 0 clears the timer.\n     */\n    scrollTimeout :\n    {\n      check : \"Integer\",\n      init : 100,\n      apply : \"_applyScrollTimeout\"\n    },\n\n\n    appearance :\n    {\n      refine : true,\n      init : \"table-scroller\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __lastRowCount : null,\n    __table : null,\n\n    __updateInterval : null,\n    __updateContentPlanned : null,\n    __onintervalWrapper : null,\n\n    _moveColumn : null,\n    __lastMoveColPos : null,\n    _lastMoveTargetX : null,\n    _lastMoveTargetScroller : null,\n    __lastMovePointerPageX : null,\n\n    __resizeColumn : null,\n    __lastResizePointerPageX : null,\n    __lastResizeWidth : null,\n\n    __lastPointerDownCell : null,\n    __firedTapEvent : false,\n    __ignoreTap : null,\n    __lastPointerPageX : null,\n    __lastPointerPageY : null,\n\n    __focusedCol : null,\n    __focusedRow : null,\n\n    _cellEditor : null,\n    __cellEditorFactory : null,\n\n    __topRightWidget : null,\n    __horScrollBar : null,\n    __verScrollBar : null,\n    __header : null,\n    _headerClipper : null,\n    __tablePane : null,\n    _paneClipper : null,\n    __clipperContainer : null,\n    __focusIndicator : null,\n    __top : null,\n\n    __timer : null,\n\n\t\t__focusIndicatorPointerDownListener: null,\n\n\n    /**\n     * The right inset of the pane. The right inset is the maximum of the\n     * top right widget width and the scrollbar width (if visible).\n     *\n     * @return {Integer} The right inset of the pane\n     */\n    getPaneInsetRight : function()\n    {\n      var topRight = this.getTopRightWidget();\n      var topRightWidth =\n        topRight && topRight.isVisible() && topRight.getBounds() ?\n          topRight.getBounds().width + topRight.getMarginLeft() + topRight.getMarginRight() :\n          0;\n\n      var scrollBar = this.__verScrollBar;\n      var scrollBarWidth = this.getVerticalScrollBarVisible() ?\n        this.getVerticalScrollBarWidth() + scrollBar.getMarginLeft() + scrollBar.getMarginRight() :\n        0;\n\n      return Math.max(topRightWidth, scrollBarWidth);\n    },\n\n\n    /**\n     * Set the pane's width\n     *\n     * @param width {Integer} The pane's width\n     */\n    setPaneWidth : function(width)\n    {\n      if (this.isVerticalScrollBarVisible()) {\n        width += this.getPaneInsetRight();\n      }\n      this.setWidth(width);\n    },\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"header\":\n          control = (this.getTable().getNewTablePaneHeader())(this);\n          break;\n\n        case \"pane\":\n          control = (this.getTable().getNewTablePane())(this);\n          break;\n\n        case \"focus-indicator\":\n          control = new qx.ui.table.pane.FocusIndicator(this);\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          control.addListener(\"pointerup\", this._onPointerupFocusIndicator, this);\n          this._paneClipper.add(control);\n          control.show();             // must be active for editor to operate\n          control.setDecorator(null); // it can be initially invisible, though.\n          break;\n\n        case \"resize-line\":\n          control = new qx.ui.core.Widget();\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          this._paneClipper.add(control);\n          break;\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\").set({\n            alignY: \"bottom\"\n          });\n          control.addListener(\"scroll\", this._onScrollX, this);\n\n          if (this.__clipperContainer != null) {\n            control.setMinHeight(qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH);\n            this.__clipperContainer.add(control, {bottom: 0, right: 0, left: 0});\n          } else {\n            this._add(control, {row: 2, column: 0});\n          }\n          break;\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.addListener(\"scroll\", this._onScrollY, this);\n\n          if (this.__clipperContainer != null) {\n            this.__clipperContainer.add(control, {right: 0, bottom: 0, top: 0});\n          } else {\n            this._add(control, {row: 1, column: 1});\n          }\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n    // property modifier\n    _applyHorizontalScrollBarVisible : function(value, old) {\n      if (value === null)\n      {\n        this.__horScrollBar.setVisibility(\"hidden\");\n      }\n      else\n      {\n        this.__horScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n      }\n    },\n\n\n    // property modifier\n    _applyVerticalScrollBarVisible : function(value, old) {\n      this.__verScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n    },\n\n\n    // property modifier\n    _applyTablePaneModel : function(value, old)\n    {\n      if (old != null) {\n        old.removeListener(\"modelChanged\", this._onPaneModelChanged, this);\n      }\n\n      value.addListener(\"modelChanged\", this._onPaneModelChanged, this);\n    },\n\n\n    // property modifier\n    _applyShowCellFocusIndicator : function(value, old)\n    {\n      if(value) {\n        this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n        this._updateFocusIndicator();\n      }\n      else {\n        if(this.__focusIndicator) {\n          this.__focusIndicator.setDecorator(null);\n        }\n      }\n    },\n\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollY : function() {\n      return this.__verScrollBar.getPosition();\n    },\n\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollY {Integer} The new scroll position.\n     * @param renderSync {Boolean?false} Whether the table update should be\n     *     performed synchronously.\n     */\n    setScrollY : function(scrollY, renderSync)\n    {\n      this.__verScrollBar.scrollTo(scrollY);\n      if (renderSync) {\n        this._updateContent();\n      }\n    },\n\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollX : function() {\n      return this.__horScrollBar.getPosition();\n    },\n\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollX {Integer} The new scroll position.\n     */\n    setScrollX : function(scrollX) {\n      this.__horScrollBar.scrollTo(scrollX);\n    },\n\n\n    /**\n     * Returns the table this scroller belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable : function() {\n      return this.__table;\n    },\n\n\n    /**\n     * Creates and returns an instance of pane clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createPaneClipper : function()\n    {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n\n    /**\n     * Creates and returns an instance of header clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createHeaderClipper : function()\n    {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     */\n    onColVisibilityChanged : function()\n    {\n      this.updateHorScrollBarMaximum();\n      this._updateFocusIndicator();\n    },\n\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth : function(col, width)\n    {\n      this.__header.setColumnWidth(col, width);\n      this.__tablePane.setColumnWidth(col, width);\n\n      var paneModel = this.getTablePaneModel();\n      var x = paneModel.getX(col);\n\n      if (x != -1)\n      {\n        // The change was in this scroller\n        this.updateHorScrollBarMaximum();\n        this._updateFocusIndicator();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     */\n    onColOrderChanged : function()\n    {\n      this.__header.onColOrderChanged();\n      this.__tablePane.onColOrderChanged();\n\n      this.updateHorScrollBarMaximum();\n    },\n\n\n    /**\n     * Event handler. Called when the table model has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged : function(firstRow, lastRow, firstColumn, lastColumn)\n    {\n      this.__tablePane.onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn);\n      var rowCount = this.getTable().getTableModel().getRowCount();\n      var colCount = this.__table.getTableColumnModel().getOverallColumnCount();\n\n      if (rowCount != this.__lastRowCount)\n      {\n        this.updateVerScrollBarMaximum();\n\n        if (this.getFocusedRow() === null && rowCount > 0 && colCount > 0)\n        {\n          this.setFocusedCell(this.getFocusedColumn()||0, 0);\n        } \n        else if (this.getFocusedRow() >= rowCount)\n        {\n          if (rowCount == 0) {\n            this.setFocusedCell(null, null);\n          } else {\n            this.setFocusedCell(this.getFocusedColumn(), rowCount - 1);\n          }\n        }\n        this.__lastRowCount = rowCount;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged : function() {\n      this.__tablePane.onSelectionChanged();\n    },\n\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged : function() {\n      this.__tablePane.onFocusChanged();\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged : function()\n    {\n      this.__header.onTableModelMetaDataChanged();\n      this.__tablePane.onTableModelMetaDataChanged();\n    },\n\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    _onPaneModelChanged : function()\n    {\n      this.__header.onPaneModelChanged();\n      this.__tablePane.onPaneModelChanged();\n    },\n\n\n    /**\n     * Event listener for the pane clipper's resize event\n     */\n    _onResizePane : function()\n    {\n      this.updateHorScrollBarMaximum();\n      this.updateVerScrollBarMaximum();\n\n      // The height has changed -> Update content\n      this._updateContent();\n      this.__header._updateContent();\n      this.__table._updateScrollBarVisibility();\n    },\n\n\n    /**\n     * Updates the maximum of the horizontal scroll bar, so it corresponds to the\n     * total width of the columns in the table pane.\n     */\n    updateHorScrollBarMaximum : function()\n    {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n      var scrollSize = this.getTablePaneModel().getTotalWidth();\n\n      var scrollBar = this.__horScrollBar;\n\n      if (paneSize.width < scrollSize)\n      {\n        var max = Math.max(0, scrollSize - paneSize.width);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.width / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      }\n      else\n      {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n\n    /**\n     * Updates the maximum of the vertical scroll bar, so it corresponds to the\n     * number of rows in the table.\n     */\n    updateVerScrollBarMaximum : function()\n    {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      if (this.getTable().getKeepFirstVisibleRowComplete()) {\n        rowCount += 1;\n      }\n\n      var rowHeight = this.getTable().getRowHeight();\n      var scrollSize = rowCount * rowHeight;\n      var scrollBar = this.__verScrollBar;\n\n      if (paneSize.height < scrollSize)\n      {\n        var max = Math.max(0, scrollSize - paneSize.height);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.height / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      }\n      else\n      {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the table property \"keepFirstVisibleRowComplete\"\n     * changed.\n     */\n    onKeepFirstVisibleRowCompleteChanged : function()\n    {\n      this.updateVerScrollBarMaximum();\n      this._updateContent();\n    },\n\n\n    /**\n     * Event handler for the scroller's appear event\n     */\n    _onAppear : function() {\n      // after the Scroller appears we start the interval again\n      this._startInterval(this.getScrollTimeout());\n    },\n\n\n    /**\n     * Event handler for the disappear event\n     */\n    _onDisappear : function()\n    {\n      // before the scroller disappears we need to stop it\n      this._stopInterval();\n    },\n\n\n    /**\n     * Event handler. Called when the horizontal scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    _onScrollX : function(e)\n    {\n      var scrollLeft = e.getData();\n\n      this.fireDataEvent(\"changeScrollX\", scrollLeft, e.getOldData());\n      this._headerClipper.scrollToX(scrollLeft);\n      this._paneClipper.scrollToX(scrollLeft);\n    },\n\n\n    /**\n     * Event handler. Called when the vertical scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    __inOnScrollY : false,\n    _onScrollY : function(e)\n    {\n      if (this.__inOnScrollY) {\n        return;\n      }\n      var scrollbar = this.__verScrollBar;\n      this.__inOnScrollY = true;\n      // calculate delta so that one row is scrolled at an minimum\n      var rowHeight = this.getTable().getRowHeight();\n      var delta = e.getData() - e.getOldData();\n      if ((Math.abs(delta) > 1) && (Math.abs(delta) < rowHeight)) {\n        delta = (delta < 0) ? e.getOldData() - rowHeight\n                            : e.getOldData() + rowHeight;\n        if (delta>=0&&delta<=scrollbar.getMaximum()) {\n          scrollbar.setPosition(delta);\n        }\n      }\n      this.__inOnScrollY = false;\n      this.fireDataEvent(\"changeScrollY\", scrollbar.getPosition(), e.getOldData());\n      this._postponedUpdateContent();\n    },\n\n\n    /**\n     * Event handler. Called when the user moved the mouse wheel.\n     *\n     * @param e {qx.event.type.Roll} the event.\n     */\n    _onRoll : function(e)\n    {\n      var table = this.getTable();\n\n      if (e.getPointerType() == \"mouse\" || !table.getEnabled()) {\n        return;\n      }\n\n      // vertical scrolling\n      var delta = e.getDelta();\n      // normalize that at least one step is scrolled at a time\n      if (delta.y > 0 && delta.y < 1) {\n        delta.y = 1;\n      } else if (delta.y < 0 && delta.y > -1) {\n        delta.y = -1;\n      }\n      this.__verScrollBar.scrollBy(parseInt(delta.y, 10));\n\n      var scrolled = delta.y != 0 && !this.__isAtEdge(this.__verScrollBar, delta.y);\n\n      // horizontal scrolling\n      // normalize that at least one step is scrolled at a time\n      if (delta.x > 0 && delta.x < 1) {\n        delta.x = 1;\n      } else if (delta.x < 0 && delta.x > -1) {\n        delta.x = -1;\n      }\n      this.__horScrollBar.scrollBy(parseInt(delta.x, 10));\n\n      // Update the focus\n      if (this.__lastPointerPageX && this.getFocusCellOnPointerMove()) {\n        this._focusCellAtPagePos(this.__lastPointerPageX, this.__lastPointerPageY);\n      }\n\n      scrolled = scrolled || (delta.x != 0 && !this.__isAtEdge(this.__horScrollBar, delta.x));\n\n      // pass the event to the parent if the scrollbar is at an edge\n      if (scrolled) {\n        e.stop();\n      } else {\n        e.stopMomentum();\n      }\n    },\n\n\n    /**\n     * Checks if the table has been scrolled.\n     * @param scrollBar {qx.ui.core.scroll.IScrollBar} The scrollbar to check\n     * @param delta {Number} The scroll delta.\n     * @return {Boolean} <code>true</code>, if the scrolling is a the edge\n     */\n    __isAtEdge : function(scrollBar, delta) {\n      var position = scrollBar.getPosition();\n      return (delta < 0 && position <= 0) || (delta > 0 && position >= scrollBar.getMaximum());\n    },\n\n\n    /**\n     * Common column resize logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     */\n    __handleResizeColumn : function(pageX)\n    {\n      var table = this.getTable();\n      // We are currently resizing -> Update the position\n      var headerCell = this.__header.getHeaderWidgetAtColumn(this.__resizeColumn);\n      var minColumnWidth = headerCell.getSizeHint().minWidth;\n\n      var newWidth = Math.max(minColumnWidth, this.__lastResizeWidth + pageX - this.__lastResizePointerPageX);\n\n      if (this.getLiveResize()) {\n        var columnModel = table.getTableColumnModel();\n        columnModel.setColumnWidth(this.__resizeColumn, newWidth, true);\n      } else {\n        var paneModel = this.getTablePaneModel();\n        this._showResizeLine(paneModel.getColumnLeft(this.__resizeColumn) + newWidth);\n      }\n\n      this.__lastResizePointerPageX += newWidth - this.__lastResizeWidth;\n      this.__lastResizeWidth = newWidth;\n    },\n\n\n    /**\n     * Common column move logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     *\n     */\n    __handleMoveColumn : function(pageX)\n    {\n      // We are moving a column\n\n      // Check whether we moved outside the tap tolerance so we can start\n      // showing the column move feedback\n      // (showing the column move feedback prevents the ontap event)\n      var tapTolerance = qx.ui.table.pane.Scroller.TAP_TOLERANCE;\n      if (this.__header.isShowingColumnMoveFeedback()\n        || pageX > this.__lastMovePointerPageX + tapTolerance\n        || pageX < this.__lastMovePointerPageX - tapTolerance)\n      {\n        this.__lastMoveColPos += pageX - this.__lastMovePointerPageX;\n\n        this.__header.showColumnMoveFeedback(this._moveColumn, this.__lastMoveColPos);\n\n        // Get the responsible scroller\n        var targetScroller = this.__table.getTablePaneScrollerAtPageX(pageX);\n        if (this._lastMoveTargetScroller && this._lastMoveTargetScroller != targetScroller) {\n          this._lastMoveTargetScroller.hideColumnMoveFeedback();\n        }\n        if (targetScroller != null) {\n          this._lastMoveTargetX = targetScroller.showColumnMoveFeedback(pageX);\n        } else {\n          this._lastMoveTargetX = null;\n        }\n\n        this._lastMoveTargetScroller = targetScroller;\n        this.__lastMovePointerPageX = pageX;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the user moved the pointer over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermoveHeader : function(e)\n    {\n      var table = this.getTable();\n\n      if (! table.getEnabled()) {\n        return;\n      }\n\n      var useResizeCursor = false;\n      var pointerOverColumn = null;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onmousewheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      if (this.__resizeColumn != null)\n      {\n        // We are currently resizing -> Update the position\n        this.__handleResizeColumn(pageX);\n        useResizeCursor = true;\n        e.stopPropagation();\n      }\n      else if (this._moveColumn != null)\n      {\n        // We are moving a column\n        this.__handleMoveColumn(pageX);\n        e.stopPropagation();\n      }\n      else\n      {\n        var resizeCol = this._getResizeColumnForPageX(pageX);\n        if (resizeCol != -1)\n        {\n          // The pointer is over a resize region -> Show the right cursor\n          useResizeCursor = true;\n        }\n        else\n        {\n          var tableModel = table.getTableModel();\n          var col = this._getColumnForPageX(pageX);\n          if (col != null && tableModel.isColumnSortable(col)) {\n            pointerOverColumn = col;\n          }\n        }\n      }\n\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n      this.__header.setPointerOverColumn(pointerOverColumn);\n    },\n\n\n    /**\n     * Event handler. Called when the user moved the pointer over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermovePane : function(e)\n    {\n      var table = this.getTable();\n\n      if (! table.getEnabled()) {\n        return;\n      }\n\n      //var useResizeCursor = false;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onpointerwheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n\n      var useResizeCursor = false;\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1)\n      {\n        // The pointer is over a resize region -> Show the right cursor\n        useResizeCursor = true;\n      }\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n\n\n      var row = this._getRowForPagePos(pageX, pageY);\n      if (row != null && this._getColumnForPageX(pageX) != null) {\n        // The pointer is over the data -> update the focus\n        if (this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n      }\n      this.__header.setPointerOverColumn(null);\n    },\n\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownHeader : function(e)\n    {\n      if (! this.getTable().getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1)\n      {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n      }\n      else\n      {\n        // The pointer is not in a resize region\n        var moveCol = this._getColumnForPageX(pageX);\n        if (moveCol != null)\n        {\n          this._startMoveHeader(moveCol, pageX);\n          e.stop();\n        }\n      }\n    },\n\n\n    /**\n     * Start a resize session of the header.\n     *\n     * @param resizeCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startResizeHeader : function(resizeCol, pageX)\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // The pointer is over a resize region -> Start resizing\n      this.__resizeColumn = resizeCol;\n      this.__lastResizePointerPageX = pageX;\n      this.__lastResizeWidth = columnModel.getColumnWidth(this.__resizeColumn);\n      this._headerClipper.capture();\n    },\n\n\n    /**\n     * Start a move session of the header.\n     *\n     * @param moveCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startMoveHeader : function(moveCol, pageX)\n    {\n      // Prepare column moving\n      this._moveColumn = moveCol;\n      this.__lastMovePointerPageX = pageX;\n      this.__lastMoveColPos = this.getTablePaneModel().getColumnLeft(moveCol);\n      this._headerClipper.capture();\n    },\n\n\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownPane : function(e)\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (table.isEditing()) {\n        table.stopEditing();\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1)\n      {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n        return;\n      }\n\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row !== null)\n      {\n        // The focus indicator blocks the tap event on the scroller so we\n        // store the current cell and listen for the pointerup event on the\n        // focus indicator\n        //\n        // INVARIANT:\n        //  The members of this object always contain the last position of\n        //  the cell on which the pointerdown event occurred.\n        //  *** These values are never cleared! ***.\n        //  Different browsers/OS combinations issue events in different\n        //  orders, and the context menu event, in particular, can be issued\n        //  early or late (Firefox on Linux issues it early; Firefox on\n        //  Windows issues it late) so no one may clear these values.\n        //\n        this.__lastPointerDownCell = {\n          row : row,\n          col : col\n        };\n\n        // On the other hand, we need to know if we've issued the tap event\n        // so we don't issue it twice, both from pointer-up on the focus\n        // indicator, and from the tap even on the pane. Both possibilities\n        // are necessary, however, to maintain the qooxdoo order of events.\n        this.__firedTapEvent = false;\n      }\n    },\n\n\n    /**\n     * Event handler for the focus indicator's pointerup event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerupFocusIndicator : function(e)\n    {\n      if (this.__lastPointerDownCell &&\n          !this.__firedTapEvent &&\n          !this.isEditing() &&\n          this.__focusIndicator.getRow() == this.__lastPointerDownCell.row &&\n          this.__focusIndicator.getColumn() == this.__lastPointerDownCell.col)\n      {\n        this.fireEvent(\"cellTap\",\n                       qx.ui.table.pane.CellEvent,\n                       [\n                         this,\n                         e,\n                         this.__lastPointerDownCell.row,\n                         this.__lastPointerDownCell.col\n                       ],\n                       true);\n        this.__firedTapEvent = true;\n      } else if (!this.isEditing()) {\n        // if no cellTap event should be fired, act like a pointerdown which\n        // invokes the change of the selection e.g. [BUG #1632]\n        this._onPointerdownPane(e);\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the event capturing of the header changed.\n     * Stops/finishes an active header resize/move session if it lost capturing\n     * during the session to stay in a stable state.\n     *\n     * @param e {qx.event.type.Data} The data event\n     */\n    _onChangeCaptureHeader : function(e)\n    {\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n      }\n\n      if (this._moveColumn != null) {\n        this._stopMoveHeader();\n      }\n    },\n\n\n    /**\n     * Stop a resize session of the header.\n     *\n     */\n    _stopResizeHeader : function()\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // We are currently resizing -> Finish resizing\n      if (! this.getLiveResize()) {\n        this._hideResizeLine();\n        columnModel.setColumnWidth(this.__resizeColumn,\n                                   this.__lastResizeWidth,\n                                   true);\n      }\n\n      this.__resizeColumn = null;\n      this._headerClipper.releaseCapture();\n\n      this.getApplicationRoot().setGlobalCursor(null);\n      this.setCursor(null);\n    },\n\n\n    /**\n     * Stop a move session of the header.\n     *\n     */\n    _stopMoveHeader : function()\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n\n      // We are moving a column -> Drop the column\n      this.__header.hideColumnMoveFeedback();\n      if (this._lastMoveTargetScroller) {\n        this._lastMoveTargetScroller.hideColumnMoveFeedback();\n      }\n\n      if (this._lastMoveTargetX != null)\n      {\n        var fromVisXPos = paneModel.getFirstColumnX() + paneModel.getX(this._moveColumn);\n        var toVisXPos = this._lastMoveTargetX;\n        if (toVisXPos != fromVisXPos && toVisXPos != fromVisXPos + 1)\n        {\n          // The column was really moved to another position\n          // (and not moved before or after itself, which is a noop)\n\n          // Translate visible positions to overall positions\n          var fromCol = columnModel.getVisibleColumnAtX(fromVisXPos);\n          var toCol   = columnModel.getVisibleColumnAtX(toVisXPos);\n          var fromOverXPos = columnModel.getOverallX(fromCol);\n          var toOverXPos = (toCol != null) ? columnModel.getOverallX(toCol) : columnModel.getOverallColumnCount();\n\n          if (toOverXPos > fromOverXPos) {\n            // Don't count the column itself\n            toOverXPos--;\n          }\n\n          // Move the column\n          columnModel.moveColumn(fromOverXPos, toOverXPos);\n\n          // update the focus indicator including the editor\n          this._updateFocusIndicator();\n        }\n      }\n\n      this._moveColumn = null;\n      this._lastMoveTargetX = null;\n      this._headerClipper.releaseCapture();\n    },\n\n\n    /**\n     * Event handler. Called when the user released a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerupHeader : function(e)\n    {\n      var table = this.getTable();\n\n      if (! table.getEnabled()) {\n        return;\n      }\n\n      if (this.__resizeColumn != null)\n      {\n        this._stopResizeHeader();\n        this.__ignoreTap = true;\n        e.stop();\n      }\n      else if (this._moveColumn != null)\n      {\n        this._stopMoveHeader();\n        e.stop();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapHeader : function(e)\n    {\n      if (this.__ignoreTap)\n      {\n        this.__ignoreTap = false;\n        return;\n      }\n\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var tableModel = table.getTableModel();\n\n      var pageX = e.getDocumentLeft();\n\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n\n      if (resizeCol == -1)\n      {\n        // pointer is not in a resize region\n        var col = this._getColumnForPageX(pageX);\n\n        if (col != null && tableModel.isColumnSortable(col))\n        {\n          // Sort that column\n          var sortCol = tableModel.getSortColumnIndex();\n          var ascending = (col != sortCol) ? true : !tableModel.isSortAscending();\n\n          var data =\n            {\n              column     : col,\n              ascending  : ascending,\n              tapEvent : e\n            };\n\n          if (this.fireDataEvent(\"beforeSort\", data, null, true))\n          {\n            // Stop cell editing\n            if (table.isEditing()) {\n              table.stopEditing();\n            }\n\n            tableModel.sortByColumn(col, ascending);\n            if (this.getResetSelectionOnHeaderTap())\n            {\n              table.getSelectionModel().resetSelection();\n            }\n          }\n        }\n      }\n\n      e.stop();\n    },\n\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapPane : function(e)\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row != null && col != null) {\n        var selectBeforeFocus = this.getSelectBeforeFocus();\n\n        if (selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        // The pointer is over the data -> update the focus\n        if (!this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n\n        if (!selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        if (this.__focusIndicator.isHidden() ||\n            (this.__lastPointerDownCell &&\n             !this.__firedTapEvent &&\n             !this.isEditing() &&\n             row == this.__lastPointerDownCell.row &&\n             col == this.__lastPointerDownCell.col))\n        {\n          this.fireEvent(\"cellTap\",\n                         qx.ui.table.pane.CellEvent,\n                         [this, e, row, col],\n                         true);\n          this.__firedTapEvent = true;\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when a context menu is invoked in a cell.\n     *\n     * @param e {qx.event.type.Pointer} the event.\n     */\n    _onContextMenu : function(e)\n    {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      /*\n       * The 'row' value will be null if the right-click was in the blank\n       * area below the last data row. Some applications desire to receive\n       * the context menu event anyway, and can set the property value of\n       * contextMenuFromDataCellsOnly to false to achieve that.\n       */\n      if (row === null && this.getContextMenuFromDataCellsOnly())\n      {\n        return;\n      }\n\n      if (! this.getShowCellFocusIndicator() ||\n          row === null ||\n          (this.__lastPointerDownCell &&\n           row == this.__lastPointerDownCell.row &&\n           col == this.__lastPointerDownCell.col))\n      {\n        this.fireEvent(\"cellContextmenu\",\n                       qx.ui.table.pane.CellEvent,\n                       [this, e, row, col],\n                       true);\n\n        // Now that the cellContextmenu handler has had a chance to build\n        // the menu for this cell, display it (if there is one).\n        var menu = this.getTable().getContextMenu();\n        if (menu)\n        {\n          // A menu with no children means don't display any context menu\n          // including the default context menu even if the default context\n          // menu is allowed to be displayed normally. There's no need to\n          // actually show an empty menu, though.\n          if (menu.getChildren().length > 0) {\n            menu.openAtPointer(e);\n          }\n          else\n          {\n            menu.exclude();\n          }\n\n          // Do not show native menu\n          e.preventDefault();\n        }\n      }\n    },\n\n\n    // overridden\n    _onContextMenuOpen : function(e)\n    {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n\n    /**\n     * Event handler. Called when the user double tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onDbltapPane : function(e)\n    {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var col = this._getColumnForPageX(pageX);\n\n      if (col !== null) {\n        this._focusCellAtPagePos(pageX, pageY);\n        this.startEditing();\n\n        var row = this._getRowForPagePos(pageX, pageY);\n        if (row != -1 && row != null) {\n          this.fireEvent(\"cellDbltap\", qx.ui.table.pane.CellEvent, [this, e, row], true);\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the pointer moved out.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerout : function(e)\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      // Reset the resize cursor when the pointer leaves the header\n      // If currently a column is resized then do nothing\n      // (the cursor will be reset on pointerup)\n      if (this.__resizeColumn == null)\n      {\n        this.setCursor(null);\n        this.getApplicationRoot().setGlobalCursor(null);\n      }\n\n      this.__header.setPointerOverColumn(null);\n\n      // in case the focus follows the pointer, it should be remove on pointerout\n      if (this.getFocusCellOnPointerMove()) {\n        this.__table.setFocusedCell();\n      }\n    },\n\n\n    /**\n     * Shows the resize line.\n     *\n     * @param x {Integer} the position where to show the line (in pixels, relative to\n     *      the left side of the pane).\n     */\n    _showResizeLine : function(x)\n    {\n      var resizeLine = this._showChildControl(\"resize-line\");\n\n      var width = resizeLine.getWidth();\n      var paneBounds = this._paneClipper.getBounds();\n      resizeLine.setUserBounds(\n        x - Math.round(width/2), 0, width, paneBounds.height\n      );\n    },\n\n\n    /**\n     * Hides the resize line.\n     */\n    _hideResizeLine : function() {\n      this._excludeChildControl(\"resize-line\");\n    },\n\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the visible x position of the column in the whole table.\n     */\n    showColumnMoveFeedback : function(pageX)\n    {\n      var paneModel = this.getTablePaneModel();\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneLeft = this.__tablePane.getContentLocation().left;\n      var colCount = paneModel.getColumnCount();\n\n      var targetXPos = 0;\n      var targetX = 0;\n      var currX = paneLeft;\n\n      for (var xPos=0; xPos<colCount; xPos++)\n      {\n        var col = paneModel.getColumnAtX(xPos);\n        var colWidth = columnModel.getColumnWidth(col);\n\n        if (pageX < currX + colWidth / 2) {\n          break;\n        }\n\n        currX += colWidth;\n        targetXPos = xPos + 1;\n        targetX = currX - paneLeft;\n      }\n\n      // Ensure targetX is visible\n      var scrollerLeft = this._paneClipper.getContentLocation().left;\n      var scrollerWidth = this._paneClipper.getBounds().width;\n      var scrollX = scrollerLeft - paneLeft;\n\n      // NOTE: +2/-1 because of feedback width\n      targetX = qx.lang.Number.limit(targetX, scrollX + 2, scrollX + scrollerWidth - 1);\n\n      this._showResizeLine(targetX);\n\n      // Return the overall target x position\n      return paneModel.getFirstColumnX() + targetXPos;\n    },\n\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback : function() {\n      this._hideResizeLine();\n    },\n\n\n    /**\n     * Sets the focus to the cell that's located at the page position\n     * <code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\n     * nothing happens.\n     *\n     * @param pageX {Integer} the x position in the page (in pixels).\n     * @param pageY {Integer} the y position in the page (in pixels).\n     */\n    _focusCellAtPagePos : function(pageX, pageY)\n    {\n      var row = this._getRowForPagePos(pageX, pageY);\n\n      if (row != -1 && row != null)\n      {\n        // The pointer is over the data -> update the focus\n        var col = this._getColumnForPageX(pageX);\n        this.__table.setFocusedCell(col, row);\n      }\n    },\n\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer} the model index of the focused cell's column.\n     * @param row {Integer} the model index of the focused cell's row.\n     */\n    setFocusedCell : function(col, row)\n    {\n      if (!this.isEditing())\n      {\n        this.__tablePane.setFocusedCell(col, row, this.__updateContentPlanned);\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        this._updateFocusIndicator();\n      }\n    },\n\n\n    /**\n     * Returns the column of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn : function() {\n      return this.__focusedCol;\n    },\n\n\n    /**\n     * Returns the row of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow : function() {\n      return this.__focusedRow;\n    },\n\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible : function(col, row)\n    {\n      var paneModel = this.getTablePaneModel();\n      var xPos = paneModel.getX(col);\n\n      if (xPos != -1)\n      {\n        var clipperSize = this._paneClipper.getInnerSize();\n        if (!clipperSize) {\n          return;\n        }\n\n        var columnModel = this.getTable().getTableColumnModel();\n\n        var colLeft = paneModel.getColumnLeft(col);\n        var colWidth = columnModel.getColumnWidth(col);\n        var rowHeight = this.getTable().getRowHeight();\n        var rowTop = row * rowHeight;\n\n        var scrollX = this.getScrollX();\n        var scrollY = this.getScrollY();\n\n        // NOTE: We don't use qx.lang.Number.limit, because min should win if max < min\n        var minScrollX = Math.min(colLeft, colLeft + colWidth - clipperSize.width);\n        var maxScrollX = colLeft;\n        this.setScrollX(Math.max(minScrollX, Math.min(maxScrollX, scrollX)));\n\n        var minScrollY = rowTop + rowHeight - clipperSize.height;\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          minScrollY += rowHeight;\n        }\n\n        var maxScrollY = rowTop;\n        this.setScrollY(Math.max(minScrollY, Math.min(maxScrollY, scrollY)), true);\n      }\n    },\n\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing : function() {\n      return this._cellEditor != null;\n    },\n\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already\n     * editing, if the column is not editable, or if the cell editor for the\n     * column ascertains that the particular cell is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing : function()\n    {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var col = this.__focusedCol;\n\n      if (\n        !this.isEditing() &&\n        (col != null) &&\n        tableModel.isColumnEditable(col)\n      ) {\n        var row = this.__focusedRow;\n        var xPos = this.getTablePaneModel().getX(col);\n        var value = tableModel.getValue(col, row);\n\n        // scroll cell into view\n        this.scrollCellVisible(col, row);\n\n        this.__cellEditorFactory = table.getTableColumnModel().getCellEditorFactory(col);\n\n        var cellInfo =\n        {\n          col   : col,\n          row   : row,\n          xPos  : xPos,\n          value : value,\n          table : table\n        };\n\n        // Get a cell editor\n        this._cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n        // We handle two types of cell editors: the traditional in-place\n        // editor, where the cell editor returned by the factory must fit in\n        // the space of the table cell; and a modal window in which the\n        // editing takes place.  Additionally, if the cell editor determines\n        // that it does not want to edit the particular cell being requested,\n        // it may return null to indicate that that cell is not editable.\n        if (this._cellEditor === null)\n        {\n          // This cell is not editable even though its column is.\n          return false;\n        }\n        else if (this._cellEditor instanceof qx.ui.window.Window)\n        {\n          // It's a window.  Ensure that it's modal.\n          this._cellEditor.setModal(true);\n\n          // At least for the time being, we disallow the close button.  It\n          // acts differently than a cellEditor.close(), and invokes a bug\n          // someplace.  Modal window cell editors should provide their own\n          // buttons or means to activate a cellEditor.close() or equivalently\n          // cellEditor.hide().\n          this._cellEditor.setShowClose(false);\n\n          // Arrange to be notified when it is closed.\n          this._cellEditor.addListener(\n            \"close\",\n            this._onCellEditorModalWindowClose,\n            this);\n\n          // If there's a pre-open function defined for the table...\n          var f = table.getModalCellEditorPreOpenFunction();\n          if (f != null) {\n            f(this._cellEditor, cellInfo);\n          }\n\n          // Open it now.\n          this._cellEditor.open();\n        }\n        else\n        {\n          // prevent tap event from bubbling up to the table\n          this.__focusIndicatorPointerDownListener = this.__focusIndicator.addListener(\"pointerdown\", function(e)\n          {\n            this.__lastPointerDownCell = {\n              row : this.__focusedRow,\n              col : this.__focusedCol\n            };\n            e.stopPropagation();\n          }, this);\n\n          this.__focusIndicator.add(this._cellEditor);\n          this.__focusIndicator.addState(\"editing\");\n          this.__focusIndicator.setKeepActive(false);\n\n          // Make the focus indicator visible during editing\n          this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n\n          this._cellEditor.focus();\n          this._cellEditor.activate();\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing : function()\n    {\n      // If the focus indicator is not being shown normally...\n      if (! this.getShowCellFocusIndicator())\n      {\n        // ... then hide it again\n        this.__focusIndicator.setDecorator(null);\n      }\n\n      this.flushEditor(true);\n    },\n\n\n    /**\n     * Writes the editor's value to the model\n     * \n     * @param cancel {Boolean ? false} Whether to also cancel \n     *      editing before firing the 'dateEdited' event.\n     */\n    flushEditor : function(cancel)\n    {\n      if (this.isEditing())\n      {\n        var value = this.__cellEditorFactory.getCellEditorValue(this._cellEditor);\n        var oldValue = this.getTable().getTableModel().getValue(this.__focusedCol, this.__focusedRow);\n        this.getTable().getTableModel().setValue(this.__focusedCol, this.__focusedRow, value);\n\n        this.__table.focus();\n\n        if(cancel) {\n          this.cancelEditing();\n        }\n\n        // Fire an event containing the value change.\n        this.__table.fireDataEvent(\"dataEdited\",\n                                   {\n                                     row      : this.__focusedRow,\n                                     col      : this.__focusedCol,\n                                     oldValue : oldValue,\n                                     value    : value\n                                   });\n      }\n    },\n\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing : function()\n    {\n      if (this.isEditing())\n      {\n        if (!(this._cellEditor instanceof qx.ui.window.Window))\n        {\n          this.__focusIndicator.removeState(\"editing\");\n          this.__focusIndicator.setKeepActive(true);\n\n\t\t\t\t\tif (this.__focusIndicatorPointerDownListener !== null) {\n\t\t\t\t\t\tthis.__focusIndicator.removeListenerById(this.__focusIndicatorPointerDownListener);\n\t\t\t\t\t\tthis.__focusIndicatorPointerDownListener = null;\n\t\t\t\t\t}\n        }\n        this._cellEditor.destroy();\n        this._cellEditor = null;\n        this.__cellEditorFactory = null;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the modal window of the cell editor closes.\n     *\n     * @param e {Map} the event.\n     */\n    _onCellEditorModalWindowClose : function(e) {\n      this.stopEditing();\n    },\n\n\n    /**\n     * Returns the model index of the column the pointer is over or null if the pointer\n     * is not over a column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the model index of the column the pointer is over.\n     */\n    _getColumnForPageX : function(pageX)\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n      var colCount = paneModel.getColumnCount();\n      var currX = this.__tablePane.getContentLocation().left;\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        var colWidth = columnModel.getColumnWidth(col);\n        currX += colWidth;\n\n        if (pageX < currX) {\n          return col;\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Returns the model index of the column that should be resized when dragging\n     * starts here. Returns -1 if the pointer is in no resize region of any column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the column index.\n     */\n    _getResizeColumnForPageX : function(pageX)\n    {\n      var contentLocation = this.__header.getContentLocation() || this.__tablePane.getContentLocation();\n      if (contentLocation) {\n        var currX = contentLocation.left;\n        var columnModel = this.getTable().getTableColumnModel();\n        var paneModel = this.getTablePaneModel();\n        var colCount = paneModel.getColumnCount();\n        var regionRadius = qx.ui.table.pane.Scroller.RESIZE_REGION_RADIUS;\n\n        for (var x = 0; x < colCount; x++) {\n          var col = paneModel.getColumnAtX(x);\n          var colWidth = columnModel.getColumnWidth(col);\n          currX += colWidth;\n\n          if (pageX >= (currX - regionRadius) && pageX <= (currX + regionRadius)) {\n            return col;\n          }\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the model index of the row the pointer is currently over. Returns -1 if\n     * the pointer is over the header. Returns null if the pointer is not over any\n     * column.\n     *\n     * @param pageX {Integer} the pointer x position in the page.\n     * @param pageY {Integer} the pointer y position in the page.\n     * @return {Integer} the model index of the row the pointer is currently over.\n     */\n    _getRowForPagePos : function(pageX, pageY)\n    {\n      var panePos = this.__tablePane.getContentLocation();\n\n      if (pageX < panePos.left || pageX > panePos.right)\n      {\n        // There was no cell or header cell hit\n        return null;\n      }\n\n      if (pageY >= panePos.top && pageY <= panePos.bottom)\n      {\n        // This event is in the pane -> Get the row\n        var rowHeight = this.getTable().getRowHeight();\n\n        var scrollY = this.__verScrollBar.getPosition();\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          scrollY = Math.floor(scrollY / rowHeight) * rowHeight;\n        }\n\n        var tableY = scrollY + pageY - panePos.top;\n        var row = Math.floor(tableY / rowHeight);\n\n        var tableModel = this.getTable().getTableModel();\n        var rowCount = tableModel.getRowCount();\n\n        return (row < rowCount) ? row : null;\n      }\n\n      var headerPos = this.__header.getContentLocation();\n\n      if (\n        pageY >= headerPos.top &&\n        pageY <= headerPos.bottom &&\n        pageX <= headerPos.right)\n      {\n        // This event is in the pane -> Return -1 for the header\n        return -1;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Sets the widget that should be shown in the top right corner.\n     *\n     * The widget will not be disposed, when this table scroller is disposed. So the\n     * caller has to dispose it.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to set. May be null.\n     */\n    setTopRightWidget : function(widget)\n    {\n      var oldWidget = this.__topRightWidget;\n\n      if (oldWidget != null) {\n        this.__top.remove(oldWidget);\n      }\n\n      if (widget != null) {\n        this.__top.add(widget);\n      }\n\n      this.__topRightWidget = widget;\n    },\n\n\n    /**\n     * Get the top right widget\n     *\n     * @return {qx.ui.core.Widget} The top right widget.\n     */\n    getTopRightWidget : function() {\n      return this.__topRightWidget;\n    },\n\n\n    /**\n     * Returns the header.\n     *\n     * @return {qx.ui.table.pane.Header} the header.\n     */\n    getHeader : function() {\n      return this.__header;\n    },\n\n\n    /**\n     * Returns the table pane.\n     *\n     * @return {qx.ui.table.pane.Pane} the table pane.\n     */\n    getTablePane : function() {\n      return this.__tablePane;\n    },\n\n\n    /**\n     * Get the rendered width of the vertical scroll bar. The return value is\n     * <code>0</code> if the scroll bar is invisible or not yet rendered.\n     *\n     * @internal\n     * @return {Integer} The width of the vertical scroll bar\n     */\n    getVerticalScrollBarWidth : function()\n    {\n      var scrollBar = this.__verScrollBar;\n      return scrollBar.isVisible() ? (scrollBar.getSizeHint().width || 0) : 0;\n    },\n\n\n    /**\n     * Returns which scrollbars are needed.\n     *\n     * @param forceHorizontal {Boolean ? false} Whether to show the horizontal\n     *      scrollbar always.\n     * @param preventVertical {Boolean ? false} Whether to show the vertical scrollbar\n     *      never.\n     * @return {Integer} which scrollbars are needed. This may be any combination of\n     *      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n     *      (combined by OR).\n     */\n    getNeededScrollBars : function(forceHorizontal, preventVertical)\n    {\n      var verScrollBar = this.__verScrollBar;\n      var verBarWidth = verScrollBar.getSizeHint().width\n        + verScrollBar.getMarginLeft() + verScrollBar.getMarginRight();\n\n      var horScrollBar = this.__horScrollBar;\n      var horBarHeight = horScrollBar.getSizeHint().height\n        + horScrollBar.getMarginTop() + horScrollBar.getMarginBottom();\n\n      // Get the width and height of the view (without scroll bars)\n      var clipperSize = this._paneClipper.getInnerSize();\n      var viewWidth = clipperSize ? clipperSize.width : 0;\n\n      if (this.getVerticalScrollBarVisible()) {\n        viewWidth += verBarWidth;\n      }\n\n      var viewHeight = clipperSize ? clipperSize.height : 0;\n\n      if (this.getHorizontalScrollBarVisible()) {\n        viewHeight += horBarHeight;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      // Get the (virtual) width and height of the pane\n      var paneWidth = this.getTablePaneModel().getTotalWidth();\n      var paneHeight = this.getTable().getRowHeight() * rowCount;\n\n      // Check which scrollbars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n\n      if (paneWidth > viewWidth) {\n        horNeeded = true;\n\n        if (paneHeight > viewHeight - horBarHeight) {\n          verNeeded = true;\n        }\n      } else if (paneHeight > viewHeight) {\n        verNeeded = true;\n\n        if (!preventVertical && (paneWidth > viewWidth - verBarWidth)) {\n          horNeeded = true;\n        }\n      }\n\n      // Create the mask\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      return ((forceHorizontal || horNeeded) ? horBar : 0) | ((preventVertical || !verNeeded) ? 0 : verBar);\n    },\n\n\n    /**\n     * Return the pane clipper. It is sometimes required for special activities\n     * such as tracking events for drag&drop.\n     *\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getPaneClipper : function()\n    {\n      return this._paneClipper;\n    },\n\n\n    /**\n     * Returns the scroll area container widget (which enables more precise\n     * operations e.g. bounds retrieval for drag session scrolling).\n     *\n     * @see qx.ui.core.MDragDropScrolling#_getBounds\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getScrollAreaContainer : function() {\n      return this.getPaneClipper();\n    },\n\n\n    // property apply method\n    _applyScrollTimeout : function(value, old) {\n      this._startInterval(value);\n    },\n\n\n    /**\n     * Starts the current running interval\n     *\n     * @param timeout {Integer} The timeout between two table updates\n     */\n    _startInterval : function (timeout)\n    {\n      this.__timer.setInterval(timeout);\n      this.__timer.start();\n    },\n\n\n    /**\n     * stops the current running interval\n     */\n    _stopInterval : function ()\n    {\n      this.__timer.stop();\n    },\n\n\n    /**\n     * Does a postponed update of the content.\n     *\n     * @see #_updateContent\n     */\n    _postponedUpdateContent : function()\n    {\n      //this.__updateContentPlanned = true;\n      this._updateContent();\n    },\n\n\n    /**\n     * Timer event handler. Periodically checks whether a table update is\n     * required. The update interval is controlled by the {@link #scrollTimeout}\n     * property.\n     *\n     * @signature function()\n     */\n    _oninterval : qx.event.GlobalError.observeMethod(function()\n    {\n      if (this.__updateContentPlanned && !this.__tablePane._layoutPending)\n      {\n        this.__updateContentPlanned = false;\n        this._updateContent();\n      }\n    }),\n\n\n    /**\n     * Updates the content. Sets the right section the table pane should show and\n     * does the scrolling.\n     */\n    _updateContent : function()\n    {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        return;\n      }\n      var paneHeight = paneSize.height;\n\n      var scrollX = this.__horScrollBar.getPosition();\n      var scrollY = this.__verScrollBar.getPosition();\n      var rowHeight = this.getTable().getRowHeight();\n\n      var firstRow = Math.floor(scrollY / rowHeight);\n      var oldFirstRow = this.__tablePane.getFirstVisibleRow();\n      this.__tablePane.setFirstVisibleRow(firstRow);\n\n      var visibleRowCount = Math.ceil(paneHeight / rowHeight);\n      var paneOffset = 0;\n      var firstVisibleRowComplete = this.getTable().getKeepFirstVisibleRowComplete();\n\n      if (!firstVisibleRowComplete)\n      {\n\n        // NOTE: We don't consider paneOffset, because this may cause alternating\n        //       adding and deleting of one row when scrolling. Instead we add one row\n        //       in every case.\n        visibleRowCount++;\n\n        paneOffset = scrollY % rowHeight;\n      }\n\n      this.__tablePane.setVisibleRowCount(visibleRowCount);\n\n      if (firstRow != oldFirstRow) {\n        this._updateFocusIndicator();\n      }\n\n      this._paneClipper.scrollToX(scrollX);\n\n      // Avoid expensive calls to setScrollTop if\n      // scrolling is not needed\n      if (! firstVisibleRowComplete ) {\n        this._paneClipper.scrollToY(paneOffset);\n      }\n    },\n\n    /**\n     * Updates the location and the visibility of the focus indicator.\n     *\n     */\n    _updateFocusIndicator : function()\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      this.__focusIndicator.moveToCell(this.__focusedCol, this.__focusedRow);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._stopInterval();\n\n    // this object was created by the table on init so we have to clean it up.\n    var tablePaneModel = this.getTablePaneModel();\n    if (tablePaneModel)\n    {\n      tablePaneModel.dispose();\n    }\n\n    this.__lastPointerDownCell = this.__topRightWidget = this.__table = null;\n    this._disposeObjects(\"__horScrollBar\", \"__verScrollBar\",\n                         \"_headerClipper\", \"_paneClipper\", \"__focusIndicator\",\n                         \"__header\", \"__tablePane\", \"__top\", \"__timer\",\n                         \"__clipperContainer\");\n  }\n});\n"
  ]
}