{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/resizebehavior/Default.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "columnmodel",
    "resizebehavior",
    "Abstract",
    "construct",
    "__resizeColumnData",
    "__layout",
    "layout",
    "HBox",
    "connectToWidget",
    "__deferredComputeColumnsFlexWidth",
    "util",
    "DeferredCall",
    "_computeColumnsFlexWidth",
    "properties",
    "newResizeBehaviorColumnData",
    "check",
    "init",
    "obj",
    "core",
    "ColumnData",
    "initializeWidthsOnEveryAppear",
    "tableColumnModel",
    "members",
    "__layoutChildren",
    "__widthsInitialized",
    "setWidth",
    "col",
    "width",
    "flex",
    "length",
    "Error",
    "setColumnWidth",
    "schedule",
    "setMinWidth",
    "setMaxWidth",
    "set",
    "map",
    "prop",
    "onAppear",
    "event",
    "forceRefresh",
    "getInitializeWidthsOnEveryAppear",
    "onTableWidthChanged",
    "onVerticalScrollBarChanged",
    "onColumnWidthChanged",
    "_extendNextColumn",
    "onVisibilityChanged",
    "data",
    "getData",
    "visible",
    "_extendLastColumn",
    "_setNumColumns",
    "numColumns",
    "colData",
    "splice",
    "i",
    "getNewResizeBehaviorColumnData",
    "columnNumber",
    "getLayoutChildren",
    "cancel",
    "_getAvailableWidth",
    "getTableColumnModel",
    "visibleColumns",
    "getVisibleColumns",
    "visibleColumnsLength",
    "l",
    "columns",
    "push",
    "__clearLayoutCaches",
    "renderLayout",
    "top",
    "right",
    "bottom",
    "left",
    "colWidth",
    "getComputedWidth",
    "invalidateChildrenCache",
    "children",
    "invalidateLayoutCache",
    "newWidth",
    "oldWidth",
    "nextCol",
    "widthUsed",
    "getColumnWidth",
    "lastCol",
    "_getResizeColumnData",
    "destruct",
    "_disposeObjects",
    "Default"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * The default resize behavior.  Until a resize model is loaded, the default\n * behavior is to:\n * <ol>\n *   <li>\n *     Upon the table initially appearing, and upon any window resize, divide\n *     the table space equally between the visible columns.\n *   </li>\n *   <li>\n *     When a column is increased in width, all columns to its right are\n *     pushed to the right with no change to their widths.  This may push some\n *     columns off the right edge of the table, causing a horizontal scroll\n *     bar to appear.\n *   </li>\n *   <li>\n *     When a column is decreased in width, if the total width of all columns\n *     is <i>greater than</i> the table width, no additional column width\n *     change is made.\n *   </li>\n *   <li>\n *     When a column is decreased in width, if the total width of all columns\n *     is <i>less than</i> the table width, the visible column\n *     immediately to the right of the column which decreased in width has its\n *     width increased to fill the remaining space.\n *   </li>\n * </ol>\n *\n * A resize model may be loaded to provide more guidance on how to adjust\n * column width upon each of the events: initial appear, window resize, and\n * column resize. *** TO BE FILLED IN ***\n *\n * @require(qx.ui.core.ColumnData)\n */\nqx.Class.define(\"qx.ui.table.columnmodel.resizebehavior.Default\",\n{\n  extend : qx.ui.table.columnmodel.resizebehavior.Abstract,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__resizeColumnData = [];\n\n    // This layout is not connected to a widget but to this class. This class\n    // must implement the method \"getLayoutChildren\", which must return all\n    // columns (LayoutItems) which should be recalculated. The call\n    // \"layout.renderLayout\" will call the method \"renderLayout\" on each column\n    // data object\n    // The advantage of the use of the normal layout manager is that the\n    // semantics of flex and percent are exactly the same as in the widget code.\n    this.__layout = new qx.ui.layout.HBox();\n    this.__layout.connectToWidget(this);\n\n    this.__deferredComputeColumnsFlexWidth = new qx.util.DeferredCall(\n      this._computeColumnsFlexWidth, this\n    );\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * A function to instantiate a resize behavior column data object.\n     */\n    newResizeBehaviorColumnData :\n    {\n      check : \"Function\",\n      init : function(obj)\n      {\n        return new qx.ui.core.ColumnData();\n      }\n    },\n\n    /**\n     * Whether to reinitialize default widths on each appear event.\n     * Typically, one would want to initialize the default widths only upon\n     * the first appearance of the table, but the original behavior was to\n     * reinitialize it even if the table is hidden and then reshown\n     * (e.g. it's in a pageview and the page is switched and then switched\n     * back).\n     */\n    initializeWidthsOnEveryAppear :\n    {\n      check : \"Boolean\",\n      init  : false\n    },\n\n    /**\n     * The table column model in use.  Of particular interest is the method\n     * <i>getTable</i> which is a reference to the table widget.  This allows\n     * access to any other features of the table, for use in calculating widths\n     * of columns.\n     */\n    tableColumnModel :\n    {\n      check : \"qx.ui.table.columnmodel.Resize\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __layout : null,\n    __layoutChildren : null,\n    __resizeColumnData : null,\n    __deferredComputeColumnsFlexWidth : null,\n\n    /**\n     * Whether we have initialized widths on the first appear yet\n     */\n    __widthsInitialized : false,\n\n    /**\n     * Set the width of a column.\n     *\n     * @param col {Integer} The column whose width is to be set\n     *\n     * @param width {Integer|String}\n     *   The width of the specified column.  The width may be specified as\n     *   integer number of pixels (e.g. 100), a string representing percentage\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\n     *   representing a flex width (e.g. \"1*\").\n     *\n     * @param flex {Integer?0} Optional flex value of the column\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setWidth : function(col, width, flex)\n    {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setColumnWidth(width, flex);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n\n    /**\n     * Set the minimum width of a column.\n     *\n     * @param col {Integer}\n     *   The column whose minimum width is to be set\n     *\n     * @param width {Integer}\n     *   The minimum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMinWidth : function(col, width)\n    {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length)\n      {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setMinWidth(width);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n\n    /**\n     * Set the maximum width of a column.\n     *\n     * @param col {Integer}\n     *   The column whose maximum width is to be set\n     *\n     * @param width {Integer}\n     *   The maximum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMaxWidth : function(col, width)\n    {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setMaxWidth(width);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n\n    /**\n     * Set any or all of the width, minimum width, and maximum width of a\n     * column in a single call.\n     *\n     * @param col {Integer}\n     *   The column whose attributes are to be changed\n     *\n     * @param map {Map}\n     *   A map containing any or all of the property names \"width\", \"minWidth\",\n     *   and \"maxWidth\".  The property values are as described for\n     *   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n     *   respectively.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    set : function(col, map)\n    {\n      for (var prop in map)\n      {\n        switch(prop)\n        {\n          case \"width\":\n            this.setWidth(col, map[prop]);\n            break;\n\n          case \"minWidth\":\n            this.setMinWidth(col, map[prop]);\n            break;\n\n          case \"maxWidth\":\n            this.setMaxWidth(col, map[prop]);\n            break;\n\n          default:\n            throw new Error(\"Unknown property: \" + prop);\n        }\n      }\n    },\n\n    // overloaded\n    onAppear : function(event, forceRefresh)\n    {\n      // If we haven't initialized widths at least once, or\n      // they want us to reinitialize widths on every appear event...\n      if (forceRefresh === true || !this.__widthsInitialized || this.getInitializeWidthsOnEveryAppear())\n      {\n        // Calculate column widths\n        this._computeColumnsFlexWidth();\n\n        // Track that we've initialized widths at least once\n        this.__widthsInitialized = true;\n      }\n    },\n\n    // overloaded\n    onTableWidthChanged : function(event) {\n      this._computeColumnsFlexWidth();\n    },\n\n    // overloaded\n    onVerticalScrollBarChanged : function(event) {\n      this._computeColumnsFlexWidth();\n    },\n\n    // overloaded\n    onColumnWidthChanged : function(event)\n    {\n      // Extend the next column to fill blank space\n      this._extendNextColumn(event);\n    },\n\n    // overloaded\n    onVisibilityChanged : function(event)\n    {\n      // Event data properties: col, visible\n      var data = event.getData();\n\n      // If a column just became visible, resize all columns.\n      if (data.visible)\n      {\n        this._computeColumnsFlexWidth();\n        return;\n      }\n\n      // Extend the last column to fill blank space\n      this._extendLastColumn(event);\n    },\n\n    // overloaded\n    _setNumColumns : function(numColumns)\n    {\n      var colData = this.__resizeColumnData;\n      // Are there now fewer (or the same number of) columns than there were\n      // previously?\n      if (numColumns <= colData.length)\n      {\n        // Yup.  Delete the extras.\n        colData.splice(numColumns, colData.length);\n        return;\n      }\n\n      // There are more columns than there were previously.  Allocate more.\n      for (var i=colData.length; i<numColumns; i++)\n      {\n        colData[i] = this.getNewResizeBehaviorColumnData()();\n        colData[i].columnNumber = i;\n      }\n    },\n\n\n    /**\n     * This method is required by the box layout. If returns an array of items\n     * to relayout.\n     *\n     * @return {qx.ui.core.ColumnData[]} The list of column data object to layout.\n     */\n    getLayoutChildren : function() {\n      return this.__layoutChildren;\n    },\n\n\n    /**\n     * Computes the width of all flexible children.\n     *\n     */\n    _computeColumnsFlexWidth : function()\n    {\n      this.__deferredComputeColumnsFlexWidth.cancel();\n      var width = this._getAvailableWidth();\n\n      if (width === null) {\n        return;\n      }\n\n      var tableColumnModel = this.getTableColumnModel();\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n      var visibleColumnsLength = visibleColumns.length;\n      var colData = this.__resizeColumnData;\n      var i, l;\n\n      if (visibleColumnsLength === 0) {\n        return;\n      }\n\n      // Create an array of the visible columns\n      var columns = [ ];\n      for (i=0; i<visibleColumnsLength; i++)\n      {\n        columns.push(colData[visibleColumns[i]]);\n      }\n      this.__layoutChildren = columns;\n      this.__clearLayoutCaches();\n\n      // Use a horizontal box layout to determine the available width.\n      this.__layout.renderLayout(width, 100, {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      });\n\n      // Now that we've calculated the width, set it.\n      for (i=0,l=columns.length; i<l; i++)\n      {\n        var colWidth = columns[i].getComputedWidth();\n        tableColumnModel.setColumnWidth(visibleColumns[i], colWidth);\n      }\n    },\n\n\n    /**\n     * Clear all layout caches of the column datas.\n     */\n    __clearLayoutCaches : function()\n    {\n      this.__layout.invalidateChildrenCache();\n      var children = this.__layoutChildren;\n      for (var i=0,l=children.length; i<l; i++) {\n        children[i].invalidateLayoutCache();\n      }\n    },\n\n\n    /**\n     * Extend the visible column to right of the column which just changed\n     * width, to fill any available space within the inner width of the table.\n     * This means that if the sum of the widths of all columns exceeds the\n     * inner width of the table, no change is made.  If, on the other hand,\n     * the sum of the widths of all columns is less than the inner width of\n     * the table, the visible column to the right of the column which just\n     * changed width is extended to take up the width available within the\n     * inner width of the table.\n     *\n     *\n     * @param event {qx.event.type.Data}\n     *   The event object.\n     *\n     */\n    _extendNextColumn : function(event)\n    {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Event data properties: col, oldWidth, newWidth\n      var data = event.getData();\n\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n\n      // Determine the available width\n      var width = this._getAvailableWidth();\n\n      // Determine the number of visible columns\n      var numColumns = visibleColumns.length;\n\n      // Did this column become longer than it was?\n      if (data.newWidth > data.oldWidth)\n      {\n        // Yup.  Don't resize anything else.  The other columns will just get\n        // pushed off and require scrollbars be added (if not already there).\n        return ;\n      }\n\n      // This column became shorter.  See if we no longer take up the full\n      // space that's available to us.\n      var i;\n      var nextCol;\n      var widthUsed = 0;\n\n      for (i=0; i<numColumns; i++) {\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\n      }\n\n      // If the used width is less than the available width...\n      if (widthUsed < width)\n      {\n        // ... then determine the next visible column\n        for (i=0; i<visibleColumns.length; i++)\n        {\n          if (visibleColumns[i] == data.col)\n          {\n            nextCol = visibleColumns[i + 1];\n            break;\n          }\n        }\n\n        if (nextCol)\n        {\n          // Make the next column take up the available space.\n          var newWidth =\n            (width - (widthUsed - tableColumnModel.getColumnWidth(nextCol)));\n          tableColumnModel.setColumnWidth(nextCol, newWidth);\n        }\n      }\n    },\n\n\n    /**\n     * If a column was just made invisible, extend the last column to fill any\n     * available space within the inner width of the table.  This means that\n     * if the sum of the widths of all columns exceeds the inner width of the\n     * table, no change is made.  If, on the other hand, the sum of the widths\n     * of all columns is less than the inner width of the table, the last\n     * column is extended to take up the width available within the inner\n     * width of the table.\n     *\n     *\n     * @param event {qx.event.type.Data}\n     *   The event object.\n     *\n     */\n    _extendLastColumn : function(event)\n    {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Event data properties: col, visible\n      var data = event.getData();\n\n      // If the column just became visible, don't make any width changes\n      if (data.visible)\n      {\n        return;\n      }\n\n      // Get the array of visible columns\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n\n      // If no columns are visible...\n      if (visibleColumns.length == 0)\n      {\n        return;\n      }\n\n      // Determine the available width\n      var width = this._getAvailableWidth(tableColumnModel);\n\n      // Determine the number of visible columns\n      var numColumns = visibleColumns.length;\n\n      // See if we no longer take up the full space that's available to us.\n      var i;\n      var lastCol;\n      var widthUsed = 0;\n\n      for (i=0; i<numColumns; i++) {\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\n      }\n\n      // If the used width is less than the available width...\n      if (widthUsed < width)\n      {\n        // ... then get the last visible column\n        lastCol = visibleColumns[visibleColumns.length - 1];\n\n        // Make the last column take up the available space.\n        var newWidth =\n          (width - (widthUsed - tableColumnModel.getColumnWidth(lastCol)));\n        tableColumnModel.setColumnWidth(lastCol, newWidth);\n      }\n    },\n\n\n    /**\n     * Returns an array of the resizing information of a column.\n     *\n     * @return {qx.ui.core.ColumnData[]} array of the resizing information of a column.\n     */\n    _getResizeColumnData : function()\n    {\n      return this.__resizeColumnData;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__resizeColumnData = this.__layoutChildren = null;\n    this._disposeObjects(\"__layout\", \"__deferredComputeColumnsFlexWidth\");\n  }\n});\n"
  ]
}