{
  "className": "qx.ui.table.columnmodel.resizebehavior.Abstract",
  "packageName": "qx.ui.table.columnmodel.resizebehavior",
  "name": "Abstract",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 145,
        "column": 6
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007 Derrell Lipman\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Derrell Lipman (derrell)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>An abstract resize behavior.  All resize behaviors should extend this\n class.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "members": {
    "_setNumColumns": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when the ResizeTableColumnModel is initialized, and upon loading of\n a new TableModel, to allow the Resize Behaviors to know how many columns\n are in use.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "numColumns {Integer} The number of columns in use.",
            "paramName": "numColumns",
            "description": " The number of columns in use.",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "onAppear": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 62,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when the table has first been rendered.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {var} The <i>onappear</i> event object.",
            "paramName": "event",
            "description": " The <i>onappear</i> event object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "forceRefresh {Boolean?false} Whether a refresh should be forced",
            "paramName": "forceRefresh",
            "description": " Whether a refresh should be forced",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onTableWidthChanged": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when the table width changes due to either a window size change\n or a parent object changing size causing the table to change size.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {var} The <i>tableWidthChanged</i> event object.",
            "paramName": "event",
            "description": " The <i>tableWidthChanged</i> event object.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onVerticalScrollBarChanged": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 90,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when the use of vertical scroll bar in the table changes, either\n from present to not present, or vice versa.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {var} The <i>verticalScrollBarChanged</i> event object.  This event has data,\n     obtained via event.getValue(), which is a boolean indicating whether a\n     vertical scroll bar is now present.",
            "paramName": "event",
            "description": " The <i>verticalScrollBarChanged</i> event object.  This event has data,\n     obtained via event.getValue(), which is a boolean indicating whether a\n     vertical scroll bar is now present.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onColumnWidthChanged": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when a column width is changed.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {var} The <i>widthChanged</i> event object.  This event has data, obtained via\n     event.getValue(), which is an object with three properties: the column\n     which changed width (data.col), the old width (data.oldWidth) and the new\n     width (data.newWidth).",
            "paramName": "event",
            "description": " The <i>widthChanged</i> event object.  This event has data, obtained via\n     event.getValue(), which is an object with three properties: the column\n     which changed width (data.col), the old width (data.oldWidth) and the new\n     width (data.newWidth).",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onVisibilityChanged": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when a column visibility is changed.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {var} The <i>visibilityChanged</i> event object.  This event has data, obtained\n     via event.getValue(), which is an object with two properties: the column\n     which changed width (data.col) and the new visibility of the column\n     (data.visible).",
            "paramName": "event",
            "description": " The <i>visibilityChanged</i> event object.  This event has data, obtained\n     via event.getValue(), which is an object with two properties: the column\n     which changed width (data.col) and the new visibility of the column\n     (data.visible).",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getAvailableWidth": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 144,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determine the inner width available to columns in the table.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The available width",
            "type": "Integer",
            "description": " The available width"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": [
    "qx.ui.table.columnmodel.resizebehavior.Default"
  ]
}