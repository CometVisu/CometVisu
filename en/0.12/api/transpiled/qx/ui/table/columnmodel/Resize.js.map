{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/Resize.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "columnmodel",
    "Basic",
    "include",
    "locale",
    "MTranslation",
    "construct",
    "__bInProgress",
    "__bAppeared",
    "properties",
    "behavior",
    "check",
    "init",
    "nullable",
    "apply",
    "event",
    "members",
    "__table",
    "_applyBehavior",
    "value",
    "old",
    "dispose",
    "_setNumColumns",
    "getOverallColumnCount",
    "setTableColumnModel",
    "numColumns",
    "addListener",
    "_onappear",
    "_onTableWidthChanged",
    "_onverticalscrollbarchanged",
    "_addResetColumnWidthButton",
    "_oncolumnwidthchanged",
    "_onvisibilitychanged",
    "getBehavior",
    "setBehavior",
    "resizebehavior",
    "Default",
    "getTable",
    "data",
    "getData",
    "columnButton",
    "menu",
    "o",
    "factory",
    "add",
    "text",
    "tr",
    "onAppear",
    "getType",
    "_updateScrollerWidths",
    "_updateScrollBarVisibility",
    "onTableWidthChanged",
    "onVerticalScrollBarChanged",
    "Timer",
    "once",
    "isDisposed",
    "onColumnWidthChanged",
    "onVisibilityChanged",
    "destruct",
    "Resize"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A table column model that automatically resizes columns based on a\n * selected behavior.\n *\n * @see qx.ui.table.columnmodel.Basic\n */\nqx.Class.define(\"qx.ui.table.columnmodel.Resize\",\n{\n  extend : qx.ui.table.columnmodel.Basic,\n  include : qx.locale.MTranslation,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // We don't want to recursively call ourself based on our resetting of\n    // column sizes.  Track when we're resizing.\n    this.__bInProgress = false;\n\n    // Track when the table has appeared.  We want to ignore resize events\n    // until then since we won't be able to determine the available width\n    // anyway.\n    this.__bAppeared = false;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The behavior to use.\n     *\n     * The provided behavior must extend {@link qx.ui.table.columnmodel.resizebehavior.Abstract} and\n     * implement the <i>onAppear</i>, <i>onTableWidthChanged</i>,\n     * <i>onColumnWidthChanged</i> and <i>onVisibilityChanged</i>methods.\n     */\n    behavior :\n    {\n      check : \"qx.ui.table.columnmodel.resizebehavior.Abstract\",\n      init : null,\n      nullable : true,\n      apply : \"_applyBehavior\",\n      event : \"changeBehavior\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __bAppeared : null,\n    __bInProgress : null,\n    __table : null,\n\n\n    // Behavior modifier\n    _applyBehavior : function(value, old)\n    {\n      if (old != null)\n      {\n        old.dispose();\n        old = null;\n      }\n\n      // Tell the new behavior how many columns there are\n      value._setNumColumns(this.getOverallColumnCount());\n      value.setTableColumnModel(this);\n    },\n\n\n    /**\n     * Initializes the column model.\n     *\n     * @param numColumns {Integer} the number of columns the model should have.\n     * @param table {qx.ui.table.Table}\n     *   The table which this model is used for. This allows us access to\n     *   other aspects of the table, as the <i>behavior</i> sees fit.\n     */\n    init : function(numColumns, table)\n    {\n      // Call our superclass\n      this.base(arguments, numColumns, table);\n\n      if (this.__table == null)\n      {\n        this.__table = table;\n        // We'll do our column resizing when the table appears, ...\n        table.addListener(\"appear\", this._onappear, this);\n\n        // ... when the inner width of the table changes, ...\n        table.addListener(\"tableWidthChanged\", this._onTableWidthChanged, this);\n\n        // ... when a vertical scroll bar appears or disappears\n        table.addListener(\n          \"verticalScrollBarChanged\",\n          this._onverticalscrollbarchanged,\n          this\n        );\n\n        // We want to manipulate the button visibility menu\n        table.addListener(\n          \"columnVisibilityMenuCreateEnd\",\n          this._addResetColumnWidthButton,\n          this\n        );\n\n        // ... when columns are resized, ...\n        this.addListener(\"widthChanged\", this._oncolumnwidthchanged, this );\n\n        // ... and when a column visibility changes.\n        this.addListener(\"visibilityChanged\", this._onvisibilitychanged, this);\n      }\n\n      // Set the initial resize behavior\n      if (this.getBehavior() == null) {\n        this.setBehavior(new qx.ui.table.columnmodel.resizebehavior.Default());\n      }\n\n      // Tell the behavior how many columns there are\n      this.getBehavior()._setNumColumns(numColumns);\n    },\n\n\n    /**\n     * Get the table widget\n     *\n     * @return {qx.ui.table.Table} the table widget\n     */\n    getTable : function() {\n      return this.__table;\n    },\n\n\n    /**\n     * Reset the column widths to their \"onappear\" defaults.\n     *\n     * @param event {qx.event.type.Data}\n     *   The \"columnVisibilityMenuCreateEnd\" event indicating that the menu is\n     *   being generated.  The data is a map containing properties <i>table</i>\n     *   and <i>menu</i>.\n     *\n     */\n    _addResetColumnWidthButton : function(event)\n    {\n      var data = event.getData();\n      var columnButton = data.columnButton;\n      var menu = data.menu;\n      var o;\n\n      // Add a separator between the column names and our reset button\n      o = columnButton.factory(\"separator\");\n      menu.add(o);\n\n      // Add a button to reset the column widths\n      o = columnButton.factory(\"user-button\",\n                               {\n                                 text : this.tr(\"Reset column widths\")\n                               });\n      menu.add(o);\n      o.addListener(\"execute\", this._onappear, this);\n    },\n\n\n    /**\n     * Event handler for the \"appear\" event.\n     *\n     * @param event {qx.event.type.Event}\n     *   The \"onappear\" event object.\n     *\n     */\n    _onappear : function(event)\n    {\n      // Is this a recursive call?\n      if (this.__bInProgress)\n      {\n        // Yup.  Ignore it.\n        return ;\n      }\n\n      this.__bInProgress = true;\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.tableResizeDebug\"))\n        {\n          this.debug(\"onappear\");\n        }\n      }\n\n      // this handler is also called by the \"execute\" event of the menu button\n      this.getBehavior().onAppear(event, event.getType() !== \"appear\");\n\n      this.__table._updateScrollerWidths();\n      this.__table._updateScrollBarVisibility();\n\n      this.__bInProgress = false;\n\n      this.__bAppeared = true;\n    },\n\n\n    /**\n     * Event handler for the \"tableWidthChanged\" event.\n     *\n     * @param event {qx.event.type.Event}\n     *   The \"onwindowresize\" event object.\n     *\n     */\n    _onTableWidthChanged : function(event)\n    {\n      // Is this a recursive call or has the table not yet been rendered?\n      if (this.__bInProgress || !this.__bAppeared)\n      {\n        // Yup.  Ignore it.\n        return;\n      }\n\n      this.__bInProgress = true;\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.tableResizeDebug\"))\n        {\n          this.debug(\"ontablewidthchanged\");\n        }\n      }\n\n      this.getBehavior().onTableWidthChanged(event);\n      this.__bInProgress = false;\n    },\n\n\n    /**\n     * Event handler for the \"verticalScrollBarChanged\" event.\n     *\n     * @param event {qx.event.type.Data}\n     *   The \"verticalScrollBarChanged\" event object.  The data is a boolean\n     *   indicating whether a vertical scroll bar is now present.\n     *\n     */\n    _onverticalscrollbarchanged : function(event)\n    {\n      // Is this a recursive call or has the table not yet been rendered?\n      if (this.__bInProgress || !this.__bAppeared)\n      {\n        // Yup.  Ignore it.\n        return;\n      }\n\n      this.__bInProgress = true;\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.tableResizeDebug\"))\n        {\n          this.debug(\"onverticalscrollbarchanged\");\n        }\n      }\n\n      this.getBehavior().onVerticalScrollBarChanged(event);\n\n      qx.event.Timer.once(function()\n      {\n        if (this.__table && !this.__table.isDisposed())\n        {\n          this.__table._updateScrollerWidths();\n          this.__table._updateScrollBarVisibility();\n        }\n      }, this, 0);\n\n      this.__bInProgress = false;\n    },\n\n\n    /**\n     * Event handler for the \"widthChanged\" event.\n     *\n     * @param event {qx.event.type.Data}\n     *   The \"widthChanged\" event object.\n     *\n     */\n    _oncolumnwidthchanged : function(event)\n    {\n      // Is this a recursive call or has the table not yet been rendered?\n      if (this.__bInProgress || !this.__bAppeared)\n      {\n        // Yup.  Ignore it.\n        return;\n      }\n\n      this.__bInProgress = true;\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.tableResizeDebug\"))\n        {\n          this.debug(\"oncolumnwidthchanged\");\n        }\n      }\n\n      this.getBehavior().onColumnWidthChanged(event);\n      this.__bInProgress = false;\n    },\n\n\n    /**\n     * Event handler for the \"visibilityChanged\" event.\n     *\n     * @param event {qx.event.type.Data}\n     *   The \"visibilityChanged\" event object.\n     *\n     */\n    _onvisibilitychanged : function(event)\n    {\n      // Is this a recursive call or has the table not yet been rendered?\n      if (this.__bInProgress || !this.__bAppeared)\n      {\n        // Yup.  Ignore it.\n        return;\n      }\n\n      this.__bInProgress = true;\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.tableResizeDebug\"))\n        {\n          this.debug(\"onvisibilitychanged\");\n        }\n      }\n\n      this.getBehavior().onVisibilityChanged(event);\n      this.__bInProgress = false;\n    }\n  },\n\n\n /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    var behavior = this.getBehavior();\n    if (behavior) {\n      behavior.dispose();\n    }\n    this.__table = null;\n  }\n});\n"
  ]
}