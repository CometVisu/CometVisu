{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/headerrenderer/Default.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "IHeaderRenderer",
    "statics",
    "STATE_SORTED",
    "STATE_SORTED_ASCENDING",
    "properties",
    "toolTip",
    "check",
    "init",
    "nullable",
    "members",
    "createHeaderCell",
    "cellInfo",
    "widget",
    "headerrenderer",
    "HeaderCell",
    "updateHeaderCell",
    "cellWidget",
    "DefaultHeaderCellRenderer",
    "Default",
    "name",
    "translate",
    "setLabel",
    "widgetToolTip",
    "getToolTip",
    "tooltip",
    "ToolTip",
    "setToolTip",
    "util",
    "DisposeUtil",
    "disposeTriggeredBy",
    "sorted",
    "addState",
    "removeState",
    "sortedAscending"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;AAGAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oCAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;AAEEC,IAAAA,SAAS,EAAGT,EAAE,CAACU,EAAH,CAAMC,KAAN,CAAYC,eAF1B;;AAQE;;;;;AAMAC,IAAAA,OAAO,EACP;AACE;;;AAGAC,MAAAA,YAAY,EAAa,QAJ3B;;AAOE;;;AAGAC,MAAAA,sBAAsB,EAAG;AAV3B,KAfF;;AA+BE;;;;;AAMAC,IAAAA,UAAU,EACV;AACE;;;AAGAC,MAAAA,OAAO,EACP;AACEC,QAAAA,KAAK,EAAG,QADV;AAEEC,QAAAA,IAAI,EAAG,IAFT;AAGEC,QAAAA,QAAQ,EAAG;AAHb;AALF,KAtCF;;AAqDE;;;;;AAMAC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,gBAAgB,EAAG,0BAASC,QAAT,EACnB;AACE,YAAIC,MAAM,GAAG,IAAIxB,EAAE,CAACU,EAAH,CAAMC,KAAN,CAAYc,cAAZ,CAA2BC,UAA/B,EAAb;AACA,aAAKC,gBAAL,CAAsBJ,QAAtB,EAAgCC,MAAhC;AAEA,eAAOA,MAAP;AACD,OARH;AAWE;AACAG,MAAAA,gBAAgB,EAAG,0BAASJ,QAAT,EAAmBK,UAAnB,EACnB;AACE,YAAIC,yBAAyB,GAAG7B,EAAE,CAACU,EAAH,CAAMC,KAAN,CAAYc,cAAZ,CAA2BK,OAA3D,CADF,CAGE;;AACA,YAAIP,QAAQ,CAACQ,IAAT,IAAiBR,QAAQ,CAACQ,IAAT,CAAcC,SAAnC,EAA8C;AAC5CJ,UAAAA,UAAU,CAACK,QAAX,CAAoBV,QAAQ,CAACQ,IAAT,CAAcC,SAAd,EAApB;AACD,SAFD,MAEO;AACLJ,UAAAA,UAAU,CAACK,QAAX,CAAoBV,QAAQ,CAACQ,IAA7B;AACD,SARH,CAUE;;;AACA,YAAIG,aAAa,GAAGN,UAAU,CAACO,UAAX,EAApB;;AACA,YAAI,KAAKA,UAAL,MAAqB,IAAzB,EACA;AACE,cAAID,aAAa,IAAI,IAArB,EACA;AACE;AACAA,YAAAA,aAAa,GAAG,IAAIlC,EAAE,CAACU,EAAH,CAAM0B,OAAN,CAAcC,OAAlB,CAA0B,KAAKF,UAAL,EAA1B,CAAhB;AACAP,YAAAA,UAAU,CAACU,UAAX,CAAsBJ,aAAtB,EAHF,CAIE;;AACAlC,YAAAA,EAAE,CAACuC,IAAH,CAAQC,WAAR,CAAoBC,kBAApB,CAAuCP,aAAvC,EAAsDN,UAAtD;AACD,WAPD,MASA;AACE;AACAM,YAAAA,aAAa,CAACD,QAAd,CAAuB,KAAKE,UAAL,EAAvB;AACD;AACF;;AAEDZ,QAAAA,QAAQ,CAACmB,MAAT,GACEd,UAAU,CAACe,QAAX,CAAoBd,yBAAyB,CAACf,YAA9C,CADF,GAEEc,UAAU,CAACgB,WAAX,CAAuBf,yBAAyB,CAACf,YAAjD,CAFF;AAIAS,QAAAA,QAAQ,CAACsB,eAAT,GACEjB,UAAU,CAACe,QAAX,CAAoBd,yBAAyB,CAACd,sBAA9C,CADF,GAEEa,UAAU,CAACgB,WAAX,CAAuBf,yBAAyB,CAACd,sBAAjD,CAFF;AAGD;AAjDH;AA5DF,GADA;AAtBAf,EAAAA,EAAE,CAACU,EAAH,CAAMC,KAAN,CAAYc,cAAZ,CAA2BK,OAA3B,CAAmC3B,aAAnC,GAAmDA,aAAnD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * The default header cell renderer.\n */\nqx.Class.define(\"qx.ui.table.headerrenderer.Default\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.table.IHeaderRenderer,\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * @type {String} The state which will be set for header cells of sorted columns.\n     */\n    STATE_SORTED           : \"sorted\",\n\n\n    /**\n     * @type {String} The state which will be set when sorting is ascending.\n     */\n    STATE_SORTED_ASCENDING : \"sortedAscending\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * ToolTip to show if the pointer hovers of the icon\n     */\n    toolTip :\n    {\n      check : \"String\",\n      init : null,\n      nullable : true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // overridden\n    createHeaderCell : function(cellInfo)\n    {\n      var widget = new qx.ui.table.headerrenderer.HeaderCell();\n      this.updateHeaderCell(cellInfo, widget);\n\n      return widget;\n    },\n\n\n    // overridden\n    updateHeaderCell : function(cellInfo, cellWidget)\n    {\n      var DefaultHeaderCellRenderer = qx.ui.table.headerrenderer.Default;\n\n      // check for localization [BUG #2699]\n      if (cellInfo.name && cellInfo.name.translate) {\n        cellWidget.setLabel(cellInfo.name.translate());\n      } else {\n        cellWidget.setLabel(cellInfo.name);\n      }\n\n      // Set image tooltip if given\n      var widgetToolTip = cellWidget.getToolTip();\n      if (this.getToolTip() != null)\n      {\n        if (widgetToolTip == null)\n        {\n          // We have no tooltip yet -> Create one\n          widgetToolTip = new qx.ui.tooltip.ToolTip(this.getToolTip());\n          cellWidget.setToolTip(widgetToolTip);\n          // Link disposer to cellwidget to prevent memory leak\n          qx.util.DisposeUtil.disposeTriggeredBy(widgetToolTip, cellWidget);\n        }\n        else\n        {\n          // Update tooltip text\n          widgetToolTip.setLabel(this.getToolTip());\n        }\n      }\n\n      cellInfo.sorted ?\n        cellWidget.addState(DefaultHeaderCellRenderer.STATE_SORTED) :\n        cellWidget.removeState(DefaultHeaderCellRenderer.STATE_SORTED);\n\n      cellInfo.sortedAscending ?\n        cellWidget.addState(DefaultHeaderCellRenderer.STATE_SORTED_ASCENDING) :\n        cellWidget.removeState(DefaultHeaderCellRenderer.STATE_SORTED_ASCENDING);\n    }\n  }\n});\n"
  ]
}