{
  "className": "qx.ui.table.cellrenderer.Conditional",
  "packageName": "qx.ui.table.cellrenderer",
  "name": "Conditional",
  "superClass": "qx.ui.table.cellrenderer.Default",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 362,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007 by Tartan Solutions, Inc, http://www.tartansolutions.com\n   License:\n     MIT: https://opensource.org/licenses/MIT\n   Authors:\n Dan Hummon\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>The conditional cell renderer allows special per cell formatting based on\n conditions on the cell's value.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.util.format.NumberFormat"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 50,
        "column": 14
      },
      "end": {
        "line": 62,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "align {String|null}\n   The default text alignment to format the cell with by default.",
          "paramName": "align",
          "description": "\n   The default text alignment to format the cell with by default.",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "@param",
          "body": "color {String|null}\n   The default font color to format the cell with by default.",
          "paramName": "color",
          "description": "\n   The default font color to format the cell with by default.",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "@param",
          "body": "style {String|null}\n   The default font style to format the cell with by default.",
          "paramName": "style",
          "description": "\n   The default font style to format the cell with by default.",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "@param",
          "body": "weight {String|null}\n   The default font weight to format the cell with by default.",
          "paramName": "weight",
          "description": "\n   The default font weight to format the cell with by default.",
          "type": [
            "String",
            "null"
          ]
        }
      ]
    }
  },
  "members": {
    "__defaultTextAlign": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultColor": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 76,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultFontStyle": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultFontWeight": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__applyFormatting": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Applies the cell styles to the style map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {Array} The matched condition",
            "paramName": "condition",
            "description": " The matched condition",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "style {Map} map of already applied styles.",
            "paramName": "style",
            "description": " map of already applied styles.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "addNumericCondition": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addNumericCondition method is used to add a basic numeric condition to\n the cell renderer.\n Note: Passing null is different from passing an empty string in the align,\n color, style and weight arguments. Null will allow pre-existing formatting\n to pass through, where an empty string will clear it back to the default\n formatting set in the constructor.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {String} The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\", \">=\",\n     and \"<=\".",
            "paramName": "condition",
            "description": " The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\", \">=\",\n     and \"<=\".",
            "type": "qx.ui.table.cellrenderer.String"
          },
          {
            "name": "@param",
            "body": "value1 {Integer} The value to compare against.",
            "paramName": "value1",
            "description": " The value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "align {String|null} The text alignment to format the cell with if the condition matches.",
            "paramName": "align",
            "description": " The text alignment to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "color {String|null} The font color to format the cell with if the condition matches.",
            "paramName": "color",
            "description": " The font color to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "style {String|null} The font style to format the cell with if the condition matches.",
            "paramName": "style",
            "description": " The font style to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "weight {String|null} The font weight to format the cell with if the condition matches.",
            "paramName": "weight",
            "description": " The font weight to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "target {String|null} The text value of the column to compare against. If this is null,\n     comparisons will be against the contents of this cell.",
            "paramName": "target",
            "description": " The text value of the column to compare against. If this is null,\n     comparisons will be against the contents of this cell.",
            "type": [
              "String",
              "null"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the condition can not be recognized or value is null.",
            "type": "Error",
            "description": " If the condition can not be recognized or value is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addBetweenCondition": {
      "location": {
        "start": {
          "line": 167,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addBetweenCondition method is used to add a between condition to the\n cell renderer.\n Note: Passing null is different from passing an empty string in the align,\n color, style and weight arguments. Null will allow pre-existing formatting\n to pass through, where an empty string will clear it back to the default\n formatting set in the constructor.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {String} The type of condition. Accepted strings are \"between\" and \"!between\".",
            "paramName": "condition",
            "description": " The type of condition. Accepted strings are \"between\" and \"!between\".",
            "type": "qx.ui.table.cellrenderer.String"
          },
          {
            "name": "@param",
            "body": "value1 {Integer} The first value to compare against.",
            "paramName": "value1",
            "description": " The first value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value2 {Integer} The second value to compare against.",
            "paramName": "value2",
            "description": " The second value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "align {String|null} The text alignment to format the cell with if the condition matches.",
            "paramName": "align",
            "description": " The text alignment to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "color {String|null} The font color to format the cell with if the condition matches.",
            "paramName": "color",
            "description": " The font color to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "style {String|null} The font style to format the cell with if the condition matches.",
            "paramName": "style",
            "description": " The font style to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "weight {String|null} The font weight to format the cell with if the condition matches.",
            "paramName": "weight",
            "description": " The font weight to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "target {String|null} The text value of the column to compare against. If this is null,\n     comparisons will be against the contents of this cell.",
            "paramName": "target",
            "description": " The text value of the column to compare against. If this is null,\n     comparisons will be against the contents of this cell.",
            "type": [
              "String",
              "null"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the condition can not be recognized or value is null.",
            "type": "Error",
            "description": " If the condition can not be recognized or value is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addRegex": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addRegex method is used to add a regular expression condition to the\n cell renderer.\n Note: Passing null is different from passing an empty string in the align,\n color, style and weight arguments. Null will allow pre-existing formatting\n to pass through, where an empty string will clear it back to the default\n formatting set in the constructor.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regex {String} The regular expression to match against.",
            "paramName": "regex",
            "description": " The regular expression to match against.",
            "type": "qx.ui.table.cellrenderer.String"
          },
          {
            "name": "@param",
            "body": "align {String|null} The text alignment to format the cell with if the condition matches.",
            "paramName": "align",
            "description": " The text alignment to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "color {String|null} The font color to format the cell with if the condition matches.",
            "paramName": "color",
            "description": " The font color to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "style {String|null} The font style to format the cell with if the condition matches.",
            "paramName": "style",
            "description": " The font style to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "weight {String|null} The font weight to format the cell with if the condition matches.",
            "paramName": "weight",
            "description": " The font weight to format the cell with if the condition matches.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "target {String|null} The text value of the column to compare against. If this is null,\n     comparisons will be against the contents of this cell.",
            "paramName": "target",
            "description": " The text value of the column to compare against. If this is null,\n     comparisons will be against the contents of this cell.",
            "type": [
              "String",
              "null"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the regex is null.",
            "type": "Error",
            "description": " If the regex is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getCellStyle": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 350,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Overridden; called whenever the cell updates. The cell will iterate through\n each available condition and apply formatting for those that\n match. Multiple conditions can match, but later conditions will override\n earlier ones. Conditions with null values will stack with other conditions\n that apply to that value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "appearsIn": [
        "qx.ui.table.cellrenderer.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "reset"
    },
    "getDefaultCellStyle": {
      "type": "function",
      "name": "getDefaultCellStyle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>defaultCellStyle</code>.\n\nFor further details take a look at the property definition: {@link #defaultCellStyle}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for defaultCellStyle"
          }
        ]
      }
    },
    "setDefaultCellStyle": {
      "type": "function",
      "name": "setDefaultCellStyle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>defaultCellStyle</code>.\n\nFor further details take a look at the property definition: {@link #defaultCellStyle}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for defaultCellStyle"
          }
        ]
      }
    },
    "resetDefaultCellStyle": {
      "type": "function",
      "name": "resetDefaultCellStyle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "reset"
    },
    "getUseAutoAlign": {
      "type": "function",
      "name": "getUseAutoAlign",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useAutoAlign</code>.\n\nFor further details take a look at the property definition: {@link #useAutoAlign}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useAutoAlign"
          }
        ]
      }
    },
    "isUseAutoAlign": {
      "type": "function",
      "name": "isUseAutoAlign",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useAutoAlign</code>.\n\nFor further details take a look at the property definition: {@link #useAutoAlign}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useAutoAlign"
          }
        ]
      }
    },
    "setUseAutoAlign": {
      "type": "function",
      "name": "setUseAutoAlign",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useAutoAlign</code>.\n\nFor further details take a look at the property definition: {@link #useAutoAlign}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useAutoAlign"
          }
        ]
      }
    },
    "resetUseAutoAlign": {
      "type": "function",
      "name": "resetUseAutoAlign",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>useAutoAlign</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #useAutoAlign}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 359,
        "column": 13
      },
      "end": {
        "line": 361,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.table.cellrenderer.Date",
    "qx.ui.table.cellrenderer.Html",
    "qx.ui.table.cellrenderer.Number",
    "qx.ui.table.cellrenderer.String"
  ]
}