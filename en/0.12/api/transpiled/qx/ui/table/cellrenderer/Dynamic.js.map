{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Dynamic.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Default",
    "construct",
    "cellRendererFactoryFunction",
    "setCellRendererFactoryFunction",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "createDataCellHtml",
    "cellInfo",
    "htmlArr",
    "getCellRendererFactoryFunction",
    "Error",
    "cellRenderer",
    "Dynamic"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,EAAH,CAAMC,KAAN,CAAYC,YAAZ,CAAyBC,OADpC;;AAIE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,2BAAT,EACZ;AACE;;AACA,UAAIA,2BAAJ,EACA;AACE,aAAKC,8BAAL,CAAoCD,2BAApC;AACD;AACF,KArBH;;AAwBE;AACF;AACA;AACA;AACA;AAEEE,IAAAA,UAAU,EACV;AAEE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIF,MAAAA,2BAA2B,EAC3B;AACEG,QAAAA,KAAK,EAAG,UADV;AAEEC,QAAAA,QAAQ,EAAG,IAFb;AAGEC,QAAAA,IAAI,EAAG;AAHT;AArBF,KA/BF;;AA4DE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,kBAAkB,EAAG,4BAASC,QAAT,EAAmBC,OAAnB,EACrB;AACE,YAAIT,2BAA2B,GAAG,KAAKU,8BAAL,EAAlC;;AACA,YAAK,CAAEV,2BAAP,EAAqC;AACnC,gBAAM,IAAIW,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,YAAIC,YAAY,GAAGZ,2BAA2B,CAACQ,QAAD,CAA9C;AAEA,eAAOI,YAAY,CAACL,kBAAb,CAAgCC,QAAhC,EAA0CC,OAA1C,CAAP;AACD;AArBH;AAnEF,GADA;AA1BArB,EAAAA,EAAE,CAACO,EAAH,CAAMC,KAAN,CAAYC,YAAZ,CAAyBgB,OAAzB,CAAiCtB,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 by Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A cell renderer factory which can dynamically exchange the cell renderer\n * based on information retrieved at runtime. This is useful when different\n * rows in a column should have different cell renderer based on cell content\n * or row metadata. A typical example would be a spreadsheet that has different\n * kind of data in one column.\n *\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Dynamic\",\n{\n  extend : qx.ui.table.cellrenderer.Default,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param cellRendererFactoryFunction {Function?null} The initial value for\n   *    the property {@link #cellRendererFactoryFunction}.\n   */\n  construct : function(cellRendererFactoryFunction)\n  {\n    this.base(arguments);\n    if (cellRendererFactoryFunction)\n    {\n      this.setCellRendererFactoryFunction(cellRendererFactoryFunction);\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /**\n     * Function that returns a cellRenderer instance which will be\n     * used for the row that is currently being edited. The function is\n     * defined like this:\n     *\n     * <pre class=\"javascript\">\n     * myTable.getTableColumnModel().setCellRenderer(function(cellInfo){\n     *   // based on the cellInfo map or other information, return the\n     *   // appropriate cell renderer\n     *   if (cellInfo.row == 5)\n     *     return new qx.ui.table.cellrenderer.Boolean;\n     *   else\n     *     return new qx.ui.table.cellrenderer.Default;\n     * });\n     * </pre>\n     *\n     * the function MUST return at least a qx.ui.table.cellrenderer.Default\n     **/\n    cellRendererFactoryFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Overridden; called whenever the cell updates. The cell will call the\n     * function stored in the cellRendererFactoryFunction to retrieve the\n     * cell renderer which should be used for this particular cell\n     *\n     * @param cellInfo {Map} A map containing the information about the cell to\n     *     create.\n     * @param htmlArr {String[]} Target string container. The HTML of the data\n     *     cell should be appended to this array.\n     * @return {String} Data cell HTML\n     */\n    createDataCellHtml : function(cellInfo, htmlArr)\n    {\n      var cellRendererFactoryFunction = this.getCellRendererFactoryFunction();\n      if ( ! cellRendererFactoryFunction ) {\n        throw new Error(\"No function provided! Aborting.\");\n      }\n      var cellRenderer = cellRendererFactoryFunction(cellInfo);\n\n      return cellRenderer.createDataCellHtml(cellInfo, htmlArr);\n    }\n  }\n});\n"
  ]
}