{
  "className": "qx.ui.table.Table",
  "packageName": "qx.ui.table",
  "name": "Table",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [
    "qx.ui.core.MDragDropScrolling"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 2323,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Til Schneider (til132)\n Fabian Jakobs (fjakobs)\n Jonathan Wei√ü (jonathan_rass)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Table\n A detailed description can be found in the package description\n {@link qx.ui.table}.</p>"
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "statusbar {qx.ui.basic.Label} label to show the status of the table",
          "controlName": "statusbar",
          "description": "label to show the status of the table",
          "type": "qx.ui.basic.Label"
        },
        {
          "name": "@childControl",
          "body": "column-button {qx.ui.table.columnmenu.Button} button to open the column menu",
          "controlName": "column-button",
          "description": "button to open the column menu",
          "type": "qx.ui.table.columnmenu.Button"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 126,
        "column": 14
      },
      "end": {
        "line": 221,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "tableModel {qx.ui.table.ITableModel ? null}\n   The table model to read the data from.",
          "paramName": "tableModel",
          "description": "\n   The table model to read the data from.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.ui.table.ITableModel"
        },
        {
          "name": "@param",
          "body": "custom {Map ? null}\n   A map provided to override the various supplemental classes allocated\n   within this constructor.  Each property must be a function which\n   returns an object instance, as indicated by shown the defaults listed\n   here:\n   <dl>\n     <dt>initiallyHiddenColumns</dt>\n       <dd>\n         {Array?}\n         A list of column numbers that should be initially invisible. Any\n         column not mentioned will be initially visible, and if no array\n         is provided, all columns will be initially visible.\n       </dd>\n     <dt>selectionManager</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.selection.Manager(obj);\n         }\n       </pre></dd>\n     <dt>selectionModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.selection.Model(obj);\n         }\n       </pre></dd>\n     <dt>tableColumnModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.columnmodel.Basic(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Model(obj);\n         }\n       </pre></dd>\n     <dt>tablePane</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Pane(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneHeader</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Header(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneScroller</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Scroller(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Model(obj);\n         }\n       </pre></dd>\n     <dt>columnMenu</dt>\n       <dd><pre class='javascript'>\n         function()\n         {\n           return new qx.ui.table.columnmenu.Button();\n         }\n       </pre></dd>\n   </dl>",
          "paramName": "custom",
          "description": "\n   A map provided to override the various supplemental classes allocated\n   within this constructor.  Each property must be a function which\n   returns an object instance, as indicated by shown the defaults listed\n   here:\n   <dl>\n     <dt>initiallyHiddenColumns</dt>\n       <dd>\n         {Array?}\n         A list of column numbers that should be initially invisible. Any\n         column not mentioned will be initially visible, and if no array\n         is provided, all columns will be initially visible.\n       </dd>\n     <dt>selectionManager</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.selection.Manager(obj);\n         }\n       </pre></dd>\n     <dt>selectionModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.selection.Model(obj);\n         }\n       </pre></dd>\n     <dt>tableColumnModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.columnmodel.Basic(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Model(obj);\n         }\n       </pre></dd>\n     <dt>tablePane</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Pane(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneHeader</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Header(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneScroller</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Scroller(obj);\n         }\n       </pre></dd>\n     <dt>tablePaneModel</dt>\n       <dd><pre class='javascript'>\n         function(obj)\n         {\n           return new qx.ui.table.pane.Model(obj);\n         }\n       </pre></dd>\n     <dt>columnMenu</dt>\n       <dd><pre class='javascript'>\n         function()\n         {\n           return new qx.ui.table.columnmenu.Button();\n         }\n       </pre></dd>\n   </dl>",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        }
      ]
    }
  },
  "events": {
    "columnVisibilityMenuCreateStart": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 60
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched before adding the column list to the column visibility menu.\n The event data is a map with two properties: table and menu.  Listeners\n may add additional items to the menu, which appear at the top of the\n menu.</p>"
          }
        ]
      },
      "name": "columnVisibilityMenuCreateStart",
      "type": "qx.event.type.Data"
    },
    "columnVisibilityMenuCreateEnd": {
      "location": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 58
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched after adding the column list to the column visibility menu.\n The event data is a map with two properties: table and menu.  Listeners\n may add additional items to the menu, which appear at the bottom of the\n menu.</p>"
          }
        ]
      },
      "name": "columnVisibilityMenuCreateEnd",
      "type": "qx.event.type.Data"
    },
    "tableWidthChanged": {
      "location": {
        "start": {
          "line": 253,
          "column": 4
        },
        "end": {
          "line": 253,
          "column": 47
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched when the width of the table has changed.</p>"
          }
        ]
      },
      "name": "tableWidthChanged",
      "type": "qx.event.type.Event"
    },
    "verticalScrollBarChanged": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 53
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched when updating scrollbars discovers that a vertical scrollbar\n is needed when it previously was not, or vice versa.  The data is a\n boolean indicating whether a vertical scrollbar is now being used.</p>"
          }
        ]
      },
      "name": "verticalScrollBarChanged",
      "type": "qx.event.type.Data"
    },
    "cellTap": {
      "location": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 44
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched when a data cell has been tapped.</p>"
          }
        ]
      },
      "name": "cellTap",
      "type": "qx.ui.table.pane.CellEvent"
    },
    "cellDbltap": {
      "location": {
        "start": {
          "line": 270,
          "column": 4
        },
        "end": {
          "line": 270,
          "column": 47
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched when a data cell has been tapped.</p>"
          }
        ]
      },
      "name": "cellDbltap",
      "type": "qx.ui.table.pane.CellEvent"
    },
    "cellContextmenu": {
      "location": {
        "start": {
          "line": 275,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 52
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched when the context menu is needed in a data cell</p>"
          }
        ]
      },
      "name": "cellContextmenu",
      "type": "qx.ui.table.pane.CellEvent"
    },
    "dataEdited": {
      "location": {
        "start": {
          "line": 288,
          "column": 4
        },
        "end": {
          "line": 288,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched after a cell editor is flushed.\n The data is a map containing this properties:\n </p>\n<ul>\n   <li>row</li>\n   <li>col</li>\n   <li>value</li>\n   <li>oldValue</li>\n </ul>"
          }
        ]
      },
      "name": "dataEdited",
      "type": "qx.event.type.Data"
    }
  },
  "statics": {
    "__redirectEvents": {
      "location": {
        "start": {
          "line": 302,
          "column": 4
        },
        "end": {
          "line": 302,
          "column": 72
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Events that must be redirected to the scrollers.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 318,
          "column": 5
        }
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "init": "table",
      "defaultValue": "table",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "focusable": {
      "location": {
        "start": {
          "line": 321,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "name": "focusable",
      "propertyType": "new",
      "refine": true,
      "init": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "minWidth": {
      "location": {
        "start": {
          "line": 328,
          "column": 4
        },
        "end": {
          "line": 332,
          "column": 5
        }
      },
      "name": "minWidth",
      "propertyType": "new",
      "refine": true,
      "init": 50,
      "defaultValue": 50,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "initiallyHiddenColumns": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The list of columns that are initially hidden. This property is set by\n the constructor, from the value received in\n custom.initiallyHiddenColumns, and is only used when a column model is\n initialized. It can be of great benefit in tables with numerous columns\n where most are not initially visible. The process of creating the\n headers for all of the columns, only to have those columns discarded\n shortly thereafter when setColumnVisibility(false) is called, is a\n waste of (significant, in some browsers) time. Specifying the\n non-visible columns at constructor time can therefore avoid the initial\n creation of all of those superfluous widgets.</p>"
          }
        ]
      },
      "name": "initiallyHiddenColumns",
      "propertyType": "new"
    },
    "selectable": {
      "location": {
        "start": {
          "line": 360,
          "column": 4
        },
        "end": {
          "line": 364,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains content which may be selected by the user.\n If the value set to <code>true</code> the native browser selection can\n be used for text selection. But it is normally useful for\n forms fields, longer texts/documents, editors, etc.\n Note: This has no effect on Table!</p>"
          }
        ]
      },
      "name": "selectable",
      "propertyType": "new",
      "refine": true,
      "init": false,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "selectionModel": {
      "location": {
        "start": {
          "line": 368,
          "column": 4
        },
        "end": {
          "line": 373,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The selection model.</p>"
          }
        ]
      },
      "name": "selectionModel",
      "propertyType": "new",
      "event": "changeSelectionModel",
      "apply": "_applySelectionModel",
      "check": "qx.ui.table.selection.Model"
    },
    "tableModel": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 382,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The table model.</p>"
          }
        ]
      },
      "name": "tableModel",
      "propertyType": "new",
      "event": "changeTableModel",
      "apply": "_applyTableModel",
      "check": "qx.ui.table.ITableModel"
    },
    "rowHeight": {
      "location": {
        "start": {
          "line": 386,
          "column": 4
        },
        "end": {
          "line": 393,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The height of the table rows.</p>"
          }
        ]
      },
      "name": "rowHeight",
      "propertyType": "new",
      "themeable": true,
      "event": "changeRowHeight",
      "apply": "_applyRowHeight",
      "init": 20,
      "check": "Number",
      "defaultValue": 20
    },
    "forceLineHeight": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 406,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force line height to match row height.  May be disabled if cell\n renderers being used wish to render multiple lines of data within a\n cell.  (With the default setting, all but the first of multiple lines\n of data will not be visible.)</p>"
          }
        ]
      },
      "name": "forceLineHeight",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "headerCellsVisible": {
      "location": {
        "start": {
          "line": 414,
          "column": 4
        },
        "end": {
          "line": 420,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the header cells are visible. When setting this to false,\n  you'll likely also want to set the {#columnVisibilityButtonVisible}\n  property to false as well, to entirely remove the header row.</p>"
          }
        ]
      },
      "name": "headerCellsVisible",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyHeaderCellsVisible",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "headerCellHeight": {
      "location": {
        "start": {
          "line": 424,
          "column": 4
        },
        "end": {
          "line": 432,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The height of the header cells.</p>"
          }
        ]
      },
      "name": "headerCellHeight",
      "propertyType": "new",
      "themeable": true,
      "event": "changeHeaderCellHeight",
      "apply": "_applyHeaderCellHeight",
      "nullable": true,
      "init": 16,
      "allowNull": true,
      "check": "Integer",
      "defaultValue": 16
    },
    "statusBarVisible": {
      "location": {
        "start": {
          "line": 436,
          "column": 4
        },
        "end": {
          "line": 441,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to show the status bar</p>"
          }
        ]
      },
      "name": "statusBarVisible",
      "propertyType": "new",
      "apply": "_applyStatusBarVisible",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "additionalStatusBarText": {
      "location": {
        "start": {
          "line": 445,
          "column": 4
        },
        "end": {
          "line": 450,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The Statusbartext, set it, if you want some more Information</p>"
          }
        ]
      },
      "name": "additionalStatusBarText",
      "propertyType": "new",
      "apply": "_applyAdditionalStatusBarText",
      "nullable": true,
      "allowNull": true
    },
    "columnVisibilityButtonVisible": {
      "location": {
        "start": {
          "line": 454,
          "column": 4
        },
        "end": {
          "line": 460,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to show the column visibility button</p>"
          }
        ]
      },
      "name": "columnVisibilityButtonVisible",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyColumnVisibilityButtonVisible",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "metaColumnCounts": {
      "location": {
        "start": {
          "line": 467,
          "column": 4
        },
        "end": {
          "line": 471,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer[]} The number of columns per meta column. If the last array entry is -1,\n this meta column will get the remaining columns."
          }
        ]
      },
      "name": "metaColumnCounts",
      "propertyType": "new",
      "apply": "_applyMetaColumnCounts",
      "check": "Object"
    },
    "focusCellOnPointerMove": {
      "location": {
        "start": {
          "line": 478,
          "column": 4
        },
        "end": {
          "line": 483,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the focus should moved when the pointer is moved over a cell. If false\n the focus is only moved on pointer taps.</p>"
          }
        ]
      },
      "name": "focusCellOnPointerMove",
      "propertyType": "new",
      "apply": "_applyFocusCellOnPointerMove",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "rowFocusChangeModifiesSelection": {
      "location": {
        "start": {
          "line": 488,
          "column": 4
        },
        "end": {
          "line": 492,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether row focus change by keyboard also modifies selection</p>"
          }
        ]
      },
      "name": "rowFocusChangeModifiesSelection",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "showCellFocusIndicator": {
      "location": {
        "start": {
          "line": 497,
          "column": 4
        },
        "end": {
          "line": 502,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the cell focus indicator should be shown</p>"
          }
        ]
      },
      "name": "showCellFocusIndicator",
      "propertyType": "new",
      "apply": "_applyShowCellFocusIndicator",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "contextMenuFromDataCellsOnly": {
      "location": {
        "start": {
          "line": 513,
          "column": 4
        },
        "end": {
          "line": 518,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>By default, the \"cellContextmenu\" event is fired only when a data cell\n is right-clicked. It is not fired when a right-click occurs in the\n empty area of the table below the last data row. By turning on this\n property, \"cellContextMenu\" events will also be generated when a\n right-click occurs in that empty area. In such a case, row identifier\n in the event data will be null, so event handlers can check (row ===\n null) to handle this case.</p>"
          }
        ]
      },
      "name": "contextMenuFromDataCellsOnly",
      "propertyType": "new",
      "apply": "_applyContextMenuFromDataCellsOnly",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "keepFirstVisibleRowComplete": {
      "location": {
        "start": {
          "line": 524,
          "column": 4
        },
        "end": {
          "line": 529,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the table should keep the first visible row complete. If set to false,\n the first row may be rendered partial, depending on the vertical scroll value.</p>"
          }
        ]
      },
      "name": "keepFirstVisibleRowComplete",
      "propertyType": "new",
      "apply": "_applyKeepFirstVisibleRowComplete",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "alwaysUpdateCells": {
      "location": {
        "start": {
          "line": 537,
          "column": 4
        },
        "end": {
          "line": 541,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the table cells should be updated when only the selection or the\n focus changed. This slows down the table update but allows to react on a\n changed selection or a changed focus in a cell renderer.</p>"
          }
        ]
      },
      "name": "alwaysUpdateCells",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "resetSelectionOnHeaderTap": {
      "location": {
        "start": {
          "line": 551,
          "column": 4
        },
        "end": {
          "line": 556,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to reset the selection when a header cell is tapped. Since\n most data models do not have provisions to retain a selection after\n sorting, the default is to reset the selection in this case. Some data\n models, however, do have the capability to retain the selection, so\n when using those, this property should be set to false.</p>"
          }
        ]
      },
      "name": "resetSelectionOnHeaderTap",
      "propertyType": "new",
      "apply": "_applyResetSelectionOnHeaderTap",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "dataRowRenderer": {
      "location": {
        "start": {
          "line": 560,
          "column": 4
        },
        "end": {
          "line": 566,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The renderer to use for styling the rows.</p>"
          }
        ]
      },
      "name": "dataRowRenderer",
      "propertyType": "new",
      "event": "changeDataRowRenderer",
      "nullable": true,
      "allowNull": true,
      "check": "qx.ui.table.IRowRenderer"
    },
    "modalCellEditorPreOpenFunction": {
      "location": {
        "start": {
          "line": 583,
          "column": 4
        },
        "end": {
          "line": 588,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to call when before modal cell editor is opened.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(cellEditor, cellInfo)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellEditor {qx.ui.window.Window}\n   The modal window which has been created for this cell editor",
            "paramName": "cellEditor",
            "description": "\n   The modal window which has been created for this cell editor",
            "type": "qx.ui.window.Window"
          },
          {
            "name": "@param",
            "body": "cellInfo {Map}\n   Information about the cell for which this cell editor was created.\n   It contains the following properties:\n       col, row, xPos, value",
            "paramName": "cellInfo",
            "description": "\n   Information about the cell for which this cell editor was created.\n   It contains the following properties:\n       col, row, xPos, value",
            "type": "Map"
          }
        ]
      },
      "name": "modalCellEditorPreOpenFunction",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Function"
    },
    "excludeScrollerScrollbarsIfNotNeeded": {
      "location": {
        "start": {
          "line": 596,
          "column": 4
        },
        "end": {
          "line": 601,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>By default, all Scrollers' (meta-columns') horizontal scrollbars are\n shown if any one is required. Allow not showing any that are not\n required.</p>"
          }
        ]
      },
      "name": "excludeScrollerScrollbarsIfNotNeeded",
      "propertyType": "new",
      "nullable": false,
      "init": false,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "newColumnMenu": {
      "location": {
        "start": {
          "line": 607,
          "column": 4
        },
        "end": {
          "line": 613,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a new column menu button.</p>"
          }
        ]
      },
      "name": "newColumnMenu",
      "propertyType": "new",
      "check": "Function"
    },
    "newSelectionManager": {
      "location": {
        "start": {
          "line": 621,
          "column": 4
        },
        "end": {
          "line": 627,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a selection manager.  this allows subclasses of\n Table to subclass this internal class.  To take effect, this property must\n be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newSelectionManager",
      "propertyType": "new",
      "check": "Function"
    },
    "newSelectionModel": {
      "location": {
        "start": {
          "line": 635,
          "column": 4
        },
        "end": {
          "line": 641,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a selection model.  this allows subclasses of\n Table to subclass this internal class.  To take effect, this property must\n be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newSelectionModel",
      "propertyType": "new",
      "check": "Function"
    },
    "newTableColumnModel": {
      "location": {
        "start": {
          "line": 649,
          "column": 4
        },
        "end": {
          "line": 655,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a table column model.  This allows subclasses\n of Table to subclass this internal class.  To take effect, this\n property must be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newTableColumnModel",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePane": {
      "location": {
        "start": {
          "line": 663,
          "column": 4
        },
        "end": {
          "line": 669,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a table pane.  this allows subclasses of\n Table to subclass this internal class.  To take effect, this property\n must be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newTablePane",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePaneHeader": {
      "location": {
        "start": {
          "line": 677,
          "column": 4
        },
        "end": {
          "line": 683,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a table pane.  this allows subclasses of\n Table to subclass this internal class.  To take effect, this property\n must be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newTablePaneHeader",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePaneScroller": {
      "location": {
        "start": {
          "line": 691,
          "column": 4
        },
        "end": {
          "line": 697,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a table pane scroller.  this allows\n subclasses of Table to subclass this internal class.  To take effect,\n this property must be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newTablePaneScroller",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePaneModel": {
      "location": {
        "start": {
          "line": 705,
          "column": 4
        },
        "end": {
          "line": 711,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a table pane model.  this allows subclasses\n of Table to subclass this internal class.  To take effect, this\n property must be set before calling the Table constructor.</p>"
          }
        ]
      },
      "name": "newTablePaneModel",
      "propertyType": "new",
      "check": "Function"
    },
    "dragScrollThresholdX": {
      "type": "property",
      "name": "dragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollThresholdY": {
      "type": "property",
      "name": "dragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollSlowDownFactor": {
      "type": "property",
      "name": "dragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    }
  },
  "members": {
    "__focusedCol": {
      "location": {
        "start": {
          "line": 725,
          "column": 4
        },
        "end": {
          "line": 725,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedRow": {
      "location": {
        "start": {
          "line": 726,
          "column": 4
        },
        "end": {
          "line": 726,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__scrollerParent": {
      "location": {
        "start": {
          "line": 728,
          "column": 4
        },
        "end": {
          "line": 728,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__selectionManager": {
      "location": {
        "start": {
          "line": 730,
          "column": 4
        },
        "end": {
          "line": 730,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__additionalStatusBarText": {
      "location": {
        "start": {
          "line": 732,
          "column": 4
        },
        "end": {
          "line": 732,
          "column": 36
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastRowCount": {
      "location": {
        "start": {
          "line": 733,
          "column": 4
        },
        "end": {
          "line": 733,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__internalChange": {
      "location": {
        "start": {
          "line": 734,
          "column": 4
        },
        "end": {
          "line": 734,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__columnMenuButtons": {
      "location": {
        "start": {
          "line": 736,
          "column": 4
        },
        "end": {
          "line": 736,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__columnModel": {
      "location": {
        "start": {
          "line": 737,
          "column": 4
        },
        "end": {
          "line": 737,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__emptyTableModel": {
      "location": {
        "start": {
          "line": 738,
          "column": 4
        },
        "end": {
          "line": 738,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__hadVerticalScrollBar": {
      "location": {
        "start": {
          "line": 740,
          "column": 4
        },
        "end": {
          "line": 740,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timer": {
      "location": {
        "start": {
          "line": 742,
          "column": 4
        },
        "end": {
          "line": 742,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 746,
          "column": 4
        },
        "end": {
          "line": 781,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\n   the part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\n   the part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\n   all text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\n   all text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "description": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applySelectionModel": {
      "location": {
        "start": {
          "line": 786,
          "column": 4
        },
        "end": {
          "line": 795,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "selectionModel"
      ]
    },
    "_applyRowHeight": {
      "location": {
        "start": {
          "line": 799,
          "column": 4
        },
        "end": {
          "line": 806,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "rowHeight"
      ]
    },
    "_applyHeaderCellsVisible": {
      "location": {
        "start": {
          "line": 810,
          "column": 4
        },
        "end": {
          "line": 825,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "headerCellsVisible"
      ]
    },
    "_applyHeaderCellHeight": {
      "location": {
        "start": {
          "line": 829,
          "column": 4
        },
        "end": {
          "line": 836,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "headerCellHeight"
      ]
    },
    "getEmptyTableModel": {
      "location": {
        "start": {
          "line": 845,
          "column": 4
        },
        "end": {
          "line": 854,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get an empty table model instance to use for this table. Use this table\n to configure the table with no table model.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.ITableModel} The empty table model",
            "type": "qx.ui.table.ITableModel",
            "description": " The empty table model"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyTableModel": {
      "location": {
        "start": {
          "line": 858,
          "column": 4
        },
        "end": {
          "line": 902,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "tableModel"
      ]
    },
    "getTableColumnModel": {
      "location": {
        "start": {
          "line": 910,
          "column": 4
        },
        "end": {
          "line": 935,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the The table column model.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.columnmodel.Basic} The table's column model",
            "type": "qx.ui.table.columnmodel.Basic",
            "description": " The table's column model"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyStatusBarVisible": {
      "location": {
        "start": {
          "line": 939,
          "column": 4
        },
        "end": {
          "line": 950,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "statusBarVisible"
      ]
    },
    "_applyAdditionalStatusBarText": {
      "location": {
        "start": {
          "line": 954,
          "column": 4
        },
        "end": {
          "line": 958,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "additionalStatusBarText"
      ]
    },
    "_applyColumnVisibilityButtonVisible": {
      "location": {
        "start": {
          "line": 962,
          "column": 4
        },
        "end": {
          "line": 969,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "columnVisibilityButtonVisible"
      ]
    },
    "_applyMetaColumnCounts": {
      "location": {
        "start": {
          "line": 973,
          "column": 4
        },
        "end": {
          "line": 1126,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "metaColumnCounts"
      ]
    },
    "_applyFocusCellOnPointerMove": {
      "location": {
        "start": {
          "line": 1130,
          "column": 4
        },
        "end": {
          "line": 1137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "focusCellOnPointerMove"
      ]
    },
    "_applyShowCellFocusIndicator": {
      "location": {
        "start": {
          "line": 1141,
          "column": 4
        },
        "end": {
          "line": 1148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "showCellFocusIndicator"
      ]
    },
    "_applyContextMenuFromDataCellsOnly": {
      "location": {
        "start": {
          "line": 1152,
          "column": 4
        },
        "end": {
          "line": 1159,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "contextMenuFromDataCellsOnly"
      ]
    },
    "_applyKeepFirstVisibleRowComplete": {
      "location": {
        "start": {
          "line": 1163,
          "column": 4
        },
        "end": {
          "line": 1170,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "keepFirstVisibleRowComplete"
      ]
    },
    "_applyResetSelectionOnHeaderTap": {
      "location": {
        "start": {
          "line": 1174,
          "column": 4
        },
        "end": {
          "line": 1181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property modifier</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "resetSelectionOnHeaderTap"
      ]
    },
    "getSelectionManager": {
      "location": {
        "start": {
          "line": 1189,
          "column": 4
        },
        "end": {
          "line": 1191,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the selection manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.selection.Manager} the selection manager.",
            "type": "qx.ui.table.selection.Manager",
            "description": " the selection manager."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getPaneScrollerArr": {
      "location": {
        "start": {
          "line": 1199,
          "column": 4
        },
        "end": {
          "line": 1201,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array containing all TablePaneScrollers in this table.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.",
            "type": "qx.ui.table.pane.Scroller[]",
            "description": " all TablePaneScrollers in this table."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getPaneScroller": {
      "location": {
        "start": {
          "line": 1210,
          "column": 4
        },
        "end": {
          "line": 1212,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a TablePaneScroller of this table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "metaColumn {Integer} the meta column to get the TablePaneScroller for.",
            "paramName": "metaColumn",
            "description": " the meta column to get the TablePaneScroller for.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.",
            "type": "qx.ui.table.pane.Scroller",
            "description": " the qx.ui.table.pane.Scroller."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_cleanUpMetaColumns": {
      "location": {
        "start": {
          "line": 1222,
          "column": 4
        },
        "end": {
          "line": 1233,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cleans up the meta columns.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromMetaColumn {Integer} the first meta column to clean up. All following\n      meta columns will be cleaned up, too. All previous meta columns will\n      stay unchanged. If 0 all meta columns will be cleaned up.",
            "paramName": "fromMetaColumn",
            "description": " the first meta column to clean up. All following\n      meta columns will be cleaned up, too. All previous meta columns will\n      stay unchanged. If 0 all meta columns will be cleaned up.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeLocale": {
      "location": {
        "start": {
          "line": 1241,
          "column": 4
        },
        "end": {
          "line": 1245,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the locale has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Event} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 1249,
          "column": 4
        },
        "end": {
          "line": 1255,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_onSelectionChanged": {
      "location": {
        "start": {
          "line": 1263,
          "column": 4
        },
        "end": {
          "line": 1272,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the selection has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTableModelMetaDataChanged": {
      "location": {
        "start": {
          "line": 1280,
          "column": 4
        },
        "end": {
          "line": 1289,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table model meta data has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTableModelDataChanged": {
      "location": {
        "start": {
          "line": 1297,
          "column": 4
        },
        "end": {
          "line": 1306,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table model data has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onContextMenuOpen": {
      "location": {
        "start": {
          "line": 1310,
          "column": 4
        },
        "end": {
          "line": 1317,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The event object",
            "paramName": "e",
            "description": " The event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_updateTableData": {
      "location": {
        "start": {
          "line": 1330,
          "column": 4
        },
        "end": {
          "line": 1360,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>To update the table if the table model has changed and remove selection.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRow {Integer} The index of the first row that has changed.",
            "paramName": "firstRow",
            "description": " The index of the first row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRow {Integer} The index of the last row that has changed.",
            "paramName": "lastRow",
            "description": " The index of the last row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "firstColumn {Integer} The model index of the first column that has changed.",
            "paramName": "firstColumn",
            "description": " The model index of the first column that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastColumn {Integer} The model index of the last column that has changed.",
            "paramName": "lastColumn",
            "description": " The model index of the last column that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "removeStart {Integer ? null} The first index of the interval (including), to remove selection.",
            "paramName": "removeStart",
            "description": " The first index of the interval (including), to remove selection.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "removeCount {Integer ? null} The count of the interval, to remove selection.",
            "paramName": "removeCount",
            "description": " The count of the interval, to remove selection.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollY": {
      "location": {
        "start": {
          "line": 1368,
          "column": 4
        },
        "end": {
          "line": 1383,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when a TablePaneScroller has been scrolled vertically.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 1392,
          "column": 4
        },
        "end": {
          "line": 1397,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when a key was pressed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.KeySequence} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "qx.event.type.KeySequence"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} please use _onKeyDown instead!"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 1403,
          "column": 4
        },
        "end": {
          "line": 1539,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when on key down event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.KeySequence} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onFocusChanged": {
      "location": {
        "start": {
          "line": 1547,
          "column": 4
        },
        "end": {
          "line": 1554,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table gets the focus.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onColVisibilityChanged": {
      "location": {
        "start": {
          "line": 1562,
          "column": 4
        },
        "end": {
          "line": 1578,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the visibility of a column has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onColWidthChanged": {
      "location": {
        "start": {
          "line": 1586,
          "column": 4
        },
        "end": {
          "line": 1598,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the width of a column has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onColOrderChanged": {
      "location": {
        "start": {
          "line": 1606,
          "column": 4
        },
        "end": {
          "line": 1617,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the column order has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getTablePaneScrollerAtPageX": {
      "location": {
        "start": {
          "line": 1627,
          "column": 4
        },
        "end": {
          "line": 1631,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the TablePaneScroller at a certain x position in the page. If there is\n no TablePaneScroller at this position, null is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the position in the page to check (in pixels).",
            "paramName": "pageX",
            "description": " the position in the page to check (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller} the TablePaneScroller or null.",
            "type": "qx.ui.table.pane.Scroller",
            "description": " the TablePaneScroller or null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setFocusedCell": {
      "location": {
        "start": {
          "line": 1643,
          "column": 4
        },
        "end": {
          "line": 1664,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the currently focused cell. A value of <code>null</code> hides the\n focus cell.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer?null} the model index of the focused cell's column.",
            "paramName": "col",
            "description": " the model index of the focused cell's column.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer?null} the model index of the focused cell's row.",
            "paramName": "row",
            "description": " the model index of the focused cell's row.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "scrollVisible {Boolean ? false} whether to scroll the new focused cell\n          visible.",
            "paramName": "scrollVisible",
            "description": " whether to scroll the new focused cell\n          visible.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetSelection": {
      "location": {
        "start": {
          "line": 1670,
          "column": 4
        },
        "end": {
          "line": 1672,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets (clears) the current selection</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetCellFocus": {
      "location": {
        "start": {
          "line": 1678,
          "column": 4
        },
        "end": {
          "line": 1680,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the focused cell.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedColumn": {
      "location": {
        "start": {
          "line": 1688,
          "column": 4
        },
        "end": {
          "line": 1690,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the column of the currently focused cell.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the focused cell's column.",
            "type": "Integer",
            "description": " the model index of the focused cell's column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedRow": {
      "location": {
        "start": {
          "line": 1698,
          "column": 4
        },
        "end": {
          "line": 1700,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the row of the currently focused cell.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the focused cell's column.",
            "type": "Integer",
            "description": " the model index of the focused cell's column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "highlightFocusedRow": {
      "location": {
        "start": {
          "line": 1710,
          "column": 4
        },
        "end": {
          "line": 1713,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Select whether the focused row is highlighted</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "bHighlight {Boolean}\n   Flag indicating whether the focused row should be highlighted.",
            "paramName": "bHighlight",
            "description": "\n   Flag indicating whether the focused row should be highlighted.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearFocusedRowHighlight": {
      "location": {
        "start": {
          "line": 1728,
          "column": 4
        },
        "end": {
          "line": 1751,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the highlighting of the current focus row.\n This is used to temporarily remove the highlighting of the currently\n focused row, and is expected to be used most typically by adding a\n listener on the \"pointerout\" event, so that the focus highlighting is\n suspended when the pointer leaves the table:\n     table.addListener(\"pointerout\", table.clearFocusedRowHighlight);</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "evt",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveFocusedCell": {
      "location": {
        "start": {
          "line": 1760,
          "column": 4
        },
        "end": {
          "line": 1786,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Moves the focus.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deltaX {Integer} The delta by which the focus should be moved on the x axis.",
            "paramName": "deltaX",
            "description": " The delta by which the focus should be moved on the x axis.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "deltaY {Integer} The delta by which the focus should be moved on the y axis.",
            "paramName": "deltaY",
            "description": " The delta by which the focus should be moved on the y axis.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollCellVisible": {
      "location": {
        "start": {
          "line": 1795,
          "column": 4
        },
        "end": {
          "line": 1815,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls a cell visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column the cell belongs to.",
            "paramName": "col",
            "description": " the model index of the column the cell belongs to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer} the model index of the row the cell belongs to.",
            "paramName": "row",
            "description": " the model index of the row the cell belongs to.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isEditing": {
      "location": {
        "start": {
          "line": 1823,
          "column": 4
        },
        "end": {
          "line": 1832,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether currently a cell is editing.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} whether currently a cell is editing.",
            "type": "var",
            "description": " whether currently a cell is editing."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "startEditing": {
      "location": {
        "start": {
          "line": 1841,
          "column": 4
        },
        "end": {
          "line": 1852,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts editing the currently focused cell. Does nothing if already editing\n or if the column is not editable.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether editing was started",
            "type": "Boolean",
            "description": " whether editing was started"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopEditing": {
      "location": {
        "start": {
          "line": 1858,
          "column": 4
        },
        "end": {
          "line": 1866,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops editing and writes the editor's value to the model.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancelEditing": {
      "location": {
        "start": {
          "line": 1872,
          "column": 4
        },
        "end": {
          "line": 1880,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops editing without writing the editor's value to the model.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateContent": {
      "location": {
        "start": {
          "line": 1886,
          "column": 4
        },
        "end": {
          "line": 1891,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update the table content of every attached table pane.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blockHeaderElements": {
      "location": {
        "start": {
          "line": 1897,
          "column": 4
        },
        "end": {
          "line": 1904,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activates the blocker widgets on all column headers and the\n column button</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unblockHeaderElements": {
      "location": {
        "start": {
          "line": 1911,
          "column": 4
        },
        "end": {
          "line": 1918,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deactivates the blocker widgets on all column headers and the\n column button</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getMetaColumnAtPageX": {
      "location": {
        "start": {
          "line": 1927,
          "column": 4
        },
        "end": {
          "line": 1941,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the meta column at a certain x position in the page. If there is no\n meta column at this position, -1 is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the position in the page to check (in pixels).",
            "paramName": "pageX",
            "description": " the position in the page to check (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the index of the meta column or -1.",
            "type": "Integer",
            "description": " the index of the meta column or -1."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getMetaColumnAtColumnX": {
      "location": {
        "start": {
          "line": 1951,
          "column": 4
        },
        "end": {
          "line": 1967,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the meta column a column is shown in. If the column is not shown at\n all, -1 is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "visXPos {Integer} the visible x position of the column.",
            "paramName": "visXPos",
            "description": " the visible x position of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the meta column the column is shown in.",
            "type": "Integer",
            "description": " the meta column the column is shown in."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateStatusBar": {
      "location": {
        "start": {
          "line": 1973,
          "column": 4
        },
        "end": {
          "line": 2006,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the text shown in the status bar.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateScrollerWidths": {
      "location": {
        "start": {
          "line": 2012,
          "column": 4
        },
        "end": {
          "line": 2027,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the widths of all scrollers.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateScrollBarVisibility": {
      "location": {
        "start": {
          "line": 2033,
          "column": 4
        },
        "end": {
          "line": 2123,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the visibility of the scrollbars in the meta columns.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_initColumnMenu": {
      "location": {
        "start": {
          "line": 2129,
          "column": 4
        },
        "end": {
          "line": 2177,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the column menu</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createColumnVisibilityCheckBoxHandler": {
      "location": {
        "start": {
          "line": 2189,
          "column": 4
        },
        "end": {
          "line": 2196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a handler for a check box of the column visibility menu.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of column to create the handler for.",
            "paramName": "col",
            "description": " the model index of column to create the handler for.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The created event handler.",
            "type": "Function",
            "description": " The created event handler."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setColumnWidth": {
      "location": {
        "start": {
          "line": 2205,
          "column": 4
        },
        "end": {
          "line": 2207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of column.",
            "paramName": "col",
            "description": " the model index of column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} the new width in pixels.",
            "paramName": "width",
            "description": " the new width in pixels.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onResize": {
      "location": {
        "start": {
          "line": 2213,
          "column": 4
        },
        "end": {
          "line": 2218,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resize event handler</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addListener": {
      "location": {
        "start": {
          "line": 2222,
          "column": 4
        },
        "end": {
          "line": 2239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "String",
            "description": " An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 2243,
          "column": 4
        },
        "end": {
          "line": 2256,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (has existed)"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 2260,
          "column": 4
        },
        "end": {
          "line": 2277,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (has existed)"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "destroy": {
      "location": {
        "start": {
          "line": 2280,
          "column": 4
        },
        "end": {
          "line": 2284,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_findScrollableParent": {
      "type": "function",
      "name": "_findScrollableParent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the first scrollable parent (in the parent chain).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.LayoutItem} The widget to start from.",
            "paramName": "widget",
            "description": " The widget to start from.",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A scrollable widget.",
            "type": "qx.ui.core.Widget",
            "description": " A scrollable widget."
          }
        ]
      }
    },
    "_isScrollable": {
      "type": "function",
      "name": "_isScrollable",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is scrollable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check.",
            "paramName": "widget",
            "description": " The widget to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget is scrollable.",
            "type": "Boolean",
            "description": " Whether the widget is scrollable."
          }
        ]
      }
    },
    "_getBounds": {
      "type": "function",
      "name": "_getBounds",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the bounds of the given scrollable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80}).",
            "type": "Map",
            "description": " A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80})."
          }
        ]
      }
    },
    "_getEdgeType": {
      "type": "function",
      "name": "_getEdgeType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the edge type or null if the pointer isn't within one of the thresholds.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Map} Difference map with all for edgeTypes.",
            "paramName": "diff",
            "description": " Difference map with all for edgeTypes.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "thresholdX {Number} x-axis threshold.",
            "paramName": "thresholdX",
            "description": " x-axis threshold.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "thresholdY {Number} y-axis threshold.",
            "paramName": "thresholdY",
            "description": " y-axis threshold.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom')."
          }
        ]
      }
    },
    "_getAxis": {
      "type": "function",
      "name": "_getAxis",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the axis ('x' or 'y') by the edge type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If edgeType is not one of the distinct four ones.",
            "type": "Error",
            "description": " If edgeType is not one of the distinct four ones."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Returns 'y' or 'x'.",
            "type": "String",
            "description": " Returns 'y' or 'x'."
          }
        ]
      }
    },
    "_getThresholdByEdgeType": {
      "type": "function",
      "name": "_getThresholdByEdgeType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the threshold amount by edge type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The threshold of the x or y axis.",
            "type": "Number",
            "description": " The threshold of the x or y axis."
          }
        ]
      }
    },
    "_isScrollbarVisible": {
      "type": "function",
      "name": "_isScrollbarVisible",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the scrollbar is visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the scrollbar is visible.",
            "type": "Boolean",
            "description": " Whether the scrollbar is visible."
          }
        ]
      }
    },
    "_isScrollbarExceedingMaxPos": {
      "type": "function",
      "name": "_isScrollbarExceedingMaxPos",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the scrollbar is exceeding it's maximum position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbar {qx.ui.core.scroll.IScrollBar} Scrollbar to check.",
            "paramName": "scrollbar",
            "description": " Scrollbar to check.",
            "type": "qx.ui.core.scroll.IScrollBar"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "amount {Number} Amount to scroll which may be negative.",
            "paramName": "amount",
            "description": " Amount to scroll which may be negative.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the amount will exceed the scrollbar max position.",
            "type": "Boolean",
            "description": " Whether the amount will exceed the scrollbar max position."
          }
        ]
      }
    },
    "_calculateThresholdExceedance": {
      "type": "function",
      "name": "_calculateThresholdExceedance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the threshold exceedance (which may be negative).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Number} Difference value of one edgeType.",
            "paramName": "diff",
            "description": " Difference value of one edgeType.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "threshold {Number} x-axis or y-axis threshold.",
            "paramName": "threshold",
            "description": " x-axis or y-axis threshold.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Threshold exceedance amount (positive or negative).",
            "type": "Number",
            "description": " Threshold exceedance amount (positive or negative)."
          }
        ]
      }
    },
    "_calculateScrollAmount": {
      "type": "function",
      "name": "_calculateScrollAmount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the scroll amount (which may be negative).\n The amount is influenced by the scrollbar size (bigger = faster)\n the exceedanceAmount (bigger = faster) and the slowDownFactor.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbarSize {Number} Size of the scrollbar.",
            "paramName": "scrollbarSize",
            "description": " Size of the scrollbar.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Scroll amount (positive or negative).",
            "type": "Number",
            "description": " Scroll amount (positive or negative)."
          }
        ]
      }
    },
    "_scrollBy": {
      "type": "function",
      "name": "_scrollBy",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the given scrollable on the given axis for the given amount.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "Number"
          }
        ]
      }
    },
    "__onDrag": {
      "type": "function",
      "name": "__onDrag",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\nEVENT HANDLERS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Event handler for the drag event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      }
    },
    "__onDragend": {
      "type": "function",
      "name": "__onDragend",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the dragend event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      }
    },
    "getDragScrollThresholdX": {
      "type": "function",
      "name": "getDragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>dragScrollThresholdX</code>.\n\nFor further details take a look at the property definition: {@link #dragScrollThresholdX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for dragScrollThresholdX"
          }
        ]
      }
    },
    "setDragScrollThresholdX": {
      "type": "function",
      "name": "setDragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>dragScrollThresholdX</code>.\n\nFor further details take a look at the property definition: {@link #dragScrollThresholdX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for dragScrollThresholdX"
          }
        ]
      }
    },
    "resetDragScrollThresholdX": {
      "type": "function",
      "name": "resetDragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "reset"
    },
    "getDragScrollThresholdY": {
      "type": "function",
      "name": "getDragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>dragScrollThresholdY</code>.\n\nFor further details take a look at the property definition: {@link #dragScrollThresholdY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for dragScrollThresholdY"
          }
        ]
      }
    },
    "setDragScrollThresholdY": {
      "type": "function",
      "name": "setDragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>dragScrollThresholdY</code>.\n\nFor further details take a look at the property definition: {@link #dragScrollThresholdY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for dragScrollThresholdY"
          }
        ]
      }
    },
    "resetDragScrollThresholdY": {
      "type": "function",
      "name": "resetDragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "reset"
    },
    "getDragScrollSlowDownFactor": {
      "type": "function",
      "name": "getDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>dragScrollSlowDownFactor</code>.\n\nFor further details take a look at the property definition: {@link #dragScrollSlowDownFactor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Float",
            "desc": "Returns the value for dragScrollSlowDownFactor"
          }
        ]
      }
    },
    "setDragScrollSlowDownFactor": {
      "type": "function",
      "name": "setDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>dragScrollSlowDownFactor</code>.\n\nFor further details take a look at the property definition: {@link #dragScrollSlowDownFactor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Float",
            "paramName": "value",
            "desc": "Value for dragScrollSlowDownFactor"
          }
        ]
      }
    },
    "resetDragScrollSlowDownFactor": {
      "type": "function",
      "name": "resetDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "property": "reset"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMinWidth": {
      "type": "function",
      "name": "getMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minWidth</code>.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minWidth"
          }
        ]
      }
    },
    "setMinWidth": {
      "type": "function",
      "name": "setMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minWidth</code>.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minWidth"
          }
        ]
      }
    },
    "resetMinWidth": {
      "type": "function",
      "name": "resetMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getWidth": {
      "type": "function",
      "name": "getWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>width</code>.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for width"
          }
        ]
      }
    },
    "setWidth": {
      "type": "function",
      "name": "setWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>width</code>.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for width"
          }
        ]
      }
    },
    "resetWidth": {
      "type": "function",
      "name": "resetWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMaxWidth": {
      "type": "function",
      "name": "getMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxWidth</code>.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxWidth"
          }
        ]
      }
    },
    "setMaxWidth": {
      "type": "function",
      "name": "setMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxWidth</code>.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxWidth"
          }
        ]
      }
    },
    "resetMaxWidth": {
      "type": "function",
      "name": "resetMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMinHeight": {
      "type": "function",
      "name": "getMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minHeight</code>.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minHeight"
          }
        ]
      }
    },
    "setMinHeight": {
      "type": "function",
      "name": "setMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minHeight</code>.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minHeight"
          }
        ]
      }
    },
    "resetMinHeight": {
      "type": "function",
      "name": "resetMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getHeight": {
      "type": "function",
      "name": "getHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for height"
          }
        ]
      }
    },
    "setHeight": {
      "type": "function",
      "name": "setHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for height"
          }
        ]
      }
    },
    "resetHeight": {
      "type": "function",
      "name": "resetHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMaxHeight": {
      "type": "function",
      "name": "getMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxHeight</code>.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxHeight"
          }
        ]
      }
    },
    "setMaxHeight": {
      "type": "function",
      "name": "setMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxHeight</code>.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxHeight"
          }
        ]
      }
    },
    "resetMaxHeight": {
      "type": "function",
      "name": "resetMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAllowGrowX": {
      "type": "function",
      "name": "getAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowX"
          }
        ]
      }
    },
    "isAllowGrowX": {
      "type": "function",
      "name": "isAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowX"
          }
        ]
      }
    },
    "setAllowGrowX": {
      "type": "function",
      "name": "setAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowX"
          }
        ]
      }
    },
    "resetAllowGrowX": {
      "type": "function",
      "name": "resetAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAllowShrinkX": {
      "type": "function",
      "name": "getAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkX"
          }
        ]
      }
    },
    "isAllowShrinkX": {
      "type": "function",
      "name": "isAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkX"
          }
        ]
      }
    },
    "setAllowShrinkX": {
      "type": "function",
      "name": "setAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowShrinkX"
          }
        ]
      }
    },
    "resetAllowShrinkX": {
      "type": "function",
      "name": "resetAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAllowGrowY": {
      "type": "function",
      "name": "getAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowY"
          }
        ]
      }
    },
    "isAllowGrowY": {
      "type": "function",
      "name": "isAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowY"
          }
        ]
      }
    },
    "setAllowGrowY": {
      "type": "function",
      "name": "setAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowY"
          }
        ]
      }
    },
    "resetAllowGrowY": {
      "type": "function",
      "name": "resetAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAllowShrinkY": {
      "type": "function",
      "name": "getAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkY"
          }
        ]
      }
    },
    "isAllowShrinkY": {
      "type": "function",
      "name": "isAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkY"
          }
        ]
      }
    },
    "setAllowShrinkY": {
      "type": "function",
      "name": "setAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowShrinkY"
          }
        ]
      }
    },
    "resetAllowShrinkY": {
      "type": "function",
      "name": "resetAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAllowStretchX": {
      "type": "function",
      "name": "getAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowStretchX</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for allowStretchX"
          }
        ]
      }
    },
    "setAllowStretchX": {
      "type": "function",
      "name": "setAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowStretchX</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for allowStretchX"
          }
        ]
      }
    },
    "resetAllowStretchX": {
      "type": "function",
      "name": "resetAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAllowStretchY": {
      "type": "function",
      "name": "getAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowStretchY</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for allowStretchY"
          }
        ]
      }
    },
    "setAllowStretchY": {
      "type": "function",
      "name": "setAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowStretchY</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for allowStretchY"
          }
        ]
      }
    },
    "resetAllowStretchY": {
      "type": "function",
      "name": "resetAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMarginTop": {
      "type": "function",
      "name": "getMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginTop</code>.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginTop"
          }
        ]
      }
    },
    "setMarginTop": {
      "type": "function",
      "name": "setMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginTop</code>.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginTop"
          }
        ]
      }
    },
    "resetMarginTop": {
      "type": "function",
      "name": "resetMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMarginRight": {
      "type": "function",
      "name": "getMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginRight</code>.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginRight"
          }
        ]
      }
    },
    "setMarginRight": {
      "type": "function",
      "name": "setMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginRight</code>.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginRight"
          }
        ]
      }
    },
    "resetMarginRight": {
      "type": "function",
      "name": "resetMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMarginBottom": {
      "type": "function",
      "name": "getMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginBottom</code>.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginBottom"
          }
        ]
      }
    },
    "setMarginBottom": {
      "type": "function",
      "name": "setMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginBottom</code>.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginBottom"
          }
        ]
      }
    },
    "resetMarginBottom": {
      "type": "function",
      "name": "resetMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMarginLeft": {
      "type": "function",
      "name": "getMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginLeft</code>.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginLeft"
          }
        ]
      }
    },
    "setMarginLeft": {
      "type": "function",
      "name": "setMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginLeft</code>.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginLeft"
          }
        ]
      }
    },
    "resetMarginLeft": {
      "type": "function",
      "name": "resetMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getMargin": {
      "type": "function",
      "name": "getMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>margin</code>.\n\nFor further details take a look at the property definition: {@link #margin}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for margin"
          }
        ]
      }
    },
    "setMargin": {
      "type": "function",
      "name": "setMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>margin</code>.\n\nFor further details take a look at the property definition: {@link #margin}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for margin"
          }
        ]
      }
    },
    "resetMargin": {
      "type": "function",
      "name": "resetMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAlignX": {
      "type": "function",
      "name": "getAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alignX</code>.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for alignX"
          }
        ]
      }
    },
    "setAlignX": {
      "type": "function",
      "name": "setAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alignX</code>.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for alignX"
          }
        ]
      }
    },
    "resetAlignX": {
      "type": "function",
      "name": "resetAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAlignY": {
      "type": "function",
      "name": "getAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alignY</code>.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for alignY"
          }
        ]
      }
    },
    "setAlignY": {
      "type": "function",
      "name": "setAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alignY</code>.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for alignY"
          }
        ]
      }
    },
    "resetAlignY": {
      "type": "function",
      "name": "resetAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getPaddingTop": {
      "type": "function",
      "name": "getPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingTop</code>.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingTop"
          }
        ]
      }
    },
    "setPaddingTop": {
      "type": "function",
      "name": "setPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingTop</code>.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingTop"
          }
        ]
      }
    },
    "resetPaddingTop": {
      "type": "function",
      "name": "resetPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getPaddingRight": {
      "type": "function",
      "name": "getPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingRight</code>.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingRight"
          }
        ]
      }
    },
    "setPaddingRight": {
      "type": "function",
      "name": "setPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingRight</code>.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingRight"
          }
        ]
      }
    },
    "resetPaddingRight": {
      "type": "function",
      "name": "resetPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getPaddingBottom": {
      "type": "function",
      "name": "getPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingBottom</code>.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingBottom"
          }
        ]
      }
    },
    "setPaddingBottom": {
      "type": "function",
      "name": "setPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingBottom</code>.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingBottom"
          }
        ]
      }
    },
    "resetPaddingBottom": {
      "type": "function",
      "name": "resetPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getPaddingLeft": {
      "type": "function",
      "name": "getPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingLeft</code>.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingLeft"
          }
        ]
      }
    },
    "setPaddingLeft": {
      "type": "function",
      "name": "setPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingLeft</code>.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingLeft"
          }
        ]
      }
    },
    "resetPaddingLeft": {
      "type": "function",
      "name": "resetPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getPadding": {
      "type": "function",
      "name": "getPadding",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>padding</code>.\n\nFor further details take a look at the property definition: {@link #padding}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for padding"
          }
        ]
      }
    },
    "setPadding": {
      "type": "function",
      "name": "setPadding",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>padding</code>.\n\nFor further details take a look at the property definition: {@link #padding}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for padding"
          }
        ]
      }
    },
    "resetPadding": {
      "type": "function",
      "name": "resetPadding",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getZIndex": {
      "type": "function",
      "name": "getZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>zIndex</code>.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for zIndex"
          }
        ]
      }
    },
    "setZIndex": {
      "type": "function",
      "name": "setZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>zIndex</code>.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for zIndex"
          }
        ]
      }
    },
    "resetZIndex": {
      "type": "function",
      "name": "resetZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getDecorator": {
      "type": "function",
      "name": "getDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>decorator</code>.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Decorator",
            "desc": "Returns the value for decorator"
          }
        ]
      }
    },
    "setDecorator": {
      "type": "function",
      "name": "setDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>decorator</code>.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Decorator",
            "paramName": "value",
            "desc": "Value for decorator"
          }
        ]
      }
    },
    "resetDecorator": {
      "type": "function",
      "name": "resetDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getBackgroundColor": {
      "type": "function",
      "name": "getBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>backgroundColor</code>.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for backgroundColor"
          }
        ]
      }
    },
    "setBackgroundColor": {
      "type": "function",
      "name": "setBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>backgroundColor</code>.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for backgroundColor"
          }
        ]
      }
    },
    "resetBackgroundColor": {
      "type": "function",
      "name": "resetBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getTextColor": {
      "type": "function",
      "name": "getTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>textColor</code>.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for textColor"
          }
        ]
      }
    },
    "setTextColor": {
      "type": "function",
      "name": "setTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>textColor</code>.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for textColor"
          }
        ]
      }
    },
    "resetTextColor": {
      "type": "function",
      "name": "resetTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getFont": {
      "type": "function",
      "name": "getFont",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>font</code>.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Font",
            "desc": "Returns the value for font"
          }
        ]
      }
    },
    "setFont": {
      "type": "function",
      "name": "setFont",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>font</code>.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Font",
            "paramName": "value",
            "desc": "Value for font"
          }
        ]
      }
    },
    "resetFont": {
      "type": "function",
      "name": "resetFont",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getOpacity": {
      "type": "function",
      "name": "getOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>opacity</code>.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for opacity"
          }
        ]
      }
    },
    "setOpacity": {
      "type": "function",
      "name": "setOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>opacity</code>.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for opacity"
          }
        ]
      }
    },
    "resetOpacity": {
      "type": "function",
      "name": "resetOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getCursor": {
      "type": "function",
      "name": "getCursor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for cursor"
          }
        ]
      }
    },
    "setCursor": {
      "type": "function",
      "name": "setCursor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for cursor"
          }
        ]
      }
    },
    "resetCursor": {
      "type": "function",
      "name": "resetCursor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getToolTip": {
      "type": "function",
      "name": "getToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTip</code>.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.tooltip.ToolTip",
            "desc": "Returns the value for toolTip"
          }
        ]
      }
    },
    "setToolTip": {
      "type": "function",
      "name": "setToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTip</code>.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.tooltip.ToolTip",
            "paramName": "value",
            "desc": "Value for toolTip"
          }
        ]
      }
    },
    "resetToolTip": {
      "type": "function",
      "name": "resetToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getToolTipText": {
      "type": "function",
      "name": "getToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTipText</code>.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for toolTipText"
          }
        ]
      }
    },
    "setToolTipText": {
      "type": "function",
      "name": "setToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTipText</code>.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for toolTipText"
          }
        ]
      }
    },
    "resetToolTipText": {
      "type": "function",
      "name": "resetToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getToolTipIcon": {
      "type": "function",
      "name": "getToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTipIcon</code>.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for toolTipIcon"
          }
        ]
      }
    },
    "setToolTipIcon": {
      "type": "function",
      "name": "setToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTipIcon</code>.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for toolTipIcon"
          }
        ]
      }
    },
    "resetToolTipIcon": {
      "type": "function",
      "name": "resetToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getBlockToolTip": {
      "type": "function",
      "name": "getBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockToolTip"
          }
        ]
      }
    },
    "isBlockToolTip": {
      "type": "function",
      "name": "isBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockToolTip"
          }
        ]
      }
    },
    "setBlockToolTip": {
      "type": "function",
      "name": "setBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for blockToolTip"
          }
        ]
      }
    },
    "resetBlockToolTip": {
      "type": "function",
      "name": "resetBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getShowToolTipWhenDisabled": {
      "type": "function",
      "name": "getShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "isShowToolTipWhenDisabled": {
      "type": "function",
      "name": "isShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "setShowToolTipWhenDisabled": {
      "type": "function",
      "name": "setShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "resetShowToolTipWhenDisabled": {
      "type": "function",
      "name": "resetShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for visibility"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for visibility"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAnonymous": {
      "type": "function",
      "name": "getAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "isAnonymous": {
      "type": "function",
      "name": "isAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "setAnonymous": {
      "type": "function",
      "name": "setAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for anonymous"
          }
        ]
      }
    },
    "resetAnonymous": {
      "type": "function",
      "name": "resetAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getTabIndex": {
      "type": "function",
      "name": "getTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>tabIndex</code>.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for tabIndex"
          }
        ]
      }
    },
    "setTabIndex": {
      "type": "function",
      "name": "setTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>tabIndex</code>.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for tabIndex"
          }
        ]
      }
    },
    "resetTabIndex": {
      "type": "function",
      "name": "resetTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getFocusable": {
      "type": "function",
      "name": "getFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusable"
          }
        ]
      }
    },
    "isFocusable": {
      "type": "function",
      "name": "isFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusable"
          }
        ]
      }
    },
    "setFocusable": {
      "type": "function",
      "name": "setFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for focusable"
          }
        ]
      }
    },
    "resetFocusable": {
      "type": "function",
      "name": "resetFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getKeepFocus": {
      "type": "function",
      "name": "getKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFocus"
          }
        ]
      }
    },
    "isKeepFocus": {
      "type": "function",
      "name": "isKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFocus"
          }
        ]
      }
    },
    "setKeepFocus": {
      "type": "function",
      "name": "setKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepFocus"
          }
        ]
      }
    },
    "resetKeepFocus": {
      "type": "function",
      "name": "resetKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getKeepActive": {
      "type": "function",
      "name": "getKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepActive"
          }
        ]
      }
    },
    "isKeepActive": {
      "type": "function",
      "name": "isKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepActive"
          }
        ]
      }
    },
    "setKeepActive": {
      "type": "function",
      "name": "setKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepActive"
          }
        ]
      }
    },
    "resetKeepActive": {
      "type": "function",
      "name": "resetKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getDraggable": {
      "type": "function",
      "name": "getDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for draggable"
          }
        ]
      }
    },
    "isDraggable": {
      "type": "function",
      "name": "isDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for draggable"
          }
        ]
      }
    },
    "setDraggable": {
      "type": "function",
      "name": "setDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for draggable"
          }
        ]
      }
    },
    "resetDraggable": {
      "type": "function",
      "name": "resetDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getDroppable": {
      "type": "function",
      "name": "getDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for droppable"
          }
        ]
      }
    },
    "isDroppable": {
      "type": "function",
      "name": "isDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for droppable"
          }
        ]
      }
    },
    "setDroppable": {
      "type": "function",
      "name": "setDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for droppable"
          }
        ]
      }
    },
    "resetDroppable": {
      "type": "function",
      "name": "resetDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getSelectable": {
      "type": "function",
      "name": "getSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectable"
          }
        ]
      }
    },
    "isSelectable": {
      "type": "function",
      "name": "isSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectable"
          }
        ]
      }
    },
    "setSelectable": {
      "type": "function",
      "name": "setSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for selectable"
          }
        ]
      }
    },
    "resetSelectable": {
      "type": "function",
      "name": "resetSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getContextMenu": {
      "type": "function",
      "name": "getContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenu</code>.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.menu.Menu",
            "desc": "Returns the value for contextMenu"
          }
        ]
      }
    },
    "setContextMenu": {
      "type": "function",
      "name": "setContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>contextMenu</code>.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.menu.Menu",
            "paramName": "value",
            "desc": "Value for contextMenu"
          }
        ]
      }
    },
    "resetContextMenu": {
      "type": "function",
      "name": "resetContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getNativeContextMenu": {
      "type": "function",
      "name": "getNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for nativeContextMenu"
          }
        ]
      }
    },
    "isNativeContextMenu": {
      "type": "function",
      "name": "isNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for nativeContextMenu"
          }
        ]
      }
    },
    "setNativeContextMenu": {
      "type": "function",
      "name": "setNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for nativeContextMenu"
          }
        ]
      }
    },
    "resetNativeContextMenu": {
      "type": "function",
      "name": "resetNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getAppearance": {
      "type": "function",
      "name": "getAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>appearance</code>.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for appearance"
          }
        ]
      }
    },
    "setAppearance": {
      "type": "function",
      "name": "setAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>appearance</code>.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for appearance"
          }
        ]
      }
    },
    "resetAppearance": {
      "type": "function",
      "name": "resetAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset"
    },
    "getInitiallyHiddenColumns": {
      "type": "function",
      "name": "getInitiallyHiddenColumns",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>initiallyHiddenColumns</code>.\n\nFor further details take a look at the property definition: {@link #initiallyHiddenColumns}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for initiallyHiddenColumns"
          }
        ]
      }
    },
    "setInitiallyHiddenColumns": {
      "type": "function",
      "name": "setInitiallyHiddenColumns",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>initiallyHiddenColumns</code>.\n\nFor further details take a look at the property definition: {@link #initiallyHiddenColumns}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for initiallyHiddenColumns"
          }
        ]
      }
    },
    "resetInitiallyHiddenColumns": {
      "type": "function",
      "name": "resetInitiallyHiddenColumns",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>initiallyHiddenColumns</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #initiallyHiddenColumns}."
          }
        ]
      }
    },
    "getSelectionModel": {
      "type": "function",
      "name": "getSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectionModel</code>.\n\nFor further details take a look at the property definition: {@link #selectionModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.selection.Model",
            "desc": "Returns the value for selectionModel"
          }
        ]
      }
    },
    "setSelectionModel": {
      "type": "function",
      "name": "setSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectionModel</code>.\n\nFor further details take a look at the property definition: {@link #selectionModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.selection.Model",
            "paramName": "value",
            "desc": "Value for selectionModel"
          }
        ]
      }
    },
    "resetSelectionModel": {
      "type": "function",
      "name": "resetSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selectionModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selectionModel}."
          }
        ]
      }
    },
    "getTableModel": {
      "type": "function",
      "name": "getTableModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>tableModel</code>.\n\nFor further details take a look at the property definition: {@link #tableModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.ITableModel",
            "desc": "Returns the value for tableModel"
          }
        ]
      }
    },
    "setTableModel": {
      "type": "function",
      "name": "setTableModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>tableModel</code>.\n\nFor further details take a look at the property definition: {@link #tableModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.ITableModel",
            "paramName": "value",
            "desc": "Value for tableModel"
          }
        ]
      }
    },
    "resetTableModel": {
      "type": "function",
      "name": "resetTableModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>tableModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #tableModel}."
          }
        ]
      }
    },
    "getRowHeight": {
      "type": "function",
      "name": "getRowHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>rowHeight</code>.\n\nFor further details take a look at the property definition: {@link #rowHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for rowHeight"
          }
        ]
      }
    },
    "setRowHeight": {
      "type": "function",
      "name": "setRowHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>rowHeight</code>.\n\nFor further details take a look at the property definition: {@link #rowHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for rowHeight"
          }
        ]
      }
    },
    "resetRowHeight": {
      "type": "function",
      "name": "resetRowHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>rowHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #rowHeight}."
          }
        ]
      }
    },
    "getForceLineHeight": {
      "type": "function",
      "name": "getForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>forceLineHeight</code>.\n\nFor further details take a look at the property definition: {@link #forceLineHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for forceLineHeight"
          }
        ]
      }
    },
    "isForceLineHeight": {
      "type": "function",
      "name": "isForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>forceLineHeight</code>.\n\nFor further details take a look at the property definition: {@link #forceLineHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for forceLineHeight"
          }
        ]
      }
    },
    "setForceLineHeight": {
      "type": "function",
      "name": "setForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>forceLineHeight</code>.\n\nFor further details take a look at the property definition: {@link #forceLineHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for forceLineHeight"
          }
        ]
      }
    },
    "resetForceLineHeight": {
      "type": "function",
      "name": "resetForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>forceLineHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #forceLineHeight}."
          }
        ]
      }
    },
    "getHeaderCellsVisible": {
      "type": "function",
      "name": "getHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>headerCellsVisible</code>.\n\nFor further details take a look at the property definition: {@link #headerCellsVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for headerCellsVisible"
          }
        ]
      }
    },
    "isHeaderCellsVisible": {
      "type": "function",
      "name": "isHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>headerCellsVisible</code>.\n\nFor further details take a look at the property definition: {@link #headerCellsVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for headerCellsVisible"
          }
        ]
      }
    },
    "setHeaderCellsVisible": {
      "type": "function",
      "name": "setHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>headerCellsVisible</code>.\n\nFor further details take a look at the property definition: {@link #headerCellsVisible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for headerCellsVisible"
          }
        ]
      }
    },
    "resetHeaderCellsVisible": {
      "type": "function",
      "name": "resetHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>headerCellsVisible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #headerCellsVisible}."
          }
        ]
      }
    },
    "getHeaderCellHeight": {
      "type": "function",
      "name": "getHeaderCellHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>headerCellHeight</code>.\n\nFor further details take a look at the property definition: {@link #headerCellHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for headerCellHeight"
          }
        ]
      }
    },
    "setHeaderCellHeight": {
      "type": "function",
      "name": "setHeaderCellHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>headerCellHeight</code>.\n\nFor further details take a look at the property definition: {@link #headerCellHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for headerCellHeight"
          }
        ]
      }
    },
    "resetHeaderCellHeight": {
      "type": "function",
      "name": "resetHeaderCellHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>headerCellHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #headerCellHeight}."
          }
        ]
      }
    },
    "getStatusBarVisible": {
      "type": "function",
      "name": "getStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>statusBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #statusBarVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for statusBarVisible"
          }
        ]
      }
    },
    "isStatusBarVisible": {
      "type": "function",
      "name": "isStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>statusBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #statusBarVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for statusBarVisible"
          }
        ]
      }
    },
    "setStatusBarVisible": {
      "type": "function",
      "name": "setStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>statusBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #statusBarVisible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for statusBarVisible"
          }
        ]
      }
    },
    "resetStatusBarVisible": {
      "type": "function",
      "name": "resetStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>statusBarVisible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #statusBarVisible}."
          }
        ]
      }
    },
    "getAdditionalStatusBarText": {
      "type": "function",
      "name": "getAdditionalStatusBarText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>additionalStatusBarText</code>.\n\nFor further details take a look at the property definition: {@link #additionalStatusBarText}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for additionalStatusBarText"
          }
        ]
      }
    },
    "setAdditionalStatusBarText": {
      "type": "function",
      "name": "setAdditionalStatusBarText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>additionalStatusBarText</code>.\n\nFor further details take a look at the property definition: {@link #additionalStatusBarText}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for additionalStatusBarText"
          }
        ]
      }
    },
    "resetAdditionalStatusBarText": {
      "type": "function",
      "name": "resetAdditionalStatusBarText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>additionalStatusBarText</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #additionalStatusBarText}."
          }
        ]
      }
    },
    "getColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "getColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>columnVisibilityButtonVisible</code>.\n\nFor further details take a look at the property definition: {@link #columnVisibilityButtonVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for columnVisibilityButtonVisible"
          }
        ]
      }
    },
    "isColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "isColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>columnVisibilityButtonVisible</code>.\n\nFor further details take a look at the property definition: {@link #columnVisibilityButtonVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for columnVisibilityButtonVisible"
          }
        ]
      }
    },
    "setColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "setColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>columnVisibilityButtonVisible</code>.\n\nFor further details take a look at the property definition: {@link #columnVisibilityButtonVisible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for columnVisibilityButtonVisible"
          }
        ]
      }
    },
    "resetColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "resetColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>columnVisibilityButtonVisible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #columnVisibilityButtonVisible}."
          }
        ]
      }
    },
    "getMetaColumnCounts": {
      "type": "function",
      "name": "getMetaColumnCounts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>metaColumnCounts</code>.\n\nFor further details take a look at the property definition: {@link #metaColumnCounts}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for metaColumnCounts"
          }
        ]
      }
    },
    "setMetaColumnCounts": {
      "type": "function",
      "name": "setMetaColumnCounts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>metaColumnCounts</code>.\n\nFor further details take a look at the property definition: {@link #metaColumnCounts}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for metaColumnCounts"
          }
        ]
      }
    },
    "resetMetaColumnCounts": {
      "type": "function",
      "name": "resetMetaColumnCounts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>metaColumnCounts</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #metaColumnCounts}."
          }
        ]
      }
    },
    "getFocusCellOnPointerMove": {
      "type": "function",
      "name": "getFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusCellOnPointerMove</code>.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusCellOnPointerMove"
          }
        ]
      }
    },
    "isFocusCellOnPointerMove": {
      "type": "function",
      "name": "isFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusCellOnPointerMove</code>.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusCellOnPointerMove"
          }
        ]
      }
    },
    "setFocusCellOnPointerMove": {
      "type": "function",
      "name": "setFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focusCellOnPointerMove</code>.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for focusCellOnPointerMove"
          }
        ]
      }
    },
    "resetFocusCellOnPointerMove": {
      "type": "function",
      "name": "resetFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>focusCellOnPointerMove</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ]
      }
    },
    "getRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "getRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>rowFocusChangeModifiesSelection</code>.\n\nFor further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for rowFocusChangeModifiesSelection"
          }
        ]
      }
    },
    "isRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "isRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>rowFocusChangeModifiesSelection</code>.\n\nFor further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for rowFocusChangeModifiesSelection"
          }
        ]
      }
    },
    "setRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "setRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>rowFocusChangeModifiesSelection</code>.\n\nFor further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for rowFocusChangeModifiesSelection"
          }
        ]
      }
    },
    "resetRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "resetRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>rowFocusChangeModifiesSelection</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #rowFocusChangeModifiesSelection}."
          }
        ]
      }
    },
    "getShowCellFocusIndicator": {
      "type": "function",
      "name": "getShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showCellFocusIndicator</code>.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showCellFocusIndicator"
          }
        ]
      }
    },
    "isShowCellFocusIndicator": {
      "type": "function",
      "name": "isShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showCellFocusIndicator</code>.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showCellFocusIndicator"
          }
        ]
      }
    },
    "setShowCellFocusIndicator": {
      "type": "function",
      "name": "setShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>showCellFocusIndicator</code>.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for showCellFocusIndicator"
          }
        ]
      }
    },
    "resetShowCellFocusIndicator": {
      "type": "function",
      "name": "resetShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>showCellFocusIndicator</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ]
      }
    },
    "getContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "getContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for contextMenuFromDataCellsOnly"
          }
        ]
      }
    },
    "isContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "isContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for contextMenuFromDataCellsOnly"
          }
        ]
      }
    },
    "setContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "setContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for contextMenuFromDataCellsOnly"
          }
        ]
      }
    },
    "resetContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "resetContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ]
      }
    },
    "getKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "getKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFirstVisibleRowComplete</code>.\n\nFor further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFirstVisibleRowComplete"
          }
        ]
      }
    },
    "isKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "isKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFirstVisibleRowComplete</code>.\n\nFor further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFirstVisibleRowComplete"
          }
        ]
      }
    },
    "setKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "setKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepFirstVisibleRowComplete</code>.\n\nFor further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepFirstVisibleRowComplete"
          }
        ]
      }
    },
    "resetKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "resetKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>keepFirstVisibleRowComplete</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #keepFirstVisibleRowComplete}."
          }
        ]
      }
    },
    "getAlwaysUpdateCells": {
      "type": "function",
      "name": "getAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alwaysUpdateCells</code>.\n\nFor further details take a look at the property definition: {@link #alwaysUpdateCells}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for alwaysUpdateCells"
          }
        ]
      }
    },
    "isAlwaysUpdateCells": {
      "type": "function",
      "name": "isAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alwaysUpdateCells</code>.\n\nFor further details take a look at the property definition: {@link #alwaysUpdateCells}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for alwaysUpdateCells"
          }
        ]
      }
    },
    "setAlwaysUpdateCells": {
      "type": "function",
      "name": "setAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alwaysUpdateCells</code>.\n\nFor further details take a look at the property definition: {@link #alwaysUpdateCells}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for alwaysUpdateCells"
          }
        ]
      }
    },
    "resetAlwaysUpdateCells": {
      "type": "function",
      "name": "resetAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>alwaysUpdateCells</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #alwaysUpdateCells}."
          }
        ]
      }
    },
    "getResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "getResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>resetSelectionOnHeaderTap</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for resetSelectionOnHeaderTap"
          }
        ]
      }
    },
    "isResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "isResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>resetSelectionOnHeaderTap</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for resetSelectionOnHeaderTap"
          }
        ]
      }
    },
    "setResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "setResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>resetSelectionOnHeaderTap</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for resetSelectionOnHeaderTap"
          }
        ]
      }
    },
    "resetResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "resetResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>resetSelectionOnHeaderTap</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ]
      }
    },
    "getDataRowRenderer": {
      "type": "function",
      "name": "getDataRowRenderer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>dataRowRenderer</code>.\n\nFor further details take a look at the property definition: {@link #dataRowRenderer}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.IRowRenderer",
            "desc": "Returns the value for dataRowRenderer"
          }
        ]
      }
    },
    "setDataRowRenderer": {
      "type": "function",
      "name": "setDataRowRenderer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>dataRowRenderer</code>.\n\nFor further details take a look at the property definition: {@link #dataRowRenderer}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.IRowRenderer",
            "paramName": "value",
            "desc": "Value for dataRowRenderer"
          }
        ]
      }
    },
    "resetDataRowRenderer": {
      "type": "function",
      "name": "resetDataRowRenderer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>dataRowRenderer</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #dataRowRenderer}."
          }
        ]
      }
    },
    "getModalCellEditorPreOpenFunction": {
      "type": "function",
      "name": "getModalCellEditorPreOpenFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>modalCellEditorPreOpenFunction</code>.\n\nFor further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for modalCellEditorPreOpenFunction"
          }
        ]
      }
    },
    "setModalCellEditorPreOpenFunction": {
      "type": "function",
      "name": "setModalCellEditorPreOpenFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>modalCellEditorPreOpenFunction</code>.\n\nFor further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for modalCellEditorPreOpenFunction"
          }
        ]
      }
    },
    "resetModalCellEditorPreOpenFunction": {
      "type": "function",
      "name": "resetModalCellEditorPreOpenFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>modalCellEditorPreOpenFunction</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #modalCellEditorPreOpenFunction}."
          }
        ]
      }
    },
    "getExcludeScrollerScrollbarsIfNotNeeded": {
      "type": "function",
      "name": "getExcludeScrollerScrollbarsIfNotNeeded",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>excludeScrollerScrollbarsIfNotNeeded</code>.\n\nFor further details take a look at the property definition: {@link #excludeScrollerScrollbarsIfNotNeeded}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for excludeScrollerScrollbarsIfNotNeeded"
          }
        ]
      }
    },
    "isExcludeScrollerScrollbarsIfNotNeeded": {
      "type": "function",
      "name": "isExcludeScrollerScrollbarsIfNotNeeded",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>excludeScrollerScrollbarsIfNotNeeded</code>.\n\nFor further details take a look at the property definition: {@link #excludeScrollerScrollbarsIfNotNeeded}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for excludeScrollerScrollbarsIfNotNeeded"
          }
        ]
      }
    },
    "setExcludeScrollerScrollbarsIfNotNeeded": {
      "type": "function",
      "name": "setExcludeScrollerScrollbarsIfNotNeeded",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>excludeScrollerScrollbarsIfNotNeeded</code>.\n\nFor further details take a look at the property definition: {@link #excludeScrollerScrollbarsIfNotNeeded}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for excludeScrollerScrollbarsIfNotNeeded"
          }
        ]
      }
    },
    "resetExcludeScrollerScrollbarsIfNotNeeded": {
      "type": "function",
      "name": "resetExcludeScrollerScrollbarsIfNotNeeded",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>excludeScrollerScrollbarsIfNotNeeded</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #excludeScrollerScrollbarsIfNotNeeded}."
          }
        ]
      }
    },
    "getNewColumnMenu": {
      "type": "function",
      "name": "getNewColumnMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newColumnMenu</code>.\n\nFor further details take a look at the property definition: {@link #newColumnMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newColumnMenu"
          }
        ]
      }
    },
    "setNewColumnMenu": {
      "type": "function",
      "name": "setNewColumnMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newColumnMenu</code>.\n\nFor further details take a look at the property definition: {@link #newColumnMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newColumnMenu"
          }
        ]
      }
    },
    "resetNewColumnMenu": {
      "type": "function",
      "name": "resetNewColumnMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newColumnMenu</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newColumnMenu}."
          }
        ]
      }
    },
    "getNewSelectionManager": {
      "type": "function",
      "name": "getNewSelectionManager",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newSelectionManager</code>.\n\nFor further details take a look at the property definition: {@link #newSelectionManager}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newSelectionManager"
          }
        ]
      }
    },
    "setNewSelectionManager": {
      "type": "function",
      "name": "setNewSelectionManager",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newSelectionManager</code>.\n\nFor further details take a look at the property definition: {@link #newSelectionManager}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newSelectionManager"
          }
        ]
      }
    },
    "resetNewSelectionManager": {
      "type": "function",
      "name": "resetNewSelectionManager",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newSelectionManager</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newSelectionManager}."
          }
        ]
      }
    },
    "getNewSelectionModel": {
      "type": "function",
      "name": "getNewSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newSelectionModel</code>.\n\nFor further details take a look at the property definition: {@link #newSelectionModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newSelectionModel"
          }
        ]
      }
    },
    "setNewSelectionModel": {
      "type": "function",
      "name": "setNewSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newSelectionModel</code>.\n\nFor further details take a look at the property definition: {@link #newSelectionModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newSelectionModel"
          }
        ]
      }
    },
    "resetNewSelectionModel": {
      "type": "function",
      "name": "resetNewSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newSelectionModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newSelectionModel}."
          }
        ]
      }
    },
    "getNewTableColumnModel": {
      "type": "function",
      "name": "getNewTableColumnModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newTableColumnModel</code>.\n\nFor further details take a look at the property definition: {@link #newTableColumnModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newTableColumnModel"
          }
        ]
      }
    },
    "setNewTableColumnModel": {
      "type": "function",
      "name": "setNewTableColumnModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newTableColumnModel</code>.\n\nFor further details take a look at the property definition: {@link #newTableColumnModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newTableColumnModel"
          }
        ]
      }
    },
    "resetNewTableColumnModel": {
      "type": "function",
      "name": "resetNewTableColumnModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newTableColumnModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newTableColumnModel}."
          }
        ]
      }
    },
    "getNewTablePane": {
      "type": "function",
      "name": "getNewTablePane",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newTablePane</code>.\n\nFor further details take a look at the property definition: {@link #newTablePane}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newTablePane"
          }
        ]
      }
    },
    "setNewTablePane": {
      "type": "function",
      "name": "setNewTablePane",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newTablePane</code>.\n\nFor further details take a look at the property definition: {@link #newTablePane}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newTablePane"
          }
        ]
      }
    },
    "resetNewTablePane": {
      "type": "function",
      "name": "resetNewTablePane",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newTablePane</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newTablePane}."
          }
        ]
      }
    },
    "getNewTablePaneHeader": {
      "type": "function",
      "name": "getNewTablePaneHeader",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newTablePaneHeader</code>.\n\nFor further details take a look at the property definition: {@link #newTablePaneHeader}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newTablePaneHeader"
          }
        ]
      }
    },
    "setNewTablePaneHeader": {
      "type": "function",
      "name": "setNewTablePaneHeader",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newTablePaneHeader</code>.\n\nFor further details take a look at the property definition: {@link #newTablePaneHeader}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newTablePaneHeader"
          }
        ]
      }
    },
    "resetNewTablePaneHeader": {
      "type": "function",
      "name": "resetNewTablePaneHeader",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newTablePaneHeader</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newTablePaneHeader}."
          }
        ]
      }
    },
    "getNewTablePaneScroller": {
      "type": "function",
      "name": "getNewTablePaneScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newTablePaneScroller</code>.\n\nFor further details take a look at the property definition: {@link #newTablePaneScroller}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newTablePaneScroller"
          }
        ]
      }
    },
    "setNewTablePaneScroller": {
      "type": "function",
      "name": "setNewTablePaneScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newTablePaneScroller</code>.\n\nFor further details take a look at the property definition: {@link #newTablePaneScroller}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newTablePaneScroller"
          }
        ]
      }
    },
    "resetNewTablePaneScroller": {
      "type": "function",
      "name": "resetNewTablePaneScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newTablePaneScroller</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newTablePaneScroller}."
          }
        ]
      }
    },
    "getNewTablePaneModel": {
      "type": "function",
      "name": "getNewTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>newTablePaneModel</code>.\n\nFor further details take a look at the property definition: {@link #newTablePaneModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for newTablePaneModel"
          }
        ]
      }
    },
    "setNewTablePaneModel": {
      "type": "function",
      "name": "setNewTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>newTablePaneModel</code>.\n\nFor further details take a look at the property definition: {@link #newTablePaneModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for newTablePaneModel"
          }
        ]
      }
    },
    "resetNewTablePaneModel": {
      "type": "function",
      "name": "resetNewTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>newTablePaneModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #newTablePaneModel}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 2296,
        "column": 13
      },
      "end": {
        "line": 2322,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.treevirtual.TreeVirtual"
  ]
}