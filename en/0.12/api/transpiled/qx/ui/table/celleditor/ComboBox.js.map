{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/celleditor/ComboBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "properties",
    "validationFunction",
    "check",
    "nullable",
    "init",
    "listData",
    "members",
    "createCellEditor",
    "cellInfo",
    "cellEditor",
    "form",
    "ComboBox",
    "set",
    "appearance",
    "value",
    "originalValue",
    "cellRenderer",
    "getTableColumnModel",
    "getDataCellRenderer",
    "col",
    "label",
    "_getContentHtml",
    "undefined",
    "list",
    "getListData",
    "item",
    "i",
    "l",
    "length",
    "row",
    "Array",
    "ListItem",
    "add",
    "setValue",
    "addListener",
    "selectAllText",
    "getCellEditorValue",
    "getValue",
    "validationFunc",
    "getValidationFunction",
    "parseFloat",
    "celleditor"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A cell editor factory creating combo boxes.\n */\nqx.Class.define(\"qx.ui.table.celleditor.ComboBox\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.table.ICellEditorFactory,\n\n\n  properties :\n  {\n    /**\n     * function that validates the result\n     * the function will be called with the new value and the old value and is\n     * supposed to return the value that is set as the table value.\n     **/\n    validationFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /** array of data to construct ListItem widgets with */\n    listData :\n    {\n      check : \"Array\",\n      init : null,\n      nullable : true\n    }\n\n  },\n\n\n  members :\n  {\n    // interface implementation\n    createCellEditor : function(cellInfo)\n    {\n      var cellEditor = new qx.ui.form.ComboBox().set({\n        appearance: \"table-editor-combobox\"\n      });\n\n      var value = cellInfo.value;\n      cellEditor.originalValue = value;\n\n      // check if renderer does something with value\n      var cellRenderer = cellInfo.table.getTableColumnModel().getDataCellRenderer(cellInfo.col);\n      var label = cellRenderer._getContentHtml(cellInfo);\n      if ( value != label ) {\n        value = label;\n      }\n\n      // replace null values\n      if (value === null || value === undefined) {\n        value = \"\";\n      }\n\n      var list = this.getListData();\n      if (list)\n      {\n        var item;\n\n        for (var i=0,l=list.length; i<l; i++)\n        {\n          var row = list[i];\n          if ( row instanceof Array ) {\n            item = new qx.ui.form.ListItem(row[0], row[1]);\n          } else {\n            item = new qx.ui.form.ListItem(row, null);\n          }\n          cellEditor.add(item);\n        };\n      }\n\n      cellEditor.setValue(\"\" + value);\n\n      cellEditor.addListener(\"appear\", function() {\n        cellEditor.selectAllText();\n      });\n\n      return cellEditor;\n    },\n\n    // interface implementations\n    getCellEditorValue : function(cellEditor)\n    {\n      var value = cellEditor.getValue() || \"\";\n\n      // validation function will be called with new and old value\n      var validationFunc = this.getValidationFunction();\n      if (validationFunc) {\n         value = validationFunc( value, cellEditor.originalValue );\n      }\n\n      if (typeof cellEditor.originalValue == \"number\") {\n        value = parseFloat(value);\n      }\n\n      return value;\n    }\n  }\n});\n"
  ]
}