{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Remote.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "construct",
    "_sortColumnIndex",
    "_sortAscending",
    "_rowCount",
    "_lruCounter",
    "_firstLoadingBlock",
    "_firstRowToLoad",
    "_lastRowToLoad",
    "_ignoreCurrentRequest",
    "_rowBlockCache",
    "_rowBlockCount",
    "_sortableColArr",
    "_editableColArr",
    "properties",
    "blockSize",
    "check",
    "init",
    "maxCachedBlockCount",
    "clearCacheOnRemove",
    "blockConcurrentLoadRowCount",
    "members",
    "_loadRowCountRequestRunning",
    "_clearCache",
    "_getIgnoreCurrentRequest",
    "getRowCount",
    "getBlockConcurrentLoadRowCount",
    "_loadRowCount",
    "Error",
    "_onRowCountLoaded",
    "rowCount",
    "Number",
    "data",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "getColumnCount",
    "fireDataEvent",
    "reloadData",
    "cancelingSucceed",
    "_cancelCurrentRequest",
    "clearCache",
    "getCacheContent",
    "sortColumnIndex",
    "sortAscending",
    "lruCounter",
    "rowBlockCache",
    "rowBlockCount",
    "restoreCacheContent",
    "cacheContent",
    "iterateCachedRows",
    "iterator",
    "object",
    "getBlockSize",
    "blockCount",
    "Math",
    "ceil",
    "block",
    "blockData",
    "rowOffset",
    "rowDataArr",
    "relRow",
    "length",
    "rowData",
    "newRowData",
    "call",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "totalBlockCount",
    "firstBlock",
    "parseInt",
    "lastBlock",
    "firstBlockToLoad",
    "lastBlockToLoad",
    "isDirty",
    "_loadRowData",
    "_onRowDataLoaded",
    "_setRowBlockData",
    "i",
    "blockRowData",
    "mailCount",
    "min",
    "row",
    "push",
    "getMaxCachedBlockCount",
    "lruBlock",
    "minLru",
    "currBlock",
    "currLru",
    "lru",
    "removeRow",
    "rowIndex",
    "getClearCacheOnRemove",
    "startBlock",
    "removeIndex",
    "splice",
    "nextBlockData",
    "hasListener",
    "getRowData",
    "getValue",
    "columnIndex",
    "columnId",
    "getColumnId",
    "setValue",
    "value",
    "setEditable",
    "editable",
    "col",
    "fireEvent",
    "setColumnEditable",
    "isColumnEditable",
    "setColumnSortable",
    "sortable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "setSortColumnIndexWithoutSortingData",
    "setSortAscendingWithoutSortingData",
    "destruct",
    "Remote"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A table model that loads its data from a backend.\n * <p>\n * Only a subset of the available rows, those which are within or near the\n * currently visible area, are loaded. If a quick scroll operation occurs,\n * rows will soon be displayed using asynchronous loading in the background.\n * All loaded data is managed through a cache which automatically removes\n * the oldest used rows when it gets full.\n * <p>\n * This class is abstract: The actual loading of row data must be done by\n * subclasses.\n */\nqx.Class.define(\"qx.ui.table.model.Remote\",\n{\n  type : \"abstract\",\n  extend : qx.ui.table.model.Abstract,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this._sortColumnIndex = -1;\n    this._sortAscending = true;\n    this._rowCount = -1;\n\n    this._lruCounter = 0;\n\n    // Holds the index of the first block that is currently loading.\n    // Is -1 if there is currently no request on its way.\n    this._firstLoadingBlock = -1;\n\n    // Holds the index of the first row that should be loaded when the response of\n    // the current request arrives. Is -1 we need no following request.\n    this._firstRowToLoad = -1;\n\n    // Counterpart to _firstRowToLoad\n    this._lastRowToLoad = -1;\n\n    // Holds whether the current request will bring obsolete data. When true the\n    // response of the current request will be ignored.\n    this._ignoreCurrentRequest = false;\n\n    this._rowBlockCache = {};\n    this._rowBlockCount = 0;\n\n    this._sortableColArr = null;\n    this._editableColArr = null;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /** The number of rows that are stored in one cache block. */\n    blockSize :\n    {\n      check : \"Integer\",\n      init : 50\n    },\n\n    /** The maximum number of row blocks kept in the cache. */\n    maxCachedBlockCount :\n    {\n      check : \"Integer\",\n      init : 15\n    },\n\n\n    /**\n     * Whether to clear the cache when some rows are removed.\n     * If true the rows are removed locally in the cache.\n     */\n    clearCacheOnRemove :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n    /**\n     * Whether to block remote requests for the row count while a request for\n     * the row count is pending. Row counts are requested at various times and\n     * from various parts of the code, resulting in numerous requests to the\n     * user-provided _loadRowCount() method, often while other requests are\n     * already pending. The default behavior now ignores requests to load a\n     * new row count if such a request is already pending. It is therefore now\n     * conceivable that the row count changes between an initial request for\n     * the row count and a later (ignored) request. Since the chance of this\n     * is low, the desirability of reducing the server requests outweighs the\n     * slight possibility of an altered count (which will, by the way, be\n     * detected soon thereafter upon the next request for the row count). If\n     * the old behavior is desired, set this property to false.\n     */\n    blockConcurrentLoadRowCount:\n    {\n      check : \"Boolean\",\n      init  : true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    _rowCount : null,\n    _ignoreCurrentRequest : null,\n\n    _lruCounter : null,\n    _firstLoadingBlock : null,\n    _firstRowToLoad : null,\n    _lastRowToLoad : null,\n    _rowBlockCache : null,\n    _rowBlockCount : null,\n\n    _sortColumnIndex : null,\n    _sortAscending : null,\n\n    _editableColArr : null,\n    _sortableColArr : null,\n\n    _loadRowCountRequestRunning : false,\n\n    _clearCache : false,\n\n\n    /**\n     * Returns whether the current request is ignored by the model.\n     *\n     * @return {Boolean} true when the current request is ignored by the model.\n     */\n    _getIgnoreCurrentRequest : function()\n    {\n      return this._ignoreCurrentRequest;\n    },\n\n\n    // overridden\n    getRowCount : function()\n    {\n      if (this._rowCount == -1)\n      {\n        if (! this._loadRowCountRequestRunning ||\n            ! this.getBlockConcurrentLoadRowCount())\n        {\n          this._loadRowCountRequestRunning = true;\n          this._loadRowCount();\n        }\n\n        // NOTE: _loadRowCount may set this._rowCount\n        return (this._rowCount == -1) ? 0 : this._rowCount;\n      }\n      else\n      {\n        return this._rowCount;\n      }\n    },\n\n\n    /**\n     * Implementing classes have to call {@link #_onRowCountLoaded} when the\n     * server response arrived. That method has to be called! Even when there\n     * was an error.\n     *\n     * @abstract\n     * @throws {Error} the abstract function warning.\n     */\n    _loadRowCount : function() {\n      throw new Error(\"_loadRowCount is abstract\");\n    },\n\n\n    /**\n     * Sets the row count.\n     *\n     * Has to be called by {@link #_loadRowCount}.\n     *\n     * @param rowCount {Integer} the number of rows in this model or null if loading.\n     */\n    _onRowCountLoaded : function(rowCount)\n    {\n      if (this.getBlockConcurrentLoadRowCount())\n      {\n        // There's no longer a loadRowCount() in progress\n        this._loadRowCountRequestRunning = false;\n      }\n\n      // this.debug(\"row count loaded: \" + rowCount);\n      if (rowCount == null || rowCount < 0) {\n        rowCount = 0;\n      }\n\n      this._rowCount = Number(rowCount);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : 0,\n        lastRow     : rowCount - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n    },\n\n\n    /**\n     * Reloads the model and clears the local cache.\n     *\n     */\n    reloadData : function()\n    {\n      // If there is currently a request on its way, then this request will bring\n      // obsolete data -> Ignore it\n      if (this._firstLoadingBlock != -1) {\n        var cancelingSucceed = this._cancelCurrentRequest();\n        if (cancelingSucceed) {\n          // The request was canceled -> We're not loading any blocks any more\n          this._firstLoadingBlock = -1;\n          this._ignoreCurrentRequest = false;\n        } else {\n          // The request was not canceled -> Ignore it\n          this._ignoreCurrentRequest = true;\n        }\n      }\n\n      // Force clearing row cache, because of reloading data.\n      this._clearCache = true;\n\n      // Forget a possibly outstanding request\n      // (_loadRowCount will tell the listeners anyway, that the whole table\n      // changed)\n      //\n      // NOTE: This will inform the listeners as soon as the new row count is\n      // known\n      this._firstRowToLoad = -1;\n      this._lastRowToLoad = -1;\n      this._loadRowCountRequestRunning = true;\n      this._loadRowCount();\n    },\n\n\n    /**\n     * Clears the cache.\n     *\n     */\n    clearCache : function()\n    {\n      this._rowBlockCache = {};\n      this._rowBlockCount = 0;\n    },\n\n\n    /**\n     * Returns the current state of the cache.\n     * <p>\n     * Do not change anything in the returned data. This breaks the model state.\n     * Use this method only together with {@link #restoreCacheContent} for backing\n     * up state for a later restore.\n     *\n     * @return {Map} the current cache state.\n     */\n    getCacheContent : function() {\n      return {\n        sortColumnIndex : this._sortColumnIndex,\n        sortAscending   : this._sortAscending,\n        rowCount        : this._rowCount,\n        lruCounter      : this._lruCounter,\n        rowBlockCache   : this._rowBlockCache,\n        rowBlockCount   : this._rowBlockCount\n      };\n    },\n\n\n    /**\n     * Restores a cache state created by {@link #getCacheContent}.\n     *\n     * @param cacheContent {Map} An old cache state.\n     */\n    restoreCacheContent : function(cacheContent)\n    {\n      // If there is currently a request on its way, then this request will bring\n      // obsolete data -> Ignore it\n      if (this._firstLoadingBlock != -1)\n      {\n        // Try to cancel the current request\n        var cancelingSucceed = this._cancelCurrentRequest();\n\n        if (cancelingSucceed)\n        {\n          // The request was canceled -> We're not loading any blocks any more\n          this._firstLoadingBlock = -1;\n          this._ignoreCurrentRequest = false;\n        }\n        else\n        {\n          // The request was not canceled -> Ignore it\n          this._ignoreCurrentRequest = true;\n        }\n      }\n\n      // Restore the cache content\n      this._sortColumnIndex = cacheContent.sortColumnIndex;\n      this._sortAscending = cacheContent.sortAscending;\n      this._rowCount = cacheContent.rowCount;\n      this._lruCounter = cacheContent.lruCounter;\n      this._rowBlockCache = cacheContent.rowBlockCache;\n      this._rowBlockCount = cacheContent.rowBlockCount;\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : 0,\n        lastRow     : this._rowCount - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n    },\n\n\n    /**\n     * Cancels the current request if possible.\n     *\n     * Should be overridden by subclasses if they are able to cancel requests. This\n     * allows sending a new request directly after a call of {@link #reloadData}.\n     *\n     * @return {Boolean} whether the request was canceled.\n     */\n    _cancelCurrentRequest : function() {\n      return false;\n    },\n\n\n    /**\n     * Iterates through all cached rows.\n     *\n     * The iterator will be called for each cached row with two parameters: The row\n     * index of the current row (Integer) and the row data of that row (var[]). If\n     * the iterator returns something this will be used as new row data.\n     *\n     * The iterator is called in the same order as the rows are in the model\n     * (the row index is always ascending).\n     *\n     * @param iterator {Function} The iterator function to call.\n     * @param object {Object} context of the iterator\n     */\n    iterateCachedRows : function(iterator, object)\n    {\n      var blockSize = this.getBlockSize();\n      var blockCount = Math.ceil(this.getRowCount() / blockSize);\n\n      // Remove the row and move the rows of all following blocks\n      for (var block=0; block<=blockCount; block++)\n      {\n        var blockData = this._rowBlockCache[block];\n\n        if (blockData != null)\n        {\n          var rowOffset = block * blockSize;\n          var rowDataArr = blockData.rowDataArr;\n\n          for (var relRow=0; relRow<rowDataArr.length; relRow++)\n          {\n            // Call the iterator for this row\n            var rowData = rowDataArr[relRow];\n            var newRowData = iterator.call(object, rowOffset + relRow, rowData);\n\n            if (newRowData != null) {\n              rowDataArr[relRow] = newRowData;\n            }\n          }\n        }\n      }\n    },\n\n    // overridden\n    prefetchRows : function(firstRowIndex, lastRowIndex)\n    {\n      // this.debug(\"Prefetch wanted: \" + firstRowIndex + \"..\" + lastRowIndex);\n      if (this._firstLoadingBlock == -1)\n      {\n        var blockSize = this.getBlockSize();\n        var totalBlockCount = Math.ceil(this._rowCount / blockSize);\n\n        // There is currently no request running -> Start a new one\n        // NOTE: We load one more block above and below to have a smooth\n        //       scrolling into the next block without blank cells\n        var firstBlock = parseInt(firstRowIndex / blockSize, 10) - 1;\n\n        if (firstBlock < 0) {\n          firstBlock = 0;\n        }\n\n        var lastBlock = parseInt(lastRowIndex / blockSize, 10) + 1;\n\n        if (lastBlock >= totalBlockCount) {\n          lastBlock = totalBlockCount - 1;\n        }\n\n        // Check which blocks we have to load\n        var firstBlockToLoad = -1;\n        var lastBlockToLoad = -1;\n\n        for (var block=firstBlock; block<=lastBlock; block++)\n        {\n          if ((this._clearCache && !this._loadRowCountRequestRunning)|| this._rowBlockCache[block] == null || this._rowBlockCache[block].isDirty)\n          {\n            // We don't have this block\n            if (firstBlockToLoad == -1) {\n              firstBlockToLoad = block;\n            }\n\n            lastBlockToLoad = block;\n          }\n        }\n\n        // Load the blocks\n        if (firstBlockToLoad != -1)\n        {\n          this._firstRowToLoad = -1;\n          this._lastRowToLoad = -1;\n\n          this._firstLoadingBlock = firstBlockToLoad;\n\n          // this.debug(\"Starting server request. rows: \" + firstRowIndex + \"..\" + lastRowIndex + \", blocks: \" + firstBlockToLoad + \"..\" + lastBlockToLoad);\n          this._loadRowData(firstBlockToLoad * blockSize, (lastBlockToLoad + 1) * blockSize - 1);\n        }\n      }\n      else\n      {\n        // There is already a request running -> Remember this request\n        // so it can be executed after the current one is finished.\n        this._firstRowToLoad = firstRowIndex;\n        this._lastRowToLoad = lastRowIndex;\n      }\n    },\n\n\n    /**\n     * Loads some row data from the server.\n     *\n     * Implementing classes have to call {@link #_onRowDataLoaded} when the server\n     * response arrived. That method has to be called! Even when there was an error.\n     *\n     * @abstract\n     * @param firstRow {Integer} The index of the first row to load.\n     * @param lastRow {Integer} The index of the last row to load.\n     * @throws {Error} the abstract function warning.\n     */\n    _loadRowData : function(firstRow, lastRow) {\n      throw new Error(\"_loadRowData is abstract\");\n    },\n\n\n    /**\n     * Sets row data.\n     *\n     * Has to be called by {@link #_loadRowData}.\n     *\n     * @param rowDataArr {Map[]} the loaded row data or null if there was an error.\n     */\n    _onRowDataLoaded : function(rowDataArr)\n    {\n      // Clear cache if function was called because of a reload.\n      if (this._clearCache) {\n        this.clearCache();\n        this._clearCache = false;\n      }\n\n      if (rowDataArr != null && !this._ignoreCurrentRequest)\n      {\n        var blockSize = this.getBlockSize();\n        var blockCount = Math.ceil(rowDataArr.length / blockSize);\n\n        if (blockCount == 1)\n        {\n          // We got one block -> Use the rowData directly\n          this._setRowBlockData(this._firstLoadingBlock, rowDataArr);\n        }\n        else\n        {\n          // We got more than one block -> We've to split the rowData\n          for (var i=0; i<blockCount; i++)\n          {\n            var rowOffset = i * blockSize;\n            var blockRowData = [];\n            var mailCount = Math.min(blockSize, rowDataArr.length - rowOffset);\n\n            for (var row=0; row<mailCount; row++) {\n              blockRowData.push(rowDataArr[rowOffset + row]);\n            }\n\n            this._setRowBlockData(this._firstLoadingBlock + i, blockRowData);\n          }\n        }\n\n        // this.debug(\"Got server answer. blocks: \" + this._firstLoadingBlock + \"..\" + (this._firstLoadingBlock + blockCount - 1) + \". mail count: \" + rowDataArr.length + \" block count:\" + blockCount);\n        // Inform the listeners\n        var data =\n        {\n          firstRow    : this._firstLoadingBlock * blockSize,\n          lastRow     : (this._firstLoadingBlock + blockCount + 1) * blockSize - 1,\n          firstColumn : 0,\n          lastColumn  : this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n\n      // We're not loading any blocks any more\n      this._firstLoadingBlock = -1;\n      this._ignoreCurrentRequest = false;\n\n      // Check whether we have to start a new request\n      if (this._firstRowToLoad != -1) {\n        this.prefetchRows(this._firstRowToLoad, this._lastRowToLoad);\n      }\n    },\n\n\n    /**\n     * Sets the data of one block.\n     *\n     * @param block {Integer} the index of the block.\n     * @param rowDataArr {var[][]} the data to set.\n     */\n    _setRowBlockData : function(block, rowDataArr)\n    {\n      if (this._rowBlockCache[block] == null)\n      {\n\n        // This is a new block -> Check whether we have to remove another block first\n        this._rowBlockCount++;\n\n        while (this._rowBlockCount > this.getMaxCachedBlockCount())\n        {\n          // Find the last recently used block\n          // NOTE: We never remove block 0 and 1\n          var lruBlock;\n          var minLru = this._lruCounter;\n\n          for (var currBlock in this._rowBlockCache)\n          {\n            var currLru = this._rowBlockCache[currBlock].lru;\n\n            if (currLru < minLru && currBlock > 1)\n            {\n              minLru = currLru;\n              lruBlock = currBlock;\n            }\n          }\n\n          // Remove that block\n          // this.debug(\"Removing block: \" + lruBlock + \". current LRU: \" + this._lruCounter);\n          delete this._rowBlockCache[lruBlock];\n          this._rowBlockCount--;\n        }\n      }\n\n      this._rowBlockCache[block] =\n      {\n        lru        : ++this._lruCounter,\n        rowDataArr : rowDataArr\n      };\n    },\n\n\n    /**\n     * Removes a row from the model.\n     *\n     * @param rowIndex {Integer} the index of the row to remove.\n     */\n    removeRow : function(rowIndex)\n    {\n      if (this.getClearCacheOnRemove())\n      {\n        this.clearCache();\n\n        // Inform the listeners\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : this.getRowCount() - 1,\n          firstColumn : 0,\n          lastColumn  : this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n      else\n      {\n        var blockSize = this.getBlockSize();\n        var blockCount = Math.ceil(this.getRowCount() / blockSize);\n        var startBlock = parseInt(rowIndex / blockSize, 10);\n\n        // Remove the row and move the rows of all following blocks\n        for (var block=startBlock; block<=blockCount; block++)\n        {\n          var blockData = this._rowBlockCache[block];\n\n          if (blockData != null)\n          {\n            // Remove the row in the start block\n            // NOTE: In the other blocks the first row is removed\n            //       (This is the row that was)\n            var removeIndex = 0;\n\n            if (block == startBlock) {\n              removeIndex = rowIndex - block * blockSize;\n            }\n\n            blockData.rowDataArr.splice(removeIndex, 1);\n\n            if (block == blockCount - 1)\n            {\n              // This is the last block\n              if (blockData.rowDataArr.length == 0)\n              {\n                // It is empty now -> Remove it\n                delete this._rowBlockCache[block];\n              }\n            }\n            else\n            {\n              // Try to copy the first row of the next block to the end of this block\n              // so this block can stays clean\n              var nextBlockData = this._rowBlockCache[block + 1];\n\n              if (nextBlockData != null) {\n                blockData.rowDataArr.push(nextBlockData.rowDataArr[0]);\n              }\n              else\n              {\n                // There is no row to move -> Mark this block as dirty\n                blockData.isDirty = true;\n              }\n            }\n          }\n        }\n\n        if (this._rowCount != -1) {\n          this._rowCount--;\n        }\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\"))\n        {\n          var data =\n          {\n            firstRow    : rowIndex,\n            lastRow     : this.getRowCount() - 1,\n            firstColumn : 0,\n            lastColumn  : this.getColumnCount() - 1\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n      }\n    },\n\n\n    /**\n     *\n     * See overridden method for details.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Object} Map containing a value for each column.\n     */\n    getRowData : function(rowIndex)\n    {\n      var blockSize = this.getBlockSize();\n      var block = parseInt(rowIndex / blockSize, 10);\n      var blockData = this._rowBlockCache[block];\n\n      if (blockData == null)\n      {\n        // This block is not (yet) loaded\n        return null;\n      }\n      else\n      {\n        var rowData = blockData.rowDataArr[rowIndex - (block * blockSize)];\n\n        // Update the last recently used counter\n        if (blockData.lru != this._lruCounter) {\n          blockData.lru = ++this._lruCounter;\n        }\n\n        return rowData;\n      }\n    },\n\n    // overridden\n    getValue : function(columnIndex, rowIndex)\n    {\n      var rowData = this.getRowData(rowIndex);\n\n      if (rowData == null) {\n        return null;\n      }\n      else\n      {\n        var columnId = this.getColumnId(columnIndex);\n        return rowData[columnId];\n      }\n    },\n\n    // overridden\n    setValue : function(columnIndex, rowIndex, value)\n    {\n      var rowData = this.getRowData(rowIndex);\n\n      if (rowData == null) {\n        // row has not yet been loaded or does not exist\n        return;\n      }\n      else\n      {\n        var columnId = this.getColumnId(columnIndex);\n        rowData[columnId] = value;\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\"))\n        {\n          var data =\n          {\n            firstRow    : rowIndex,\n            lastRow     : rowIndex,\n            firstColumn : columnIndex,\n            lastColumn  : columnIndex\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n      }\n    },\n\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean} whether all columns are editable.\n     */\n    setEditable : function(editable)\n    {\n      this._editableColArr = [];\n\n      for (var col=0; col<this.getColumnCount(); col++) {\n        this._editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column of which to set the editable state.\n     * @param editable {Boolean} whether the column should be editable.\n     */\n    setColumnEditable : function(columnIndex, editable)\n    {\n      if (editable != this.isColumnEditable(columnIndex))\n      {\n        if (this._editableColArr == null) {\n          this._editableColArr = [];\n        }\n\n        this._editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable : function(columnIndex)\n    {\n      return (this._editableColArr\n              ? (this._editableColArr[columnIndex] == true)\n              : false);\n    },\n\n   /**\n     * Sets whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column of which to set the sortable state.\n     * @param sortable {Boolean} whether the column should be sortable.\n     */\n    setColumnSortable : function(columnIndex, sortable)\n    {\n      if (sortable != this.isColumnSortable(columnIndex))\n      {\n        if (this._sortableColArr == null) {\n          this._sortableColArr = [];\n        }\n\n        this._sortableColArr[columnIndex] = sortable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnSortable : function(columnIndex)\n    {\n      return (\n        this._sortableColArr\n        ? (this._sortableColArr[columnIndex] !== false)\n        : true\n      );\n    },\n\n    // overridden\n    sortByColumn : function(columnIndex, ascending)\n    {\n      if (this._sortColumnIndex != columnIndex || this._sortAscending != ascending)\n      {\n        this._sortColumnIndex = columnIndex;\n        this._sortAscending = ascending;\n\n        this.clearCache();\n\n        // Inform the listeners\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    getSortColumnIndex : function() {\n      return this._sortColumnIndex;\n    },\n\n    // overridden\n    isSortAscending : function() {\n      return this._sortAscending;\n    },\n\n    /**\n     * Sets the sorted column without sorting the data.\n     * Use this method, if you want to mark the column as the sorted column,\n     * (e.g. for appearance reason), but the sorting of the data will be done\n     * in another step.\n     *\n     * @param sortColumnIndex {Integer} the column, which shall be marked as the sorted column.\n     */\n    setSortColumnIndexWithoutSortingData : function(sortColumnIndex)\n    {\n      this._sortColumnIndex = sortColumnIndex;\n    },\n\n    /**\n     * Sets the direction of the sorting without sorting the data.\n     * Use this method, if you want to set the direction of sorting, (e.g\n     * for appearance reason), but the sorting of the data will be done in\n     * another step.\n     *\n     * @param sortAscending {Boolean} whether the sorting direction is ascending\n     *        (true) or not (false).\n     */\n    setSortAscendingWithoutSortingData : function (sortAscending)\n    {\n      this._sortAscending = sortAscending;\n    }\n\n  },\n\n  destruct : function() {\n    this._sortableColArr = this._editableColArr = this._rowBlockCache = null;\n  }\n});\n"
  ]
}