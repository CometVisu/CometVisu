{
  "className": "qx.ui.table.model.Filtered",
  "packageName": "qx.ui.table.model",
  "name": "Filtered",
  "superClass": "qx.ui.table.model.Simple",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 76,
        "column": 0
      },
      "end": {
        "line": 505,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007 by Tartan Solutions, Inc, http://www.tartansolutions.com\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Dan Hummon\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>A filtered table model to provide support for hiding and filtering table\n rows. Any rows that match any applied filters will be hidden.</p>\n<pre class='javascript'>\nvar model = new qx.ui.table.model.Filtered();\nmodel.setColumns([\"Login\", \"Name\", \"Email\"], [\"login\", \"name\", \"email\"]);\nvar table = new qx.ui.table.Table(model);\nvar data = [{\n  login : \"darthvader\",\n  name : \"Darth Vader\",\n  email : \"darthvader@tatooine.org\"\n}, {\n  login : \"anakin\",\n  name : \"Anakin Skywalker\",\n  email : \"anakin@skywalker.org\"\n}, {\n  login : \"luke\",\n  name : \"Luke Skywalker\",\n  email : \"luke@tatooine.org\"\n}, {\n  login : \"obi-wan\",\n  name : \"Obi-Wan Kenobi\",\n  email : \"obiwan@jedi.org\"\n}, {\n  login : \"rey\",\n  name : \"Rey\",\n  email : \"rey@jakku.sw\"\n}];\nmodel.setDataAsMapArray(data);\nthis.getRoot().add(table);\nvar search = new qx.ui.form.TextField();\nsearch.set({\n  liveUpdate : true,\n  placeholder : \"Search login\"\n});\nsearch.addListener(\"changeValue\", function(e) {\n  var value = e.getData();\n  model.resetHiddenRows();\n  model.addNotRegex(value, \"login\", true);\n  model.applyFilters();\n});\nthis.getRoot().add(search, {top : 500, left : 10});\n</pre>"
        }
      ],
      "@deprecated": [
        {
          "name": "@deprecated",
          "body": "{6.0} You should use\n <a href='http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter' target='_blank'>Array.filter</a>\n method to filter the table model"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 81,
        "column": 14
      },
      "end": {
        "line": 99,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__fullArr": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__applyingFilters": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__filterTypes": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getFullArray": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function to get the full array of the filtered model</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the full array of model (with no changes)",
            "type": "Array",
            "description": " the full array of model (with no changes)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_js_in_array": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given string (needle) is in the array (haystack)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "the_needle {String} String to search",
            "paramName": "the_needle",
            "description": " String to search",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "the_haystack {Array} Array, which should be searched",
            "paramName": "the_haystack",
            "description": " Array, which should be searched",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the search string was found.",
            "type": "Boolean",
            "description": " whether the search string was found."
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0}"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addBetweenFilter": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addBetweenFilter method is used to add a between filter to the\n table model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filter {String}\n    The type of filter. Accepted strings are \"between\" and \"!between\".",
            "paramName": "filter",
            "description": "\n    The type of filter. Accepted strings are \"between\" and \"!between\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value1 {Integer}\n    The first value to compare against.",
            "paramName": "value1",
            "description": "\n    The first value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value2 {Integer}\n    The second value to compare against.",
            "paramName": "value2",
            "description": "\n    The second value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "target {String}\n    The text value of the column to compare against.",
            "paramName": "target",
            "description": "\n    The text value of the column to compare against.",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the filter can not recognized or one of the values\n is null.",
            "type": "Error",
            "description": " If the filter can not recognized or one of the values\n is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addNumericFilter": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addNumericFilter method is used to add a basic numeric filter to\n the table model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filter {String}\n    The type of filter. Accepted strings are:\n    \"==\", \"!=\", \">\", \"<\", \">=\", and \"<=\".",
            "paramName": "filter",
            "description": "\n    The type of filter. Accepted strings are:\n    \"==\", \"!=\", \">\", \"<\", \">=\", and \"<=\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value1 {Integer}\n    The value to compare against.",
            "paramName": "value1",
            "description": "\n    The value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "target {String}\n    The text value of the column to compare against.",
            "paramName": "target",
            "description": "\n    The text value of the column to compare against.",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the filter can not recognized or the target is null.",
            "type": "Error",
            "description": " If the filter can not recognized or the target is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addRegex": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 246,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addRegex method is used to add a regular expression filter to the\n table model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regex {String}\n    The regular expression to match against.",
            "paramName": "regex",
            "description": "\n    The regular expression to match against.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {String}\n    The text value of the column to compare against.",
            "paramName": "target",
            "description": "\n    The text value of the column to compare against.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "ignorecase {Boolean}\n    If true, the regular expression will ignore case.",
            "paramName": "ignorecase",
            "description": "\n    If true, the regular expression will ignore case.",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the regex is not valid.",
            "type": "Error",
            "description": " If the regex is not valid."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addNotRegex": {
      "location": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 283,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The addNotRegex method is used to add a regular expression filter to the\n table model and filter cells that do not match.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regex {String}\n    The regular expression to match against.",
            "paramName": "regex",
            "description": "\n    The regular expression to match against.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {String}\n    The text value of the column to compare against.",
            "paramName": "target",
            "description": "\n    The text value of the column to compare against.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "ignorecase {Boolean}\n    If true, the regular expression will ignore case.",
            "paramName": "ignorecase",
            "description": "\n    If true, the regular expression will ignore case.",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the regex is null.",
            "type": "Error",
            "description": " If the regex is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "applyFilters": {
      "location": {
        "start": {
          "line": 289,
          "column": 4
        },
        "end": {
          "line": 421,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The applyFilters method is called to apply filters to the table model.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hideRows": {
      "location": {
        "start": {
          "line": 437,
          "column": 4
        },
        "end": {
          "line": 471,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides a specified number of rows.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowNum {Integer}\n    Index of the first row to be hidden in the table.",
            "paramName": "rowNum",
            "description": "\n    Index of the first row to be hidden in the table.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "numOfRows {Integer}\n    The number of rows to be hidden sequentially after rowNum.",
            "paramName": "numOfRows",
            "description": "\n    The number of rows to be hidden sequentially after rowNum.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "dispatchEvent {Boolean?true} Whether a model change event should\n    be fired.",
            "paramName": "dispatchEvent",
            "description": " Whether a model change event should\n    be fired.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetHiddenRows": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 488,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the table to the original state with all rows shown and clears\n all filters.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setData": {
      "location": {
        "start": {
          "line": 492,
          "column": 4
        },
        "end": {
          "line": 497,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowArr {var[][]} An array containing an array for each row. Each\n          row-array contains the values in that row in the order of the columns\n          in this model.",
            "paramName": "rowArr",
            "description": " An array containing an array for each row. Each\n          row-array contains the values in that row in the order of the columns\n          in this model.",
            "type": "var[][]"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Simple",
      "appearsIn": [
        "qx.ui.table.model.Simple"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "reset"
    },
    "getCaseSensitiveSorting": {
      "type": "function",
      "name": "getCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>caseSensitiveSorting</code>.\n\nFor further details take a look at the property definition: {@link #caseSensitiveSorting}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for caseSensitiveSorting"
          }
        ]
      }
    },
    "isCaseSensitiveSorting": {
      "type": "function",
      "name": "isCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>caseSensitiveSorting</code>.\n\nFor further details take a look at the property definition: {@link #caseSensitiveSorting}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for caseSensitiveSorting"
          }
        ]
      }
    },
    "setCaseSensitiveSorting": {
      "type": "function",
      "name": "setCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>caseSensitiveSorting</code>.\n\nFor further details take a look at the property definition: {@link #caseSensitiveSorting}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for caseSensitiveSorting"
          }
        ]
      }
    },
    "resetCaseSensitiveSorting": {
      "type": "function",
      "name": "resetCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>caseSensitiveSorting</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #caseSensitiveSorting}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 501,
        "column": 13
      },
      "end": {
        "line": 504,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}