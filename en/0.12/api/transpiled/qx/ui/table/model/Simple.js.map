{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Simple.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "construct",
    "_rowArr",
    "__sortColumnIndex",
    "__sortMethods",
    "__editableColArr",
    "properties",
    "caseSensitiveSorting",
    "check",
    "init",
    "statics",
    "_defaultSortComparatorAscending",
    "row1",
    "row2",
    "columnIndex",
    "obj1",
    "obj2",
    "lang",
    "Type",
    "isNumber",
    "result",
    "isNaN",
    "_defaultSortComparatorInsensitiveAscending",
    "toLowerCase",
    "_defaultSortComparatorDescending",
    "_defaultSortComparatorInsensitiveDescending",
    "members",
    "__sortableColArr",
    "__sortAscending",
    "getRowData",
    "rowIndex",
    "rowData",
    "originalData",
    "getRowDataAsMap",
    "map",
    "col",
    "getColumnCount",
    "getColumnId",
    "key",
    "undefined",
    "getDataAsMapArray",
    "len",
    "getRowCount",
    "data",
    "i",
    "push",
    "setEditable",
    "editable",
    "fireEvent",
    "setColumnEditable",
    "isColumnEditable",
    "setColumnSortable",
    "sortable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "comparator",
    "sortMethods",
    "descending",
    "getCaseSensitiveSorting",
    "Simple",
    "sort",
    "fireDataEvent",
    "setSortMethods",
    "compare",
    "methods",
    "isFunction",
    "getSortMethods",
    "clearSorting",
    "getSortColumnIndex",
    "_setSortColumnIndex",
    "isSortAscending",
    "_setSortAscending",
    "length",
    "getValue",
    "Error",
    "setValue",
    "value",
    "hasListener",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "setData",
    "rowArr",
    "getData",
    "setDataAsMapArray",
    "mapArr",
    "rememberMaps",
    "_mapArray2RowArr",
    "addRows",
    "startIndex",
    "splice",
    "Array",
    "prototype",
    "apply",
    "addRowsAsMapArray",
    "setRows",
    "setRowsAsMapArray",
    "removeRows",
    "howMany",
    "removeStart",
    "removeCount",
    "rowCount",
    "columnCount",
    "dataArr",
    "columnArr",
    "j",
    "destruct"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A simple table model that provides an API for changing the model data.\n */\nqx.Class.define(\"qx.ui.table.model.Simple\",\n{\n  extend : qx.ui.table.model.Abstract,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this._rowArr = [];\n    this.__sortColumnIndex = -1;\n\n    // Array of objects, each with property \"ascending\" and \"descending\"\n    this.__sortMethods = [];\n\n    this.__editableColArr = null;\n  },\n\n  properties :\n  {\n    /**\n     * Whether sorting should be case sensitive\n     */\n    caseSensitiveSorting :\n    {\n      check : \"Boolean\",\n      init : true\n    }\n  },\n\n\n  statics :\n  {\n    /**\n     * Default ascending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorAscending : function(row1, row2, columnIndex)\n    {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 > obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    },\n\n\n    /**\n     * Same as the Default ascending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveAscending : function(row1, row2, columnIndex)\n    {\n      var obj1 = (row1[columnIndex].toLowerCase ?\n            row1[columnIndex].toLowerCase() : row1[columnIndex]);\n      var obj2 = (row2[columnIndex].toLowerCase ?\n            row2[columnIndex].toLowerCase() : row2[columnIndex]);\n\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 > obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    },\n\n\n    /**\n     * Default descending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorDescending : function(row1, row2, columnIndex)\n    {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 < obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    },\n\n\n    /**\n     * Same as the Default descending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveDescending : function(row1, row2, columnIndex)\n    {\n      var obj1 = (row1[columnIndex].toLowerCase ?\n          row1[columnIndex].toLowerCase() : row1[columnIndex]);\n      var obj2 = (row2[columnIndex].toLowerCase ?\n          row2[columnIndex].toLowerCase() : row2[columnIndex]);\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 < obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    }\n\n  },\n\n\n  members :\n  {\n    _rowArr : null,\n    __editableColArr : null,\n    __sortableColArr : null,\n    __sortMethods : null,\n    __sortColumnIndex : null,\n    __sortAscending : null,\n\n\n    // overridden\n    getRowData : function(rowIndex)\n    {\n      var rowData = this._rowArr[rowIndex];\n      if (rowData == null || rowData.originalData == null) {\n        return rowData;\n      } else {\n        return rowData.originalData;\n      }\n    },\n\n\n    /**\n     * Returns the data of one row as map containing the column IDs as key and\n     * the cell values as value. Also the meta data is included.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Map} a Map containing the column values.\n     */\n    getRowDataAsMap : function(rowIndex)\n    {\n      var rowData = this._rowArr[rowIndex];\n\n      if (rowData != null) {\n        var map = {};\n        // get the current set data\n        for (var col = 0; col < this.getColumnCount(); col++) {\n          map[this.getColumnId(col)] = rowData[col];\n        }\n\n        if (rowData.originalData != null) {\n          // merge in the meta data\n          for (var key in rowData.originalData) {\n            if (map[key] == undefined) {\n              map[key] = rowData.originalData[key];\n            }\n          }\n        }\n\n        return map;\n      }\n      // may be null, which is ok\n      return (rowData && rowData.originalData) ? rowData.originalData : null;\n    },\n\n\n    /**\n     * Gets the whole data as an array of maps.\n     *\n     * Note: Individual items are retrieved by {@link #getRowDataAsMap}.\n     * @return {Map[]} Array of row data maps\n     */\n    getDataAsMapArray: function() {\n      var len = this.getRowCount();\n      var data = [];\n\n      for (var i = 0; i < len; i++)\n      {\n        data.push(this.getRowDataAsMap(i));\n      }\n\n      return data;\n    },\n\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean} whether all columns are editable.\n     */\n    setEditable : function(editable)\n    {\n      this.__editableColArr = [];\n\n      for (var col=0; col<this.getColumnCount(); col++) {\n        this.__editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column of which to set the editable state.\n     * @param editable {Boolean} whether the column should be editable.\n     */\n    setColumnEditable : function(columnIndex, editable)\n    {\n      if (editable != this.isColumnEditable(columnIndex))\n      {\n        if (this.__editableColArr == null) {\n          this.__editableColArr = [];\n        }\n\n        this.__editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable : function(columnIndex) {\n      return this.__editableColArr ? (this.__editableColArr[columnIndex] == true) : false;\n    },\n\n\n    /**\n     * Sets whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column of which to set the sortable state.\n     * @param sortable {Boolean} whether the column should be sortable.\n     */\n    setColumnSortable : function(columnIndex, sortable)\n    {\n      if (sortable != this.isColumnSortable(columnIndex))\n      {\n        if (this.__sortableColArr == null) {\n          this.__sortableColArr = [];\n        }\n\n        this.__sortableColArr[columnIndex] = sortable;\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n\n    // overridden\n    isColumnSortable : function(columnIndex) {\n      return (\n        this.__sortableColArr\n        ? (this.__sortableColArr[columnIndex] !== false)\n        : true\n      );\n    },\n\n    // overridden\n    sortByColumn : function(columnIndex, ascending)\n    {\n      // NOTE: We use different comparators for ascending and descending,\n      //     because comparators should be really fast.\n      var comparator;\n\n      var sortMethods = this.__sortMethods[columnIndex];\n      if (sortMethods)\n      {\n        comparator =\n          (ascending\n           ? sortMethods.ascending\n           : sortMethods.descending);\n      }\n      else\n      {\n        if (this.getCaseSensitiveSorting())\n        {\n          comparator =\n            (ascending\n             ? qx.ui.table.model.Simple._defaultSortComparatorAscending\n             : qx.ui.table.model.Simple._defaultSortComparatorDescending);\n        }\n        else\n        {\n          comparator =\n            (ascending\n             ? qx.ui.table.model.Simple._defaultSortComparatorInsensitiveAscending\n             : qx.ui.table.model.Simple._defaultSortComparatorInsensitiveDescending);\n        }\n      }\n\n      comparator.columnIndex = columnIndex;\n      this._rowArr.sort(function(row1, row2) {\n        return comparator(row1, row2, columnIndex);\n      });\n\n      this.__sortColumnIndex = columnIndex;\n      this.__sortAscending = ascending;\n\n      var data =\n        {\n          columnIndex : columnIndex,\n          ascending   : ascending\n        };\n      this.fireDataEvent(\"sorted\", data);\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Specify the methods to use for ascending and descending sorts of a\n     * particular column.\n     *\n     * @param columnIndex {Integer}\n     *   The index of the column for which the sort methods are being\n     *   provided.\n     *\n     * @param compare {Function|Map}\n     *   If provided as a Function, this is the comparator function to sort in\n     *   ascending order. It takes three parameters: the two arrays of row data,\n     *   row1 and row2, being compared and the column index sorting was requested \n     *   for. \n     *\n     *   For backwards compatability, user-supplied compare functions may still \n     *   take only two parameters, the two arrays of row data, row1 and row2, \n     *   being compared and obtain the column index as arguments.callee.columnIndex. \n     *   This is deprecated, however, as arguments.callee is disallowed in ES5 strict\n     *   mode and ES6.\n     *\n     *   The comparator function must return 1, 0 or -1, when the column in row1\n     *   is greater than, equal to, or less than, respectively, the column in\n     *   row2.\n     *\n     *   If this parameter is a Map, it shall have two properties: \"ascending\"\n     *   and \"descending\". The property value of each is a comparator\n     *   function, as described above.\n     *\n     *   If only the \"ascending\" function is provided (i.e. this parameter is\n     *   a Function, not a Map), then the \"descending\" function is built\n     *   dynamically by passing the two parameters to the \"ascending\" function\n     *   in reversed order. <i>Use of a dynamically-built \"descending\" function\n     *   generates at least one extra function call for each row in the table,\n     *   and possibly many more. If the table is expected to have more than\n     *   about 1000 rows, you will likely want to provide a map with a custom\n     *   \"descending\" sort function as well as the \"ascending\" one.</i>\n     *\n     */\n    setSortMethods : function(columnIndex, compare)\n    {\n      var methods;\n      if (qx.lang.Type.isFunction(compare))\n      {\n        methods =\n          {\n            ascending  : compare,\n            descending : function(row1, row2, columnIndex)\n            {\n              /* assure backwards compatibility for sort functions using\n               * arguments.callee.columnIndex and fix a bug where retreiveing\n               * column index via this way did not work for the case where a \n               * single comparator function was used. \n               * Note that arguments.callee is not available in ES5 strict mode and ES6. \n               * See discussion in \n               * https://github.com/qooxdoo/qooxdoo/pull/9499#pullrequestreview-99655182\n               */ \n              compare.columnIndex = columnIndex;\n\n              return compare(row2, row1, columnIndex);\n            }\n          };\n      }\n      else\n      {\n        methods = compare;\n      }\n      this.__sortMethods[columnIndex] = methods;\n    },\n\n\n    /**\n     * Returns the sortMethod(s) for a table column.\n     *\n     * @param columnIndex {Integer} The index of the column for which the sort\n     *   methods are being  provided.\n     *\n     * @return {Map} a map with the two properties \"ascending\"\n     *   and \"descending\" for the specified column.\n     *   The property value of each is a comparator function, as described\n     *   in {@link #setSortMethods}.\n     */\n    getSortMethods : function(columnIndex) {\n      return this.__sortMethods[columnIndex];\n    },\n\n\n    /**\n     * Clears the sorting.\n     */\n    clearSorting : function()\n    {\n      if (this.__sortColumnIndex != -1)\n      {\n        this.__sortColumnIndex = -1;\n        this.__sortAscending = true;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    getSortColumnIndex : function() {\n      return this.__sortColumnIndex;\n    },\n\n    /**\n     * Set the sort column index\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param columnIndex {Integer} index of the column\n     */\n    _setSortColumnIndex : function(columnIndex)\n    {\n      this.__sortColumnIndex = columnIndex;\n    },\n\n    // overridden\n    isSortAscending : function() {\n      return this.__sortAscending;\n    },\n\n    /**\n     * Set whether to sort in ascending order or not.\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param ascending {Boolean}\n     *   <i>true</i> for an ascending sort;\n     *   <i> false</i> for a descending sort.\n     */\n    _setSortAscending : function(ascending)\n    {\n      this.__sortAscending = ascending;\n    },\n\n    // overridden\n    getRowCount : function() {\n      return this._rowArr.length;\n    },\n\n    // overridden\n    getValue : function(columnIndex, rowIndex)\n    {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\"this._rowArr out of bounds: \" + rowIndex + \" (0..\" + this._rowArr.length + \")\");\n      }\n\n      return this._rowArr[rowIndex][columnIndex];\n    },\n\n    // overridden\n    setValue : function(columnIndex, rowIndex, value)\n    {\n      if (this._rowArr[rowIndex][columnIndex] != value)\n      {\n        this._rowArr[rowIndex][columnIndex] = value;\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\"))\n        {\n          var data =\n          {\n            firstRow    : rowIndex,\n            lastRow     : rowIndex,\n            firstColumn : columnIndex,\n            lastColumn  : columnIndex\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n\n        if (columnIndex == this.__sortColumnIndex) {\n          this.clearSorting();\n        }\n      }\n    },\n\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setData : function(rowArr, clearSorting)\n    {\n      this._rowArr = rowArr;\n\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\"))\n      {\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : rowArr.length - 1,\n          firstColumn : 0,\n          lastColumn  : this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Returns the data of this model.\n     *\n     * Warning: Do not alter this array! If you want to change the data use\n     * {@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead.\n     *\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    getData : function() {\n      return this._rowArr;\n    },\n\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setDataAsMapArray : function(mapArr, rememberMaps, clearSorting) {\n      this.setData(this._mapArray2RowArr(mapArr, rememberMaps), clearSorting);\n    },\n\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are appended to the end.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRows : function(rowArr, startIndex, clearSorting)\n    {\n      if (startIndex == null) {\n        startIndex = this._rowArr.length;\n      }\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, 0);\n\n      // Insert the new rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : startIndex,\n        lastRow     : this._rowArr.length - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRowsAsMapArray : function(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.addRows(this._mapArray2RowArr(mapArr, rememberMaps), startIndex, clearSorting);\n    },\n\n\n    /**\n     * Sets rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are set from the beginning (0).\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRows : function(rowArr, startIndex, clearSorting)\n    {\n      if (startIndex == null) {\n        startIndex = 0;\n      }\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, rowArr.length);\n\n      // Replace rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : startIndex,\n        lastRow     : this._rowArr.length - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Set rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRowsAsMapArray : function(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.setRows(this._mapArray2RowArr(mapArr, rememberMaps), startIndex, clearSorting);\n    },\n\n\n    /**\n     * Removes some rows from the model.\n     *\n     * @param startIndex {Integer} the index of the first row to remove.\n     * @param howMany {Integer} the number of rows to remove.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    removeRows : function(startIndex, howMany, clearSorting)\n    {\n      this._rowArr.splice(startIndex, howMany);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : startIndex,\n        lastRow     : this._rowArr.length - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1,\n        removeStart : startIndex,\n        removeCount : howMany\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Creates an array of maps to an array of arrays.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *          row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    _mapArray2RowArr : function(mapArr, rememberMaps)\n    {\n      var rowCount = mapArr.length;\n      var columnCount = this.getColumnCount();\n      var dataArr = new Array(rowCount);\n      var columnArr;\n\n      for (var i=0; i<rowCount; ++i)\n      {\n      columnArr = [];\n      if (rememberMaps) {\n        columnArr.originalData = mapArr[i];\n      }\n\n        for (var j=0; j<columnCount; ++j) {\n          columnArr[j] = mapArr[i][this.getColumnId(j)];\n        }\n\n        dataArr[i] = columnArr;\n      }\n\n      return dataArr;\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._rowArr = this.__editableColArr = this.__sortMethods =\n      this.__sortableColArr = null;\n  }\n});\n"
  ]
}