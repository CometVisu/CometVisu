{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/table/model/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ITableModel",
    "events",
    "construct",
    "__columnIdArr",
    "__columnNameArr",
    "__columnIndexMap",
    "members",
    "__internalChange",
    "init",
    "getRowCount",
    "Error",
    "getRowData",
    "rowIndex",
    "isColumnEditable",
    "columnIndex",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "getValue",
    "getValueById",
    "columnId",
    "getColumnIndexById",
    "setValue",
    "value",
    "setValueById",
    "getColumnCount",
    "length",
    "getColumnId",
    "getColumnName",
    "setColumnIds",
    "columnIdArr",
    "i",
    "Array",
    "fireEvent",
    "setColumnNamesByIndex",
    "columnNameArr",
    "setColumnNamesById",
    "columnNameMap",
    "setColumns",
    "bSetIds",
    "destruct",
    "model",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * An abstract table model that performs the column handling, so subclasses only\n * need to care for row handling.\n */\nqx.Class.define(\"qx.ui.table.model.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n  implement : qx.ui.table.ITableModel,\n\n\n  events :\n  {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event will be a map having the following\n     * attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     *\n     * Additionally, if the data changed as a result of rows being removed\n     * from the data model, then these additional attributes will be in the\n     * data:\n     * <ul>\n     *   <li>removeStart: The model index of the first row that was removed.</li>\n     *   <li>removeCount: The number of rows that were removed.</li>\n     * </ul>\n     */\n    \"dataChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    \"metaDataChanged\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    \"sorted\" : \"qx.event.type.Data\"\n  },\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__columnIdArr = [];\n    this.__columnNameArr = [];\n    this.__columnIndexMap = {};\n  },\n\n\n  members :\n  {\n    __columnIdArr : null,\n    __columnNameArr : null,\n    __columnIndexMap : null,\n    __internalChange : null,\n\n\n    /**\n     * Initialize the table model <--> table interaction. The table model is\n     * passed to the table constructor, but the table model doesn't otherwise\n     * know anything about the table nor can it operate on table\n     * properties. This function provides the capability for the table model\n     * to specify characteristics of the table. It is called when the table\n     * model is applied to the table.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this model is attached\n     */\n    init : function(table) {\n      // default implementation has nothing to do\n    },\n\n    /**\n     * Abstract method\n     * @throws {Error} An error if this method is called.\n     */\n    getRowCount : function() {\n      throw new Error(\"getRowCount is abstract\");\n    },\n\n    getRowData : function(rowIndex) {\n      return null;\n    },\n\n    isColumnEditable : function(columnIndex) {\n      return false;\n    },\n\n    isColumnSortable : function(columnIndex) {\n      return false;\n    },\n\n    sortByColumn : function(columnIndex, ascending) {\n    },\n\n    getSortColumnIndex : function() {\n      return -1;\n    },\n\n    isSortAscending : function() {\n      return true;\n    },\n\n    prefetchRows : function(firstRowIndex, lastRowIndex) {\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} the index of the column\n     * @param rowIndex {Integer} the index of the row\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    getValue : function(columnIndex, rowIndex) {\n      throw new Error(\"getValue is abstract\");\n    },\n\n    getValueById : function(columnId, rowIndex) {\n      return this.getValue(this.getColumnIndexById(columnId), rowIndex);\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} index of the column\n     * @param rowIndex {Integer} index of the row\n     * @param value {var} Value to be set\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    setValue : function(columnIndex, rowIndex, value) {\n      throw new Error(\"setValue is abstract\");\n    },\n\n    setValueById : function(columnId, rowIndex, value) {\n      this.setValue(this.getColumnIndexById(columnId), rowIndex, value);\n    },\n\n    // overridden\n    getColumnCount : function() {\n      return this.__columnIdArr.length;\n    },\n\n    // overridden\n    getColumnIndexById : function(columnId) {\n      return this.__columnIndexMap[columnId];\n    },\n\n    // overridden\n    getColumnId : function(columnIndex) {\n      return this.__columnIdArr[columnIndex];\n    },\n\n    // overridden\n    getColumnName : function(columnIndex) {\n      return this.__columnNameArr[columnIndex];\n    },\n\n\n    /**\n     * Sets the column IDs. These IDs may be used internally to identify a\n     * column.\n     *\n     * Note: This will clear previously set column names.\n     *\n     *\n     * @param columnIdArr {String[]} the IDs of the columns.\n     * @see #setColumns\n     */\n    setColumnIds : function(columnIdArr)\n    {\n      this.__columnIdArr = columnIdArr;\n\n      // Create the reverse map\n      this.__columnIndexMap = {};\n\n      for (var i=0; i<columnIdArr.length; i++) {\n        this.__columnIndexMap[columnIdArr[i]] = i;\n      }\n\n      this.__columnNameArr = new Array(columnIdArr.length);\n\n      // Inform the listeners\n      if (!this.__internalChange) {\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameArr {String[]} the names of the columns.\n     * @throws {Error} If the amount of given columns is different from the table.\n     * @see #setColumnIds\n     */\n    setColumnNamesByIndex : function(columnNameArr)\n    {\n      if (this.__columnIdArr.length != columnNameArr.length) {\n        throw new Error(\"this.__columnIdArr and columnNameArr have different length: \" + this.__columnIdArr.length + \" != \" + columnNameArr.length);\n      }\n\n      this.__columnNameArr = columnNameArr;\n\n      // Inform the listeners\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameMap {Map} a map containing the column IDs as keys and the\n     *          column name as values.\n     * @see #setColumnIds\n     */\n    setColumnNamesById : function(columnNameMap)\n    {\n      this.__columnNameArr = new Array(this.__columnIdArr.length);\n\n      for (var i=0; i<this.__columnIdArr.length; ++i) {\n        this.__columnNameArr[i] = columnNameMap[this.__columnIdArr[i]];\n      }\n    },\n\n\n    /**\n     * Sets the column names (and optionally IDs)\n     *\n     * Note: You can not change the _number_ of columns this way.  The number\n     *       of columns is highly intertwined in the entire table operation,\n     *       and dynamically changing it would require as much work as just\n     *       recreating your table.  If you must change the number of columns\n     *       in a table then you should remove the table and add a new one.\n     *\n     * @param columnNameArr {String[]}\n     *   The column names. These names will be shown to the user.\n     *\n     * @param columnIdArr {String[] ? null}\n     *   The column IDs. These IDs may be used internally to identify a\n     *   column. If null, the column names are used as IDs unless ID values\n     *   have already been set. If ID values have already been set, they will\n     *   continue to be used if no ID values are explicitly provided here.\n     *\n     * @throws {Error} If the amount of given columns is different from the table.\n     *\n     */\n    setColumns : function(columnNameArr, columnIdArr)\n    {\n      var bSetIds = this.__columnIdArr.length == 0 || columnIdArr;\n\n      if (columnIdArr == null) {\n        if (this.__columnIdArr.length == 0) {\n          columnIdArr = columnNameArr;\n        } else {\n          columnIdArr = this.__columnIdArr;\n        }\n      }\n\n      if (columnIdArr.length != columnNameArr.length) {\n        throw new Error(\"columnIdArr and columnNameArr have different length: \" + columnIdArr.length + \" != \" + columnNameArr.length);\n      }\n\n      if (bSetIds)\n      {\n        this.__internalChange = true;\n        this.setColumnIds(columnIdArr);\n        this.__internalChange = false;\n      }\n\n      this.setColumnNamesByIndex(columnNameArr);\n    }\n  },\n\n\n  destruct : function() {\n    this.__columnIdArr = this.__columnNameArr = this.__columnIndexMap = null;\n  }\n});\n"
  ]
}