{
  "className": "qx.ui.mobile.container.Carousel",
  "packageName": "qx.ui.mobile.container",
  "name": "Carousel",
  "superClass": "qx.ui.mobile.container.Composite",
  "interfaces": [],
  "mixins": [
    "qx.ui.mobile.core.MResize"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 46,
        "column": 0
      },
      "end": {
        "line": 733,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2012 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Christopher Zuendorf (czuendorf)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Creates a Carousel widget.\n A carousel is a widget which can switch between several sub pages {@link  qx.ui.mobile.container.Composite}.\n A page switch is triggered by a swipe to left, for next page, or a swipe to right for\n previous page.\n A carousel shows by default a pagination indicator at the bottom of the carousel.\n This pagination indicator can be hidden by property <code>showPagination</code>.\n<em>Example</em>\n Here is a little example of how to use the widget.\n </p>\n<pre class='javascript'>\n  var carousel = new qx.ui.mobile.container.Carousel();\n  var carouselPage1 = new qx.ui.mobile.container.Composite();\n  var carouselPage2 = new qx.ui.mobile.container.Composite();\n  carouselPage1.add(new qx.ui.mobile.basic.Label(\"This is a carousel. Please swipe left.\"));\n  carouselPage2.add(new qx.ui.mobile.basic.Label(\"Now swipe right.\"));\n  carousel.add(carouselPage1);\n  carousel.add(carouselPage2);\n </pre>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 61,
        "column": 14
      },
      "end": {
        "line": 106,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "transitionDuration {Integer ? 0.4} transition duration on carouselPage change in seconds.",
          "paramName": "transitionDuration",
          "description": " transition duration on carouselPage change in seconds.",
          "optional": true,
          "defaultValue": "0.4",
          "type": "Integer"
        }
      ]
    }
  },
  "properties": {
    "defaultCssClass": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ]
      },
      "name": "defaultCssClass",
      "propertyType": "new",
      "refine": true,
      "init": "carousel",
      "defaultValue": "carousel",
      "overriddenFrom": "qx.ui.mobile.core.Widget",
      "appearsIn": {
        "qx.ui.mobile.core.Widget": "class"
      }
    },
    "showPagination": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property for setting visibility of pagination indicator</p>"
          }
        ]
      },
      "name": "showPagination",
      "propertyType": "new",
      "apply": "_applyShowPagination",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "scrollLoop": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Defines whether the carousel should scroll back to first or last page\n when the start/end of carousel pages is reached</p>"
          }
        ]
      },
      "name": "scrollLoop",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "height": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Defines the height of the carousel. If value is equal to <code>null</code>\n the height is set to <code>100%</code>.</p>"
          }
        ]
      },
      "name": "height",
      "propertyType": "new",
      "apply": "_updateCarouselLayout",
      "nullable": true,
      "init": 200,
      "allowNull": true,
      "check": "Number",
      "defaultValue": 200
    },
    "currentIndex": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 158,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The current visible page index.</p>"
          }
        ]
      },
      "name": "currentIndex",
      "propertyType": "new",
      "event": "changeCurrentIndex",
      "apply": "_scrollToPage",
      "init": 0,
      "check": "Number",
      "defaultValue": 0
    },
    "transitionDuration": {
      "location": {
        "start": {
          "line": 164,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Duration of the carousel page transition.</p>"
          }
        ]
      },
      "name": "transitionDuration",
      "propertyType": "new",
      "init": 0.5,
      "check": "Number",
      "defaultValue": 0.5
    },
    "fireDomUpdatedOnResize": {
      "type": "property",
      "name": "fireDomUpdatedOnResize",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MResize"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__carouselScroller": {
      "location": {
        "start": {
          "line": 178,
          "column": 4
        },
        "end": {
          "line": 178,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__carouselScrollerWidth": {
      "location": {
        "start": {
          "line": 179,
          "column": 4
        },
        "end": {
          "line": 179,
          "column": 34
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__carouselWidth": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 180,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__paginationLabels": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__pagination": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__snapPointsX": {
      "location": {
        "start": {
          "line": 183,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onMoveOffset": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastOffset": {
      "location": {
        "start": {
          "line": 185,
          "column": 4
        },
        "end": {
          "line": 185,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__boundsX": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__pages": {
      "location": {
        "start": {
          "line": 187,
          "column": 4
        },
        "end": {
          "line": 187,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__showTransition": {
      "location": {
        "start": {
          "line": 188,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__isPageScrollTarget": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 31
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__deltaX": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 190,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__deltaY": {
      "location": {
        "start": {
          "line": 191,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "add": {
      "location": {
        "start": {
          "line": 199,
          "column": 4
        },
        "end": {
          "line": 219,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          },
          {
            "name": "@description",
            "body": "<p>Adds a page to the end of the carousel.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "page {qx.ui.mobile.container.Composite} The composite which should be added as a page to the end of carousel.",
            "paramName": "page",
            "description": " The composite which should be added as a page to the end of carousel.",
            "type": "qx.ui.mobile.container.Composite"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.mobile.core.MChildrenHandling"
      ]
    },
    "removePageByIndex": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a carousel page from carousel identified by its index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageIndex {Integer} The page index which should be removed from carousel.",
            "paramName": "pageIndex",
            "description": " The page index which should be removed from carousel.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.mobile.container.Composite} the page which was removed from carousel.",
            "type": "qx.ui.mobile.container.Composite",
            "description": " the page which was removed from carousel."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.mobile.core.MChildrenHandling"
      ]
    },
    "nextPage": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 279,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the carousel to next page.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "previousPage": {
      "location": {
        "start": {
          "line": 285,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the carousel to previous page.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPageCount": {
      "location": {
        "start": {
          "line": 300,
          "column": 4
        },
        "end": {
          "line": 306,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current page count of this carousel.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the current page count",
            "type": "Integer",
            "description": " the current page count"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_scrollToPage": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 326,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the carousel to the page with the given pageIndex.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageIndex {Integer} the target page index, which should be visible",
            "paramName": "pageIndex",
            "description": " the target page index, which should be visible",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "showTransition {Boolean ? true} flag if a transition should be shown or not",
            "paramName": "showTransition",
            "description": " flag if a transition should be shown or not",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "currentIndex"
      ]
    },
    "_doScrollLoop": {
      "location": {
        "start": {
          "line": 334,
          "column": 4
        },
        "end": {
          "line": 339,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Manages the the scroll loop. First fades out carousel scroller &gt;&gt;\n waits till fading is done &gt;&gt; scrolls to pageIndex &gt;&gt; waits till scrolling is done</p>\n<blockquote>\n  <blockquote>\n    <p>fades scroller in.</p>\n  </blockquote>\n</blockquote>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollerTransitionEnd": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 364,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for <code>transitionEnd</code> event on carouselScroller.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createPaginationLabel": {
      "location": {
        "start": {
          "line": 371,
          "column": 4
        },
        "end": {
          "line": 383,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Factory method for a paginationLabel.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.mobile.container.Composite} the created pagination label.",
            "type": "qx.ui.mobile.container.Composite",
            "description": " the created pagination label."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setScrollersOpacity": {
      "location": {
        "start": {
          "line": 390,
          "column": 4
        },
        "end": {
          "line": 394,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Changes the opacity of the carouselScroller element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "opacity {Integer} the target value of the opacity.",
            "paramName": "opacity",
            "description": " the target value of the opacity.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyShowPagination": {
      "location": {
        "start": {
          "line": 401,
          "column": 4
        },
        "end": {
          "line": 409,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when showPagination property is changed.\n Manages <code>show()</code> and <code>hide()</code> of pagination container.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "showPagination"
      ]
    },
    "_onPaginationLabelTap": {
      "location": {
        "start": {
          "line": 415,
          "column": 4
        },
        "end": {
          "line": 417,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles a tap on paginationLabel.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateCarouselLayout": {
      "location": {
        "start": {
          "line": 423,
          "column": 4
        },
        "end": {
          "line": 453,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the layout of the carousel the carousel scroller and its pages.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "height"
      ]
    },
    "_refreshScrollerPosition": {
      "location": {
        "start": {
          "line": 459,
          "column": 4
        },
        "end": {
          "line": 462,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronizes the positions of the scroller to the current shown page index.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onContainerUpdate": {
      "location": {
        "start": {
          "line": 468,
          "column": 4
        },
        "end": {
          "line": 472,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles window resize, device orientatonChange or page appear events.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getScrollerOffset": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 490,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current horizontal position of the carousel scrolling container.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the horizontal position",
            "type": "Number",
            "description": " the horizontal position"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerDown": {
      "location": {
        "start": {
          "line": 497,
          "column": 4
        },
        "end": {
          "line": 508,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for <code>pointerdown</code> events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Pointer} The pointer event.",
            "paramName": "evt",
            "description": " The pointer event.",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTrack": {
      "location": {
        "start": {
          "line": 515,
          "column": 4
        },
        "end": {
          "line": 543,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for <code>track</code> events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Track} The track event.",
            "paramName": "evt",
            "description": " The track event.",
            "type": "qx.event.type.Track"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerUp": {
      "location": {
        "start": {
          "line": 550,
          "column": 4
        },
        "end": {
          "line": 557,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for <code>pointerup</code> event on carousel scroller.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Pointer} the pointerup event.",
            "paramName": "evt",
            "description": " the pointerup event.",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onSwipe": {
      "location": {
        "start": {
          "line": 564,
          "column": 4
        },
        "end": {
          "line": 582,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for swipe event on carousel scroller.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Swipe} The swipe event.",
            "paramName": "evt",
            "description": " The swipe event.",
            "type": "qx.event.type.Swipe"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_calculateTransitionDuration": {
      "location": {
        "start": {
          "line": 592,
          "column": 4
        },
        "end": {
          "line": 596,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the duration the transition will need till the next carousel\n snap point is reached.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deltaX {Integer} the distance on axis between pointerdown and pointerup.",
            "paramName": "deltaX",
            "description": " the distance on axis between pointerdown and pointerup.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number} the swipe duration.",
            "paramName": "duration",
            "description": " the swipe duration.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the transition duration.",
            "type": "Number",
            "description": " the transition duration."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onNativeScroll": {
      "location": {
        "start": {
          "line": 605,
          "column": 4
        },
        "end": {
          "line": 609,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles the native scroll event on the carousel container.\n This is needed for preventing \"scrollIntoView\" method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Native} the native scroll event.",
            "paramName": "evt",
            "description": " the native scroll event.",
            "type": "qx.event.type.Native"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setTransitionDuration": {
      "location": {
        "start": {
          "line": 616,
          "column": 4
        },
        "end": {
          "line": 618,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Applies the CSS property \"transitionDuration\" to the carouselScroller.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} the target value of the transitionDuration.",
            "paramName": "value",
            "description": " the target value of the transitionDuration.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_snapCarouselPage": {
      "location": {
        "start": {
          "line": 626,
          "column": 4
        },
        "end": {
          "line": 647,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Snaps carouselScroller offset to a carouselPage.\n It determines which carouselPage is the nearest and moves\n carouselScrollers offset till nearest carouselPage's left border is aligned to carousel's left border.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updatePagination": {
      "location": {
        "start": {
          "line": 656,
          "column": 4
        },
        "end": {
          "line": 688,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the pagination indicator of this carousel.\n Removes the active state from from paginationLabel with oldActiveIndex,\n Adds actives state to paginationLabel new ActiveIndex.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newActiveIndex {Integer} Index of paginationLabel which should have active state",
            "paramName": "newActiveIndex",
            "description": " Index of paginationLabel which should have active state",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateScrollerPosition": {
      "location": {
        "start": {
          "line": 695,
          "column": 4
        },
        "end": {
          "line": 700,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assign new position of carousel scrolling container.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} scroller's x position.",
            "paramName": "x",
            "description": " scroller's x position.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeListeners": {
      "location": {
        "start": {
          "line": 706,
          "column": 4
        },
        "end": {
          "line": 718,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all listeners.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "releaseFixedSize": {
      "type": "function",
      "name": "releaseFixedSize",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MResize"
    },
    "fixSize": {
      "type": "function",
      "name": "fixSize",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MResize"
    },
    "_setHeight": {
      "type": "function",
      "name": "_setHeight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.mobile.core.MResize",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the height of the container element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "height {Integer} The height to set",
            "paramName": "height",
            "description": " The height to set",
            "type": "Integer"
          }
        ]
      }
    },
    "_setWidth": {
      "type": "function",
      "name": "_setWidth",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.mobile.core.MResize",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the width of the container element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} The width to set",
            "paramName": "width",
            "description": " The width to set",
            "type": "Integer"
          }
        ]
      }
    },
    "getFireDomUpdatedOnResize": {
      "type": "function",
      "name": "getFireDomUpdatedOnResize",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fireDomUpdatedOnResize</code>.\n\nFor further details take a look at the property definition: {@link #fireDomUpdatedOnResize}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for fireDomUpdatedOnResize"
          }
        ]
      }
    },
    "isFireDomUpdatedOnResize": {
      "type": "function",
      "name": "isFireDomUpdatedOnResize",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fireDomUpdatedOnResize</code>.\n\nFor further details take a look at the property definition: {@link #fireDomUpdatedOnResize}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for fireDomUpdatedOnResize"
          }
        ]
      }
    },
    "setFireDomUpdatedOnResize": {
      "type": "function",
      "name": "setFireDomUpdatedOnResize",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>fireDomUpdatedOnResize</code>.\n\nFor further details take a look at the property definition: {@link #fireDomUpdatedOnResize}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for fireDomUpdatedOnResize"
          }
        ]
      }
    },
    "resetFireDomUpdatedOnResize": {
      "type": "function",
      "name": "resetFireDomUpdatedOnResize",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>fireDomUpdatedOnResize</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #fireDomUpdatedOnResize}."
          }
        ]
      }
    },
    "getChildren": {
      "type": "function",
      "name": "getChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.Widget[]",
            "description": " The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      }
    },
    "hasChildren": {
      "type": "function",
      "name": "hasChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget has children."
          }
        ]
      }
    },
    "indexOf": {
      "type": "function",
      "name": "indexOf",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": " The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      }
    },
    "addAt": {
      "type": "function",
      "name": "addAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addBefore": {
      "type": "function",
      "name": "addBefore",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.Widget} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAfter": {
      "type": "function",
      "name": "addAfter",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.Widget} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "remove": {
      "type": "function",
      "name": "remove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.Widget"
          }
        ]
      }
    },
    "removeAt": {
      "type": "function",
      "name": "removeAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ]
      }
    },
    "setLayout": {
      "type": "function",
      "name": "setLayout",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MLayoutHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A a layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.mobile.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout.",
            "paramName": "layout",
            "description": " The new layout or\n     <code>null</code> to reset the layout.",
            "type": "qx.ui.mobile.layout.Abstract"
          }
        ]
      }
    },
    "getLayout": {
      "type": "function",
      "name": "getLayout",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.mobile.core.MLayoutHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget's layout manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.mobile.layout.Abstract} The widget's layout manager",
            "type": "qx.ui.mobile.layout.Abstract",
            "description": " The widget's layout manager"
          }
        ]
      }
    },
    "tr": {
      "type": "function",
      "name": "tr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message\n Mark the message for translation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trn": {
      "type": "function",
      "name": "trn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message\n Mark the messages for translation.\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trc": {
      "type": "function",
      "name": "trc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message with translation hint\n Mark the messages for translation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trnc": {
      "type": "function",
      "name": "trnc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message with translation hint\n Mark the messages for translation.\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "marktr": {
      "type": "function",
      "name": "marktr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark the message for translation but return the original message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} the message ID",
            "paramName": "messageId",
            "description": " the message ID",
            "type": "qx.locale.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} messageId",
            "type": "qx.locale.String",
            "description": " messageId"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getDefaultCssClass": {
      "type": "function",
      "name": "getDefaultCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>defaultCssClass</code>.\n\nFor further details take a look at the property definition: {@link #defaultCssClass}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for defaultCssClass"
          }
        ]
      }
    },
    "setDefaultCssClass": {
      "type": "function",
      "name": "setDefaultCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>defaultCssClass</code>.\n\nFor further details take a look at the property definition: {@link #defaultCssClass}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for defaultCssClass"
          }
        ]
      }
    },
    "resetDefaultCssClass": {
      "type": "function",
      "name": "resetDefaultCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>defaultCssClass</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #defaultCssClass}."
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getName": {
      "type": "function",
      "name": "getName",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for name"
          }
        ]
      }
    },
    "setName": {
      "type": "function",
      "name": "setName",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for name"
          }
        ]
      }
    },
    "resetName": {
      "type": "function",
      "name": "resetName",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>name</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ]
      }
    },
    "getAnonymous": {
      "type": "function",
      "name": "getAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "isAnonymous": {
      "type": "function",
      "name": "isAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "setAnonymous": {
      "type": "function",
      "name": "setAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for anonymous"
          }
        ]
      }
    },
    "resetAnonymous": {
      "type": "function",
      "name": "resetAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>anonymous</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ]
      }
    },
    "getId": {
      "type": "function",
      "name": "getId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>id</code>.\n\nFor further details take a look at the property definition: {@link #id}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for id"
          }
        ]
      }
    },
    "setId": {
      "type": "function",
      "name": "setId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>id</code>.\n\nFor further details take a look at the property definition: {@link #id}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for id"
          }
        ]
      }
    },
    "resetId": {
      "type": "function",
      "name": "resetId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>id</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #id}."
          }
        ]
      }
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for visibility"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for visibility"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visibility</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ]
      }
    },
    "getActivatable": {
      "type": "function",
      "name": "getActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>activatable</code>.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for activatable"
          }
        ]
      }
    },
    "isActivatable": {
      "type": "function",
      "name": "isActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>activatable</code>.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for activatable"
          }
        ]
      }
    },
    "setActivatable": {
      "type": "function",
      "name": "setActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>activatable</code>.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for activatable"
          }
        ]
      }
    },
    "resetActivatable": {
      "type": "function",
      "name": "resetActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>activatable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ]
      }
    },
    "getRotation": {
      "type": "function",
      "name": "getRotation",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>rotation</code>.\n\nFor further details take a look at the property definition: {@link #rotation}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for rotation"
          }
        ]
      }
    },
    "setRotation": {
      "type": "function",
      "name": "setRotation",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>rotation</code>.\n\nFor further details take a look at the property definition: {@link #rotation}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for rotation"
          }
        ]
      }
    },
    "resetRotation": {
      "type": "function",
      "name": "resetRotation",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>rotation</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #rotation}."
          }
        ]
      }
    },
    "getTransformUnit": {
      "type": "function",
      "name": "getTransformUnit",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>transformUnit</code>.\n\nFor further details take a look at the property definition: {@link #transformUnit}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for transformUnit"
          }
        ]
      }
    },
    "setTransformUnit": {
      "type": "function",
      "name": "setTransformUnit",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>transformUnit</code>.\n\nFor further details take a look at the property definition: {@link #transformUnit}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for transformUnit"
          }
        ]
      }
    },
    "resetTransformUnit": {
      "type": "function",
      "name": "resetTransformUnit",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>transformUnit</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #transformUnit}."
          }
        ]
      }
    },
    "getScaleX": {
      "type": "function",
      "name": "getScaleX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scaleX</code>.\n\nFor further details take a look at the property definition: {@link #scaleX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for scaleX"
          }
        ]
      }
    },
    "setScaleX": {
      "type": "function",
      "name": "setScaleX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scaleX</code>.\n\nFor further details take a look at the property definition: {@link #scaleX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for scaleX"
          }
        ]
      }
    },
    "resetScaleX": {
      "type": "function",
      "name": "resetScaleX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scaleX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scaleX}."
          }
        ]
      }
    },
    "getScaleY": {
      "type": "function",
      "name": "getScaleY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scaleY</code>.\n\nFor further details take a look at the property definition: {@link #scaleY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for scaleY"
          }
        ]
      }
    },
    "setScaleY": {
      "type": "function",
      "name": "setScaleY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scaleY</code>.\n\nFor further details take a look at the property definition: {@link #scaleY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for scaleY"
          }
        ]
      }
    },
    "resetScaleY": {
      "type": "function",
      "name": "resetScaleY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scaleY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scaleY}."
          }
        ]
      }
    },
    "getTranslateX": {
      "type": "function",
      "name": "getTranslateX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>translateX</code>.\n\nFor further details take a look at the property definition: {@link #translateX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for translateX"
          }
        ]
      }
    },
    "setTranslateX": {
      "type": "function",
      "name": "setTranslateX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>translateX</code>.\n\nFor further details take a look at the property definition: {@link #translateX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for translateX"
          }
        ]
      }
    },
    "resetTranslateX": {
      "type": "function",
      "name": "resetTranslateX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>translateX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #translateX}."
          }
        ]
      }
    },
    "getTranslateY": {
      "type": "function",
      "name": "getTranslateY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>translateY</code>.\n\nFor further details take a look at the property definition: {@link #translateY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for translateY"
          }
        ]
      }
    },
    "setTranslateY": {
      "type": "function",
      "name": "setTranslateY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>translateY</code>.\n\nFor further details take a look at the property definition: {@link #translateY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for translateY"
          }
        ]
      }
    },
    "resetTranslateY": {
      "type": "function",
      "name": "resetTranslateY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>translateY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #translateY}."
          }
        ]
      }
    },
    "getTranslateZ": {
      "type": "function",
      "name": "getTranslateZ",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>translateZ</code>.\n\nFor further details take a look at the property definition: {@link #translateZ}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for translateZ"
          }
        ]
      }
    },
    "setTranslateZ": {
      "type": "function",
      "name": "setTranslateZ",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>translateZ</code>.\n\nFor further details take a look at the property definition: {@link #translateZ}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for translateZ"
          }
        ]
      }
    },
    "resetTranslateZ": {
      "type": "function",
      "name": "resetTranslateZ",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>translateZ</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #translateZ}."
          }
        ]
      }
    },
    "getShowPagination": {
      "type": "function",
      "name": "getShowPagination",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showPagination</code>.\n\nFor further details take a look at the property definition: {@link #showPagination}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showPagination"
          }
        ]
      }
    },
    "isShowPagination": {
      "type": "function",
      "name": "isShowPagination",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showPagination</code>.\n\nFor further details take a look at the property definition: {@link #showPagination}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showPagination"
          }
        ]
      }
    },
    "setShowPagination": {
      "type": "function",
      "name": "setShowPagination",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>showPagination</code>.\n\nFor further details take a look at the property definition: {@link #showPagination}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for showPagination"
          }
        ]
      }
    },
    "resetShowPagination": {
      "type": "function",
      "name": "resetShowPagination",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>showPagination</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #showPagination}."
          }
        ]
      }
    },
    "getScrollLoop": {
      "type": "function",
      "name": "getScrollLoop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scrollLoop</code>.\n\nFor further details take a look at the property definition: {@link #scrollLoop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for scrollLoop"
          }
        ]
      }
    },
    "isScrollLoop": {
      "type": "function",
      "name": "isScrollLoop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scrollLoop</code>.\n\nFor further details take a look at the property definition: {@link #scrollLoop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for scrollLoop"
          }
        ]
      }
    },
    "setScrollLoop": {
      "type": "function",
      "name": "setScrollLoop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scrollLoop</code>.\n\nFor further details take a look at the property definition: {@link #scrollLoop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for scrollLoop"
          }
        ]
      }
    },
    "resetScrollLoop": {
      "type": "function",
      "name": "resetScrollLoop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scrollLoop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scrollLoop}."
          }
        ]
      }
    },
    "getHeight": {
      "type": "function",
      "name": "getHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for height"
          }
        ]
      }
    },
    "setHeight": {
      "type": "function",
      "name": "setHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for height"
          }
        ]
      }
    },
    "resetHeight": {
      "type": "function",
      "name": "resetHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>height</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ]
      }
    },
    "getCurrentIndex": {
      "type": "function",
      "name": "getCurrentIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>currentIndex</code>.\n\nFor further details take a look at the property definition: {@link #currentIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for currentIndex"
          }
        ]
      }
    },
    "setCurrentIndex": {
      "type": "function",
      "name": "setCurrentIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>currentIndex</code>.\n\nFor further details take a look at the property definition: {@link #currentIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for currentIndex"
          }
        ]
      }
    },
    "resetCurrentIndex": {
      "type": "function",
      "name": "resetCurrentIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>currentIndex</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #currentIndex}."
          }
        ]
      }
    },
    "getTransitionDuration": {
      "type": "function",
      "name": "getTransitionDuration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>transitionDuration</code>.\n\nFor further details take a look at the property definition: {@link #transitionDuration}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for transitionDuration"
          }
        ]
      }
    },
    "setTransitionDuration": {
      "type": "function",
      "name": "setTransitionDuration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>transitionDuration</code>.\n\nFor further details take a look at the property definition: {@link #transitionDuration}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for transitionDuration"
          }
        ]
      }
    },
    "resetTransitionDuration": {
      "type": "function",
      "name": "resetTransitionDuration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>transitionDuration</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #transitionDuration}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 722,
        "column": 13
      },
      "end": {
        "line": 732,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}