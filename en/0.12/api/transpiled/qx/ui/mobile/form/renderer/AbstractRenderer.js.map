{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/renderer/AbstractRenderer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "mobile",
    "core",
    "Widget",
    "implement",
    "form",
    "renderer",
    "IFormRenderer",
    "construct",
    "_form",
    "_render",
    "addListener",
    "_onFormChange",
    "properties",
    "defaultCssClass",
    "refine",
    "init",
    "members",
    "_removeAll",
    "resetForm",
    "groups",
    "getGroups",
    "i",
    "length",
    "group",
    "addItems",
    "items",
    "labels",
    "title",
    "options",
    "headerOptions",
    "buttons",
    "getButtons",
    "buttonOptions",
    "getButtonOptions",
    "addButton",
    "setRenderer",
    "names",
    "Error",
    "button",
    "showErrorForItem",
    "item",
    "AbstractRenderer"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,6CAAhB,EACA;AACEC,IAAAA,IAAI,EAAG,UADT;AAEEC,IAAAA,MAAM,EAAGP,EAAE,CAACQ,EAAH,CAAMC,MAAN,CAAaC,IAAb,CAAkBC,MAF7B;AAGEC,IAAAA,SAAS,EAAGZ,EAAE,CAACQ,EAAH,CAAMK,IAAN,CAAWC,QAAX,CAAoBC,aAHlC;;AAKE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASH,IAAT,EACZ;AACE;AAEA,WAAKI,KAAL,GAAaJ,IAAb;;AACA,WAAKK,OAAL;;AAEAL,MAAAA,IAAI,CAACM,WAAL,CAAiB,QAAjB,EAA2B,KAAKC,aAAhC,EAA+C,IAA/C;AACD,KAtBH;;AAwBE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,UAAU,EACV;AACE;AACAC,MAAAA,eAAe,EACf;AACEC,QAAAA,MAAM,EAAG,IADX;AAEEC,QAAAA,IAAI,EAAG;AAFT;AAHF,KA/BF;;AAwCE;AACF;AACA;AACA;AACA;AAEGC,IAAAA,OAAO,EACR;AACER,MAAAA,KAAK,EAAG,IADV;;AAIE;AACJ;AACA;AACA;AACIG,MAAAA,aAAa,EAAG,yBAAW;AACzB,aAAKM,UAAL;;AACA,aAAKC,SAAL;;AACA,aAAKT,OAAL;AACD,OAZH;;AAeE;AACJ;AACA;AACIA,MAAAA,OAAO,EAAG,mBAAW;AACnB;AACA,YAAIU,MAAM,GAAG,KAAKX,KAAL,CAAWY,SAAX,EAAb;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACE,cAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;AACA,eAAKG,QAAL,CACED,KAAK,CAACE,KADR,EACeF,KAAK,CAACG,MADrB,EAC6BH,KAAK,CAACI,KADnC,EAC0CJ,KAAK,CAACK,OADhD,EACyDL,KAAK,CAACM,aAD/D;AAGD,SATkB,CAWnB;;;AACA,YAAIC,OAAO,GAAG,KAAKtB,KAAL,CAAWuB,UAAX,EAAd;;AACA,YAAIC,aAAa,GAAG,KAAKxB,KAAL,CAAWyB,gBAAX,EAApB;;AACA,aAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,OAAO,CAACR,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,eAAKa,SAAL,CAAeJ,OAAO,CAACT,CAAD,CAAtB,EAA2BW,aAAa,CAACX,CAAD,CAAxC;AACD;;AACD,aAAKb,KAAL,CAAW2B,WAAX,CAAuB,IAAvB;AACD,OApCH;AAuCE;AACAX,MAAAA,QAAQ,EAAG,kBAASC,KAAT,EAAgBW,KAAhB,EAAuBT,KAAvB,EAA8B;AACvC,cAAM,IAAIU,KAAJ,CAAU,sBAAV,CAAN;AACD,OA1CH;AA6CE;AACAH,MAAAA,SAAS,EAAG,mBAASI,MAAT,EAAiB;AAC3B,cAAM,IAAID,KAAJ,CAAU,sBAAV,CAAN;AACD,OAhDH;;AAkDE;AACJ;AACA;AACA;AACA;AACIE,MAAAA,gBAAgB,EAAG,0BAASC,IAAT,EAAe;AAChC,cAAM,IAAIH,KAAJ,CAAU,sBAAV,CAAN;AACD,OAzDH;;AA2DE;AACJ;AACA;AACA;AACA;AACA;AACInB,MAAAA,SAAS,EAAG,qBAAW;AACrB,cAAM,IAAImB,KAAJ,CAAU,sBAAV,CAAN;AACD;AAnEH;AA/CF,GADA;AA1BA9C,EAAAA,EAAE,CAACQ,EAAH,CAAMC,MAAN,CAAaI,IAAb,CAAkBC,QAAlB,CAA2BoC,gBAA3B,CAA4C/C,aAA5C,GAA4DA,aAA5D",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Gabriel Munteanu (gabios)\n\n************************************************************************ */\n\n/**\n * AbstractRenderer is an abstract class used to encapsulate\n * behaviours of how a form can be rendered into a mobile page.\n * Its subclasses can extend it and override {@link #addItems} and {@link #addButton}\n * methods in order to customize the way the form gets into the DOM.\n *\n *\n */\nqx.Class.define(\"qx.ui.mobile.form.renderer.AbstractRenderer\",\n{\n  type : \"abstract\",\n  extend : qx.ui.mobile.core.Widget,\n  implement : qx.ui.form.renderer.IFormRenderer,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param form {qx.ui.mobile.form.Form} The form to be rendered\n   */\n  construct : function(form)\n  {\n    this.base(arguments);\n\n    this._form = form;\n    this._render();\n\n    form.addListener(\"change\", this._onFormChange, this);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    defaultCssClass :\n    {\n      refine : true,\n      init : \"form\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n   members :\n  {\n    _form : null,\n\n\n    /**\n     * Handler responsible for updating the rendered widget as soon as the\n     * form changes.\n     */\n    _onFormChange : function() {\n      this._removeAll();\n      this.resetForm();\n      this._render();\n    },\n\n\n    /**\n     * Renders the for: adds the items and buttons.\n     */\n    _render : function() {\n      // add the groups\n      var groups = this._form.getGroups();\n      for (var i = 0; i < groups.length; i++)\n      {\n        var group = groups[i];\n        this.addItems(\n          group.items, group.labels, group.title, group.options, group.headerOptions\n        );\n      }\n\n      // add the buttons\n      var buttons = this._form.getButtons();\n      var buttonOptions = this._form.getButtonOptions();\n      for (var i = 0; i < buttons.length; i++) {\n        this.addButton(buttons[i], buttonOptions[i]);\n      }\n      this._form.setRenderer(this);\n    },\n\n\n    // interface implementation\n    addItems : function(items, names, title) {\n      throw new Error(\"Abstract method call\");\n    },\n\n\n    // interface implementation\n    addButton : function(button) {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Shows an error to the user when a form element is in invalid state\n     * usually it prints an error message, so that user can rectify the filling of the form element.\n     * @param item {qx.ui.mobile.core.Widget} the form item\n     */\n    showErrorForItem : function(item) {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     *\n     * Resets the errors for the form by removing any error messages\n     * inserted into DOM in the case of invalid form elements\n     *\n     */\n    resetForm : function() {\n      throw new Error(\"Abstract method call\");\n    }\n  }\n\n});\n"
  ]
}