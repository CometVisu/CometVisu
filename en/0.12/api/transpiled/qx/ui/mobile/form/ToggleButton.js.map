{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/ToggleButton.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "mobile",
    "core",
    "Widget",
    "include",
    "form",
    "MValue",
    "MForm",
    "MModelProperty",
    "MState",
    "implement",
    "IField",
    "IForm",
    "IModel",
    "construct",
    "value",
    "labelChecked",
    "labelUnchecked",
    "__labelUnchecked",
    "__labelChecked",
    "_setAttribute",
    "__switch",
    "_createSwitch",
    "_add",
    "setValue",
    "addListener",
    "_onTap",
    "_onSwipe",
    "addCssClass",
    "properties",
    "defaultCssClass",
    "refine",
    "init",
    "members",
    "__value",
    "__lastToggleTimestamp",
    "_getChild",
    "toggleButtonSwitch",
    "container",
    "Composite",
    "_setValue",
    "Error",
    "removeCssClass",
    "_getValue",
    "toggle",
    "getValue",
    "evt",
    "_checkLastPointerTime",
    "direction",
    "getDirection",
    "elapsedTime",
    "Date",
    "getTime",
    "destruct",
    "removeListener",
    "_disposeObjects",
    "ToggleButton"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n     * Christopher Zuendorf (czuendorf)\n\n************************************************************************ */\n\n/**\n * A toggle Button widget\n *\n * If the user tap the button, the button toggles between the <code>ON</code>\n * and <code>OFF</code> state.\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var button = new qx.ui.mobile.form.ToggleButton(false,\"YES\",\"NO\");\n *\n *   button.addListener(\"changeValue\", function(e) {\n *     alert(e.getData());\n *   }, this);\n *\n *   this.getRoot.add(button);\n * </pre>\n *\n * This example creates a toggle button and attaches an\n * event listener to the {@link #changeValue} event.\n */\nqx.Class.define(\"qx.ui.mobile.form.ToggleButton\",\n{\n  extend : qx.ui.mobile.core.Widget,\n  include : [\n    qx.ui.mobile.form.MValue,\n    qx.ui.form.MForm,\n    qx.ui.form.MModelProperty,\n    qx.ui.mobile.form.MState\n  ],\n  implement : [\n    qx.ui.form.IField,\n    qx.ui.form.IForm,\n    qx.ui.form.IModel\n  ],\n\n\n  /**\n   * @param value {Boolean?null} The value of the button\n   * @param labelChecked {Boolean?\"ON\"} The value of the text display when toggleButton is active\n   * @param labelUnchecked {Boolean?\"OFF\"} The value of the text display when toggleButton is inactive\n   */\n  construct : function(value, labelChecked, labelUnchecked)\n  {\n    this.base(arguments);\n\n    if(labelChecked && labelUnchecked) {\n       this.__labelUnchecked = labelUnchecked;\n       this.__labelChecked = labelChecked;\n    }\n\n    this._setAttribute(\"data-label-checked\", this.__labelChecked);\n    this._setAttribute(\"data-label-unchecked\", this.__labelUnchecked);\n\n    this.__switch = this._createSwitch();\n    this._add(this.__switch);\n\n    if (value) {\n      this.setValue(value);\n    }\n\n    this.addListener(\"tap\", this._onTap, this);\n    this.addListener(\"swipe\", this._onSwipe, this);\n\n    this.addCssClass(\"gap\");\n  },\n\n\n  properties :\n  {\n    // overridden\n    defaultCssClass :\n    {\n      refine : true,\n      init : \"togglebutton\"\n    }\n  },\n\n\n  members :\n  {\n    __switch : null,\n    __value : false,\n    __labelUnchecked : \"OFF\",\n    __labelChecked : \"ON\",\n    __lastToggleTimestamp : 0,\n\n\n    /**\n     * Returns the child control of the toggle button.\n     *\n     * @return {qx.ui.mobile.container.Composite} the child control.\n     */\n    _getChild : function() {\n      return this.__switch;\n    },\n\n\n    /**\n     * Creates the switch control of the widget.\n     * @return {qx.ui.mobile.container.Composite} The switch control.\n     */\n    _createSwitch : function() {\n      var toggleButtonSwitch = new qx.ui.mobile.container.Composite();\n      toggleButtonSwitch.addCssClass(\"togglebutton-switch\");\n      return toggleButtonSwitch;\n    },\n\n\n    /**\n     * Sets the value [true/false] of this toggle button.\n     * It is called by setValue method of qx.ui.mobile.form.MValue mixin\n     * @param value {Boolean} the new value of the toggle button\n     */\n    _setValue : function(value)\n    {\n      if(typeof value !== 'boolean') {\n        throw new Error(\"value for \"+this+\" should be boolean\");\n      }\n      if (value) {\n        this.addCssClass(\"checked\");\n      } else {\n        this.removeCssClass(\"checked\");\n      }\n       this.__value = value;\n    },\n\n    /**\n     * Gets the value [true/false] of this toggle button.\n     * It is called by getValue method of qx.ui.mobile.form.MValue mixin\n     * @return {Boolean} the value of the toggle button\n     */\n    _getValue : function() {\n      return this.__value;\n    },\n\n\n    /**\n     * Toggles the value of the button.\n     */\n    toggle : function() {\n        this.setValue(!this.getValue());\n    },\n\n\n    /**\n     * Event handler. Called when the tap event occurs.\n     * Toggles the button.\n     *\n     * @param evt {qx.event.type.Tap} The tap event.\n     */\n    _onTap : function(evt)\n    {\n      if(this._checkLastPointerTime()) {\n        this.toggle();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the swipe event occurs.\n     * Toggles the button, when.\n     *\n     * @param evt {qx.event.type.Swipe} The swipe event.\n     */\n    _onSwipe : function(evt)\n    {\n      if (this._checkLastPointerTime()) {\n        var direction = evt.getDirection();\n        if (direction == \"left\") {\n          if (this.__value == true) {\n            this.toggle();\n          }\n        } else {\n          if (this.__value == false) {\n            this.toggle();\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Checks if last touch event (swipe,tap) is more than 500ms ago.\n     * Bugfix for several simulator/emulator, when tap is immediately followed by a swipe.\n     * @return {Boolean} <code>true</code> if the last event was more than 500ms ago\n     */\n    _checkLastPointerTime : function() {\n      var elapsedTime = new Date().getTime() - this.__lastToggleTimestamp;\n      this.__lastToggleTimestamp = new Date().getTime();\n      return elapsedTime>500;\n    }\n  },\n\n\n  destruct : function()\n  {\n    this.removeListener(\"tap\", this._onTap, this);\n    this.removeListener(\"swipe\", this._onSwipe, this);\n\n    this._disposeObjects(\"__switch\",\"__labelUnchecked\",\"__labelChecked\");\n  }\n});\n"
  ]
}