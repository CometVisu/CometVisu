{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/MValue.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "value",
    "setValue",
    "_getTagName",
    "event",
    "Registration",
    "addListener",
    "getContentElement",
    "_onChangeContent",
    "_onInput",
    "_onFocus",
    "_onBlur",
    "events",
    "properties",
    "liveUpdate",
    "check",
    "init",
    "members",
    "__oldValue",
    "__inputTimeoutHandle",
    "__hasFocus",
    "_convertValue",
    "hasFocus",
    "_setValue",
    "_setAttribute",
    "__fireChangeValue",
    "getValue",
    "_getValue",
    "_getAttribute",
    "resetValue",
    "evt",
    "getData",
    "data",
    "fireDataEvent",
    "getLiveUpdate",
    "_getCaretPosition",
    "val",
    "slice",
    "selectionStart",
    "length",
    "_setCaretPosition",
    "position",
    "setSelectionRange",
    "destruct",
    "removeListener",
    "ui",
    "mobile",
    "form",
    "MValue"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * The mixin contains all functionality to provide a value property for input\n * widgets.\n *\n * @require(qx.event.handler.Input)\n */\nqx.Mixin.define(\"qx.ui.mobile.form.MValue\",\n{\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param value {var?null} The value of the widget.\n   */\n  construct : function(value)\n  {\n    if (value) {\n      this.setValue(value);\n    }\n\n    if (this._getTagName() == \"input\" || this._getTagName() == \"textarea\") {\n      qx.event.Registration.addListener(this.getContentElement(), \"change\", this._onChangeContent, this);\n      qx.event.Registration.addListener(this.getContentElement(), \"input\", this._onInput, this);\n    }\n\n    this.addListener(\"focus\", this._onFocus,this);\n    this.addListener(\"blur\", this._onBlur,this);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * The event is fired on every keystroke modifying the value of the field.\n     *\n     * The method {@link qx.event.type.Data#getData} returns the\n     * current value of the text field.\n     */\n    \"input\" : \"qx.event.type.Data\",\n\n\n    /**\n     * The event is fired each time the text field looses focus and the\n     * text field values has changed.\n     *\n     * If you change {@link #liveUpdate} to true, the changeValue event will\n     * be fired after every keystroke and not only after every focus loss. In\n     * that mode, the changeValue event is equal to the {@link #input} event.\n     *\n     * The method {@link qx.event.type.Data#getData} returns the\n     * current text value of the field.\n     */\n    \"changeValue\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Whether the {@link #changeValue} event should be fired on every key\n     * input. If set to true, the changeValue event is equal to the\n     * {@link #input} event.\n     */\n    liveUpdate :\n    {\n      check : \"Boolean\",\n      init : false\n    }\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __oldValue : null,\n    __inputTimeoutHandle : null,\n    __hasFocus : null,\n\n\n    /**\n     * Converts the incoming value.\n     *\n     * @param value {var} The value to convert\n     * @return {var} The converted value\n     */\n    _convertValue : function(value)\n    {\n      if(typeof value === 'boolean')\n      {\n        return value;\n      }\n      else if (typeof value === 'number')\n      {\n        return value;\n      }\n      else\n      {\n        return value || \"\";\n      }\n    },\n\n\n    /**\n    * Handler for <code>focus</code> event.\n    */\n    _onFocus : function() {\n      this.__hasFocus = true;\n    },\n\n\n    /**\n    * Handler for <code>blur</code> event.\n    */\n    _onBlur : function() {\n      this.__hasFocus = false;\n    },\n\n\n    /**\n    * Returns whether this widget has focus or not.\n    * @return {Boolean} <code>true</code> or <code>false</code>\n    */\n    hasFocus : function() {\n      return this.__hasFocus;\n    },\n\n\n    /**\n     * Sets the value.\n     *\n     * @param value {var} The value to set\n     */\n    setValue : function(value)\n    {\n      value = this._convertValue(value);\n      if (this.__oldValue != value)\n      {\n        if (this._setValue) {\n          this._setValue(value);\n        } else {\n          this._setAttribute(\"value\", value);\n        }\n        this.__fireChangeValue(value);\n      }\n    },\n\n    /**\n     * Returns the set value.\n     *\n     * @return {var} The set value\n     */\n    getValue : function()\n    {\n      return this._convertValue(this._getValue ? this._getValue() : this._getAttribute(\"value\"));\n    },\n\n\n    /**\n     * Resets the value.\n     */\n    resetValue : function()\n    {\n      this.setValue(null);\n    },\n\n\n    /**\n     * Event handler. Called when the {@link #changeValue} event occurs.\n     *\n     * @param evt {qx.event.type.Data} The event, containing the changed content.\n     */\n    _onChangeContent : function(evt)\n    {\n      this.__fireChangeValue(this._convertValue(evt.getData()));\n    },\n\n\n    /**\n     * Event handler. Called when the {@link #input} event occurs.\n     *\n     * @param evt {qx.event.type.Data} The event, containing the changed content.\n     */\n    _onInput : function(evt)\n    {\n      var data = evt.getData();\n      this.fireDataEvent(\"input\", data, true);\n      if (this.getLiveUpdate()) {\n        if (this._setValue) {\n          this._setValue(data);\n        } else {\n          this.__fireChangeValue(this._convertValue(data));\n        }\n      }\n    },\n\n\n    /**\n    * Returns the caret position of this widget.\n    * @return {Integer} the caret position.\n    */\n    _getCaretPosition : function() {\n      var val = this.getContentElement().value;\n      if(val && this._getAttribute(\"type\") !== \"number\") {\n        return val.slice(0, this.getContentElement().selectionStart).length;\n      } else {\n        return val.length;\n      }\n    },\n\n\n    /**\n     * Sets the caret position on this widget.\n     * @param position {Integer} the caret position.\n     */\n    _setCaretPosition: function(position) {\n      if (position != null && this.hasFocus()) {\n        if (this._getAttribute(\"type\") !== \"number\" && this.getContentElement().setSelectionRange) {\n          this.getContentElement().setSelectionRange(position, position);\n        }\n      }\n    },\n\n\n    /**\n     * Fires the {@link #changeValue} event.\n     *\n     * @param value {var} The current value to fire.\n     */\n    __fireChangeValue : function(value)\n    {\n      if (this.__oldValue != value)\n      {\n        this.__oldValue = value;\n        this.fireDataEvent(\"changeValue\", value);\n      }\n    }\n  },\n\n\n  destruct : function() {\n    this.removeListener(\"focus\", this._onFocus,this);\n    this.removeListener(\"blur\", this._onBlur,this);\n  }\n});\n"
  ]
}