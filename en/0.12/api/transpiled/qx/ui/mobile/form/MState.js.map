{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/MState.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__states",
    "addState",
    "state",
    "addCssClass",
    "hasState",
    "removeState",
    "removeCssClass",
    "replaceState",
    "oldState",
    "newState",
    "ui",
    "mobile",
    "form",
    "MState"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,0BAAhB,EACA;AAEE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AACA;AACF;AACA;AACEC,MAAAA,SAAQ,EAAE,IAJV;;AAMA;AACF;AACA;AACA;AACA;AACIC,MAAAA,QAAQ,EAAG,kBAASC,KAAT,EAAgB;AACzB,YAAG,KAAKF,SAAL,KAAkB,IAArB,EAA2B;AACzB,eAAKA,SAAL,GAAgB,EAAhB;AACD;;AACD,aAAKA,SAAL,CAAcE,KAAd,IAAuB,IAAvB;AACA,aAAKC,WAAL,CAAiBD,KAAjB;AACD,OAjBH;;AAmBE;AACJ;AACA;AACA;AACA;AACA;AACIE,MAAAA,QAAQ,EAAG,kBAASF,KAAT,EAAgB;AACzB,eAAO,KAAKF,SAAL,KAAgB,IAAhB,IAAwB,KAAKA,SAAL,CAAcE,KAAd,CAA/B;AACD,OA3BH;;AA6BE;AACJ;AACA;AACA;AACA;AACIG,MAAAA,WAAW,EAAG,qBAASH,KAAT,EAAgB;AAC5B,YAAG,KAAKE,QAAL,CAAcF,KAAd,CAAH,EAAyB;AACvB,iBAAO,KAAKF,SAAL,CAAcE,KAAd,CAAP;AACA,eAAKI,cAAL,CAAoBJ,KAApB;AACD;AACF,OAvCH;;AAyCE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIK,MAAAA,YAAY,EAAG,sBAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAC1C,YAAG,KAAKL,QAAL,CAAcI,QAAd,CAAH,EACA;AACE,iBAAO,KAAKR,SAAL,CAAcQ,QAAd,CAAP;AACA,eAAKR,SAAL,CAAcS,QAAd,IAA0B,IAA1B;AACA,eAAKH,cAAL,CAAoBE,QAApB;AACA,eAAKL,WAAL,CAAiBM,QAAjB;AACD,SAND,MAQA;AACE,eAAKR,QAAL,CAAcQ,QAAd;AACD;AACF;AA7DH;AATF,GADA;AALAhB,EAAAA,EAAE,CAACiB,EAAH,CAAMC,MAAN,CAAaC,IAAb,CAAkBC,MAAlB,CAAyBjB,aAAzB,GAAyCA,aAAzC",
  "sourcesContent": [
    "/**\n * The mixin contains all functionality to provide methods\n * for form elements to manipulate their state. [usually \"valid\" and \"invalid\"]\n *\n */\nqx.Mixin.define(\"qx.ui.mobile.form.MState\",\n{\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n  /**\n   * The states of the element\n   */\n  __states: null,\n\n  /**\n   * Adds a state to the element\n   * @param state {String} the state to be added\n   *\n   */\n    addState : function(state) {\n      if(this.__states === null) {\n        this.__states = {};\n      }\n      this.__states[state] = true;\n      this.addCssClass(state);\n    },\n\n    /**\n     * Checks whether the element has the state passed as argument\n     * @param state {String} the state to be checked\n     * @return {Boolean} true if the element has the state, false if it doesn't.\n     *\n     */\n    hasState : function(state) {\n      return this.__states!==null && this.__states[state] ;\n    },\n\n    /**\n     * Removes a state from the element\n     * @param state {String} the state to be removed\n     *\n     */\n    removeState : function(state) {\n      if(this.hasState(state)) {\n        delete this.__states[state];\n        this.removeCssClass(state);\n      }\n    },\n\n    /**\n     * Replaces a state of the element with a new state.\n     * If the element doesn't have the state to be removed, then th new state will\n     * just be added.\n     * @param oldState {String} the state to be replaced\n     * @param newState {String} the state to get injected in the oldState's place\n     *\n     */\n    replaceState : function(oldState, newState) {\n      if(this.hasState(oldState))\n      {\n        delete this.__states[oldState];\n        this.__states[newState] = true;\n        this.removeCssClass(oldState);\n        this.addCssClass(newState);\n      }\n      else\n      {\n        this.addState(newState);\n      }\n    }\n\n  }\n});\n"
  ]
}