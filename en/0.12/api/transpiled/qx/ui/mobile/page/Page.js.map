{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/page/Page.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "mobile",
    "container",
    "Composite",
    "include",
    "core",
    "MResize",
    "construct",
    "layout",
    "VBox",
    "statics",
    "_currentPage",
    "_onDeviceReady",
    "bom",
    "Event",
    "addNativeListener",
    "document",
    "page",
    "Page",
    "_onBackButton",
    "_onMenuButton",
    "Environment",
    "get",
    "exit",
    "back",
    "navigator",
    "app",
    "exitApp",
    "menu",
    "events",
    "properties",
    "defaultCssClass",
    "refine",
    "init",
    "lifeCycleState",
    "check",
    "apply",
    "members",
    "__initialized",
    "show",
    "stop",
    "initialize",
    "start",
    "exclude",
    "triggeredByKeyEvent",
    "Init",
    "getApplication",
    "fireDataEvent",
    "value",
    "_back",
    "fireEvent",
    "isInitialized",
    "_initialize",
    "setLifeCycleState",
    "_start",
    "_stop",
    "pause",
    "_pause",
    "resume",
    "_resume",
    "wait",
    "_wait",
    "_applyLifeCycleState",
    "old",
    "defer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * A page is a widget which provides a screen with which users\n * can interact in order to do something. Most times a page provides a single task\n * or a group of related tasks.\n *\n * A qooxdoo mobile application is usually composed of one or more loosely bound\n * pages. Typically there is one page that presents the \"main\" view.\n *\n * Pages can have one or more child widgets from the {@link qx.ui.mobile}\n * namespace. Normally a page provides a {@link qx.ui.mobile.navigationbar.NavigationBar}\n * for the navigation between pages.\n *\n * To navigate between two pages, just call the {@link #show} method of the page\n * that should be shown. Depending on the used page manager a page transition will be animated.\n * There are several animations available. Have\n * a look at the {@link qx.ui.mobile.page.Manager} manager or {@link qx.ui.mobile.layout.Card} card layout for more information.\n *\n * A page has predefined lifecycle methods that get called by the used page manager\n * when a page gets shown. Each time another page is requested to be shown the currently shown page\n * is stopped. The other page, will be, if shown for the first time, initialized and started\n * afterwards. For all called lifecycle methods an event is fired.\n *\n * Call of the {@link #show} method triggers the following lifecycle methods:\n *\n * * <strong>initialize</strong>: Initializes the page to show\n * * <strong>start</strong>: Gets called when the page to show is started\n * * <strong>stop</strong>:  Stops the current page\n *\n * IMPORTANT: Define all child widgets of a page when the {@link #initialize} lifecycle\n * method is called, either by listening to the {@link #initialize} event or overriding\n * the {@link #_initialize} method. This is because a page can be instanced during\n * application startup and would then decrease performance when the widgets would be\n * added during constructor call. The <code>initialize</code> event and the\n * {@link #_initialize} lifecycle method are only called when the page is shown\n * for the first time.\n *\n */\nqx.Class.define(\"qx.ui.mobile.page.Page\",\n{\n  extend : qx.ui.mobile.container.Composite,\n  include : qx.ui.mobile.core.MResize,\n\n /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function(layout)\n  {\n    this.base(arguments, layout || new qx.ui.mobile.layout.VBox());\n  },\n\n\n\n /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics : {\n    _currentPage : null,\n\n    /**\n     * Event handler. Called when the device is ready.\n     */\n    _onDeviceReady : function() {\n      qx.bom.Event.addNativeListener(document, \"backbutton\", qx.ui.mobile.page.Page._onBackButton);\n      qx.bom.Event.addNativeListener(document, \"menubutton\", qx.ui.mobile.page.Page._onMenuButton);\n    },\n\n\n    /**\n     * Event handler. Called when the back button of the device was pressed.\n     */\n    _onBackButton : function()\n    {\n      if (qx.core.Environment.get(\"phonegap\") && qx.core.Environment.get(\"os.name\") == \"android\")\n      {\n        var exit = true;\n        if (qx.ui.mobile.page.Page._currentPage) {\n          exit = qx.ui.mobile.page.Page._currentPage.back(true);\n        }\n        if (exit) {\n          navigator.app.exitApp();\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the menu button of the device was pressed.\n     */\n    _onMenuButton : function()\n    {\n      if (qx.core.Environment.get(\"phonegap\") && qx.core.Environment.get(\"os.name\") == \"android\")\n      {\n        if (qx.ui.mobile.page.Page._currentPage) {\n          qx.ui.mobile.page.Page._currentPage.menu();\n        }\n      }\n    }\n  },\n\n\n  events :\n  {\n    /** Fired when the lifecycle method {@link #initialize} is called */\n    \"initialize\" : \"qx.event.type.Event\",\n\n    /** Fired when the lifecycle method {@link #start} is called */\n    \"start\" : \"qx.event.type.Event\",\n\n    /** Fired when the lifecycle method {@link #stop} is called */\n    \"stop\" : \"qx.event.type.Event\",\n\n    /** Fired when the lifecycle method {@link #pause} is called */\n    \"pause\" : \"qx.event.type.Event\",\n\n    /** Fired when the lifecycle method {@link #resume} is called */\n    \"resume\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired when the method {@link #back} is called and not prevented by\n     * {@link qx.application.Mobile#back}. Data indicating whether\n     * the action was triggered by a key event or not.\n     */\n    \"back\" : \"qx.event.type.Data\",\n\n    /** Fired when the method {@link #menu} is called */\n    \"menu\" : \"qx.event.type.Event\",\n\n    /** Fired when the method {@link #wait} is called */\n    \"wait\" : \"qx.event.type.Event\"\n  },\n\n\n  properties :\n  {\n    // overridden\n    defaultCssClass :\n    {\n      refine : true,\n      init : \"page\"\n    },\n\n\n    /**\n     * The current active life cycle state of this page.\n     */\n    lifeCycleState: {\n      init: null,\n      check: [\"initialize\", \"start\", \"stop\", \"resume\", \"wait\", \"pause\"],\n      apply: \"_applyLifeCycleState\"\n    }\n  },\n\n\n /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __initialized : false,\n\n    // overridden\n    show : function(properties)\n    {\n      if (qx.ui.mobile.page.Page._currentPage) {\n        qx.ui.mobile.page.Page._currentPage.stop();\n      }\n      qx.ui.mobile.page.Page._currentPage = this;\n      this.initialize();\n      this.start();\n      this.base(arguments, properties);\n    },\n\n\n    // overridden\n    exclude : function(properties)\n    {\n      this.stop();\n      this.base(arguments, properties);\n    },\n\n\n    /**\n     * Fires the <code>back</code> event. Call this method if you want to request\n     * a back action. For Android PhoneGap applications this method gets called\n     * by the used page manager when the back button was pressed. Return <code>true</code>\n     * to exit the application.\n     *\n     * The back request can prevented by calling the {@link qx.event.type.Event#preventDefault} on\n     * the {@link qx.application.Mobile#back} event.\n     *\n     * @param triggeredByKeyEvent {Boolean} Whether the back action was triggered by a key event.\n     * @return {Boolean} Whether the exit should be exit or not. Return <code>true</code\n     *     to exit the application. Only needed for Android PhoneGap applications.\n     */\n    back : function(triggeredByKeyEvent)\n    {\n      if (qx.core.Init.getApplication().fireDataEvent(\"back\", triggeredByKeyEvent, null, true))\n      {\n        this.fireDataEvent(\"back\", triggeredByKeyEvent);\n        var value = this._back(triggeredByKeyEvent);\n        return value || false;\n      } else {\n        return false;\n      }\n    },\n\n\n    /**\n     * Override this method if you want to perform a certain action when back\n     * is called.\n     *\n     * @param triggeredByKeyEvent {Boolean} Whether the back action was triggered by a key event.\n     * @return {Boolean} Whether the exit should be exit or not. Return <code>true</code\n     *     to exit the application. Only needed for Android PhoneGap applications.\n     * @see #back\n     * @abstract\n     */\n    _back : function(triggeredByKeyEvent)\n    {\n\n    },\n\n\n    /**\n     * Only used by Android PhoneGap applications. Called by the used page manager\n     * when the menu button was pressed. Fires the <code>menu</code> event.\n     */\n    menu : function() {\n      this.fireEvent(\"menu\");\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      Lifecycle Methods\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Lifecycle method. Called by the page manager when the page is shown.\n     * Fires the <code>initialize</code> event. You should create and add all your\n     * child widgets of the view,  either by listening to the {@link #initialize} event or overriding\n     * the {@link #_initialize} method. This is because a page can be instanced during\n     * application startup and would then decrease performance when the widgets would be\n     * added during constructor call. The {@link #_initialize} lifecycle method and the\n     * <code>initialize</code> are only called once when the page is shown for the first time.\n     */\n    initialize : function()\n    {\n      if (!this.isInitialized())\n      {\n        this._initialize();\n        this.__initialized = true;\n        this.setLifeCycleState(\"initialize\");\n      }\n    },\n\n\n    /**\n     * Override this method if you would like to perform a certain action when initialize\n     * is called.\n     *\n     * @see #initialize\n     */\n    _initialize : function()\n    {\n\n    },\n\n\n    /**\n     * Returns the status of the initialization of the page.\n     *\n     * @return {Boolean} Whether the page is already initialized or not\n     */\n    isInitialized : function()\n    {\n      return this.__initialized;\n    },\n\n\n    /**\n     * Lifecycle method. Called by the page manager after the {@link #initialize}\n     * method when the page is shown. Fires the <code>start</code> event. You should\n     * register all your event listener when this event occurs, so that no page\n     * updates are done when page is not shown.\n     */\n    start : function() {\n      this._start();\n      this.setLifeCycleState(\"start\");\n    },\n\n\n    /**\n     * Override this method if you would like to perform a certain action when start\n     * is called.\n     *\n     * @see #start\n     */\n    _start : function()\n    {\n\n    },\n\n\n    /**\n     * Lifecycle method. Called by the page manager when another page is shown.\n     * Fires the <code>stop</code> event. You should unregister all your event\n     * listener when this event occurs, so that no page updates are down when page is not shown.\n     */\n    stop : function()\n    {\n      if(!this.isInitialized()) {\n        return;\n      }\n      this._stop();\n      this.setLifeCycleState(\"stop\");\n    },\n\n\n    /**\n     * Override this method if you would like to perform a certain action when stop\n     * is called.\n     *\n     * @see #stop\n     */\n    _stop : function()\n    {\n\n    },\n\n\n    /**\n     * Lifecycle method. Not used right now. Should be called when the current page\n     * is interrupted, e.g. by a dialog, so that page view updates can be interrupted.\n     * Fires the <code>pause</code> event.\n     */\n    pause : function() {\n      this._pause();\n      this.setLifeCycleState(\"pause\");\n    },\n\n\n    /**\n     * Override this method if you would like to perform a certain action when pause\n     * is called.\n     *\n     * @see #pause\n     */\n    _pause : function()\n    {\n\n    },\n\n\n    /**\n     * Lifecycle method. Not used right now. Should be called when the current page\n     * is resuming from a interruption, e.g. when a dialog is closed, so that page\n     * can resume updating the view.\n     * Fires the <code>resume</code> event.\n     */\n    resume : function() {\n      this._resume();\n      this.setLifeCycleState(\"resume\");\n    },\n\n\n    /**\n     * Override this method if you would like to perform a certain action when resume\n     * is called.\n     *\n     * @see #resume\n     */\n    _resume : function()\n    {\n\n    },\n\n\n    /**\n     * Lifecycle method. Not used right now. Should be called when the current page\n     * waits for data request etc.\n     * Fires the <code>wait</code> event.\n     */\n    wait : function() {\n      this._wait();\n      this.setLifeCycleState(\"wait\");\n    },\n\n\n    /**\n     * Override this method if you would like to perform a certain action when wait\n     * is called.\n     *\n     * @see #wait\n     */\n    _wait : function()\n    {\n\n    },\n\n\n    // property apply\n    _applyLifeCycleState : function(value, old) {\n      if(value == \"start\" || value == \"stop\") {\n        qx.core.Init.getApplication().fireEvent(value);\n      }\n\n      this.fireEvent(value);\n    }\n  },\n\n\n\n /*\n  *****************************************************************************\n      DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    if (qx.core.Environment.get(\"phonegap\") && qx.core.Environment.get(\"os.name\") == \"android\")\n    {\n      qx.bom.Event.addNativeListener(document, \"deviceready\", statics._onDeviceReady);\n    }\n  }\n});\n"
  ]
}