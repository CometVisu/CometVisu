{
  "className": "qx.ui.website.Widget",
  "packageName": "qx.ui.website",
  "name": "Widget",
  "superClass": "qxWeb",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 31,
        "column": 0
      },
      "end": {
        "line": 349,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2013 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (wittemann)\n Daniel Wagner (danielwagner)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This is the base collection for all widgets and offers a good foundation\n for all widgets including enabled state handling, config and template storage\n and event handling to name a few key features.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Dataset"
        },
        {
          "name": "@require",
          "body": "qx.module.util.String"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Native"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Widget"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "widget": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Factory method for the widget which converts a standard\n collection into a collection of widgets.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} A widget.",
            "type": "qx.ui.website.Widget",
            "description": " A widget."
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "create": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 62,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new collection from the given argument. This can either be an\n HTML string, a single DOM element or an array of elements</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "html {String|Element[]} HTML string or DOM element(s)",
            "paramName": "html",
            "description": " HTML string or DOM element(s)",
            "type": [
              "String",
              {
                "type": "Element",
                "dimensions": 2
              }
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} Collection of elements",
            "type": "qxWeb",
            "description": " Collection of elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "initWidgets": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fetches elements with a data attribute named <code>data-qx-class</code>\n containing the class name of the desired widget and initializes them as\n widgets.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selector {String?} Optional selector expression or filter function to\n restrict the list of elements",
            "paramName": "selector",
            "description": " Optional selector expression or filter function to\n restrict the list of elements",
            "optional": true,
            "type": "String"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toWidgetCollection": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a wrapper Array that maps the widget API available on\n the first item in the current collection to all items in the\n collection.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb[]} Collection of widgets",
            "type": "qxWeb[]",
            "description": " Collection of widgets"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 106,
        "column": 14
      },
      "end": {
        "line": 112,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__cssPrefix": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "init": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for initializing of the widget. This checks for the data attribute\n named <code>data-qx-class</code> and initializes the widget if necessary.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the widget has been initialized",
            "type": "Boolean",
            "description": " <code>true</code> if the widget has been initialized"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCssPrefix": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the proper CSS prefix for the current widget. This prefix is\n based on the current classname.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The CSS prefix for the current object.",
            "type": "String",
            "description": " The CSS prefix for the current object."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setEnabled": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Changes the enabled state of the current collection, which means all\n widgets in the collection. This sets the disabled attribute on the\n elements and all its children.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} The enabled value.",
            "paramName": "value",
            "description": " The enabled value.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The collection for chaining",
            "type": "qx.ui.website.Widget",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getEnabled": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 176,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns weather the first widget in the collection is enabled or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} The enabled state of the collection.",
            "type": "Boolean",
            "description": " The enabled state of the collection."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setTemplate": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Setter for the widget-specific templates. The available templates can\n be found in the documentation of the corresponding widget. The templates\n will be rendered using\n <a href='https://github.com/janl/mustache.js/'>mustache.js</a>.\n Please keep in mind to call {@link #render} after you change any\n template or config setting.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the template.",
            "paramName": "name",
            "description": " The name of the template.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "template {String} The template string.",
            "paramName": "template",
            "description": " The template string.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The widget instance for chaining.",
            "type": "qx.ui.website.Widget",
            "description": " The widget instance for chaining."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setConfig": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Setter for the widget-specific config. The available config settings can\n be found in the documentation of the corresponding widget. Each config\n setting can be set in the markup as data-attribute, prefixed with\n <code>data-qx</code> e.g. <code>data-qx-length=\"5\"</code>.\n Please keep in mind to call {@link #render} after you change any\n template or config setting.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the config setting.",
            "paramName": "name",
            "description": " The name of the config setting.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {var} The value of the config setting.",
            "paramName": "config",
            "description": " The value of the config setting.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The widget instance for chaining.",
            "type": "qx.ui.website.Widget",
            "description": " The widget instance for chaining."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setData": {
      "location": {
        "start": {
          "line": 224,
          "column": 4
        },
        "end": {
          "line": 231,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to set either config or template values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Either <code>templates</code> or <code>config</code>.",
            "paramName": "type",
            "description": " Either <code>templates</code> or <code>config</code>.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "name {String} The name for the value to store.",
            "paramName": "name",
            "description": " The name for the value to store.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} The data to store.",
            "paramName": "data",
            "description": " The data to store.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The widget instance for chaining.",
            "type": "qx.ui.website.Widget",
            "description": " The widget instance for chaining."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getTemplate": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the used template. This includes custom templates\n as the default templates defined by the widgets.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the template.",
            "paramName": "name",
            "description": " The name of the template.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The template string or <code>undefined</code>.",
            "type": "String",
            "description": " The template string or <code>undefined</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getConfig": {
      "location": {
        "start": {
          "line": 255,
          "column": 4
        },
        "end": {
          "line": 257,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the config setting currently in use for the given widget.\n This can either be the user set config value, the value set in\n the markup via data-attribute, the widgets default config value or\n <code>undefined</code>, if non is set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the config.",
            "paramName": "name",
            "description": " The name of the config.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the config or <code>undefined</code>.",
            "type": "var",
            "description": " The value of the config or <code>undefined</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getData": {
      "location": {
        "start": {
          "line": 269,
          "column": 4
        },
        "end": {
          "line": 297,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for querying the values for templates and configs. In the\n case of a config value, the method also reads the corresponding data-attribute\n for possible values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Either <code>templates</code> or <code>config</code>.",
            "paramName": "type",
            "description": " Either <code>templates</code> or <code>config</code>.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "name {String} The name for the value to fetch.",
            "paramName": "name",
            "description": " The name for the value to fetch.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value store for the given arguments.",
            "type": "var",
            "description": " The value store for the given arguments."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "render": {
      "location": {
        "start": {
          "line": 307,
          "column": 4
        },
        "end": {
          "line": 310,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The render method is responsible for applying changed config\n and template settings. This method is usually overridden and specified\n by the subclassing widgets like the slider or tabs.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The widget collection for chaining.",
            "type": "qx.ui.website.Widget",
            "description": " The widget collection for chaining."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 319,
          "column": 4
        },
        "end": {
          "line": 336,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose the widget, making sure all objects are ready for\n garbage collection. This mainly means deleting connections to the\n DOM including event listeners.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} Plain qxWeb collection",
            "type": "qxWeb",
            "description": " Plain qxWeb collection"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.IDisposable",
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 340,
        "column": 10
      },
      "end": {
        "line": 348,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qx.ui.website.Button",
    "qx.ui.website.Calendar",
    "qx.ui.website.Carousel",
    "qx.ui.website.DatePicker",
    "qx.ui.website.Rating",
    "qx.ui.website.Slider",
    "qx.ui.website.Table",
    "qx.ui.website.Tabs"
  ]
}