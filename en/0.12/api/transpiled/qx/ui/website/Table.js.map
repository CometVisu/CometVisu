{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/website/Table.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Widget",
    "construct",
    "selector",
    "context",
    "events",
    "statics",
    "_config",
    "caseSensitive",
    "rowSelection",
    "sortable",
    "_templates",
    "table",
    "model",
    "Table",
    "__model",
    "init",
    "__isNumber",
    "n",
    "Object",
    "prototype",
    "toString",
    "call",
    "isNaN",
    "parseFloat",
    "isFinite",
    "replace",
    "__isDate",
    "val",
    "d",
    "Date",
    "valueOf",
    "__getIndex",
    "htmlCollection",
    "htmlElement",
    "index",
    "i",
    "l",
    "length",
    "item",
    "__getUID",
    "getTime",
    "Math",
    "floor",
    "random",
    "substr",
    "__selectionTypes",
    "__internalCellClass",
    "__internalHeaderClass",
    "__internalSelectionClass",
    "__internalInputClass",
    "__allColumnSelector",
    "__dataColName",
    "__dataColType",
    "__dataSortingKey",
    "__modelSortingKey",
    "__inputLabelClass",
    "__selectedRowClass",
    "__ascSortingClass",
    "__descSortingClass",
    "members",
    "__columnMeta",
    "__sortingFunction",
    "__filterFunction",
    "__filterFunc",
    "__filters",
    "__inputName",
    "__hovered",
    "__sortingData",
    "qxWeb",
    "getNodeName",
    "toUpperCase",
    "Error",
    "tHead",
    "find",
    "addClass",
    "__getColumnMetaData",
    "setModel",
    "setSortingFunction",
    "__defaultColumnSort",
    "__registerEvents",
    "lang",
    "Type",
    "isArray",
    "emit",
    "setColumnType",
    "columnName",
    "type",
    "__checkColumnExistance",
    "getColumnType",
    "eq",
    "getCell",
    "row",
    "col",
    "__getRoot",
    "rows",
    "cells",
    "getRows",
    "setCompareFunction",
    "compareFunc",
    "string",
    "firstUp",
    "setProperty",
    "unsetCompareFunction",
    "_compareString",
    "getCompareFunction",
    "getProperty",
    "func",
    "unsetSortingFunction",
    "setFilterFunction",
    "unsetFilterFunction",
    "__defaultColumnFilter",
    "setColumnFilter",
    "getColumnFilter",
    "setRowFilter",
    "getRowFilter",
    "sort",
    "dir",
    "setSortingClass",
    "__sortDOM",
    "__sort",
    "columName",
    "direction",
    "filter",
    "keyword",
    "resetFilter",
    "appendChild",
    "document",
    "createDocumentFragment",
    "__filterDom",
    "filters",
    "setContent",
    "tableData",
    "__extractTableRows",
    "tbody",
    "empty",
    "appendTo",
    "render",
    "appendContent",
    "data",
    "markup",
    "create",
    "isNode",
    "nodeName",
    "colIndex",
    "__getColumnIndex",
    "filterFunc",
    "__getDataRows",
    "columnIndex",
    "cell",
    "bind",
    "getSortingData",
    "sortingData",
    "getConfig",
    "__applyTemplate",
    "indexOf",
    "__processSelectionInputs",
    "remove",
    "__createInputs",
    "__createInput",
    "__getHeaderRow",
    "getElementsByTagName",
    "cssPrefix",
    "getCssPrefix",
    "clazz",
    "headerInput",
    "selectionMode",
    "checked",
    "inputName",
    "className",
    "currentInput",
    "id",
    "inputNode",
    "insertBefore",
    "tHeadOrFoot",
    "__addClassToHeaderAndFooter",
    "tFoot",
    "colName",
    "headerRow",
    "__getColumName",
    "getAttribute",
    "setAttribute",
    "name",
    "footOrHead",
    "hasClass",
    "dataRows",
    "insertAfter",
    "on",
    "__detectClickedCell",
    "__cellHover",
    "__cellOut",
    "__selectionRendered",
    "__processSelection",
    "inputs",
    "clickedInput",
    "selection",
    "toArray",
    "array",
    "input",
    "push",
    "selectedRows",
    "map",
    "elem",
    "parentNode",
    "removeClass",
    "__fireEvent",
    "eventType",
    "target",
    "colNumber",
    "headCell",
    "e",
    "getTarget",
    "classname",
    "getParents",
    "window",
    "setTimeout",
    "hovered",
    "getClosest",
    "relatedTarget",
    "getRelatedTarget",
    "isChildOf",
    "createdRow",
    "colMeta",
    "renderedRow",
    "inputType",
    "__deleteRows",
    "renderedColIndex",
    "templateApplied",
    "coltemplate",
    "getTemplate",
    "rowCount",
    "__isRowRendered",
    "insertRow",
    "j",
    "colCount",
    "__getDataForColumn",
    "template",
    "__isCellRendered",
    "replaceChild",
    "value",
    "renderedRows",
    "deleteRow",
    "tBodies",
    "rowIndex",
    "__addSortingClassToCol",
    "HeaderOrFooter",
    "removeClasses",
    "meta",
    "columnType",
    "a",
    "b",
    "x",
    "__getSortingKey",
    "y",
    "_compareNumber",
    "Number",
    "headerCell",
    "_compareDate",
    "toLowerCase",
    "__getCellValue",
    "textContent",
    "innerText",
    "len",
    "sortedData",
    "cellValue",
    "defer",
    "$attach"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,qBAApB,EAA2C;AAEzCC,IAAAA,MAAM,EAAGL,EAAE,CAACM,EAAH,CAAMC,OAAN,CAAcC,MAFkB;AAIzCC,IAAAA,SAAS,EAAG,mBAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACtC,kDAAqBD,QAArB,EAA+BC,OAA/B;AACD,KANwC;AAQzCC,IAAAA,MAAM,EAAG;AACP;AACA,qBAAgB,OAFT;;AAGP;AACA,yBAAoB,OAJb;;AAKP;AACA,mBAAc,QANP;;AAOP;AACA,mBAAc,QARP;;AASN;AACD,iBAAY,QAVL;;AAWP;AACA,sBAAiB,OAZV;;AAaP;AACA,oBAAe,QAdR;;AAeP;AACA,cAAS,QAhBF;;AAiBP;AACA,gBAAW;AAlBJ,KARgC;AA8BzCC,IAAAA,OAAO,EAAG;AAER;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG;AACRC,QAAAA,aAAa,EAAG,KADR;AAERC,QAAAA,YAAY,EAAG,MAFP;AAGRC,QAAAA,QAAQ,EAAG;AAHH,OAVF;;AAiBR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,UA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",
  "sourcesContent": [
    "\n/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Romeo Kenfack Tsakem (rkenfack)\n\n************************************************************************ */\n\n/**\n * This is a widget that enhances an HTML table with some basic features like\n * Sorting and Filtering.\n *\n * <h2>CSS Classes</h2>\n * <table>\n *   <thead>\n *     <tr>\n *       <td>Class Name</td>\n *       <td>Applied to</td>\n *       <td>Description</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td><code>qx-table</code></td>\n *       <td>Table element</td>\n *       <td>Identifies the Table widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-cell</code></td>\n *       <td>Table cell (<code>td</code>)</td>\n *       <td>Identifies and styles a cell of the widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-header</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles a header of the table widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-row-selection</code></td>\n *       <td>Table cell (<code>td</code>)</td>\n *       <td>Identifies and styles the cells containing the inputs for the row selection</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-selection-input</code></td>\n *       <td><code>input</code></td>\n *       <td>Identifies and styles input element to select a table row</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-input-label</code></td>\n *       <td>Label element (<code>label</code>)</td>\n *       <td>Identifies and styles label contained in the selection cell. This label can be used to create custom inputs</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-row-selected</code></td>\n *       <td>Selected row (<code>tr</code>)</td>\n *       <td>Identifies and styles the selected table rows</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-sort-asc</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles the header of the current ascendant sorted column</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-sort-desc</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles the header of the current descendant sorted column</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * @group (Widget)\n *\n */\nqx.Bootstrap.define(\"qx.ui.website.Table\", {\n\n  extend : qx.ui.website.Widget,\n\n  construct : function(selector, context) {\n    this.base(arguments, selector, context);\n  },\n\n  events : {\n    /** Fires at each model change */\n    \"modelChange\" : \"Array\",\n    /** Fires at each selection change */\n    \"selectionChange\" : \"qxWeb\",\n    /** Fires each time a cell of the widget is clicked */\n    \"cellClick\" : \"Object\",\n    /** Fires each time a cell of the widget is hovered */\n    \"cellHover\" : \"Object\",\n     /** Fires each time the mouse leave a cell of the table widget */\n    \"cellOut\" : \"Object\",\n    /** Fires after the model has been applied to the widget */\n    \"modelApplied\" : \"Array\",\n    /** Fires each time the value of a cell is rendered into the cell */\n    \"cellRender\" : \"Object\",\n    /** Fires after the table rows have been sorted */\n    \"sort\" : \"Object\",\n    /** Fires after the table rows have been filtered */\n    \"filter\" : \"Object\"\n  },\n\n\n  statics : {\n\n    /**\n    * *caseSensitive*\n    * Determines if the string sorting/filtering should be case sensitive or not. Default value : <code>false</code>.\n    *\n    * *rowSelection*\n    * Defines the row selection type. Possible values are : 'none', 'single', 'multiple'. Default value : <code>none</code>.\n    *\n    */\n    _config : {\n      caseSensitive : false,\n      rowSelection : \"none\",\n      sortable : false\n    },\n\n\n    /**\n    * *columnDefault*\n    * The Default cell template for all the table columns. Default value :\n    *\n    * <pre>\n    *   <td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\n    *     <div class='qx-table-cell-wrapper'>\n    *       <label>{{& value }}</label>\n    *     </div>\n    *   <td>\"\n    * </pre>\n    *\n    * To define a custom template for a specific name use <code>setTemplate('colname', template)</code> or use <br>\n    * <code>setTemplate('columnDefault', template)</code> to set one template for all your table columns.\n    *\n    */\n    _templates : {\n\n      \"columnDefault\" : \"<td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\"+\n                          \"<div class='qx-table-cell-wrapper'>\"+\n                            \"<label>{{& value }}</label>\"+\n                          \"</div>\"+\n                        \"<td>\"\n    },\n\n    /**\n     * Factory method which converts the current collection into a collection of\n     * table widgets.\n     * @param model {Array} The model of the widgets in the collection\n     * @return {qx.ui.website.Table} A new table collection.\n     * @attach {qxWeb}\n     */\n    table : function(model) {\n      var table = new qx.ui.website.Table(this);\n      table.__model = model;\n      table.init();\n      return table;\n    },\n\n    /**\n     * Checks if a given string is a number\n     * @param n {String} The String to check the type for\n     * @return {Boolean} The result of the check\n     */\n    __isNumber : function(n) {\n      return (Object.prototype.toString.call(n) === '[object Number]' ||\n        Object.prototype.toString.call(n) === '[object String]') && !isNaN(parseFloat(n)) && isFinite(n.toString().replace(/^-/, ''));\n    },\n\n    /**\n     * Checks if a given string is a Date\n     * @param val {String} The String to check the type for\n     * @return {Boolean} The result of the check\n     */\n    __isDate : function(val) {\n      var d = new Date(val);\n      return !isNaN(d.valueOf());\n    },\n\n    /**\n     * Gets the index of an HTMLElement inside of an HTMLCollection\n     * @param htmlCollection {HTMLCollection} The HTMLCollection\n     * @param htmlElement {HTMLElement} The HTMLElement\n     * @return {Integer} The position of the htmlElement or -1\n     */\n    __getIndex : function(htmlCollection, htmlElement) {\n      var index = -1;\n      for (var i = 0, l = htmlCollection.length; i < l; i++) {\n        if (htmlCollection.item(i) == htmlElement) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n\n    /**\n    * Generates an unique id\n    * @return {String} The generated id\n    */\n    __getUID : function() {\n      return ((new Date()).getTime() + \"\" + Math.floor(Math.random() * 1000000)).substr(0, 18);\n    },\n\n\n    /** */\n    __selectionTypes : [\"single\", \"multiple\", \"none\"],\n    /** */\n    __internalCellClass : \"qx-table-cell\",\n    /** */\n    __internalHeaderClass : \"qx-table-header\",\n    /** */\n    __internalSelectionClass : \"qx-table-row-selection\",\n    /** */\n    __internalInputClass : \"qx-table-selection-input\",\n    /** */\n    __allColumnSelector : \"qx-table-all-columns\",\n    /** */\n    __dataColName : \"data-qx-table-col-name\",\n    /** */\n    __dataColType : \"data-qx-table-col-type\",\n    /** */\n    __dataSortingKey : \"data-qx-table-cell-key\",\n    /** */\n    __modelSortingKey : \"cellKey\",\n    /** */\n    __inputLabelClass : \"qx-table-input-label\",\n    /** */\n    __selectedRowClass : \"qx-table-row-selected\",\n    /** */\n    __ascSortingClass : \"qx-table-sort-asc\",\n    /** */\n    __descSortingClass :  \"qqx-table-sort-desc\"\n\n  },\n\n\n\n  members : {\n\n    __model: null,\n    __columnMeta: null,\n    __sortingFunction: null,\n    __filterFunction: null,\n    __filterFunc: null,\n    __filters: null,\n    __inputName: null,\n    __hovered: null,\n    __sortingData: null,\n\n    // overridden\n    init : function() {\n\n      if (!this.base(arguments)) {\n        return false;\n      }\n\n      var model = this.__model;\n\n      if (qxWeb.getNodeName(this).toUpperCase() !== \"TABLE\") {\n        throw new Error(\"collection should contains only table elements !!\");\n      }\n\n      if(!this[0].tHead){\n        throw new Error(\"A Table header element is required for this widget.\");\n      }\n\n      this.find(\"tbody td\").addClass(\"qx-table-cell\");\n\n      this.__inputName = \"input\" + qx.ui.website.Table.__getUID();\n      this.__getColumnMetaData(model);\n      this.setModel(model);\n      this.setSortingFunction(this.__defaultColumnSort);\n\n      this.__registerEvents();\n\n      this.__hovered = null;\n\n      return true;\n    },\n\n\n    /**\n     * Sets the given model to the widgets in the collection\n     *\n     * @param model {Array} The model to be set\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setModel : function(model) {\n      if (typeof model != \"undefined\") {\n        if (qx.lang.Type.isArray(model)) {\n          this.__model = model;\n          this.emit(\"modelChange\", model);\n        } else {\n          throw new Error(\"model must be an Array !!\");\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Set the column types for the table widgets in the collection\n     * @param columnName {String} The column name\n     * @param type {String} The type of the column\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setColumnType : function(columnName, type) {\n      this.__checkColumnExistance(columnName);\n      this.__columnMeta[columnName].type = type;\n\n      return this;\n    },\n\n\n\n\n    /**\n     * Returns the type of the specified column\n     * @param columnName {String} The column name\n     * @return {String} The type of the specified column\n     */\n    getColumnType : function(columnName) {\n      this.eq(0).__checkColumnExistance(columnName);\n      return this.eq(0).__columnMeta[columnName].type;\n    },\n\n\n    /**\n     * Returns the cell at the given position for the first widget in the collection\n     * @param row {Integer} The row number\n     * @param col {Integer} The column number\n     * @return {qxWeb} The cell found at the given position\n     */\n    getCell : function(row, col) {\n      return qxWeb(this.eq(0).__getRoot().rows.item(row).cells.item(col));\n    },\n\n\n    /**\n    * Returns a collection containing the rows of the first table in the collection.\n    * @return {qxWeb} The collection containing the table rows\n    */\n    getRows : function() {\n      return qxWeb(this.eq(0).__getRoot().rows);\n    },\n\n\n    /**\n     * Defines the comparison function to use to sort columns of the given type\n     * @param type {String} The type to define the function for\n     * @param compareFunc {Function} The comparison function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setCompareFunction : function(type, compareFunc) {\n      type = qxWeb.string.firstUp(type);\n      this.setProperty([\"_compare\" + type], compareFunc);\n      return this;\n    },\n\n\n    /**\n     * Unset the compare function for the given type\n     *\n     * @param type {String} The type to unset the function for\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetCompareFunction : function(type) {\n      type = qxWeb.string.firstUp(type);\n      var compareFunc = this[\"_compare\" + type] || this._compareString;\n      this.setProperty([\"_compare\" + type], compareFunc);\n      return this;\n    },\n\n\n    /**\n     * Returns the comparison function for the given type\n     * @param type {String} The type to get the comparison function for\n     * @return {Function} The comparison function\n     */\n    getCompareFunction : function(type) {\n      type = qxWeb.string.firstUp(type);\n      return this.getProperty(\"_compare\" + type) || this[\"_compare\" + type];\n    },\n\n\n    /**\n     * Set the function that control the sorting process\n     * @param func {Function} The sorting function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setSortingFunction : function(func) {\n      func = func || function() {};\n      this.__sortingFunction = func;\n\n      return this;\n    },\n\n\n    /**\n     * Unset the function that control the sorting process\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetSortingFunction : function() {\n      this.__sortingFunction = this.__defaultColumnSort;\n\n      return this;\n    },\n\n    /**\n     * Set the function that will be used to process the column filtering\n     * @param func {Function} The filter function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setFilterFunction : function(func) {\n      this.__filterFunction = func;\n\n      return this;\n    },\n\n\n    /**\n     * Unset the filter function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetFilterFunction : function() {\n      this.__filterFunction = this.__defaultColumnFilter;\n\n      return this;\n    },\n\n\n    /**\n    * Set the filter function to use to filter a specific column\n    * @param columnName {String} The name of the column\n    * @param func {Function} The filter\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    *\n    */\n    setColumnFilter : function(columnName, func) {\n      this.__checkColumnExistance(columnName);\n      if(!this.__filterFunc) {\n        this.__filterFunc = {};\n      }\n      this.__filterFunc[columnName] = func;\n\n      return this;\n    },\n\n\n    /**\n    * Returns the filter function set on a specific column\n    *\n    * @param columnName {String} The name of the column\n    * @return {Function} The filter function\n    *\n    */\n    getColumnFilter : function(columnName) {\n      if(this.__filterFunc){\n        return this.__filterFunc[columnName];\n      }\n      return null;\n    },\n\n\n    /**\n    * Set the filter function to use to filter the table rows\n    * @param func {Function} The filter\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    setRowFilter : function(func) {\n      if(!this.__filterFunc) {\n        this.__filterFunc = {};\n      }\n      this.__filterFunc.row = func;\n\n      return this;\n    },\n\n\n    /**\n    * Returns the filter function set on a specific column\n    * @return {Function} The filter function\n    *\n    */\n    getRowFilter : function() {\n      if(this.__filterFunc) {\n        return this.__filterFunc.row;\n      }\n      return null;\n    },\n\n\n    /**\n     * Sort the column with the given name according to the specified direction\n     * @param columnName {String} The name of the column to sort\n     * @param dir {String} The sorting direction (asc or desc)\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    sort : function(columnName, dir) {\n      this.__checkColumnExistance(columnName);\n\n      this.setSortingClass(columnName, dir);\n      this.__sortDOM(this.__sort(columnName, dir));\n\n      this.emit(\"sort\", {columName : columnName, direction : dir});\n\n      return this;\n    },\n\n\n    /**\n    * Filters rows or columns according to the given parameters\n    * @param keyword {String} The keyword to use to filter\n    * @param columnName {String ?} The column name\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    filter : function(keyword, columnName) {\n      if (columnName) {\n        this.__checkColumnExistance(columnName);\n        if (keyword == \"\") {\n          this.resetFilter(columnName);\n        }\n      } else {\n        columnName = qx.ui.website.Table.__allColumnSelector;\n      }\n\n      if (!this.__filters) {\n        this.__filters = {};\n      }\n\n      if (this.__filters[columnName]) {\n        this.__filters[columnName].keyword = keyword;\n        this.__getRoot().appendChild(this.__filters[columnName].rows);\n      } else {\n        this.__filters[columnName] = { keyword : keyword, rows : document.createDocumentFragment() };\n      }\n\n      this.__filterDom(keyword, columnName);\n\n      this.emit(\"filter\", {columName : columnName, keyword : keyword});\n\n      return this;\n    },\n\n\n    /**\n    * Resets the filter applied on a specific column\n    * @param columnName {String ?} The column name\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    resetFilter : function(columnName) {\n\n      var filters = null;\n      filters = this.__filters;\n      if (filters) {\n        if (columnName) {\n          this.__getRoot().appendChild(filters[columnName].rows);\n        } else {\n          for (var col in filters) {\n            this.__getRoot().appendChild(filters[col].rows);\n          }\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n    * Removes the rows of in the table body\n    * @param tableData {String|qxWeb} Html string or collection containing the rows to be added\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    setContent : function(tableData) {\n      var rows = this.__extractTableRows(tableData);\n      var tbody = this.find('tbody');\n      tbody.empty();\n      rows.appendTo(tbody);\n      this.render();\n      return this;\n    },\n\n\n    /**\n    * Appends new rows to the table\n    * @param tableData {String|qxWeb} Html string or collection containing the rows to be appended\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    appendContent : function(tableData) {\n      var rows = this.__extractTableRows(tableData);\n      var tbody = this.find('tbody');\n      rows.appendTo(tbody);\n      this.render();\n      return this;\n    },\n\n\n    /**\n    * Extracts table rows from a given HTML String or qxWeb collection\n    * @param data {qxWeb|String} Data containing the rows to be extracted\n    * @return {qxWeb} Collection containing extracted rows\n    */\n    __extractTableRows : function(data) {\n      var rows = qxWeb();\n      if (typeof data == \"string\") {\n        var markup = data;\n        data = qxWeb.create(data);\n        if (qxWeb.getNodeName(data) != \"table\") {\n          data = qxWeb.create(\"<table>\" + markup + \"</table>\");\n        }\n        rows = data.find(\"tbody tr\");\n      } else if (qxWeb.isNode(data) || (data instanceof qxWeb)) {\n        data = qxWeb(data);\n        var nodeName = qxWeb.getNodeName(data);\n        switch (nodeName) {\n          case \"table\":\n            rows = qxWeb(data).find(\"tbody tr\");\n            break;\n          case \"tr\":\n            rows = data;\n            break;\n          case \"tbody\":\n            rows = qxWeb(data).find(\"tr\");\n            break;\n        }\n      }\n      return rows;\n    },\n\n\n    /**\n    * Filters the rendered table cells\n    * @param keyword {String} The keyword to use to filter\n    * @param columnName {String ?} The column name\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __filterDom : function(keyword, columnName) {\n\n      var colIndex = this.__getColumnIndex(columnName);\n      var filterFunc = columnName == qx.ui.website.Table.__allColumnSelector ? this.getRowFilter() : this.getColumnFilter(columnName);\n      filterFunc = filterFunc || this.__defaultColumnFilter;\n\n      var rows = this.__getDataRows(), data = {};\n\n      for (var i = 0; i < rows.length; i++) {\n\n        data = {\n          columnName : columnName,\n          columnIndex : colIndex,\n          cell : colIndex > -1 ? qxWeb(rows[i].cells.item(colIndex)) : null,\n          row : qxWeb(rows[i]),\n          keyword : keyword\n        };\n\n        if (!filterFunc.bind(this)(data)) {\n          this.__filters[columnName].rows.appendChild(rows[i]);\n        }\n\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get the current column sorting information for the first widget in the collection\n     * @return {Map} The map containing the current sorting information\n     */\n    getSortingData : function() {\n      return this.__sortingData;\n    },\n\n\n    //overridden\n    render : function() {\n      var sortingData = this.getSortingData();\n      var rowSelection = this.getConfig(\"rowSelection\");\n\n      this.__applyTemplate(this.__model);\n\n      if (qx.ui.website.Table.__selectionTypes.indexOf(rowSelection) != -1) {\n\n        this.__processSelectionInputs(rowSelection);\n      }\n\n      if (sortingData) {\n        this.__sortDOM(this.__sort(sortingData.columnName, sortingData.direction));\n      }\n\n      return this;\n\n    },\n\n\n    //Private API\n\n    /**\n    * Renders or removes the selection inputs according to the specified widget selection mode\n    * @param rowSelection {String} The selection mode\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __processSelectionInputs : function(rowSelection) {\n      switch (rowSelection) {\n\n        case \"none\":\n          qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).remove();\n          break;\n        case \"multiple\": case \"single\":\n          this.__createInputs(\"checkbox\");\n          break;\n\n        case \"single\":\n          this.__createInputs(\"radio\");\n          break;\n      }\n      return this;\n\n    },\n\n\n    /**\n     * Creates input nodes for the row selection\n     * @param type {String} The type of the inputs to creates\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __createInputs : function(type) {\n      this.__createInput(this.__getHeaderRow(), type);\n      var rows = this.find(\"tbody\")[0].getElementsByTagName(\"tr\");\n      for (var i = 0; i < rows.length; i++) {\n        this.__createInput(rows.item(i), type);\n      }\n      return this;\n    },\n\n\n    /**\n    * Creates an input an input node for a specific row\n    * @param row {HTMLTableRowElement} The row to create the input for\n    * @param type {String} The type of the input tom create (radio or checkbox)\n    * @param nodeName {String} The nodename of the table cell that will contain the input\n    */\n    __createInput : function(row, type, nodeName) {\n\n      var cssPrefix = this.getCssPrefix();\n\n      var clazz = qx.ui.website.Table;\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\n      var selectionMode = this.getConfig(\"rowSelection\");\n\n      var checked = \"\";\n      if(headerInput.length > 0) {\n        checked = (selectionMode == \"multiple\") && headerInput[0].checked ? \"checked\" : \"\";\n      }\n\n      if (typeof nodeName == \"undefined\") {\n        nodeName = qxWeb.getNodeName(qxWeb(row.cells.item(0)));\n      }\n\n      var inputName = this.__inputName;\n      var className = (nodeName == \"th\") ? clazz.__internalSelectionClass + \" \" + clazz.__internalHeaderClass : clazz.__internalSelectionClass;\n\n      var currentInput = qxWeb(row).find(\".\"+clazz.__internalSelectionClass);\n\n      if(currentInput.length > 0) {\n        if(currentInput[0].type != type) {\n          currentInput[0].type = type;\n        }\n      } else {\n\n        var id = qx.ui.website.Table.__getUID();\n        var inputNode = qxWeb.create(\"<\" + nodeName + \" class='\" + className + \"'><input id='\"+id+\"' name='\" + inputName + \"' \"+checked+\" class='\"+cssPrefix+\"-\"+type+\" \"+ clazz.__internalInputClass + \"' type='\" + type + \"' /><label class='\"+clazz.__inputLabelClass+\"' for='\"+id+\"'></label></\" + nodeName + \">\");\n        if (row.cells.item(0)) {\n          inputNode.insertBefore(qxWeb(row.cells.item(0)));\n        } else {\n          inputNode.appendTo(qxWeb(row));\n        }\n      }\n\n    },\n\n\n    /**\n    * Checks if a column with the specified name exists\n    * @param columnName {String} The name of the column to check\n    */\n    __checkColumnExistance : function(columnName) {\n      var data = this.__columnMeta;\n      if (data && !data[columnName]) {\n        throw new Error(\"Column \" + columnName + \" does not exists !\");\n      }\n    },\n\n\n    /**\n    * Returns the row containing the cells with the column names\n    * @return {HTMLTableRowElement} The row with meta information\n    */\n    __getHeaderRow : function() {\n      var tHeadOrFoot = this[0].tHead;\n      if (!tHeadOrFoot) {\n        throw new Error(\"A Table header element is required for this widget.\");\n      }\n      var rows = tHeadOrFoot.rows;\n      if(rows.length == 1) {\n        return rows.item(0);\n      } else {\n        rows = qxWeb(\".qx-table-header-row\");\n        if(rows.length > 0) {\n          return rows[0];\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Initializes columns metadata\n     * @param model {Array} The widget's model\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __getColumnMetaData : function(model) {\n\n      this.__addClassToHeaderAndFooter(this[0].tHead);\n      this.__addClassToHeaderAndFooter(this[0].tFoot);\n\n      var data = {}, cells = null, colName = null, cell = null;\n      var headerRow = this.__getHeaderRow();\n\n      cells = headerRow.cells;\n\n      for (var i = 0, l = cells.length; i < l; i++) {\n\n        cell = qxWeb(cells.item(i));\n        colName = this.__getColumName(cell[0]) || qx.ui.website.Table.__getUID();\n        if(!cell[0].getAttribute(qx.ui.website.Table.__dataColName)){\n          cell.setAttribute(qx.ui.website.Table.__dataColName, colName);\n        }\n\n        data[colName] = {\n          type: cell[0].getAttribute(qx.ui.website.Table.__dataColType) || \"String\",\n          name: colName\n        };\n\n      }\n\n      this.__columnMeta = data;\n\n      return this;\n    },\n\n\n    /**\n     * Adds the internal css class to the header and footer cells\n     * @param footOrHead {HTMLElement} Html element representing the header or footer of the table\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __addClassToHeaderAndFooter : function(footOrHead) {\n      if (footOrHead && footOrHead.rows.length > 0) {\n        if (footOrHead.rows.item(0).cells.length > 0) {\n          var row = this.__getHeaderRow();\n          if (!qxWeb(row.cells.item(0)).hasClass(qx.ui.website.Table.__internalHeaderClass)) {\n            qxWeb(row.cells).addClass(qx.ui.website.Table.__internalHeaderClass);\n          }\n        }\n      }\n      return this;\n    },\n\n\n    /**\n     * Sorts the rows of the table widget\n     * @param dataRows {Array} Array containing the sorted rows\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __sortDOM : function(dataRows) {\n      for (var i = 0, l = dataRows.length; i < l; i++) {\n        if (i) {\n          qxWeb(dataRows[i]).insertAfter(dataRows[i - 1]);\n        } else {\n          qxWeb(dataRows[i]).insertBefore(qxWeb(this.__getRoot().rows.item(0)));\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * registers global events\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __registerEvents : function() {\n\n      this.on(\"tap\", this.__detectClickedCell);\n\n      this.on(\"cellClick\", function(data) {\n        if(data.cell && data.cell.hasClass(qx.ui.website.Table.__internalHeaderClass)){\n          this.__sortingFunction.bind(this)(data);\n        }\n      }, this);\n\n      this.on(\"pointerover\", this.__cellHover, this);\n      this.on(\"pointerout\", this.__cellOut, this);\n\n      return this;\n    },\n\n\n    /**\n    * Checks if the selection inputs are already rendered\n    * @return {Boolean} True if the inputs are rendered and false otherwise\n    */\n    __selectionRendered : function() {\n      return qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).length > 0;\n    },\n\n\n    /**\n    * Handles clicks that happen on the selection inputs\n    * @param cell {qxWeb} The table cell containing the clicked input\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __processSelection : function(cell) {\n\n      var clazz = qx.ui.website.Table;\n      var inputs = qxWeb(\".\" + clazz.__internalInputClass);\n      var clickedInput = cell.find(\"input\");\n      var selectionMode = this.getConfig(\"rowSelection\");\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\n      var selection = [];\n\n      if (selectionMode == \"multiple\") {\n\n        if (cell.hasClass(clazz.__internalHeaderClass)) {\n          inputs.setAttribute(\"checked\", clickedInput[0].checked);\n        }\n\n        var checked = true;\n        for (var i = 0; i < inputs.length; i++) {\n          if ((inputs[i] != headerInput[0]) && (!inputs[i].checked)) {\n            checked = false;\n            break;\n          }\n        }\n\n        headerInput.setAttribute(\"checked\", checked);\n        inputs = inputs.toArray();\n\n        if (checked) {\n          qxWeb.array.remove(inputs, headerInput[0]);\n          selection = inputs;\n        } else {\n          selection = inputs.filter(function(input) {\n            return input.checked;\n          });\n        }\n      } else {\n        if (clickedInput[0] != headerInput[0]) {\n          selection.push(clickedInput[0]);\n        }\n      }\n\n      var selectedRows = selection.map(function(elem) {\n        return elem.parentNode.parentNode;\n      });\n\n      selectedRows = qxWeb(selectedRows);\n      qxWeb(\".\"+clazz.__selectedRowClass).removeClass(clazz.__selectedRowClass);\n      selectedRows.addClass(clazz.__selectedRowClass);\n\n      this.emit(\"selectionChange\", {rows : qxWeb(selectedRows)});\n\n      return this;\n    },\n\n\n    /**\n    * Fires a custom table events\n    * @param eventType {String} The event type\n    * @param cell {HTMLTableCellElement} The event target\n    * @param target {HTMLElement} The native event target\n    * @return {Map} Map containing the event data\n    */\n    __fireEvent : function(eventType, cell, target) {\n      var row = cell[0].parentNode, cells = row.cells;\n      var colNumber = qx.ui.website.Table.__getIndex(cells, cell[0]);\n      var tHead = this.__getHeaderRow();\n      var headCell = tHead.cells.item(colNumber);\n      var colName = this.__getColumName(headCell);\n      var columnIndex = this.getConfig(\"rowSelection\") != \"none\" ? this.__getColumnIndex(colName) -1 : this.__getColumnIndex(colName);\n\n      var data = {\n        cell : qxWeb(cell),\n        row : qxWeb(row),\n        target : target,\n        columnIndex : columnIndex,\n        columnName : colName\n      };\n\n      this.emit(eventType, data);\n\n      return data;\n\n    },\n\n\n    /**\n     * Click callback\n     *\n     * @param e {Event} The native click event.\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __detectClickedCell : function(e) {\n\n      var target = e.getTarget();\n\n      var cell = qxWeb(target);\n      var clazz = qx.ui.website.Table;\n\n      while (!(cell.hasClass(clazz.__internalCellClass) || cell.hasClass(clazz.__internalHeaderClass) || cell.hasClass(clazz.__internalSelectionClass))) {\n        if (cell.hasClass(this.classname)) {\n          cell = null;\n          break;\n        }\n        cell = cell.getParents().eq(0);\n      }\n\n      if (cell.hasClass(clazz.__internalSelectionClass)) {\n\n        window.setTimeout(function(){\n          this.__processSelection(cell);\n        }.bind(this), 5);\n\n      }else{\n\n        if (cell && cell.length > 0) {\n          this.__fireEvent(\"cellClick\", cell, target);\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n    * Pointerover callback\n    *\n    * @param e {Event} The native over event.\n    */\n    __cellHover : function(e) {\n\n      var target = e.getTarget();\n      var cell = qxWeb(target);\n      var hovered = this.__hovered;\n\n      if(!cell.hasClass(\"qx-table-cell\") && !cell.hasClass(\"qx-table-header\")) {\n        cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\n      }\n\n      if(cell && (cell.length > 0) && ((hovered && (hovered.cell[0] != cell[0])) || (!hovered)) && !cell.hasClass(\"qx-table-row-selection\")) {\n\n        if(hovered) {\n          this.emit(\"cellOut\", hovered);\n        }\n\n        this.__hovered = this.__fireEvent(\"cellHover\", cell, target);\n      }\n\n    },\n\n\n    /**\n    * pointerout callback\n    *\n    * @param e {Event} The native over event.\n    */\n    __cellOut : function(e) {\n\n      var relatedTarget = e.getRelatedTarget();\n      var cell = qxWeb(relatedTarget);\n\n      if(this.__hovered) {\n\n        if(!cell.isChildOf(this)) {\n\n          this.emit(\"cellOut\", this.__hovered);\n          this.__hovered = null;\n\n        }else {\n\n          if(!cell.hasClass(\"qx-table-cell\") && !cell.hasClass(\"qx-table-header\")) {\n            cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\n            if(cell.hasClass(\"qx-table-row-selection\")) {\n              this.emit(\"cellOut\", this.__hovered);\n              this.__hovered = null;\n            }\n          }\n\n        }\n      }\n\n    },\n\n\n    /**\n     * Applies the given model to the table cells depending on\n     * the mustache template specified before\n     * @param model {Array} The model to apply\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __applyTemplate : function(model) {\n\n      if(model && model.length > 0) {\n        var cell, row;\n        var tHead = this.__getHeaderRow();\n        var createdRow = null, colMeta = null;\n        var renderedRow = null;\n\n        var inputType = (this.getConfig(\"rowSelection\") == \"single\") ? \"radio\" : \"checkbox\";\n\n        if (this.__getRoot().rows.length > model.length) {\n          this.__deleteRows(model.length);\n        }\n\n        var renderedColIndex = 0, templateApplied = false;\n        var coltemplate = this.getTemplate(\"columnDefault\");\n        var colName = null;\n\n        for (var i = 0, rowCount = model.length; i < rowCount; i++) {\n\n          row = model[i];\n\n          if (!this.__isRowRendered(i)) {\n            createdRow = this.__getRoot().insertRow(i);\n            if (this.__selectionRendered()) {\n              this.__createInput(createdRow, inputType, \"td\");\n            }\n          }\n\n          for (var j = 0, colCount = row.length; j < colCount; j++) {\n\n            renderedColIndex = this.__selectionRendered() ? j + 1 : j;\n            colName = this.__getColumName(tHead.cells.item(renderedColIndex));\n            colMeta = this.__getDataForColumn(colName);\n            coltemplate = this.getTemplate(colName) || coltemplate;\n            renderedRow = this.__getRoot().rows.item(i);\n            cell = qxWeb.create(qxWeb.template.render(coltemplate, model[i][j]))[0];\n\n            if(cell.nodeName.toUpperCase() != \"TD\") {\n              break;\n            }\n\n            if (!this.__isCellRendered(i, renderedColIndex)) {\n              renderedRow.appendChild(cell);\n            }else {\n              renderedRow.replaceChild(cell, this.getCell(i, renderedColIndex)[0]);\n            }\n            this.emit(\"cellRender\", {cell : cell, row : i, col : j, value : model[i][j]});\n          }\n\n          if(i == rowCount-1) {\n            templateApplied = true;\n          }\n\n        }\n\n        if (templateApplied) {\n          this.emit(\"modelApplied\", model);\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n    * Removes row from the DOM starting from the specified index\n    * @param  rowCount {Integer} The number of rows the kept\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __deleteRows : function(rowCount) {\n      var renderedRows = this.__getRoot().rows;\n      while(renderedRows.length > rowCount){\n        this[0].deleteRow(renderedRows.length);\n      }\n      return this;\n    },\n\n\n    /**\n    * Gets the metadata of the column width the specified name\n    * @param columName {String} The name of the column to get the metadata for\n    * @return {Map} Map containing the metadata\n    */\n    __getDataForColumn : function(columName) {\n      return this.__columnMeta[columName];\n    },\n\n\n    /**\n     * Gets the Root element containing the data rows\n     * @return {HTMLElement} The element containing the data rows\n     */\n    __getRoot : function() {\n      return this[0].tBodies.item(0) || this[0];\n    },\n\n\n    /**\n     * Checks if the row with the given index is rendered\n     * @param index {Integer} The index of the row to check\n     * @return {Boolean} The result of the check\n     */\n    __isRowRendered : function(index) {\n      if (this.__getRoot().rows.item(index)) {\n        return true;\n      }\n      return false;\n    },\n\n\n    /**\n     * Checks if the cell with the given row and column indexes is rendered\n     * @param rowIndex {Integer} The index of the row to check\n     * @param colIndex {Integer} The index of the column\n     * @return {Boolean} The result of the check\n     */\n    __isCellRendered : function(rowIndex, colIndex) {\n      if (!this.__isRowRendered(rowIndex)) {\n        return false;\n      }\n      if (this.__getRoot().rows.item(rowIndex).cells.item(colIndex)) {\n        return true;\n      }\n      return false;\n    },\n\n\n    /**\n     * Adds a class to the head and footer of the current sorted column\n     * @param columnName {String} The name of the sorted column\n     * @param dir {String} The sorting direction\n     */\n    setSortingClass : function(columnName, dir) {\n\n      var data = {\n        columnName: columnName,\n        direction: dir\n      };\n\n      this.__sortingData = data;\n      this.__addSortingClassToCol(this[0].tHead, columnName, dir);\n    },\n\n\n    /**\n     * Adds a class to the head or footer of the current sorted column\n     * @param HeaderOrFooter {Node} The n\n     * @param columnName {String} The name of the sorted column\n     * @param dir {String} The sorting direction\n     */\n    __addSortingClassToCol : function(HeaderOrFooter, columnName, dir) {\n      var rows = this.__getHeaderRow();\n      if (HeaderOrFooter && rows) {\n        qxWeb(rows.cells).removeClasses([\"qx-table-sort-asc\", \"qx-table-sort-desc\"]);\n        var cell = qxWeb(\"[\"+qx.ui.website.Table.__dataColName+\"='\" + columnName + \"'], #\" + columnName);\n        cell.addClass(\"qx-table-sort-\" + dir);\n      }\n    },\n\n\n    /**\n     * Sorts the table rows for the given row and direction\n     * @param columnName {String} The name of the column to be sorted\n     * @param direction {String} The sorting direction\n     * @return {Array} Array containing the sorted rows\n     */\n    __sort : function(columnName, direction) {\n\n      var meta = this.__getDataForColumn(columnName);\n      var columnType = qxWeb.string.firstUp(meta.type);\n\n      if(!this[\"_compare\" + columnType] && !this.getProperty(\"_compare\"+ columnType)) {\n        columnType = \"String\";\n      }\n\n      var compareFunc = this.getCompareFunction(columnType).bind(this);\n      var model = this.__getDataRows();\n      var columnIndex = this.__getColumnIndex(columnName);\n\n      return model.sort(function(a, b) {\n        var x = this.__getSortingKey(qxWeb(a.cells.item(columnIndex)));\n        var y = this.__getSortingKey(qxWeb(b.cells.item(columnIndex)));\n        return compareFunc(x, y, direction);\n      }.bind(this));\n\n    },\n\n\n    /**\n     * Compares two number\n     * @param x {String} The String value of the first number to compare\n     * @param y {String} The String value of the second number to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareNumber : function(x, y, direction) {\n      x = qx.ui.website.Table.__isNumber(x) ? Number(x) : 0;\n      y = qx.ui.website.Table.__isNumber(y) ? Number(y) : 0;\n      if (direction == \"asc\") {\n        return x - y;\n      } else if (direction == \"desc\") {\n        return y - x;\n      }\n      return 0;\n    },\n\n\n    /**\n    * Gets the name of the column containing the given cell\n    * @param headerCell {HTMLTableCellElement} The cell to get the column name for\n    * @return {String} The column name\n    */\n    __getColumName : function(headerCell) {\n      return headerCell.getAttribute(qx.ui.website.Table.__dataColName) || headerCell.getAttribute(\"id\");\n    },\n\n\n    /**\n     * Compares two Dates\n     * @param x {String} The String value of the first date to compare\n     * @param y {String} The String value of the second date to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareDate : function(x, y, direction) {\n\n      x = qx.ui.website.Table.__isDate(x) ? new Date(x) : new Date(0);\n      y = qx.ui.website.Table.__isDate(y) ? new Date(y) : new Date(0);\n\n      if (direction == \"asc\") {\n        return x - y;\n      } else if (direction == \"desc\") {\n        return y - x;\n      }\n      return 0;\n    },\n\n\n    /**\n     * Compares two Strings\n     * @param x {String} The first string to compare\n     * @param y {String} The second string to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareString : function(x, y, direction) {\n      if (!this.getConfig(\"caseSensitive\")) {\n        x = x.toLowerCase();\n        y = y.toLowerCase();\n      }\n      if (direction == \"asc\") {\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n      } else if (direction == \"desc\") {\n        return ((x > y) ? -1 : ((x < y) ? 1 : 0));\n      }\n      return 0;\n    },\n\n\n    /**\n    * Returns the value of the cell to use for sorting\n    * @param cell {qxWeb} The cell to get the value of.\n    * @return {String} The sorting key\n    */\n    __getSortingKey : function(cell) {\n      return cell.getAttribute(qx.ui.website.Table.__dataSortingKey) || this.__getCellValue(cell);\n    },\n\n\n    /**\n     * Returns the value of the cell that will be used for sorting\n     * @param cell {qxWeb} The cell to get the value of\n     * @return {String} The text content of the cell\n     */\n    __getCellValue : function(cell) {\n      return cell[0].textContent || cell[0].innerText || \"\";\n    },\n\n\n    /**\n     * Gets the table's data rows from the DOM\n     * @return {Array} Array containing the rows of the table\n     */\n    __getDataRows : function() {\n\n      var rows = this.find(\"tbody\")[0].rows, model = [], cell=null,  cells = [];\n\n      for (var i = 0, l = rows.length; i < l; i++) {\n        cells = rows.item(i).cells;\n        if ((cells.length > 0) && (cells[0].nodeName.toUpperCase() != \"TD\")) {\n          continue;\n        }\n\n        for (var j = 0, len = cells.length; j < len; j++) {\n          cell = qxWeb(cells[j]);\n          if (!cell.hasClass(qx.ui.website.Table.__internalCellClass)) {\n            cell.addClass(qx.ui.website.Table.__internalCellClass);\n          }\n        }\n\n        model.push(rows.item(i));\n      }\n      return model;\n    },\n\n\n    /**\n     * Default sorting processing\n     * @param data {Map} Sorting data\n     */\n    __defaultColumnSort : function(data) {\n      var dir = \"asc\";\n      var sortedData = this.getSortingData();\n\n      if (sortedData) {\n        if (data.columnName == sortedData.columnName) {\n          if (sortedData.direction == dir) {\n            dir = \"desc\";\n          }\n        }\n      }\n      if (data.cell.hasClass(\"qx-table-header\")) {\n        this.sort(data.columnName, dir);\n      }\n    },\n\n\n    /**\n    * Default column filter function\n    * @param data {Map} Map containing the filter data\n    * @return {Boolean} True wenn the row containing the current cell should be kept\n    */\n    __defaultColumnFilter : function(data) {\n\n      var caseSensitive = this.getConfig(\"caseSensitive\");\n      var cell = data.columnName == qx.ui.website.Table.__allColumnSelector ? data.row : data.cell;\n      var cellValue = this.__getCellValue(cell);\n\n      if(caseSensitive){\n        return cellValue.indexOf(data.keyword) != -1;\n      }else{\n        return cellValue.toLowerCase().indexOf(data.keyword.toLowerCase()) != -1;\n      }\n\n    },\n\n\n    /**\n     * Gets the index of the column with the specified name\n     * @param columnName {String} The colukn name\n     * @return {Integer} The index of the column or -1 if the column doesn't exists\n     */\n    __getColumnIndex : function(columnName) {\n      var tHead = this.__getHeaderRow();\n      var cells = tHead.cells;\n      for (var i = 0; i < cells.length; i++) {\n        if (columnName == this.__getColumName(cells.item(i))) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attach({\n      table: statics.table\n    });\n  }\n\n});\n"
  ]
}