{
  "className": "qx.ui.website.DatePicker",
  "packageName": "qx.ui.website",
  "name": "DatePicker",
  "superClass": "qx.ui.website.Widget",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 53,
        "column": 0
      },
      "end": {
        "line": 421,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2014 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Alexander Steitz (aback)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This is a date picker widget used to combine an input element with a calendar widget\n to select a date. The calendar itself is opened as popup to save visual space.\n </p>\n<h2>Markup</h2>\n<p>Each Date Picker widget is connected to an existing input element.\n </p>\n<h2>CSS Classes</h2>\n<table>\n   <thead>\n     <tr>\n       <td>Class Name</td>\n       <td>Applied to</td>\n       <td>Description</td>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td><code>qx-datepicker</code></td>\n       <td>Input element</td>\n       <td>Identifies the date picker widget</td>\n     </tr>\n     <tr>\n       <td><code>qx-datepicker-icon</code></td>\n       <td>Icon element</td>\n       <td>Identifies the (if configured) image element to open the date picker</td>\n     </tr>\n   </tbody>\n </table>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Template"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Widget"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__validPositions": {
      "location": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of valid positions to check against</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_config": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p><em>format</em>\n Function which is provided with a JavaScript Date object instance. You can provide\n an own format function to manipulate the value which is set to the associated input element.\n Default value:\n </p>\n<pre>function(date) {\n        return date.toLocaleDateString();\n      }</pre>\n<p><em>readonly</em>\n Boolean value to control if the connected input element is read-only.\n Default value:\n </p>\n<pre>true</pre>\n<p><em>icon</em>\n Path to an icon which will be placed next to the input element as additional opener. If configured\n a necessary <code>img</code> element is created and equipped with the <code>qx-datepicker-icon</code>\n CSS class to style it.\n Default value:\n </p>\n<pre>null</pre>\n<p><em>mode</em>\n Which control should trigger showing the date picker.\n Possible values are <code>input</code>, <code>icon</code>, <code>both</code>.\n Default value:\n </p>\n<pre>input</pre>\n<p><em>position</em>\n Position of the calendar popup from the point of view of the <code>INPUT</code> element.\n Possible values are</p>\n<ul>\n<li><code>top-left</code></li>\n<li><code>top-center</code></li>\n<li><code>top-right</code></li>\n<li><code>bottom-left</code></li>\n<li><code>bottom-center</code></li>\n<li><code>bottom-right</code></li>\n<li><code>left-top</code></li>\n<li><code>left-middle</code></li>\n<li><code>left-bottom</code></li>\n<li><code>right-top</code></li>\n<li><code>right-middle</code></li>\n<li><p><code>right-bottom</code>\nDefault value:</p></li>\n</ul>\n<pre>bottom-left</pre>"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "datepicker": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 144,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Factory method which converts the current collection into a collection of\n Date Picker widgets. Therefore, an initialization process needs to be done which\n can be configured with some parameter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date?null} The initial Date of the calendar.",
            "paramName": "date",
            "description": " The initial Date of the calendar.",
            "optional": true,
            "defaultValue": "null",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.DatePicker} A new date picker collection.",
            "type": "qx.ui.website.DatePicker",
            "description": " A new date picker collection."
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 147,
        "column": 14
      },
      "end": {
        "line": 149,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "_calendarId": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 21
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_iconId": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 17
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_uniqueId": {
      "location": {
        "start": {
          "line": 154,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 19
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "getCalendar": {
      "location": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the associated calendar widget</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Calendar} calendar widget instance",
            "type": "qx.ui.website.Calendar",
            "description": " calendar widget instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "init": {
      "location": {
        "start": {
          "line": 175,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          },
          {
            "name": "@description",
            "body": "<p>Initializes the date picker widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "date {Date} A JavaScript Date object to set the current date",
            "paramName": "date",
            "description": " A JavaScript Date object to set the current date",
            "type": "Date"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the widget has been initialized",
            "type": "Boolean",
            "description": " <code>true</code> if the widget has been initialized"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.website.Widget",
      "appearsIn": [
        "qx.ui.website.Widget"
      ]
    },
    "render": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 221,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The widget collection for chaining.",
            "type": "qx.ui.website.Widget",
            "description": " The widget collection for chaining."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.website.Widget",
      "appearsIn": [
        "qx.ui.website.Widget"
      ]
    },
    "setConfig": {
      "location": {
        "start": {
          "line": 224,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the config setting.",
            "paramName": "name",
            "description": " The name of the config setting.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {var} The value of the config setting.",
            "paramName": "config",
            "description": " The value of the config setting.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.website.Widget} The widget instance for chaining.",
            "type": "qx.ui.website.Widget",
            "description": " The widget instance for chaining."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.website.Widget",
      "appearsIn": [
        "qx.ui.website.Widget"
      ]
    },
    "_onTap": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 261,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener which handles clicks/taps on the associated input element and\n opens / hides the calendar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} tap event",
            "paramName": "e",
            "description": " tap event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onCalendarTap": {
      "location": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop tap events from reaching the body so the calendar won't close</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Tap event",
            "paramName": "e",
            "description": " Tap event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onBodyTap": {
      "location": {
        "start": {
          "line": 277,
          "column": 4
        },
        "end": {
          "line": 304,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener to the body element to be able to hide the calendar if the user clicks\n or taps outside the calendar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} tap event",
            "paramName": "e",
            "description": " tap event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_calendarChangeValue": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 318,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listens to value selection of the calendar, Whenever the user selected a day\n we write it back to the input element and hide the calendar.\n The format of the date can be controlled with the 'format' config function</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} selected date value",
            "paramName": "e",
            "description": " selected date value",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__setReadOnly": {
      "location": {
        "start": {
          "line": 326,
          "column": 4
        },
        "end": {
          "line": 332,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to set the readonly status on the input element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "collection {qxWeb} collection to work on",
            "paramName": "collection",
            "description": " collection to work on",
            "type": "qxWeb"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__setIcon": {
      "location": {
        "start": {
          "line": 339,
          "column": 4
        },
        "end": {
          "line": 374,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to add / remove an icon next to the input element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "collection {qxWeb} collection to work on",
            "paramName": "collection",
            "description": " collection to work on",
            "type": "qxWeb"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addInputListener": {
      "location": {
        "start": {
          "line": 382,
          "column": 4
        },
        "end": {
          "line": 390,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to add a listener to the connected input element\n if the configured mode is set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "collection {qxWeb} collection to work on",
            "paramName": "collection",
            "description": " collection to work on",
            "type": "qxWeb"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 393,
          "column": 4
        },
        "end": {
          "line": 410,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} Plain qxWeb collection",
            "type": "qxWeb",
            "description": " Plain qxWeb collection"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.website.Widget",
      "appearsIn": [
        "qx.ui.website.Widget",
        "qx.core.IDisposable"
      ]
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 413,
        "column": 10
      },
      "end": {
        "line": 420,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}