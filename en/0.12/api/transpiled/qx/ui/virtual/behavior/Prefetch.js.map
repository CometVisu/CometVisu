{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/virtual/behavior/Prefetch.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "scroller",
    "settings",
    "setPrefetchX",
    "minLeft",
    "maxLeft",
    "minRight",
    "maxRight",
    "setPrefetchY",
    "minAbove",
    "maxAbove",
    "minBelow",
    "maxBelow",
    "__timer",
    "event",
    "Timer",
    "getInterval",
    "addListener",
    "_onInterval",
    "setScroller",
    "properties",
    "check",
    "nullable",
    "init",
    "apply",
    "interval",
    "members",
    "__prefetchX",
    "__prefetchY",
    "__onScrollXId",
    "__onScrollYId",
    "px",
    "getScroller",
    "getPane",
    "prefetchX",
    "ui",
    "queue",
    "Manager",
    "flush",
    "py",
    "prefetchY",
    "_applyScroller",
    "value",
    "old",
    "getChildControl",
    "removeListenerById",
    "getContentElement",
    "getDomElement",
    "stop",
    "addListenerOnce",
    "start",
    "restart",
    "_applyInterval",
    "setInterval",
    "destruct",
    "_disposeObjects",
    "virtual",
    "behavior",
    "Prefetch"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Behavior to support pre-rendering of invisible areas of a virtual scroller.\n * If applied to a scroller it will start a timer and increase the rendered area\n * of the scroller after a certain period of time. Subsequent scrolling will not\n * have to render this pre-computed area again.\n *\n */\nqx.Class.define(\"qx.ui.virtual.behavior.Prefetch\",\n{\n  extend : qx.core.Object,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param scroller {qx.ui.virtual.core.Scroller} The scroller to prefetch\n   * @param settings {Map} This map contains minimum and maximum pixels to\n   * prefetch near the view port.\n   * <ul>\n   *   <li>minLeft: minimum pixels to prefetch left to the view port</li>\n   *   <li>maxLeft: maximum pixels to prefetch left to the view port</li>\n   *   <li>minRight: minimum pixels to prefetch right to the view port</li>\n   *   <li>maxRight: maximum pixels to prefetch right to the view port</li>\n   *   <li>minAbove: minimum pixels to prefetch above the view port</li>\n   *   <li>maxAbove: maximum pixels to prefetch above the view port</li>\n   *   <li>minBelow: minimum pixels to prefetch below the view port</li>\n   *   <li>maxBelow: maximum pixels to prefetch below the view port</li>\n   * </ul>\n   */\n\n  construct : function(scroller, settings)\n  {\n\n    if (qx.core.Environment.get(\"qx.debug\"))\n    {\n      this.assertObject(settings);\n      this.assertPositiveInteger(settings.minLeft);\n      this.assertPositiveInteger(settings.maxLeft);\n      this.assertPositiveInteger(settings.minRight);\n      this.assertPositiveInteger(settings.maxRight);\n      this.assertPositiveInteger(settings.minAbove);\n      this.assertPositiveInteger(settings.maxAbove);\n      this.assertPositiveInteger(settings.minBelow);\n      this.assertPositiveInteger(settings.maxBelow);\n    }\n\n    this.base(arguments);\n\n    this.setPrefetchX(settings.minLeft, settings.maxLeft, settings.minRight, settings.maxRight);\n    this.setPrefetchY(settings.minAbove, settings.maxAbove, settings.minBelow, settings.maxBelow);\n\n    this.__timer = new qx.event.Timer(this.getInterval());\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n\n    if (scroller) {\n      this.setScroller(scroller);\n    }\n  },\n\n\n  /*\n   *****************************************************************************\n      PROPERTIES\n   *****************************************************************************\n   */\n\n   properties :\n   {\n    /** @type {qx.ui.virtual.core.Scroller} The scroller to prefetch */\n     scroller :\n     {\n       check : \"qx.ui.virtual.core.Scroller\",\n       nullable : true,\n       init : null,\n       apply : \"_applyScroller\"\n     },\n\n     /** @type {Integer} Polling interval */\n     interval :\n     {\n       check : \"Integer\",\n       init : 200,\n       apply : \"_applyInterval\"\n     }\n   },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __prefetchX : null,\n    __prefetchY : null,\n    __timer : null,\n    __onScrollXId : null,\n    __onScrollYId : null,\n\n    /**\n     * Configure horizontal prefetching\n     *\n     * @param minLeft {Integer} minimum pixels to prefetch left to the view port\n     * @param maxLeft {Integer} maximum pixels to prefetch left to the view port\n     * @param minRight {Integer} minimum pixels to prefetch right to the view port\n     * @param maxRight {Integer} maximum pixels to prefetch right to the view port\n     */\n    setPrefetchX : function(minLeft, maxLeft, minRight, maxRight) {\n      this.__prefetchX = [minLeft, maxLeft, minRight, maxRight];\n    },\n\n\n    /**\n     * Configure vertical prefetching\n     *\n     * @param minAbove {Integer} minimum pixels to prefetch above the view port\n     * @param maxAbove {Integer} maximum pixels to prefetch above the view port\n     * @param minBelow {Integer} minimum pixels to prefetch below the view port\n     * @param maxBelow {Integer} maximum pixels to prefetch below the view port\n     */\n    setPrefetchY : function(minAbove, maxAbove, minBelow, maxBelow) {\n      this.__prefetchY = [minAbove, maxAbove, minBelow, maxBelow];\n    },\n\n\n    /**\n     * Update prefetching\n     */\n    _onInterval : function()\n    {\n      var px = this.__prefetchX;\n      if (px[1] && px[3])\n      {\n        this.getScroller().getPane().prefetchX(px[0], px[1], px[2], px[3]);\n        qx.ui.core.queue.Manager.flush();\n      }\n\n      var py = this.__prefetchY;\n      if (py[1] && py[3])\n      {\n        this.getScroller().getPane().prefetchY(py[0], py[1], py[2], py[3]);\n        qx.ui.core.queue.Manager.flush();\n      }\n    },\n\n\n    // property apply\n    _applyScroller : function(value, old)\n    {\n      if (old)\n      {\n        if (this.__onScrollXId) {\n          old.getChildControl(\"scrollbar-x\").removeListenerById(this.__onScrollXId);\n        }\n        if (this.__onScrollYId) {\n          old.getChildControl(\"scrollbar-y\").removeListenerById(this.__onScrollYId);\n        }\n      }\n\n      if (value)\n      {\n        if (!value.getContentElement().getDomElement())\n        {\n          this.__timer.stop();\n          value.addListenerOnce(\"appear\", this.__timer.start, this.__timer);\n        }\n        else\n        {\n          this.__timer.restart();\n        }\n\n//        if (value.hasChildControl(\"scrollbar-x\"))\n//        {\n          this.__onScrollXId = value.getChildControl(\"scrollbar-x\").addListener(\n            \"scroll\",\n            this.__timer.restart,\n            this.__timer\n          );\n//        }\n//        if (value.hasChildControl(\"scrollbar-y\"))\n//        {\n          this.__onScrollYId = value.getChildControl(\"scrollbar-y\").addListener(\n            \"scroll\",\n            this.__timer.restart,\n            this.__timer\n          );\n//        }\n\n      }\n      else\n      {\n        this.__timer.stop();\n      }\n    },\n\n\n    // property apply\n    _applyInterval : function(value, old) {\n      this.__timer.setInterval(value);\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function()\n  {\n    this.setScroller(null);\n    this.__prefetchX = this.__prefetchY = null;\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ]
}