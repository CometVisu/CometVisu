{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/selection/MModel.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "_initSelectionManager",
    "__selection",
    "data",
    "Array",
    "addListener",
    "_onChangeSelection",
    "_applySelection",
    "properties",
    "selectionMode",
    "check",
    "init",
    "apply",
    "dragSelection",
    "quickSelection",
    "events",
    "members",
    "_manager",
    "__ignoreChangeSelection",
    "__ignoreManagerChangeSelection",
    "setValue",
    "selection",
    "resetSelection",
    "setSelection",
    "getValue",
    "getSelection",
    "resetValue",
    "self",
    "selectionDelegate",
    "isItemSelectable",
    "row",
    "_provider",
    "isSelectable",
    "styleSelectable",
    "type",
    "wasAdded",
    "styleSelectabled",
    "styleUnselectabled",
    "ui",
    "virtual",
    "Row",
    "getPane",
    "attachPointerEvents",
    "attachKeyEvents",
    "_onManagerChangeSelection",
    "setAutoScrollIntoView",
    "value",
    "_autoScrollIntoView",
    "getAutoScrollIntoView",
    "_updateSelection",
    "replace",
    "removeAll",
    "initSelection",
    "warn",
    "classname",
    "old",
    "_applySelectionMode",
    "setMode",
    "_applyDragSelection",
    "setDrag",
    "_applyQuickSelection",
    "setQuick",
    "e",
    "newSelection",
    "i",
    "getLength",
    "item",
    "getItem",
    "selectables",
    "_getSelectables",
    "index",
    "indexOf",
    "_reverseLookup",
    "push",
    "_beforeApplySelection",
    "lang",
    "Type",
    "isFunction",
    "equals",
    "replaceSelection",
    "ex",
    "selectItem",
    "length",
    "__synchronizeSelection",
    "_afterApplySelection",
    "fireDataEvent",
    "getData",
    "getOldData",
    "__isSelectionEquals",
    "managerSelection",
    "_getDataFromRow",
    "__replaceSelection",
    "args",
    "concat",
    "temp",
    "splice",
    "dispose",
    "_applyDefaultSelection",
    "destruct",
    "MModel"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Implements the different selection modes single, multi, additive and one\n * selection with there drag and quick selection.\n *\n * Example how to use selection:\n * <pre class=\"javascript\">\n * var rawData = [];\n * for (var i = 0; i < 2500; i++) {\n *  rawData[i] = \"Item No \" + i;\n * }\n *\n * var model = qx.data.marshal.Json.createModel(rawData);\n * var list = new qx.ui.list.List(model);\n *\n * // Pre-Select \"Item No 20\"\n * list.getSelection().push(model.getItem(20));\n *\n * // log change selection\n * list.getSelection().addListener(\"change\", function(e) {\n *   this.debug(\"Selection: \" + list.getSelection().getItem(0));\n * }, this);\n * </pre>\n *\n * @internal\n */\nqx.Mixin.define(\"qx.ui.virtual.selection.MModel\",\n{\n  construct : function()\n  {\n    this._initSelectionManager();\n    this.__selection = new qx.data.Array();\n    this.__selection.addListener(\"change\", this._onChangeSelection, this); \n    this._applySelection(this.__selection, null);\n  },\n\n\n  properties :\n  {\n    /** Current selected items */\n    /* psuedo property - implemented manually in code below\n    selection :\n    {\n      check : \"qx.data.Array\",\n      event : \"changeSelection\",\n      apply : \"_applySelection\",\n      nullable : false,\n      deferredInit : true\n    },\n    */\n\n\n    /**\n     * The selection mode to use.\n     *\n     * For further details please have a look at:\n     * {@link qx.ui.core.selection.Abstract#mode}\n     */\n    selectionMode :\n    {\n      check : [\"single\", \"multi\", \"additive\", \"one\"],\n      init : \"single\",\n      apply : \"_applySelectionMode\"\n    },\n\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the selection modes <code>multi</code> and <code>additive</code>\n     */\n    dragSelection :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyDragSelection\"\n    },\n\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quickSelection :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyQuickSelection\"\n    }\n  },\n\n\n  events : {\n    /**\n     * This event is fired as soon as the content of the selection property changes, but\n     * this is not equal to the change of the selection of the widget. If the selection\n     * of the widget changes, the content of the array stored in the selection property\n     * changes. This means you have to listen to the change event of the selection array\n     * to get an event as soon as the user changes the selected item.\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\n     */\n    \"changeSelection\" : \"qx.event.type.Data\",\n\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n    /** @type {qx.ui.virtual.selection.Row} selection manager */\n    _manager : null,\n\n\n    /** @type {Boolean} flag to ignore the selection change from {@link #selection} */\n    __ignoreChangeSelection : false,\n\n\n    /** @type {Boolean} flag to ignore the selection change from <code>_manager</code> */\n    __ignoreManagerChangeSelection : false,\n\n    __selection : null,\n\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param selection {qx.data.IListData|null} List data to select as value.\n     * @return {null} The status of this operation.\n     */\n    setValue : function(selection) {\n      if (null === selection) {\n        this.resetSelection();\n      } else {\n        this.setSelection(selection);\n      }\n\n      return null;\n    },\n\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @return {qx.data.IListData} The current selection.\n     */\n    getValue : function() {\n      return this.getSelection();\n    },\n\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue : function() {\n      this.resetSelection();\n    },\n\n\n    /**\n     * Initialize the selection manager with his delegate.\n     */\n    _initSelectionManager : function()\n    {\n      var self = this;\n      var selectionDelegate =\n      {\n        isItemSelectable : function(row) {\n          return self._provider.isSelectable(row);\n        },\n\n        styleSelectable : function(row, type, wasAdded)\n        {\n          if (type != \"selected\") {\n            return;\n          }\n\n          if (wasAdded) {\n            self._provider.styleSelectabled(row);\n          } else {\n            self._provider.styleUnselectabled(row);\n          }\n        }\n      };\n\n      this._manager = new qx.ui.virtual.selection.Row(\n        this.getPane(), selectionDelegate\n      );\n      this._manager.attachPointerEvents(this.getPane());\n      this._manager.attachKeyEvents(this);\n      this._manager.addListener(\"changeSelection\", this._onManagerChangeSelection, this);\n    },\n\n\n    /**\n     * Determines, if automatically scrolling of selected item is active.\n     * Set <code>false</code> to suspend auto scrolling.\n     *\n     * @param value {Boolean} Set <code>false</code> to suspend auto scrolling.\n     */\n    setAutoScrollIntoView : function(value)\n    {\n      this._manager._autoScrollIntoView = value;\n    },\n\n\n    /**\n     * Returns true, if automatically scrolling of selected item is active.\n     *\n     * @return {Boolean} Returns <code>false</code> if auto scrolling is suspended.\n     */\n    getAutoScrollIntoView : function()\n    {\n      return this._manager._autoScrollIntoView;\n    },\n\n\n    /**\n     * Method to update the selection, this method can be used when the model has\n     * changes.\n     */\n    _updateSelection : function()\n    {\n      if (this._manager == null) {\n        return;\n      }\n\n      this._onChangeSelection();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Setter for selection property; takes the selection on, and does not change the\n     * array instance in `this.selection`\n     * \n     * @param value {qx.data.Array} the new selection\n     */\n    setSelection: function(value) {\n      if (value) {\n        this.__selection.replace(value);\n      }\n      else {\n        this.__selection.removeAll();\n      }\n    },\n    \n    /**\n     * Getter for selection property\n     * \n     * @return {qx.data.Array}\n     */\n    getSelection: function() {\n      return this.__selection;\n    },\n    \n    /**\n     * Reset for selection property\n     */\n    resetSelection : function() {\n      this.__selection.removeAll();\n    },\n    \n    /**\n     * Init for selection property; takes the selection on, and does not change the\n     * array instance in `this.selection`\n     * \n     * @param value {qx.data.Array} the new selection\n     */\n    initSelection : function(value) {\n      this.warn(\"Using initSelection on \" + this.classname + \" is probably not what you intended - the selection instance does not change\");\n      this.setSelection(value);\n    },\n\n    /**\n     * Apply method for selection property\n     * \n     * @param value {qx.data.Array} new value\n     * @param old {qx.data.Array} old value\n     */\n    _applySelection : function(value, old) {\n      this._onChangeSelection();\n    },\n\n\n    // apply method\n    _applySelectionMode : function(value, old) {\n      this._manager.setMode(value);\n    },\n\n\n    // apply method\n    _applyDragSelection : function(value, old) {\n      this._manager.setDrag(value);\n    },\n\n\n    // apply method\n    _applyQuickSelection : function(value, old) {\n      this._manager.setQuick(value);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Event handler for the internal selection change {@link #selection}.\n     *\n     * @param e {qx.event.type.Data} the change event.\n     */\n    _onChangeSelection : function(e)\n    {\n      if (this.__ignoreManagerChangeSelection == true) {\n        return;\n      }\n\n      this.__ignoreChangeSelection = true;\n      var selection = this.getSelection();\n\n      var newSelection = [];\n      for (var i = 0; i < selection.getLength(); i++)\n      {\n        var item = selection.getItem(i);\n        var selectables = this._getSelectables();\n        var index = -1;\n\n        if (selectables != null) {\n          index = selectables.indexOf(item);\n        }\n\n        var row = this._reverseLookup(index);\n\n        if (row >= 0) {\n          newSelection.push(row);\n        }\n      }\n\n      if (this._beforeApplySelection != null &&\n          qx.lang.Type.isFunction(this._beforeApplySelection)) {\n        this._beforeApplySelection(newSelection);\n      }\n\n      try {\n        if (!qx.lang.Array.equals(newSelection, this._manager.getSelection())) {\n          this._manager.replaceSelection(newSelection);\n        }\n      }\n      catch(ex)\n      {\n        this._manager.selectItem(newSelection[newSelection.length - 1]);\n      }\n      this.__synchronizeSelection();\n\n      if (this._afterApplySelection != null &&\n          qx.lang.Type.isFunction(this._afterApplySelection)) {\n        this._afterApplySelection();\n      }\n\n      this.__ignoreChangeSelection = false;\n    },\n\n\n    /**\n     * Event handler for the selection change from the <code>_manager</code>.\n     *\n     * @param e {qx.event.type.Data} the change event.\n     */\n    _onManagerChangeSelection : function(e)\n    {\n      if (this.__ignoreChangeSelection == true) {\n        return;\n      }\n\n      this.__ignoreManagerChangeSelection = true;\n\n      this.__synchronizeSelection();\n\n      this.__ignoreManagerChangeSelection = false;\n\n      this.fireDataEvent(\"changeValue\", e.getData(), e.getOldData());\n    },\n\n\n    /**\n     * Synchronized the selection form the manager with the local one.\n     */\n    __synchronizeSelection : function()\n    {\n      if (this.__isSelectionEquals()) {\n        return;\n      }\n\n      var managerSelection = this._manager.getSelection();\n      var newSelection = [];\n\n      for (var i = 0; i < managerSelection.length; i++)\n      {\n        var item = this._getDataFromRow(managerSelection[i]);\n\n        if (item != null) {\n          newSelection.push(item);\n        }\n      }\n\n      this.__replaceSelection(newSelection);\n    },\n\n\n    /**\n     * Replace the current selection with the passed selection Array.\n     *\n     * @param newSelection {qx.data.Array} The new selection.\n     */\n    __replaceSelection : function(newSelection)\n    {\n      var selection = this.getSelection();\n      if (newSelection.length > 0)\n      {\n        var args = [0, selection.getLength()];\n        args = args.concat(newSelection);\n        // dispose data array returned by splice to avoid memory leak\n        var temp = selection.splice.apply(selection, args);\n        temp.dispose();\n      } else {\n        selection.removeAll();\n      }\n    },\n\n\n    /**\n     * Checks whether the local and the manager selection are equal.\n     *\n     * @return {Boolean} <code>true</code> if the selections are equal,\n     *   <code>false</code> otherwise.\n     */\n    __isSelectionEquals : function()\n    {\n      var selection = this.getSelection();\n      var managerSelection = this._manager.getSelection();\n\n      if (selection.getLength() !== managerSelection.length) {\n        return false;\n      }\n\n      for (var i = 0; i < selection.getLength(); i++)\n      {\n        var item = selection.getItem(i);\n        var selectables = this._getSelectables();\n        var index = -1;\n\n        if (selectables != null) {\n          index = selectables.indexOf(item);\n        }\n        var row = this._reverseLookup(index);\n\n        if (row !== managerSelection[i]) {\n          return false;\n        };\n      }\n      return true;\n    },\n\n\n    /**\n     * Helper Method to select default item.\n     */\n    _applyDefaultSelection : function() {\n      if (this._manager != null) {\n        this._manager._applyDefaultSelection();\n      }\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._manager.dispose();\n    this._manager = null;\n    if (this.__selection) {\n      this.__selection.dispose();\n    }\n  }\n});\n"
  ]
}