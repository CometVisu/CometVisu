{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "type",
    "implement",
    "virtual",
    "ILayer",
    "construct",
    "__jobs",
    "properties",
    "anonymous",
    "refine",
    "init",
    "members",
    "__arguments",
    "__firstRow",
    "__firstColumn",
    "__rowSizes",
    "__columnSizes",
    "getFirstRow",
    "getFirstColumn",
    "getRowSizes",
    "getColumnSizes",
    "syncWidget",
    "jobs",
    "getContentElement",
    "getDomElement",
    "fullUpdate",
    "updateLayerWindow",
    "updateLayerData",
    "_fullUpdate",
    "apply",
    "_updateLayerWindow",
    "_updateLayerData",
    "args",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "Error",
    "queue",
    "add",
    "arguments",
    "destruct",
    "layer",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n\n/**\n * Abstract base class for layers of a virtual pane.\n *\n * This class queues calls to {@link #fullUpdate}, {@link #updateLayerWindow}\n * and {@link #updateLayerData} and only performs the absolute necessary\n * actions. Concrete implementation of this class must at least implement\n * the {@link #_fullUpdate} method. Additionally the two methods\n * {@link #_updateLayerWindow} and {@link #_updateLayerData} may be implemented\n * to increase the performance.\n */\nqx.Class.define(\"qx.ui.virtual.layer.Abstract\",\n{\n  extend : qx.ui.core.Widget,\n  type : \"abstract\",\n\n  implement : [qx.ui.virtual.core.ILayer],\n\n  /*\n   *****************************************************************************\n      CONSTRUCTOR\n   *****************************************************************************\n   */\n\n   construct : function()\n   {\n     this.base(arguments);\n\n     this.__jobs = {};\n   },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    anonymous :\n    {\n      refine: true,\n      init: true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __jobs : null,\n    __arguments : null,\n\n    __firstRow : null,\n    __firstColumn : null,\n    __rowSizes : null,\n    __columnSizes : null,\n\n\n    /**\n     * Get the first rendered row\n     *\n     * @return {Integer} The first rendered row\n     */\n    getFirstRow : function() {\n      return this.__firstRow;\n    },\n\n\n    /**\n     * Get the first rendered column\n     *\n     * @return {Integer} The first rendered column\n     */\n    getFirstColumn : function() {\n      return this.__firstColumn;\n    },\n\n\n    /**\n     * Get the sizes of the rendered rows\n     *\n     * @return {Integer[]} List of row heights\n     */\n    getRowSizes : function() {\n      return this.__rowSizes || [];\n    },\n\n\n    /**\n     * Get the sizes of the rendered column\n     *\n     * @return {Integer[]} List of column widths\n     */\n    getColumnSizes : function() {\n      return this.__columnSizes || [];\n    },\n\n\n    // overridden\n    syncWidget : function(jobs)\n    {\n      // return if the layer is not yet rendered\n      // it will rendered in the appear event\n      if (!this.getContentElement().getDomElement()) {\n        return;\n      }\n\n      if (\n        this.__jobs.fullUpdate ||\n        this.__jobs.updateLayerWindow && this.__jobs.updateLayerData\n      )\n      {\n        this._fullUpdate.apply(this, this.__arguments);\n      }\n      else if (this.__jobs.updateLayerWindow)\n      {\n        this._updateLayerWindow.apply(this, this.__arguments);\n      }\n      else if (this.__jobs.updateLayerData  && this.__rowSizes)\n      {\n        this._updateLayerData();\n      }\n\n      if (this.__jobs.fullUpdate || this.__jobs.updateLayerWindow)\n      {\n        var args = this.__arguments;\n        this.__firstRow = args[0];\n        this.__firstColumn = args[1];\n        this.__rowSizes = args[2];\n        this.__columnSizes = args[3];\n      }\n\n      this.__jobs = {};\n    },\n\n\n    /**\n     * Update the layer to reflect changes in the data the layer displays.\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     */\n    _updateLayerData : function()\n    {\n      this._fullUpdate(\n        this.__firstRow, this.__firstColumn,\n        this.__rowSizes, this.__columnSizes\n      );\n    },\n\n\n    /**\n     * Do a complete update of the layer. All cached data should be discarded.\n     * This method is called e.g. after changes to the grid geometry\n     * (row/column sizes, row/column count, ...).\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     *\n     * @param firstRow {Integer} Index of the first row to display\n     * @param firstColumn {Integer} Index of the first column to display\n     * @param rowSizes {Integer[]} Array of heights for each row to display\n     * @param columnSizes {Integer[]} Array of widths for each column to display\n     */\n    _fullUpdate : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    ) {\n      throw new Error(\"Abstract method '_fullUpdate' called!\");\n    },\n\n\n    /**\n     * Update the layer to display a different window of the virtual grid.\n     * This method is called if the pane is scrolled, resized or cells\n     * are prefetched. The implementation can assume that no other grid\n     * data has been changed since the last \"fullUpdate\" of \"updateLayerWindow\"\n     * call.\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     *\n     * @param firstRow {Integer} Index of the first row to display\n     * @param firstColumn {Integer} Index of the first column to display\n     * @param rowSizes {Integer[]} Array of heights for each row to display\n     * @param columnSizes {Integer[]} Array of widths for each column to display\n     */\n    _updateLayerWindow : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    )\n    {\n      this._fullUpdate(\n        firstRow, firstColumn,\n        rowSizes, columnSizes\n      );\n    },\n\n\n    // interface implementation\n    updateLayerData : function()\n    {\n      this.__jobs.updateLayerData = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // interface implementation\n    fullUpdate : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    )\n    {\n      this.__arguments = arguments;\n      this.__jobs.fullUpdate = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // interface implementation\n    updateLayerWindow : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    ) {\n      this.__arguments = arguments;\n      this.__jobs.updateLayerWindow = true;\n      qx.ui.core.queue.Widget.add(this);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__jobs = this.__arguments = this.__rowSizes = this.__columnSizes = null;\n  }\n});\n"
  ]
}