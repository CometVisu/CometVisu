{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/WidgetCell.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "include",
    "core",
    "MChildrenHandling",
    "construct",
    "widgetCellProvider",
    "setZIndex",
    "_cellProvider",
    "__spacerPool",
    "properties",
    "anonymous",
    "refine",
    "init",
    "events",
    "updated",
    "members",
    "getRenderedCellWidget",
    "row",
    "column",
    "_getChildren",
    "length",
    "columnCount",
    "getColumnSizes",
    "rowCount",
    "getRowSizes",
    "firstRow",
    "getFirstRow",
    "firstColumn",
    "getFirstColumn",
    "childIndex",
    "widget",
    "getUserData",
    "_getSpacer",
    "spacer",
    "pop",
    "Spacer",
    "setUserData",
    "_activateNotEmptyChild",
    "elementToPool",
    "active",
    "FocusHandler",
    "getInstance",
    "getActiveWidget",
    "Widget",
    "contains",
    "children",
    "i",
    "activate",
    "_fullUpdate",
    "rowSizes",
    "columnSizes",
    "cellProvider",
    "concat",
    "child",
    "push",
    "poolCellWidget",
    "top",
    "left",
    "visibleItems",
    "y",
    "x",
    "item",
    "getCellWidget",
    "setUserBounds",
    "_add",
    "forEach",
    "indexOf",
    "_remove",
    "bind",
    "fireEvent",
    "_updateLayerWindow",
    "lastRow",
    "lastColumn",
    "overlap",
    "Math",
    "max",
    "min",
    "_lastRow",
    "_lastColumn",
    "lineLength",
    "widgetsToMove",
    "widgetsToMoveIndexes",
    "index",
    "destruct",
    "dispose",
    "WidgetCell"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n\n/**\n * The WidgetCell layer renders each cell with a qooxdoo widget. The concrete\n * widget instance for each cell is provided by a cell provider.\n */\nqx.Class.define(\"qx.ui.virtual.layer.WidgetCell\",\n{\n  extend : qx.ui.virtual.layer.Abstract,\n\n  include : [\n    qx.ui.core.MChildrenHandling\n  ],\n\n\n  /**\n   * @param widgetCellProvider {qx.ui.virtual.core.IWidgetCellProvider} This\n   *    class manages the life cycle of the cell widgets.\n   */\n  construct : function(widgetCellProvider)\n  {\n    this.base(arguments);\n    this.setZIndex(12);\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertInterface(\n        widgetCellProvider,\n        qx.ui.virtual.core.IWidgetCellProvider\n      );\n    }\n\n    this._cellProvider = widgetCellProvider;\n    this.__spacerPool = [];\n  },\n\n\n  /*\n   *****************************************************************************\n      PROPERTIES\n   *****************************************************************************\n   */\n\n   properties :\n   {\n     // overridden\n     anonymous :\n     {\n       refine: true,\n       init: false\n     }\n   },\n\n  events :\n  {\n    /**\n     * Is fired when the {@link #_fullUpdate} or the\n     * {@link #_updateLayerWindow} is finished.\n     */\n    updated : \"qx.event.type.Event\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n     __spacerPool : null,\n\n     /**\n     * Returns the widget used to render the given cell. May return null if the\n     * cell isn‚Äôt rendered currently rendered.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.LayoutItem|null} the widget used to render the given\n     *    cell or <code>null</code>\n     */\n     getRenderedCellWidget : function(row, column)\n     {\n        if (this._getChildren().length === 0) {\n          return null;\n        }\n\n        var columnCount = this.getColumnSizes().length;\n        var rowCount = this.getRowSizes().length;\n\n        var firstRow = this.getFirstRow();\n        var firstColumn = this.getFirstColumn();\n\n        if (\n         row < firstRow ||\n         row >= firstRow + rowCount ||\n         column < firstColumn ||\n         column >= firstColumn + columnCount\n        ) {\n         return null;\n        }\n\n        var childIndex = (column - firstColumn) + (row - firstRow) * columnCount;\n        var widget = this._getChildren()[childIndex];\n\n        if (!widget || widget.getUserData(\"cell.empty\")) {\n         return null;\n        } else {\n         return widget;\n        }\n     },\n\n\n    /**\n     * Get the spacer widget, for empty cells\n     *\n     * @return {qx.ui.core.Spacer} The spacer widget.\n     */\n    _getSpacer : function()\n    {\n      var spacer = this.__spacerPool.pop();\n      if (!spacer)\n      {\n        spacer = new qx.ui.core.Spacer();\n        spacer.setUserData(\"cell.empty\", 1);\n      }\n      return spacer;\n    },\n\n\n    /**\n     * Activates one of the still not empty items.\n     * @param elementToPool {qx.ui.core.Widget} The widget which gets pooled.\n     */\n    _activateNotEmptyChild : function(elementToPool)\n    {\n      // get the current active element\n      var active = qx.ui.core.FocusHandler.getInstance().getActiveWidget();\n      // if the element to pool is active or one of its children\n      if (active == elementToPool || qx.ui.core.Widget.contains(elementToPool, active)) {\n        // search for a new child to activate\n        var children = this._getChildren();\n        for (var i = children.length - 1; i >= 0; i--) {\n          if (!children[i].getUserData(\"cell.empty\")) {\n            children[i].activate();\n            break;\n          }\n        };\n      }\n    },\n\n\n    // overridden\n    _fullUpdate : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      var cellProvider = this._cellProvider;\n\n      var children = this._getChildren().concat();\n      for (var i=0; i<children.length; i++)\n      {\n        var child = children[i];\n        if (child.getUserData(\"cell.empty\")) {\n          this.__spacerPool.push(child);\n        } else {\n          this._activateNotEmptyChild(child);\n          cellProvider.poolCellWidget(child);\n        }\n      }\n\n\n      var top = 0;\n      var left = 0;\n\n      var visibleItems = [];\n\n      for (var y=0; y<rowSizes.length; y++)\n      {\n        for (var x=0; x<columnSizes.length; x++)\n        {\n          var row = firstRow + y;\n          var column = firstColumn + x;\n\n          var item = cellProvider.getCellWidget(row, column) || this._getSpacer();\n\n          visibleItems.push(item);\n\n          item.setUserBounds(left, top, columnSizes[x], rowSizes[y]);\n          item.setUserData(\"cell.row\", row);\n          item.setUserData(\"cell.column\", column);\n          this._add(item);\n\n          left += columnSizes[x];\n        }\n        top += rowSizes[y];\n        left = 0;\n      }\n      children.forEach(function(child){\n        if (visibleItems.indexOf(child) === -1) {\n          this._remove(child);\n        }\n      }.bind(this));\n\n      this.fireEvent(\"updated\");\n    },\n\n\n    _updateLayerWindow : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    )\n    {\n      // compute overlap of old and new window\n      //\n      //      +---+\n      //      |  ##--+\n      //      |  ##  |\n      //      +--##  |\n      //         +---+\n      //\n\n\n    if (qx.core.Environment.get(\"qx.debug\"))\n    {\n      this.assertPositiveInteger(firstRow);\n      this.assertPositiveInteger(firstColumn);\n      this.assertArray(rowSizes);\n      this.assertArray(columnSizes);\n    }\n\n\n      var lastRow = firstRow + rowSizes.length - 1;\n      var lastColumn = firstColumn + columnSizes.length - 1;\n\n      var overlap = {\n        firstRow: Math.max(firstRow, this.getFirstRow()),\n        lastRow: Math.min(lastRow, this._lastRow),\n        firstColumn: Math.max(firstColumn, this.getFirstColumn()),\n        lastColumn: Math.min(lastColumn, this._lastColumn)\n      };\n\n      this._lastColumn = lastColumn;\n      this._lastRow = lastRow;\n\n      if (\n        overlap.firstRow > overlap.lastRow ||\n        overlap.firstColumn > overlap.lastColumn\n      ) {\n        return this._fullUpdate(\n          firstRow, firstColumn,\n          rowSizes, columnSizes\n        );\n      }\n\n      // collect the widgets to move\n      var children = this._getChildren();\n      var lineLength = this.getColumnSizes().length;\n      var widgetsToMove = [];\n      var widgetsToMoveIndexes = {};\n      for (var row=firstRow; row<=lastRow; row++)\n      {\n        widgetsToMove[row] = [];\n        for (var column=firstColumn; column<=lastColumn; column++)\n        {\n          if (\n            row >= overlap.firstRow &&\n            row <= overlap.lastRow &&\n            column >= overlap.firstColumn &&\n            column <= overlap.lastColumn\n          )\n          {\n            var x = column - this.getFirstColumn();\n            var y = row - this.getFirstRow();\n            var index = y*lineLength + x;\n            widgetsToMove[row][column] = children[index];\n            widgetsToMoveIndexes[index] = true;\n          }\n        }\n      }\n\n      var cellProvider = this._cellProvider;\n\n      // pool widgets\n      var children = this._getChildren().concat();\n      for (var i=0; i<children.length; i++)\n      {\n        if (!widgetsToMoveIndexes[i])\n        {\n          var child = children[i];\n          if (child.getUserData(\"cell.empty\")) {\n            this.__spacerPool.push(child);\n          } else {\n            this._activateNotEmptyChild(child);\n            cellProvider.poolCellWidget(child);\n          }\n        }\n      }\n\n\n      var top = 0;\n      var left = 0;\n      var visibleItems = [];\n\n      for (var y=0; y<rowSizes.length; y++)\n      {\n        for (var x=0; x<columnSizes.length; x++)\n        {\n          var row = firstRow + y;\n          var column = firstColumn + x;\n\n          var item =\n            widgetsToMove[row][column] ||\n            cellProvider.getCellWidget(row, column) ||\n            this._getSpacer();\n\n          visibleItems.push(item);\n\n          item.setUserBounds(left, top, columnSizes[x], rowSizes[y]);\n          item.setUserData(\"cell.row\", row);\n          item.setUserData(\"cell.column\", column);\n          this._add(item);\n\n          left += columnSizes[x];\n        }\n        top += rowSizes[y];\n        left = 0;\n      }\n      children.forEach(function(child){\n        if (visibleItems.indexOf(child) === -1) {\n          this._remove(child);\n        }\n      }.bind(this));\n\n      this.fireEvent(\"updated\");\n    }\n  },\n\n  destruct : function()\n  {\n    var children = this._getChildren();\n    for (var i=0; i<children.length; i++) {\n      children[i].dispose();\n    }\n\n    this._cellProvider = this.__spacerPool = null;\n  }\n});\n"
  ]
}