{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/WidgetCellSpan.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "include",
    "core",
    "MChildrenHandling",
    "construct",
    "widgetCellProvider",
    "rowConfig",
    "columnConfig",
    "setZIndex",
    "_spanManager",
    "CellSpanManager",
    "_cellProvider",
    "__spacerPool",
    "_cellLayer",
    "WidgetCell",
    "__getCellProviderForNonSpanningCells",
    "_setLayout",
    "layout",
    "Grow",
    "_add",
    "properties",
    "anonymous",
    "refine",
    "init",
    "members",
    "getRenderedCellWidget",
    "row",
    "column",
    "widget",
    "getUserData",
    "children",
    "_getChildren",
    "i",
    "l",
    "length",
    "child",
    "cell",
    "rowSpan",
    "colSpan",
    "setCellSpan",
    "columnSpan",
    "id",
    "removeCell",
    "addCell",
    "queue",
    "Widget",
    "add",
    "_getSpacer",
    "spacer",
    "pop",
    "Spacer",
    "setUserData",
    "self",
    "cellProvider",
    "spacerPool",
    "nonSpanningCellProvider",
    "getCellWidget",
    "_spanMap",
    "poolCellWidget",
    "push",
    "__updateCellSpanData",
    "firstRow",
    "firstColumn",
    "rowCount",
    "columnCount",
    "_cells",
    "findCellsInWindow",
    "_bounds",
    "getCellBounds",
    "computeCellSpanMap",
    "__updateCellSpanWidgets",
    "getChildren",
    "_remove",
    "cellBounds",
    "cellWidget",
    "setUserBounds",
    "left",
    "top",
    "width",
    "height",
    "lastRow",
    "lastColumn",
    "_fullUpdate",
    "rowSizes",
    "columnSizes",
    "fullUpdate",
    "_updateLayerWindow",
    "updateLayerWindow",
    "destruct",
    "dispose",
    "_disposeObjects",
    "WidgetCellSpan"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n\n/**\n * An extended WidgetCell layer, which adds the possibility to specify row and\n * column spans for specific cells.\n */\nqx.Class.define(\"qx.ui.virtual.layer.WidgetCellSpan\",\n{\n  extend : qx.ui.virtual.layer.Abstract,\n\n  include : [\n    qx.ui.core.MChildrenHandling\n  ],\n\n\n  /**\n  * @param widgetCellProvider {qx.ui.virtual.core.IWidgetCellProvider} This\n   *    class manages the life cycle of the cell widgets.\n   * @param rowConfig {qx.ui.virtual.core.Axis} The row configuration of the pane\n   *    in which the cells will be rendered\n   * @param columnConfig {qx.ui.virtual.core.Axis} The column configuration of the pane\n   *    in which the cells will be rendered\n   */\n  construct : function(widgetCellProvider, rowConfig, columnConfig)\n  {\n    this.base(arguments);\n    this.setZIndex(12);\n\n    this._spanManager = new qx.ui.virtual.layer.CellSpanManager(rowConfig, columnConfig);\n    this._cellProvider = widgetCellProvider;\n    this.__spacerPool = [];\n\n    this._cellLayer = new qx.ui.virtual.layer.WidgetCell(\n      this.__getCellProviderForNonSpanningCells()\n    );\n    this._cellLayer.setZIndex(0);\n\n    this._setLayout(new qx.ui.layout.Grow());\n    this._add(this._cellLayer);\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    anonymous :\n    {\n      refine: true,\n      init: false\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Returns the widget used to render the given cell. May return null if the\n     * cell isn‚Äôt rendered currently rendered.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.LayoutItem|null} the widget used to render the given\n     *    cell or <code>null</code>\n     */\n     getRenderedCellWidget : function(row, column)\n     {\n       var widget = this._cellLayer.getRenderedCellWidget(row, column);\n       if (!widget || widget.getUserData(\"cell.spanning\"))\n       {\n         var children = this._getChildren();\n         for (var i=0, l=children.length; i<l; i++)\n         {\n           var child = children[i];\n           if (child == this._cellLayer) {\n             continue;\n           }\n\n           var cell = {\n             row: child.getUserData(\"cell.row\"),\n             column : child.getUserData(\"cell.column\"),\n             rowSpan : child.getUserData(\"cell.rowspan\"),\n             colSpan : child.getUserData(\"cell.colspan\")\n           };\n\n           if (\n             cell.row <= row && row < cell.row + cell.rowSpan &&\n             cell.column <= column && column < cell.column + cell.colSpan\n           ) {\n             return child;\n           }\n         }\n         return null;\n       }\n\n       return widget;\n     },\n\n\n    __spacerPool : null,\n\n    /**\n     * Set the row and column span for a specific cell\n     *\n     * @param row {PositiveInteger} The cell's row\n     * @param column {PositiveInteger} The cell's column\n     * @param rowSpan {PositiveInteger} The number of rows the cells spans\n     * @param columnSpan {PositiveInteger} The number of columns the cells spans\n     */\n    setCellSpan : function(row, column, rowSpan, columnSpan)\n    {\n      var id = row + \"x\" + column;\n      this._spanManager.removeCell(id);\n      if (rowSpan > 1 || columnSpan > 1) {\n        this._spanManager.addCell(id, row, column, rowSpan, columnSpan);\n      }\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * Get the spacer widget, for span cells\n     *\n     * @return {qx.ui.core.Spacer} The spacer widget.\n     */\n    _getSpacer : function()\n    {\n      var spacer = this.__spacerPool.pop();\n      if (!spacer)\n      {\n        spacer = new qx.ui.core.Spacer();\n        spacer.setUserData(\"cell.empty\", 1);\n        spacer.setUserData(\"cell.spanning\", 1);\n      }\n      return spacer;\n    },\n\n\n    /**\n     * Get the cell provider for the non spanning cells\n     *\n     * @return {qx.ui.virtual.core.IWidgetCellProvider} the cell provider\n     */\n    __getCellProviderForNonSpanningCells : function()\n    {\n      var self = this;\n      var cellProvider = this._cellProvider;\n      var spacerPool = this.__spacerPool;\n\n      var nonSpanningCellProvider =\n      {\n        getCellWidget : function(row, column)\n        {\n          if (!self._spanMap[row][column])\n          {\n            var widget = cellProvider.getCellWidget(row, column);\n          }\n          else\n          {\n            var widget = self._getSpacer();\n          }\n          return widget;\n        },\n\n        poolCellWidget : function(widget)\n        {\n          if (widget.getUserData(\"cell.spanning\")) {\n            spacerPool.push(widget);\n          } else {\n            cellProvider.poolCellWidget(widget);\n          }\n        }\n      };\n\n      return nonSpanningCellProvider;\n    },\n\n\n    /**\n     * Updates the fields <code>_cells</code>, <code>_bounds</code> and\n     * <code>_spanMap</code> according to the given grid window.\n     *\n     * @param firstRow {PositiveInteger} first visible row\n     * @param firstColumn {PositiveInteger} first visible column\n     * @param rowCount {PositiveInteger} number of rows to update\n     * @param columnCount {PositiveInteger} number columns to update\n     */\n    __updateCellSpanData : function(firstRow, firstColumn, rowCount, columnCount)\n    {\n      this._cells = this._spanManager.findCellsInWindow(\n        firstRow, firstColumn,\n        rowCount, columnCount\n      );\n\n      if (this._cells.length > 0)\n      {\n        this._bounds = this._spanManager.getCellBounds(\n          this._cells,\n          firstRow, firstColumn\n        );\n        this._spanMap = this._spanManager.computeCellSpanMap(\n          this._cells,\n          firstRow, firstColumn,\n          rowCount, columnCount\n        );\n      }\n      else\n      {\n        this._bounds = [];\n        // create empty dummy map\n        this._spanMap = [];\n        for (var i=0; i<rowCount; i++) {\n          this._spanMap[firstRow + i] = [];\n        }\n      }\n    },\n\n\n    /**\n     * Updates the widget in spanned cells.\n     *\n     * Note: The method {@link #__updateCellSpanData} must be called before\n     * this method is called:\n     */\n    __updateCellSpanWidgets : function()\n    {\n      // remove and pool existing cells\n      var children = this.getChildren();\n      for (var i=children.length-1; i>=0; i--)\n      {\n        var child = children[i];\n        if (child !== this._cellLayer)\n        {\n          this._cellProvider.poolCellWidget(child);\n          this._remove(child);\n        }\n      }\n\n      for (var i=0, l=this._cells.length; i<l; i++)\n      {\n        var cell = this._cells[i];\n        var cellBounds = this._bounds[i];\n        var cellWidget = this._cellProvider.getCellWidget(cell.firstRow, cell.firstColumn);\n        if (cellWidget)\n        {\n          cellWidget.setUserBounds(\n            cellBounds.left, cellBounds.top,\n            cellBounds.width, cellBounds.height\n          );\n          cellWidget.setUserData(\"cell.row\", cell.firstRow);\n          cellWidget.setUserData(\"cell.column\", cell.firstColumn);\n          cellWidget.setUserData(\"cell.rowspan\", cell.lastRow - cell.firstRow + 1);\n          cellWidget.setUserData(\"cell.colspan\", cell.lastColumn - cell.firstColumn + 1);\n          this._add(cellWidget);\n        }\n      }\n    },\n\n\n    // overridden\n    _fullUpdate : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      this.__updateCellSpanData(\n        firstRow, firstColumn,\n        rowSizes.length, columnSizes.length\n      );\n      this.__updateCellSpanWidgets();\n      this._cellLayer.fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\n    },\n\n\n    // overridden\n    _updateLayerWindow : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      this.__updateCellSpanData(\n        firstRow, firstColumn,\n        rowSizes.length, columnSizes.length\n      );\n      this.__updateCellSpanWidgets();\n      this._cellLayer.updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes);\n    }\n  },\n\n\n  destruct : function()\n  {\n    var children = this._getChildren();\n    for (var i=0; i<children.length; i++) {\n      children[i].dispose();\n    }\n\n    this._disposeObjects(\"_spanManager\", \"_cellLayer\");\n    this._cellProvider = this.__spacerPool = this._cells =\n      this._bounds = this._spanMap = null;\n  }\n});\n"
  ]
}