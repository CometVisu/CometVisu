{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/GridLines.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "construct",
    "orientation",
    "lineColor",
    "lineSize",
    "setZIndex",
    "setDefaultLineColor",
    "undefined",
    "setDefaultLineSize",
    "__lineColors",
    "__lineSizes",
    "_isHorizontal",
    "properties",
    "defaultLineColor",
    "init",
    "check",
    "themeable",
    "defaultLineSize",
    "members",
    "isHorizontal",
    "setLineColor",
    "index",
    "color",
    "__isLineRendered",
    "updateLayerData",
    "setLineSize",
    "size",
    "firstColumn",
    "getFirstColumn",
    "lastColumn",
    "getColumnSizes",
    "length",
    "firstRow",
    "getFirstRow",
    "lastRow",
    "getRowSizes",
    "getLineSize",
    "getDefaultLineSize",
    "getLineColor",
    "getDefaultLineColor",
    "__renderHorizontalLines",
    "htmlArr",
    "rowSizes",
    "top",
    "height",
    "y",
    "push",
    "Math",
    "floor",
    "__renderVerticalLines",
    "columnSizes",
    "left",
    "width",
    "x",
    "_fullUpdate",
    "html",
    "getContentElement",
    "setAttribute",
    "join",
    "_updateLayerWindow",
    "rowChanged",
    "columnChanged",
    "destruct",
    "GridLines"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Represents horizontal or vertical lines.\n */\nqx.Class.define(\"qx.ui.virtual.layer.GridLines\",\n{\n  extend : qx.ui.virtual.layer.Abstract,\n\n  /**\n   * @param orientation {String?\"horizontal\"} The grid line orientation.\n   * @param lineColor {Color?null} The default color for grid lines\n   * @param lineSize {PositiveInteger|null} The default width/height for grid\n   *    lines.\n   */\n  construct : function(orientation, lineColor, lineSize)\n  {\n    this.base(arguments);\n    this.setZIndex(11);\n\n    if (lineColor) {\n      this.setDefaultLineColor(lineColor);\n    }\n\n    if (lineSize !== undefined) {\n      this.setDefaultLineSize(lineSize);\n    }\n\n    this.__lineColors = [];\n    this.__lineSizes = [];\n\n    this._isHorizontal = (orientation || \"horizontal\") == \"horizontal\";\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The default color for grid lines.*/\n    defaultLineColor :\n    {\n      init : \"gray\",\n      check : \"Color\",\n      themeable : true\n    },\n\n    /** The default width/height for grid lines.*/\n    defaultLineSize :\n    {\n      init : 1,\n      check : \"PositiveInteger\",\n      themeable : true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    /** Stores the colors for deviant grid lines. */\n    __lineColors : null,\n\n    /** Stores the width/height for deviant grid lines. */\n    __lineSizes : null,\n\n\n    /**\n     * Whether horizontal lines are rendered\n     *\n     * @return {Boolean} Whether horizontal lines are rendered\n     */\n    isHorizontal : function() {\n      return this._isHorizontal;\n    },\n\n\n    /**\n     * Sets the color for the grid line with the given index.\n     *\n     * @param index {PositiveNumber} The index of the line.\n     * @param color {Color} The color.\n     */\n    setLineColor : function(index, color)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert.assertPositiveNumber(index);\n        qx.core.Assert.assertString(color);\n      }\n      this.__lineColors[index] = color;\n\n      if (this.__isLineRendered(index)) {\n        this.updateLayerData();\n      }\n    },\n\n\n    /**\n     * Sets the width/height for the grid line with the given index.\n     *\n     * @param index {PositiveNumber} The index of the line.\n     * @param size {PositiveInteger} The size.\n     */\n    setLineSize : function(index, size)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert.assertPositiveInteger(index);\n        qx.core.Assert.assertPositiveInteger(size);\n      }\n      this.__lineSizes[index] = size;\n\n      if (this.__isLineRendered(index)) {\n        this.updateLayerData();\n      }\n    },\n\n\n    /**\n     * Whether the line with the given index is currently rendered (i.e. in the\n     * layer's view port).\n     *\n     * @param index {Integer} The line's index\n     * @return {Boolean} Whether the line is rendered\n     */\n    __isLineRendered : function(index)\n    {\n      if (this._isHorizontal)\n      {\n        var firstColumn = this.getFirstColumn();\n        var lastColumn = firstColumn + this.getColumnSizes().length - 1;\n        return index >= firstColumn && index <= lastColumn;\n      }\n      else\n      {\n        var firstRow = this.getFirstRow();\n        var lastRow = firstRow + this.getRowSizes().length - 1;\n        return index >= firstRow && index <= lastRow;\n      }\n    },\n\n\n    /**\n     * Returns the size of the grid line with the given index.\n     *\n     * @param index {PositiveNumber} The index of the line.\n     * @return {PositiveInteger} The size.\n     */\n    getLineSize : function(index) {\n      return this.__lineSizes[index] || this.getDefaultLineSize();\n    },\n\n\n    /**\n     * Returns the color of the grid line with the given index.\n     *\n     * @param index {PositiveNumber} The index of the line.\n     * @return {String} The color.\n     */\n    getLineColor : function(index) {\n      return this.__lineColors[index] || this.getDefaultLineColor();\n    },\n\n\n    /**\n     * Helper function to render horizontal lines.\n     *\n     * @param htmlArr {Array} An array to store the generated HTML in.\n     * @param firstRow {Integer} The first visible row\n     * @param rowSizes {Array} An array containing the row sizes.\n     */\n    __renderHorizontalLines : function(htmlArr, firstRow, rowSizes)\n    {\n      var top = 0;\n      var color, height;\n      for (var y=0; y<rowSizes.length-1; y++)\n      {\n        color = this.getLineColor(firstRow + y);\n        height = this.getLineSize(firstRow + y);\n\n        top += rowSizes[y];\n        htmlArr.push(\n          \"<div style='\",\n          \"position: absolute;\",\n          \"height: \" + height + \"px;\",\n          \"width: 100%;\",\n          \"top:\", top - ((height > 1) ? Math.floor(height / 2) : 1), \"px;\",\n          \"background-color:\", color,\n          \"'>\",\n          \"</div>\"\n        );\n      }\n    },\n\n\n    /**\n     * Helper function to render vertical lines.\n     *\n     * @param htmlArr {Array} The array to store the generated HTML in.\n     * @param firstColumn {Integer} The first visible column\n     * @param columnSizes {Array} An array containing the column sizes.\n     */\n    __renderVerticalLines : function(htmlArr, firstColumn, columnSizes)\n    {\n      var left = 0;\n      var color, width;\n      for (var x=0; x<columnSizes.length-1; x++)\n      {\n        color = this.getLineColor(firstColumn + x);\n        width = this.getLineSize(firstColumn + x);\n\n        left += columnSizes[x];\n        htmlArr.push(\n          \"<div style='\",\n          \"position: absolute;\",\n          \"width: \" + width + \"px;\",\n          \"height: 100%;\",\n          \"top: 0px;\",\n          \"left:\", left - ((width > 1) ? Math.floor(width / 2) : 1), \"px;\",\n          \"background-color:\", color,\n          \"'>\",\n          \"</div>\"\n        );\n      }\n    },\n\n\n    // overridden\n    _fullUpdate : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      var html = [];\n      if (this._isHorizontal) {\n        this.__renderHorizontalLines(html, firstRow, rowSizes);\n      } else {\n        this.__renderVerticalLines(html, firstColumn, columnSizes);\n      }\n      this.getContentElement().setAttribute(\"html\", html.join(\"\"));\n    },\n\n\n    // overridden\n    _updateLayerWindow : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      var rowChanged =\n        firstRow !== this.getFirstRow() ||\n        rowSizes.length !== this.getRowSizes().length;\n\n      var columnChanged =\n        firstColumn !== this.getFirstColumn() ||\n        columnSizes.length !== this.getColumnSizes().length;\n\n      if (\n        (this._isHorizontal && rowChanged) ||\n        (!this._isHorizontal && columnChanged)\n      ) {\n        this._fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function() {\n    this.__lineColors = this.__lineSizes = null;\n  }\n});\n"
  ]
}