{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/virtual/cell/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "virtual",
    "cell",
    "ICell",
    "construct",
    "CellStylesheet",
    "getInstance",
    "members",
    "getCssClasses",
    "value",
    "states",
    "getAttributes",
    "getStyles",
    "getInsets",
    "getContent",
    "getCellProperties",
    "classes",
    "style",
    "attributes",
    "content",
    "insets",
    "Abstract"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AASAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,6BAAhB,EACA;AACEC,IAAAA,IAAI,EAAG,UADT;AAEEC,IAAAA,MAAM,EAAGP,EAAE,CAACQ,IAAH,CAAQC,MAFnB;AAGEC,IAAAA,SAAS,EAAGV,EAAE,CAACW,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBC,KAHjC;AAKEC,IAAAA,SAAS,EAAG,qBACZ;AACE,4CADF,CAGE;;AACAf,MAAAA,EAAE,CAACW,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBG,cAAnB,CAAkCC,WAAlC;AACD,KAXH;AAcEC,IAAAA,OAAO,EACP;AACE;;;;;;;AAOAC,MAAAA,aAAa,EAAG,uBAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACtC,eAAO,SAAP;AACD,OAVH;;AAaE;;;;;;;;AAQAC,MAAAA,aAAa,EAAG,uBAASF,KAAT,EAAgBC,MAAhB,EAAwB;AACtC,eAAO,EAAP;AACD,OAvBH;;AA0BE;;;;;;;;AAQAE,MAAAA,SAAS,EAAE,mBAASH,KAAT,EAAgBC,MAAhB,EAAwB;AACjC,eAAO,EAAP;AACD,OApCH;;AAuCE;;;;;;;;;AASAG,MAAAA,SAAS,EAAG,mBAASJ,KAAT,EAAgBC,MAAhB,EAAwB;AAClC,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD,OAlDH;;AAqDE;;;;;;;AAOAI,MAAAA,UAAU,EAAG,oBAASL,KAAT,EAAgBC,MAAhB,EAAwB;AACnC,eAAOD,KAAP;AACD,OA9DH;AAgEEM,MAAAA,iBAAiB,EAAG,2BAASN,KAAT,EAAgBC,MAAhB,EACpB;AACE,eAAO;AACLM,UAAAA,OAAO,EAAG,KAAKR,aAAL,CAAmBC,KAAnB,EAA0BC,MAA1B,CADL;AAELO,UAAAA,KAAK,EAAG,KAAKL,SAAL,CAAeH,KAAf,EAAsBC,MAAtB,CAFH;AAGLQ,UAAAA,UAAU,EAAG,KAAKP,aAAL,CAAmBF,KAAnB,EAA0BC,MAA1B,CAHR;AAILS,UAAAA,OAAO,EAAG,KAAKL,UAAL,CAAgBL,KAAhB,EAAuBC,MAAvB,CAJL;AAKLU,UAAAA,MAAM,EAAG,KAAKP,SAAL,CAAeJ,KAAf,EAAsBC,MAAtB;AALJ,SAAP;AAOD;AAzEH;AAfF,GADA;AA3BArB,EAAAA,EAAE,CAACW,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBmB,QAAnB,CAA4B7B,aAA5B,GAA4CA,aAA5C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Abstract base class for HTML based cell renderer.\n *\n * HTML cell renderer are used to construct an HTML string, which is used to\n * render the cell.\n *\n * @require(qx.bom.Stylesheet)\n *\n */\nqx.Class.define(\"qx.ui.virtual.cell.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n  implement : qx.ui.virtual.cell.ICell,\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // initialize stylesheet\n    qx.ui.virtual.cell.CellStylesheet.getInstance();\n  },\n\n\n  members :\n  {\n    /**\n     * Get the css classes for the cell\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} Space separated list of CSS classes\n     */\n    getCssClasses : function(value, states) {\n      return \"qx-cell\";\n    },\n\n\n    /**\n     * Get the element attributes for the cell\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} Compiled string of cell attributes. e.g.\n     *   <code>'tabIndex=\"1\" readonly=\"false\"'</code>\n     */\n    getAttributes : function(value, states) {\n      return \"\";\n    },\n\n\n    /**\n     * Get the CSS styles for the cell\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} Compiled string of CSS styles. e.g.\n     *   <code>'color=\"red; padding: 10px'</code>\n     */\n    getStyles: function(value, states) {\n      return \"\";\n    },\n\n\n    /**\n     * Get the cell's insets. Insets are the sum of the cell's padding and\n     * border width.\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {Integer[]} An array containing the sum of horizontal insets at index\n     *   <code>0</code> and the sum of vertical insets at index <code>1</code>.\n     */\n    getInsets : function(value, states) {\n      return [0, 0];\n    },\n\n\n    /**\n     * Get cell'S HTML content\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} The cell's content as HTML fragment.\n     */\n    getContent : function(value, states) {\n      return value;\n    },\n\n    getCellProperties : function(value, states)\n    {\n      return {\n        classes : this.getCssClasses(value, states),\n        style : this.getStyles(value, states),\n        attributes : this.getAttributes(value, states),\n        content : this.getContent(value, states),\n        insets : this.getInsets(value, states)\n      };\n    }\n  }\n});\n"
  ]
}