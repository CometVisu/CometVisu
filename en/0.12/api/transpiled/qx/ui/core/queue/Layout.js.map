{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Layout.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__queue",
    "__nesting",
    "remove",
    "widget",
    "toHashCode",
    "add",
    "ui",
    "core",
    "queue",
    "Manager",
    "scheduleFlush",
    "isScheduled",
    "flush",
    "__getSortedQueue",
    "i",
    "length",
    "hasValidLayout",
    "isRootWidget",
    "hasUserBounds",
    "hint",
    "getSizeHint",
    "renderLayout",
    "width",
    "height",
    "bounds",
    "getBounds",
    "left",
    "top",
    "getNestingLevel",
    "cache",
    "level",
    "parent",
    "$$parent",
    "leveldown",
    "__getLevelGroupedWidgets",
    "VisibilityQueue",
    "Visibility",
    "levels",
    "hash",
    "isVisible",
    "sortedQueue",
    "push",
    "invalidateLayoutCache",
    "oldSizeHint",
    "newSizeHint",
    "hintChanged",
    "minWidth",
    "maxWidth",
    "minHeight",
    "maxHeight",
    "getLayoutParent",
    "Layout"
  ],
  "mappings": ";;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,yBAAhB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,SAAO,EAAG,EAFZ;;AAKE;AACAC,MAAAA,SAAS,EAAG,EANd;;AASE;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,MAAM,EAAG,gBAASC,MAAT,EAAiB;AACxB,eAAO,KAAKH,SAAL,CAAaG,MAAM,CAACC,UAAP,EAAb,CAAP;AACD,OAjBH;;AAoBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,GAAG,EAAG,aAASF,MAAT,EACN;AACE,aAAKH,SAAL,CAAaG,MAAM,CAACC,UAAP,EAAb,IAAoCD,MAApC;AACAV,QAAAA,EAAE,CAACa,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiBC,OAAjB,CAAyBC,aAAzB,CAAuC,QAAvC;AACD,OAhCH;;AAkCE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,WAAW,EAAG,qBAASR,MAAT,EAAiB;AAC7B,eAAO,CAAC,CAAC,KAAKH,SAAL,CAAaG,MAAM,CAACC,UAAP,EAAb,CAAT;AACD,OA5CH;;AA8CE;AACJ;AACA;AACA;AACA;AACA;AACIQ,MAAAA,KAAK,EAAG,iBACR;AACE;AACA,YAAIJ,KAAK,GAAG,KAAKK,SAAL,EAAZ,CAFF,CAIE;AACA;;;AACA,aAAK,IAAIC,CAAC,GAACN,KAAK,CAACO,MAAN,GAAa,CAAxB,EAA2BD,CAAC,IAAE,CAA9B,EAAiCA,CAAC,EAAlC,EACA;AACE,cAAIX,MAAM,GAAGK,KAAK,CAACM,CAAD,CAAlB,CADF,CAGE;AACA;;AACA,cAAIX,MAAM,CAACa,cAAP,EAAJ,EAA6B;AAC3B;AACD,WAPH,CASE;;;AACA,cAAIb,MAAM,CAACc,YAAP,MAAyB,CAACd,MAAM,CAACe,aAAP,EAA9B,EACA;AACE;AACA,gBAAIC,IAAI,GAAGhB,MAAM,CAACiB,WAAP,EAAX;AACAjB,YAAAA,MAAM,CAACkB,YAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0BF,IAAI,CAACG,KAA/B,EAAsCH,IAAI,CAACI,MAA3C;AACD,WALD,MAOA;AACE;AACA;AACA,gBAAIC,MAAM,GAAGrB,MAAM,CAACsB,SAAP,EAAb;;AACA,gBAAID,MAAJ,EAAY;AACVrB,cAAAA,MAAM,CAACkB,YAAP,CAAoBG,MAAM,CAACE,IAA3B,EAAiCF,MAAM,CAACG,GAAxC,EAA6CH,MAAM,CAACF,KAApD,EAA2DE,MAAM,CAACD,MAAlE;AACD;AACF;AACF;AACF,OAtFH;;AAyFE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIK,MAAAA,eAAe,EAAG,yBAASzB,MAAT,EAClB;AACE,YAAI0B,KAAK,GAAG,KAAK5B,SAAjB;AACA,YAAI6B,KAAK,GAAG,CAAZ;AACA,YAAIC,MAAM,GAAG5B,MAAb,CAHF,CAKE;;AACA,eAAO,IAAP,EACA;AACE,cAAI0B,KAAK,CAACE,MAAM,CAAC3B,UAAP,EAAD,CAAL,IAA8B,IAAlC,EACA;AACE0B,YAAAA,KAAK,IAAID,KAAK,CAACE,MAAM,CAAC3B,UAAP,EAAD,CAAd;AACA;AACD;;AAED,cAAI,CAAC2B,MAAM,CAACC,QAAZ,EAAsB;AACpB;AACD;;AAEDD,UAAAA,MAAM,GAAGA,MAAM,CAACC,QAAhB;AACAF,UAAAA,KAAK,IAAI,CAAT;AACD,SApBH,CAsBE;;;AACA,YAAIG,SAAS,GAAGH,KAAhB;;AACA,eAAO3B,MAAM,IAAIA,MAAM,KAAK4B,MAA5B,EACA;AACEF,UAAAA,KAAK,CAAC1B,MAAM,CAACC,UAAP,EAAD,CAAL,GAA6B6B,SAAS,EAAtC;AACA9B,UAAAA,MAAM,GAAGA,MAAM,CAAC6B,QAAhB;AACD;;AAED,eAAOF,KAAP;AACD,OAhIH;;AAmIE;AACJ;AACA;AACA;AACA;AACA;AACII,MAAAA,SAAwB,EAAG,qBAC3B;AACE,YAAIC,eAAe,GAAG1C,EAAE,CAACa,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiB4B,UAAvC,CADF,CAGE;;AACA,aAAKnC,SAAL,GAAiB,EAAjB,CAJF,CAME;;AACA,YAAIoC,MAAM,GAAG,EAAb;AACA,YAAI7B,KAAK,GAAG,KAAKR,SAAjB;AACA,YAAIG,MAAJ,EAAY2B,KAAZ;;AAEA,aAAK,IAAIQ,IAAT,IAAiB9B,KAAjB,EACA;AACEL,UAAAA,MAAM,GAAGK,KAAK,CAAC8B,IAAD,CAAd;;AAEA,cAAIH,eAAe,CAACI,SAAhB,CAA0BpC,MAA1B,CAAJ,EACA;AACE2B,YAAAA,KAAK,GAAG,KAAKF,eAAL,CAAqBzB,MAArB,CAAR,CADF,CAGE;;AACA,gBAAI,CAACkC,MAAM,CAACP,KAAD,CAAX,EAAoB;AAClBO,cAAAA,MAAM,CAACP,KAAD,CAAN,GAAgB,EAAhB;AACD,aANH,CAQE;;;AACAO,YAAAA,MAAM,CAACP,KAAD,CAAN,CAAcQ,IAAd,IAAsBnC,MAAtB,CATF,CAWE;;AACA,mBAAOK,KAAK,CAAC8B,IAAD,CAAZ;AACD;AACF;;AAED,eAAOD,MAAP;AACD,OA3KH;;AA8KE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIxB,MAAAA,SAAgB,EAAG,qBACnB;AACE,YAAI2B,WAAW,GAAG,EAAlB;;AACA,YAAIH,MAAM,GAAG,KAAKH,SAAL,EAAb;;AAEA,aAAK,IAAIJ,KAAK,GAACO,MAAM,CAACtB,MAAP,GAAc,CAA7B,EAAgCe,KAAK,IAAE,CAAvC,EAA0CA,KAAK,EAA/C,EACA;AACE;AACA,cAAI,CAACO,MAAM,CAACP,KAAD,CAAX,EAAoB;AAClB;AACD;;AAED,eAAK,IAAIQ,IAAT,IAAiBD,MAAM,CAACP,KAAD,CAAvB,EACA;AACE,gBAAI3B,MAAM,GAAGkC,MAAM,CAACP,KAAD,CAAN,CAAcQ,IAAd,CAAb,CADF,CAGE;;AACA,gBAAIR,KAAK,IAAI,CAAT,IAAc3B,MAAM,CAACc,YAAP,EAAd,IAAuCd,MAAM,CAACe,aAAP,EAA3C,EACA;AACEsB,cAAAA,WAAW,CAACC,IAAZ,CAAiBtC,MAAjB;AACAA,cAAAA,MAAM,CAACuC,qBAAP;AACA;AACD,aATH,CAWE;;;AACA,gBAAIC,WAAW,GAAGxC,MAAM,CAACiB,WAAP,CAAmB,KAAnB,CAAlB;;AAEA,gBAAIuB,WAAJ,EACA;AACExC,cAAAA,MAAM,CAACuC,qBAAP;AACA,kBAAIE,WAAW,GAAGzC,MAAM,CAACiB,WAAP,EAAlB;AAEA,kBAAIyB,WAAW,GACb,CAAC1C,MAAM,CAACsB,SAAP,EAAD,IACAkB,WAAW,CAACG,QAAZ,KAAyBF,WAAW,CAACE,QADrC,IAEAH,WAAW,CAACrB,KAAZ,KAAsBsB,WAAW,CAACtB,KAFlC,IAGAqB,WAAW,CAACI,QAAZ,KAAyBH,WAAW,CAACG,QAHrC,IAIAJ,WAAW,CAACK,SAAZ,KAA0BJ,WAAW,CAACI,SAJtC,IAKAL,WAAW,CAACpB,MAAZ,KAAuBqB,WAAW,CAACrB,MALnC,IAMAoB,WAAW,CAACM,SAAZ,KAA0BL,WAAW,CAACK,SAPxC;AASD,aAdD,MAgBA;AACEJ,cAAAA,WAAW,GAAG,IAAd;AACD;;AAED,gBAAIA,WAAJ,EACA;AACE;AACA;AACA,kBAAId,MAAM,GAAG5B,MAAM,CAAC+C,eAAP,EAAb;;AACA,kBAAI,CAACb,MAAM,CAACP,KAAK,GAAC,CAAP,CAAX,EAAsB;AACpBO,gBAAAA,MAAM,CAACP,KAAK,GAAC,CAAP,CAAN,GAAkB,EAAlB;AACD;;AAEDO,cAAAA,MAAM,CAACP,KAAK,GAAC,CAAP,CAAN,CAAgBC,MAAM,CAAC3B,UAAP,EAAhB,IAAuC2B,MAAvC;AACD,aAVD,MAYA;AACE;AACA;AACAS,cAAAA,WAAW,CAACC,IAAZ,CAAiBtC,MAAjB;AACD;AACF;AACF;;AAED,eAAOqC,WAAP;AACD;AA5PH;AAFF,GADA;AAxBA/C,EAAAA,EAAE,CAACa,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiB2C,MAAjB,CAAwBvD,aAAxB,GAAwCA,aAAxC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The layout queue manages all widgets, which need a recalculation of their\n * layout. The {@link #flush} method computes the layout of all queued widgets\n * and their dependent widgets.\n */\nqx.Class.define(\"qx.ui.core.queue.Layout\",\n{\n  statics :\n  {\n    /** @type {Map} This contains all the queued widgets for the next flush. */\n    __queue : {},\n\n\n    /** Nesting level cache **/\n    __nesting : {},\n\n\n    /**\n     * Clears the widget from the internal queue. Normally only used\n     * during interims disposes of one or a few widgets.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to clear\n     */\n    remove : function(widget) {\n      delete this.__queue[widget.toHashCode()];\n    },\n\n\n    /**\n     * Mark a widget's layout as invalid and add its layout root to\n     * the queue.\n     *\n     * Should only be used by {@link qx.ui.core.Widget}.\n     *\n     * @param widget {qx.ui.core.Widget} Widget to add.\n     */\n    add : function(widget)\n    {\n      this.__queue[widget.toHashCode()] = widget;\n      qx.ui.core.queue.Manager.scheduleFlush(\"layout\");\n    },\n\n    /**\n    * Check whether the queue has scheduled changes for a widget.\n    * Note that the layout parent can have changes scheduled that\n    * affect the children widgets.\n    *\n    * @param widget {qx.ui.core.Widget} Widget to check.\n    * @return {Boolean} Whether the widget given has layout changes queued.\n    */\n    isScheduled : function(widget) {\n      return !!this.__queue[widget.toHashCode()];\n    },\n\n    /**\n     * Update the layout of all widgets, which layout is marked as invalid.\n     *\n     * This is used exclusively by the {@link qx.ui.core.queue.Manager}.\n     *\n     */\n    flush : function()\n    {\n      // get sorted widgets to (re-)layout\n      var queue = this.__getSortedQueue();\n\n      // iterate in reversed order to process widgets with the smallest nesting\n      // level first because these may affect the inner lying children\n      for (var i=queue.length-1; i>=0; i--)\n      {\n        var widget = queue[i];\n\n        // continue if a relayout of one of the root's parents has made the\n        // layout valid\n        if (widget.hasValidLayout()) {\n          continue;\n        }\n\n        // overflow areas or qx.ui.root.*\n        if (widget.isRootWidget() && !widget.hasUserBounds())\n        {\n          // This is a real root widget. Set its size to its preferred size.\n          var hint = widget.getSizeHint();\n          widget.renderLayout(0, 0, hint.width, hint.height);\n        }\n        else\n        {\n          // This is an inner item of layout changes. Do a relayout of its\n          // children without changing its position and size.\n          var bounds = widget.getBounds();\n          if (bounds) {\n            widget.renderLayout(bounds.left, bounds.top, bounds.width, bounds.height);\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Get the widget's nesting level. Top level widgets have a nesting level\n     * of <code>0</code>.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to query.\n     * @return {Integer} The nesting level\n     */\n    getNestingLevel : function(widget)\n    {\n      var cache = this.__nesting;\n      var level = 0;\n      var parent = widget;\n\n      // Detecting level\n      while (true)\n      {\n        if (cache[parent.toHashCode()] != null)\n        {\n          level += cache[parent.toHashCode()];\n          break;\n        }\n\n        if (!parent.$$parent) {\n          break;\n        }\n\n        parent = parent.$$parent;\n        level += 1;\n      }\n\n      // Update the processed hierarchy (runs from inner to outer)\n      var leveldown = level;\n      while (widget && widget !== parent)\n      {\n        cache[widget.toHashCode()] = leveldown--;\n        widget = widget.$$parent;\n      }\n\n      return level;\n    },\n\n\n    /**\n     * Group widget by their nesting level.\n     *\n     * @return {Map[]} A sparse array. Each entry of the array contains a widget\n     *     map with all widgets of the same level as the array index.\n     */\n    __getLevelGroupedWidgets : function()\n    {\n      var VisibilityQueue = qx.ui.core.queue.Visibility;\n\n      // clear cache\n      this.__nesting = {};\n\n      // sparse level array\n      var levels = [];\n      var queue = this.__queue;\n      var widget, level;\n\n      for (var hash in queue)\n      {\n        widget = queue[hash];\n\n        if (VisibilityQueue.isVisible(widget))\n        {\n          level = this.getNestingLevel(widget);\n\n          // create hierarchy\n          if (!levels[level]) {\n            levels[level] = {};\n          }\n\n          // store widget in level map\n          levels[level][hash] = widget;\n\n          // remove widget from layout queue\n          delete queue[hash];\n        }\n      }\n\n      return levels;\n    },\n\n\n    /**\n     * Compute all layout roots of the given widgets. Layout roots are either\n     * root widgets or widgets, which preferred size has not changed by the\n     * layout changes of its children.\n     *\n     * This function returns the roots ordered by their nesting factors. The\n     * layout with the largest nesting level comes first.\n     *\n     * @return {qx.ui.core.Widget[]} Ordered list or layout roots.\n     */\n    __getSortedQueue : function()\n    {\n      var sortedQueue = [];\n      var levels = this.__getLevelGroupedWidgets();\n\n      for (var level=levels.length-1; level>=0; level--)\n      {\n        // Ignore empty levels (levels is an sparse array)\n        if (!levels[level]) {\n          continue;\n        }\n\n        for (var hash in levels[level])\n        {\n          var widget = levels[level][hash];\n\n          // This is a real layout root. Add it directly to the list\n          if (level == 0 || widget.isRootWidget() || widget.hasUserBounds())\n          {\n            sortedQueue.push(widget);\n            widget.invalidateLayoutCache();\n            continue;\n          }\n\n          // compare old size hint to new size hint\n          var oldSizeHint = widget.getSizeHint(false);\n\n          if (oldSizeHint)\n          {\n            widget.invalidateLayoutCache();\n            var newSizeHint = widget.getSizeHint();\n\n            var hintChanged = (\n              !widget.getBounds() ||\n              oldSizeHint.minWidth !== newSizeHint.minWidth ||\n              oldSizeHint.width !== newSizeHint.width ||\n              oldSizeHint.maxWidth !== newSizeHint.maxWidth ||\n              oldSizeHint.minHeight !== newSizeHint.minHeight ||\n              oldSizeHint.height !== newSizeHint.height ||\n              oldSizeHint.maxHeight !== newSizeHint.maxHeight\n            );\n          }\n          else\n          {\n            hintChanged = true;\n          }\n\n          if (hintChanged)\n          {\n            // Since the level is > 0, the widget must\n            // have a parent != null.\n            var parent = widget.getLayoutParent();\n            if (!levels[level-1]) {\n              levels[level-1] = {};\n            }\n\n            levels[level-1][parent.toHashCode()] = parent;\n          }\n          else\n          {\n            // this is an internal layout root since its own preferred size\n            // has not changed.\n            sortedQueue.push(widget);\n          }\n        }\n      }\n\n      return sortedQueue;\n    }\n  }\n});\n"
  ]
}