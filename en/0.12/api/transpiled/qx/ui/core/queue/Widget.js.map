{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Widget.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__queue",
    "__jobs",
    "remove",
    "widget",
    "job",
    "queue",
    "includes",
    "hash",
    "toHashCode",
    "lang",
    "Array",
    "Object",
    "getLength",
    "add",
    "unshift",
    "ui",
    "core",
    "Manager",
    "scheduleFlush",
    "flush",
    "obj",
    "jobs",
    "i",
    "length",
    "splice",
    "syncWidget",
    "Widget"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Mustafa Sak (msak)\n\n************************************************************************ */\n\n/**\n * The widget queue handles the deferred computation of certain widget properties.\n * It is used e.g. for the tree to update the indentation of tree nodes.\n *\n * This queue calls the method {@link qx.ui.core.Widget#syncWidget} of each\n * queued widget before the layout queues are processed.\n */\nqx.Class.define(\"qx.ui.core.queue.Widget\",\n{\n  statics :\n  {\n    /** @type {Array} This contains all the queued widgets for the next flush. */\n    __queue : [],\n\n\n    /**\n     * @type {Object} This contains a map of widgets hash ($$hash) and their\n     * corresponding map of jobs.\n     */\n    __jobs : {},\n\n\n    /**\n     * Clears given job of a widget from the internal queue. If no jobs left, the\n     * widget will be removed completely from queue. If job param is <code>null</code>\n     * or <code>undefined</code> widget will be removed completely from queue.\n     * Normally only used during interims disposes of one or a few widgets.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to clear\n     * @param job {String?} Job identifier. If not used, it will be converted to\n     * \"$$default\".\n     */\n    remove : function(widget, job)\n    {\n      var queue = this.__queue;\n\n      if (!queue.includes(widget)) {\n        return;\n      }\n\n      var hash = widget.toHashCode();\n\n      // remove widget and all corresponding jobs, if job param is not given.\n      if(job == null) {\n         qx.lang.Array.remove(queue, widget);\n         delete this.__jobs[hash];\n         return;\n      }\n\n      if (this.__jobs[hash])\n      {\n        delete this.__jobs[hash][job];\n\n        if(qx.lang.Object.getLength(this.__jobs[hash]) == 0) {\n          qx.lang.Array.remove(queue, widget);\n        }\n      }\n    },\n\n\n    /**\n     * Adds a widget to the queue. The second param can be used to identify\n     * several jobs. You can add one job at once, which will be returned as\n     * an map at flushing on method {@link qx.ui.core.Widget#syncWidget}.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to add.\n     * @param job {String?} Job identifier. If not used, it will be converted to\n     * \"$$default\".\n     */\n    add : function(widget, job)\n    {\n      var queue = this.__queue;\n      //add widget if not containing\n      if (!queue.includes(widget)){\n        queue.unshift(widget);\n      }\n\n      //add job\n      if (job == null) {\n        job = \"$$default\";\n      }\n      var hash = widget.toHashCode();\n      if (!this.__jobs[hash]) {\n        this.__jobs[hash] = {};\n      }\n      this.__jobs[hash][job] = true;\n\n      qx.ui.core.queue.Manager.scheduleFlush(\"widget\");\n    },\n\n\n    /**\n     * Flushes the widget queue.\n     *\n     * This is used exclusively by the {@link qx.ui.core.queue.Manager}.\n     */\n    flush : function()\n    {\n      // Process all registered widgets\n      var queue = this.__queue;\n      var obj, jobs;\n      for (var i = queue.length - 1 ; i >= 0; i--)\n      {\n        // Order is important to allow the same widget to be requeued directly\n        obj = queue[i];\n        jobs = this.__jobs[obj.toHashCode()];\n\n        queue.splice(i, 1);\n        obj.syncWidget(jobs);\n      }\n\n      // Empty check\n      if (queue.length != 0) {\n        return;\n      }\n\n      // Recreate the array is cheaper compared to keep a sparse array over time\n      this.__queue = [];\n      this.__jobs = {};\n    }\n  }\n});\n"
  ]
}