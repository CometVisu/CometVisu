{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/LayoutItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "theme",
    "manager",
    "Meta",
    "getInstance",
    "addListener",
    "_onChangeTheme",
    "properties",
    "minWidth",
    "check",
    "nullable",
    "apply",
    "init",
    "themeable",
    "width",
    "event",
    "maxWidth",
    "minHeight",
    "height",
    "maxHeight",
    "allowGrowX",
    "allowShrinkX",
    "allowGrowY",
    "allowShrinkY",
    "allowStretchX",
    "group",
    "mode",
    "allowStretchY",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "margin",
    "alignX",
    "alignY",
    "members",
    "props",
    "util",
    "PropertyUtil",
    "getAllProperties",
    "constructor",
    "name",
    "desc",
    "userValue",
    "getUserValue",
    "resetThemed",
    "__computedHeightForWidth",
    "__computedLayout",
    "__hasInvalidLayout",
    "__sizeHint",
    "__updateMargin",
    "__userBounds",
    "__layoutProperties",
    "getBounds",
    "clearSeparators",
    "renderSeparator",
    "separator",
    "bounds",
    "renderLayout",
    "left",
    "top",
    "isDisposed",
    "computed",
    "changes",
    "position",
    "size",
    "local",
    "getHeight",
    "_hasHeightForWidth",
    "flowHeight",
    "_getHeightForWidth",
    "ui",
    "queue",
    "Layout",
    "add",
    "isExcluded",
    "hasValidLayout",
    "scheduleLayoutUpdate",
    "invalidateLayoutCache",
    "getSizeHint",
    "compute",
    "hint",
    "_computeSizeHint",
    "getAllowGrowX",
    "getAllowShrinkX",
    "getAllowGrowY",
    "getAllowShrinkY",
    "getMinWidth",
    "getMinHeight",
    "getWidth",
    "getMaxWidth",
    "Infinity",
    "getMaxHeight",
    "layout",
    "_getLayout",
    "hasHeightForWidth",
    "getHeightForWidth",
    "_applyMargin",
    "parent",
    "$$parent",
    "updateLayoutProperties",
    "_applyAlign",
    "_applyDimension",
    "_applyStretching",
    "hasUserBounds",
    "setUserBounds",
    "resetUserBounds",
    "__emptyProperties",
    "setLayoutProperties",
    "storage",
    "getLayoutParent",
    "key",
    "getLayoutProperties",
    "clearLayoutProperties",
    "invalidateChildrenCache",
    "getApplicationRoot",
    "Init",
    "getApplication",
    "getRoot",
    "setLayoutParent",
    "Visibility",
    "isRootWidget",
    "_getRoot",
    "clone",
    "lang",
    "destruct",
    "removeListener",
    "$$subparent",
    "LayoutItem"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The base class of all items, which should be laid out using a layout manager\n * {@link qx.ui.layout.Abstract}.\n */\nqx.Class.define(\"qx.ui.core.LayoutItem\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n\n  construct : function() {\n    this.base(arguments);\n\n    // dynamic theme switch\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().addListener(\"changeTheme\", this._onChangeTheme, this);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * The user provided minimal width.\n     *\n     * Also take a look at the related properties {@link #width} and {@link #maxWidth}.\n     */\n    minWidth :\n    {\n      check : \"Integer\",\n      nullable : true,\n      apply : \"_applyDimension\",\n      init : null,\n      themeable : true\n    },\n\n\n    /**\n     * The <code>LayoutItem</code>'s preferred width.\n     *\n     * The computed width may differ from the given width due to\n     * stretching. Also take a look at the related properties\n     * {@link #minWidth} and {@link #maxWidth}.\n     */\n    width :\n    {\n      check : \"Integer\",\n      event : \"changeWidth\",\n      nullable : true,\n      apply : \"_applyDimension\",\n      init : null,\n      themeable : true\n    },\n\n\n    /**\n     * The user provided maximal width.\n     *\n     * Also take a look at the related properties {@link #width} and {@link #minWidth}.\n     */\n    maxWidth :\n    {\n      check : \"Integer\",\n      nullable : true,\n      apply : \"_applyDimension\",\n      init : null,\n      themeable : true\n    },\n\n\n    /**\n     * The user provided minimal height.\n     *\n     * Also take a look at the related properties {@link #height} and {@link #maxHeight}.\n     */\n    minHeight :\n    {\n      check : \"Integer\",\n      nullable : true,\n      apply : \"_applyDimension\",\n      init : null,\n      themeable : true\n    },\n\n\n    /**\n     * The item's preferred height.\n     *\n     * The computed height may differ from the given height due to\n     * stretching. Also take a look at the related properties\n     * {@link #minHeight} and {@link #maxHeight}.\n     */\n    height :\n    {\n      check : \"Integer\",\n      event : \"changeHeight\",\n      nullable : true,\n      apply : \"_applyDimension\",\n      init : null,\n      themeable : true\n    },\n\n\n    /**\n     * The user provided maximum height.\n     *\n     * Also take a look at the related properties {@link #height} and {@link #minHeight}.\n     */\n    maxHeight :\n    {\n      check : \"Integer\",\n      nullable : true,\n      apply : \"_applyDimension\",\n      init : null,\n      themeable : true\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      STRETCHING\n    ---------------------------------------------------------------------------\n    */\n\n    /** Whether the item can grow horizontally. */\n    allowGrowX :\n    {\n      check : \"Boolean\",\n      apply : \"_applyStretching\",\n      init : true,\n      themeable : true\n    },\n\n\n    /** Whether the item can shrink horizontally. */\n    allowShrinkX :\n    {\n      check : \"Boolean\",\n      apply : \"_applyStretching\",\n      init : true,\n      themeable : true\n    },\n\n\n    /** Whether the item can grow vertically. */\n    allowGrowY :\n    {\n      check : \"Boolean\",\n      apply : \"_applyStretching\",\n      init : true,\n      themeable : true\n    },\n\n\n    /** Whether the item can shrink vertically. */\n    allowShrinkY :\n    {\n      check : \"Boolean\",\n      apply : \"_applyStretching\",\n      init : true,\n      themeable : true\n    },\n\n\n    /** Growing and shrinking in the horizontal direction */\n    allowStretchX :\n    {\n      group : [ \"allowGrowX\", \"allowShrinkX\" ],\n      mode : \"shorthand\",\n      themeable: true\n    },\n\n\n    /** Growing and shrinking in the vertical direction */\n    allowStretchY :\n    {\n      group : [ \"allowGrowY\", \"allowShrinkY\" ],\n      mode : \"shorthand\",\n      themeable: true\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      MARGIN\n    ---------------------------------------------------------------------------\n    */\n\n    /** Margin of the widget (top) */\n    marginTop :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyMargin\",\n      themeable : true\n    },\n\n\n    /** Margin of the widget (right) */\n    marginRight :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyMargin\",\n      themeable : true\n    },\n\n\n    /** Margin of the widget (bottom) */\n    marginBottom :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyMargin\",\n      themeable : true\n    },\n\n\n    /** Margin of the widget (left) */\n    marginLeft :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyMargin\",\n      themeable : true\n    },\n\n\n    /**\n     * The 'margin' property is a shorthand property for setting 'marginTop',\n     * 'marginRight', 'marginBottom' and 'marginLeft' at the same time.\n     *\n     * If four values are specified they apply to top, right, bottom and left respectively.\n     * If there is only one value, it applies to all sides, if there are two or three,\n     * the missing values are taken from the opposite side.\n     */\n    margin :\n    {\n      group : [ \"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\" ],\n      mode  : \"shorthand\",\n      themeable : true\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      ALIGN\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Horizontal alignment of the item in the parent layout.\n     *\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\n     * it would have a visual effect. Except for {@link Spacer}, which provides\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\n     */\n    alignX :\n    {\n      check : [ \"left\", \"center\", \"right\" ],\n      nullable : true,\n      apply : \"_applyAlign\",\n      themeable: true\n    },\n\n\n    /**\n     * Vertical alignment of the item in the parent layout.\n     *\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\n     * it would have a visual effect. Except for {@link Spacer}, which provides\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\n     */\n    alignY :\n    {\n      check : [ \"top\", \"middle\", \"bottom\", \"baseline\" ],\n      nullable : true,\n      apply : \"_applyAlign\",\n      themeable: true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      DYNAMIC THEME SWITCH SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for the dynamic theme change.\n     * @signature function()\n     */\n    _onChangeTheme : qx.core.Environment.select(\"qx.dyntheme\",\n    {\n      \"true\" : function() {\n        // reset all themeable properties\n        var props = qx.util.PropertyUtil.getAllProperties(this.constructor);\n        for (var name in props) {\n          var desc = props[name];\n          // only themeable properties not having a user value\n          if (desc.themeable) {\n            var userValue = qx.util.PropertyUtil.getUserValue(this, name);\n            if (userValue == null) {\n              qx.util.PropertyUtil.resetThemed(this, name);\n            }\n          }\n        }\n      },\n      \"false\" : null\n    }),\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT PROCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Integer} The computed height */\n    __computedHeightForWidth : null,\n\n    /** @type {Map} The computed size of the layout item */\n    __computedLayout : null,\n\n    /** @type {Boolean} Whether the current layout is valid */\n    __hasInvalidLayout : null,\n\n    /** @type {Map} Cached size hint */\n    __sizeHint : null,\n\n    /** @type {Boolean} Whether the margins have changed and must be updated */\n    __updateMargin : null,\n\n    /** @type {Map} user provided bounds of the widget, which override the layout manager */\n    __userBounds : null,\n\n    /** @type {Map} The item's layout properties */\n    __layoutProperties : null,\n\n\n    /**\n     * Get the computed location and dimension as computed by\n     * the layout manager.\n     *\n     * @return {Map|null} The location and dimensions in pixel\n     *    (if the layout is valid). Contains the keys\n     *    <code>width</code>, <code>height</code>, <code>left</code> and\n     *    <code>top</code>.\n     */\n    getBounds : function() {\n      return this.__userBounds || this.__computedLayout || null;\n    },\n\n\n    /**\n     * Reconfigure number of separators\n     */\n    clearSeparators : function() {\n      // empty template\n    },\n\n\n    /**\n     * Renders a separator between two children\n     *\n     * @param separator {String|qx.ui.decoration.IDecorator} The separator to render\n     * @param bounds {Map} Contains the left and top coordinate and the width and height\n     *    of the separator to render.\n     */\n    renderSeparator : function(separator, bounds) {\n      // empty template\n    },\n\n\n    /**\n     * Used by the layout engine to apply coordinates and dimensions.\n     *\n     * @param left {Integer} Any integer value for the left position,\n     *   always in pixels\n     * @param top {Integer} Any integer value for the top position,\n     *   always in pixels\n     * @param width {Integer} Any positive integer value for the width,\n     *   always in pixels\n     * @param height {Integer} Any positive integer value for the height,\n     *   always in pixels\n     * @return {Map} A map of which layout sizes changed.\n     */\n    renderLayout : function(left, top, width, height)\n    {\n      // do not render if the layout item is already disposed\n      if (this.isDisposed()) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var msg = \"Something went wrong with the layout of \" + this.toString() + \"!\";\n        this.assertInteger(left, \"Wrong 'left' argument. \" + msg);\n        this.assertInteger(top, \"Wrong 'top' argument. \" + msg);\n        this.assertInteger(width, \"Wrong 'width' argument. \" + msg);\n        this.assertInteger(height, \"Wrong 'height' argument. \" + msg);\n\n        // this.assertInRange(width, this.getMinWidth() || -1, this.getMaxWidth() || 32000);\n        // this.assertInRange(height, this.getMinHeight() || -1, this.getMaxHeight() || 32000);\n      }\n\n      // Detect size changes\n\n      // Dynamically create data structure for computed layout\n      var computed = this.__computedLayout;\n      if (!computed) {\n        computed = this.__computedLayout = {};\n      }\n\n      // Detect changes\n      var changes = {};\n\n      if (left !== computed.left || top !== computed.top)\n      {\n        changes.position = true;\n\n        computed.left = left;\n        computed.top = top;\n      }\n\n      if (width !== computed.width || height !== computed.height)\n      {\n        changes.size = true;\n\n        computed.width = width;\n        computed.height = height;\n      }\n\n      // Clear invalidation marker\n      if (this.__hasInvalidLayout)\n      {\n        changes.local = true;\n        delete this.__hasInvalidLayout;\n      }\n\n      if (this.__updateMargin)\n      {\n        changes.margin = true;\n        delete this.__updateMargin;\n      }\n\n      /*\n       * Height for width support\n       * \n       * Results into a re-layout which means that width/height is applied in the next iteration.\n       * \n       * Note that it is important that this happens after the above first pass at calculating a \n       * computed size because otherwise getBounds() will return null, and this will cause an\n       * issue where the existing size is expected to have already been applied by the layout.\n       * See https://github.com/qooxdoo/qooxdoo/issues/9553  \n       */\n      if (this.getHeight() == null && this._hasHeightForWidth()) {\n        var flowHeight = this._getHeightForWidth(width);\n        \n        if (flowHeight != null && flowHeight !== this.__computedHeightForWidth)\n        {\n          // This variable is used in the next computation of the size hint\n          this.__computedHeightForWidth = flowHeight;\n\n          // Re-add to layout queue\n          qx.ui.core.queue.Layout.add(this);\n        }\n      }\n\n      // Returns changes, especially for deriving classes\n      return changes;\n    },\n\n\n    /**\n     * Whether the item should be excluded from the layout\n     *\n     * @return {Boolean} Should the item be excluded by the layout\n     */\n    isExcluded : function() {\n      return false;\n    },\n\n\n    /**\n     * Whether the layout of this item (to layout the children)\n     * is valid.\n     *\n     * @return {Boolean} Returns <code>true</code>\n     */\n    hasValidLayout : function() {\n      return !this.__hasInvalidLayout;\n    },\n\n\n    /**\n     * Indicate that the item has layout changes and propagate this information\n     * up the item hierarchy.\n     *\n     */\n    scheduleLayoutUpdate : function() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n\n    /**\n     * Called by the layout manager to mark this item's layout as invalid.\n     * This function should clear all layout relevant caches.\n     */\n    invalidateLayoutCache : function()\n    {\n      // this.debug(\"Mark layout invalid!\");\n\n      this.__hasInvalidLayout = true;\n      this.__sizeHint = null;\n    },\n\n\n    /**\n     * A size hint computes the dimensions of a widget. It returns\n     * the recommended dimensions as well as the min and max dimensions.\n     * The min and max values already respect the stretching properties.\n     *\n     * <h3>Wording</h3>\n     * <ul>\n     * <li>User value: Value defined by the widget user, using the size properties</li>\n     *\n     * <li>Layout value: The value computed by {@link qx.ui.core.Widget#_getContentHint}</li>\n     * </ul>\n     *\n     * <h3>Algorithm</h3>\n     * <ul>\n     * <li>minSize: If the user min size is not null, the user value is taken,\n     *     otherwise the layout value is used.</li>\n     *\n     * <li>(preferred) size: If the user value is not null the user value is used,\n     *     otherwise the layout value is used.</li>\n     *\n     * <li>max size: Same as the preferred size.</li>\n     * </ul>\n     *\n     * @param compute {Boolean?true} Automatically compute size hint if currently not\n     *   cached?\n     * @return {Map} The map with the preferred width/height and the allowed\n     *   minimum and maximum values in cases where shrinking or growing\n     *   is required.\n     */\n    getSizeHint : function(compute)\n    {\n      var hint = this.__sizeHint;\n      if (hint) {\n        return hint;\n      }\n\n      if (compute === false) {\n        return null;\n      }\n\n      // Compute as defined\n      hint = this.__sizeHint = this._computeSizeHint();\n\n      // Respect height for width\n      if (this._hasHeightForWidth() && this.__computedHeightForWidth && this.getHeight() == null) {\n        hint.height = this.__computedHeightForWidth;\n      }\n\n\n      // normalize width\n      if (hint.minWidth > hint.width) {\n        hint.width = hint.minWidth;\n      }\n      if (hint.maxWidth < hint.width) {\n        hint.width = hint.maxWidth;\n      }\n\n      if (!this.getAllowGrowX()) {\n        hint.maxWidth = hint.width;\n      }\n      if (!this.getAllowShrinkX()) {\n        hint.minWidth = hint.width;\n      }\n\n\n      // normalize height\n      if (hint.minHeight > hint.height) {\n        hint.height = hint.minHeight;\n      }\n      if (hint.maxHeight < hint.height) {\n        hint.height = hint.maxHeight;\n      }\n\n      if (!this.getAllowGrowY()) {\n        hint.maxHeight = hint.height;\n      }\n      if (!this.getAllowShrinkY()) {\n        hint.minHeight = hint.height;\n      }\n\n\n      // Finally return\n      return hint;\n    },\n\n\n    /**\n     * Computes the size hint of the layout item.\n     *\n     * @return {Map} The map with the preferred width/height and the allowed\n     *   minimum and maximum values.\n     */\n    _computeSizeHint : function()\n    {\n      var minWidth = this.getMinWidth() || 0;\n      var minHeight = this.getMinHeight() || 0;\n\n      var width = this.getWidth() || minWidth;\n      var height = this.getHeight() || minHeight;\n\n      var maxWidth = this.getMaxWidth() || Infinity;\n      var maxHeight = this.getMaxHeight() || Infinity;\n\n      return {\n        minWidth : minWidth,\n        width : width,\n        maxWidth : maxWidth,\n        minHeight : minHeight,\n        height : height,\n        maxHeight : maxHeight\n      };\n    },\n\n\n    /**\n     * Whether the item supports height for width.\n     *\n     * @return {Boolean} Whether the item supports height for width\n     */\n    _hasHeightForWidth : function()\n    {\n      var layout = this._getLayout();\n      if (layout) {\n        return layout.hasHeightForWidth();\n      }\n      return false;\n    },\n\n\n    /**\n     * If an item wants to trade height for width it has to implement this\n     * method and return the preferred height of the item if it is resized to\n     * the given width. This function returns <code>null</code> if the item\n     * do not support height for width.\n     *\n     * @param width {Integer} The computed width\n     * @return {Integer} The desired height\n     */\n    _getHeightForWidth : function(width)\n    {\n      var layout = this._getLayout();\n      if (layout && layout.hasHeightForWidth()) {\n        return layout.getHeightForWidth(width);\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Get the widget's layout manager.\n     *\n     * @return {qx.ui.layout.Abstract} The widget's layout manager\n     */\n    _getLayout : function() {\n      return null;\n    },\n\n\n    // property apply\n    _applyMargin : function()\n    {\n      this.__updateMargin = true;\n\n      var parent = this.$$parent;\n      if (parent) {\n        parent.updateLayoutProperties();\n      }\n    },\n\n\n    // property apply\n    _applyAlign : function()\n    {\n      var parent = this.$$parent;\n      if (parent) {\n        parent.updateLayoutProperties();\n      }\n    },\n\n\n    // property apply\n    _applyDimension : function() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n\n    // property apply\n    _applyStretching : function() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR USER BOUNDARIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether user bounds are set on this layout item\n     *\n     * @return {Boolean} Whether user bounds are set on this layout item\n     */\n    hasUserBounds : function() {\n      return !!this.__userBounds;\n    },\n\n\n    /**\n     * Set user bounds of the widget. Widgets with user bounds are sized and\n     * positioned manually and are ignored by any layout manager.\n     *\n     * @param left {Integer} left position (relative to the parent)\n     * @param top {Integer} top position (relative to the parent)\n     * @param width {Integer} width of the layout item\n     * @param height {Integer} height of the layout item\n     */\n    setUserBounds : function(left, top, width, height)\n    {\n      this.__userBounds = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n\n    /**\n     * Clear the user bounds. After this call the layout item is laid out by\n     * the layout manager again.\n     *\n     */\n    resetUserBounds : function()\n    {\n      delete this.__userBounds;\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} Empty storage pool\n     *\n     * @lint ignoreReferenceField(__emptyProperties)\n     */\n    __emptyProperties : {},\n\n\n    /**\n     * Stores the given layout properties\n     *\n     * @param props {Map} Incoming layout property data\n     */\n    setLayoutProperties : function(props)\n    {\n      if (props == null) {\n        return;\n      }\n\n      var storage = this.__layoutProperties;\n      if (!storage) {\n        storage = this.__layoutProperties = {};\n      }\n\n      // Check values through parent\n      var parent = this.getLayoutParent();\n      if (parent) {\n        parent.updateLayoutProperties(props);\n      }\n\n      // Copy over values\n      for (var key in props)\n      {\n        if (props[key] == null) {\n          delete storage[key];\n        } else {\n          storage[key] = props[key];\n        }\n      }\n    },\n\n\n    /**\n     * Returns currently stored layout properties\n     *\n     * @return {Map} Returns a map of layout properties\n     */\n    getLayoutProperties : function() {\n      return this.__layoutProperties || this.__emptyProperties;\n    },\n\n\n    /**\n     * Removes all stored layout properties.\n     *\n     */\n    clearLayoutProperties : function() {\n      delete this.__layoutProperties;\n    },\n\n\n    /**\n     * Should be executed on every change of layout properties.\n     *\n     * This also includes \"virtual\" layout properties like margin or align\n     * when they have an effect on the parent and not on the widget itself.\n     *\n     * This method is always executed on the parent not on the\n     * modified widget itself.\n     *\n     * @param props {Map?null} Optional map of known layout properties\n     */\n    updateLayoutProperties : function(props)\n    {\n      var layout = this._getLayout();\n      if (layout)\n      {\n        // Verify values through underlying layout\n        if (qx.core.Environment.get(\"qx.debug\"))\n        {\n          if (props)\n          {\n            for (var key in props) {\n              if (props[key] !== null) {\n                layout.verifyLayoutProperty(this, key, props[key]);\n              }\n            }\n          }\n        }\n\n        // Precomputed and cached children data need to be\n        // rebuild on upcoming (re-)layout.\n        layout.invalidateChildrenCache();\n      }\n\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HIERARCHY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the application root\n     *\n     * @return {qx.ui.root.Abstract} The currently used root\n     */\n    getApplicationRoot : function() {\n      return qx.core.Init.getApplication().getRoot();\n    },\n\n\n    /**\n     * Get the items parent. Even if the item has been added to a\n     * layout, the parent is always a child of the containing item. The parent\n     * item may be <code>null</code>.\n     *\n     * @return {qx.ui.core.Widget|null} The parent.\n     */\n    getLayoutParent : function() {\n      return this.$$parent || null;\n    },\n\n\n    /**\n     * Set the parent\n     *\n     * @param parent {qx.ui.core.Widget|null} The new parent.\n     */\n    setLayoutParent : function(parent)\n    {\n      if (this.$$parent === parent) {\n        return;\n      }\n\n      this.$$parent = parent || null;\n      qx.ui.core.queue.Visibility.add(this);\n    },\n\n\n    /**\n     * Whether the item is a root item and directly connected to\n     * the DOM.\n     *\n     * @return {Boolean} Whether the item a root item\n     */\n    isRootWidget : function() {\n      return false;\n    },\n\n\n    /**\n     * Returns the root item. The root item is the item which\n     * is directly inserted into an existing DOM node at HTML level.\n     * This is often the BODY element of a typical web page.\n     *\n     * @return {qx.ui.core.Widget} The root item (if available)\n     */\n    _getRoot : function()\n    {\n      var parent = this;\n\n      while (parent)\n      {\n        if (parent.isRootWidget()) {\n          return parent;\n        }\n\n        parent = parent.$$parent;\n      }\n\n      return null;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CLONE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    clone : function()\n    {\n      var clone = this.base(arguments);\n\n      var props = this.__layoutProperties;\n      if (props) {\n        clone.__layoutProperties = qx.lang.Object.clone(props);\n      }\n\n      return clone;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    // remove dynamic theme listener\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().removeListener(\n        \"changeTheme\", this._onChangeTheme, this\n      );\n    }\n    this.$$parent = this.$$subparent = this.__layoutProperties =\n      this.__computedLayout = this.__userBounds = this.__sizeHint = null;\n  }\n});\n"
  ]
}