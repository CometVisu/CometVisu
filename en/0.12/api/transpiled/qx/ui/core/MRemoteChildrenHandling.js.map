{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MRemoteChildrenHandling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__forward",
    "functionName",
    "a1",
    "a2",
    "a3",
    "container",
    "getChildrenContainer",
    "getChildren",
    "hasChildren",
    "add",
    "child",
    "options",
    "remove",
    "removeAll",
    "indexOf",
    "addAt",
    "index",
    "addBefore",
    "before",
    "addAfter",
    "after",
    "removeAt",
    "ui",
    "core",
    "MRemoteChildrenHandling"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;AAQAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oCAAhB,EACA;AACE;;;;;AAMAC,IAAAA,OAAO,EACP;AACE;;;;;;;;;AASAC,MAAAA,SAAS,EAAG,mBAASC,YAAT,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EACZ;AACE,YAAIC,SAAS,GAAG,KAAKC,oBAAL,EAAhB;;AACA,YAAID,SAAS,KAAK,IAAlB,EAAwB;AACtBJ,UAAAA,YAAY,GAAG,MAAMA,YAArB;AACD;;AACD,eAAQI,SAAS,CAACJ,YAAD,CAAV,CAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,CAAP;AACD,OAjBH;;AAoBE;;;;;;AAMAG,MAAAA,WAAW,EAAG,uBAAW;AACvB,eAAO,KAAKP,SAAL,CAAe,aAAf,CAAP;AACD,OA5BH;;AA+BE;;;;;AAKAQ,MAAAA,WAAW,EAAG,uBAAW;AACvB,eAAO,KAAKR,SAAL,CAAe,aAAf,CAAP;AACD,OAtCH;;AAyCE;;;;;;;;;;;AAWAS,MAAAA,GAAG,EAAG,aAASC,KAAT,EAAgBC,OAAhB,EAAyB;AAC7B,eAAO,KAAKX,SAAL,CAAe,KAAf,EAAsBU,KAAtB,EAA6BC,OAA7B,CAAP;AACD,OAtDH;;AAyDE;;;;;;AAMAC,MAAAA,MAAM,EAAG,gBAASF,KAAT,EAAgB;AACvB,eAAO,KAAKV,SAAL,CAAe,QAAf,EAAyBU,KAAzB,CAAP;AACD,OAjEH;;AAoEE;;;;AAIAG,MAAAA,SAAS,EAAG,qBAAW;AACrB,eAAO,KAAKb,SAAL,CAAe,WAAf,CAAP;AACD,OA1EH;;AA6EE;;;;;;;;;;;;;AAaAc,MAAAA,OAAO,EAAG,iBAASJ,KAAT,EAAgB;AACxB,eAAO,KAAKV,SAAL,CAAe,SAAf,EAA0BU,KAA1B,CAAP;AACD,OA5FH;;AA+FE;;;;;;;;;;;;AAYAK,MAAAA,KAAK,EAAG,eAASL,KAAT,EAAgBM,KAAhB,EAAuBL,OAAvB,EAAgC;AACtC,aAAKX,SAAL,CAAe,OAAf,EAAwBU,KAAxB,EAA+BM,KAA/B,EAAsCL,OAAtC;AACD,OA7GH;;AAgHE;;;;;;;;;;;;AAYAM,MAAAA,SAAS,EAAG,mBAASP,KAAT,EAAgBQ,MAAhB,EAAwBP,OAAxB,EAAiC;AAC3C,aAAKX,SAAL,CAAe,WAAf,EAA4BU,KAA5B,EAAmCQ,MAAnC,EAA2CP,OAA3C;AACD,OA9HH;;AAiIE;;;;;;;;;;;;AAYAQ,MAAAA,QAAQ,EAAG,kBAAST,KAAT,EAAgBU,KAAhB,EAAuBT,OAAvB,EAAgC;AACzC,aAAKX,SAAL,CAAe,UAAf,EAA2BU,KAA3B,EAAkCU,KAAlC,EAAyCT,OAAzC;AACD,OA/IH;;AAkJE;;;;;;;;;;;AAWAU,MAAAA,QAAQ,EAAG,kBAASL,KAAT,EAAgB;AACzB,eAAO,KAAKhB,SAAL,CAAe,UAAf,EAA2BgB,KAA3B,CAAP;AACD;AA/JH;AARF,GADA;AA3BAvB,EAAAA,EAAE,CAAC6B,EAAH,CAAMC,IAAN,CAAWC,uBAAX,CAAmC5B,aAAnC,GAAmDA,aAAnD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This mixin redirects all children handling methods to a child widget of the\n * including class. This is e.g. used in {@link qx.ui.window.Window} to add\n * child widgets directly to the window pane.\n *\n * The including class must implement the method <code>getChildrenContainer</code>,\n * which has to return the widget, to which the child widgets should be added.\n */\nqx.Mixin.define(\"qx.ui.core.MRemoteChildrenHandling\",\n{\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Forward the call with the given function name to the children container\n     *\n     * @param functionName {String} name of the method to forward\n     * @param a1 {var?} first argument of the method to call\n     * @param a2 {var?} second argument of the method to call\n     * @param a3 {var?} third argument of the method to call\n     * @return {var} The return value of the forward method\n     */\n    __forward : function(functionName, a1, a2, a3)\n    {\n      var container = this.getChildrenContainer();\n      if (container === this) {\n        functionName = \"_\" + functionName;\n      }\n      return (container[functionName])(a1, a2, a3);\n    },\n\n\n    /**\n     * Returns the children list\n     *\n     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are\n     *   reference types, please do not modify them in-place)\n     */\n    getChildren : function() {\n      return this.__forward(\"getChildren\");\n    },\n\n\n    /**\n     * Whether the widget contains children.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget has children.\n     */\n    hasChildren : function() {\n      return this.__forward(\"hasChildren\");\n    },\n\n\n    /**\n     * Adds a new child widget.\n     *\n     * The supported keys of the layout options map depend on the layout manager\n     * used to position the widget. The options are documented in the class\n     * documentation of each layout manager {@link qx.ui.layout}.\n     *\n     * @param child {qx.ui.core.LayoutItem} the item to add.\n     * @param options {Map?null} Optional layout data for item.\n     * @return {qx.ui.core.Widget} This object (for chaining support)\n     */\n    add : function(child, options) {\n      return this.__forward(\"add\", child, options);\n    },\n\n\n    /**\n     * Remove the given child item.\n     *\n     * @param child {qx.ui.core.LayoutItem} the item to remove\n     * @return {qx.ui.core.Widget} This object (for chaining support)\n     */\n    remove : function(child) {\n      return this.__forward(\"remove\", child);\n    },\n\n\n    /**\n     * Remove all children.\n     * @return {Array} An array containing the removed children.\n     */\n    removeAll : function() {\n      return this.__forward(\"removeAll\");\n    },\n\n\n    /**\n     * Returns the index position of the given item if it is\n     * a child item. Otherwise it returns <code>-1</code>.\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} the item to query for\n     * @return {Integer} The index position or <code>-1</code> when\n     *   the given item is no child of this layout.\n     */\n    indexOf : function(child) {\n      return this.__forward(\"indexOf\", child);\n    },\n\n\n    /**\n     * Add a child at the specified index\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} item to add\n     * @param index {Integer} Index, at which the item will be inserted\n     * @param options {Map?null} Optional layout data for item.\n     */\n    addAt : function(child, index, options) {\n      this.__forward(\"addAt\", child, index, options);\n    },\n\n\n    /**\n     * Add an item before another already inserted item\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} item to add\n     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.\n     * @param options {Map?null} Optional layout data for item.\n     */\n    addBefore : function(child, before, options) {\n      this.__forward(\"addBefore\", child, before, options);\n    },\n\n\n    /**\n     * Add an item after another already inserted item\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} item to add\n     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted\n     * @param options {Map?null} Optional layout data for item.\n     */\n    addAfter : function(child, after, options) {\n      this.__forward(\"addAfter\", child, after, options);\n    },\n\n\n    /**\n     * Remove the item at the specified index.\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param index {Integer} Index of the item to remove.\n     * @return {qx.ui.core.LayoutItem} The removed item\n     */\n    removeAt : function(index) {\n      return this.__forward(\"removeAt\", index);\n    }\n  }\n});\n"
  ]
}