{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/form/RadioButtonGroup.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MLayoutHandling",
    "form",
    "MModelSelection",
    "implement",
    "IForm",
    "IField",
    "ISingleSelection",
    "IModelSelection",
    "construct",
    "layout",
    "setLayout",
    "VBox",
    "__radioGroup",
    "RadioGroup",
    "addListener",
    "_onChangeSelection",
    "properties",
    "valid",
    "check",
    "init",
    "apply",
    "event",
    "required",
    "invalidMessage",
    "requiredInvalidMessage",
    "nullable",
    "events",
    "members",
    "_applyInvalidMessage",
    "value",
    "old",
    "children",
    "_getChildren",
    "i",
    "length",
    "setInvalidMessage",
    "_applyValid",
    "setValid",
    "getRadioGroup",
    "getChildren",
    "add",
    "child",
    "options",
    "_add",
    "remove",
    "_remove",
    "removeAll",
    "radioItems",
    "getItems",
    "_removeAll",
    "getSelection",
    "setSelection",
    "items",
    "resetSelection",
    "isSelected",
    "item",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "setValue",
    "IRadioItem",
    "Error",
    "getValue",
    "resetValue",
    "fireDataEvent",
    "getData",
    "getOldData",
    "destruct",
    "removeListener",
    "_disposeObjects",
    "RadioButtonGroup"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The radio container handles a collection of items from which only one item\n * can be selected. Selection another item will deselect the previously selected\n * item. For that, it uses the {@link qx.ui.form.RadioGroup} object.\n *\n * This class is used to create radio groups of {@link qx.ui.form.RadioButton}\n * instances.\n *\n * This widget takes care of the layout of the added items. If you want to\n * take full control of the layout and just use the selection behavior,\n * take a look at the {@link qx.ui.form.RadioGroup} object for a loose coupling.\n */\nqx.Class.define(\"qx.ui.form.RadioButtonGroup\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.MLayoutHandling, qx.ui.form.MModelSelection],\n  implement : [\n    qx.ui.form.IForm,\n    qx.ui.form.IField,\n    qx.ui.core.ISingleSelection,\n    qx.ui.form.IModelSelection\n  ],\n\n\n  /**\n   * @param layout {qx.ui.layout.Abstract} The new layout or\n   *     <code>null</code> to reset the layout.\n   */\n  construct : function(layout)\n  {\n    this.base(arguments);\n\n    // if no layout is given, use the default layout (VBox)\n    if (layout == null) {\n      this.setLayout(new qx.ui.layout.VBox(4));\n    } else {\n      this.setLayout(layout);\n    }\n\n    // create the radio group\n    this.__radioGroup = new qx.ui.form.RadioGroup();\n\n    // attach the listener\n    this.__radioGroup.addListener(\"changeSelection\", this._onChangeSelection, this);\n  },\n\n\n  properties :\n  {\n    /**\n     * Flag signaling if the group at all is valid. All children will have the\n     * same state.\n     */\n    valid : {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyValid\",\n      event : \"changeValid\"\n    },\n\n    /**\n     * Flag signaling if the group is required.\n     */\n    required : {\n      check : \"Boolean\",\n      init : false,\n      event : \"changeRequired\"\n    },\n\n    /**\n     * Message which is shown in an invalid tooltip.\n     */\n    invalidMessage : {\n      check : \"String\",\n      init: \"\",\n      event : \"changeInvalidMessage\",\n      apply : \"_applyInvalidMessage\"\n    },\n\n\n    /**\n     * Message which is shown in an invalid tooltip if the {@link #required} is\n     * set to true.\n     */\n    requiredInvalidMessage : {\n      check : \"String\",\n      nullable : true,\n      event : \"changeInvalidMessage\"\n    }\n  },\n\n\n  events :\n  {\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\",\n\n    /**\n     * Fires after the selection was modified\n     */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n    __radioGroup : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n    // property apply\n    _applyInvalidMessage : function(value, old) {\n      var children = this._getChildren();\n      for (var i = 0; i < children.length; i++) {\n        children[i].setInvalidMessage(value);\n      }\n    },\n\n\n    // property apply\n    _applyValid: function(value, old) {\n      var children = this._getChildren();\n      for (var i = 0; i < children.length; i++) {\n        children[i].setValid(value);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REGISTRY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * The internally used radio group instance will be returned.\n     *\n     * @return {qx.ui.form.RadioGroup} Returns the used RadioGroup instance.\n     */\n    getRadioGroup : function() {\n      return this.__radioGroup;\n    },\n\n\n    /**\n     * Returns the children list\n     *\n     * @return {qx.ui.core.LayoutItem[]} The children array.\n     */\n    getChildren : function() {\n      return this._getChildren();\n    },\n\n\n    /**\n     * Adds a new child widget.\n     *\n     * The supported keys of the layout options map depend on the layout\n     * used to position the widget. The options are documented in the class\n     * documentation of each layout manager {@link qx.ui.layout}.\n     *\n     * @param child {qx.ui.core.LayoutItem} the widget to add.\n     * @param options {Map?null} Optional layout data for widget.\n     */\n    add : function(child, options) {\n      this.__radioGroup.add(child);\n      this._add(child, options);\n    },\n\n\n    /**\n     * Remove the given child widget.\n     *\n     * @param child {qx.ui.core.LayoutItem} the widget to remove\n     */\n    remove : function(child)\n    {\n      this.__radioGroup.remove(child);\n      this._remove(child);\n    },\n\n\n    /**\n     * Remove all children.\n     *\n     * @return {Array} An array of {@link qx.ui.core.LayoutItem}'s.\n     */\n    removeAll : function()\n    {\n      // remove all children from the radio group\n      var radioItems = this.__radioGroup.getItems();\n      for (var i = radioItems.length - 1; i >= 0; i--) {\n        this.__radioGroup.remove(radioItems[i]);\n      }\n\n      return this._removeAll();\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection : function() {\n      return this.__radioGroup.getSelection();\n    },\n\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if the item is not a child element.\n     */\n    setSelection : function(items) {\n      this.__radioGroup.setSelection(items);\n    },\n\n\n    /**\n     * Clears the whole selection at once.\n     */\n    resetSelection : function() {\n      this.__radioGroup.resetSelection();\n    },\n\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if the item is not a child element.\n     */\n    isSelected : function(item) {\n      return this.__radioGroup.isSelected(item);\n    },\n\n\n    /**\n     * Whether the selection is empty.\n     *\n     * @return {Boolean} Whether the selection is empty.\n     */\n    isSelectionEmpty : function() {\n      return this.__radioGroup.isSelectionEmpty();\n    },\n\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables: function(all) {\n      return this.__radioGroup.getSelectables(all);\n    },\n\n\n    /**\n     * Select given value.\n     *\n     * @param item {null|var} Item to set as selected value.\n     * @return {null|Error} The status of this operation.\n     */\n    setValue : function(item) {\n      if (item && 'object' === typeof item && item instanceof qx.ui.form.IRadioItem) {\n        return this.__radioGroup.setValue(item);\n      } else {\n        return new Error(\"can not select radio item from value\");\n      }\n    },\n\n\n    /**\n     * @return {null|var} Returns the selected value.\n     */\n    getValue : function() {\n      return this.__radioGroup.getValue();\n    },\n\n\n    /**\n     * Reset radio item selection.\n     */\n    resetValue : function() {\n      this.__radioGroup.resetValue();\n    },\n\n\n    /**\n     * Called on {@link qx.ui.form.RadioGroup} selection change event.\n     *\n     * @param event {qx.event.type.Data} Event containing the {@link qx.ui.form.RadioGroup} selection data.\n     */\n    _onChangeSelection : function(event) {\n      this.fireDataEvent(\"changeValue\", event.getData(), event.getOldData());\n      this.fireDataEvent(\"changeSelection\", event.getData(), event.getOldData());\n    }\n  },\n\n\n  destruct : function()\n  {\n    this.__radioGroup.removeListener(\"changeSelection\", this._onChangeSelection, this);\n    this._disposeObjects(\"__radioGroup\");\n  }\n});\n"
  ]
}