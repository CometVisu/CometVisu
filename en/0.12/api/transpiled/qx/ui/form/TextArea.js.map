{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/TextArea.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "AbstractField",
    "construct",
    "value",
    "initWrap",
    "addListener",
    "_onRoll",
    "_onResize",
    "properties",
    "wrap",
    "check",
    "init",
    "apply",
    "appearance",
    "refine",
    "singleStep",
    "minimalLineHeight",
    "autoSize",
    "members",
    "__areaClone",
    "__areaHeight",
    "__originalAreaHeight",
    "setValue",
    "__autoSize",
    "e",
    "getPointerType",
    "contentElement",
    "getContentElement",
    "scrollY",
    "getScrollY",
    "scrollToY",
    "getDelta",
    "y",
    "getSingleStep",
    "newScrollY",
    "stop",
    "dispose",
    "isAutoSize",
    "clone",
    "__getAreaClone",
    "getBounds",
    "_getAreaHeight",
    "scrolledHeight",
    "_getScrolledAreaHeight",
    "getMaxHeight",
    "insets",
    "getInsets",
    "innerMaxHeight",
    "top",
    "bottom",
    "setStyle",
    "desiredHeight",
    "Math",
    "max",
    "_setAreaHeight",
    "addListenerOnce",
    "getInnerSize",
    "height",
    "core",
    "queue",
    "Layout",
    "add",
    "Manager",
    "flush",
    "__forceRewrap",
    "cloneDom",
    "getDomElement",
    "parentNode",
    "html",
    "Element",
    "Environment",
    "get",
    "setWrap",
    "getWrap",
    "style",
    "overflow",
    "overflowX",
    "getValue",
    "__scrollCloneToBottom",
    "scrollTop",
    "__createAreaClone",
    "orig",
    "cloneHtml",
    "bom",
    "Input",
    "useElement",
    "setStyles",
    "position",
    "left",
    "removeAttribute",
    "setAttribute",
    "insertBefore",
    "_createInputElement",
    "overflowY",
    "_applyWrap",
    "old",
    "_placeholder",
    "whiteSpace",
    "_applyMinimalLineHeight",
    "_applyAutoSize",
    "removeListener",
    "_applyDimension",
    "content",
    "element",
    "width",
    "getStyle",
    "parseInt",
    "Dimension",
    "getWidth",
    "__warnAutoSizeAndHeight",
    "getHeight",
    "warn",
    "_getContentHint",
    "hint",
    "getMinimalLineHeight",
    "_getTextSize",
    "destruct",
    "setAutoSize",
    "TextArea"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Jonathan Weiß (jonathan_rass)\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * The TextField is a multi-line text input field.\n */\nqx.Class.define(\"qx.ui.form.TextArea\",\n{\n  extend : qx.ui.form.AbstractField,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param value {String?\"\"} The text area's initial value\n   */\n  construct : function(value)\n  {\n    this.base(arguments, value);\n    this.initWrap();\n\n    this.addListener(\"roll\", this._onRoll, this);\n    this.addListener(\"resize\", this._onResize, this);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Controls whether text wrap is activated or not. */\n    wrap :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyWrap\"\n    },\n\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"textarea\"\n    },\n\n    /** Factor for scrolling the <code>TextArea</code> with the mouse wheel. */\n    singleStep :\n    {\n      check : \"Integer\",\n      init : 20\n    },\n\n    /** Minimal line height. On default this is set to four lines. */\n    minimalLineHeight :\n    {\n      check : \"Integer\",\n      apply : \"_applyMinimalLineHeight\",\n      init : 4\n    },\n\n    /**\n    * Whether the <code>TextArea</code> should automatically adjust to\n    * the height of the content.\n    *\n    * To set the initial height, modify {@link #minHeight}. If you wish\n    * to set a minHeight below four lines of text, also set\n    * {@link #minimalLineHeight}. In order to limit growing to a certain\n    * height, set {@link #maxHeight} respectively. Please note that\n    * autoSize is ignored when the {@link #height} property is in use.\n    */\n    autoSize :\n    {\n      check : \"Boolean\",\n      apply : \"_applyAutoSize\",\n      init : false\n    }\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __areaClone : null,\n    __areaHeight : null,\n    __originalAreaHeight : null,\n\n    // overridden\n    setValue : function(value)\n    {\n      value = this.base(arguments, value);\n      this.__autoSize();\n\n      return value;\n    },\n\n    /**\n     * Handles the roll for scrolling the <code>TextArea</code>.\n     *\n     * @param e {qx.event.type.Roll} roll event.\n     */\n    _onRoll : function(e) {\n      // only wheel\n      if (e.getPointerType() != \"wheel\") {\n        return;\n      }\n      var contentElement = this.getContentElement();\n      var scrollY = contentElement.getScrollY();\n\n      contentElement.scrollToY(scrollY + (e.getDelta().y / 30) * this.getSingleStep());\n\n      var newScrollY = contentElement.getScrollY();\n\n      if (newScrollY != scrollY) {\n        e.stop();\n      }\n    },\n\t\n\t\n    /**\n     * When the element resizes we throw away the clone and trigger autosize again, otherwise the clone would have\n     * another width and the autosize calculation would be faulty.\n     * \n     * @param e {qx.event.type.Data} resize event.\n     */\n    _onResize : function(e) {\n      if (this.__areaClone) {\n        this.__areaClone.dispose();\n        this.__areaClone = null;\n        this.__autoSize();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      AUTO SIZE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n    * Adjust height of <code>TextArea</code> so that content fits without scroll bar.\n    *\n    */\n    __autoSize: function() {\n      if (this.isAutoSize()) {\n        var clone = this.__getAreaClone();\n\n        if (clone && this.getBounds()) {\n\n          // Remember original area height\n          this.__originalAreaHeight = this.__originalAreaHeight || this._getAreaHeight();\n\n          var scrolledHeight = this._getScrolledAreaHeight();\n\n          // Show scroll-bar when above maxHeight, if defined\n          if (this.getMaxHeight()) {\n            var insets = this.getInsets();\n            var innerMaxHeight = -insets.top + this.getMaxHeight() - insets.bottom;\n            if (scrolledHeight > innerMaxHeight) {\n                this.getContentElement().setStyle(\"overflowY\", \"auto\");\n            } else {\n                this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n            }\n          }\n\n          // Never shrink below original area height\n          var desiredHeight = Math.max(scrolledHeight, this.__originalAreaHeight);\n\n          // Set new height\n          this._setAreaHeight(desiredHeight);\n\n        // On init, the clone is not yet present. Try again on appear.\n        } else {\n          this.getContentElement().addListenerOnce(\"appear\", function() {\n            this.__autoSize();\n          }, this);\n        }\n      }\n    },\n\n    /**\n    * Get actual height of <code>TextArea</code>\n    *\n    * @return {Integer} Height of <code>TextArea</code>\n    */\n    _getAreaHeight: function() {\n      return this.getInnerSize().height;\n    },\n\n    /**\n    * Set actual height of <code>TextArea</code>\n    *\n    * @param height {Integer} Desired height of <code>TextArea</code>\n    */\n    _setAreaHeight: function(height) {\n      if (this._getAreaHeight() !== height) {\n        this.__areaHeight = height;\n\n        qx.ui.core.queue.Layout.add(this);\n\n        // Apply height directly. This works-around a visual glitch in WebKit\n        // browsers where a line-break causes the text to be moved upwards\n        // for one line. Since this change appears instantly whereas the queue\n        // is computed later, a flicker is visible.\n        qx.ui.core.queue.Manager.flush();\n\n        this.__forceRewrap();\n      }\n    },\n\n    /**\n    * Get scrolled area height. Equals the total height of the <code>TextArea</code>,\n    * as if no scroll-bar was visible.\n    *\n    * @return {Integer} Height of scrolled area\n    */\n    _getScrolledAreaHeight: function() {\n      var clone = this.__getAreaClone();\n      var cloneDom = clone.getDomElement();\n\n      if (cloneDom) {\n\n        // Clone created but not yet in DOM. Try again.\n        if (!cloneDom.parentNode) {\n          qx.html.Element.flush();\n          return this._getScrolledAreaHeight();\n        }\n\n        // In WebKit and IE8, \"wrap\" must have been \"soft\" on DOM level before setting\n        // \"off\" can disable wrapping. To fix, make sure wrap is toggled.\n        // Otherwise, the height of an auto-size text area with wrapping\n        // disabled initially is incorrectly computed as if wrapping was enabled.\n        if (qx.core.Environment.get(\"engine.name\") === \"webkit\" ||\n            (qx.core.Environment.get(\"engine.name\") == \"mshtml\")) {\n          clone.setWrap(!this.getWrap(), true);\n        }\n\n        clone.setWrap(this.getWrap(), true);\n\n        // Webkit needs overflow \"hidden\" in order to correctly compute height\n        if (qx.core.Environment.get(\"engine.name\") === \"webkit\" ||\n            (qx.core.Environment.get(\"engine.name\") == \"mshtml\")) {\n          cloneDom.style.overflow = \"hidden\";\n        }\n\n        // IE >= 8 needs overflow \"visible\" in order to correctly compute height\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n          qx.core.Environment.get(\"browser.documentmode\") >= 8) {\n          cloneDom.style.overflow = \"visible\";\n          cloneDom.style.overflowX = \"hidden\";\n        }\n\n        // Update value\n        clone.setValue(this.getValue() || \"\");\n\n        // Force IE > 8 to update size measurements\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          cloneDom.style.height = \"auto\";\n          qx.html.Element.flush();\n          cloneDom.style.height = \"0\";\n        }\n\n        // Recompute\n        this.__scrollCloneToBottom(clone);\n\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n            qx.core.Environment.get(\"browser.documentmode\") == 8) {\n          // Flush required for scrollTop to return correct value\n          // when initial value should be taken into consideration\n          if (!cloneDom.scrollTop) {\n            qx.html.Element.flush();\n          }\n        }\n\n        return cloneDom.scrollTop;\n      }\n    },\n\n    /**\n    * Returns the area clone.\n    *\n    * @return {Element|null} DOM Element or <code>null</code> if there is no\n    * original element\n    */\n    __getAreaClone: function() {\n      this.__areaClone = this.__areaClone || this.__createAreaClone();\n      return this.__areaClone;\n    },\n\n    /**\n    * Creates and prepares the area clone.\n    *\n    * @return {Element} Element\n    */\n    __createAreaClone: function() {\n      var orig,\n          clone,\n          cloneDom,\n          cloneHtml;\n\n      orig = this.getContentElement();\n\n      // An existing DOM element is required\n      if (!orig.getDomElement()) {\n        return null;\n      }\n\n      // Create DOM clone\n      cloneDom = qx.bom.Element.clone(orig.getDomElement());\n\n      // Convert to qx.html Element\n      cloneHtml = new qx.html.Input(\"textarea\");\n      cloneHtml.useElement(cloneDom);\n      clone = cloneHtml;\n\n      // Push out of view\n      // Zero height (i.e. scrolled area equals height)\n      clone.setStyles({\n        position: \"absolute\",\n        top: 0,\n        left: \"-9999px\",\n        height: 0,\n        overflow: \"hidden\"\n      }, true);\n\n      // Fix attributes\n      clone.removeAttribute('id');\n      clone.removeAttribute('name');\n      clone.setAttribute(\"tabIndex\", \"-1\");\n\n      // Copy value\n      clone.setValue(orig.getValue() || \"\");\n\n      // Attach to DOM\n      clone.insertBefore(orig);\n\n      // Make sure scrollTop is actual height\n      this.__scrollCloneToBottom(clone);\n\n      return clone;\n    },\n\n    /**\n    * Scroll <code>TextArea</code> to bottom. That way, scrollTop reflects the height\n    * of the <code>TextArea</code>.\n    *\n    * @param clone {Element} The <code>TextArea</code> to scroll\n    */\n    __scrollCloneToBottom: function(clone) {\n      clone = clone.getDomElement();\n      if (clone) {\n        clone.scrollTop = 10000;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FIELD API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createInputElement : function()\n    {\n      return new qx.html.Input(\"textarea\", {\n        overflowX: \"auto\",\n        overflowY: \"auto\"\n      });\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyWrap : function(value, old) {\n      this.getContentElement().setWrap(value);\n      if (this._placeholder) {\n        var whiteSpace = value ? \"normal\" : \"nowrap\";\n        this._placeholder.setStyle(\"whiteSpace\", whiteSpace);\n      }\n      this.__autoSize();\n    },\n\n    // property apply\n    _applyMinimalLineHeight : function() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    // property apply\n    _applyAutoSize: function(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__warnAutoSizeAndHeight();\n      }\n\n      if (value) {\n        this.__autoSize();\n        this.addListener(\"input\", this.__autoSize, this);\n\n        // This is done asynchronously on purpose. The style given would\n        // otherwise be overridden by the DOM changes queued in the\n        // property apply for wrap. See [BUG #4493] for more details.\n        if (!this.getBounds()) {\n          this.addListenerOnce(\"appear\", function() {\n            this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n          });\n        } else {\n          this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n        }\n\n      } else {\n        this.removeListener(\"input\", this.__autoSize);\n        this.getContentElement().setStyle(\"overflowY\", \"auto\");\n      }\n    },\n\n\n    // property apply\n    _applyDimension : function(value) {\n      this.base(arguments);\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__warnAutoSizeAndHeight();\n      }\n\n      if (value === this.getMaxHeight()) {\n        this.__autoSize();\n      }\n    },\n\n    /**\n     * Force rewrapping of text.\n     *\n     * The distribution of characters depends on the space available.\n     * Unfortunately, browsers do not reliably (or not at all) rewrap text when\n     * the size of the text area changes.\n     *\n     * This method is called on change of the area's size.\n     */\n    __forceRewrap : function() {\n      var content = this.getContentElement();\n      var element = content.getDomElement();\n\n      // Temporarily increase width\n      var width = content.getStyle(\"width\");\n      content.setStyle(\"width\", parseInt(width, 10) + 1000 + \"px\", true);\n\n      // Force browser to render\n      if (element) {\n        qx.bom.element.Dimension.getWidth(element);\n      }\n\n      // Restore width\n      content.setStyle(\"width\", width, true);\n    },\n\n    /**\n     * Warn when both autoSize and height property are set.\n     *\n     */\n    __warnAutoSizeAndHeight: function() {\n      if (this.isAutoSize() && this.getHeight()) {\n        this.warn(\"autoSize is ignored when the height property is set. \" +\n                  \"If you want to set an initial height, use the minHeight \" +\n                  \"property instead.\");\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _getContentHint : function()\n    {\n      var hint = this.base(arguments);\n\n      // lines of text\n      hint.height = hint.height * this.getMinimalLineHeight();\n\n      // 20 character wide\n      hint.width = this._getTextSize().width * 20;\n\n      if (this.isAutoSize()) {\n        hint.height = this.__areaHeight || hint.height;\n      }\n\n      return hint;\n    }\n  },\n\n\n  destruct : function() {\n    this.setAutoSize(false);\n    if (this.__areaClone) {\n      this.__areaClone.dispose();\n    }\n  }\n});\n"
  ]
}