{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Resetter.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__items",
    "members",
    "add",
    "field",
    "__typeCheck",
    "push",
    "item",
    "init",
    "getValue",
    "remove",
    "i",
    "length",
    "storedItem",
    "splice",
    "reset",
    "dataEntry",
    "e",
    "errors",
    "setValue",
    "Error",
    "join",
    "resetItem",
    "redefine",
    "redefineItem",
    "hasInterface",
    "constructor",
    "ui",
    "form",
    "IField",
    "TypeError",
    "destruct",
    "Resetter"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n     2017 Martijn Evers, The Netherlands\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Martijn Evers (mever)\n\n************************************************************************ */\n/**\n * The resetter is responsible for managing a set of fields and resetting these\n * fields on a {@link #reset} call. It can handle all form field implementing IField.\n */\nqx.Class.define(\"qx.ui.form.Resetter\",\n{\n  extend : qx.core.Object,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__items = [];\n  },\n\n  members :\n  {\n    __items : null,\n\n    /**\n     * Adding a field to the resetter will get its current value and store\n     * it for resetting.\n     *\n     * @param field {qx.ui.form.IField} The field which should be added.\n     * @throws {TypeError} When given argument is not a field.\n     */\n    add : function(field) {\n      this.__typeCheck(field);\n      this.__items.push({item: field, init: field.getValue()});\n    },\n\n\n    /**\n     * Removes a field from the resetter.\n     *\n     * @param field {qx.ui.form.IField} The field which should be removed.\n     * @throws {TypeError} When given argument is not a field.\n     * @return {Boolean} <code>true</code>, if the field has been removed.\n     */\n    remove : function(field) {\n      this.__typeCheck(field);\n      for (var i = 0; i < this.__items.length; i++) {\n        var storedItem = this.__items[i];\n        if (storedItem.item === field) {\n          this.__items.splice(i, 1);\n          return true;\n        }\n      }\n      return false;\n    },\n\n\n    /**\n     * Resets all added fields to their initial value. The initial value\n     * is the value in the widget during the {@link #add}.\n     *\n     * @return {null|Error} Returns an error when some fields could not be reset.\n     */\n    reset: function() {\n      var dataEntry, e, errors = [];\n      for (var i = 0; i < this.__items.length; i++) {\n        dataEntry = this.__items[i];\n        e = dataEntry.item.setValue(dataEntry.init);\n        if (e && e instanceof Error) {\n          errors.push(e);\n        }\n      }\n\n      if (errors.length) {\n        return new Error(errors.join(', '));\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Resets a single given field. The field has to be added to the resetter\n     * instance before. Otherwise, an error is thrown.\n     *\n     * @param field {qx.ui.form.IField} The field, which should be reset.\n     * @throws {TypeError} When given argument is not a field.\n     * @return {null|Error} Returns an error when the field value could not be set.\n     */\n    resetItem : function(field) {\n      this.__typeCheck(field);\n      for (var i = 0; i < this.__items.length; i++) {\n        var dataEntry = this.__items[i];\n        if (dataEntry.item === field) {\n          return field.setValue(dataEntry.init);\n        }\n      }\n\n      throw new Error(\"The given field has not been added.\");\n    },\n\n\n    /**\n     * Takes the current values of all added fields and uses these values as\n     * init values for resetting.\n     */\n    redefine: function() {\n      // go threw all added items\n      for (var i = 0; i < this.__items.length; i++) {\n        var item = this.__items[i].item;\n        // set the new init value for the item\n        this.__items[i].init = item.getValue();\n      }\n    },\n\n\n    /**\n     * Takes the current value of the given field and stores this value as init\n     * value for resetting.\n     *\n     * @param field {qx.ui.form.IField} The field to redefine.\n     * @throws {TypeError} When given argument is not a field.\n     */\n    redefineItem : function(field) {\n      this.__typeCheck(field);\n\n      // get the data entry\n      var dataEntry;\n      for (var i = 0; i < this.__items.length; i++) {\n        if (this.__items[i].item === field) {\n          dataEntry = this.__items[i];\n          dataEntry.init = dataEntry.item.getValue();\n          return;\n        }\n      }\n\n      throw new Error(\"The given field has not been added.\");\n    },\n\n\n    /**\n     * Assert when given argument is not a field.\n     *\n     * @param field {qx.ui.form.IField|var} Any argument that should be a field.\n     * @throws {TypeError} When given argument is not a field.\n     * @private\n     */\n    __typeCheck : function(field) {\n      if (!qx.Class.hasInterface(field.constructor, qx.ui.form.IField)) {\n        throw new TypeError(\"Field \" + field + \" not supported for resetting.\");\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n  destruct : function()\n  {\n    // holding references to widgets --> must set to null\n    this.__items = null;\n  }\n});\n"
  ]
}