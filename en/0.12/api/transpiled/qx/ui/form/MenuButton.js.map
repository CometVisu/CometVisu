{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/form/MenuButton.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Button",
    "construct",
    "label",
    "icon",
    "menu",
    "setMenu",
    "properties",
    "check",
    "nullable",
    "apply",
    "event",
    "appearance",
    "refine",
    "init",
    "members",
    "_applyVisibility",
    "value",
    "old",
    "getMenu",
    "hide",
    "_applyMenu",
    "removeListener",
    "_onMenuChange",
    "resetOpener",
    "addListener",
    "setOpener",
    "removeState",
    "open",
    "selectFirst",
    "Manager",
    "getInstance",
    "hideAll",
    "first",
    "getSelectables",
    "setSelectedButton",
    "e",
    "isVisible",
    "addState",
    "_onPointerDown",
    "getButton",
    "exclude",
    "stopPropagation",
    "_onPointerUp",
    "_onPointerOver",
    "_onPointerOut",
    "_onKeyDown",
    "getKeyIdentifier",
    "_onKeyUp",
    "MenuButton"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * A button which opens the connected menu when tapping on it.\n */\nqx.Class.define(\"qx.ui.form.MenuButton\",\n{\n  extend : qx.ui.form.Button,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param label {String} Initial label\n   * @param icon {String?null} Initial icon\n   * @param menu {qx.ui.menu.Menu} Connect to menu instance\n   */\n  construct : function(label, icon, menu)\n  {\n    this.base(arguments, label, icon);\n\n    // Initialize properties\n    if (menu != null) {\n      this.setMenu(menu);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The menu instance to show when tapping on the button */\n    menu :\n    {\n      check : \"qx.ui.menu.Menu\",\n      nullable : true,\n      apply : \"_applyMenu\",\n      event : \"changeMenu\"\n    },\n\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"menubutton\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n    // overridden\n    _applyVisibility : function(value, old) {\n      this.base(arguments, value, old);\n\n      // hide the menu too\n      var menu = this.getMenu();\n      if (value != \"visible\" && menu) {\n        menu.hide();\n      }\n    },\n\n\n    // property apply\n    _applyMenu : function(value, old)\n    {\n      if (old)\n      {\n        old.removeListener(\"changeVisibility\", this._onMenuChange, this);\n        old.resetOpener();\n      }\n\n      if (value)\n      {\n        value.addListener(\"changeVisibility\", this._onMenuChange, this);\n        value.setOpener(this);\n\n        value.removeState(\"submenu\");\n        value.removeState(\"contextmenu\");\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Positions and shows the attached menu widget.\n     *\n     * @param selectFirst {Boolean?false} Whether the first menu button should be selected\n     */\n    open : function(selectFirst)\n    {\n      var menu = this.getMenu();\n\n      if (menu)\n      {\n        // Hide all menus first\n        qx.ui.menu.Manager.getInstance().hideAll();\n\n        // Open the attached menu\n        menu.setOpener(this);\n        menu.open();\n\n        // Select first item\n        if (selectFirst)\n        {\n          var first = menu.getSelectables()[0];\n          if (first) {\n            menu.setSelectedButton(first);\n          }\n        }\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Listener for visibility property changes of the attached menu\n     *\n     * @param e {qx.event.type.Data} Property change event\n     */\n    _onMenuChange : function(e)\n    {\n      var menu = this.getMenu();\n\n      if (menu.isVisible()) {\n        this.addState(\"pressed\");\n      } else {\n        this.removeState(\"pressed\");\n      }\n    },\n\n\n    // overridden\n    _onPointerDown : function(e) {\n      // call the base function to get into the capture phase [BUG #4340]\n      this.base(arguments, e);\n\n      // only open on left clicks [BUG #5125]\n      if(e.getButton() != \"left\") {\n        return;\n      }\n\n      var menu = this.getMenu();\n      if (menu) {\n        // Toggle sub menu visibility\n        if (!menu.isVisible()) {\n          this.open();\n        } else {\n          menu.exclude();\n        }\n\n        // Event is processed, stop it for others\n        e.stopPropagation();\n      }\n    },\n\n\n    // overridden\n    _onPointerUp : function(e) {\n      // call base for firing the execute event\n      this.base(arguments, e);\n\n      // Just stop propagation to stop menu manager\n      // from getting the event\n      e.stopPropagation();\n    },\n\n\n    // overridden\n    _onPointerOver : function(e) {\n      // Add hovered state\n      this.addState(\"hovered\");\n    },\n\n\n    // overridden\n    _onPointerOut : function(e) {\n      // Just remove the hover state\n      this.removeState(\"hovered\");\n    },\n\n\n    // overridden\n    _onKeyDown : function(e)\n    {\n      switch(e.getKeyIdentifier())\n      {\n        case \"Enter\":\n          this.removeState(\"abandoned\");\n          this.addState(\"pressed\");\n\n          var menu = this.getMenu();\n          if (menu)\n          {\n            // Toggle sub menu visibility\n            if (!menu.isVisible()) {\n              this.open();\n            } else {\n              menu.exclude();\n            }\n          }\n\n          e.stopPropagation();\n      }\n    },\n\n\n    // overridden\n    _onKeyUp : function(e) {\n      // no action required here\n    }\n  }\n});\n"
  ]
}