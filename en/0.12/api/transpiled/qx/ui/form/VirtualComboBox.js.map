{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/form/VirtualComboBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "core",
    "AbstractVirtualBox",
    "implement",
    "IStringForm",
    "construct",
    "model",
    "textField",
    "_createChildControl",
    "dropdown",
    "getChildControl",
    "setSelectionMode",
    "__selection",
    "getSelection",
    "addListener",
    "__onSelectionChange",
    "bind",
    "e",
    "fireNonBubblingEvent",
    "event",
    "type",
    "Focus",
    "properties",
    "appearance",
    "refine",
    "init",
    "width",
    "value",
    "nullable",
    "placeholder",
    "check",
    "apply",
    "defaultFormat",
    "members",
    "__localBindId",
    "__textFieldBindId",
    "__ignoreChangeSelection",
    "getTextSelection",
    "getTextSelectionLength",
    "setTextSelection",
    "start",
    "end",
    "clearTextSelection",
    "selectAllText",
    "resetAllTextSelection",
    "tabFocus",
    "field",
    "getFocusElement",
    "focus",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "TextField",
    "setFocusable",
    "addState",
    "_add",
    "flex",
    "Button",
    "setKeepActive",
    "toggle",
    "_beforeOpen",
    "__selectFirstMatch",
    "_handleKeyboard",
    "action",
    "_getAction",
    "setValue",
    "getValue",
    "keyIdentifier",
    "getKeyIdentifier",
    "isOpen",
    "isVisible",
    "isModifierPressed",
    "_isModifierPressed",
    "_handlePointer",
    "getType",
    "close",
    "selected",
    "getItem",
    "__convertValue",
    "_applyPlaceholder",
    "old",
    "setPlaceholder",
    "selection",
    "undefined",
    "removeAll",
    "getModel",
    "lookupTable",
    "_getLookupTable",
    "i",
    "l",
    "length",
    "modelItem",
    "itemLabel",
    "indexOf",
    "setPreselected",
    "labelOptions",
    "getLabelOptions",
    "formatter",
    "getDefaultFormat",
    "labelPath",
    "getLabelPath",
    "result",
    "data",
    "SingleValueBinding",
    "resolvePropertyChain",
    "lang",
    "Type",
    "isString",
    "converter",
    "util",
    "Delegate",
    "getMethod",
    "String",
    "stripTags",
    "destruct",
    "removeAllBindings",
    "removeListener",
    "VirtualComboBox"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (d_wagner)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * A virtual form widget that allows text entry as well as selection from a\n * drop-down.\n *\n * @childControl textfield {qx.ui.form.TextField} Field for text entry.\n * @childControl button {qx.ui.form.Button} Opens the drop-down.\n */\nqx.Class.define(\"qx.ui.form.VirtualComboBox\",\n{\n  extend : qx.ui.form.core.AbstractVirtualBox,\n\n  implement : [qx.ui.form.IStringForm],\n\n\n  construct : function(model)\n  {\n    this.base(arguments, model);\n\n    var textField = this._createChildControl(\"textfield\");\n    this._createChildControl(\"button\");\n\n    var dropdown = this.getChildControl(\"dropdown\");\n    dropdown.getChildControl(\"list\").setSelectionMode(\"single\");\n\n    this.__selection = dropdown.getSelection();\n    this.__selection.addListener(\"change\", this.__onSelectionChange, this);\n\n    this.bind(\"value\", textField, \"value\");\n    textField.bind(\"value\", this, \"value\");\n\n    // forward the focusin and focusout events to the textfield. The textfield\n    // is not focusable so the events need to be forwarded manually.\n    this.addListener(\"focusin\", function(e) {\n      textField.fireNonBubblingEvent(\"focusin\", qx.event.type.Focus);\n    }, this);\n\n    this.addListener(\"focusout\", function(e) {\n      textField.fireNonBubblingEvent(\"focusout\", qx.event.type.Focus);\n      this.fireNonBubblingEvent(\"blur\", qx.event.type.Focus);\n    }, this);\n  },\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine: true,\n      init: \"virtual-combobox\"\n    },\n\n    // overridden\n    width :\n    {\n      refine: true,\n      init: 120\n    },\n\n\n    /**\n     * The currently selected or entered value.\n     */\n    value :\n    {\n      nullable: true,\n      event: \"changeValue\"\n    },\n\n\n    /**\n     * String value which will be shown as a hint if the field is all of:\n     * unset, unfocused and enabled. Set to null to not show a placeholder\n     * text.\n     */\n    placeholder :\n    {\n      check : \"String\",\n      nullable : true,\n      apply : \"_applyPlaceholder\"\n    },\n\n\n    /**\n     * Formatting function that will be applied to the value of a selected model\n     * item's label before it is written to the text field. Also used to find\n     * and preselect the first list entry that begins with the current content\n     * of the text field when the drop-down list is opened. Can be used e.g. to\n     * strip HTML tags from rich-formatted item labels. The function will be\n     * called with the item's label (String) as the only parameter.\n     */\n    defaultFormat :\n    {\n      check: \"Function\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  members :\n  {\n    /** @type {var} Binding id between local value and text field value. */\n    __localBindId : null,\n\n\n    /** @type {var} Binding id between text field value and local value. */\n    __textFieldBindId : null,\n\n\n    /** @type {qx.data.Array} the drop-down selection. */\n    __selection : null,\n\n\n    /** @type {Boolean} Indicator to ignore selection changes from the list. */\n    __ignoreChangeSelection : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Returns the current selection. This method only works if the widget is\n     * already created and added to the document.\n     *\n     * @return {String|null} The current text selection.\n     */\n    getTextSelection : function() {\n      return this.getChildControl(\"textfield\").getTextSelection();\n    },\n\n\n    /**\n     * Returns the current selection length. This method only works if the\n     * widget is already created and added to the document.\n     *\n     * @return {Integer|null} The current text selection length.\n     */\n    getTextSelectionLength : function() {\n      return this.getChildControl(\"textfield\").getTextSelectionLength();\n    },\n\n\n    /**\n     * Set the selection to the given start and end (zero-based). If no end\n     * value is given the selection will extend to the end of the textfield's\n     * content. This method only works if the widget is already created and\n     * added to the document.\n     *\n     * @param start {Integer} Start of the selection (zero-based).\n     * @param end {Integer} End of the selection.\n     */\n    setTextSelection : function(start, end) {\n      this.getChildControl(\"textfield\").setTextSelection(start,  end);\n    },\n\n\n    /**\n     * Clears the current selection. This method only works if the widget is\n     * already created and added to the document.\n     */\n    clearTextSelection : function() {\n      this.getChildControl(\"textfield\").clearTextSelection();\n    },\n\n\n    /**\n     * Selects the whole content.\n     */\n    selectAllText : function() {\n      this.getChildControl(\"textfield\").selectAllText();\n    },\n\n\n    /**\n     * Clear any text selection, then select all text.\n     */\n    resetAllTextSelection : function()\n    {\n      this.clearTextSelection();\n      this.selectAllText();\n    },\n\n\n    // overridden\n    tabFocus : function()\n    {\n      var field = this.getChildControl(\"textfield\");\n\n      field.getFocusElement().focus();\n      field.selectAllText();\n    },\n\n\n    // overridden\n    focus : function()\n    {\n      this.base(arguments);\n      this.getChildControl(\"textfield\").getFocusElement().focus();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch (id)\n      {\n        case \"textfield\" :\n          control = new qx.ui.form.TextField();\n          control.setFocusable(false);\n          control.addState(\"inner\");\n          this._add(control, {flex : 1});\n          break;\n\n        case \"button\" :\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.setKeepActive(true);\n          control.addState(\"inner\");\n          control.addListener(\"execute\", this.toggle, this);\n          this._add(control);\n          break;\n      }\n\n      return control || this.base(arguments, id, hash);\n    },\n\n\n    // overridden\n    _beforeOpen : function() {\n      this.__selectFirstMatch();\n    },\n\n\n    // overridden\n    _handleKeyboard : function(event)\n    {\n      var action = this._getAction(event);\n\n      switch(action)\n      {\n        case \"select\":\n          this.setValue(this.getChildControl(\"textfield\").getValue());\n          break;\n\n        default:\n          this.base(arguments, event);\n          break;\n      }\n    },\n\n\n    // overridden\n    _getAction : function(event)\n    {\n      var keyIdentifier = event.getKeyIdentifier();\n      var isOpen = this.getChildControl(\"dropdown\").isVisible();\n      var isModifierPressed = this._isModifierPressed(event);\n\n      if (!isOpen && !isModifierPressed && keyIdentifier === \"Enter\") {\n        return \"select\";\n      } else {\n        return this.base(arguments, event);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    _handlePointer : function(event) {\n      this.base(arguments, event);\n\n      var type = event.getType();\n      if (type !== \"tap\") {\n        return;\n      }\n\n      this.close();\n    },\n\n\n    /**\n     * Handler to synchronize selection changes with the value property.\n     *\n     * @param event {qx.event.type.Data} The change event from the qx.data.Array.\n     */\n    __onSelectionChange : function(event) {\n      if (this.__ignoreChangeSelection == true) {\n        return;\n      }\n\n      var selected = this.__selection.getItem(0);\n      if(selected){\n        selected = this.__convertValue(selected);\n        this.setValue(selected);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n    // property apply\n    _applyPlaceholder : function(value, old) {\n      this.getChildControl(\"textfield\").setPlaceholder(value);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Selects the first list item that starts with the text field's value.\n     */\n    __selectFirstMatch : function()\n    {\n      var value = this.getValue();\n      var dropdown = this.getChildControl(\"dropdown\");\n      var selection = dropdown.getSelection();\n      var selected = selection.getItem(0);\n\n      // try to preselect the matching item even if there is no current selection\n      if (selected === undefined || this.__convertValue(selected) !== value)\n      {\n        // only reset the old selection if there is one\n        if(selected !== undefined) {\n          // reset the old selection\n          this.__ignoreChangeSelection = true;\n          selection.removeAll();\n          this.__ignoreChangeSelection = false;\n        }\n        \n        // No calculation is needed when the value is empty\n        if (value == null || value == \"\") {\n          return;\n        }\n\n        var model = this.getModel();\n        var lookupTable = dropdown.getChildControl(\"list\")._getLookupTable();\n        for (var i = 0, l = lookupTable.length; i < l; i++)\n        {\n          var modelItem = model.getItem(lookupTable[i]);\n          var itemLabel = this.__convertValue(modelItem);\n\n          if (itemLabel && itemLabel.indexOf(value) == 0) {\n            dropdown.setPreselected(modelItem);\n            break;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Helper method to convert the model item to a String.\n     *\n     * @param modelItem {var} The model item to convert.\n     * @return {String} The converted value.\n     */\n    __convertValue : function(modelItem)\n    {\n      var labelOptions = this.getLabelOptions();\n      var formatter = this.getDefaultFormat();\n      var labelPath = this.getLabelPath();\n      var result = null;\n\n      if (labelPath != null) {\n        result = qx.data.SingleValueBinding.resolvePropertyChain(modelItem, labelPath);\n      } else if (qx.lang.Type.isString(modelItem)) {\n        result = modelItem;\n      }\n\n      var converter = qx.util.Delegate.getMethod(labelOptions, \"converter\");\n      if (converter != null) {\n        result = converter(result);\n      }\n\n      if (result != null && formatter != null) {\n        result = formatter(qx.lang.String.stripTags(result));\n      }\n\n      return result;\n    }\n  },\n\n\n  destruct : function()\n  {\n    var textField = this.getChildControl(\"textfield\");\n    this.removeAllBindings();\n    textField.removeAllBindings();\n\n    this.__selection.removeListener(\"change\", this.__onSelectionChange, this);\n    this.__selection = null;\n  }\n});\n"
  ]
}