{
  "className": "qx.ui.form.Resetter",
  "packageName": "qx.ui.form",
  "name": "Resetter",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 181,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n     2017 Martijn Evers, The Netherlands\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (martinwittemann)\n Martijn Evers (mever)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>The resetter is responsible for managing a set of fields and resetting these\n fields on a {@link #reset} call. It can handle all form field implementing IField.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 29,
        "column": 14
      },
      "end": {
        "line": 34,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__items": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 38,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "add": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adding a field to the resetter will get its current value and store\n it for resetting.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {qx.ui.form.IField} The field which should be added.",
            "paramName": "field",
            "description": " The field which should be added.",
            "type": "qx.ui.form.IField"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{TypeError} When given argument is not a field.",
            "type": "TypeError",
            "description": " When given argument is not a field."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a field from the resetter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {qx.ui.form.IField} The field which should be removed.",
            "paramName": "field",
            "description": " The field which should be removed.",
            "type": "qx.ui.form.IField"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{TypeError} When given argument is not a field.",
            "type": "TypeError",
            "description": " When given argument is not a field."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the field has been removed.",
            "type": "Boolean",
            "description": " <code>true</code>, if the field has been removed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reset": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets all added fields to their initial value. The initial value\n is the value in the widget during the {@link #add}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|Error} Returns an error when some fields could not be reset.",
            "type": "null|Error",
            "description": " Returns an error when some fields could not be reset."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "resetItem": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets a single given field. The field has to be added to the resetter\n instance before. Otherwise, an error is thrown.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {qx.ui.form.IField} The field, which should be reset.",
            "paramName": "field",
            "description": " The field, which should be reset.",
            "type": "qx.ui.form.IField"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{TypeError} When given argument is not a field.",
            "type": "TypeError",
            "description": " When given argument is not a field."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|Error} Returns an error when the field value could not be set.",
            "type": "null|Error",
            "description": " Returns an error when the field value could not be set."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "redefine": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the current values of all added fields and uses these values as\n init values for resetting.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "redefineItem": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the current value of the given field and stores this value as init\n value for resetting.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {qx.ui.form.IField} The field to redefine.",
            "paramName": "field",
            "description": " The field to redefine.",
            "type": "qx.ui.form.IField"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{TypeError} When given argument is not a field.",
            "type": "TypeError",
            "description": " When given argument is not a field."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__typeCheck": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert when given argument is not a field.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {qx.ui.form.IField|var} Any argument that should be a field.",
            "paramName": "field",
            "description": " Any argument that should be a field.",
            "type": [
              "qx.ui.form.IField",
              "var"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{TypeError} When given argument is not a field.",
            "type": "TypeError",
            "description": " When given argument is not a field."
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 176,
        "column": 13
      },
      "end": {
        "line": 180,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}