{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/embed/Canvas.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "canvasWidth",
    "canvasHeight",
    "__deferredDraw",
    "util",
    "DeferredCall",
    "__redraw",
    "addListener",
    "_onResize",
    "undefined",
    "setCanvasWidth",
    "setCanvasHeight",
    "events",
    "properties",
    "syncDimension",
    "check",
    "init",
    "apply",
    "members",
    "_createContentElement",
    "html",
    "Canvas",
    "canvas",
    "getContentElement",
    "height",
    "getHeight",
    "width",
    "getWidth",
    "context",
    "getContext2d",
    "_draw",
    "fireNonBubblingEvent",
    "event",
    "type",
    "Data",
    "_applyCanvasWidth",
    "value",
    "old",
    "setWidth",
    "schedule",
    "_applyCanvasHeight",
    "setHeight",
    "update",
    "e",
    "data",
    "getData",
    "getSyncDimension",
    "destruct",
    "_disposeObjects",
    "embed"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADtB;;AAKE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,WAAT,EAAsBC,YAAtB,EACZ;AACE;AAEA,WAAKC,SAAL,GAAsB,IAAIb,EAAE,CAACc,IAAH,CAAQC,YAAZ,CAAyB,KAAKC,SAA9B,EAAwC,IAAxC,CAAtB;AACA,WAAKC,WAAL,CAAiB,QAAjB,EAA2B,KAAKC,SAAhC,EAA2C,IAA3C;;AAEA,UAAIP,WAAW,KAAKQ,SAApB,EAA+B;AAC7B,aAAKC,cAAL,CAAoBT,WAApB;AACD;;AAED,UAAIC,YAAY,KAAKO,SAArB,EAAgC;AAC9B,aAAKE,eAAL,CAAqBT,YAArB;AACD;AACF,KA7BH;;AAiCE;AACF;AACA;AACA;AACA;AAEEU,IAAAA,MAAM,EACN;AACE;AACJ;AACA;AACA;AACA;AACA;AACI,gBAAW;AAPb,KAxCF;;AAoDE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,UAAU,EACV;AACE;AACAC,MAAAA,aAAa,EACb;AACEC,QAAAA,KAAK,EAAG,SADV;AAEEC,QAAAA,IAAI,EAAG;AAFT,OAHF;;AAQE;AACAf,MAAAA,WAAW,EACX;AACEc,QAAAA,KAAK,EAAG,SADV;AAEEC,QAAAA,IAAI,EAAG,GAFT;AAGEC,QAAAA,KAAK,EAAG;AAHV,OAVF;;AAgBE;AACAf,MAAAA,YAAY,EACZ;AACEa,QAAAA,KAAK,EAAG,SADV;AAEEC,QAAAA,IAAI,EAAG,GAFT;AAGEC,QAAAA,KAAK,EAAG;AAHV;AAlBF,KA3DF;;AAsFE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AACE;AACAf,MAAAA,SAAc,EAAG,IAFnB;;AAIE;AACJ;AACA;AACA;AACA;AAEI;AACAgB,MAAAA,qBAAqB,EAAG,iCAAW;AACjC,eAAO,IAAI7B,EAAE,CAAC8B,IAAH,CAAQC,MAAZ,EAAP;AACD,OAbH;;AAgBE;AACJ;AACA;AACIf,MAAAA,SAAQ,EAAG,qBACX;AACE,YAAIgB,MAAM,GAAG,KAAKC,iBAAL,EAAb;AACA,YAAIC,MAAM,GAAGF,MAAM,CAACG,SAAP,EAAb;AACA,YAAIC,KAAK,GAAGJ,MAAM,CAACK,QAAP,EAAZ;AACA,YAAIC,OAAO,GAAGN,MAAM,CAACO,YAAP,EAAd;;AAEA,aAAKC,KAAL,CAAWJ,KAAX,EAAkBF,MAAlB,EAA0BI,OAA1B;;AACA,aAAKG,oBAAL,CACE,QADF,EAEEzC,EAAE,CAAC0C,KAAH,CAASC,IAAT,CAAcC,IAFhB,EAGE,CAAC;AACCR,UAAAA,KAAK,EAAEA,KADR;AAECF,UAAAA,MAAM,EAAEA,MAFT;AAGCI,UAAAA,OAAO,EAAEA;AAHV,SAAD,CAHF;AASD,OApCH;AAuCE;AACAO,MAAAA,iBAAiB,EAAG,2BAASC,KAAT,EAAgBC,GAAhB,EACpB;AACE,aAAKd,iBAAL,GAAyBe,QAAzB,CAAkCF,KAAlC;;AACA,aAAKjC,SAAL,CAAoBoC,QAApB;AACD,OA5CH;AA+CE;AACAC,MAAAA,kBAAkB,EAAG,4BAASJ,KAAT,EAAgBC,GAAhB,EACrB;AACE,aAAKd,iBAAL,GAAyBkB,SAAzB,CAAmCL,KAAnC;;AACA,aAAKjC,SAAL,CAAoBoC,QAApB;AACD,OApDH;;AAuDE;AACJ;AACA;AACIG,MAAAA,MAAM,EAAG,kBAAW;AAClB,aAAKvC,SAAL,CAAoBoC,QAApB;AACD,OA5DH;;AA+DE;AACJ;AACA;AACA;AACA;AACI/B,MAAAA,SAAS,EAAG,mBAASmC,CAAT,EACZ;AACE,YAAIC,IAAI,GAAGD,CAAC,CAACE,OAAF,EAAX;;AAEA,YAAI,KAAKC,gBAAL,EAAJ,EACA;AACE,eAAKnC,eAAL,CAAqBiC,IAAI,CAACpB,MAA1B;AACA,eAAKd,cAAL,CAAoBkC,IAAI,CAAClB,KAAzB;AACD;AACF,OA7EH;;AAgFE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIG,MAAAA,YAAY,EAAG,wBAAW;AACxB,eAAO,KAAKN,iBAAL,GAAyBM,YAAzB,EAAP;AACD,OAzFH;;AA4FE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,KAAK,EAAG,eAASJ,KAAT,EAAgBF,MAAhB,EAAwBI,OAAxB,EAAiC,CAAE;AArG7C,KA7FF;;AAuME;AACF;AACA;AACA;AACA;AACEmB,IAAAA,QAAQ,EAAG,oBAAW;AACpB,WAAKC,eAAL,CAAqB,WAArB;AACD;AA9MH,GADA;AApEA1D,EAAAA,EAAE,CAACO,EAAH,CAAMoD,KAAN,CAAY5B,MAAZ,CAAmB5B,aAAnB,GAAmCA,aAAnC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The Canvas widget embeds the HMTL canvas element\n * [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#the-canvas\">W3C-HTML5</a>]\n *\n * Note: This widget does not work in Internet Explorer < 9!\n * Check for browser support with qx.core.Environment.get(\"html.canvas\").\n *\n * To paint something on the canvas and keep the content updated on resizes you\n * either have to override the {@link #_draw} method or redraw the content on\n * the {@link #redraw} event. The drawing context can be obtained by {@link #getContext2d}.\n *\n * Note that this widget operates on two different coordinate systems. The canvas\n * has its own coordinate system for drawing operations. This canvas coordinate\n * system is scaled to fit actual size of the DOM element. Each time the size of\n * the canvas dimensions is changed a redraw is required. In this case the\n * protected method {@link #_draw} is called and the event {@link #redraw}\n * is fired. You can synchronize the internal canvas dimension with the\n * CSS dimension of the canvas element by setting {@link #syncDimension} to\n * <code>true</code>.\n *\n * *Example*\n *\n * Here is a little example of how to use the canvas widget.\n *\n * <pre class='javascript'>\n * var canvas = new qx.ui.embed.Canvas().set({\n *   canvasWidth: 200,\n *   canvasHeight: 200,\n *   syncDimension: true\n * });\n * canvas.addListener(\"redraw\", function(e)\n * {\n *   var data = e.getData();\n *   var width = data.width;\n *   var height = data.height;\n *   var ctx = data.context;\n *\n *   ctx.fillStyle = \"rgb(200,0,0)\";\n *   ctx.fillRect (20, 20, width-5, height-5);\n *\n *   ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n *   ctx.fillRect (70, 70, 105, 100);\n * }, this);\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#desktop/widget/canvas.md' target='_blank'>\n * Documentation of this widget in the qooxdoo manual.</a>\n */\nqx.Class.define(\"qx.ui.embed.Canvas\",\n{\n  extend : qx.ui.core.Widget,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param canvasWidth {Integer} The internal with of the canvas coordinates.\n   * @param canvasHeight {Integer} The internal height of the canvas coordinates.\n   */\n  construct : function(canvasWidth, canvasHeight)\n  {\n    this.base(arguments);\n\n    this.__deferredDraw = new qx.util.DeferredCall(this.__redraw, this);\n    this.addListener(\"resize\", this._onResize, this);\n\n    if (canvasWidth !== undefined) {\n      this.setCanvasWidth(canvasWidth);\n    }\n\n    if (canvasHeight !== undefined) {\n      this.setCanvasHeight(canvasHeight);\n    }\n  },\n\n\n\n  /*\n   *****************************************************************************\n      EVENTS\n   *****************************************************************************\n   */\n\n  events :\n  {\n    /**\n     * The redraw event is fired each time the canvas dimension change and the\n     * canvas needs to be updated. The data field contains a map containing the\n     * <code>width</code> and <code>height</code> of the canvas and the\n     * rendering <code>context</code>.\n     */\n    \"redraw\" : \"qx.event.type.Data\"\n  },\n\n\n\n  /*\n   *****************************************************************************\n      MEMBERS\n   *****************************************************************************\n   */\n\n  properties :\n  {\n    /** Whether canvas and widget coordinates should be synchronized */\n    syncDimension :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n    /** The internal with of the canvas coordinates */\n    canvasWidth :\n    {\n      check : \"Integer\",\n      init : 300,\n      apply : \"_applyCanvasWidth\"\n    },\n\n    /** The internal height of the canvas coordinates */\n    canvasHeight :\n    {\n      check : \"Integer\",\n      init : 150,\n      apply : \"_applyCanvasHeight\"\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {qx.util.DeferredCall} */\n    __deferredDraw : null,\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createContentElement : function() {\n      return new qx.html.Canvas();\n    },\n\n\n    /**\n     * This methods triggers the redraw of the canvas' content\n     */\n    __redraw : function()\n    {\n      var canvas = this.getContentElement();\n      var height = canvas.getHeight();\n      var width = canvas.getWidth();\n      var context = canvas.getContext2d();\n\n      this._draw(width, height, context);\n      this.fireNonBubblingEvent(\n        \"redraw\",\n        qx.event.type.Data,\n        [{\n          width: width,\n          height: height,\n          context: context\n        }]\n      );\n    },\n\n\n    // property apply\n    _applyCanvasWidth : function(value, old)\n    {\n      this.getContentElement().setWidth(value);\n      this.__deferredDraw.schedule();\n    },\n\n\n    // property apply\n    _applyCanvasHeight : function(value, old)\n    {\n      this.getContentElement().setHeight(value);\n      this.__deferredDraw.schedule();\n    },\n\n\n    /**\n     * Redraw the canvas\n     */\n    update : function() {\n      this.__deferredDraw.schedule();\n    },\n\n\n    /**\n     * Widget resize event handler. Updates the canvas dimension if needed.\n     *\n     * @param e {qx.event.type.Data} The resize event object\n     */\n    _onResize : function(e)\n    {\n      var data = e.getData();\n\n      if (this.getSyncDimension())\n      {\n        this.setCanvasHeight(data.height);\n        this.setCanvasWidth(data.width);\n      }\n    },\n\n\n    /**\n     * Get the native canvas 2D rendering context\n     * [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].\n     * All drawing operations are performed on this context.\n     *\n     * @return {CanvasRenderingContext2D} The 2D rendering context.\n     */\n    getContext2d : function() {\n      return this.getContentElement().getContext2d();\n    },\n\n\n    /**\n     * Template method, which can be used by derived classes to redraw the\n     * content. It is called each time the canvas dimension change and the\n     * canvas needs to be updated.\n     *\n     * @param width {Integer} New canvas width\n     * @param height {Integer} New canvas height\n     * @param context {CanvasRenderingContext2D} The rendering context to draw to\n     */\n    _draw : function(width, height, context) {}\n  },\n\n\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n  destruct : function() {\n    this._disposeObjects(\"__deferredDraw\");\n  }\n});\n"
  ]
}