{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/list/core/MWidgetController.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "__boundItems",
    "properties",
    "labelPath",
    "check",
    "nullable",
    "iconPath",
    "groupLabelPath",
    "labelOptions",
    "iconOptions",
    "groupLabelOptions",
    "delegate",
    "event",
    "init",
    "members",
    "bindDefaultProperties",
    "item",
    "index",
    "getUserData",
    "bindProperty",
    "getLabelPath",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "getGroupLabelPath",
    "getGroupLabelOptions",
    "sourcePath",
    "targetProperty",
    "options",
    "targetWidget",
    "type",
    "bindPath",
    "__getBindPath",
    "ignoreConverter",
    "id",
    "_list",
    "bind",
    "__addBinding",
    "bindPropertyReverse",
    "targetPath",
    "sourceProperty",
    "sourceWidget",
    "removeBindings",
    "length",
    "pop",
    "_removeBindingsFrom",
    "_configureItem",
    "getDelegate",
    "configureItem",
    "_configureGroupItem",
    "configureGroupItem",
    "_bindItem",
    "bindItem",
    "_bindGroupItem",
    "bindGroupItem",
    "bindings",
    "__getBindings",
    "removeBinding",
    "e",
    "includes",
    "lang",
    "Array",
    "remove",
    "path",
    "widget",
    "push",
    "setUserData",
    "destruct",
    "ui",
    "list",
    "core",
    "MWidgetController"
  ],
  "mappings": ";;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;AAKAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mCAAhB,EACA;AACEC,IAAAA,SAAS,EAAG,qBAAW;AACrB,WAAKC,YAAL,GAAoB,EAApB;AACD,KAHH;AAMEC,IAAAA,UAAU,EACV;AACE;;;;AAIAC,MAAAA,SAAS,EACT;AACEC,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OANF;;AAYE;;;;;AAKAC,MAAAA,QAAQ,EACR;AACEF,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OAlBF;;AAwBE;;;;;AAKAE,MAAAA,cAAc,EACd;AACEH,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OA9BF;;AAoCE;;;;AAIAG,MAAAA,YAAY,EACZ;AACEH,QAAAA,QAAQ,EAAE;AADZ,OAzCF;;AA8CE;;;;AAIAI,MAAAA,WAAW,EACX;AACEJ,QAAAA,QAAQ,EAAE;AADZ,OAnDF;;AAwDE;;;;AAIAK,MAAAA,iBAAiB,EACjB;AACEL,QAAAA,QAAQ,EAAE;AADZ,OA7DF;;AAkEE;;;;AAIAM,MAAAA,QAAQ,EACR;AACEC,QAAAA,KAAK,EAAE,gBADT;AAEEC,QAAAA,IAAI,EAAE,IAFR;AAGER,QAAAA,QAAQ,EAAE;AAHZ;AAvEF,KAPF;AAsFES,IAAAA,OAAO,EACP;AACE;AACAb,MAAAA,YAAY,EAAG,IAFjB;;AAKE;;;;;;;;;;;;;;;;AAgBAc,MAAAA,qBAAqB,EAAG,+BAASC,IAAT,EAAeC,KAAf,EACxB;AACE,YAAGD,IAAI,CAACE,WAAL,CAAiB,WAAjB,KAAiC,OAApC,EACA;AACE;AACA,eAAKC,YAAL,CACI,EADJ,EACQ,OADR,EACiB,IADjB,EACuBH,IADvB,EAC6BC,KAD7B;AAIA,eAAKE,YAAL,CACE,KAAKC,YAAL,EADF,EACuB,OADvB,EACgC,KAAKC,eAAL,EADhC,EACwDL,IADxD,EAC8DC,KAD9D;;AAIA,cAAI,KAAKK,WAAL,MAAsB,IAA1B,EAAgC;AAC9B,iBAAKH,YAAL,CACE,KAAKG,WAAL,EADF,EACsB,MADtB,EAC8B,KAAKC,cAAL,EAD9B,EACqDP,IADrD,EAC2DC,KAD3D;AAGD;AACF,SAhBD,MAkBA;AACE,eAAKE,YAAL,CACE,KAAKK,iBAAL,EADF,EAC4B,OAD5B,EACqC,KAAKC,oBAAL,EADrC,EACkET,IADlE,EACwEC,KADxE;AAGD;AACF,OA9CH;;AAiDE;;;;;;;;;;;;;;AAcAE,MAAAA,YAAY,EAAG,sBAASO,UAAT,EAAqBC,cAArB,EAAqCC,OAArC,EAA8CC,YAA9C,EAA4DZ,KAA5D,EACf;AACE,YAAIa,IAAI,GAAGD,YAAY,CAACX,WAAb,CAAyB,WAAzB,CAAX;;AACA,YAAIa,QAAQ,GAAG,KAAKC,aAAL,CAAmBf,KAAnB,EAA0BS,UAA1B,EAAsCI,IAAtC,CAAf;;AAEA,YAAIF,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACK,eAAR,GAA0B,OAA1B;AACD;;AAED,YAAIC,EAAE,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBL,QAAhB,EAA0BF,YAA1B,EAAwCF,cAAxC,EAAwDC,OAAxD,CAAT;;AACA,aAAKS,YAAL,CAAkBR,YAAlB,EAAgCK,EAAhC;AACD,OA1EH;;AA6EE;;;;;;;;;;;;;AAaAI,MAAAA,mBAAmB,EAAG,6BAASC,UAAT,EAAqBC,cAArB,EAAqCZ,OAArC,EAA8Ca,YAA9C,EAA4DxB,KAA5D,EACtB;AACE,YAAIa,IAAI,GAAGW,YAAY,CAACvB,WAAb,CAAyB,WAAzB,CAAX;;AACA,YAAIa,QAAQ,GAAG,KAAKC,aAAL,CAAmBf,KAAnB,EAA0BsB,UAA1B,EAAsCT,IAAtC,CAAf;;AAEA,YAAII,EAAE,GAAGO,YAAY,CAACL,IAAb,CAAkBI,cAAlB,EAAkC,KAAKL,KAAvC,EAA8CJ,QAA9C,EAAwDH,OAAxD,CAAT;;AACA,aAAKS,YAAL,CAAkBI,YAAlB,EAAgCP,EAAhC;AACD,OAjGH;;AAoGE;;;AAGAQ,MAAAA,cAAc,EAAG,0BACjB;AACE,eAAM,KAAKzC,YAAL,CAAkB0C,MAAlB,GAA2B,CAAjC,EAAoC;AAClC,cAAI3B,IAAI,GAAG,KAAKf,YAAL,CAAkB2C,GAAlB,EAAX;;AACA,eAAKC,mBAAL,CAAyB7B,IAAzB;AACD;AACF,OA7GH;;AAgHE;;;;;;AAMA8B,MAAAA,cAAc,EAAG,wBAAS9B,IAAT,EACjB;AACE,YAAIL,QAAQ,GAAG,KAAKoC,WAAL,EAAf;;AAEA,YAAIpC,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACqC,aAAT,IAA0B,IAAlD,EAAwD;AACtDrC,UAAAA,QAAQ,CAACqC,aAAT,CAAuBhC,IAAvB;AACD;AACF,OA7HH;;AAgIE;;;;;;AAMAiC,MAAAA,mBAAmB,EAAG,6BAASjC,IAAT,EACtB;AACE,YAAIL,QAAQ,GAAG,KAAKoC,WAAL,EAAf;;AAEA,YAAIpC,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACuC,kBAAT,IAA+B,IAAvD,EAA6D;AAC3DvC,UAAAA,QAAQ,CAACuC,kBAAT,CAA4BlC,IAA5B;AACD;AACF,OA7IH;;AAgJE;;;;;;AAMAmC,MAAAA,SAAS,EAAG,mBAASnC,IAAT,EAAeC,KAAf,EAAsB;AAChC,YAAIN,QAAQ,GAAG,KAAKoC,WAAL,EAAf;;AAEA,YAAIpC,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACyC,QAAT,IAAqB,IAA7C,EAAmD;AACjDzC,UAAAA,QAAQ,CAACyC,QAAT,CAAkB,IAAlB,EAAwBpC,IAAxB,EAA8BC,KAA9B;AACD,SAFD,MAEO;AACL,eAAKF,qBAAL,CAA2BC,IAA3B,EAAiCC,KAAjC;AACD;AACF,OA9JH;;AAiKE;;;;;;AAMAoC,MAAAA,cAAc,EAAG,wBAASrC,IAAT,EAAeC,KAAf,EAAsB;AACrC,YAAIN,QAAQ,GAAG,KAAKoC,WAAL,EAAf;;AAEA,YAAIpC,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAAC2C,aAAT,IAA0B,IAAlD,EAAwD;AACtD3C,UAAAA,QAAQ,CAAC2C,aAAT,CAAuB,IAAvB,EAA6BtC,IAA7B,EAAmCC,KAAnC;AACD,SAFD,MAEO;AACL,eAAKF,qBAAL,CAA2BC,IAA3B,EAAiCC,KAAjC;AACD;AACF,OA/KH;;AAkLE;;;;;;AAMA4B,MAAAA,mBAAmB,EAAG,6BAAS7B,IAAT,EAAe;AACnC,YAAIuC,QAAQ,GAAG,KAAKC,aAAL,CAAmBxC,IAAnB,CAAf;;AAEA,eAAOuC,QAAQ,CAACZ,MAAT,GAAkB,CAAzB,EAA4B;AAC1B,cAAIT,EAAE,GAAGqB,QAAQ,CAACX,GAAT,EAAT;;AAEA,cAAI;AACF,iBAAKT,KAAL,CAAWsB,aAAX,CAAyBvB,EAAzB;AACD,WAFD,CAEE,OAAMwB,CAAN,EAAS;AACT1C,YAAAA,IAAI,CAACyC,aAAL,CAAmBvB,EAAnB;AACD;AACF;;AAED,YAAI,KAAKjC,YAAL,CAAkB0D,QAAlB,CAA2B3C,IAA3B,CAAJ,EAAsC;AACpCtB,UAAAA,EAAE,CAACkE,IAAH,CAAQC,KAAR,CAAcC,MAAd,CAAqB,KAAK7D,YAA1B,EAAwCe,IAAxC;AACD;AACF,OAxMH;;AA2ME;;;;;;;;AAQAgB,MAAAA,aAAa,EAAG,uBAASf,KAAT,EAAgB8C,IAAhB,EAAsBjC,IAAtB,EAChB;AACE,YAAIC,QAAQ,GAAG,WAAWd,KAAX,GAAmB,GAAlC;;AACA,YAAIa,IAAI,IAAI,OAAZ,EAAqB;AACnBC,UAAAA,QAAQ,GAAG,YAAYd,KAAZ,GAAoB,GAA/B;AACD;;AAED,YAAI8C,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,EAA5B,EAAgC;AAC9BhC,UAAAA,QAAQ,IAAI,MAAMgC,IAAlB;AACD;;AAED,eAAOhC,QAAP;AACD,OA/NH;;AAkOE;;;;;;AAMAM,MAAAA,YAAY,EAAG,sBAAS2B,MAAT,EAAiB9B,EAAjB,EACf;AACE,YAAIqB,QAAQ,GAAG,KAAKC,aAAL,CAAmBQ,MAAnB,CAAf;;AAEA,YAAI,CAACT,QAAQ,CAACI,QAAT,CAAkBzB,EAAlB,CAAL,EAA4B;AAC1BqB,UAAAA,QAAQ,CAACU,IAAT,CAAc/B,EAAd;AACD;;AAED,YAAI,CAAC,KAAKjC,YAAL,CAAkB0D,QAAlB,CAA2BK,MAA3B,CAAL,EAAyC;AACvC,eAAK/D,YAAL,CAAkBgE,IAAlB,CAAuBD,MAAvB;AACD;AACF,OAnPH;;AAsPE;;;;;;AAMAR,MAAAA,aAAa,EAAG,uBAASQ,MAAT,EAChB;AACE,YAAIT,QAAQ,GAAGS,MAAM,CAAC9C,WAAP,CAAmB,YAAnB,CAAf;;AAEA,YAAIqC,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,UAAAA,QAAQ,GAAG,EAAX;AACAS,UAAAA,MAAM,CAACE,WAAP,CAAmB,YAAnB,EAAiCX,QAAjC;AACD;;AAED,eAAOA,QAAP;AACD;AAtQH,KAvFF;AAiWEY,IAAAA,QAAQ,EAAG,oBAAW;AACpB,WAAKlE,YAAL,GAAoB,IAApB;AACD;AAnWH,GADA;AAxBAP,EAAAA,EAAE,CAAC0E,EAAH,CAAMC,IAAN,CAAWC,IAAX,CAAgBC,iBAAhB,CAAkC1E,aAAlC,GAAkDA,aAAlD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The mixin controls the binding between model and item.\n *\n * @internal\n */\nqx.Mixin.define(\"qx.ui.list.core.MWidgetController\",\n{\n  construct : function() {\n    this.__boundItems = [];\n  },\n\n\n  properties :\n  {\n    /**\n     * The path to the property which holds the information that should be\n     * shown as a label. This is only needed if objects are stored in the model.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon. This is only needed if objects are stored in the model\n     * and if the icon should be shown.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * displayed as a group label. This is only needed if objects are stored in the\n     * model.\n     */\n    groupLabelPath :\n    {\n      check: \"String\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the group label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    groupLabelOptions :\n    {\n      nullable: true\n    },\n\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link qx.ui.list.core.IListDelegate} interface.\n     */\n    delegate :\n    {\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n\n  members :\n  {\n    /** @type {Array} which contains the bounded items */\n    __boundItems : null,\n\n\n    /**\n     * Helper-Method for binding the default properties from\n     * the model to the target widget. The used default properties\n     * depends on the passed item. When the passed item is\n     * a list item the \"label\" and \"icon\" property is used.\n     * When the passed item is a group item the \"value\" property is\n     * used.\n     *\n     * This method should only be called in the\n     * {@link IListDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param item {qx.ui.core.Widget} The internally created and used\n     *   list or group item.\n     * @param index {Integer} The index of the item.\n     */\n    bindDefaultProperties : function(item, index)\n    {\n      if(item.getUserData(\"cell.type\") != \"group\")\n      {\n        // bind model first\n        this.bindProperty(\n            \"\", \"model\", null, item, index\n        );\n\n        this.bindProperty(\n          this.getLabelPath(), \"label\", this.getLabelOptions(), item, index\n        );\n\n        if (this.getIconPath() != null) {\n          this.bindProperty(\n            this.getIconPath(), \"icon\", this.getIconOptions(), item, index\n          );\n        }\n      }\n      else\n      {\n        this.bindProperty(\n          this.getGroupLabelPath(), \"value\", this.getGroupLabelOptions(), item, index\n        );\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link IListDelegate#bindItem} function implemented by the\n     * {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetProperty {String} The name of the property in the target widget.\n     * @param options {Map | null} The options to use for the binding.\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\n     * @param index {Integer} The index of the current binding.\n     */\n    bindProperty : function(sourcePath, targetProperty, options, targetWidget, index)\n    {\n      var type = targetWidget.getUserData(\"cell.type\");\n      var bindPath = this.__getBindPath(index, sourcePath, type);\n\n      if (options) {\n        options.ignoreConverter = \"model\";\n      }\n\n      var id = this._list.bind(bindPath, targetWidget, targetProperty, options);\n      this.__addBinding(targetWidget, id);\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link IListDelegate#bindItem} function implemented by the\n     * {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourceProperty {String} The name of the property in the target.\n     * @param options {Map | null} The options to use for the binding.\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\n     * @param index {Integer} The index of the current binding.\n     */\n    bindPropertyReverse : function(targetPath, sourceProperty, options, sourceWidget, index)\n    {\n      var type = sourceWidget.getUserData(\"cell.type\");\n      var bindPath = this.__getBindPath(index, targetPath, type);\n\n      var id = sourceWidget.bind(sourceProperty, this._list, bindPath, options);\n      this.__addBinding(sourceWidget, id);\n    },\n\n\n    /**\n     * Remove all bindings from all bounded items.\n     */\n    removeBindings : function()\n    {\n      while(this.__boundItems.length > 0) {\n        var item = this.__boundItems.pop();\n        this._removeBindingsFrom(item);\n      }\n    },\n\n\n    /**\n     * Configure the passed item if a delegate is set and the needed\n     * function {@link IListDelegate#configureItem} is available.\n     *\n     * @param item {qx.ui.core.Widget} item to configure.\n     */\n    _configureItem : function(item)\n    {\n      var delegate = this.getDelegate();\n\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n    },\n\n\n    /**\n     * Configure the passed item if a delegate is set and the needed\n     * function {@link IListDelegate#configureGroupItem} is available.\n     *\n     * @param item {qx.ui.core.Widget} item to configure.\n     */\n    _configureGroupItem : function(item)\n    {\n      var delegate = this.getDelegate();\n\n      if (delegate != null && delegate.configureGroupItem != null) {\n        delegate.configureGroupItem(item);\n      }\n    },\n\n\n    /**\n     * Sets up the binding for the given item and index.\n     *\n     * @param item {qx.ui.core.Widget} The internally created and used item.\n     * @param index {Integer} The index of the item.\n     */\n    _bindItem : function(item, index) {\n      var delegate = this.getDelegate();\n\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, item, index);\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n\n    /**\n     * Sets up the binding for the given group item and index.\n     *\n     * @param item {qx.ui.core.Widget} The internally created and used item.\n     * @param index {Integer} The index of the item.\n     */\n    _bindGroupItem : function(item, index) {\n      var delegate = this.getDelegate();\n\n      if (delegate != null && delegate.bindGroupItem != null) {\n        delegate.bindGroupItem(this, item, index);\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n\n    /**\n     * Removes the binding of the given item.\n     *\n     * @param item {qx.ui.core.Widget} The item which the binding should\n     *   be removed.\n     */\n    _removeBindingsFrom : function(item) {\n      var bindings = this.__getBindings(item);\n\n      while (bindings.length > 0) {\n        var id = bindings.pop();\n\n        try {\n          this._list.removeBinding(id);\n        } catch(e) {\n          item.removeBinding(id);\n        }\n      }\n\n      if (this.__boundItems.includes(item)) {\n        qx.lang.Array.remove(this.__boundItems, item);\n      }\n    },\n\n\n    /**\n     * Helper method to create the path for binding.\n     *\n     * @param index {Integer} The index of the item.\n     * @param path {String|null} The path to the property.\n     * @param type {String} The type <code>[\"item\", \"group\"]</code>.\n     * @return {String} The binding path\n     */\n    __getBindPath : function(index, path, type)\n    {\n      var bindPath = \"model[\" + index + \"]\";\n      if (type == \"group\") {\n        bindPath = \"groups[\" + index + \"]\";\n      }\n\n      if (path != null && path != \"\") {\n        bindPath += \".\" + path;\n      }\n\n      return bindPath;\n    },\n\n\n    /**\n     * Helper method to save the binding for the widget.\n     *\n     * @param widget {qx.ui.core.Widget} widget to save binding.\n     * @param id {var} the id from the binding.\n     */\n    __addBinding : function(widget, id)\n    {\n      var bindings = this.__getBindings(widget);\n\n      if (!bindings.includes(id)) {\n        bindings.push(id);\n      }\n\n      if (!this.__boundItems.includes(widget)) {\n        this.__boundItems.push(widget);\n      }\n    },\n\n\n    /**\n     * Helper method which returns all bound id from the widget.\n     *\n     * @param widget {qx.ui.core.Widget} widget to get all binding.\n     * @return {Array} all bound id's.\n     */\n    __getBindings : function(widget)\n    {\n      var bindings = widget.getUserData(\"BindingIds\");\n\n      if (bindings == null) {\n        bindings = [];\n        widget.setUserData(\"BindingIds\", bindings);\n      }\n\n      return bindings;\n    }\n  },\n\n\n  destruct : function() {\n    this.__boundItems = null;\n  }\n});\n"
  ]
}