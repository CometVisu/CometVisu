{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/tree/VirtualTree.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "core",
    "Scroller",
    "implement",
    "tree",
    "IVirtualTree",
    "data",
    "controller",
    "ISelection",
    "include",
    "selection",
    "MModel",
    "MContentPadding",
    "construct",
    "rootModel",
    "labelPath",
    "childProperty",
    "openProperty",
    "_init",
    "setLabelPath",
    "setChildProperty",
    "initModel",
    "initItemHeight",
    "initOpenMode",
    "addListener",
    "_onKeyPress",
    "openViaModelChanges",
    "events",
    "open",
    "close",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "width",
    "height",
    "itemHeight",
    "check",
    "apply",
    "themeable",
    "openMode",
    "event",
    "hideRoot",
    "showTopLevelOpenCloseIcons",
    "showLeafs",
    "nullable",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "model",
    "deferredInit",
    "delegate",
    "members",
    "_provider",
    "_layer",
    "__lookupTable",
    "__openNodes",
    "__nestingLevel",
    "__deferredCall",
    "_itemWidth",
    "__parentChain",
    "__openProperty",
    "syncWidget",
    "jobs",
    "firstRow",
    "getFirstRow",
    "rowSize",
    "getRowSizes",
    "length",
    "row",
    "widget",
    "getRenderedCellWidget",
    "Math",
    "max",
    "getSizeHint",
    "paneWidth",
    "getPane",
    "getInnerSize",
    "getColumnConfig",
    "setItemSize",
    "openNode",
    "node",
    "__openNode",
    "buildLookupTable",
    "openNodeWithoutScrolling",
    "autoscroll",
    "getAutoScrollIntoView",
    "setAutoScrollIntoView",
    "refresh",
    "openNodeAndParents",
    "__openNodeAndAllParents",
    "getModel",
    "closeNode",
    "includes",
    "lang",
    "Array",
    "remove",
    "fireDataEvent",
    "closeNodeWithoutScrolling",
    "isNodeOpen",
    "_openCloseController",
    "dispose",
    "OpenCloseController",
    "getOpenProperty",
    "_initLayer",
    "provider",
    "WidgetProvider",
    "createLayer",
    "_onUpdated",
    "addLayer",
    "addListenerOnce",
    "e",
    "getData",
    "getLookupTable",
    "isShowTopLevelOpenCloseIcons",
    "_reverseLookup",
    "index",
    "_getDataFromRow",
    "getItem",
    "_getSelectables",
    "getOpenNodes",
    "isNode",
    "item",
    "Util",
    "getChildProperty",
    "getLevel",
    "hasChildren",
    "isShowLeafs",
    "_getContentPaddingTarget",
    "_applyRowHeight",
    "value",
    "old",
    "getRowConfig",
    "setDefaultItemSize",
    "_applyOpenMode",
    "pane",
    "_onOpen",
    "removeListener",
    "_applyHideRoot",
    "_applyShowTopLevelOpenCloseIcons",
    "removeAll",
    "_applyShowLeafs",
    "_applyChildProperty",
    "_applyLabelPath",
    "_applyIconPath",
    "setIconPath",
    "_applyLabelOptions",
    "setLabelOptions",
    "_applyIconOptions",
    "setIconOptions",
    "_applyModel",
    "_onChangeBubble",
    "__applyModelChanges",
    "_applyDelegate",
    "setDelegate",
    "propertyName",
    "name",
    "lastIndexOf",
    "substr",
    "startsWith",
    "isSubClassOf",
    "constructor",
    "propertyChain",
    "SingleValueBinding",
    "resolvePropertyChain",
    "indexOf",
    "util",
    "DeferredCall",
    "queue",
    "Widget",
    "add",
    "schedule",
    "getRow",
    "getSelection",
    "getLength",
    "getKeyIdentifier",
    "parent",
    "getParent",
    "splice",
    "children",
    "get",
    "_beforeApplySelection",
    "newSelection",
    "getSelectionMode",
    "visibleParent",
    "__getVisibleParent",
    "push",
    "_afterApplySelection",
    "__buildParentChain",
    "_applyDefaultSelection",
    "getLabelPath",
    "Error",
    "lookupTable",
    "nestedLevel",
    "root",
    "isHideRoot",
    "visibleChildren",
    "__getVisibleChildrenFrom",
    "concat",
    "equals",
    "toArray",
    "removeBindings",
    "append",
    "__updateRowCount",
    "_updateSelection",
    "visible",
    "copy",
    "getDelegate",
    "filter",
    "Delegate",
    "getMethod",
    "sorter",
    "sort",
    "i",
    "child",
    "startNode",
    "targetNode",
    "result",
    "setItemCount",
    "fullUpdate",
    "level",
    "levelBefore",
    "unshift",
    "pop",
    "contains",
    "destruct",
    "hasListener",
    "ObjectRegistry",
    "inShutDown",
    "cancel",
    "destroy",
    "VirtualTree"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/*\n * Virtual tree implementation.\n *\n * The virtual tree can be used to render node and leafs. Nodes and leafs are\n * both items for a tree. The difference between a node and a leaf is that a\n * node has child items, but a leaf not.\n *\n * With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\n * to configure the tree's behavior (item renderer configuration, etc.).\n *\n * Here's an example of how to use the widget, including using a model\n * property to open/close branches. See the two timers at the end. The first\n * one opens all branches after two seconds; the second cleans up the tree\n * after five seconds.\n *\n * <pre class=\"javascript\">\n *   var nodes = \n *   [\n *     {\n *       name : \"Root\",\n *       open : false,\n *       children :\n *       [\n *         {\n *           name : \"Branch 1\",\n *           open : false,\n *           children :\n *           [\n *             {\n *               name : \"Leaf 1.1\"\n *             },\n *             {\n *               name : \"Leaf 1.2\"\n *             },\n *             {\n *               name : \"Branch 1.3\",\n *               open : false,\n *               children :\n *               [\n *                 {\n *                   name : \"Branch 1.3.1\",\n *                   open : false,\n *                   children :\n *                   [\n *                     {\n *                       name : \"Leaf 1.3.1.1\"\n *                     }\n *                   ]\n *                 }\n *               ]\n *             }\n *           ]\n *         }\n *       ]\n *     }\n *   ];\n *\n *   // convert the raw nodes to qooxdoo objects\n *   nodes = qx.data.marshal.Json.createModel(nodes, true);\n *\n *   // create the tree and synchronize the model property 'open'\n *   // to nodes being open\n *   var tree =\n *     new qx.ui.tree.VirtualTree(\n *       nodes.getItem(0), \"name\", \"children\", \"open\").set({\n *         width : 200,\n *         height : 400\n *       });\n *\n *   //log selection changes\n *   tree.getSelection().addListener(\"change\", function(e) {\n *     this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\n *   }, this);\n *\n *   tree.set(\n *     {\n *       width : 200,\n *       height : 400,\n *       showTopLevelOpenCloseIcons : true\n *     });\n *\n *   var doc = this.getRoot();\n *   doc.add(tree,\n *   {\n *     left : 100,\n *     top  : 50\n *   });\n *\n *   // After two seconds, open up all branches by setting their open\n *   // property to true.\n *   qx.event.Timer.once(\n *     function()\n *     {\n *       ;(function allOpen(root)\n *         {\n *           if (root.setOpen)     root.setOpen(true);\n *           if (root.getChildren) root.getChildren().forEach(allOpen);\n *         })(nodes.getItem(0));\n *     },\n *     this,\n *     2000);\n *\n *   // After five seconds, remove and dispose the tree.\n *   qx.event.Timer.once(\n *     function()\n *     {\n *       doc.remove(tree);\n *       tree.dispose();\n *       console.warn(\"All cleaned up.\");\n *     },\n *     this,\n *     5000);\n * </pre>\n */\nqx.Class.define(\"qx.ui.tree.VirtualTree\",\n{\n  extend : qx.ui.virtual.core.Scroller,\n  implement : [qx.ui.tree.core.IVirtualTree, qx.data.controller.ISelection],\n  include : [\n    qx.ui.virtual.selection.MModel,\n    qx.ui.core.MContentPadding\n  ],\n\n  /**\n   * @param rootModel {qx.core.Object?null} The model structure representing\n   *   the root of the tree, for more details have a look at the 'model'\n   *   property.\n   * @param labelPath {String?null} The name of the label property, for more\n   *   details have a look at the 'labelPath' property.\n   * @param childProperty {String?null} The name of the child property, for\n   *   more details have a look at the 'childProperty' property.\n   * @param openProperty {String|null} the name of the model property which\n   *   represents the open state of a branch. If this value is provided, so, \n   *   too, must be rootModel.\n   */\n  construct : function(\n    rootModel, labelPath, childProperty, openProperty)\n  {\n    this.base(arguments, 0, 1, 20, 100);\n\n    this._init();\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n\n    if (childProperty != null) {\n      this.setChildProperty(childProperty);\n    }\n\n    if(rootModel != null) {\n      this.initModel(rootModel);\n    }\n\n    this.initItemHeight();\n    this.initOpenMode();\n\n    this.addListener(\"keypress\", this._onKeyPress, this);\n\n    // If an open property and root model are provided, start up the open-close controller.\n    if (openProperty && rootModel) {\n      this.openViaModelChanges(openProperty);\n    }\n  },\n\n  events :\n  {\n    /**\n     * Fired when a node is opened.\n     */\n    open : \"qx.event.type.Data\",\n\n\n    /**\n     * Fired when a node is closed.\n     */\n    close : \"qx.event.type.Data\"\n  },\n\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine: true,\n      init: \"virtual-tree\"\n    },\n\n\n    // overridden\n    focusable :\n    {\n      refine: true,\n      init: true\n    },\n\n\n    // overridden\n    width :\n    {\n      refine : true,\n      init : 100\n    },\n\n\n    // overridden\n    height :\n    {\n      refine : true,\n      init : 200\n    },\n\n\n    /** Default item height. */\n    itemHeight :\n    {\n      check : \"Integer\",\n      init : 25,\n      apply : \"_applyRowHeight\",\n      themeable : true\n    },\n\n\n     /**\n     * Control whether tap or double tap should open or close the tapped\n     * item.\n     */\n    openMode :\n    {\n      check: [\"tap\", \"dbltap\", \"none\"],\n      init: \"dbltap\",\n      apply: \"_applyOpenMode\",\n      event: \"changeOpenMode\",\n      themeable: true\n    },\n\n    \n    /**\n     * Hides *only* the root node, not the node's children when the property is\n     * set to <code>true</code>.\n     */\n    hideRoot :\n    {\n      check: \"Boolean\",\n      init: false,\n      apply:\"_applyHideRoot\"\n    },\n\n\n    /**\n     * Whether top level items should have an open/close button. The top level\n     * item item is normally the root item, but when the root is hidden, the\n     * root children are the top level items.\n     */\n    showTopLevelOpenCloseIcons :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyShowTopLevelOpenCloseIcons\"\n    },\n\n\n    /**\n     * Configures the tree to show also the leafs. When the property is set to\n     * <code>false</code> *only* the nodes are shown.\n     */\n    showLeafs :\n    {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowLeafs\"\n    },\n\n\n    /**\n     * The name of the property, where the children are stored in the model.\n     * Instead of the {@link #labelPath} must the child property a direct\n     * property form the model instance.\n     */\n    childProperty :\n    {\n      check: \"String\",\n      apply: \"_applyChildProperty\",\n      nullable: true\n    },\n\n\n    /**\n     * The name of the property, where the value for the tree folders label\n     * is stored in the model classes.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * The model containing the data (nodes and/or leafs) which should be shown\n     * in the tree.\n     */\n    model :\n    {\n      check : \"qx.core.Object\",\n      apply : \"_applyModel\",\n      event: \"changeModel\",\n      nullable : true,\n      deferredInit : true\n    },\n\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.\n     */\n    delegate :\n    {\n      event: \"changeDelegate\",\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n\n  members :\n  {\n    /** @type {qx.ui.tree.provider.WidgetProvider} Provider for widget rendering. */\n    _provider : null,\n\n\n    /** @type {qx.ui.virtual.layer.Abstract} Layer which contains the items. */\n    _layer : null,\n\n\n    /**\n     * @type {qx.data.Array} The internal lookup table data structure to get the model item\n     * from a row.\n     */\n    __lookupTable : null,\n\n\n    /** @type {Array} HashMap which contains all open nodes. */\n    __openNodes : null,\n\n\n    /**\n     * @type {Array} The internal data structure to get the nesting level from a\n     * row.\n     */\n    __nestingLevel : null,\n\n\n    /**\n     * @type {qx.util.DeferredCall} Adds this instance to the widget queue on a\n     * deferred call.\n     */\n    __deferredCall : null,\n\n\n    /** @type {Integer} Holds the max item width from a rendered widget. */\n    _itemWidth : 0,\n\n\n    /** @type {Array} internal parent chain form the last selected node */\n    __parentChain : null,\n\n    /** \n     * @type {String|null} the name of the model property which represents the\n     *   open state of a branch.\n     */\n    __openProperty : null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    syncWidget : function(jobs)\n    {\n      var firstRow = this._layer.getFirstRow();\n      var rowSize = this._layer.getRowSizes().length;\n\n      for (var row = firstRow; row < firstRow + rowSize; row++)\n      {\n        var widget = this._layer.getRenderedCellWidget(row, 0);\n        if (widget != null) {\n          this._itemWidth = Math.max(this._itemWidth, widget.getSizeHint().width);\n        }\n      }\n      var paneWidth = this.getPane().getInnerSize().width;\n      this.getPane().getColumnConfig().setItemSize(0, Math.max(this._itemWidth, paneWidth));\n    },\n\n\n    // Interface implementation\n    openNode : function(node)\n    {\n      this.__openNode(node);\n      this.buildLookupTable();\n    },\n\n\n    // Interface implementation\n    openNodeWithoutScrolling : function(node)\n    {\n      var autoscroll = this.getAutoScrollIntoView();\n      // suspend automatically scrolling selection into view\n      this.setAutoScrollIntoView(false);\n\n      this.openNode(node);\n\n      // re set to original value\n      this.setAutoScrollIntoView(autoscroll);\n    },\n\n\n    /**\n     * Trigger a rebuild from the internal data structure.\n     */\n    refresh : function() {\n      this.buildLookupTable();\n    },\n\n\n    /**\n     * Opens the passed node and all his parents. *Note!* The algorithm\n     * implements a depth-first search with a complexity: <code>O(n)</code> and\n     * <code>n</code> are all model items.\n     *\n     * @param node {qx.core.Object} Node to open.\n     */\n    openNodeAndParents : function(node)\n    {\n      this.__openNodeAndAllParents(this.getModel(), node);\n      this.buildLookupTable();\n    },\n\n\n    // Interface implementation\n    closeNode : function(node)\n    {\n      if (this.__openNodes.includes(node))\n      {\n        qx.lang.Array.remove(this.__openNodes, node);\n        this.fireDataEvent(\"close\", node);\n        this.buildLookupTable();\n      }\n    },\n\n\n    // Interface implementation\n    closeNodeWithoutScrolling : function(node)\n    {\n      var autoscroll = this.getAutoScrollIntoView();\n      // suspend automatically scrolling selection into view\n      this.setAutoScrollIntoView(false);\n\n      this.closeNode(node);\n\n      // re set to original value\n      this.setAutoScrollIntoView(autoscroll);\n    },\n\n\n    // Interface implementation\n    isNodeOpen : function(node) {\n      return this.__openNodes.includes(node);\n    },\n\n\n    /**\n     * Open and close branches via changes to a property in the model.\n     * \n     * @param openProperty {String|null} \n     *   The name of the open property, which determines the open state of a\n     *   branch in the tree. If null, turn off opening and closing branches\n     *   via changes to the model.\n     */\n    openViaModelChanges : function(openProperty) {\n      // Save the open property\n      this.__openProperty = openProperty;\n\n      // if no name is provided, just remove any prior open-close controller\n      if (! openProperty) {\n        if (this._openCloseController) {\n          this._openCloseController.dispose();\n          this._openCloseController = null;\n        }\n\n        return;\n      }\n\n      // we have a property name, so create controller\n      this._openCloseController =\n        new qx.ui.tree.core.OpenCloseController(this, this.getModel(), openProperty);\n    },\n\n\n    /**\n     * Getter for the open property\n     */\n    getOpenProperty : function()\n    {\n      return this.__openProperty;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Initializes the virtual tree.\n     */\n    _init : function()\n    {\n      this.__lookupTable = new qx.data.Array();\n      this.__openNodes = [];\n      this.__nestingLevel = [];\n      this._initLayer();\n    },\n\n\n    /**\n     * Initializes the virtual tree layer.\n     */\n    _initLayer : function()\n    {\n      this._provider = new qx.ui.tree.provider.WidgetProvider(this);\n      this._layer = this._provider.createLayer();\n      this._layer.addListener(\"updated\", this._onUpdated, this);\n      this.getPane().addLayer(this._layer);\n      this.getPane().addListenerOnce(\"resize\", function(e) {\n        // apply width to pane on first rendering pass\n        // to avoid visible flickering\n        this.getPane().getColumnConfig().setItemSize(0, e.getData().width);\n      }, this);\n    },\n\n\n    // Interface implementation\n    getLookupTable : function() {\n      return this.__lookupTable;\n    },\n    \n    \n    // Interface implementation\n    isShowTopLevelOpenCloseIcons : function() {\n      return true;\n    },\n\n\n    /**\n     * Performs a lookup from model index to row.\n     *\n     * @param index {Number} The index to look at.\n     * @return {Number} The row or <code>-1</code>\n     *  if the index is not a model index.\n     */\n    _reverseLookup : function(index) {\n      return index;\n    },\n\n\n    /**\n     * Returns the model data for the given row.\n     *\n     * @param row {Integer} row to get data for.\n     * @return {var|null} the row's model data.\n     */\n    _getDataFromRow : function(row) {\n      return this.__lookupTable.getItem(row);\n    },\n\n    /**\n     * Returns the selectable model items.\n     *\n     * @return {qx.data.Array} The selectable items.\n     */\n    _getSelectables : function() {\n      return this.__lookupTable;\n    },\n\n\n    /**\n     * Returns all open nodes.\n     *\n     * @internal\n     * @return {Array} All open nodes.\n     */\n    getOpenNodes : function() {\n      return this.__openNodes;\n    },\n\n\n    // Interface implementation\n    isNode : function(item) {\n      return qx.ui.tree.core.Util.isNode(item, this.getChildProperty());\n    },\n\n\n    // Interface implementation\n    getLevel : function(row) {\n      return this.__nestingLevel[row];\n    },\n\n\n    // Interface implementation\n    hasChildren : function(node) {\n      return qx.ui.tree.core.Util.hasChildren(node, this.getChildProperty(), !this.isShowLeafs());\n    },\n\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget : function() {\n      return this.getPane();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    // property apply\n    _applyRowHeight : function(value, old) {\n      this.getPane().getRowConfig().setDefaultItemSize(value);\n    },\n\n\n    // property apply\n    _applyOpenMode : function(value, old)\n    {\n      var pane = this.getPane();\n\n      //\"tap\", \"dbltap\", \"none\"\n      if (value === \"dbltap\") {\n        pane.addListener(\"cellDbltap\", this._onOpen, this);\n      } else if (value === \"tap\") {\n        pane.addListener(\"cellTap\", this._onOpen, this);\n      }\n\n      if (old === \"dbltap\") {\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\n      } else if (old === \"tap\") {\n        pane.removeListener(\"cellTap\", this._onOpen, this);\n      }\n    },\n\n\n    // property apply\n    _applyHideRoot : function(value, old) {\n      this.buildLookupTable();\n    },\n\n\n    // property apply\n    _applyShowTopLevelOpenCloseIcons : function(value, old) {\n      // force rebuild of the lookup table\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\n      this.getLookupTable().removeAll();\n      this.buildLookupTable();\n    },\n\n\n    // property apply\n    _applyShowLeafs : function(value, old) {\n      // force rebuild of the lookup table\n      // fixes https://github.com/qooxdoo/qooxdoo/issues/9128\n      this.getLookupTable().removeAll();\n      this.buildLookupTable();\n    },\n\n\n    // property apply\n    _applyChildProperty : function(value, old) {\n      this._provider.setChildProperty(value);\n    },\n\n\n    // property apply\n    _applyLabelPath : function(value, old) {\n      this._provider.setLabelPath(value);\n    },\n\n\n    // property apply\n    _applyIconPath : function(value, old) {\n      this._provider.setIconPath(value);\n    },\n\n\n    // property apply\n    _applyLabelOptions : function(value, old) {\n      this._provider.setLabelOptions(value);\n    },\n\n\n    // property apply\n    _applyIconOptions : function(value, old) {\n      this._provider.setIconOptions(value);\n    },\n\n\n    // property apply\n    _applyModel : function(value, old)\n    {\n      this.__openNodes = [];\n\n      if (value != null)\n      {\n        if (qx.core.Environment.get(\"qx.debug\"))\n        {\n          if (!qx.Class.hasMixin(value.constructor,\n                qx.data.marshal.MEventBubbling))\n          {\n            this.warn(\"The model item doesn't support the Mixin 'qx.data.\" +\n              \"marshal.MEventBubbling'. Therefore the tree can not update \" +\n              \"the view automatically on model changes.\");\n          }\n        }\n        value.addListener(\"changeBubble\", this._onChangeBubble, this);\n        this.__openNode(value);\n      }\n\n      // If the model changes, an existing OpenCloseController is no longer\n      // valid, so dispose it. The user should call openViaModelChanges again.\n      if (this._openCloseController) {\n        this._openCloseController.dispose();\n        this._openCloseController = null;\n      }\n\n      if (old != null) {\n        old.removeListener(\"changeBubble\", this._onChangeBubble, this);\n      }\n\n      this.__applyModelChanges();\n    },\n\n\n    // property apply\n    _applyDelegate : function(value, old)\n    {\n      this._provider.setDelegate(value);\n      this.buildLookupTable();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Event handler for the changeBubble event. The handler rebuild the lookup\n     * table when the child structure changed.\n     *\n     * @param event {qx.event.type.Data} The data event.\n     */\n    _onChangeBubble : function(event)\n    {\n      var data = event.getData();\n      var propertyName = data.name;\n      var index = propertyName.lastIndexOf(\".\");\n\n      if (index != -1) {\n        propertyName = propertyName.substr(index + 1, propertyName.length);\n      }\n\n      // only continue when the effected property is the child property\n      if ( propertyName.startsWith(this.getChildProperty()) )\n      {\n        var item = data.item;\n\n        if (qx.Class.isSubClassOf(item.constructor, qx.data.Array))\n        {\n          if (index === -1)\n          {\n            item = this.getModel();\n          }\n          else\n          {\n            var propertyChain = data.name.substr(0, index);\n            item = qx.data.SingleValueBinding.resolvePropertyChain(this.getModel(), propertyChain);\n          }\n        }\n\n        if (this.__lookupTable.indexOf(item) != -1) {\n          this.__applyModelChanges();\n        }\n      }\n    },\n\n\n    /**\n     * Event handler for the update event.\n     *\n     * @param event {qx.event.type.Event} The event.\n     */\n    _onUpdated : function(event)\n    {\n      if (this.__deferredCall == null) {\n        this.__deferredCall = new qx.util.DeferredCall(function() {\n          qx.ui.core.queue.Widget.add(this);\n        }, this);\n      }\n      this.__deferredCall.schedule();\n    },\n\n\n    /**\n     * Event handler to open/close tapped nodes.\n     *\n     * @param event {qx.ui.virtual.core.CellEvent} The cell tap event.\n     */\n    _onOpen : function(event)\n    {\n      var row = event.getRow();\n      var item = this.__lookupTable.getItem(row);\n\n      if (this.isNode(item))\n      {\n        if (this.isNodeOpen(item)) {\n          this.closeNode(item);\n        } else {\n          this.openNode(item);\n        }\n      }\n    },\n\n\n    /**\n     * Event handler for key press events. Open and close the current selected\n     * item on key left and right press. Jump to parent on key left if already\n     * closed.\n     *\n     * @param e {qx.event.type.KeySequence} key event.\n     */\n    _onKeyPress : function(e)\n    {\n      var selection = this.getSelection();\n\n      if (selection.getLength() > 0)\n      {\n        var item = selection.getItem(0);\n        var isNode = this.isNode(item);\n\n        switch(e.getKeyIdentifier())\n        {\n          case \"Left\":\n            if (isNode && this.isNodeOpen(item)) {\n              this.closeNode(item);\n            } else {\n              var parent = this.getParent(item);\n              if (parent != null) {\n                selection.splice(0, 1, parent);\n              }\n            }\n            break;\n\n          case \"Right\":\n            if (isNode && !this.isNodeOpen(item)) {\n              this.openNode(item);\n            }\n            else\n            {\n              if (isNode)\n              {\n                var children = item.get(this.getChildProperty());\n                if (children != null && children.getLength() > 0) {\n                  selection.splice(0, 1, children.getItem(0));\n                }\n              }\n            }\n            break;\n\n          case \"Enter\":\n          case \"Space\":\n            if (!isNode) {\n              return;\n            }\n            if (this.isNodeOpen(item)) {\n              this.closeNode(item);\n            } else {\n              this.openNode(item);\n            }\n            break;\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION HOOK METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n     * The hook method sets the first visible parent not as new selection when\n     * the current selection is empty and the selection mode is one selection.\n     *\n     * @param newSelection {Array} The newSelection which will be set to the selection manager.\n     */\n    _beforeApplySelection : function(newSelection)\n    {\n      if (newSelection.length === 0 &&\n          this.getSelectionMode() === \"one\")\n      {\n        var visibleParent = this.__getVisibleParent();\n        var row = this.getLookupTable().indexOf(visibleParent);\n\n        if (row >= 0) {\n          newSelection.push(row);\n        }\n      }\n    },\n\n\n    /**\n     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n     * The hook method builds the parent chain form the current selected item.\n     */\n    _afterApplySelection : function()\n    {\n      var selection = this.getSelection();\n\n      if (selection.getLength() > 0 &&\n          this.getSelectionMode() === \"one\") {\n        this.__buildParentChain(selection.getItem(0));\n      } else {\n        this.__parentChain = [];\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Helper method to apply model changes. Normally build the lookup table and\n     * apply the default selection.\n     */\n    __applyModelChanges : function()\n    {\n      this.buildLookupTable();\n      this._applyDefaultSelection();\n    },\n\n\n    /**\n     * Helper method to build the internal data structure.\n     *\n     * @internal\n     */\n    buildLookupTable : function()\n    {\n      if (\n        this.getModel() != null &&\n        (this.getChildProperty() == null || this.getLabelPath() == null)\n      )\n      {\n        throw new Error(\"Could not build tree, because 'childProperty' and/\" +\n          \"or 'labelPath' is 'null'!\");\n      }\n\n      this._itemWidth = 0;\n      var lookupTable = [];\n      this.__nestingLevel = [];\n      var nestedLevel = -1;\n\n      var root = this.getModel();\n      if (root != null)\n      {\n        if (!this.isHideRoot())\n        {\n          nestedLevel++;\n          lookupTable.push(root);\n          this.__nestingLevel.push(nestedLevel);\n        }\n\n        if (this.isNodeOpen(root))\n        {\n          var visibleChildren = this.__getVisibleChildrenFrom(root, nestedLevel);\n          lookupTable = lookupTable.concat(visibleChildren);\n        }\n      }\n\n      if (!qx.lang.Array.equals(this.__lookupTable.toArray(), lookupTable))\n      {\n        this._provider.removeBindings();\n        this.__lookupTable.removeAll();\n        this.__lookupTable.append(lookupTable);\n        this.__updateRowCount();\n        this._updateSelection();\n      }\n    },\n\n\n    /**\n     * Helper method to get all visible children form the passed parent node.\n     * The algorithm implements a depth-first search with a complexity:\n     * <code>O(n)</code> and <code>n</code> are all visible items.\n     *\n     * @param node {qx.core.Object} The start node to start search.\n     * @param nestedLevel {Integer} The nested level from the start node.\n     * @return {Array} All visible children form the parent.\n     */\n    __getVisibleChildrenFrom : function(node, nestedLevel)\n    {\n      var visible = [];\n      nestedLevel++;\n\n      if (!this.isNode(node)) {\n        return visible;\n      }\n\n      var children = node.get(this.getChildProperty());\n      if (children == null) {\n        return visible;\n      }\n\n      // clone children to keep original model unmodified\n      children = children.copy();\n\n      var delegate = this.getDelegate();\n      var filter = qx.util.Delegate.getMethod(delegate, \"filter\");\n      var sorter = qx.util.Delegate.getMethod(delegate, \"sorter\");\n\n      if (sorter != null) {\n        children.sort(sorter);\n      }\n\n      for (var i = 0; i < children.getLength(); i++)\n      {\n        var child = children.getItem(i);\n\n        if (filter && !filter(child)) {\n          continue;\n        }\n\n        if (this.isNode(child))\n        {\n          this.__nestingLevel.push(nestedLevel);\n          visible.push(child);\n\n          if (this.isNodeOpen(child))\n          {\n            var visibleChildren = this.__getVisibleChildrenFrom(child, nestedLevel);\n            visible = visible.concat(visibleChildren);\n          }\n        }\n        else\n        {\n          if (this.isShowLeafs())\n          {\n            this.__nestingLevel.push(nestedLevel);\n            visible.push(child);\n          }\n        }\n      }\n\n      // dispose children clone\n      children.dispose();\n\n      return visible;\n    },\n\n\n    /**\n     * Helper method to set the node to the open nodes data structure when it\n     * is not included.\n     *\n     * @param node {qx.core.Object} Node to set to open nodes.\n     */\n    __openNode : function(node)\n    {\n      if (!this.__openNodes.includes(node)) {\n        this.__openNodes.push(node);\n        this.fireDataEvent(\"open\", node);\n      }\n    },\n\n\n    /**\n     * Helper method to set the target node and all his parents to the open\n     * nodes data structure. The algorithm implements a depth-first search with\n     * a complexity: <code>O(n)</code> and <code>n</code> are all model items.\n     *\n     * @param startNode {qx.core.Object} Start (root) node to search.\n     * @param targetNode {qx.core.Object} Target node to open (and his parents).\n     * @return {Boolean} <code>True</code> when the targetNode and his\n     *  parents could opened, <code>false</code> otherwise.\n     */\n    __openNodeAndAllParents : function(startNode, targetNode)\n    {\n      if (startNode === targetNode)\n      {\n        this.__openNode(targetNode);\n        return true;\n      }\n\n      if (!this.isNode(startNode)) {\n        return false;\n      }\n\n      var children = startNode.get(this.getChildProperty());\n      if (children == null) {\n        return false;\n      }\n\n      for (var i = 0; i < children.getLength(); i++)\n      {\n        var child = children.getItem(i);\n        var result = this.__openNodeAndAllParents(child, targetNode);\n\n        if (result === true)\n        {\n          this.__openNode(child);\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Helper method to update the row count.\n     */\n    __updateRowCount : function()\n    {\n      this.getPane().getRowConfig().setItemCount(this.__lookupTable.getLength());\n      this.getPane().fullUpdate();\n    },\n\n\n    /**\n     * Helper method to get the parent node. Node! This only works with leaf and\n     * nodes which are in the internal lookup table.\n     *\n     * @param item {qx.core.Object} Node or leaf to get parent.\n     * @return {qx.core.Object|null} The parent note or <code>null</code> when\n     *   no parent found.\n     *\n     * @internal\n     */\n    getParent : function(item)\n    {\n      var index = this.__lookupTable.indexOf(item);\n      if (index < 0) {\n        return null;\n      }\n\n      var level = this.__nestingLevel[index];\n      while(index > 0)\n      {\n        index--;\n        var levelBefore = this.__nestingLevel[index];\n        if (levelBefore < level) {\n          return this.__lookupTable.getItem(index);\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Builds the parent chain form the passed item.\n     *\n     * @param item {var} Item to build parent chain.\n     */\n    __buildParentChain : function(item)\n    {\n      this.__parentChain = [];\n      var parent = this.getParent(item);\n      while(parent != null)\n      {\n        this.__parentChain.unshift(parent);\n        parent = this.getParent(parent);\n      }\n    },\n\n\n    /**\n     * Return the first visible parent node from the last selected node.\n     *\n     * @return {var} The first visible node.\n     */\n    __getVisibleParent : function()\n    {\n      if (this.__parentChain == null) {\n        return this.getModel();\n      }\n\n      var lookupTable = this.getLookupTable();\n      var parent = this.__parentChain.pop();\n\n      while(parent != null)\n      {\n        if (lookupTable.contains(parent)) {\n          return parent;\n        }\n        parent = this.__parentChain.pop();\n      }\n      return this.getModel();\n    }\n  },\n\n\n  destruct : function()\n  {\n    if (this._openCloseController) {\n      this._openCloseController.dispose();\n    }\n\n    var pane = this.getPane();\n    if (pane != null)\n    {\n      if (pane.hasListener(\"cellDbltap\")) {\n        pane.removeListener(\"cellDbltap\", this._onOpen, this);\n      }\n      if (pane.hasListener(\"cellTap\")) {\n        pane.removeListener(\"cellTap\", this._onOpen, this);\n      }\n    }\n\n    if (!qx.core.ObjectRegistry.inShutDown && this.__deferredCall != null)\n    {\n      this.__deferredCall.cancel();\n      this.__deferredCall.dispose();\n    }\n\n    var model = this.getModel();\n    if (model != null) {\n      model.removeListener(\"changeBubble\", this._onChangeBubble, this);\n    }\n\n    this._layer.removeListener(\"updated\", this._onUpdated, this);\n    this._layer.destroy();\n    this._provider.dispose();\n    this.__lookupTable.dispose();\n\n    this._layer = this._provider = this.__lookupTable = this.__openNodes =\n      this.__deferredCall = null;\n  }\n});\n"
  ]
}