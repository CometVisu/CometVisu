{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/tree/core/AbstractTreeItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "tree",
    "core",
    "AbstractItem",
    "type",
    "construct",
    "label",
    "__children",
    "properties",
    "parent",
    "check",
    "nullable",
    "members",
    "__childrenContainer",
    "getTree",
    "treeItem",
    "getParent",
    "getLayoutParent",
    "scroll",
    "ScrollPane",
    "_applyOpen",
    "value",
    "old",
    "hasChildren",
    "getChildrenContainer",
    "setVisibility",
    "_shouldShowOpenSymbol",
    "open",
    "getChildControl",
    "getRootOpenClose",
    "getHideRoot",
    "getRoot",
    "isOpenable",
    "_updateIndent",
    "getLevel",
    "level",
    "addState",
    "state",
    "children",
    "_getChildren",
    "i",
    "l",
    "length",
    "child",
    "removeState",
    "container",
    "Composite",
    "layout",
    "VBox",
    "set",
    "visibility",
    "isOpen",
    "hasChildrenContainer",
    "getParentChildrenContainer",
    "getChildren",
    "getItems",
    "recursive",
    "invisible",
    "ignoreFirst",
    "items",
    "addChildren",
    "concat",
    "chl",
    "recursiveAddToWidgetQueue",
    "queue",
    "Widget",
    "add",
    "__addChildrenToParent",
    "_addAfter",
    "varargs",
    "arguments",
    "oldParent",
    "remove",
    "setParent",
    "push",
    "fireNonBubblingEvent",
    "event",
    "Data",
    "addAt",
    "index",
    "nextItem",
    "addBefore",
    "addAfter",
    "lang",
    "Array",
    "insertAt",
    "before",
    "indexOf",
    "after",
    "addAtBegin",
    "warn",
    "treeItemChildContainer",
    "removeAt",
    "item",
    "removeAll",
    "destruct",
    "_disposeArray",
    "_disposeObjects",
    "AbstractTreeItem"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;AAQAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,IAAX,CAAgBC,YAD3B;AAEEC,IAAAA,IAAI,EAAG,UAFT;AAKEC,IAAAA,SAAS,EAAG,mBAASC,KAAT,EACZ;AACE,0DAAqBA,KAArB;AAEA,WAAKC,UAAL,GAAkB,EAAlB;AACD,KAVH;AAaEC,IAAAA,UAAU,EACV;AACE;;;AAGAC,MAAAA,MAAM,EACN;AACEC,QAAAA,KAAK,EAAG,kCADV;AAEEC,QAAAA,QAAQ,EAAG;AAFb;AALF,KAdF;AA0BEC,IAAAA,OAAO,EACP;AACEL,MAAAA,UAAU,EAAG,IADf;AAEEM,MAAAA,mBAAmB,EAAG,IAFxB;;AAKE;;;;;;AAMAC,MAAAA,OAAO,EAAG,mBACV;AACE,YAAIC,QAAQ,GAAG,IAAf;;AACA,eAAOA,QAAQ,CAACC,SAAT,EAAP,EAA6B;AAC3BD,UAAAA,QAAQ,GAAGA,QAAQ,CAACC,SAAT,EAAX;AACD;;AAED,YAAIf,IAAI,GAAGc,QAAQ,CAACE,eAAT,KAA6BF,QAAQ,CAACE,eAAT,GAA2BA,eAA3B,EAA7B,GAA4E,CAAvF;;AACA,YAAIhB,IAAI,IAAIA,IAAI,YAAYR,EAAE,CAACO,EAAH,CAAME,IAAN,CAAWgB,MAAX,CAAkBC,UAA9C,EAA0D;AACxD,iBAAOlB,IAAI,CAACgB,eAAL,EAAP;AACD;;AACD,eAAO,IAAP;AACD,OAvBH;AA0BE;AACAG,MAAAA,UAAU,EAAG,oBAASC,KAAT,EAAgBC,GAAhB,EACb;AACE,YAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,eAAKC,oBAAL,GAA4BC,aAA5B,CAA0CJ,KAAK,GAAG,SAAH,GAAe,UAA9D;AACD;;AAED,8EAAqBA,KAArB,EAA4BC,GAA5B;AACD,OAlCH;;AAoCE;;;;;AAMA;AACAI,MAAAA,qBAAqB,EAAG,iCACxB;AACE,YAAIC,IAAI,GAAG,KAAKC,eAAL,CAAqB,MAArB,EAA6B,IAA7B,CAAX;;AACA,YAAI,CAACD,IAAL,EAAW;AACT,iBAAO,KAAP;AACD;;AAED,YAAI1B,IAAI,GAAG,KAAKa,OAAL,EAAX;;AACA,YAAI,CAACb,IAAI,CAAC4B,gBAAL,EAAL,EACA;AACE,cAAI5B,IAAI,CAAC6B,WAAL,EAAJ,EACA;AACE,gBAAI7B,IAAI,CAAC8B,OAAL,MAAkB,KAAKf,SAAL,EAAtB,EAAwC;AACtC,qBAAO,KAAP;AACD;AACF,WALD,MAOA;AACE,gBAAIf,IAAI,CAAC8B,OAAL,MAAkB,IAAtB,EAA4B;AAC1B,qBAAO,KAAP;AACD;AACF;AACF;;AAED,eAAO,KAAKC,UAAL,EAAP;AACD,OApEH;AAuEE;AACAC,MAAAA,aAAa,EAAG,yBAChB;AACE,YAAI,CAAC,KAAKnB,OAAL,EAAL,EAAqB;AACnB;AACD;;AAED;AACD,OA/EH;AAkFE;AACAoB,MAAAA,QAAQ,EAAG,oBACX;AACE,YAAIjC,IAAI,GAAG,KAAKa,OAAL,EAAX;;AACA,YAAI,CAACb,IAAL,EAAW;AACT;AACD;;AAED,YAAIc,QAAQ,GAAG,IAAf;AACA,YAAIoB,KAAK,GAAG,CAAC,CAAb;;AAEA,eAAOpB,QAAP,EACA;AACEA,UAAAA,QAAQ,GAAGA,QAAQ,CAACC,SAAT,EAAX;AACAmB,UAAAA,KAAK,IAAI,CAAT;AACD,SAbH,CAeE;;;AACA,YAAIlC,IAAI,CAAC6B,WAAL,EAAJ,EAAwB;AACtBK,UAAAA,KAAK,IAAI,CAAT;AACD;;AAED,YAAI,CAAClC,IAAI,CAAC4B,gBAAL,EAAL,EAA8B;AAC5BM,UAAAA,KAAK,IAAI,CAAT;AACD;;AAED,eAAOA,KAAP;AACD,OA7GH;;AAgHE;;;;;AAMA;AACAC,MAAAA,QAAQ,EAAG,kBAASC,KAAT,EACX;AACE,4EAAqBA,KAArB;;AAEA,YAAIC,QAAQ,GAAG,KAAKC,YAAL,EAAf;;AACA,aAAK,IAAIC,CAAC,GAAC,CAAN,EAAQC,CAAC,GAACH,QAAQ,CAACI,MAAxB,EAAgCF,CAAC,GAACC,CAAlC,EAAqCD,CAAC,EAAtC,EACA;AACE,cAAIG,KAAK,GAAGL,QAAQ,CAACE,CAAD,CAApB;;AACA,cAAIG,KAAK,CAACP,QAAV,EAAoB;AAClBE,YAAAA,QAAQ,CAACE,CAAD,CAAR,CAAYJ,QAAZ,CAAqBC,KAArB;AACD;AACF;AACF,OAnIH;AAsIE;AACAO,MAAAA,WAAW,EAAG,qBAASP,KAAT,EACd;AACE,+EAAqBA,KAArB;;AAEA,YAAIC,QAAQ,GAAG,KAAKC,YAAL,EAAf;;AACA,aAAK,IAAIC,CAAC,GAAC,CAAN,EAAQC,CAAC,GAACH,QAAQ,CAACI,MAAxB,EAAgCF,CAAC,GAACC,CAAlC,EAAqCD,CAAC,EAAtC,EACA;AACE,cAAIG,KAAK,GAAGL,QAAQ,CAACE,CAAD,CAApB;;AACA,cAAIG,KAAK,CAACC,WAAV,EAAuB;AACrBN,YAAAA,QAAQ,CAACE,CAAD,CAAR,CAAYI,WAAZ,CAAwBP,KAAxB;AACD;AACF;AACF,OAnJH;;AAsJE;;;;;;AAMA;;;;;;AAMAb,MAAAA,oBAAoB,EAAG,gCACvB;AACE,YAAI,CAAC,KAAKX,mBAAV,EACA;AACE,eAAKA,mBAAL,GAA2B,IAAIpB,EAAE,CAACO,EAAH,CAAM6C,SAAN,CAAgBC,SAApB,CAA8B,IAAIrD,EAAE,CAACO,EAAH,CAAM+C,MAAN,CAAaC,IAAjB,EAA9B,EAAuDC,GAAvD,CAA2D;AACpFC,YAAAA,UAAU,EAAG,KAAKC,MAAL,KAAgB,SAAhB,GAA4B;AAD2C,WAA3D,CAA3B;AAGD;;AAED,eAAO,KAAKtC,mBAAZ;AACD,OA5KH;;AA+KE;;;;;AAKAuC,MAAAA,oBAAoB,EAAG,gCAAW;AAChC,eAAO,KAAKvC,mBAAZ;AACD,OAtLH;;AAyLE;;;;;;;AAOAwC,MAAAA,0BAA0B,EAAG,sCAC7B;AACE,YAAI,KAAKrC,SAAL,EAAJ,EAAsB;AACpB,iBAAO,KAAKA,SAAL,GAAiBQ,oBAAjB,EAAP;AACD,SAFD,MAEO,IAAI,KAAKP,eAAL,EAAJ,EAA4B;AACjC,iBAAO,KAAKA,eAAL,EAAP;AACD,SAFM,MAEA;AACL,iBAAO,IAAP;AACD;AACF,OAzMH;;AA4ME;;;;;;AAMA;;;;;;;;AAQAqC,MAAAA,WAAW,EAAG,uBAAW;AACvB,eAAO,KAAK/C,UAAZ;AACD,OA5NH;AA+NE;AACAgB,MAAAA,WAAW,EAAG,uBAAW;AACvB,eAAO,KAAKhB,UAAL,GAAkB,KAAKA,UAAL,CAAgBmC,MAAhB,GAAyB,CAA3C,GAA+C,KAAtD;AACD,OAlOH;;AAqOE;;;;;;;;;;;AAWAa,MAAAA,QAAQ,EAAG,kBAASC,SAAT,EAAoBC,SAApB,EAA+BC,WAA/B,EACX;AACE,YAAIA,WAAW,KAAK,KAApB,EAA2B;AACzB,cAAIC,KAAK,GAAG,EAAZ;AACD,SAFD,MAEO;AACL,cAAIA,KAAK,GAAG,CAAC,IAAD,CAAZ;AACD;;AAED,YAAIC,WAAW,GACb,KAAKrC,WAAL,OACCkC,SAAS,KAAK,KAAd,IAAuB,KAAKN,MAAL,EADxB,CADF;;AAIA,YAAIS,WAAJ,EACA;AACE,cAAItB,QAAQ,GAAG,KAAKgB,WAAL,EAAf;;AACA,cAAIE,SAAS,KAAK,KAAlB,EACA;AACEG,YAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAavB,QAAb,CAAR;AACD,WAHD,MAKA;AACE,iBAAK,IAAIE,CAAC,GAAC,CAAN,EAASsB,GAAG,GAACxB,QAAQ,CAACI,MAA3B,EAAmCF,CAAC,GAACsB,GAArC,EAA0CtB,CAAC,EAA3C,EAA+C;AAC7CmB,cAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAavB,QAAQ,CAACE,CAAD,CAAR,CAAYe,QAAZ,CAAqBC,SAArB,EAAgCC,SAAhC,EAA2C,KAA3C,CAAb,CAAR;AACD;AACF;AACF;;AACD,eAAOE,KAAP;AACD,OA3QH;;AA8QE;;;;;;AAMAI,MAAAA,yBAAyB,EAAG,qCAC5B;AACE,YAAIzB,QAAQ,GAAG,KAAKiB,QAAL,CAAc,IAAd,EAAoB,IAApB,EAA0B,KAA1B,CAAf;;AACA,aAAK,IAAIf,CAAC,GAAC,CAAN,EAASC,CAAC,GAACH,QAAQ,CAACI,MAAzB,EAAiCF,CAAC,GAACC,CAAnC,EAAsCD,CAAC,EAAvC,EAA2C;AACzC/C,UAAAA,EAAE,CAACO,EAAH,CAAME,IAAN,CAAW8D,KAAX,CAAiBC,MAAjB,CAAwBC,GAAxB,CAA4B5B,QAAQ,CAACE,CAAD,CAApC;AACD;AACF,OA1RH;;AA6RE;;;AAGA2B,MAAAA,qBAAqB,EAAG,iCACxB;AACE,YAAI,KAAKd,0BAAL,EAAJ,EAAuC;AACrC,eAAKA,0BAAL,GAAkCe,SAAlC,CAA4C,KAAK5C,oBAAL,EAA5C,EAAyE,IAAzE;AACD;AACF,OArSH;;AAwSE;;;;;AAKA0C,MAAAA,GAAG,EAAG,aAASG,OAAT,EACN;AACE,YAAIxB,SAAS,GAAG,KAAKrB,oBAAL,EAAhB;AACA,YAAIvB,IAAI,GAAG,KAAKa,OAAL,EAAX;;AAGA,aAAK,IAAI0B,CAAC,GAAC,CAAN,EAASC,CAAC,GAAC6B,SAAS,CAAC5B,MAA1B,EAAkCF,CAAC,GAACC,CAApC,EAAuCD,CAAC,EAAxC,EACA;AACE,cAAIzB,QAAQ,GAAGuD,SAAS,CAAC9B,CAAD,CAAxB;AAEA,cAAI+B,SAAS,GAAGxD,QAAQ,CAACC,SAAT,EAAhB;;AACA,cAAIuD,SAAJ,EAAe;AACbA,YAAAA,SAAS,CAACC,MAAV,CAAiBzD,QAAjB;AACD;;AAEDA,UAAAA,QAAQ,CAAC0D,SAAT,CAAmB,IAAnB;AACA,cAAIlD,WAAW,GAAG,KAAKA,WAAL,EAAlB;AAEAsB,UAAAA,SAAS,CAACqB,GAAV,CAAcnD,QAAd;;AAEA,cAAIA,QAAQ,CAACQ,WAAT,EAAJ,EAA4B;AAC1BsB,YAAAA,SAAS,CAACqB,GAAV,CAAcnD,QAAQ,CAACS,oBAAT,EAAd;AACD;;AACD,eAAKjB,UAAL,CAAgBmE,IAAhB,CAAqB3D,QAArB;;AAEA,cAAI,CAACQ,WAAL,EAAkB;AAChB,iBAAK4C,qBAAL;AACD;;AAED,cAAIlE,IAAJ,EACA;AACEc,YAAAA,QAAQ,CAACgD,yBAAT;AACA9D,YAAAA,IAAI,CAAC0E,oBAAL,CAA0B,SAA1B,EAAqClF,EAAE,CAACmF,KAAH,CAASxE,IAAT,CAAcyE,IAAnD,EAAyD,CAAC9D,QAAD,CAAzD;AACD;AACF;;AACD,YAAId,IAAJ,EAAU;AACRR,UAAAA,EAAE,CAACO,EAAH,CAAME,IAAN,CAAW8D,KAAX,CAAiBC,MAAjB,CAAwBC,GAAxB,CAA4B,IAA5B;AACD;AACF,OAnVH;;AAsVE;;;;;;AAMAY,MAAAA,KAAK,EAAG,eAAS/D,QAAT,EAAmBgE,KAAnB,EACR;AAQE,YAAIA,KAAK,IAAI,KAAKxE,UAAL,CAAgBmC,MAA7B,EACA;AACE,eAAKwB,GAAL,CAASnD,QAAT;AACA;AACD;;AAED,YAAIwD,SAAS,GAAGxD,QAAQ,CAACC,SAAT,EAAhB;;AACA,YAAIuD,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACC,MAAV,CAAiBzD,QAAjB;AACD;;AAED,YAAI8B,SAAS,GAAG,KAAKrB,oBAAL,EAAhB;AAEAT,QAAAA,QAAQ,CAAC0D,SAAT,CAAmB,IAAnB;AACA,YAAIlD,WAAW,GAAG,KAAKA,WAAL,EAAlB;AAEA,YAAIyD,QAAQ,GAAG,KAAKzE,UAAL,CAAgBwE,KAAhB,CAAf;AACAlC,QAAAA,SAAS,CAACoC,SAAV,CAAoBlE,QAApB,EAA8BiE,QAA9B;;AAEA,YAAIjE,QAAQ,CAACQ,WAAT,EAAJ,EAA4B;AAC1BsB,UAAAA,SAAS,CAACqC,QAAV,CAAmBnE,QAAQ,CAACS,oBAAT,EAAnB,EAAoDT,QAApD;AACD;;AACDtB,QAAAA,EAAE,CAAC0F,IAAH,CAAQC,KAAR,CAAcC,QAAd,CAAuB,KAAK9E,UAA5B,EAAwCQ,QAAxC,EAAkDgE,KAAlD;;AAEA,YAAI,CAACxD,WAAL,EAAkB;AAChB,eAAK4C,qBAAL;AACD;;AAED,YAAI,KAAKrD,OAAL,EAAJ,EACA;AACEC,UAAAA,QAAQ,CAACgD,yBAAT;AACAtE,UAAAA,EAAE,CAACO,EAAH,CAAME,IAAN,CAAW8D,KAAX,CAAiBC,MAAjB,CAAwBC,GAAxB,CAA4B,IAA5B;AACD;AACF,OAtYH;;AAyYE;;;;;;AAMAe,MAAAA,SAAS,EAAG,mBAASlE,QAAT,EAAmBuE,MAAnB,EACZ;AAKE;AACA;AACA,YAAIf,SAAS,GAAGxD,QAAQ,CAACC,SAAT,EAAhB;;AACA,YAAIuD,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACC,MAAV,CAAiBzD,QAAjB;AACD;;AAED,aAAK+D,KAAL,CAAW/D,QAAX,EAAqB,KAAKR,UAAL,CAAgBgF,OAAhB,CAAwBD,MAAxB,CAArB;AACD,OA7ZH;;AAgaE;;;;;;AAMAJ,MAAAA,QAAQ,EAAG,kBAASnE,QAAT,EAAmByE,KAAnB,EACX;AAKE;AACA;AACA,YAAIjB,SAAS,GAAGxD,QAAQ,CAACC,SAAT,EAAhB;;AACA,YAAIuD,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACC,MAAV,CAAiBzD,QAAjB;AACD;;AAED,aAAK+D,KAAL,CAAW/D,QAAX,EAAqB,KAAKR,UAAL,CAAgBgF,OAAhB,CAAwBC,KAAxB,IAA+B,CAApD;AACD,OApbH;;AAubE;;;;;AAKAC,MAAAA,UAAU,EAAG,oBAAS1E,QAAT,EAAmB;AAC9B,aAAK+D,KAAL,CAAW/D,QAAX,EAAqB,CAArB;AACD,OA9bH;;AAicE;;;;;AAKAyD,MAAAA,MAAM,EAAG,gBAASH,OAAT,EACT;AACE,aAAK,IAAI7B,CAAC,GAAC,CAAN,EAASC,CAAC,GAAC6B,SAAS,CAAC5B,MAA1B,EAAkCF,CAAC,GAACC,CAApC,EAAuCD,CAAC,EAAxC,EACA;AACE,cAAIzB,QAAQ,GAAGuD,SAAS,CAAC9B,CAAD,CAAxB;;AACA,cAAI,KAAKjC,UAAL,CAAgBgF,OAAhB,CAAwBxE,QAAxB,KAAqC,CAAC,CAA1C,EAA6C;AAC3C,iBAAK2E,IAAL,CAAU,6BAA2B3E,QAA3B,GAAoC,yCAA9C;AACA;AACD;;AAED,cAAI8B,SAAS,GAAG,KAAKrB,oBAAL,EAAhB;;AAEA,cAAIT,QAAQ,CAACqC,oBAAT,EAAJ,EAAqC;AACnC,gBAAIuC,sBAAsB,GAAG5E,QAAQ,CAACS,oBAAT,EAA7B;;AACA,gBAAIqB,SAAS,CAACS,WAAV,GAAwBiC,OAAxB,CAAgCI,sBAAhC,KAA2D,CAA/D,EAAkE;AAChE;AACA9C,cAAAA,SAAS,CAAC2B,MAAV,CAAiBmB,sBAAjB;AACD;AACF;;AACDlG,UAAAA,EAAE,CAAC0F,IAAH,CAAQC,KAAR,CAAcZ,MAAd,CAAqB,KAAKjE,UAA1B,EAAsCQ,QAAtC;AAEAA,UAAAA,QAAQ,CAAC0D,SAAT,CAAmB,IAAnB;AACA5B,UAAAA,SAAS,CAAC2B,MAAV,CAAiBzD,QAAjB;AACD;;AAED,YAAId,IAAI,GAAG,KAAKa,OAAL,EAAX;;AACA,YAAIb,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAAC0E,oBAAL,CAA0B,YAA1B,EAAwClF,EAAE,CAACmF,KAAH,CAASxE,IAAT,CAAcyE,IAAtD,EAA4D,CAAC9D,QAAD,CAA5D;AACD;;AAEDtB,QAAAA,EAAE,CAACO,EAAH,CAAME,IAAN,CAAW8D,KAAX,CAAiBC,MAAjB,CAAwBC,GAAxB,CAA4B,IAA5B;AACD,OAreH;;AAweE;;;;;AAKA0B,MAAAA,QAAQ,EAAG,kBAASb,KAAT,EACX;AACE,YAAIc,IAAI,GAAG,KAAKtF,UAAL,CAAgBwE,KAAhB,CAAX;;AACA,YAAIc,IAAJ,EAAU;AACR,eAAKrB,MAAL,CAAYqB,IAAZ;AACD;AACF,OAnfH;;AAsfE;;;AAGAC,MAAAA,SAAS,EAAG,qBACZ;AACE;AACA,YAAIxD,QAAQ,GAAG,KAAK/B,UAAL,CAAgBsD,MAAhB,EAAf;;AACA,aAAK,IAAIrB,CAAC,GAAC,KAAKjC,UAAL,CAAgBmC,MAAhB,GAAuB,CAAlC,EAAqCF,CAAC,IAAE,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,eAAKgC,MAAL,CAAY,KAAKjE,UAAL,CAAgBiC,CAAhB,CAAZ;AACD;;AACD,eAAOF,QAAP;AACD;AAjgBH,KA3BF;AAgiBEyD,IAAAA,QAAQ,EAAG,oBACX;AACE,WAAKC,aAAL,CAAmB,YAAnB;;AACA,WAAKC,eAAL,CAAqB,qBAArB;AACD;AApiBH,GADA;AA7BAxG,EAAAA,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,IAAX,CAAgBgG,gBAAhB,CAAiCtG,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * The AbstractTreeItem serves as a common superclass for the {@link\n * qx.ui.tree.TreeFile} and {@link qx.ui.tree.TreeFolder} classes.\n *\n * @childControl label {qx.ui.basic.Label} label of the tree item\n * @childControl icon {qx.ui.basic.Image} icon of the tree item\n * @childControl open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree\n */\nqx.Class.define(\"qx.ui.tree.core.AbstractTreeItem\",\n{\n  extend : qx.ui.tree.core.AbstractItem,\n  type : \"abstract\",\n\n\n  construct : function(label)\n  {\n    this.base(arguments, label);\n\n    this.__children = [];\n  },\n\n\n  properties :\n  {\n    /**\n     * The parent tree folder.\n     */\n    parent :\n    {\n      check : \"qx.ui.tree.core.AbstractTreeItem\",\n      nullable : true\n    }\n  },\n\n\n  members :\n  {\n    __children : null,\n    __childrenContainer : null,\n\n\n    /**\n     * Returns the tree the tree item is connected to. If the item is not part of\n     * a tree <code>null</code> will be returned.\n     *\n     * @return {qx.ui.tree.Tree|null} The item's tree or <code>null</code>.\n     */\n    getTree : function()\n    {\n      var treeItem = this;\n      while (treeItem.getParent()) {\n        treeItem = treeItem.getParent();\n      }\n\n      var tree = treeItem.getLayoutParent() ? treeItem.getLayoutParent().getLayoutParent() : 0;\n      if (tree && tree instanceof qx.ui.core.scroll.ScrollPane) {\n        return tree.getLayoutParent();\n      }\n      return null;\n    },\n\n\n    // property apply\n    _applyOpen : function(value, old)\n    {\n      if (this.hasChildren()) {\n        this.getChildrenContainer().setVisibility(value ? \"visible\" : \"excluded\");\n      }\n\n      this.base(arguments, value, old);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INDENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _shouldShowOpenSymbol : function()\n    {\n      var open = this.getChildControl(\"open\", true);\n      if (!open) {\n        return false;\n      }\n\n      var tree = this.getTree();\n      if (!tree.getRootOpenClose())\n      {\n        if (tree.getHideRoot())\n        {\n          if (tree.getRoot() == this.getParent()) {\n            return false;\n          }\n        }\n        else\n        {\n          if (tree.getRoot() == this) {\n            return false;\n          }\n        }\n      }\n\n      return this.isOpenable();\n    },\n\n\n    // overridden\n    _updateIndent : function()\n    {\n      if (!this.getTree()) {\n        return;\n      }\n\n      this.base(arguments);\n    },\n\n\n    // overridden\n    getLevel : function()\n    {\n      var tree = this.getTree();\n      if (!tree) {\n        return;\n      }\n\n      var treeItem = this;\n      var level = -1;\n\n      while (treeItem)\n      {\n        treeItem = treeItem.getParent();\n        level += 1;\n      }\n\n      // don't count the hidden root node in the tree widget\n      if (tree.getHideRoot()) {\n        level -= 1;\n      }\n\n      if (!tree.getRootOpenClose()) {\n        level -= 1;\n      }\n\n      return level;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      STATE HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    addState : function(state)\n    {\n      this.base(arguments, state);\n\n      var children = this._getChildren();\n      for (var i=0,l=children.length; i<l; i++)\n      {\n        var child = children[i];\n        if (child.addState) {\n          children[i].addState(state);\n        }\n      }\n    },\n\n\n    // overridden\n    removeState : function(state)\n    {\n      this.base(arguments, state);\n\n      var children = this._getChildren();\n      for (var i=0,l=children.length; i<l; i++)\n      {\n        var child = children[i];\n        if (child.removeState) {\n          children[i].removeState(state);\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN CONTAINER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the widget, which acts as container for the child items.\n     * This widget must have a vertical box layout.\n     *\n     * @return {qx.ui.core.Widget} The children container\n     */\n    getChildrenContainer : function()\n    {\n      if (!this.__childrenContainer)\n      {\n        this.__childrenContainer = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n          visibility : this.isOpen() ? \"visible\" : \"excluded\"\n        });\n      }\n\n      return this.__childrenContainer;\n    },\n\n\n    /**\n     * Whether the tree item has a children container\n     *\n     * @return {Boolean} Whether it has a children container\n     */\n    hasChildrenContainer : function() {\n      return this.__childrenContainer;\n    },\n\n\n    /**\n     * Get the children container of the item's parent. This function will return\n     * <code>null</code>, if the item does not have a parent or is not the root\n     * item.\n     *\n     * @return {qx.ui.core.Widget} The parent's children container.\n     */\n    getParentChildrenContainer : function()\n    {\n      if (this.getParent()) {\n        return this.getParent().getChildrenContainer();\n      } else if (this.getLayoutParent()) {\n        return this.getLayoutParent();\n      } else {\n        return null;\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get all child items.\n     *\n     * Note: Don not modify the returned array, since this function does not\n     * return a copy!\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} An array of all child items.\n     */\n    getChildren : function() {\n      return this.__children;\n    },\n\n\n    // overridden\n    hasChildren : function() {\n      return this.__children ? this.__children.length > 0 : false;\n    },\n\n\n    /**\n     * Returns all children of the folder.\n     *\n     * @param recursive {Boolean ? true} whether children of subfolder should be\n     *     included\n     * @param invisible {Boolean ? true} whether invisible children should be\n     *     included\n     * @param ignoreFirst {Boolean ? true} Whether the current treeItem should\n     *     be excluded from the list.\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} list of children\n     */\n    getItems : function(recursive, invisible, ignoreFirst)\n    {\n      if (ignoreFirst !== false) {\n        var items = [];\n      } else {\n        var items = [this];\n      }\n\n      var addChildren =\n        this.hasChildren() &&\n        (invisible !== false || this.isOpen());\n\n      if (addChildren)\n      {\n        var children = this.getChildren();\n        if (recursive === false)\n        {\n          items = items.concat(children);\n        }\n        else\n        {\n          for (var i=0, chl=children.length; i<chl; i++) {\n            items = items.concat(children[i].getItems(recursive, invisible, false));\n          }\n        }\n      }\n      return items;\n    },\n\n\n    /**\n     * Adds this item and recursively all sub items to the widget queue to\n     * update the indentation.\n     *\n     * @internal\n     */\n    recursiveAddToWidgetQueue : function()\n    {\n      var children = this.getItems(true, true, false);\n      for (var i=0, l=children.length; i<l; i++) {\n        qx.ui.core.queue.Widget.add(children[i]);\n      }\n    },\n\n\n    /**\n     * Adds the item's children container to the parent's children container.\n     */\n    __addChildrenToParent : function()\n    {\n      if (this.getParentChildrenContainer()) {\n        this.getParentChildrenContainer()._addAfter(this.getChildrenContainer(), this);\n      }\n    },\n\n\n    /**\n     * Adds the passed tree items to the end of this item's children list.\n     *\n     * @param varargs {qx.ui.tree.core.AbstractTreeItem} variable number of tree items to add\n     */\n    add : function(varargs)\n    {\n      var container = this.getChildrenContainer();\n      var tree = this.getTree();\n\n\n      for (var i=0, l=arguments.length; i<l; i++)\n      {\n        var treeItem = arguments[i];\n\n        var oldParent = treeItem.getParent();\n        if (oldParent) {\n          oldParent.remove(treeItem);\n        }\n\n        treeItem.setParent(this);\n        var hasChildren = this.hasChildren();\n\n        container.add(treeItem);\n\n        if (treeItem.hasChildren()) {\n          container.add(treeItem.getChildrenContainer());\n        }\n        this.__children.push(treeItem);\n\n        if (!hasChildren) {\n          this.__addChildrenToParent();\n        }\n\n        if (tree)\n        {\n          treeItem.recursiveAddToWidgetQueue();\n          tree.fireNonBubblingEvent(\"addItem\", qx.event.type.Data, [treeItem]);\n        }\n      }\n      if (tree) {\n        qx.ui.core.queue.Widget.add(this);\n      }\n    },\n\n\n    /**\n     * Adds the tree item to the current item, at the given index.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} new tree item to insert\n     * @param index {Integer} position to insert into\n     */\n    addAt : function(treeItem, index)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assert(\n          index <= this.__children.length && index >= 0,\n          \"Invalid child index: \" + index\n        );\n      }\n\n      if (index == this.__children.length)\n      {\n        this.add(treeItem);\n        return;\n      }\n\n      var oldParent = treeItem.getParent();\n      if (oldParent) {\n        oldParent.remove(treeItem);\n      }\n\n      var container = this.getChildrenContainer();\n\n      treeItem.setParent(this);\n      var hasChildren = this.hasChildren();\n\n      var nextItem = this.__children[index];\n      container.addBefore(treeItem, nextItem);\n\n      if (treeItem.hasChildren()) {\n        container.addAfter(treeItem.getChildrenContainer(), treeItem);\n      }\n      qx.lang.Array.insertAt(this.__children, treeItem, index);\n\n      if (!hasChildren) {\n        this.__addChildrenToParent();\n      }\n\n      if (this.getTree())\n      {\n        treeItem.recursiveAddToWidgetQueue();\n        qx.ui.core.queue.Widget.add(this);\n      }\n    },\n\n\n    /**\n     * Add a tree item to this item before the existing child <code>before</code>.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\n     * @param before {qx.ui.tree.core.AbstractTreeItem} existing child to add the item before\n     */\n    addBefore : function(treeItem, before)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assert(this.__children.indexOf(before) >= 0);\n      }\n\n      // It's important to remove the item before the addAt is called\n      // otherwise the index calculation could be wrong\n      var oldParent = treeItem.getParent();\n      if (oldParent) {\n        oldParent.remove(treeItem);\n      }\n\n      this.addAt(treeItem, this.__children.indexOf(before));\n    },\n\n\n    /**\n     * Add a tree item to this item after the existing child <code>before</code>.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\n     * @param after {qx.ui.tree.core.AbstractTreeItem} existing child to add the item after\n     */\n    addAfter : function(treeItem, after)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assert(this.__children.indexOf(after) >= 0);\n      }\n\n      // It's important to remove the item before the addAt is called\n      // otherwise the index calculation could be wrong\n      var oldParent = treeItem.getParent();\n      if (oldParent) {\n        oldParent.remove(treeItem);\n      }\n\n      this.addAt(treeItem, this.__children.indexOf(after)+1);\n    },\n\n\n    /**\n     * Add a tree item as the first child of this item.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} tree item to add\n     */\n    addAtBegin : function(treeItem) {\n      this.addAt(treeItem, 0);\n    },\n\n\n    /**\n     * Removes the passed tree items from this item.\n     *\n     * @param varargs {qx.ui.tree.core.AbstractTreeItem} variable number of tree items to remove\n     */\n    remove : function(varargs)\n    {\n      for (var i=0, l=arguments.length; i<l; i++)\n      {\n        var treeItem = arguments[i];\n        if (this.__children.indexOf(treeItem) == -1) {\n          this.warn(\"Cannot remove treeitem '\"+treeItem+\"'. It is not a child of this tree item.\");\n          return;\n        }\n\n        var container = this.getChildrenContainer();\n\n        if (treeItem.hasChildrenContainer()) {\n          var treeItemChildContainer = treeItem.getChildrenContainer();\n          if (container.getChildren().indexOf(treeItemChildContainer) >= 0) {\n            // Sometimes not, see bug #3038\n            container.remove(treeItemChildContainer);\n          }\n        }\n        qx.lang.Array.remove(this.__children, treeItem);\n\n        treeItem.setParent(null);\n        container.remove(treeItem);\n      }\n\n      var tree = this.getTree();\n      if (tree) {\n        tree.fireNonBubblingEvent(\"removeItem\", qx.event.type.Data, [treeItem]);\n      }\n\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * Remove the child with the given child index.\n     *\n     * @param index {Integer} Index of the child to remove\n     */\n    removeAt : function(index)\n    {\n      var item = this.__children[index];\n      if (item) {\n        this.remove(item);\n      }\n    },\n\n\n    /**\n     * Remove all child items from this item.\n     */\n    removeAll : function()\n    {\n      // create a copy for returning\n      var children = this.__children.concat();\n      for (var i=this.__children.length-1; i>=0; i--) {\n        this.remove(this.__children[i]);\n      }\n      return children;\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._disposeArray(\"__children\");\n    this._disposeObjects(\"__childrenContainer\");\n  }\n});\n"
  ]
}