{
  "className": "qx.ui.tree.core.Util",
  "packageName": "qx.ui.tree.core",
  "name": "Util",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 80,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2013 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Christian Hagendorn (chris_schmidt)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This utility class implements some methods for the <code>VirtualTree</code>.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "isNode": {
      "location": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns if the passed item is a node or a leaf.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to check.",
            "paramName": "node",
            "description": " Node to check.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "childProperty {String} The property name to find the children.",
            "paramName": "childProperty",
            "description": " The property name to find the children.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when the passed item is a node,\n   </code>false</code> when it is a leaf.",
            "type": "Boolean",
            "description": " <code>True</code> when the passed item is a node,\n   </code>false</code> when it is a leaf."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasChildren": {
      "location": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the node has visible children or not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to check.",
            "paramName": "node",
            "description": " Node to check.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "childProperty {String} The property name to find the children.",
            "paramName": "childProperty",
            "description": " The property name to find the children.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "ignoreLeafs {Boolean?} Indicates whether leafs are ignored. This means when it is set to\n    <code>true</code> a node which contains only leafs has no children. The default value is <code>false</code>.",
            "paramName": "ignoreLeafs",
            "description": " Indicates whether leafs are ignored. This means when it is set to\n    <code>true</code> a node which contains only leafs has no children. The default value is <code>false</code>.",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when the node has visible children,\n   <code>false</code> otherwise.",
            "type": "Boolean",
            "description": " <code>True</code> when the node has visible children,\n   <code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}