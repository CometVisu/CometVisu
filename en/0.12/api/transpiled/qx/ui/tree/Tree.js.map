{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/tree/Tree.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "scroll",
    "AbstractScrollArea",
    "implement",
    "IMultiSelection",
    "form",
    "IModelSelection",
    "IField",
    "IForm",
    "include",
    "MMultiSelectionHandling",
    "MContentPadding",
    "MModelSelection",
    "MForm",
    "construct",
    "__content",
    "container",
    "Composite",
    "layout",
    "VBox",
    "set",
    "allowShrinkY",
    "allowGrowX",
    "getChildControl",
    "add",
    "initOpenMode",
    "initRootOpenClose",
    "addListener",
    "_onChangeSelection",
    "_onKeyPress",
    "events",
    "addItem",
    "removeItem",
    "properties",
    "openMode",
    "check",
    "init",
    "apply",
    "event",
    "themeable",
    "root",
    "nullable",
    "hideRoot",
    "rootOpenClose",
    "appearance",
    "refine",
    "focusable",
    "members",
    "SELECTION_MANAGER",
    "tree",
    "selection",
    "SelectionManager",
    "getChildrenContainer",
    "_applyRoot",
    "value",
    "old",
    "isDisposed",
    "remove",
    "hasChildren",
    "setVisibility",
    "getHideRoot",
    "recursiveAddToWidgetQueue",
    "_applyHideRoot",
    "getRoot",
    "_applyRootOpenClose",
    "_getContentPaddingTarget",
    "getNextNodeOf",
    "treeItem",
    "invisible",
    "isOpen",
    "getChildren",
    "parent",
    "getParent",
    "parentChildren",
    "index",
    "indexOf",
    "length",
    "getPreviousNodeOf",
    "folder",
    "children",
    "getNextSiblingOf",
    "siblings",
    "getPreviousSiblingOf",
    "getItems",
    "recursive",
    "getTreeItem",
    "widget",
    "AbstractTreeItem",
    "getLayoutParent",
    "_applyOpenMode",
    "removeListener",
    "_onOpen",
    "e",
    "getTarget",
    "isOpenable",
    "setOpen",
    "stopPropagation",
    "getData",
    "i",
    "item",
    "_getLeadItem",
    "getKeyIdentifier",
    "setSelection",
    "toggleOpen",
    "destruct",
    "_disposeObjects",
    "Tree"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;AAeAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,iBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MAAX,CAAkBC,kBAD7B;AAEEC,IAAAA,SAAS,EAAG,CACVX,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWI,eADD,EAEVZ,EAAE,CAACO,EAAH,CAAMM,IAAN,CAAWC,eAFD,EAGVd,EAAE,CAACO,EAAH,CAAMM,IAAN,CAAWE,MAHD,EAIVf,EAAE,CAACO,EAAH,CAAMM,IAAN,CAAWG,KAJD,CAFd;AAQEC,IAAAA,OAAO,EAAG,CACRjB,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWU,uBADH,EAERlB,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWW,eAFH,EAGRnB,EAAE,CAACO,EAAH,CAAMM,IAAN,CAAWO,eAHH,EAIRpB,EAAE,CAACO,EAAH,CAAMM,IAAN,CAAWQ,KAJH,CARZ;;AAgBE;;;;;AAOAC,IAAAA,SAAS,EAAG,qBACZ;AACE;AAEA,WAAKC,SAAL,GAAiB,IAAIvB,EAAE,CAACO,EAAH,CAAMiB,SAAN,CAAgBC,SAApB,CAA8B,IAAIzB,EAAE,CAACO,EAAH,CAAMmB,MAAN,CAAaC,IAAjB,EAA9B,EAAuDC,GAAvD,CAA2D;AAC1EC,QAAAA,YAAY,EAAE,KAD4D;AAE1EC,QAAAA,UAAU,EAAE;AAF8D,OAA3D,CAAjB;AAKA,WAAKC,eAAL,CAAqB,MAArB,EAA6BC,GAA7B,CAAiC,KAAKT,SAAtC;AAEA,WAAKU,YAAL;AACA,WAAKC,iBAAL;AAEA,WAAKC,WAAL,CAAiB,iBAAjB,EAAoC,KAAKC,kBAAzC,EAA6D,IAA7D;AACA,WAAKD,WAAL,CAAiB,UAAjB,EAA6B,KAAKE,WAAlC,EAA+C,IAA/C;AACD,KAvCH;;AA0CE;;;;;AAOAC,IAAAA,MAAM,EACN;AACE;;;;;AAKAC,MAAAA,OAAO,EAAG,oBANZ;;AAQE;;;;;AAKAC,MAAAA,UAAU,EAAG;AAbf,KAlDF;;AAmEE;;;;;AAMAC,IAAAA,UAAU,EACV;AACE;;;;AAIAC,MAAAA,QAAQ,EACR;AACEC,QAAAA,KAAK,EAAG,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CADV;AAEEC,QAAAA,IAAI,EAAG,QAFT;AAGEC,QAAAA,KAAK,EAAG,gBAHV;AAIEC,QAAAA,KAAK,EAAG,gBAJV;AAKEC,QAAAA,SAAS,EAAG;AALd,OANF;;AAcE;;;AAGAC,MAAAA,IAAI,EACJ;AACEL,QAAAA,KAAK,EAAG,kCADV;AAEEC,QAAAA,IAAI,EAAG,IAFT;AAGEK,QAAAA,QAAQ,EAAG,IAHb;AAIEH,QAAAA,KAAK,EAAG,YAJV;AAKED,QAAAA,KAAK,EAAG;AALV,OAlBF;;AA0BE;;;;AAIAK,MAAAA,QAAQ,EACR;AACEP,QAAAA,KAAK,EAAG,SADV;AAEEC,QAAAA,IAAI,EAAG,KAFT;AAGEC,QAAAA,KAAK,EAAE;AAHT,OA/BF;;AAqCE;;;;;;;AAOAM,MAAAA,aAAa,EACb;AACER,QAAAA,KAAK,EAAG,SADV;AAEEC,QAAAA,IAAI,EAAG,KAFT;AAGEC,QAAAA,KAAK,EAAG;AAHV,OA7CF;AAmDE;AACAO,MAAAA,UAAU,EACV;AACEC,QAAAA,MAAM,EAAE,IADV;AAEET,QAAAA,IAAI,EAAE;AAFR,OArDF;AA0DE;AACAU,MAAAA,SAAS,EACT;AACED,QAAAA,MAAM,EAAG,IADX;AAEET,QAAAA,IAAI,EAAG;AAFT;AA5DF,KA1EF;;AA6IE;;;;;AAMAW,IAAAA,OAAO,EACP;AACEhC,MAAAA,SAAS,EAAG,IADd;;AAGE;AACAiC,MAAAA,iBAAiB,EAAGxD,EAAE,CAACO,EAAH,CAAMkD,IAAN,CAAWC,SAAX,CAAqBC,gBAJ3C;;AAOE;;;;;;AAOA;;;;;;AAMAC,MAAAA,oBAAoB,EAAG,gCAAW;AAChC,eAAO,KAAKrC,SAAZ;AACD,OAtBH;AAyBE;AACAsC,MAAAA,UAAU,EAAG,oBAASC,KAAT,EAAgBC,GAAhB,EACb;AACE,YAAIvC,SAAS,GAAG,KAAKoC,oBAAL,EAAhB;;AAEA,YAAIG,GAAG,IAAI,CAACA,GAAG,CAACC,UAAJ,EAAZ,EACA;AACExC,UAAAA,SAAS,CAACyC,MAAV,CAAiBF,GAAjB;;AACA,cAAIA,GAAG,CAACG,WAAJ,EAAJ,EAAuB;AACrB1C,YAAAA,SAAS,CAACyC,MAAV,CAAiBF,GAAG,CAACH,oBAAJ,EAAjB;AACD;AACF;;AAED,YAAIE,KAAJ,EACA;AACEtC,UAAAA,SAAS,CAACQ,GAAV,CAAc8B,KAAd;;AACA,cAAIA,KAAK,CAACI,WAAN,EAAJ,EAAyB;AACvB1C,YAAAA,SAAS,CAACQ,GAAV,CAAc8B,KAAK,CAACF,oBAAN,EAAd;AACD;;AAEDE,UAAAA,KAAK,CAACK,aAAN,CAAoB,KAAKC,WAAL,KAAqB,UAArB,GAAkC,SAAtD;AACAN,UAAAA,KAAK,CAACO,yBAAN;AACD;AACF,OAhDH;AAmDE;AACAC,MAAAA,cAAc,EAAG,wBAASR,KAAT,EAAgBC,GAAhB,EACjB;AACE,YAAIf,IAAI,GAAG,KAAKuB,OAAL,EAAX;;AACA,YAAI,CAACvB,IAAL,EAAW;AACT;AACD;;AAEDA,QAAAA,IAAI,CAACmB,aAAL,CAAmBL,KAAK,GAAG,UAAH,GAAgB,SAAxC;AACAd,QAAAA,IAAI,CAACqB,yBAAL;AACD,OA7DH;AAgEE;AACAG,MAAAA,mBAAmB,EAAG,6BAASV,KAAT,EAAgBC,GAAhB,EACtB;AACE,YAAIf,IAAI,GAAG,KAAKuB,OAAL,EAAX;;AACA,YAAI,CAACvB,IAAL,EAAW;AACT;AACD;;AACDA,QAAAA,IAAI,CAACqB,yBAAL;AACD,OAxEH;;AA2EE;;;;;AAKAI,MAAAA,wBAAwB,EAAG,oCAAW;AACpC,eAAO,KAAKlD,SAAZ;AACD,OAlFH;;AAqFE;;;;;;AAOA;;;;;;;;;;AAUAmD,MAAAA,aAAa,EAAG,uBAASC,QAAT,EAAmBC,SAAnB,EAChB;AACE,YAAI,CAACA,SAAS,KAAK,KAAd,IAAuBD,QAAQ,CAACE,MAAT,EAAxB,KAA8CF,QAAQ,CAACT,WAAT,EAAlD,EAA0E;AACxE,iBAAOS,QAAQ,CAACG,WAAT,GAAuB,CAAvB,CAAP;AACD;;AAED,eAAOH,QAAP,EACA;AACE,cAAII,MAAM,GAAGJ,QAAQ,CAACK,SAAT,EAAb;;AACA,cAAI,CAACD,MAAL,EAAa;AACX,mBAAO,IAAP;AACD;;AAGD,cAAIE,cAAc,GAAGF,MAAM,CAACD,WAAP,EAArB;AACA,cAAII,KAAK,GAAGD,cAAc,CAACE,OAAf,CAAuBR,QAAvB,CAAZ;;AACA,cAAIO,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,GAAGD,cAAc,CAACG,MAAf,GAAsB,CAAhD,EAAmD;AACjD,mBAAOH,cAAc,CAACC,KAAK,GAAC,CAAP,CAArB;AACD;;AAEDP,UAAAA,QAAQ,GAAGI,MAAX;AACD;;AACD,eAAO,IAAP;AACD,OA7HH;;AAgIE;;;;;;;;;;AAUAM,MAAAA,iBAAiB,EAAG,2BAASV,QAAT,EAAmBC,SAAnB,EACpB;AACE,YAAIG,MAAM,GAAGJ,QAAQ,CAACK,SAAT,EAAb;;AACA,YAAI,CAACD,MAAL,EAAa;AACX,iBAAO,IAAP;AACD;;AAED,YAAI,KAAKX,WAAL,EAAJ,EACA;AACE,cAAIW,MAAM,IAAI,KAAKR,OAAL,EAAd,EACA;AACE,gBAAIQ,MAAM,CAACD,WAAP,GAAqB,CAArB,KAA2BH,QAA/B,EAAyC;AACvC,qBAAO,IAAP;AACD;AACF;AACF,SARD,MAUA;AACE,cAAIA,QAAQ,IAAI,KAAKJ,OAAL,EAAhB,EAAgC;AAC9B,mBAAO,IAAP;AACD;AACF;;AAED,YAAIU,cAAc,GAAGF,MAAM,CAACD,WAAP,EAArB;AACA,YAAII,KAAK,GAAGD,cAAc,CAACE,OAAf,CAAuBR,QAAvB,CAAZ;;AACA,YAAIO,KAAK,GAAG,CAAZ,EACA;AACE,cAAII,MAAM,GAAGL,cAAc,CAACC,KAAK,GAAC,CAAP,CAA3B;;AACA,iBAAO,CAACN,SAAS,KAAK,KAAd,IAAuBU,MAAM,CAACT,MAAP,EAAxB,KAA4CS,MAAM,CAACpB,WAAP,EAAnD,EACA;AACE,gBAAIqB,QAAQ,GAAGD,MAAM,CAACR,WAAP,EAAf;AACAQ,YAAAA,MAAM,GAAGC,QAAQ,CAACA,QAAQ,CAACH,MAAT,GAAgB,CAAjB,CAAjB;AACD;;AACD,iBAAOE,MAAP;AACD,SATD,MAWA;AACE,iBAAOP,MAAP;AACD;AACF,OAjLH;;AAoLE;;;;;;;;;;AAUAS,MAAAA,gBAAgB,EAAG,0BAASb,QAAT,EACnB;AACE,YAAIA,QAAQ,IAAI,KAAKJ,OAAL,EAAhB,EAAgC;AAC9B,iBAAO,IAAP;AACD;;AAED,YAAIQ,MAAM,GAAGJ,QAAQ,CAACK,SAAT,EAAb;AACA,YAAIS,QAAQ,GAAGV,MAAM,CAACD,WAAP,EAAf;AACA,YAAII,KAAK,GAAGO,QAAQ,CAACN,OAAT,CAAiBR,QAAjB,CAAZ;;AAEA,YAAIO,KAAK,GAAGO,QAAQ,CAACL,MAAT,GAAgB,CAA5B,EAA+B;AAC7B,iBAAOK,QAAQ,CAACP,KAAK,GAAC,CAAP,CAAf;AACD;;AAED,eAAO,IAAP;AACD,OA7MH;;AAgNE;;;;;;;;;;AAUAQ,MAAAA,oBAAoB,EAAG,8BAASf,QAAT,EACvB;AACE,YAAIA,QAAQ,IAAI,KAAKJ,OAAL,EAAhB,EAAgC;AAC9B,iBAAO,IAAP;AACD;;AAED,YAAIQ,MAAM,GAAGJ,QAAQ,CAACK,SAAT,EAAb;AACA,YAAIS,QAAQ,GAAGV,MAAM,CAACD,WAAP,EAAf;AACA,YAAII,KAAK,GAAGO,QAAQ,CAACN,OAAT,CAAiBR,QAAjB,CAAZ;;AAEA,YAAIO,KAAK,GAAG,CAAZ,EAAe;AACb,iBAAOO,QAAQ,CAACP,KAAK,GAAC,CAAP,CAAf;AACD;;AAED,eAAO,IAAP;AACD,OAzOH;;AA4OE;;;;;;;;;AASAS,MAAAA,QAAQ,EAAG,kBAASC,SAAT,EAAoBhB,SAApB,EAA+B;AACxC,YAAI,KAAKL,OAAL,MAAkB,IAAtB,EAA4B;AAC1B,iBAAO,KAAKA,OAAL,GAAeoB,QAAf,CAAwBC,SAAxB,EAAmChB,SAAnC,EAA8C,KAAKR,WAAL,EAA9C,CAAP;AACD,SAFD,MAGK;AACH,iBAAO,EAAP;AACD;AACF,OA5PH;;AA+PE;;;;;AAKAU,MAAAA,WAAW,EAAG,uBAAW;AACvB,YAAI,KAAKP,OAAL,MAAkB,IAAtB,EAA4B;AAC1B,iBAAO,CAAC,KAAKA,OAAL,EAAD,CAAP;AACD,SAFD,MAGK;AACH,iBAAO,EAAP;AACD;AACF,OA3QH;;AA8QE;;;;;;AAOA;;;;;;;;AAQAsB,MAAAA,WAAW,EAAG,qBAASC,MAAT,EACd;AACE,eAAOA,MAAP,EACA;AACE,cAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,mBAAO,IAAP;AACD;;AAED,cAAIA,MAAM,YAAY9F,EAAE,CAACO,EAAH,CAAMkD,IAAN,CAAWjD,IAAX,CAAgBuF,gBAAtC,EAAwD;AACtD,mBAAOD,MAAP;AACD;;AAEDA,UAAAA,MAAM,GAAGA,MAAM,CAACE,eAAP,EAAT;AACD;;AAED,eAAO,IAAP;AACD,OA7SH;AAgTE;AACAC,MAAAA,cAAc,EAAG,wBAASnC,KAAT,EAAgBC,GAAhB,EACjB;AACE,YAAIA,GAAG,IAAI,KAAX,EAAkB;AAChB,eAAKmC,cAAL,CAAoB,KAApB,EAA2B,KAAKC,OAAhC,EAAyC,IAAzC;AACD,SAFD,MAEO,IAAIpC,GAAG,IAAI,QAAX,EAAqB;AAC1B,eAAKmC,cAAL,CAAoB,QAApB,EAA8B,KAAKC,OAAnC,EAA4C,IAA5C;AACD;;AAED,YAAIrC,KAAK,IAAI,KAAb,EAAoB;AAClB,eAAK3B,WAAL,CAAiB,KAAjB,EAAwB,KAAKgE,OAA7B,EAAsC,IAAtC;AACD,SAFD,MAEO,IAAIrC,KAAK,IAAI,QAAb,EAAuB;AAC5B,eAAK3B,WAAL,CAAiB,QAAjB,EAA2B,KAAKgE,OAAhC,EAAyC,IAAzC;AACD;AACF,OA9TH;;AAiUE;;;;;;AAMAA,MAAAA,OAAO,EAAG,iBAASC,CAAT,EACV;AACE,YAAIzB,QAAQ,GAAG,KAAKkB,WAAL,CAAiBO,CAAC,CAACC,SAAF,EAAjB,CAAf;;AACA,YAAI,CAAC1B,QAAD,IAAY,CAACA,QAAQ,CAAC2B,UAAT,EAAjB,EAAwC;AACtC;AACD;;AAED3B,QAAAA,QAAQ,CAAC4B,OAAT,CAAiB,CAAC5B,QAAQ,CAACE,MAAT,EAAlB;AACAuB,QAAAA,CAAC,CAACI,eAAF;AACD,OAhVH;;AAmVE;;;;;;AAMApE,MAAAA,kBAAkB,EAAG,4BAASgE,CAAT,EAAY;AAC/B,YAAI1C,SAAS,GAAG0C,CAAC,CAACK,OAAF,EAAhB,CAD+B,CAE/B;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhD,SAAS,CAAC0B,MAA9B,EAAsCsB,CAAC,EAAvC,EAA2C;AACzC,cAAIpB,MAAM,GAAG5B,SAAS,CAACgD,CAAD,CAAtB,CADyC,CAEzC;;AACA,iBAAOpB,MAAM,CAACN,SAAP,MAAsB,IAA7B,EAAmC;AACjCM,YAAAA,MAAM,GAAGA,MAAM,CAACN,SAAP,EAAT;AACAM,YAAAA,MAAM,CAACiB,OAAP,CAAe,IAAf;AACD;AACF;AACF,OApWH;;AAuWE;;;;;;;AAOAlE,MAAAA,WAAW,EAAG,qBAAS+D,CAAT,EACd;AACE,YAAIO,IAAI,GAAG,KAAKC,YAAL,EAAX;;AAEA,YAAID,IAAI,KAAK,IAAb,EACA;AACE,kBAAOP,CAAC,CAACS,gBAAF,EAAP;AAEE,iBAAK,MAAL;AACE,kBAAIF,IAAI,CAACL,UAAL,MAAqBK,IAAI,CAAC9B,MAAL,EAAzB,EAAwC;AACtC8B,gBAAAA,IAAI,CAACJ,OAAL,CAAa,KAAb;AACD,eAFD,MAEO,IAAII,IAAI,CAAC3B,SAAL,EAAJ,EAAsB;AAC3B,qBAAK8B,YAAL,CAAkB,CAACH,IAAI,CAAC3B,SAAL,EAAD,CAAlB;AACD;;AACD;;AAEF,iBAAK,OAAL;AACE,kBAAI2B,IAAI,CAACL,UAAL,MAAqB,CAACK,IAAI,CAAC9B,MAAL,EAA1B,EAAyC;AACvC8B,gBAAAA,IAAI,CAACJ,OAAL,CAAa,IAAb;AACD;;AACD;;AAEF,iBAAK,OAAL;AACA,iBAAK,OAAL;AACE,kBAAII,IAAI,CAACL,UAAL,EAAJ,EAAuB;AACrBK,gBAAAA,IAAI,CAACI,UAAL;AACD;;AACD;AArBJ;AAuBD;AACF;AA5YH,KApJF;;AAoiBE;;;;;AAOAC,IAAAA,QAAQ,EAAG,oBAAW;AACpB,WAAKC,eAAL,CAAqB,WAArB;AACD;AA7iBH,GADA;AAtCAjH,EAAAA,EAAE,CAACO,EAAH,CAAMkD,IAAN,CAAWyD,IAAX,CAAgB/G,aAAhB,GAAgCA,aAAhC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n     * Christian Hagendorn (chris_schmidt)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * The Tree class implements a tree widget, with collapsible and expandable\n * container nodes and terminal leaf nodes. You instantiate a Tree object and\n * then assign the tree a root folder using the {@link #root} property.\n *\n * If you don't want to show the root item, you can hide it with the\n * {@link #hideRoot} property.\n *\n * The handling of <b>selections</b> within a tree is somewhat distributed\n * between the root tree object and the attached {@link qx.ui.tree.selection.SelectionManager}.\n * To get the currently selected element of a tree use the tree {@link #getSelection}\n * method and tree {@link #setSelection} to set it. The TreeSelectionManager\n * handles more coarse-grained issues like providing {@link #selectAll} and\n * {@link #resetSelection} methods.\n */\nqx.Class.define(\"qx.ui.tree.Tree\",\n{\n  extend : qx.ui.core.scroll.AbstractScrollArea,\n  implement : [\n    qx.ui.core.IMultiSelection,\n    qx.ui.form.IModelSelection,\n    qx.ui.form.IField,\n    qx.ui.form.IForm\n  ],\n  include : [\n    qx.ui.core.MMultiSelectionHandling,\n    qx.ui.core.MContentPadding,\n    qx.ui.form.MModelSelection,\n    qx.ui.form.MForm\n  ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__content = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n      allowShrinkY: false,\n      allowGrowX: true\n    });\n\n    this.getChildControl(\"pane\").add(this.__content);\n\n    this.initOpenMode();\n    this.initRootOpenClose();\n\n    this.addListener(\"changeSelection\", this._onChangeSelection, this);\n    this.addListener(\"keypress\", this._onKeyPress, this);\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n\n  events :\n  {\n    /**\n     * This event is fired after a tree item was added to the tree. The\n     * {@link qx.event.type.Data#getData} method of the event returns the\n     * added item.\n     */\n    addItem : \"qx.event.type.Data\",\n\n    /**\n     * This event is fired after a tree item has been removed from the tree.\n     * The {@link qx.event.type.Data#getData} method of the event returns the\n     * removed item.\n     */\n    removeItem : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Control whether tap or double tap should open or close the tapped\n     * folder.\n     */\n    openMode :\n    {\n      check : [\"tap\", \"dbltap\", \"none\"],\n      init : \"dbltap\",\n      apply : \"_applyOpenMode\",\n      event : \"changeOpenMode\",\n      themeable : true\n    },\n\n    /**\n     * The root tree item of the tree to display\n     */\n    root :\n    {\n      check : \"qx.ui.tree.core.AbstractTreeItem\",\n      init : null,\n      nullable : true,\n      event : \"changeRoot\",\n      apply : \"_applyRoot\"\n    },\n\n    /**\n     * Hide the root (Tree) node.  This differs from the visibility property in\n     * that this property hides *only* the root node, not the node's children.\n     */\n    hideRoot :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply :\"_applyHideRoot\"\n    },\n\n    /**\n     * Whether the Root should have an open/close button.  This may also be\n     * used in conjunction with the hideNode property to provide for virtual root\n     * nodes.  In the latter case, be very sure that the virtual root nodes are\n     * expanded programmatically, since there will be no open/close button for the\n     * user to open them.\n     */\n    rootOpenClose :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyRootOpenClose\"\n    },\n\n    // overridden\n    appearance :\n    {\n      refine: true,\n      init: \"tree\"\n    },\n\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __content : null,\n\n    /** @type {Class} Pointer to the selection manager to use */\n    SELECTION_MANAGER : qx.ui.tree.selection.SelectionManager,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Get the widget, which contains the root tree item. This widget must\n     * have a vertical box layout.\n     *\n     * @return {qx.ui.core.Widget} the children container\n     */\n    getChildrenContainer : function() {\n      return this.__content;\n    },\n\n\n    // property apply\n    _applyRoot : function(value, old)\n    {\n      var container = this.getChildrenContainer();\n\n      if (old && !old.isDisposed())\n      {\n        container.remove(old);\n        if (old.hasChildren()) {\n          container.remove(old.getChildrenContainer());\n        }\n      }\n\n      if (value)\n      {\n        container.add(value);\n        if (value.hasChildren()) {\n          container.add(value.getChildrenContainer());\n        }\n\n        value.setVisibility(this.getHideRoot() ? \"excluded\" : \"visible\");\n        value.recursiveAddToWidgetQueue();\n      }\n    },\n\n\n    // property apply\n    _applyHideRoot : function(value, old)\n    {\n      var root = this.getRoot();\n      if (!root) {\n        return;\n      }\n\n      root.setVisibility(value ? \"excluded\" : \"visible\");\n      root.recursiveAddToWidgetQueue();\n    },\n\n\n    // property apply\n    _applyRootOpenClose : function(value, old)\n    {\n      var root = this.getRoot();\n      if (!root) {\n        return;\n      }\n      root.recursiveAddToWidgetQueue();\n    },\n\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget : function() {\n      return this.__content;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION MANAGER API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Get the tree item following the given item in the tree hierarchy.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the item after\n     * @param invisible {Boolean?true} Whether invisible/closed tree items\n     *     should be returned as well.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item after the given item. May be\n     *     <code>null</code> if the item is the last item.\n     */\n    getNextNodeOf : function(treeItem, invisible)\n    {\n      if ((invisible !== false || treeItem.isOpen()) && treeItem.hasChildren()) {\n        return treeItem.getChildren()[0];\n      }\n\n      while (treeItem)\n      {\n        var parent = treeItem.getParent();\n        if (!parent) {\n          return null;\n        }\n\n\n        var parentChildren = parent.getChildren();\n        var index = parentChildren.indexOf(treeItem);\n        if (index > -1 && index < parentChildren.length-1) {\n          return parentChildren[index+1];\n        }\n\n        treeItem = parent;\n      }\n      return null;\n    },\n\n\n    /**\n     * Get the tree item preceding the given item in the tree hierarchy.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the item before\n     * @param invisible {Boolean?true} Whether invisible/closed tree items\n     *     should be returned as well.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item before the given item. May be\n     *     <code>null</code> if the given item is the tree's root.\n     */\n    getPreviousNodeOf : function(treeItem, invisible)\n    {\n      var parent = treeItem.getParent();\n      if (!parent) {\n        return null;\n      }\n\n      if (this.getHideRoot())\n      {\n        if (parent == this.getRoot())\n        {\n          if (parent.getChildren()[0] == treeItem) {\n            return null;\n          }\n        }\n      }\n      else\n      {\n        if (treeItem == this.getRoot()) {\n          return null;\n        }\n      }\n\n      var parentChildren = parent.getChildren();\n      var index = parentChildren.indexOf(treeItem);\n      if (index > 0)\n      {\n        var folder = parentChildren[index-1];\n        while ((invisible !== false || folder.isOpen()) && folder.hasChildren())\n        {\n          var children = folder.getChildren();\n          folder = children[children.length-1];\n        }\n        return folder;\n      }\n      else\n      {\n        return parent;\n      }\n    },\n\n\n    /**\n     * Get the tree item's next sibling.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the following\n     * sibling of.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item following the given item. May be\n     *     <code>null</code> if the given item is the last in it's nesting\n     *     level.\n     */\n    getNextSiblingOf : function(treeItem)\n    {\n      if (treeItem == this.getRoot()) {\n        return null;\n      }\n\n      var parent = treeItem.getParent();\n      var siblings = parent.getChildren();\n      var index = siblings.indexOf(treeItem);\n\n      if (index < siblings.length-1) {\n        return siblings[index+1];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Get the tree item's previous sibling.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the previous\n     * sibling of.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item preceding the given item. May be\n     *     <code>null</code> if the given item is the first in it's nesting\n     *     level.\n     */\n    getPreviousSiblingOf : function(treeItem)\n    {\n      if (treeItem == this.getRoot()) {\n        return null;\n      }\n\n      var parent = treeItem.getParent();\n      var siblings = parent.getChildren();\n      var index = siblings.indexOf(treeItem);\n\n      if (index > 0) {\n        return siblings[index-1];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Returns all children of the tree.\n     *\n     * @param recursive {Boolean ? false} whether children of subfolder should be\n     *     included\n     * @param invisible {Boolean ? true} whether invisible children should be\n     *     included\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} list of children\n     */\n    getItems : function(recursive, invisible) {\n      if (this.getRoot() != null) {\n        return this.getRoot().getItems(recursive, invisible, this.getHideRoot());\n      }\n      else {\n        return [];\n      }\n    },\n\n\n    /**\n     * Returns the tree's only \"external\" child, namely the root node.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} Array containing the root node\n     */\n    getChildren : function() {\n      if (this.getRoot() != null) {\n        return [this.getRoot()];\n      }\n      else {\n        return [];\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Returns the tree item, which contains the given widget.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to get the containing tree\n     *   item for.\n     * @return {qx.ui.tree.core.AbstractTreeItem|null} The tree item containing the widget. If the\n     *     widget is not inside of any tree item <code>null</code> is returned.\n     */\n    getTreeItem : function(widget)\n    {\n      while (widget)\n      {\n        if (widget == this) {\n          return null;\n        }\n\n        if (widget instanceof qx.ui.tree.core.AbstractTreeItem) {\n          return widget;\n        }\n\n        widget = widget.getLayoutParent();\n      }\n\n      return null;\n    },\n\n\n    // property apply\n    _applyOpenMode : function(value, old)\n    {\n      if (old == \"tap\") {\n        this.removeListener(\"tap\", this._onOpen, this);\n      } else if (old == \"dbltap\") {\n        this.removeListener(\"dbltap\", this._onOpen, this);\n      }\n\n      if (value == \"tap\") {\n        this.addListener(\"tap\", this._onOpen, this);\n      } else if (value == \"dbltap\") {\n        this.addListener(\"dbltap\", this._onOpen, this);\n      }\n    },\n\n\n    /**\n     * Event handler for tap events, which could change a tree item's open\n     * state.\n     *\n     * @param e {qx.event.type.Pointer} The tap event object\n     */\n    _onOpen : function(e)\n    {\n      var treeItem = this.getTreeItem(e.getTarget());\n      if (!treeItem ||!treeItem.isOpenable()) {\n        return;\n      }\n\n      treeItem.setOpen(!treeItem.isOpen());\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Event handler for changeSelection events, which opens all parent folders\n     * of the selected folders.\n     *\n     * @param e {qx.event.type.Data} The selection data event.\n     */\n    _onChangeSelection : function(e) {\n      var selection = e.getData();\n      // for every selected folder\n      for (var i = 0; i < selection.length; i++) {\n        var folder = selection[i];\n        // go up all parents and open them\n        while (folder.getParent() != null) {\n          folder = folder.getParent();\n          folder.setOpen(true);\n        }\n      }\n    },\n\n\n    /**\n     * Event handler for key press events. Open and close the current selected\n     * item on key left and right press. Jump to parent on key left if already\n     * closed.\n     *\n     * @param e {qx.event.type.KeySequence} key event.\n     */\n    _onKeyPress : function(e)\n    {\n      var item = this._getLeadItem();\n\n      if (item !== null)\n      {\n        switch(e.getKeyIdentifier())\n        {\n          case \"Left\":\n            if (item.isOpenable() && item.isOpen()) {\n              item.setOpen(false);\n            } else if (item.getParent()) {\n              this.setSelection([item.getParent()]);\n            }\n            break;\n\n          case \"Right\":\n            if (item.isOpenable() && !item.isOpen()) {\n              item.setOpen(true);\n            }\n            break;\n\n          case \"Enter\":\n          case \"Space\":\n            if (item.isOpenable()) {\n              item.toggleOpen();\n            }\n            break;\n        }\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n\n  destruct : function() {\n    this._disposeObjects(\"__content\");\n  }\n});\n"
  ]
}