{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/MFamily.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "familyGetFirstChild",
    "nodeReference",
    "node",
    "getTableModel",
    "getData",
    "Error",
    "children",
    "length",
    "familyGetLastChild",
    "familyGetNextSibling",
    "nodeId",
    "nodes",
    "myNodeId",
    "parentChildren",
    "parentNodeId",
    "i",
    "familyGetPrevSibling",
    "ui",
    "treevirtual",
    "MFamily"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A set of methods which may be used to retrieve various siblings of nodes.\n */\nqx.Mixin.define(\"qx.ui.treevirtual.MFamily\",\n{\n  members :\n  {\n    /**\n     * Get the first child of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the first child is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the first child.\n     */\n    familyGetFirstChild : function(nodeReference)\n    {\n      var node;\n\n      if (typeof(nodeReference) == \"object\")\n      {\n        node = nodeReference;\n      }\n      else if (typeof(nodeReference) == \"number\")\n      {\n        node = this.getTableModel().getData()[nodeReference];\n      }\n      else\n      {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      if (node.children.length > 0)\n      {\n        return node.children[0];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Get the last child of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the last child is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the last child.\n     */\n    familyGetLastChild : function(nodeReference)\n    {\n      var node;\n\n      if (typeof(nodeReference) == \"object\")\n      {\n        node = nodeReference;\n      }\n      else if (typeof(nodeReference) == \"number\")\n      {\n        node = this.getTableModel().getData()[nodeReference];\n      }\n      else\n      {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      if (node.children.length > 0)\n      {\n        return node.children[node.children.length - 1];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Get the next sibling of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the next sibling is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the next sibling.\n     */\n    familyGetNextSibling : function(nodeReference)\n    {\n      var node;\n      var nodeId;\n      var nodes = this.getTableModel().getData();\n\n      if (typeof(nodeReference) == \"object\")\n      {\n        node = nodeReference;\n      }\n      else if (typeof(nodeReference) == \"number\")\n      {\n        nodeId = nodeReference;\n        node = nodes[nodeId];\n      }\n      else\n      {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      var myNodeId = node.nodeId;\n      var parentChildren = nodes[node.parentNodeId].children;\n\n      // Find this node id in our parent's children array\n      for (var i=0; i<parentChildren.length; i++)\n      {\n        // Is this our id?\n        if (parentChildren[i] == myNodeId)\n        {\n          // Yup.  Ensure there is a next sibling.\n          if (i < parentChildren.length - 1)\n          {\n            // There is.  Return the next sibling.\n            return parentChildren[i + 1];\n          }\n\n          // There's no next sibling\n          return null;\n        }\n      }\n    },\n\n\n    /**\n     * Get the previous sibling of the specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the previous sibling is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Integer}\n     *   The node id of the previous sibling.\n     */\n    familyGetPrevSibling : function(nodeReference)\n    {\n      var node;\n      var nodeId;\n      var nodes = this.getTableModel().getData();\n\n      if (typeof(nodeReference) == \"object\")\n      {\n        node = nodeReference;\n      }\n      else if (typeof(nodeReference) == \"number\")\n      {\n        nodeId = nodeReference;\n        node = nodes[nodeId];\n      }\n      else\n      {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      var myNodeId = node.nodeId;\n      var parentChildren = nodes[node.parentNodeId].children;\n\n      // Find this node id in our parent's children array\n      for (var i=0; i<parentChildren.length; i++)\n      {\n        // Is this our id?\n        if (parentChildren[i] == myNodeId)\n        {\n          // Yup.  Ensure there is a previous sibling.\n          if (i > 0)\n          {\n            // There is.  Return the previous sibling.\n            return parentChildren[i - 1];\n          }\n\n          // There's no previous sibling\n          return null;\n        }\n      }\n    }\n  }\n});\n"
  ]
}