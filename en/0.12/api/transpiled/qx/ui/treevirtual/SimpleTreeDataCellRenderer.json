{
  "className": "qx.ui.treevirtual.SimpleTreeDataCellRenderer",
  "packageName": "qx.ui.treevirtual",
  "name": "SimpleTreeDataCellRenderer",
  "superClass": "qx.ui.table.cellrenderer.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 38,
        "column": 0
      },
      "end": {
        "line": 741,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007 Derrell Lipman\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Derrell Lipman (derrell)\n David Perez Carmona (david-perez)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>A data cell renderer for the tree column of a simple tree\n This cell renderer has provisions for subclasses to easily extend the\n appearance of the tree. If the tree should contain images, labels,\n etc. before the indentation, the subclass should override the method\n _addExtraContentBeforeIndentation(). Similarly, content can be added before\n the icon by overriding _addExtraContentBeforeIcon(), and before the label\n by overriding _addExtraContentBeforeLabel().\n Each of these overridden methods that calls _addImage() can provide, as\n part of the map passed to _addImage(), a member called \"tooltip\" which\n contains the tool tip to present when the mouse is hovered over the image.\n If this class is subclassed to form a new cell renderer, an instance of it\n must be provided, via the 'custom' parameter, to the TreeVirtual\n constructor.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 43,
        "column": 14
      },
      "end": {
        "line": 62,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "statics": {
    "__icon": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>File names of each of the tree icons</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__bVirgin": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether we have not yet requested pre-loading of images</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__preloadImages": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request preloading of images so they appear immediately upon rendering</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "properties": {
    "useTreeLines": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether lines linking tree children shall be drawn on the tree\n if the theme supports tree lines.</p>"
          }
        ]
      },
      "name": "useTreeLines",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "excludeFirstLevelTreeLines": {
      "location": {
        "start": {
          "line": 149,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When true, exclude only the first-level tree lines, creating,\n effectively, multiple unrelated root nodes.</p>"
          }
        ]
      },
      "name": "excludeFirstLevelTreeLines",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "alwaysShowOpenCloseSymbol": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the open/close button should be displayed on a branch, even\n if the branch has no children.</p>"
          }
        ]
      },
      "name": "alwaysShowOpenCloseSymbol",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    }
  },
  "members": {
    "__am": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 177,
          "column": 15
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__tm": {
      "location": {
        "start": {
          "line": 178,
          "column": 4
        },
        "end": {
          "line": 178,
          "column": 15
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rm": {
      "location": {
        "start": {
          "line": 179,
          "column": 4
        },
        "end": {
          "line": 179,
          "column": 15
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 183,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "appearsIn": [
        "qx.ui.table.cellrenderer.Abstract"
      ]
    },
    "_getCellStyle": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 200,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the CSS styles of the main div.",
            "type": "var",
            "description": " the CSS styles of the main div."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "appearsIn": [
        "qx.ui.table.cellrenderer.Abstract"
      ]
    },
    "_getContentHtml": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>overridden</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the inner HTML of the cell.",
            "type": "qx.ui.table.cellrenderer.String",
            "description": " the inner HTML of the cell."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "appearsIn": [
        "qx.ui.table.cellrenderer.Abstract"
      ]
    },
    "_addImage": {
      "location": {
        "start": {
          "line": 266,
          "column": 4
        },
        "end": {
          "line": 351,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an image to the tree.  This might be a visible icon or it may be\n part of the indentation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "imageInfo {Map}\n   How to display the image.  It optionally includes any of the\n   following:\n   <dl>\n     <dt>position {Map}</dt>\n     <dd>\n       If provided, a div is created to hold the image.  The div's top,\n       right, bottom, left, width, and/or height may be specified with\n       members of this map.  Each is expected to be an integer value.\n     </dd>\n     <dt>imageWidth, imageHeight</dt>\n     <dd>\n       The image's width and height.  These are used only if both are\n       specified.\n     </dd>\n   </dl>",
            "paramName": "imageInfo",
            "description": "\n   How to display the image.  It optionally includes any of the\n   following:\n   <dl>\n     <dt>position {Map}</dt>\n     <dd>\n       If provided, a div is created to hold the image.  The div's top,\n       right, bottom, left, width, and/or height may be specified with\n       members of this map.  Each is expected to be an integer value.\n     </dd>\n     <dt>imageWidth, imageHeight</dt>\n     <dd>\n       The image's width and height.  These are used only if both are\n       specified.\n     </dd>\n   </dl>",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}\n   The html for this image, possibly with a surrounding div (see\n   'position', above).",
            "type": "String",
            "description": "\n   The html for this image, possibly with a surrounding div (see\n   'position', above)."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addIndentation": {
      "location": {
        "start": {
          "line": 374,
          "column": 4
        },
        "end": {
          "line": 415,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add the indentation for this node of the tree.\n The indentation optionally includes tree lines.  Whether tree lines are\n used depends on (a) the properties 'useTreeLines' and\n 'excludeFirstLevelTreelines' within this class; and (b) the widget\n theme in use (some themes don't support tree lines).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "pos {Integer}\n   The position from the left edge of the column at which to render this\n   item.",
            "paramName": "pos",
            "description": "\n   The position from the left edge of the column at which to render this\n   item.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation.",
            "type": "Map",
            "description": "\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addIcon": {
      "location": {
        "start": {
          "line": 432,
          "column": 4
        },
        "end": {
          "line": 475,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add the icon for this node of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "pos {Integer}\n   The position from the left edge of the column at which to render this\n   item.",
            "paramName": "pos",
            "description": "\n   The position from the left edge of the column at which to render this\n   item.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}\n   The returned map contains an 'html' member which contains the html for\n   the icon, and a 'pos' member which is the starting position plus the\n   width of the icon.",
            "type": "Map",
            "description": "\n   The returned map contains an 'html' member which contains the html for\n   the icon, and a 'pos' member which is the starting position plus the\n   width of the icon."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addLabel": {
      "location": {
        "start": {
          "line": 493,
          "column": 4
        },
        "end": {
          "line": 522,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add the label for this node of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n   Additionally, if defined, the labelSpanStyle member is used to apply\n   style to the span containing the label.  (This member is for use by\n   subclasses; it's not otherwise used by this class.)",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n   Additionally, if defined, the labelSpanStyle member is used to apply\n   style to the span containing the label.  (This member is for use by\n   subclasses; it's not otherwise used by this class.)",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "pos {Integer}\n   The position from the left edge of the column at which to render this\n   item.",
            "paramName": "pos",
            "description": "\n   The position from the left edge of the column at which to render this\n   item.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}\n   The html for the label.",
            "type": "String",
            "description": "\n   The html for the label."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addExtraContentBeforeIndentation": {
      "location": {
        "start": {
          "line": 539,
          "column": 4
        },
        "end": {
          "line": 542,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds extra content just before the indentation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "pos {Integer}\n   The position from the left edge of the column at which to render this\n   item.",
            "paramName": "pos",
            "description": "\n   The position from the left edge of the column at which to render this\n   item.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation.",
            "type": "Map",
            "description": "\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addExtraContentBeforeIcon": {
      "location": {
        "start": {
          "line": 559,
          "column": 4
        },
        "end": {
          "line": 562,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds extra content just before the icon.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "pos {Integer}\n   The position from the left edge of the column at which to render this\n   item.",
            "paramName": "pos",
            "description": "\n   The position from the left edge of the column at which to render this\n   item.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation.",
            "type": "Map",
            "description": "\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addExtraContentBeforeLabel": {
      "location": {
        "start": {
          "line": 579,
          "column": 4
        },
        "end": {
          "line": 582,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds extra content just before the label.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} The information about the cell.\n      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": " The information about the cell.\n      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "pos {Integer}\n   The position from the left edge of the column at which to render this\n   item.",
            "paramName": "pos",
            "description": "\n   The position from the left edge of the column at which to render this\n   item.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation.",
            "type": "Map",
            "description": "\n   The returned map contains an 'html' member which contains the html for\n   the indentation, and a 'pos' member which is the starting position\n   plus the width of the indentation."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getIndentSymbol": {
      "location": {
        "start": {
          "line": 615,
          "column": 4
        },
        "end": {
          "line": 735,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determine the symbol to use for indentation of a tree row, at a\n particular column.  The indentation to use may be just white space or\n may be a tree line.  Tree lines come in numerous varieties, so the\n appropriate one is selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer}\n   The column of indentation being requested, zero-relative",
            "paramName": "column",
            "description": "\n   The column of indentation being requested, zero-relative",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "node {Node}\n   The node being displayed in the row.  The properties of a node are\n   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}",
            "paramName": "node",
            "description": "\n   The node being displayed in the row.  The properties of a node are\n   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}",
            "type": "Node"
          },
          {
            "name": "@param",
            "body": "bUseTreeLines {Boolean}\n   Whether to find an appropriate tree line icon, or simply provide\n   white space.",
            "paramName": "bUseTreeLines",
            "description": "\n   Whether to find an appropriate tree line icon, or simply provide\n   white space.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "bAlwaysShowOpenCloseSymbol {Boolean}\n   Whether to display the open/close icon for a node even if it has no\n   children.",
            "paramName": "bAlwaysShowOpenCloseSymbol",
            "description": "\n   Whether to display the open/close icon for a node even if it has no\n   children.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "bExcludeFirstLevelTreeLines {Boolean}\n   If bUseTreeLines is enabled, then further filtering of the left-most\n   tree line may be specified here.  If <i>true</i> then the left-most\n   tree line, between top-level siblings, will not be displayed.\n   If <i>false</i>, then the left-most tree line will be displayed\n   just like all of the other tree lines.",
            "paramName": "bExcludeFirstLevelTreeLines",
            "description": "\n   If bUseTreeLines is enabled, then further filtering of the left-most\n   tree line may be specified here.  If <i>true</i> then the left-most\n   tree line, between top-level siblings, will not be displayed.\n   If <i>false</i>, then the left-most tree line will be displayed\n   just like all of the other tree lines.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} map of image properties.",
            "type": "Map",
            "description": " map of image properties."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "reset"
    },
    "getDefaultCellStyle": {
      "type": "function",
      "name": "getDefaultCellStyle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>defaultCellStyle</code>.\n\nFor further details take a look at the property definition: {@link #defaultCellStyle}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for defaultCellStyle"
          }
        ]
      }
    },
    "setDefaultCellStyle": {
      "type": "function",
      "name": "setDefaultCellStyle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>defaultCellStyle</code>.\n\nFor further details take a look at the property definition: {@link #defaultCellStyle}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for defaultCellStyle"
          }
        ]
      }
    },
    "resetDefaultCellStyle": {
      "type": "function",
      "name": "resetDefaultCellStyle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "property": "reset"
    },
    "getUseTreeLines": {
      "type": "function",
      "name": "getUseTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useTreeLines</code>.\n\nFor further details take a look at the property definition: {@link #useTreeLines}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useTreeLines"
          }
        ]
      }
    },
    "isUseTreeLines": {
      "type": "function",
      "name": "isUseTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useTreeLines</code>.\n\nFor further details take a look at the property definition: {@link #useTreeLines}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useTreeLines"
          }
        ]
      }
    },
    "setUseTreeLines": {
      "type": "function",
      "name": "setUseTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useTreeLines</code>.\n\nFor further details take a look at the property definition: {@link #useTreeLines}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useTreeLines"
          }
        ]
      }
    },
    "resetUseTreeLines": {
      "type": "function",
      "name": "resetUseTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>useTreeLines</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #useTreeLines}."
          }
        ]
      }
    },
    "getExcludeFirstLevelTreeLines": {
      "type": "function",
      "name": "getExcludeFirstLevelTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>excludeFirstLevelTreeLines</code>.\n\nFor further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for excludeFirstLevelTreeLines"
          }
        ]
      }
    },
    "isExcludeFirstLevelTreeLines": {
      "type": "function",
      "name": "isExcludeFirstLevelTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>excludeFirstLevelTreeLines</code>.\n\nFor further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for excludeFirstLevelTreeLines"
          }
        ]
      }
    },
    "setExcludeFirstLevelTreeLines": {
      "type": "function",
      "name": "setExcludeFirstLevelTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>excludeFirstLevelTreeLines</code>.\n\nFor further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for excludeFirstLevelTreeLines"
          }
        ]
      }
    },
    "resetExcludeFirstLevelTreeLines": {
      "type": "function",
      "name": "resetExcludeFirstLevelTreeLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>excludeFirstLevelTreeLines</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #excludeFirstLevelTreeLines}."
          }
        ]
      }
    },
    "getAlwaysShowOpenCloseSymbol": {
      "type": "function",
      "name": "getAlwaysShowOpenCloseSymbol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alwaysShowOpenCloseSymbol</code>.\n\nFor further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for alwaysShowOpenCloseSymbol"
          }
        ]
      }
    },
    "isAlwaysShowOpenCloseSymbol": {
      "type": "function",
      "name": "isAlwaysShowOpenCloseSymbol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alwaysShowOpenCloseSymbol</code>.\n\nFor further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for alwaysShowOpenCloseSymbol"
          }
        ]
      }
    },
    "setAlwaysShowOpenCloseSymbol": {
      "type": "function",
      "name": "setAlwaysShowOpenCloseSymbol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alwaysShowOpenCloseSymbol</code>.\n\nFor further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for alwaysShowOpenCloseSymbol"
          }
        ]
      }
    },
    "resetAlwaysShowOpenCloseSymbol": {
      "type": "function",
      "name": "resetAlwaysShowOpenCloseSymbol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>alwaysShowOpenCloseSymbol</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #alwaysShowOpenCloseSymbol}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 738,
        "column": 13
      },
      "end": {
        "line": 740,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}