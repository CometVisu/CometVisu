{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/MTreePrimitive.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "statics",
    "Type",
    "LEAF",
    "BRANCH",
    "_addNode",
    "nodeArr",
    "parentNodeId",
    "label",
    "bOpened",
    "bHideOpenCloseButton",
    "type",
    "icon",
    "iconSelected",
    "nodeId",
    "parentNode",
    "Error",
    "ui",
    "treevirtual",
    "MTreePrimitive",
    "undefined",
    "length",
    "node",
    "bSelected",
    "bHideOpenClose",
    "children",
    "columnData",
    "push",
    "_getEmptyTree"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,IAAI,EACJ;AACEC,QAAAA,IAAI,EAAK,CADX;AAEEC,QAAAA,MAAM,EAAG;AAFX,OAHF;;AAQE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEAC,MAAAA,QAAQ,EAAG,kBAASC,OAAT,EACSC,YADT,EAESC,KAFT,EAGSC,OAHT,EAISC,oBAJT,EAKSC,IALT,EAMSC,IANT,EAOSC,YAPT,EAQSC,MART,EASX;AACE,YAAIC,UAAJ,CADF,CAGE;;AACA,YAAIR,YAAJ,EACA;AACEQ,UAAAA,UAAU,GAAGT,OAAO,CAACC,YAAD,CAApB;;AAEA,cAAI,CAACQ,UAAL,EACA;AACE,kBAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD,WANH,CAQE;;;AACA,cAAID,UAAU,CAACJ,IAAX,IAAmBhB,EAAE,CAACsB,EAAH,CAAMC,WAAN,CAAkBC,cAAlB,CAAiCjB,IAAjC,CAAsCC,IAA7D,EACA;AACE,kBAAM,IAAIa,KAAJ,CAAU,sCAAV,CAAN;AACD;AACF,SAdD,MAgBA;AACE;AACAD,UAAAA,UAAU,GAAGT,OAAO,CAAC,CAAD,CAApB;AACAC,UAAAA,YAAY,GAAG,CAAf;AACD,SAxBH,CA0BE;;;AACA,YAAII,IAAI,IAAIhB,EAAE,CAACsB,EAAH,CAAMC,WAAN,CAAkBC,cAAlB,CAAiCjB,IAAjC,CAAsCC,IAAlD,EACA;AACE;AACAM,UAAAA,OAAO,GAAG,KAAV;AACAC,UAAAA,oBAAoB,GAAG,KAAvB;AACD,SAhCH,CAkCE;;;AACA,YAAII,MAAM,KAAKM,SAAf,EACA;AACEN,UAAAA,MAAM,GAAGR,OAAO,CAACe,MAAjB;AACD,SAtCH,CAwCE;;;AACA,YAAIC,IAAI,GACR;AACEX,UAAAA,IAAI,EAAaA,IADnB;AAEEG,UAAAA,MAAM,EAAWA,MAFnB;AAGEP,UAAAA,YAAY,EAAKA,YAHnB;AAIEC,UAAAA,KAAK,EAAYA,KAJnB;AAKEe,UAAAA,SAAS,EAAQ,KALnB;AAMEd,UAAAA,OAAO,EAAUA,OANnB;AAOEe,UAAAA,cAAc,EAAGd,oBAPnB;AAQEE,UAAAA,IAAI,EAAaA,IARnB;AASEC,UAAAA,YAAY,EAAKA,YATnB;AAUEY,UAAAA,QAAQ,EAAS,EAVnB;AAWEC,UAAAA,UAAU,EAAO;AAXnB,SADA,CAzCF,CAwDE;;AACApB,QAAAA,OAAO,CAACQ,MAAD,CAAP,GAAkBQ,IAAlB,CAzDF,CA2DE;;AACAP,QAAAA,UAAU,CAACU,QAAX,CAAoBE,IAApB,CAAyBb,MAAzB,EA5DF,CA8DE;;AACA,eAAOA,MAAP;AACD,OAzJH;;AA2JE;;;;;;AAMAc,MAAAA,aAAa,EAAG,yBAChB;AACE,eAAO;AACEpB,UAAAA,KAAK,EAAM,gBADb;AAEEM,UAAAA,MAAM,EAAK,CAFb;AAGEL,UAAAA,OAAO,EAAI,IAHb;AAIEgB,UAAAA,QAAQ,EAAG;AAJb,SAAP;AAMD;AAzKH;AAFF,GADA;AAzBA9B,EAAAA,EAAE,CAACsB,EAAH,CAAMC,WAAN,CAAkBC,cAAlB,CAAiCrB,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2010 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Primitives for building trees and tree nodes.\n *\n * The methods in this mixin are included directly in the SimpleTreeDataModel\n * but are also useful for other types of trees (not TreeVirtual) that need\n * similar tree and node creation.\n */\nqx.Mixin.define(\"qx.ui.treevirtual.MTreePrimitive\",\n{\n  statics :\n  {\n    /** Primitive types of tree nodes */\n    Type :\n    {\n      LEAF   : 1,\n      BRANCH : 2\n    },\n\n    /**\n     * Add a node to the tree.\n     *\n     * NOTE: This method is for <b>internal use</b> and should not be called by\n     *       users of this class. There is no guarantee that the interface to this\n     *       method will remain unchanged over time.\n     *\n     * @param nodeArr {Array|Map}\n     *   The array to which new nodes are to be added. See, however, the\n     *   nodeId parameter. If nodeId values will be provided, then nodeArr can\n     *   be a map. The traditional TreeVirtual does not provide node ids, and\n     *   passes an array for this parameter.\n     *\n     * @param parentNodeId {Integer}\n     *   The node id of the parent of the node being added\n     *\n     * @param label {String}\n     *   The string to display as the label for this node\n     *\n     * @param bOpened {Boolean}\n     *   <i>true</i> if the tree should be rendered in its opened state;\n     *   <i>false</i> otherwise.\n     *\n     * @param bHideOpenCloseButton {Boolean}\n     *   <i>true</i> if the open/close button should be hidden (not displayed);\n     *   </i>false</i> to display the open/close button for this node.\n     *\n     * @param type {Integer}\n     *   The type of node being added.  The type determines whether children\n     *   may be added, and determines the default icons to use.  This\n     *   parameter must be one of the following values:\n     *   <dl>\n     *     <dt>qx.ui.treevirtual.MTreePrimitive.Type.BRANCH</dt>\n     *     <dd>\n     *       This node is a branch.  A branch node may have children.\n     *     </dd>\n     *     <dt>qx.ui.treevirtual.MTreePrimitive.Type.LEAF</dt>\n     *     <dd>\n     *       This node is a leaf, and may not have children\n     *     </dd>\n     *   </dl>\n     *\n     * @param icon {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is not a selected node.\n     *\n     * @param iconSelected {String}\n     *   The relative (subject to alias expansion) or full path of the icon to\n     *   display for this node when it is a selected node.\n     *   <p>\n     *   NOTE: As of 13 Mar 2009, this feature is disabled by default, by\n     *         virtue of the fact that the tree's \"alwaysUpdateCells\" property\n     *         has a setting of 'false' now instead of 'true'. Setting this\n     *         property to true allows the icon to change upon selection, but\n     *         causes problems such as single clicks not always selecting a\n     *         row, and, in IE, double click operations failing\n     *         completely. (For more information, see bugs 605 and 2021.) To\n     *         re-enable the option to have an unique icon that is displayed\n     *         when the node is selected, issue\n     *         <code>tree.setAlwaysUpdateCells(true);</code>\n     *\n     * @param nodeId {Integer?}\n     *   The requested node id for this new node. If not provided, nodeArr\n     *   will be assumed to be an array, not a map, and the next available\n     *   index of the array will be used. If it is provided, then nodeArr may\n     *   be either an array or a map.\n     *\n     * @return {Integer} The node id of the newly-added node.\n     *\n     * @throws {Error} If one tries to add a child to a non-existent parent.\n     * @throws {Error} If one tries to add a node to a leaf.\n     */\n    _addNode : function(nodeArr,\n                        parentNodeId,\n                        label,\n                        bOpened,\n                        bHideOpenCloseButton,\n                        type,\n                        icon,\n                        iconSelected,\n                        nodeId)\n    {\n      var parentNode;\n\n      // Ensure that if parent was specified, it exists\n      if (parentNodeId)\n      {\n        parentNode = nodeArr[parentNodeId];\n\n        if (!parentNode)\n        {\n          throw new Error(\"Request to add a child to a non-existent parent\");\n        }\n\n        // Ensure parent isn't a leaf\n        if (parentNode.type == qx.ui.treevirtual.MTreePrimitive.Type.LEAF)\n        {\n          throw new Error(\"Sorry, a LEAF may not have children.\");\n        }\n      }\n      else\n      {\n        // This is a child of the root\n        parentNode = nodeArr[0];\n        parentNodeId = 0;\n      }\n\n      // If this is a leaf, we don't present open/close icon\n      if (type == qx.ui.treevirtual.MTreePrimitive.Type.LEAF)\n      {\n        // mask off the opened bit but retain the hide open/close button bit\n        bOpened = false;\n        bHideOpenCloseButton = false;\n      }\n\n      // Determine the node id of this new node\n      if (nodeId === undefined)\n      {\n        nodeId = nodeArr.length;\n      }\n\n      // Set the data for this node.\n      var node =\n      {\n        type           : type,\n        nodeId         : nodeId,\n        parentNodeId   : parentNodeId,\n        label          : label,\n        bSelected      : false,\n        bOpened        : bOpened,\n        bHideOpenClose : bHideOpenCloseButton,\n        icon           : icon,\n        iconSelected   : iconSelected,\n        children       : [ ],\n        columnData     : [ ]\n      };\n\n      // Add this node to the array\n      nodeArr[nodeId] = node;\n\n      // Add this node to its parent's child array.\n      parentNode.children.push(nodeId);\n\n      // Return the node id we just added\n      return nodeId;\n    },\n\n    /**\n     * An empty tree contains only this one node\n     *\n     * @return {Map}\n     *   Returns a root node with all relevant fields filled.\n     */\n    _getEmptyTree : function()\n    {\n      return {\n               label    : \"<virtual root>\",\n               nodeId   : 0,\n               bOpened  : true,\n               children : []\n             };\n    }\n  }\n});\n"
  ]
}