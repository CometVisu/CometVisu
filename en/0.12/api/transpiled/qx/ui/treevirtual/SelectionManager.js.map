{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/treevirtual/SelectionManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "selection",
    "Manager",
    "construct",
    "__table",
    "members",
    "getTable",
    "_handleSelectEvent",
    "index",
    "evt",
    "_this",
    "handleButtonClick",
    "tree",
    "dataModel",
    "getDataModel",
    "treeCol",
    "getTreeColumn",
    "focusedCol",
    "getFocusedColumn",
    "event",
    "type",
    "Mouse",
    "getFocusCellOnPointerMove",
    "scrollers",
    "_getPaneScrollerArr",
    "i",
    "length",
    "_focusCellAtPagePos",
    "getViewportLeft",
    "getViewportTop",
    "node",
    "getNode",
    "getFocusedRow",
    "tcm",
    "getTableColumnModel",
    "columnPositions",
    "_getColToXPosMap",
    "left",
    "bom",
    "element",
    "Location",
    "getLeft",
    "getContentElement",
    "getDomElement",
    "visX",
    "getColumnWidth",
    "x",
    "latitude",
    "rowHeight",
    "getRowHeight",
    "buttonPos",
    "level",
    "setState",
    "bOpened",
    "getOpenCloseClickSelectsRow",
    "_handleExtendedClick",
    "identifier",
    "getKeyIdentifier",
    "bHideOpenClose",
    "treevirtual",
    "SimpleTreeDataModel",
    "Type",
    "LEAF",
    "bNoSelect",
    "destruct",
    "SelectionManager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A selection manager. This is a helper class that handles all selection\n * related events and updates a SelectionModel.\n * <p>\n * This Selection Manager differs from its superclass in that we do not want\n * rows to be selected when moving around with the keyboard.\n */\nqx.Class.define(\"qx.ui.treevirtual.SelectionManager\",\n{\n  extend : qx.ui.table.selection.Manager,\n\n\n\n\n  /**\n   * @param table {qx.ui.table.Table}\n   *    The table whose selections are being managed\n   */\n  construct : function(table)\n  {\n    this.base(arguments);\n\n    this.__table = table;\n  },\n\n\n\n  members :\n  {\n    __table : null,\n\n\n    /**\n     * Getter for the table being managed\n     *\n     * @return {qx.ui.table.Table}\n     *   Table being managed\n     */\n    getTable : function()\n    {\n      return this.__table;\n    },\n\n\n    /**\n     * Handles a select event.  First we determine if the click was on the\n     * open/close button and toggle the opened/closed state as necessary.\n     * Then, if the click was not on the open/close button or if the table's\n     * \"openCloseClickSelectsRow\" property so indicates, call our superclass to\n     * handle the actual row selection.\n     *\n     * @param index {Integer} the index the event is pointing at.\n     * @param evt {Map} the mouse event.\n     */\n    _handleSelectEvent : function(index, evt)\n    {\n      var _this = this;\n\n      function handleButtonClick(tree, index, evt)\n      {\n        // Get the data model\n        var dataModel = tree.getDataModel();\n\n        // Determine the column containing the tree\n        var treeCol = dataModel.getTreeColumn();\n\n        // Get the focused column\n        var focusedCol = tree.getFocusedColumn();\n\n        // If the click is not in the tree column, ...\n        if (focusedCol != treeCol)\n        {\n          // ... then let the Table selection manager deal with it\n          return false;\n        }\n\n        // If the cell hasn't been focused automatically...\n        if (evt instanceof qx.event.type.Mouse)\n        {\n          if (! tree.getFocusCellOnPointerMove())\n          {\n            // ... then focus it now so we can determine the node to open/close\n            var scrollers = tree._getPaneScrollerArr();\n\n            for (var i=0; i<scrollers.length; i++)\n            {\n              scrollers[i]._focusCellAtPagePos(evt.getViewportLeft(),\n                                               evt.getViewportTop());\n            }\n          }\n        }\n\n        // Get the node to which this event applies\n        var node = dataModel.getNode(tree.getFocusedRow());\n\n        if (!node) {\n          return false;\n        }\n\n        // Was this a mouse event?\n        if (evt instanceof qx.event.type.Mouse)\n        {\n          // Yup.  Get the order of the columns\n          var tcm = tree.getTableColumnModel();\n          var columnPositions = tcm._getColToXPosMap();\n\n          // Calculate the position of the beginning of the tree column\n          var left = qx.bom.element.Location.getLeft(\n            tree.getContentElement().getDomElement());\n\n          for (var i=0; i<columnPositions[treeCol].visX; i++) {\n            left += tcm.getColumnWidth(columnPositions[i].visX);\n          }\n\n          // Was the click on the open/close button?  That button begins at\n          // (node.level - 1) * (rowHeight + 3) + 2 (the latter for padding),\n          // and has width (rowHeight + 3). We add a bit of latitude to that.\n          var x = evt.getViewportLeft();\n          var latitude = 2;\n          var rowHeight = _this.__table.getRowHeight();\n          var buttonPos = left + (node.level - 1) * (rowHeight + 3) + 2;\n\n          if (x >= buttonPos - latitude && x <= buttonPos + rowHeight + 3 + latitude)\n          {\n            // Yup.  Toggle the opened state for this node.\n            dataModel.setState(node, { bOpened : ! node.bOpened });\n            return tree.getOpenCloseClickSelectsRow() ? false : true;\n          }\n          else\n          {\n            return _this._handleExtendedClick(tree, evt, node, left);\n          }\n        }\n        else\n        {\n          // See which key generated the event\n          var identifier = evt.getKeyIdentifier();\n\n          switch(identifier)\n          {\n            case \"Space\":\n              // This should only select the row, not toggle the opened state\n              return false;\n\n            case \"Enter\":\n              // Toggle the open state if open/close is allowed\n              if (!node.bHideOpenClose &&\n                  node.type != qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF)\n              {\n                dataModel.setState(node, { bOpened : ! node.bOpened });\n              }\n\n              return tree.getOpenCloseClickSelectsRow() ? false : true;\n\n            default:\n              // Unrecognized key.  Ignore it.\n              return true;\n          }\n        }\n      }\n\n      // Call our local method to toggle the open/close state, if necessary\n      var bNoSelect = handleButtonClick(this.__table, index, evt);\n\n      // If we haven't been told not to do the selection...\n      if (!bNoSelect)\n      {\n        // then call the superclass to handle it.\n        this.base(arguments, index, evt);\n      }\n    },\n\n    /**\n     * Handle a mouse click event that is not normally handled by the simple\n     * tree.  This is intended for more sophisticated trees where clicks in\n     * different places, e.g. on various icons or on the label itself, should\n     * be handled specially.\n     *\n     * @param tree {qx.ui.treevirtual.TreeVirtual}\n     *   The tree on which the event has occurred.\n     *\n     * @param evt {Map}\n     *   The mouse event.  Of particular interest is evt.getViewportLeft()\n     *   which is the horizontal offset from the left border of the click.\n     *\n     * @param node {Map}\n     *   The node which the tree row is displaying\n     *\n     * @param left {Integer}\n     *   The offset from the left, of the beginning of the tree column.\n     *\n     * @return {Boolean}\n     *   <i>true</i> if the row should be prevented from being selected;\n     *   <i>false</i> otherwise.\n     */\n    _handleExtendedClick : function(tree, evt, node, left)\n    {\n      return false;\n    }\n  },\n\n  destruct : function() {\n    this.__table = null;\n  }\n});\n"
  ]
}