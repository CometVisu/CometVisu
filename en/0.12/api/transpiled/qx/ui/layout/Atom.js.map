{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Atom.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "properties",
    "gap",
    "check",
    "init",
    "apply",
    "iconPosition",
    "center",
    "members",
    "verifyLayoutProperty",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "left",
    "top",
    "Util",
    "getIconPosition",
    "children",
    "_getLayoutChildren",
    "length",
    "width",
    "height",
    "child",
    "hint",
    "getGap",
    "getCenter",
    "allowedPositions",
    "indexOf",
    "start",
    "end",
    "increment",
    "allocatedHeight",
    "i",
    "getSizeHint",
    "Math",
    "round",
    "childTop",
    "min",
    "maxWidth",
    "max",
    "minWidth",
    "computeHorizontalAlignOffset",
    "remainingWidth",
    "shrinkTarget",
    "count",
    "basic",
    "Label",
    "gapSum",
    "shrinkTargetWidth",
    "maxHeight",
    "minHeight",
    "align",
    "computeVerticalAlignOffset",
    "_computeSizeHint",
    "result",
    "Atom"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A atom layout. Used to place an image and label in relation\n * to each other. Useful to create buttons, list items, etc.\n *\n * *Features*\n *\n * * Gap between icon and text (using {@link #gap})\n * * Vertical and horizontal mode (using {@link #iconPosition})\n * * Sorting options to place first child on top/left or bottom/right (using {@link #iconPosition})\n * * Automatically middles/centers content to the available space\n * * Auto-sizing\n * * Supports more than two children (will be processed the same way like the previous ones)\n *\n * *Item Properties*\n *\n * None\n *\n * *Notes*\n *\n * * Does not support margins and alignment of {@link qx.ui.core.LayoutItem}.\n *\n * *Alternative Names*\n *\n * None\n */\nqx.Class.define(\"qx.ui.layout.Atom\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The gap between the icon and the text */\n    gap :\n    {\n      check : \"Integer\",\n      init : 4,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** The position of the icon in relation to the text */\n    iconPosition :\n    {\n      check : [\"left\", \"top\", \"right\", \"bottom\", \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\"],\n      init : \"left\",\n      apply  : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * Whether the content should be rendered centrally when to much space\n     * is available. Enabling this property centers in both axis. The behavior\n     * when disabled of the centering depends on the {@link #iconPosition} property.\n     * If the icon position is <code>left</code> or <code>right</code>, the X axis\n     * is not centered, only the Y axis. If the icon position is <code>top</code>\n     * or <code>bottom</code>, the Y axis is not centered. In case of e.g. an\n     * icon position of <code>top-left</code> no axis is centered.\n     */\n    center :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value) {\n        this.assert(false, \"The property '\"+name+\"' is not supported by the Atom layout!\");\n      },\n\n      \"false\" : null\n    }),\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      var left = padding.left;\n      var top = padding.top;\n      var Util = qx.ui.layout.Util;\n\n      var iconPosition = this.getIconPosition();\n      var children = this._getLayoutChildren();\n      var length = children.length;\n\n      var width, height;\n      var child, hint;\n      var gap = this.getGap();\n      var center = this.getCenter();\n\n      // reverse ordering\n      var allowedPositions = [\"bottom\", \"right\", \"top-right\", \"bottom-right\"];\n      if (allowedPositions.indexOf(iconPosition) != -1)\n      {\n        var start = length-1;\n        var end = -1;\n        var increment = -1;\n      }\n      else\n      {\n        var start = 0;\n        var end = length;\n        var increment = 1;\n      }\n\n      // vertical\n      if (iconPosition == \"top\" || iconPosition == \"bottom\")\n      {\n        if (center)\n        {\n          var allocatedHeight = 0;\n          for (var i=start; i!=end; i+=increment)\n          {\n            height = children[i].getSizeHint().height;\n\n            if (height > 0)\n            {\n              allocatedHeight += height;\n\n              if (i != start) {\n                allocatedHeight += gap;\n              }\n            }\n          }\n\n          top += Math.round((availHeight - allocatedHeight) / 2);\n        }\n\n        var childTop = top;\n        for (var i=start; i!=end; i+=increment)\n        {\n          child = children[i];\n\n          hint = child.getSizeHint();\n          width = Math.min(hint.maxWidth, Math.max(availWidth, hint.minWidth));\n          height = hint.height;\n\n          left = Util.computeHorizontalAlignOffset(\"center\", width, availWidth) + padding.left;\n          child.renderLayout(left, childTop, width, height);\n\n          // Ignore pseudo invisible elements\n          if (height > 0) {\n            childTop = top + height + gap;\n          }\n        }\n      }\n\n      // horizontal\n      // in this way it also supports shrinking of the first label\n      else\n      {\n        var remainingWidth = availWidth;\n        var shrinkTarget = null;\n\n        var count=0;\n        for (var i=start; i!=end; i+=increment)\n        {\n          child = children[i];\n          width = child.getSizeHint().width;\n\n          if (width > 0)\n          {\n            if (!shrinkTarget && child instanceof qx.ui.basic.Label) {\n              shrinkTarget = child;\n            } else {\n              remainingWidth -= width;\n            }\n\n            count++;\n          }\n        }\n\n        if (count > 1)\n        {\n          var gapSum = (count - 1) * gap;\n          remainingWidth -= gapSum;\n        }\n\n        if (shrinkTarget)\n        {\n          var hint = shrinkTarget.getSizeHint();\n          var shrinkTargetWidth = Math.max(hint.minWidth, Math.min(remainingWidth, hint.maxWidth));\n          remainingWidth -= shrinkTargetWidth;\n        }\n\n        if (center && remainingWidth > 0) {\n          left += Math.round(remainingWidth / 2);\n        }\n\n        for (var i=start; i!=end; i+=increment)\n        {\n          child = children[i];\n\n          hint = child.getSizeHint();\n          height = Math.min(hint.maxHeight, Math.max(availHeight, hint.minHeight));\n\n          if (child === shrinkTarget) {\n            width = shrinkTargetWidth;\n          } else {\n            width = hint.width;\n          }\n\n          var align = \"middle\";\n          if(iconPosition == \"top-left\" || iconPosition == \"top-right\"){\n            align = \"top\";\n          } else if (iconPosition == \"bottom-left\" || iconPosition == \"bottom-right\") {\n            align = \"bottom\";\n          }\n          var childTop = top + Util.computeVerticalAlignOffset(align, hint.height, availHeight);\n          child.renderLayout(left, childTop, width, height);\n\n          // Ignore pseudo invisible childs for gap e.g.\n          // empty text or unavailable images\n          if (width > 0) {\n            left += width + gap;\n          }\n        }\n      }\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      var children = this._getLayoutChildren();\n      var length = children.length;\n      var hint, result;\n\n      // Fast path for only one child\n      if (length === 1)\n      {\n        var hint = children[0].getSizeHint();\n\n        // Work on a copy, but do not respect max\n        // values as a Atom can be rendered bigger\n        // than its content.\n        result = {\n          width : hint.width,\n          height : hint.height,\n          minWidth : hint.minWidth,\n          minHeight : hint.minHeight\n        };\n      }\n      else\n      {\n        var minWidth=0, width=0;\n        var minHeight=0, height=0;\n\n        var iconPosition = this.getIconPosition();\n        var gap = this.getGap();\n\n        if (iconPosition === \"top\" || iconPosition === \"bottom\")\n        {\n          var count = 0;\n          for (var i=0; i<length; i++)\n          {\n            hint = children[i].getSizeHint();\n\n            // Max of widths\n            width = Math.max(width, hint.width);\n            minWidth = Math.max(minWidth, hint.minWidth);\n\n            // Sum of heights\n            if (hint.height > 0)\n            {\n              height += hint.height;\n              minHeight += hint.minHeight;\n              count++;\n            }\n          }\n\n          if (count > 1)\n          {\n            var gapSum = (count-1) * gap;\n            height += gapSum;\n            minHeight += gapSum;\n          }\n        }\n        else\n        {\n          var count=0;\n          for (var i=0; i<length; i++)\n          {\n            hint = children[i].getSizeHint();\n\n            // Max of heights\n            height = Math.max(height, hint.height);\n            minHeight = Math.max(minHeight, hint.minHeight);\n\n            // Sum of widths\n            if (hint.width > 0)\n            {\n              width += hint.width;\n              minWidth += hint.minWidth;\n              count++;\n            }\n          }\n\n          if (count > 1)\n          {\n            var gapSum = (count-1) * gap;\n            width += gapSum;\n            minWidth += gapSum;\n          }\n        }\n\n        // Build hint\n        result = {\n          minWidth : minWidth,\n          width : width,\n          minHeight : minHeight,\n          height : height\n        };\n      }\n\n      return result;\n    }\n  }\n});\n"
  ]
}