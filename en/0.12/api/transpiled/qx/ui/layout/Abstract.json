{
  "className": "qx.ui.layout.Abstract",
  "packageName": "qx.ui.layout",
  "name": "Abstract",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 260,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Base class for all layout managers.\n Custom layout manager must derive from\n this class and implement the methods {@link #invalidateLayoutCache},\n {@link #renderLayout} and {@link #getSizeHint}.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "members": {
    "__sizeHint": {
      "location": {
        "start": {
          "line": 42,
          "column": 4
        },
        "end": {
          "line": 42,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The cached size hint"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_invalidChildrenCache": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 47,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the children cache is valid. This field is protected\n    because sub classes must be able to access it quickly."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__widget": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.Widget} The connected widget"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "invalidateLayoutCache": {
      "location": {
        "start": {
          "line": 65,
          "column": 4
        },
        "end": {
          "line": 67,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  LAYOUT INTERFACE\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Invalidate all layout relevant caches. Automatically deletes the size hint.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Applies the children layout.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "availWidth {Integer} Final width available for the content (in pixel)",
            "paramName": "availWidth",
            "description": " Final width available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "availHeight {Integer} Final height available for the content (in pixel)",
            "paramName": "availHeight",
            "description": " Final height available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "padding {Map} Map containing the padding values. Keys:\n <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "paramName": "padding",
            "description": " Map containing the padding values. Keys:\n <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSizeHint": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the layout dimensions and possible ranges of these.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} The map with the preferred width/height and the allowed\n   minimum and maximum values in cases where shrinking or growing\n   is required. Can also return <code>null</code> when this detection\n   is not supported by the layout.",
            "type": "Map|null",
            "description": " The map with the preferred width/height and the allowed\n   minimum and maximum values in cases where shrinking or growing\n   is required. Can also return <code>null</code> when this detection\n   is not supported by the layout."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasHeightForWidth": {
      "location": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the layout manager supports height for width.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the layout manager supports height for width",
            "type": "Boolean",
            "description": " Whether the layout manager supports height for width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getHeightForWidth": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If layout wants to trade height for width it has to implement this\n method and return the preferred height if it is resized to\n the given width. This function returns <code>null</code> if the item\n do not support height for width.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} The computed width",
            "paramName": "width",
            "description": " The computed width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The desired height",
            "type": "Integer",
            "description": " The desired height"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This computes the size hint of the layout and returns it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The size hint.",
            "type": "Map",
            "description": " The size hint."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "invalidateChildrenCache": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called, on each child \"add\" and \"remove\" action and\n whenever the layout data of a child is changed. The method should be used\n to clear any children relevant cached data.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "verifyLayoutProperty": {
      "location": {
        "start": {
          "line": 160,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Verifies the value of a layout property.\n Note: This method is only available in the debug builds.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(item, name, value)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {Object} The affected layout item",
            "paramName": "item",
            "description": " The affected layout item",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "name {Object} Name of the layout property",
            "paramName": "name",
            "description": " Name of the layout property",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "value {Object} Value of the layout property",
            "paramName": "value",
            "description": " Value of the layout property",
            "type": "Object"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "_clearSeparators": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all currently visible separators</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_renderSeparator": {
      "location": {
        "start": {
          "line": 191,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Renders a separator between two children</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator {String|qx.ui.decoration.IDecorator} The separator to render",
            "paramName": "separator",
            "description": " The separator to render",
            "type": [
              "String",
              "qx.ui.decoration.IDecorator"
            ]
          },
          {
            "name": "@param",
            "body": "bounds {Map} Contains the left and top coordinate and the width and height\n    of the separator to render.",
            "paramName": "bounds",
            "description": " Contains the left and top coordinate and the width and height\n    of the separator to render.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "connectToWidget": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called by the widget to connect the widget with the layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to connect to.",
            "paramName": "widget",
            "description": " The widget to connect to.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getWidget": {
      "location": {
        "start": {
          "line": 218,
          "column": 4
        },
        "end": {
          "line": 221,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the widget that is this layout is responsible for.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The widget connected to this layout.",
            "type": "qx.ui.core.Widget",
            "description": " The widget connected to this layout."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyLayoutChange": {
      "location": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Indicate that the layout has layout changed and propagate this information\n up the widget hierarchy.\n Also a generic property apply method for all layout relevant properties.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getLayoutChildren": {
      "location": {
        "start": {
          "line": 242,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list of all layout relevant children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of layout relevant children.",
            "type": "Array",
            "description": " List of layout relevant children."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 257,
        "column": 13
      },
      "end": {
        "line": 259,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCT\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.layout.Atom",
    "qx.ui.layout.Basic",
    "qx.ui.layout.Canvas",
    "qx.ui.layout.Dock",
    "qx.ui.layout.Flow",
    "qx.ui.layout.Grid",
    "qx.ui.layout.Grow",
    "qx.ui.layout.HBox",
    "qx.ui.layout.VBox",
    "qx.ui.menu.ButtonLayout",
    "qx.ui.splitpane.HLayout",
    "qx.ui.splitpane.VLayout"
  ]
}