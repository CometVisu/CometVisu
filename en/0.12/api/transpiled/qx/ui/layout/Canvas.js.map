{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Canvas.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "properties",
    "desktop",
    "check",
    "init",
    "members",
    "verifyLayoutProperty",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "children",
    "_getLayoutChildren",
    "child",
    "size",
    "props",
    "left",
    "top",
    "right",
    "bottom",
    "width",
    "height",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "i",
    "l",
    "length",
    "getSizeHint",
    "getLayoutProperties",
    "getMarginTop",
    "getMarginRight",
    "getMarginBottom",
    "getMarginLeft",
    "edge",
    "lang",
    "Type",
    "isString",
    "Math",
    "round",
    "parseFloat",
    "minWidth",
    "maxWidth",
    "minHeight",
    "maxHeight",
    "_computeSizeHint",
    "neededWidth",
    "neededMinWidth",
    "neededHeight",
    "neededMinHeight",
    "hint",
    "isDesktop",
    "marginX",
    "marginY",
    "max",
    "Canvas"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The Canvas is an extended Basic layout.\n *\n * It is possible to position a widget relative to the right or bottom edge of\n * the available space. It further supports stretching between left and right\n * or top and bottom e.g. <code>left=20</code> and <code>right=20</code> would\n * keep a margin of 20 pixels to both edges. The Canvas layout has support for\n * percent dimensions and locations.\n *\n * *Features*\n *\n * * Pixel dimensions and locations\n * * Percent dimensions and locations\n * * Stretching between left+right and top+bottom\n * * Minimum and maximum dimensions\n * * Children are automatically shrunk to their minimum dimensions if not enough space is available\n * * Auto sizing (ignoring percent values)\n * * Margins (also negative ones)\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>left</strong> <em>(Integer|String)</em>: The left coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n * <li><strong>top</strong> <em>(Integer|String)</em>: The top coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n * <li><strong>right</strong> <em>(Integer|String)</em>: The right coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n * <li><strong>bottom</strong> <em>(Integer|String)</em>: The bottom coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n * <li><strong>edge</strong> <em>(Integer|String)</em>: The coordinate in pixels or as a percent string to be used for all four edges.\n * <li><strong>width</strong> <em>(String)</em>: A percent width e.g. <code>40%</code>.</li>\n * <li><strong>height</strong> <em>(String)</em>: A percent height e.g. <code>60%</code>.</li>\n * </ul>\n *\n * *Notes*\n *\n * <ul>\n * <li>Stretching (<code>left</code>-><code>right</code> or <code>top</code>-><code>bottom</code>)\n *   has a higher priority than the preferred dimensions</li>\n * <li>Stretching has a lower priority than the min/max dimensions.</li>\n * <li>Percent values have no influence on the size hint of the layout.</li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the canvas layout.\n *\n * <pre class=\"javascript\">\n * var container = new qx.ui.container.Composite(new qx.ui.layout.Canvas());\n *\n * // simple positioning\n * container.add(new qx.ui.core.Widget(), {top: 10, left: 10});\n *\n * // stretch vertically with 10 pixel distance to the parent's top\n * // and bottom border\n * container.add(new qx.ui.core.Widget(), {top: 10, left: 10, bottom: 10});\n *\n * // percent positioning and size\n * container.add(new qx.ui.core.Widget(), {left: \"50%\", top: \"50%\", width: \"25%\", height: \"40%\"});\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#layout/canvas.md'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Canvas\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties : {\n\n    /**\n     * If desktop mode is active, the children's minimum sizes are ignored\n     * by the layout calculation. This is necessary to prevent the desktop\n     * from growing if e.g. a window is moved beyond the edge of the desktop\n     */\n    desktop :\n    {\n      check : \"Boolean\",\n      init: false\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        var layoutProperties =\n        {\n          top : 1,\n          left : 1,\n          bottom : 1,\n          right : 1,\n          width : 1,\n          height : 1,\n          edge : 1\n        };\n\n        this.assert(layoutProperties[name] == 1, \"The property '\"+name+\"' is not supported by the Canvas layout!\");\n\n        if (name ==\"width\" || name == \"height\")\n        {\n          this.assertMatch(value, qx.ui.layout.Util.PERCENT_VALUE);\n        }\n        else\n        {\n          if (typeof value === \"number\") {\n            this.assertInteger(value);\n          } else if (qx.lang.Type.isString(value)) {\n            this.assertMatch(value, qx.ui.layout.Util.PERCENT_VALUE);\n          } else {\n            this.fail(\n              \"Bad format of layout property '\" + name + \"': \" + value +\n              \". The value must be either an integer or an percent string.\"\n            );\n          }\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      var children = this._getLayoutChildren();\n\n      var child, size, props;\n      var left, top, right, bottom, width, height;\n      var marginTop, marginRight, marginBottom, marginLeft;\n\n      for (var i=0, l=children.length; i<l; i++)\n      {\n        child = children[i];\n        size = child.getSizeHint();\n        props = child.getLayoutProperties();\n\n        // Cache margins\n        marginTop = child.getMarginTop();\n        marginRight = child.getMarginRight();\n        marginBottom = child.getMarginBottom();\n        marginLeft = child.getMarginLeft();\n\n\n\n        // **************************************\n        //   Processing location\n        // **************************************\n\n        left = props.left != null ? props.left : props.edge;\n        if (qx.lang.Type.isString(left)) {\n          left = Math.round(parseFloat(left) * availWidth / 100);\n        }\n\n        right = props.right != null ? props.right : props.edge;\n        if (qx.lang.Type.isString(right)) {\n          right = Math.round(parseFloat(right) * availWidth / 100);\n        }\n\n        top = props.top != null ? props.top : props.edge;\n        if (qx.lang.Type.isString(top)) {\n          top = Math.round(parseFloat(top) * availHeight / 100);\n        }\n\n        bottom = props.bottom != null ? props.bottom : props.edge;\n        if (qx.lang.Type.isString(bottom)) {\n          bottom = Math.round(parseFloat(bottom) * availHeight / 100);\n        }\n\n\n\n        // **************************************\n        //   Processing dimension\n        // **************************************\n\n        // Stretching has higher priority than dimension data\n        if (left != null && right != null)\n        {\n          width = availWidth - left - right - marginLeft - marginRight;\n\n          // Limit computed value\n          if (width < size.minWidth) {\n            width = size.minWidth;\n          } else if (width > size.maxWidth) {\n            width = size.maxWidth;\n          }\n\n          // Add margin\n          left += marginLeft;\n        }\n        else\n        {\n          // Layout data has higher priority than data from size hint\n          width = props.width;\n\n          if (width == null)\n          {\n            width = size.width;\n          }\n          else\n          {\n            width = Math.round(parseFloat(width) * availWidth / 100);\n\n            // Limit computed value\n            if (width < size.minWidth) {\n              width = size.minWidth;\n            } else if (width > size.maxWidth) {\n              width = size.maxWidth;\n            }\n          }\n\n          if (right != null) {\n            left = availWidth - width - right - marginRight - marginLeft;\n          } else if (left == null) {\n            left = marginLeft;\n          } else {\n            left += marginLeft;\n          }\n        }\n\n        // Stretching has higher priority than dimension data\n        if (top != null && bottom != null)\n        {\n          height = availHeight - top - bottom - marginTop - marginBottom;\n\n          // Limit computed value\n          if (height < size.minHeight) {\n            height = size.minHeight;\n          } else if (height > size.maxHeight) {\n            height = size.maxHeight;\n          }\n\n          // Add margin\n          top += marginTop;\n        }\n        else\n        {\n          // Layout data has higher priority than data from size hint\n          height = props.height;\n\n          if (height == null)\n          {\n            height = size.height;\n          }\n          else\n          {\n            height = Math.round(parseFloat(height) * availHeight / 100);\n\n            // Limit computed value\n            if (height < size.minHeight) {\n              height = size.minHeight;\n            } else if (height > size.maxHeight) {\n              height = size.maxHeight;\n            }\n          }\n\n          if (bottom != null) {\n            top = availHeight - height - bottom - marginBottom - marginTop;\n          } else if (top == null) {\n            top = marginTop;\n          } else {\n            top += marginTop;\n          }\n        }\n\n        left += padding.left;\n        top += padding.top;\n\n        // Apply layout\n        child.renderLayout(left, top, width, height);\n      }\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      var neededWidth=0, neededMinWidth=0;\n      var neededHeight=0, neededMinHeight=0;\n\n      var width, minWidth;\n      var height, minHeight;\n\n      var children = this._getLayoutChildren();\n      var child, props, hint;\n      var desktop = this.isDesktop();\n\n      var left, top, right, bottom;\n\n      for (var i=0,l=children.length; i<l; i++)\n      {\n        child = children[i];\n        props = child.getLayoutProperties();\n        hint = child.getSizeHint();\n\n\n        // Cache margins\n        var marginX = child.getMarginLeft() + child.getMarginRight();\n        var marginY = child.getMarginTop() + child.getMarginBottom();\n\n\n        // Compute width\n        width = hint.width+marginX;\n        minWidth = hint.minWidth+marginX;\n\n        left = props.left != null ? props.left : props.edge;\n        if (left && typeof left === \"number\")\n        {\n          width += left;\n          minWidth += left;\n        }\n\n        right = props.right != null ? props.right : props.edge;\n        if (right && typeof right === \"number\")\n        {\n          width += right;\n          minWidth += right;\n        }\n\n        neededWidth = Math.max(neededWidth, width);\n        neededMinWidth = desktop ? 0 : Math.max(neededMinWidth, minWidth);\n\n\n        // Compute height\n        height = hint.height+marginY;\n        minHeight = hint.minHeight+marginY;\n\n        top = props.top != null ? props.top : props.edge;\n        if (top && typeof top === \"number\")\n        {\n          height += top;\n          minHeight += top;\n        }\n\n        bottom = props.bottom != null ? props.bottom : props.edge;\n        if (bottom && typeof bottom === \"number\")\n        {\n          height += bottom;\n          minHeight += bottom;\n        }\n\n        neededHeight = Math.max(neededHeight, height);\n        neededMinHeight = desktop ? 0 : Math.max(neededMinHeight, minHeight);\n      }\n\n      return {\n        width : neededWidth,\n        minWidth : neededMinWidth,\n        height : neededHeight,\n        minHeight : neededMinHeight\n      };\n    }\n  }\n});\n"
  ]
}