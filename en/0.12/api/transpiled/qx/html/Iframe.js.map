{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/html/Iframe.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "html",
    "Element",
    "construct",
    "url",
    "styles",
    "attributes",
    "setSource",
    "addListener",
    "__onNavigate",
    "_modified",
    "toHashCode",
    "_scheduleFlush",
    "events",
    "members",
    "_applyProperty",
    "name",
    "value",
    "element",
    "getDomElement",
    "currentUrl",
    "bom",
    "Iframe",
    "queryCurrentUrl",
    "_createDomElement",
    "create",
    "_content",
    "getWindow",
    "getDocument",
    "getBody",
    "source",
    "_setProperty",
    "getSource",
    "_getProperty",
    "setName",
    "setAttribute",
    "getName",
    "getAttribute",
    "reload",
    "e",
    "actualUrl",
    "getData"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A cross browser iframe instance.\n */\nqx.Class.define(\"qx.html.Iframe\",\n{\n  extend : qx.html.Element,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Wrapper for the HTML Iframe element.\n   * @param url {String} Location which should be loaded inside the Iframe.\n   * @param styles {Map?null} optional map of CSS styles, where the key is the name\n   *    of the style and the value is the value to use.\n   * @param attributes {Map?null} optional map of element attributes, where the\n   *    key is the name of the attribute and the value is the value to use.\n   */\n  construct : function(url, styles, attributes)\n  {\n    this.base(arguments, \"iframe\", styles, attributes);\n\n    this.setSource(url);\n    this.addListener(\"navigate\", this.__onNavigate, this);\n\n    // add yourself to the element queue to enforce the creation of DOM element\n    qx.html.Element._modified[this.toHashCode()] = this;\n    qx.html.Element._scheduleFlush(\"element\");\n  },\n\n\n\n\n  /*\n   *****************************************************************************\n      EVENTS\n   *****************************************************************************\n   */\n\n  events:\n  {\n    /**\n     * The \"load\" event is fired after the iframe content has successfully been loaded.\n     */\n    \"load\" : \"qx.event.type.Event\",\n\n    /**\n    * The \"navigate\" event is fired whenever the location of the iframe\n    * changes.\n    *\n    * Useful to track user navigation and internally used to keep the source\n    * property in sync. Only works when the destination source is of same\n    * origin than the page embedding the iframe.\n    */\n    \"navigate\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    /*\n    ---------------------------------------------------------------------------\n      ELEMENT API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _applyProperty : function(name, value)\n    {\n      this.base(arguments, name, value);\n\n      if (name == \"source\") {\n        var element = this.getDomElement();\n        var currentUrl = qx.bom.Iframe.queryCurrentUrl(element);\n\n        // Skip if frame is already on URL.\n        //\n        // When URL of Iframe and source property get out of sync, the source\n        // property needs to be updated [BUG #4481]. This is to make sure the\n        // same source is not set twice on the BOM level.\n        if (value === currentUrl) {\n          return;\n        }\n\n        qx.bom.Iframe.setSource(element, value);\n      }\n    },\n\n    // overridden\n    _createDomElement : function() {\n      return qx.bom.Iframe.create(this._content);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      IFRAME API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the DOM window object of an iframe.\n     *\n     * @return {Window} The DOM window object of the iframe.\n     */\n    getWindow : function()\n    {\n      var element = this.getDomElement();\n\n      if (element)\n      {\n        return qx.bom.Iframe.getWindow(element);\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Get the DOM document object of an iframe.\n     *\n     * @return {Document} The DOM document object of the iframe.\n     */\n    getDocument : function()\n    {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Iframe.getDocument(element);\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Get the HTML body element of the iframe.\n     *\n     * @return {Element} The DOM node of the <code>body</code> element of the iframe.\n     */\n    getBody : function()\n    {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Iframe.getBody(element);\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Sets iframe's source attribute to given value\n     *\n     * @param source {String} URL to be set.\n     * @return {qx.html.Iframe} The current instance for chaining\n     */\n    setSource : function(source)\n    {\n      // the source needs to be applied directly in case the iFrame is hidden\n      this._setProperty(\"source\", source, true);\n      return this;\n    },\n\n\n    /**\n     * Get the current source.\n     *\n     * @return {String} The iframe's source\n     */\n    getSource : function() {\n      return this._getProperty(\"source\");\n    },\n\n\n    /**\n     * Sets iframe's name attribute to given value\n     *\n     * @param name {String} Name to be set.\n     * @return {qx.html.Iframe} The current instance for chaining\n     */\n    setName : function(name)\n    {\n      this.setAttribute(\"name\", name);\n      return this;\n    },\n\n\n    /**\n     * Get the current name.\n     *\n     * @return {String} The iframe's name.\n     */\n    getName : function() {\n      return this.getAttribute(\"name\");\n    },\n\n\n    /**\n     * Reloads iframe\n     */\n    reload : function()\n    {\n      var element = this.getDomElement();\n\n      if (element)\n      {\n        var url = this.getSource();\n        this.setSource(null);\n        this.setSource(url);\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LISTENER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n    * Handle user navigation. Sync actual URL of iframe with source property.\n    *\n    * @param e {qx.event.type.Data} navigate event\n    */\n    __onNavigate: function(e) {\n      var actualUrl = e.getData();\n      if (actualUrl) {\n        this.setSource(actualUrl);\n      }\n    }\n  }\n});\n"
  ]
}