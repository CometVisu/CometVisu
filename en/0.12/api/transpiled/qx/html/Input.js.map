{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/html/Input.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "html",
    "Element",
    "construct",
    "type",
    "styles",
    "attributes",
    "nodeName",
    "__type",
    "members",
    "__selectable",
    "__enabled",
    "_createDomElement",
    "bom",
    "Input",
    "create",
    "_applyProperty",
    "name",
    "value",
    "element",
    "getDomElement",
    "setValue",
    "setWrap",
    "setStyle",
    "style",
    "overflow",
    "overflowX",
    "overflowY",
    "setEnabled",
    "setAttribute",
    "core",
    "Environment",
    "get",
    "setStyles",
    "setSelectable",
    "select",
    "_setProperty",
    "getValue",
    "_getProperty",
    "wrap",
    "direct",
    "Error",
    "getWrap"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A Input wrap any valid HTML input element and make it accessible\n * through the normalized qooxdoo element interface.\n */\nqx.Class.define(\"qx.html.Input\",\n{\n  extend : qx.html.Element,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param type {String} The type of the input field. Valid values are\n   *   <code>text</code>, <code>textarea</code>, <code>select</code>,\n   *   <code>checkbox</code>, <code>radio</code>, <code>password</code>,\n   *   <code>hidden</code>, <code>submit</code>, <code>image</code>,\n   *   <code>file</code>, <code>search</code>, and <code>reset</code>.\n   * @param styles {Map?null} optional map of CSS styles, where the key is the name\n   *    of the style and the value is the value to use.\n   * @param attributes {Map?null} optional map of element attributes, where the\n   *    key is the name of the attribute and the value is the value to use.\n   */\n  construct : function(type, styles, attributes)\n  {\n    // Update node name correctly\n    if (type === \"select\" || type === \"textarea\") {\n      var nodeName = type;\n    } else {\n      nodeName = \"input\";\n    }\n\n    this.base(arguments, nodeName, styles, attributes);\n\n    this.__type = type;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    __type : null,\n    // used for webkit only\n    __selectable : null,\n    __enabled : null,\n\n    /*\n    ---------------------------------------------------------------------------\n      ELEMENT API\n    ---------------------------------------------------------------------------\n    */\n\n    //overridden\n    _createDomElement : function() {\n      return qx.bom.Input.create(this.__type);\n    },\n\n\n    // overridden\n    _applyProperty : function(name, value)\n    {\n      this.base(arguments, name, value);\n      var element = this.getDomElement();\n\n      if (name === \"value\") {\n        qx.bom.Input.setValue(element, value);\n      } else if (name === \"wrap\") {\n        qx.bom.Input.setWrap(element, value);\n\n        // qx.bom.Input#setWrap has the side-effect that the CSS property\n        // overflow is set via DOM methods, causing queue and DOM to get\n        // out of sync. Mirror all overflow properties to handle the case\n        // when group and x/y property differ.\n        this.setStyle(\"overflow\", element.style.overflow, true);\n        this.setStyle(\"overflowX\", element.style.overflowX, true);\n        this.setStyle(\"overflowY\", element.style.overflowY, true);\n      }\n    },\n\n\n    /**\n     * Set the input element enabled / disabled.\n     * Webkit needs a special treatment because the set color of the input\n     * field changes automatically. Therefore, we use\n     * <code>-webkit-user-modify: read-only</code> and\n     * <code>-webkit-user-select: none</code>\n     * for disabling the fields in webkit. All other browsers use the disabled\n     * attribute.\n     *\n     * @param value {Boolean} true, if the input element should be enabled.\n     */\n    setEnabled : function(value)\n    {\n      this.__enabled = value;\n\n      this.setAttribute(\"disabled\", value===false);\n\n      if (qx.core.Environment.get(\"engine.name\") == \"webkit\") {\n        if (!value) {\n          this.setStyles({\n            \"userModify\": \"read-only\",\n            \"userSelect\": \"none\"\n          });\n        } else {\n          this.setStyles({\n            \"userModify\": null,\n            \"userSelect\": this.__selectable ? null : \"none\"\n          });\n        }\n      }\n    },\n\n\n    /**\n     * Set whether the element is selectable. It uses the qooxdoo attribute\n     * qxSelectable with the values 'on' or 'off'.\n     * In webkit, a special css property will be used and checks for the\n     * enabled state.\n     *\n     * @param value {Boolean} True, if the element should be selectable.\n     */\n    setSelectable : qx.core.Environment.select(\"engine.name\",\n    {\n      \"webkit\" : function(value)\n      {\n        this.__selectable = value;\n\n        // Only apply the value when it is enabled\n        this.base(arguments, this.__enabled && value);\n      },\n\n      \"default\" : function(value)\n      {\n        this.base(arguments, value);\n      }\n    }),\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INPUT API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the value of the input element.\n     *\n     * @param value {var} the new value\n     * @return {qx.html.Input} This instance for for chaining support.\n     */\n    setValue : function(value)\n    {\n      var element = this.getDomElement();\n\n      if (element)\n      {\n        // Do not overwrite when already correct (on input events)\n        // This is needed to keep caret position while typing.\n        if (element.value != value) {\n          qx.bom.Input.setValue(element, value);\n        }\n      } else {\n        this._setProperty(\"value\", value);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get the current value.\n     *\n     * @return {String} The element's current value.\n     */\n    getValue : function()\n    {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Input.getValue(element);\n      }\n\n      return this._getProperty(\"value\") || \"\";\n    },\n\n\n    /**\n     * Sets the text wrap behavior of a text area element.\n     *\n     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"\n     *\n     * @param wrap {Boolean} Whether to turn text wrap on or off.\n     * @param direct {Boolean?false} Whether the execution should be made\n     *  directly when possible\n     * @return {qx.html.Input} This instance for for chaining support.\n     */\n    setWrap : function(wrap, direct)\n    {\n      if (this.__type === \"textarea\") {\n        this._setProperty(\"wrap\", wrap, direct);\n      } else {\n        throw new Error(\"Text wrapping is only support by textareas!\");\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Gets the text wrap behavior of a text area element.\n     *\n     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"\n     *\n     * @return {Boolean} Whether wrapping is enabled or disabled.\n     */\n    getWrap : function()\n    {\n      if (this.__type === \"textarea\") {\n        return this._getProperty(\"wrap\");\n      } else {\n        throw new Error(\"Text wrapping is only support by textareas!\");\n      }\n    }\n  }\n});\n"
  ]
}