{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/johnspackman_UploadMgr_v1_0_5/source/class/com/zenesis/qx/upload/File.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "browserObject",
    "filename",
    "id",
    "Assert",
    "assertNotNull",
    "__browserObject",
    "setFilename",
    "setId",
    "properties",
    "check",
    "nullable",
    "event",
    "size",
    "init",
    "progress",
    "state",
    "apply",
    "response",
    "uploadWidget",
    "status",
    "members",
    "__params",
    "setParam",
    "name",
    "value",
    "getParam",
    "getParamNames",
    "result",
    "push",
    "getBrowserObject",
    "_applyState",
    "oldValue",
    "assertTrue",
    "com",
    "zenesis",
    "upload",
    "File"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ***********************************************************************\n\n   UploadMgr - provides an API for uploading one or multiple files\n   with progress feedback (on modern browsers), does not block the user \n   interface during uploads, supports cancelling uploads.\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     \n     This software is provided under the same licensing terms as Qooxdoo,\n     please see the LICENSE file in the Qooxdoo project's top-level directory \n     for details.\n\n   Authors:\n * John Spackman (john.spackman@zenesis.com)\n\n ************************************************************************/\n\n/**\n * Represents a file that is to be or has been uploaded; this should be\n * instantiated by the _createFile method of AbstractHandler implementations and\n * is not expected to be used separately\n */\nqx.Class.define(\"com.zenesis.qx.upload.File\", {\n  extend: qx.core.Object,\n\n  /**\n   * Constructor\n   * \n   * @param browserObject\n   *          {DOM} Anythign the AbstractHandler wants to store, typically an\n   *          input[type=file] or a File\n   * @param filename\n   *          {String} the name of the file\n   * @param id\n   *          {String} the unique id of the file\n   */\n  construct: function(browserObject, filename, id) {\n    this.base(arguments);\n    qx.core.Assert.assertNotNull(browserObject);\n    qx.core.Assert.assertNotNull(filename);\n    qx.core.Assert.assertNotNull(id);\n    this.__browserObject = browserObject;\n    this.setFilename(filename);\n    this.setId(id);\n  },\n\n  properties: {\n    /**\n     * The filename\n     */\n    filename: {\n      check: \"String\",\n      nullable: false,\n      event: \"changeFilename\"\n    },\n\n    /**\n     * A unique ID for the upload\n     */\n    id: {\n      check: \"String\",\n      nullable: false,\n      event: \"changeId\"\n    },\n\n    /**\n     * Size of the file, if known (not available on older browsers)\n     */\n    size: {\n      check: \"Integer\",\n      nullable: false,\n      init: -1,\n      event: \"changeSize\"\n    },\n\n    /**\n     * Progress of the upload, if known (not available on older browsers)\n     */\n    progress: {\n      check: \"Integer\",\n      nullable: false,\n      init: 0,\n      event: \"changeProgress\"\n    },\n\n    /**\n     * State of the file, re: uploading\n     */\n    state: {\n      check: [ \"not-started\", \"uploading\", \"cancelled\", \"uploaded\" ],\n      nullable: false,\n      init: \"not-started\",\n      event: \"changeState\",\n      apply: \"_applyState\"\n    },\n\n    /**\n     * The response string received from the server\n     */\n    response: {\n      init: null,\n      nullable: true,\n      check: \"String\",\n      event: \"changeResponse\"\n    },\n\n    /**\n     * The widget that triggered the upload\n     */\n    uploadWidget: {\n      init: null,\n      nullable: true,\n      event: \"changeUploadWidget\"\n    },\n\n    /**\n     * The status of an XHR request. This can be used to determine if the\n     * upload was successful.\n     */\n    status: {\n      init: null,\n      nullable: true,\n      event: \"changeStatus\"\n    }\n  },\n\n  members: {\n    __browserObject: null,\n    __params: null,\n\n    /**\n     * Sets a parameter value to be sent with the file\n     * \n     * @param name\n     *          {String} name of the parameter\n     * @param value\n     *          {String} the value of the parameter, or null to delete a\n     *          previous parameter\n     */\n    setParam: function(name, value) {\n      if (value !== null && typeof value != \"string\")\n        value = \"\" + value;\n      if (!this.__params)\n        this.__params = {};\n      this.__params[name] = value;\n    },\n\n    /**\n     * Returns a parameter value to be sent with the file\n     * \n     * @param name {String} Name of the parameter\n     * @returns {Boolean}\n     */\n    getParam: function(name) {\n      return this.__params && this.__params[name];\n    },\n\n    /**\n     * Returns a list of parameter names\n     * \n     * @returns {Array}\n     */\n    getParamNames: function() {\n      var result = [];\n      if (this.__params)\n        for ( var name in this.__params)\n          result.push(name);\n      return result;\n    },\n\n    /**\n     * Returns the browser object\n     * \n     * @returns {DOM}\n     */\n    getBrowserObject: function() {\n      return this.__browserObject;\n    },\n\n    // property apply\n    _applyState: function(value, oldValue) {\n      qx.core.Assert.assertTrue((!oldValue && value == \"not-started\")\n          || (oldValue == \"not-started\" && (value == \"cancelled\" || value == \"uploading\"))\n          || (oldValue == \"uploading\" && (value == \"cancelled\" || value == \"uploaded\")));\n    }\n  }\n});\n"
  ]
}