{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v3_1_2/source/class/qxl/dialog/formElement/List.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "register",
    "qxl",
    "dialog",
    "Dialog",
    "registerFormElementHandlers",
    "_registration",
    "initElement",
    "fieldType",
    "fieldData",
    "key",
    "formElement",
    "ui",
    "form",
    "List",
    "selectionMode",
    "setSelectionMode",
    "dragSelection",
    "mode",
    "getSelectionMode",
    "debug",
    "setDragSelection",
    "model",
    "data",
    "marshal",
    "Json",
    "createModel",
    "options",
    "controller",
    "addToFormController",
    "_formController",
    "addTarget",
    "value",
    "selected",
    "selectables",
    "getSelectables",
    "forEach",
    "selectable",
    "Array",
    "includes",
    "getModel",
    "getValue",
    "push",
    "selection"
  ],
  "mappings": ";;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,6BAAhB,EACA;AACEC,IAAAA,OAAO,EACP;AACEC,MAAAA,QAAQ,EAAG,oBAAW;AACpBC,QAAAA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkBC,2BAAlB,CACE,MADF,EACU,KAAKC,aADf;AAED,OAJH;AAMEA,MAAAA,aAAa,EAAG;AACdC,QAAAA,WAAW,EAAG,qBAASC,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoC;AAChD,cAAIC,WAAW,GAAG,IAAIjB,EAAE,CAACkB,EAAH,CAAMC,IAAN,CAAWC,IAAf,EAAlB;;AACA,cAAIL,SAAS,CAACM,aAAd,EAA6B;AAC3BJ,YAAAA,WAAW,CAACK,gBAAZ,CAA6BP,SAAS,CAACM,aAAvC;AACD;;AACD,cAAIN,SAAS,CAACQ,aAAd,EAA6B;AAC3B,gBAAIC,IAAI,GAAGP,WAAW,CAACQ,gBAAZ,EAAX;;AACA,gBAAID,IAAI,IAAI,QAAR,IAAoBA,IAAI,IAAI,KAAhC,EAAuC;AACrC,mBAAKE,KAAL,CAAW,qCAAqCF,IAAhD;AACD,aAFD,MAEO;AACLP,cAAAA,WAAW,CAACU,gBAAZ,CAA6BZ,SAAS,CAACQ,aAAvC;AACD;AACF;;AACD,cAAIK,KAAK,GAAG5B,EAAE,CAAC6B,IAAH,CAAQC,OAAR,CAAgBC,IAAhB,CAAqBC,WAArB,CAAiCjB,SAAS,CAACkB,OAA3C,CAAZ;AACA,cAAIjC,EAAE,CAAC6B,IAAH,CAAQK,UAAR,CAAmBd,IAAvB,CAA4BQ,KAA5B,EAAmCX,WAAnC,EAAgD,OAAhD;AACA,iBAAOA,WAAP;AACD,SAjBa;AAmBdkB,QAAAA,mBAAmB,EAAG,6BAASrB,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,WAApC,EAAiD;AACvE,eAAKmB,eAAL,CAAqBC,SAArB,CACEpB,WADF,EACe,WADf,EAC4BD,GAD5B,EACiC,IADjC,EACuC;AACnC,yBAAc,mBAASsB,KAAT,EAAgB;AAC5B,kBAAIC,QAAQ,GAAC,EAAb;AACA,kBAAIC,WAAW,GAAGvB,WAAW,CAACwB,cAAZ,EAAlB;AACAD,cAAAA,WAAW,CAACE,OAAZ,CAAoB,UAASC,UAAT,EAAqB;AACvC,oBAAI,CAACL,KAAK,YAAYM,KAAjB,IACAN,KAAK,YAAYtC,EAAE,CAAC6B,IAAH,CAAQe,KAD1B,KAEAN,KAAK,CAACO,QAAN,CAAeF,UAAU,CAACG,QAAX,GAAsBC,QAAtB,EAAf,CAFJ,EAEsD;AACpDR,kBAAAA,QAAQ,CAACS,IAAT,CAAcL,UAAd;AACD;AACF,eAND;AAQA,qBAAOJ,QAAP;AACD;AAbkC,WADvC,EAeK;AACD,yBAAc,mBAASU,SAAT,EAAoB;AAChC,kBAAIX,KAAK,GAAG,EAAZ;AACAW,cAAAA,SAAS,CAACP,OAAV,CAAkB,UAAUH,QAAV,EAAoB;AACpCD,gBAAAA,KAAK,CAACU,IAAN,CAAWT,QAAQ,CAACO,QAAT,GAAoBC,QAApB,EAAX;AACD,eAFD;AAGA,qBAAOT,KAAP;AACD;AAPA,WAfL;AAwBC;AA5Ca;AANlB;AAFF,GADA;AAnBA9B,EAAAA,GAAG,CAACC,MAAJ,CAAWQ,WAAX,CAAuBG,IAAvB,CAA4BjB,aAA5B,GAA4CA,aAA5C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2020 Christian Boulanger, Derrell Lipman\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\nqx.Class.define(\"qxl.dialog.formElement.List\",\n{\n  statics :\n  {\n    register : function() {\n      qxl.dialog.Dialog.registerFormElementHandlers(\n        \"list\", this._registration);\n    },\n\n    _registration : {\n      initElement : function(fieldType, fieldData, key) {\n        let formElement = new qx.ui.form.List();\n        if (fieldData.selectionMode) {\n          formElement.setSelectionMode(fieldData.selectionMode);\n        }\n        if (fieldData.dragSelection) {\n          var mode = formElement.getSelectionMode();\n          if (mode == \"single\" || mode == \"one\") {\n            this.debug(\"Drag selection not available in \" + mode);\n          } else {\n            formElement.setDragSelection(fieldData.dragSelection);\n          }\n        }\n        let model = qx.data.marshal.Json.createModel(fieldData.options);\n        new qx.data.controller.List(model, formElement, \"label\");\n        return formElement;\n      },\n\n      addToFormController : function(fieldType, fieldData, key, formElement) {\n      this._formController.addTarget(\n        formElement, \"selection\", key, true, {\n          \"converter\" : function(value) {\n            var selected=[];\n            var selectables = formElement.getSelectables();\n            selectables.forEach(function(selectable) {\n              if ((value instanceof Array ||\n                   value instanceof qx.data.Array) &&\n                  value.includes(selectable.getModel().getValue())) {\n                selected.push(selectable);\n              }\n            });\n\n            return selected;\n          }\n        }, {\n          \"converter\" : function(selection) {\n            var value = [];\n            selection.forEach(function (selected) {\n              value.push(selected.getModel().getValue());\n            });\n            return value;\n          }\n        });\n      }\n    }\n  }\n});\n"
  ]
}