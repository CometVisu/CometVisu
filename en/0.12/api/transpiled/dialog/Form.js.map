{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/qx_packages/cboulanger_qx-contrib-Dialog_v2_1_1/source/class/dialog/Form.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dialog",
    "Dialog",
    "properties",
    "formData",
    "check",
    "nullable",
    "event",
    "apply",
    "model",
    "labelColumnWidth",
    "init",
    "members",
    "_formContainer",
    "_form",
    "_formValidator",
    "_formController",
    "getForm",
    "_createWidgetContent",
    "container",
    "ui",
    "Composite",
    "setLayout",
    "layout",
    "VBox",
    "hbox",
    "HBox",
    "add",
    "_message",
    "basic",
    "Label",
    "setRich",
    "setMinWidth",
    "setAllowStretchX",
    "flex",
    "formTag",
    "FormTag",
    "Grow",
    "buttonPane",
    "_createButtonPane",
    "okButton",
    "_createOkButton",
    "cancelButton",
    "_createCancelButton",
    "_applyFormData",
    "old",
    "getModel",
    "removeAllBindings",
    "dispose",
    "e",
    "getValidationManager",
    "removeAll",
    "modelData",
    "Object",
    "getOwnPropertyNames",
    "key",
    "value",
    "undefined",
    "data",
    "marshal",
    "Json",
    "createModel",
    "setModel",
    "form",
    "Form",
    "core",
    "Environment",
    "get",
    "setQxObjectId",
    "addOwnedQxObject",
    "controller",
    "_onFormReady",
    "fieldData",
    "formElement",
    "type",
    "toLowerCase",
    "addGroupHeader",
    "TextArea",
    "setHeight",
    "lines",
    "setLiveUpdate",
    "TextField",
    "maxLength",
    "setMaxLength",
    "DateField",
    "dateFormat",
    "setDateFormat",
    "PasswordField",
    "getContentElement",
    "setAttribute",
    "ComboBox",
    "options",
    "forEach",
    "item",
    "listItem",
    "ListItem",
    "label",
    "icon",
    "SelectBox",
    "List",
    "RadioGroup",
    "orientation",
    "setUserData",
    "radioButton",
    "RadioButton",
    "CheckBox",
    "Spinner",
    "min",
    "setMinimum",
    "max",
    "setMaximum",
    "step",
    "setSingleStep",
    "fractionsDigits",
    "fd",
    "nf",
    "util",
    "format",
    "NumberFormat",
    "setMinimumFractionDigits",
    "setMaximumFractionDigits",
    "setNumberFormat",
    "error",
    "_this",
    "addTarget",
    "converter",
    "validate",
    "lang",
    "Function",
    "bind",
    "selected",
    "selectables",
    "getSelectables",
    "selectable",
    "getValue",
    "selection",
    "sValue",
    "getUserData",
    "validator",
    "validation",
    "required",
    "setRequired",
    "Validate",
    "charAt",
    "regExp",
    "RegExp",
    "substr",
    "length",
    "errorMessage",
    "AsyncValidator",
    "Type",
    "isString",
    "proxy",
    "method",
    "replace",
    "eval",
    "warn",
    "message",
    "invalidMessage",
    "validationFunc",
    "validatorObj",
    "__asyncInProgress",
    "valid",
    "setValid",
    "tr",
    "width",
    "setWidth",
    "placeholder",
    "setPlaceholder",
    "enabled",
    "setEnabled",
    "isObject",
    "events",
    "func",
    "isFunction",
    "Error",
    "addListener",
    "view",
    "FormRenderer",
    "getLayout",
    "setColumnFlex",
    "setColumnMaxWidth",
    "getLabelColumnWidth",
    "setAllowGrowX",
    "_okButton",
    "_handleOk",
    "hide",
    "getCallback",
    "call",
    "getContext",
    "Serializer",
    "toNativeObject",
    "resetCallback"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/cboulanger/qx-contrib-Dialog\n\n   Copyright:\n     2007-2018 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/* global qx dialog*/\n/* eslint-env es4 */\n\n/**\n * A dialog with a form that is constructed on-the-fly\n *\n * @require(dialog.FormRenderer)\n * @require(qx.util.Serializer)\n * @require(qx.util.Validate)\n */\nqx.Class.define(\"dialog.Form\", {\n  extend: dialog.Dialog,\n  properties: {\n    /**\n     * Data to create a form with multiple fields.\n     * So far implemented:\n     *   TextField / TextArea\n     *   ComboBox\n     *   SelectBox\n     *   RadioGroup\n     *   CheckBox\n     *\n     * <pre>\n     * {\n     *  \"username\" : {\n     *     'type'  : \"TextField\",\n     *     'label' : \"User Name\",\n     *     'value' : \"\"\n     *   },\n     *   \"address\" : {\n     *     'type'  : \"TextArea\",\n     *     'label' : \"Address\",\n     *     'lines' : 3\n     *   },\n     *   \"domain\" : {\n     *     'type'  : \"SelectBox\",\n     *     'label' : \"Domain\",\n     *     'value' : 1,\n     *     'options' : [\n     *       { 'label' : \"Company\", 'value' : 0 },\n     *       { 'label' : \"Home\",    'value' : 1 }\n     *     ]\n     *   },\n     *   \"commands\" : {\n     *    'type'  : \"ComboBox\",\n     *     'label' : \"Shell command to execute\",\n     *     'options' : [\n     *       { 'label' : \"ln -s *\" },\n     *       { 'label' : \"rm -Rf /\" }\n     *     ]\n     *   }\n     * }\n     * </pre>\n     *\n     */\n    formData: {\n      check: \"Map\",\n      nullable: true,\n      event: \"changeFormData\",\n      apply: \"_applyFormData\"\n    },\n\n    /**\n     * The model of the result data\n     */\n    model: {\n      check: \"qx.core.Object\",\n      nullable: true,\n      event: \"changeModel\"\n    },\n\n    /**\n     * The default width of the column with the field labels\n     */\n    labelColumnWidth: {\n      check: \"Integer\",\n      nullable: false,\n      init: 100\n    }\n  },\n\n  members: {\n    _formContainer: null,\n    _form: null,\n    _formValidator: null,\n    _formController: null,\n\n    /**\n     * Return the form\n     * @return {qx.ui.form.Form}\n     */\n    getForm: function () {\n      return this._form;\n    },\n\n    /**\n     * Create the main content of the widget\n     */\n    _createWidgetContent: function () {\n      let container = new qx.ui.container.Composite();\n      container.setLayout(new qx.ui.layout.VBox(10));\n\n      let hbox = new qx.ui.container.Composite();\n      hbox.setLayout(new qx.ui.layout.HBox(10));\n      container.add(hbox);\n      this._message = new qx.ui.basic.Label();\n      this._message.setRich(true);\n      this._message.setMinWidth(200);\n      this._message.setAllowStretchX(true);\n      hbox.add(this._message, {\n        flex: 1\n      });\n\n      // wrap fields in form tag to avoid Chrome warnings, see https://github.com/cboulanger/qx-contrib-Dialog/issues/19\n      let formTag = new dialog.FormTag();\n      this._formContainer = new qx.ui.container.Composite();\n      this._formContainer.setLayout(new qx.ui.layout.Grow());\n      formTag.add( this._formContainer, {flex: 1} );\n      container.add(formTag, { flex: 1 });\n\n      // buttons\n      let buttonPane = this._createButtonPane();\n      container.add(buttonPane);\n      let okButton = this._createOkButton();\n      buttonPane.add(okButton);\n      let cancelButton = this._createCancelButton();\n      buttonPane.add(cancelButton);\n\n      this.add(container);\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param formData {Map} The form data map\n     * @param old {Map|null} The old value\n     * @lint ignoreDeprecated(alert,eval)\n     */\n    _applyFormData: function (formData, old) {\n      if (this._formController) {\n        try {\n          this.getModel().removeAllBindings();\n          this._formController.dispose();\n        } catch (e) {\n        }\n      }\n      if (this._form) {\n        try {\n          this._form.getValidationManager().removeAllBindings();\n          this._form.dispose();\n        } catch (e) {\n        }\n      }\n      this._formContainer.removeAll();\n      if (!formData) {\n        return;\n      }\n      if (this.getModel()) {\n        this.getModel().removeAllBindings();\n        this.getModel().dispose();\n      }\n      let modelData = {};\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        modelData[key] = formData[key].value !== undefined\n        ? formData[key].value\n        : null;\n      }\n      let model = qx.data.marshal.Json.createModel(modelData);\n      this.setModel(model);\n      // form\n      this._form = new qx.ui.form.Form();\n      if (qx.core.Environment.get(\"module.objectid\") === true) {\n        this._form.setQxObjectId(\"form\");\n        this.addOwnedQxObject(this._form);\n      }\n      this._formController = new qx.data.controller.Object(this.getModel());\n      this._onFormReady(this._form);\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        let fieldData = formData[key];\n        let formElement = null;\n        switch (fieldData.type.toLowerCase()) {\n          case \"groupheader\":\n            this._form.addGroupHeader(fieldData.value);\n            break;\n          case \"textarea\":\n            formElement = new qx.ui.form.TextArea();\n            formElement.setHeight(fieldData.lines * 16);\n            formElement.setLiveUpdate(true);\n            break;\n          case \"textfield\":\n            formElement = new qx.ui.form.TextField();\n            if (fieldData.maxLength)\n              formElement.setMaxLength(fieldData.maxLength);\n            formElement.setLiveUpdate(true);\n            break;\n          case \"datefield\":\n          case \"date\":\n            formElement = new qx.ui.form.DateField();\n            if (fieldData.dateFormat) {\n              formElement.setDateFormat(fieldData.dateFormat);\n            }\n            break;\n          case \"passwordfield\":\n          case \"password\":\n            formElement = new qx.ui.form.PasswordField();\n            formElement.getContentElement().setAttribute(\"autocomplete\", \"password\");\n            break;\n          case \"combobox\":\n            formElement = new qx.ui.form.ComboBox();\n            fieldData.options.forEach(function (item) {\n              let listItem = new qx.ui.form.ListItem(item.label, item.icon);\n              formElement.add(listItem);\n            });\n            break;\n          case \"selectbox\":\n            formElement = new qx.ui.form.SelectBox();\n            model = qx.data.marshal.Json.createModel(fieldData.options);\n            new qx.data.controller.List(model, formElement, \"label\");\n            break;\n          case \"radiogroup\":\n            formElement = new qx.ui.form.RadioGroup();\n            if (fieldData.orientation) {\n              formElement.setUserData(\"orientation\", fieldData.orientation);\n            }\n            fieldData.options.forEach(function (item) {\n              let radioButton = new qx.ui.form.RadioButton(item.label);\n              radioButton.setUserData(\n              \"value\",\n              item.value !== undefined ? item.value : item.label\n              );\n              formElement.add(radioButton);\n            }, this);\n            break;\n          case \"label\":\n            formElement = new qx.ui.form.TextField(); // dummy\n            formElement.setUserData(\"excluded\", true);\n            break;\n          case \"checkbox\":\n            formElement = new qx.ui.form.CheckBox(fieldData.label);\n            break;\n          case \"spinner\":\n            formElement = new qx.ui.form.Spinner();\n            if (fieldData.min) {\n              formElement.setMinimum(fieldData.min);\n            }\n            if (fieldData.max) {\n              formElement.setMaximum(fieldData.max);\n            }\n            if (fieldData.step) {\n              formElement.setSingleStep(fieldData.step);\n            }\n            if(fieldData.fractionsDigits) {\n              let fd = fieldData.fractionsDigits;\n              let nf = new qx.util.format.NumberFormat();\n              if(fd.min) {\n                nf.setMinimumFractionDigits(fd.min);\n              }\n              if(fd.max) {\n                nf.setMaximumFractionDigits(fd.max);\n              }\n              formElement.setNumberFormat(nf);\n            }\n            break;\n          default:\n            this.error(\"Invalid form field type:\" + fieldData.type);\n        }\n        formElement.setUserData(\"key\", key);\n        let _this = this;\n        if (typeof fieldData.type == \"string\") {\n          switch (fieldData.type.toLowerCase()) {\n            case \"textarea\":\n            case \"textfield\":\n            case \"passwordfield\":\n            case \"combobox\":\n            case \"datefield\":\n            case \"spinner\":\n              this._formController.addTarget(formElement, \"value\", key, true, null, {\n                converter: function (value) {\n                  _this._form.getValidationManager().validate();\n                  return value;\n                }\n              });\n              break;\n            case \"checkbox\":\n              this._formController.addTarget(formElement, \"value\", key, true, null);\n              break;\n            case \"selectbox\":\n              this._formController.addTarget(formElement, \"selection\", key, true, {\n                converter: qx.lang.Function.bind(function (value) {\n                  let selected = null;\n                  let selectables = this.getSelectables();\n                  selectables.forEach(function (selectable) {\n                    if (selectable.getModel().getValue() === value) {\n                      selected = selectable;\n                    }\n                  }, this);\n                  if (!selected) {\n                    return [selectables[0]];\n                  }\n                  return [selected];\n                }, formElement)\n              }, {\n                converter: qx.lang.Function.bind(function (selection) {\n                  let value = selection[0].getModel().getValue();\n                  return value;\n                }, formElement)\n              });\n              break;\n            case \"radiogroup\":\n              this._formController.addTarget(formElement, \"selection\", key, true, {\n                converter: qx.lang.Function.bind(function (value) {\n                  let selectables = this.getSelectables();\n                  let selection = [];\n                  if (value) {\n                    selectables.forEach(function (selectable) {\n                      let sValue = selectable.getUserData(\"value\");\n                      if (sValue === value) {\n                        selection = [selectable];\n                      }\n                    }, this);\n                  }\n                  return selection;\n                }, formElement)\n              }, {\n                converter: function (selection) {\n                  let value = selection[0].getUserData(\"value\");\n                  return value;\n                }\n              });\n              break;\n          }\n        }\n        /**\n         * Validation\n         */\n        let validator = null;\n        if (formElement && fieldData.validation) {\n          // required field\n          if (fieldData.validation.required) {\n            formElement.setRequired(true);\n          }\n          // sync validation\n          if (fieldData.validation.validator) {\n            validator = fieldData.validation.validator;\n            if (typeof validator == \"string\") {\n              if (qx.util.Validate[validator]) {\n                validator = qx.util.Validate[validator]();\n              } else if (validator.charAt(0) === \"/\") {\n                validator = qx.util.Validate.regExp(\n                new RegExp(validator.substr(1, validator.length - 2)),\n                fieldData.validation.errorMessage\n                );\n              } else {\n                this.error(\"Invalid string validator.\");\n              }\n            } else if (!(validator instanceof qx.ui.form.validation.AsyncValidator) && typeof validator !== \"function\") {\n              this.error(\"Invalid validator.\");\n            }\n          }\n          // async validation\n          if (qx.lang.Type.isString(fieldData.validation.proxy) &&\n          qx.lang.Type.isString(fieldData.validation.method)\n          ) {\n            /**\n             * fieldData.validation.proxy\n             * the name of a global variable (or path) to a function that acts as the proxy of\n             * the 'send' or 'execute' function of a preconfigured JsonRpc client. The function\n             * receives the following parameters: service method (string), parameters (array)\n             * and callback (function). It proxies the parameters to the given JsonRpc method and\n             * calls the callback with the result (true if valid, false if not) received from the\n             * server. The JsonRpc service name is preconfigured by the server and cannot be\n             * changed by the client.\n             */\n            // clean\n            let proxy = fieldData.validation.proxy.replace(/;\\n/g, \"\");\n            try {\n              eval('proxy = ' + proxy + ';');\n            } catch (e) {\n              this.warn(\"Invalid proxy name\");\n            }\n            if (typeof proxy == \"function\") {\n              let method = fieldData.validation.method;\n              let message = fieldData.validation.invalidMessage;\n              let _this = this;\n              let validationFunc = function (validatorObj, value) {\n                if (!validatorObj.__asyncInProgress) {\n                  validatorObj.__asyncInProgress = true;\n                  proxy(method, [value], function (valid) {\n                    validatorObj.setValid(valid, message || this.tr('Value is invalid'));\n                    validatorObj.__asyncInProgress = false;\n                  });\n                }\n              };\n              validator = new qx.ui.form.validation.AsyncValidator(validationFunc);\n            }\n          }\n        }\n\n        /**\n         * other widget properties @todo: allow to set all properties\n         */\n        if (fieldData.width !== undefined) {\n          formElement.setWidth(fieldData.width);\n        }\n        if (fieldData.placeholder !== undefined) {\n          formElement.setPlaceholder(fieldData.placeholder);\n        }\n        if (fieldData.enabled !== undefined) {\n          formElement.setEnabled(fieldData.enabled);\n        }\n\n        /**\n         * Events\n         */\n        if (qx.lang.Type.isObject(fieldData.events)) {\n          for (let type in fieldData.events) {\n            try {\n              let func = eval(\"(\" + fieldData.events[type] + \")\"); // eval is evil, I know.\n              if (!qx.lang.Type.isFunction(func)) {\n                throw new Error();\n              }\n              formElement.addListener(type, func, formElement);\n            } catch (e) {\n              this.warn(\"Invalid '\" + type + \"' event handler for form element '\" + key + \"'.\");\n            }\n          }\n        }\n\n        // Putting it all together\n        let label = fieldData.label;\n        this._form.add(formElement, label, validator);\n        // Add the form elements as objects owned by the form widget\n        if (qx.core.Environment.get(\"module.objectid\") === true) {\n          formElement.setQxObjectId(key);\n          this._form.addOwnedQxObject(formElement);\n        }\n      }\n\n\n      let view = new dialog.FormRenderer(this._form);\n      view.getLayout().setColumnFlex(0, 0);\n      view.getLayout().setColumnMaxWidth(0, this.getLabelColumnWidth());\n      view.getLayout().setColumnFlex(1, 1);\n      view.setAllowGrowX(true);\n      this._formContainer.add(view);\n      this._form.getValidationManager().validate();\n    },\n\n    /**\n     * Create OK Button\n     * unlike our superclass, we do not add an appear listener to focus OK\n     * @override\n     * @return {qx.ui.form.Button}\n     */\n    _createOkButton: function () {\n      return this.base(arguments,true);\n    },\n\n    /**\n     * Hook for subclasses to do something with the form, for example\n     * in order to attach bindings to the validation manager.\n     * Default behavior: bind the enabled state of the \"OK\" button to the\n     * validity of the current form.\n     * @param form {qx.ui.form.Form} The form to bind\n     */\n    _onFormReady: function (form) {\n      form.getValidationManager().bind(\"valid\", this._okButton, \"enabled\", {\n        converter: function (value) {\n          return value || false;\n        }\n      });\n    },\n\n    /**\n     * Handle click on ok button. Calls callback with the result map\n     * @override\n     */\n    _handleOk: function () {\n      this.hide();\n      if (this.getCallback()) {\n        this.getCallback().call(\n        this.getContext(),\n        qx.util.Serializer.toNativeObject(this.getModel())\n        );\n      }\n      this.resetCallback();\n    }\n  }\n});\n"
  ]
}