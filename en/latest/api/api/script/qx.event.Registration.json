{"attributes": {"fullName": "qx.event.Registration", "packageName": "qx.event", "isStatic": true, "type": "class", "name": "Registration"}, "type": "class", "children": [{"attributes": {"text": "<p>Wrapper for browser generic event handling.</p>\n\n<p>Supported events differ from target to target. Generally the handlers\nin {@link qx.event.handler} defines the available features.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "private", "line": 287, "isStatic": true, "name": "__fireEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "optional": true, "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to the event&#8217;s init method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create an event object and dispatch it on the given target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the event</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}, {"attributes": {"name": "#createEvent"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {"access": "private", "line": 358, "isStatic": true, "name": "__fireNonBubblingEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "optional": true, "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to the event&#8217;s init method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create an event object and dispatch it on the given target.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the event</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}, {"attributes": {"name": "#createEvent"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {"line": 514, "isStatic": true, "name": "addDispatcher"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "dispatcher"}, "type": "param", "children": [{"attributes": {"text": "<p>Event dispatcher to add</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.IEventDispatcher"}, "type": "entry"}]}]}, {"attributes": {"name": "priority"}, "type": "param", "children": [{"attributes": {"text": "<p>One of {@link qx.event.Registration#PRIORITY_FIRST}, {@link qx.event.Registration#PRIORITY_NORMAL} or {@link qx.event.Registration#PRIORITY_LAST}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Register an event dispatcher.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>if the dispatcher does not have the IEventHandler interface.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"line": 466, "isStatic": true, "name": "addHandler"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "handler"}, "type": "param", "children": [{"attributes": {"text": "<p>Event handler to add</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.IEventHandler"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Register an event handler.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>if the handler does not have the IEventHandler interface.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"line": 122, "isStatic": true, "name": "addListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event e.g. &#8220;click&#8221;, &#8220;keydown&#8221;, ...</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>Event listener function</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>Reference to the &#8216;this&#8217; variable inside the event listener. When not given, the corresponding dispatcher usually falls back to a default, which is the target by convention. Note this is not a strict requirement, i.e. custom dispatchers can follow a different strategy.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the capturing phase or the bubbling phase of the event. The default is to attach the event handler to the bubbling phase.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add an event listener to a <span class=\"caps\">DOM</span> target. The event listener is passed an\ninstance of {@link qx.event.type.Event} containing all relevant information\nabout the event as parameter.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>An opaque id, which can be used to remove the event listener using the {@link #removeListenerById} method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 227, "isStatic": true, "name": "createEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>The type of the event to create</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "optional": true, "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class to use</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Array which will be passed to the event&#8217;s init method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get an event instance of the given class, which can be dispatched using\nan event manager. The created events must be initialized using\n{@link qx.event.type.Event#init}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>An instance of the given class.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}]}, {"attributes": {"access": "internal", "isInternal": true, "line": 181, "isStatic": true, "name": "deleteAllListeners"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target to delete the internal map for all event listeners.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Internal helper for deleting the listeners map used during shutdown.</p>"}, "type": "desc"}]}, {"attributes": {"line": 271, "isStatic": true, "name": "dispatchEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "event"}, "type": "param", "children": [{"attributes": {"text": "<p>The event object to dispatch. The event object must be obtained using {@link #createEvent} and initialized using {@link qx.event.type.Event#init}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Dispatch an event object on the given target.</p>\n\n<p>It is normally better to use {@link #fireEvent} because it uses\nthe event pooling and is quite handy otherwise as well. After dispatching\nthe event object will be pooled for later reuse or disposed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not. Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 319, "isStatic": true, "name": "fireEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "optional": true, "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to the event&#8217;s init method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create an event object and dispatch it on the given target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not. Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "#createEvent"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {"line": 338, "isStatic": true, "name": "fireEventAsync"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "optional": true, "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to the event&#8217;s init method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create an event object and dispatch it on the given target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>a promise aggregated from the event handlers; if the default was prevented, the promise is rejected</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.Promise"}, "type": "entry"}]}]}, {"attributes": {"name": "#createEvent"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {"line": 392, "isStatic": true, "name": "fireNonBubblingEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Event type to fire</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "qx.event.type.Event", "optional": true, "name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The event class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>Arguments, which will be passed to the event&#8217;s init method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Create an event object and dispatch it on the given target.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the event default was prevented or not. Returns true, when the event was <span class=\"caps\">NOT</span> prevented.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "#createEvent"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {"line": 535, "isStatic": true, "name": "getDispatchers"}, "type": "method", "children": [{"attributes": {"text": "<p>Get a list of registered event dispatchers.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>all registered event dispatcher</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.IEventDispatcher", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"line": 487, "isStatic": true, "name": "getHandlers"}, "type": "method", "children": [{"attributes": {"text": "<p>Get a list of registered event handlers.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>registered event handlers</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.IEventHandler", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"line": 54, "isStatic": true, "name": "getManager"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get an instance of the event manager, which can handle events for the\ngiven target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The event manger for the target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.Manager"}, "type": "entry"}]}]}]}, {"attributes": {"line": 199, "isStatic": true, "name": "hasListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>The event type</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to check for listeners of the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check whether there are one or more listeners for an event type\nregistered at the target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the target has event listeners of the given type.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 168, "isStatic": true, "name": "removeAllListeners"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target to remove all event listeners from.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove all event listeners, which are attached to the given event target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the events were existant and were removed successfully.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 143, "isStatic": true, "name": "removeListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>The pointer to the event listener</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>Reference to the &#8216;this&#8217; variable inside the event listener.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to remove the event listener of the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove an event listener from an event target.</p>\n\n<p>Note: All registered event listeners will automatically at page unload\n  so it is not necessary to detach events in the destructor.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the event was removed. Return <code>false</code> if the event was already removed before.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 157, "isStatic": true, "name": "removeListenerById"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "id"}, "type": "param", "children": [{"attributes": {"text": "<p>The id returned by {@link #addListener}</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the event was removed. Return <code>false</code> if the event was already removed before.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 96, "isStatic": true, "name": "removeManager"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "mgr"}, "type": "param", "children": [{"attributes": {"text": "<p>The manager to remove</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.Manager"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes a manager for a specific window from the list.</p>\n\n<p>Normally only used when the manager gets disposed through\nan unload event of the attached window.</p>"}, "type": "desc"}]}, {"attributes": {"line": 211, "isStatic": true, "name": "serializeListeners"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a serialized array of all events attached on the given target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Array of maps where everyone contains the keys: <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map", "dimensions": 1}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"access": "private", "type": "Array", "name": "__dispatchers", "value": "[]"}, "type": "constant", "children": [{"attributes": {"text": "<p>Contains all known event dispatchers</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "optional": true, "name": "fireNonBubblingEventAsync"}, "type": "constant", "children": [{"attributes": {"text": "<p>Create an event object and dispatch it on the given target.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required.</p><p>Any valid event target</p><p>Event type to fire</p><p>The event class</p><p>Arguments, which will be passed to the event&#8217;s init method.</p><p>a promise aggregated from the event handlers; if the default was prevented, the promise is rejected</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.Promise"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "name": "__managers"}, "type": "constant", "children": [{"attributes": {"text": "<p>Static list of all instantiated event managers. The key is the qooxdoo\nhash value of the corresponding window</p>"}, "type": "desc"}]}, {"attributes": {"type": "Number", "name": "PRIORITY_NORMAL", "value": "0"}, "type": "constant", "children": [{"attributes": {"text": "<p>Default priority. Used by handlers and dispatchers.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "type": "Array", "name": "__handlers", "value": "[]"}, "type": "constant", "children": [{"attributes": {"text": "<p>Contains all known event handlers</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}, {"attributes": {"name": "PRIORITY_FIRST"}, "type": "constant", "children": [{"attributes": {"text": "<p>Highest priority. Used by handlers and dispatchers.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"type": "Number", "name": "PRIORITY_LAST", "value": "32000"}, "type": "constant", "children": [{"attributes": {"text": "<p>Lowest priority. Used by handlers and dispatchers.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}]}