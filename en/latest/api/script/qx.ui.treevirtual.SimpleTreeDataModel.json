{"attributes": {"name": "SimpleTreeDataModel", "packageName": "qx.ui.treevirtual", "mixins": "qx.ui.treevirtual.MTreePrimitive", "superClass": "qx.ui.table.model.Abstract", "fullName": "qx.ui.treevirtual.SimpleTreeDataModel", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>A simple tree data model used as the table model</p>\n\n<p>The object structure of a single node of the tree is:</p>\n\n<pre class=\"javascript\">\n{\n  // USER-PROVIDED ATTRIBUTES\n  // ------------------------\n  type           : qx.ui.treevirtual.MTreePrimitive.Type.LEAF,\n  parentNodeId   : 23,    // index of the parent node in _nodeArr\n\n  label          : \"My Documents\",\n  bSelected      : true,  // true if node is selected; false otherwise.\n  bOpened        : true,  // true (-), false (+)\n  bHideOpenClose : false, // whether to hide the open/close button\n  icon           : \"images/folder.gif\",\n  iconSelected   : \"images/folder_selected.gif\",\n\n  cellStyle      : \"background-color:cyan\"\n  labelStyle     : \"background-color:red;color:white\"\n\n  // USER-PROVIDED COLUMN DATA\n  columnData     : [\n                     null, // null at index of tree column (typically 0)\n                     \"text of column 1\",\n                     \"text of column 2\"\n                   ],\n\n  // APPLICATION-, MIXIN-, and SUBCLASS-PROVIDED CUSTOM DATA\n  data           : {\n                     application :\n                     {\n                         // application-specific user data goes in here\n                         foo: \"bar\",\n                         ...\n                     },\n                     MDragAndDropSupport :\n                     {\n                         // Data required for the Drag & Drop mixin.\n                         // When a mixin is included, its constructor\n                         // should create this object, named according\n                         // to the mixin or subclass name (empty or\n                         // otherwise)\n                     },\n                     ... // Additional mixins or subclasses.\n                   },\n\n  // INTERNALLY-CALCULATED ATTRIBUTES\n  // --------------------------------\n  // The following properties need not (and should not) be set by the\n  // caller, but are automatically calculated.  Some are used internally,\n  // while others may be of use to event listeners.\n\n  nodeId         : 42,   // The index in _nodeArr, useful to event listeners.\n  children       : [ ],  // each value is an index into _nodeArr\n\n  level          : 2,    // The indentation level of this tree node\n\n  bFirstChild    : true,\n  lastChild      : [ false ],  // Array where the index is the column of\n                               // indentation, and the value is a boolean.\n                               // These are used to locate the\n                               // appropriate \"tree line\" icon.\n}\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"docFrom": "qx.core.Object", "line": 99, "isCtor": true, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "ctor"}, "type": "method"}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 776, "name": "__calculateLastChildFlags"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>A node identifier, as previously returned by {@link #addBranch} or {@link #addLeaf}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calculates the lastChild flags to the nodes, so that the tree can render the\ntree lines right.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 663, "name": "__inorder"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>A node identifier, as previously returned by {@link #addBranch} or {@link #addLeaf}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "level"}, "type": "param", "children": [{"attributes": {"text": "<p>the level in the hierarchy</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Orders the node and creates all data needed to render the tree.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 822, "name": "__render"}, "type": "method", "children": [{"attributes": {"text": "<p>Renders the tree data.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 801, "name": "__setLastChildFlag"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "node"}, "type": "param", "children": [{"attributes": {"text": "<p>the node object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "isLastChild"}, "type": "param", "children": [{"attributes": {"text": "<p>whether the node is the last child</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the last child flag for a node and all it&#8217;s parents.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 1193, "name": "_applyFilter"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "apply", "children": [{"attributes": {"applies": "qx.ui.treevirtual.SimpleTreeDataModel#filter"}, "type": "entry"}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 1160, "name": "_clearSelections"}, "type": "method", "children": [{"attributes": {"text": "<p>Clear all selections in the data model.  This method does not clear\nselections displayed in the widget, and is intended for internal use,\nnot by users of this class.</p>"}, "type": "desc"}]}, {"attributes": {"line": 461, "name": "addBranch"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "parentNodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>The node id of the parent of the node being added</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "label"}, "type": "param", "children": [{"attributes": {"text": "<p>The string to display as the label for this node</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "bOpened"}, "type": "param", "children": [{"attributes": {"text": "<i>True</i> if the branch should be rendered in its opened state; <i>false</i> otherwise."}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "bHideOpenCloseButton"}, "type": "param", "children": [{"attributes": {"text": "<i>True</i> if the open/close button should not be displayed; <i>false</i> if the open/close button should be displayed"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "icon"}, "type": "param", "children": [{"attributes": {"text": "<p>The relative (subject to alias expansion) or full path of the icon to display for this node when it is not a selected node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "iconSelected"}, "type": "param", "children": [{"attributes": {"text": "<p>The relative (subject to alias expansion) or full path of the icon to display for this node when it is a selected node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add a branch to the tree.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The node id of the newly-added branch.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 499, "name": "addLeaf"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "parentNodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>The node id of the parent of the node being added</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "label"}, "type": "param", "children": [{"attributes": {"text": "<p>The string to display as the label for this node</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "icon"}, "type": "param", "children": [{"attributes": {"text": "<p>The relative (subject to alias expansion) or full path of the icon to display for this node when it is not a selected node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "iconSelected"}, "type": "param", "children": [{"attributes": {"text": "<p>The relative (subject to alias expansion) or full path of the icon to display for this node when it is a selected node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add a leaf to the tree.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The node id of the newly-added leaf.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 932, "name": "clearData"}, "type": "method", "children": [{"attributes": {"text": "<p>Clears the tree of all nodes</p>"}, "type": "desc"}]}, {"attributes": {"line": 973, "name": "getColumnData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>A node identifier, as previously returned by {@link #addBranch} or {@link #addLeaf}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>The column number to which the provided data applies</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Retrieve the data from an additional column (a column other than the\ntree column) of the tree.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The cell data for the specified column</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 922, "name": "getData"}, "type": "method", "children": [{"attributes": {"text": "<p>Return the array of node data.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Array of node objects. See {@link qx.ui.treevirtual.SimpleTreeDataModel} for a description nodes in this array.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getFilter", "fromProperty": "filter"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>filter</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 419, "name": "getNode"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>The index of the row.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the node object specific to a currently visible row. In this\nsimple tree data model, that&#8217;s the same as retrieving the value of the\ntree column of the specified row.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>Thrown if the row index is out of bounds.</p>", "type": "Error"}, "type": "desc"}]}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The node object associated with the specified row.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1148, "name": "getNodeFromRow"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>zero-based row index.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This operation maps rowIndexes to nodes.  It does the opposite job to {@link #getRowFromNodeId}.\nThis function is useful to map selection (row based) to nodes.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>node associated to <tt>rowIndex</tt>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1123, "name": "getNodeRowMap"}, "type": "method", "children": [{"attributes": {"text": "<p>Return the mapping of nodes to rendered rows.  This function is intended\nfor use by the cell renderer, not by users of this class.\nIt is also useful to select a node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The array containing mappings of nodes to rendered rows.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 328, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getRowCount"}, "type": "method"}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 334, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getRowData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowIndex"}, "type": "param"}]}]}, {"attributes": {"line": 1136, "name": "getRowFromNodeId"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>The id of the node (as would have been returned by addBranch(), addLeaf(), etc.) to get the row index for.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This operation maps nodes to rowIndexes.  It does the opposite job to {@link #getNodeFromRow}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>row index for the given node ID</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1179, "name": "getSelectedNodes"}, "type": "method", "children": [{"attributes": {"text": "<p>Return the nodes that are currently selected.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>An array containing the nodes that are currently selected.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"line": 283, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getSortColumnIndex"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the column index the model is sorted by. This model is never\nsorted, so -1 is returned.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>-1, to indicate that the model is not sorted.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 191, "name": "getTree"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the tree object for which this data model is used.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": ""}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.ui.treevirtual.TreeVirtual"}, "type": "entry"}]}]}]}, {"attributes": {"line": 322, "name": "getTreeColumn"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the column in which the tree is to be displayed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The column in which the tree is to be displayed</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 349, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getValue"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the index of the column.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "rowIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the index of the row.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns a cell value by column index.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>if the row index is out of bounds.</p>", "type": "Error"}, "type": "desc"}]}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The value of the cell.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "#getValueById"}, "type": "see", "children": [{"attributes": {"text": ""}, "type": "desc"}]}]}, {"attributes": {"access": "protected", "name": "initFilter", "fromProperty": "filter"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>filter</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>filter</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 242, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "isColumnEditable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 257, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "isColumnSortable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}]}]}, {"attributes": {"line": 596, "name": "move"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "moveNodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node to be moved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "parentNodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The new parent node, which must not be a <span class=\"caps\">LEAF</span>.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Move a node in the tree.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>If the node object or id is not valid.</p>", "type": "Error"}, "type": "desc"}, {"attributes": {"text": "<p>If one tries to add a child to a non-existent parent.</p>", "type": "Error"}, "type": "desc"}, {"attributes": {"text": "<p>If one tries to add a node to a leaf.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"line": 532, "name": "prune"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node to be pruned from the tree.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "bSelfAlso"}, "type": "param", "children": [{"attributes": {"text": "<p>If <i>true</i> then remove the node identified by <i>nodeId</i> as well as all of the children.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prune the tree by removing, recursively, all of a node&#8217;s children.  If\nrequested, also remove the node itself.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>If the node object or id is not valid.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"name": "resetFilter", "fromProperty": "filter"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>filter</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>"}, "type": "desc"}]}, {"attributes": {"line": 954, "name": "setColumnData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeId"}, "type": "param", "children": [{"attributes": {"text": "<p>A node identifier, as previously returned by {@link #addBranch} or {@link #addLeaf}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>The column number to which the provided data applies</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "data"}, "type": "param", "children": [{"attributes": {"text": "<p>The cell data for the specified column</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add data to an additional column (a column other than the tree column)\nof the tree.</p>"}, "type": "desc"}]}, {"attributes": {"line": 226, "name": "setColumnEditable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>The column of which to set the editable state.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "editable"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether the column should be editable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets whether a column is editable.</p>"}, "type": "desc"}]}, {"attributes": {"line": 887, "name": "setData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeArr"}, "type": "param", "children": [{"attributes": {"text": "<p>Pass either an Array of node objects, or null. If non-null, nodeArr is an array of node objects containing the entire tree to be displayed.  If loading the whole data en bulk in this way, it is assumed that the data is correct!  No error checking or validation is done.  You&#8217;d better know what you&#8217;re doing!  Caveat emptor. If nodeArr is null, then this call is a notification that the user has completed building or modifying a tree by issuing a series of calls to {@link #addBranch} and/or {@link #addLeaf}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the whole data en bulk, or notifies the data model that node\nmodifications are complete.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>If the parameter has the wrong type.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"line": 203, "name": "setEditable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "editable"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether all columns are editable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets all columns editable or not editable.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setFilter", "fromProperty": "filter"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>filter</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>filter</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #filter}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 995, "name": "setState"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "nodeReference"}, "type": "param", "children": [{"attributes": {"text": "<p>The node to have its attributes set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "attributes"}, "type": "param", "children": [{"attributes": {"text": "<p>Each property name in the map may correspond to the property names of a node which are specified as <i><span class=\"caps\">USER</span>-PROVIDED <span class=\"caps\">ATTRIBUTES</span></i> in {@link SimpleTreeDataModel}.  Each property value will be assigned to the corresponding property of the node specified by nodeId.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set state attributes of a node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>If the node object or id is not valid.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"line": 181, "name": "setTree"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "tree"}, "type": "param", "children": [{"attributes": {"text": "<p>The tree used to render the data in this model.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.ui.treevirtual.TreeVirtual"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Set the tree object for which this data model is used.</p>"}, "type": "desc"}]}, {"attributes": {"line": 310, "name": "setTreeColumn"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>The index of the column in which the tree should be displayed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Specifies which column the tree is to be displayed in.  The tree is\ndisplayed using the SimpleTreeDataCellRenderer.  Other columns may be\nprovided which use different cell renderers.</p>\n\n<p>Setting the tree column involves more than simply setting this column\nindex; it also requires setting an appropriate cell renderer for this\ncolumn, that knows how to render a tree. The expected and typical\nmethod of setting the tree column is to provide it in the &#8216;custom&#8217;\nparameter to the TreeVirtual constructor, which also initializes the\nproper cell renderers. This method does not set any cell renderers. If\nyou wish to call this method on your own, you should also manually set\nthe cell renderer for the specified column, and likely also set the\ncell renderer for column 0 (the former tree column) to something\nappropriate to your data.</p>"}, "type": "desc"}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 372, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "setValue"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}, {"attributes": {"name": "rowIndex"}, "type": "param"}, {"attributes": {"name": "value"}, "type": "param"}]}]}, {"attributes": {"line": 270, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "sortByColumn"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the column to sort by.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "ascending"}, "type": "param", "children": [{"attributes": {"text": "<p>whether to sort ascending.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sorts the model by a column.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>If one tries to sort the tree by column</p>", "type": "Error"}, "type": "desc"}]}]}]}, {"attributes": {}, "type": "properties", "children": [{"attributes": {"allowNull": "true", "apply": "_applyFilter", "check": "Function", "name": "filter", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Gives the user the opportunity to filter the model. The filter\nfunction is called for every node in the model. It gets as an argument the\n<code>node</code> object and has to return\n<code>true</code> if the given data should be shown and\n<code>false</code> if the given data should be ignored.</p>"}, "type": "desc"}]}]}]}