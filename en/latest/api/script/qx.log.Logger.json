{"attributes": {"fullName": "qx.log.Logger", "packageName": "qx.log", "isStatic": true, "type": "bootstrap", "name": "Logger"}, "type": "class", "children": [{"attributes": {"text": "<p>Main qooxdoo logging class.</p>\n\n<p>Used as central logging feature by qx.core.Object.</p>\n\n<p>Extremely modular and lightweight to support logging at bootstrap and\nat shutdown as well.</p>\n\n<ul>\n<li>Supports dynamic appenders to push the output to the user</li>\n<li>Supports buffering of the last 50 messages (configurable)</li>\n<li>Supports different debug levels (&#8220;debug&#8221;, &#8220;info&#8221;, &#8220;warn&#8221; or &#8220;error&#8221;)</li>\n<li>Simple data serialization for incoming messages</li>\n</ul>\n\n<p>Typical use of this class is via qx.core.MLogging which is included into most\nclasses, so you would use &#8220;this.debug(...)&#8221; etc, but qx.log.Logger.debug(),\n.warn(), .error(), .info(), and .trace() can be used directly for static code.</p>\n\n<p>The first parameter is expected to be the context object, ie the object which\nis sending the log; this can be null but that will prevent the filtering from\nfiltering on class name so ideally it will be a real qx.core.Object derived\nobject.  Other parameters are any Javascript object which will be serialized\ninto the log message</p>\n\n<pre class=\"javascript\">\n qx.log.Logger.warn(myObject, \"This is a message to log\", myParam, otherData);\n</pre>\n\n<p>The output of logging is controlled by &#8220;appenders&#8221;, which are classes that\naccept a log message and output it somehow (see examples in qx.log.appender.*);\ntypical examples are qx.log.appender.Console which outputs to the browser\nconsole, or qx.log.appender.Native which outputs messages into a popup\nwindow as part of your Qooxdoo UI.</p>\n\n<p>While it&#8217;s quick and easy to add logging calls to code as and when you need it,\nit is often convenient to control which logging calls output messages at runtime\nrather than having to edit code. @see qx.log.Logger#addFilter</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "private", "line": 667, "isStatic": true, "name": "__detect"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Incoming value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Detects the type of the variable given.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Type of the incoming value. Possible values: &#8220;undefined&#8221;, &#8220;null&#8221;, &#8220;boolean&#8221;, &#8220;number&#8221;, &#8220;string&#8221;, &#8220;function&#8221;, &#8220;array&#8221;, &#8220;error&#8221;, &#8220;map&#8221;, &#8220;class&#8221;, &#8220;instance&#8221;, &#8220;node&#8221;, &#8220;stringify&#8221;, &#8220;unknown&#8221;</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 609, "isStatic": true, "name": "__getAppenders"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "className"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "level"}, "type": "param", "children": [{"attributes": {"text": "<p>the minimum logging level to use the appender</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Finds the appenders for a given classname</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>list of appenders</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 514, "isStatic": true, "name": "__getLoggerName"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Detects the name of the logger to use for an object</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Logger name</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 548, "isStatic": true, "name": "__log"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "level"}, "type": "param", "children": [{"attributes": {"text": "<p>One of &#8220;trace&#8221;, &#8220;debug&#8221;, &#8220;info&#8221;, &#8220;warn&#8221; or &#8220;error&#8221;</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>List of other arguments, where the first is taken as the context object.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Internal logging main routine.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 722, "isStatic": true, "name": "__serialize"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Incoming value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "deep"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether arrays and maps should be serialized for a limited number of items</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Serializes the incoming value. If it is a singular value, the result is\na simple string. For an array or a map the result can also be a\nserialized string of a limited number of individual items.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Contains the keys <code>type</code>, <code>text</code> and <code>trace</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"line": 229, "isStatic": true, "name": "addFilter"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "logger"}, "type": "param", "children": [{"attributes": {"text": "<p>the pattern to match in the logger name</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "RegExp"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "appenderName"}, "type": "param", "children": [{"attributes": {"text": "<p>the name of the appender class, if undefined then all appenders</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "level"}, "type": "param", "children": [{"attributes": {"text": "<p>the minimum logging level to use the appender, if undefined the default level is used</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Adds a filter that specifies the appenders to use for a given logger name (classname).</p>\n\n<p>By default, every log entry is output to all appenders but you can change this\nbehaviour by calling qx.log.Logger.addFilter; every log message is associated\nwith a class and a logging level (ie debug, warn, info, error, etc) and you can\napply a filter on either one.</p>\n\n<p>For example, to restrict the output to only allow qx.ui.* classes to output debug\nlogging information you would use this:</p>\n\n<pre class=\"javascript\">\n   qx.log.Logger.addFilter(/^qx\\.ui/, null, \"debug\");\n </pre>\n\n<p>Note that while the default is to log everything, as soon as you apply one filter\nyou are specifying an exhaustive list of classes; so if you use the above example,\nthe <span class=\"caps\">ONLY</span> classes that will be able to log is qx.ui.*.  If you want to use multiple\nclasses to the output, just add more addFilter calls.</p>\n\n<p>The logging level (eg &#8220;debug&#8221;, &#8220;error&#8221;, etc) is greater than or equal to &#8211; so in\nthe above example, debug, error, warn, and info will be output but trace will not.</p>\n\n<p>The second parameter to addFilter is the classname of the appender to use; this\nallows you to specify that log messages only go to one destination; for example:</p>\n\n<pre class=\"javascript\">\n   qx.log.Logger.addFilter(/^qx\\.ui/, \"qx.log.appender.Console\", \"warn\");\n   qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Native\", \"debug\");\n   qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Console\", \"error\");\n </pre>\n\n<p>In this example, qx.ui.* will only go to the Console appender and only if a warning\nis issued; qx.io.* will go to Native for debug, error, warn, and info and to\nConsole for error, warn, and info</p>"}, "type": "desc"}]}, {"attributes": {"line": 477, "isStatic": true, "name": "clear"}, "type": "method", "children": [{"attributes": {"text": "<p>Deletes the current buffer. Does not influence message handling of the\nconnected appenders.</p>"}, "type": "desc"}]}, {"attributes": {"line": 259, "isStatic": true, "name": "debug"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "message"}, "type": "param", "children": [{"attributes": {"text": "<p>Any number of arguments supported. An argument may have any JavaScript data type. All data is serialized immediately and does not keep references to other objects.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sending a message at level &#8220;debug&#8221; to the logger.</p>"}, "type": "desc"}]}, {"attributes": {"line": 350, "isStatic": true, "name": "deprecatedClassWarning"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the deprecated class.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message to be printed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints a class deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>"}, "type": "desc"}]}, {"attributes": {"line": 416, "isStatic": true, "name": "deprecatedConstantWarning"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>The class the constant is attached to.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"name": "constant"}, "type": "param", "children": [{"attributes": {"text": "<p>The name of the constant as string.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message to be printed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints a constant deprecation warning and a stacktrace if the setting\n<code>qx.debug</code> is set to <code>true</code> <span class=\"caps\">AND</span> the browser supports\n<i>defineGetter</i>!</p>"}, "type": "desc"}]}, {"attributes": {"line": 372, "isStatic": true, "name": "deprecatedEventWarning"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the deprecated class.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"name": "event"}, "type": "param", "children": [{"attributes": {"text": "<p>deprecated event name.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message to be printed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints an event deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>"}, "type": "desc"}]}, {"attributes": {"line": 329, "isStatic": true, "name": "deprecatedMethodWarning"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fcn"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the deprecated function. This is arguments.callee if the calling method is to be deprecated.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message to be printed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints a method deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>"}, "type": "desc"}]}, {"attributes": {"line": 393, "isStatic": true, "name": "deprecatedMixinWarning"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "clazz"}, "type": "param", "children": [{"attributes": {"text": "<p>reference to the deprecated mixin.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message to be printed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints a mixin deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>"}, "type": "desc"}]}, {"attributes": {"line": 448, "isStatic": true, "name": "deprecateMethodOverriding"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Instance to check for overriding.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}, {"attributes": {"name": "baseclass"}, "type": "param", "children": [{"attributes": {"text": "<p>The baseclass as starting point.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}, {"attributes": {"name": "methodName"}, "type": "param", "children": [{"attributes": {"text": "<p>The method name which is deprecated for overriding.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "msg"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional message to be printed.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints a deprecation warning and a stacktrace when a subclass overrides\nthe passed method name. The deprecation is only printed if the setting\n<code>qx.debug</code> is set to <code>true</code>.</p>"}, "type": "desc"}]}, {"attributes": {"line": 298, "isStatic": true, "name": "error"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "message"}, "type": "param", "children": [{"attributes": {"text": "<p>Any number of arguments supported. An argument may have any JavaScript data type. All data is serialized immediately and does not keep references to other objects.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sending a message at level &#8220;error&#8221; to the logger.</p>"}, "type": "desc"}]}, {"attributes": {"line": 89, "isStatic": true, "name": "getLevel"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the currently configured minimum log level required for new\nmessages.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Debug level</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 110, "isStatic": true, "name": "getTreshold"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the currently configured number of messages to be kept in the\nbuffer.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Treshold value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 272, "isStatic": true, "name": "info"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "message"}, "type": "param", "children": [{"attributes": {"text": "<p>Any number of arguments supported. An argument may have any JavaScript data type. All data is serialized immediately and does not keep references to other objects.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sending a message at level &#8220;info&#8221; to the logger.</p>"}, "type": "desc"}]}, {"attributes": {"line": 534, "isStatic": true, "name": "isLoggerEnabled"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "level"}, "type": "param", "children": [{"attributes": {"text": "<p>One of &#8220;trace&#8221;, &#8220;debug&#8221;, &#8220;info&#8221;, &#8220;warn&#8221; or &#8220;error&#8221;</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Detects whether a logger level is enabled for an object</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>True if the logger is enabled</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 146, "isStatic": true, "name": "register"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "appender"}, "type": "param", "children": [{"attributes": {"text": "<p>A static appender class supporting at least a <code>process()</code> method to handle incoming messages.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Registers the given appender and inserts the last cached messages.</p>"}, "type": "desc"}]}, {"attributes": {"line": 239, "isStatic": true, "name": "resetFilters"}, "type": "method", "children": [{"attributes": {"text": "<p>Reset all filters</p>"}, "type": "desc"}]}, {"attributes": {"line": 78, "isStatic": true, "name": "setLevel"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>One of &#8220;debug&#8221;, &#8220;info&#8221;, &#8220;warn&#8221; or &#8220;error&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Configures the minimum log level required for new messages.</p>"}, "type": "desc"}]}, {"attributes": {"line": 99, "isStatic": true, "name": "setTreshold"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Any positive integer</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Configures the number of messages to be kept in the buffer.</p>"}, "type": "desc"}]}, {"attributes": {"line": 311, "isStatic": true, "name": "trace"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"optional": true, "name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "message"}, "type": "param", "children": [{"attributes": {"text": "<p>Any number of arguments supported. An argument may have any JavaScript data type. All data is serialized immediately and does not keep references to other objects.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Prints the current stack trace at level &#8220;info&#8221;</p>"}, "type": "desc"}]}, {"attributes": {"line": 176, "isStatic": true, "name": "unregister"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "appender"}, "type": "param", "children": [{"attributes": {"text": "<p>A static appender class</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Class"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Unregisters the given appender</p>"}, "type": "desc"}]}, {"attributes": {"line": 285, "isStatic": true, "name": "warn"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Contextual object (either instance or static class)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "message"}, "type": "param", "children": [{"attributes": {"text": "<p>Any number of arguments supported. An argument may have any JavaScript data type. All data is serialized immediately and does not keep references to other objects.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sending a message at level &#8220;warn&#8221; to the logger.</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"access": "private", "type": "Number", "name": "__id", "value": "0"}, "type": "constant", "children": [{"attributes": {"text": "<p>Last free appender ID</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "name": "__appendersCache"}, "type": "constant", "children": [{"attributes": {"text": "<p>cache of appenders for a given logger and level</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "name": "__buffer"}, "type": "constant", "children": [{"attributes": {"text": "<p>Message buffer of previously fired messages.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.log.appender.RingBuffer"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "type": "String", "name": "__level", "value": "debug"}, "type": "constant"}, {"attributes": {"access": "private", "type": "Array", "name": "__filters", "value": "[]"}, "type": "constant", "children": [{"attributes": {"text": "<p>Array of filters to apply when selecting appenders to append to</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "name": "__levels"}, "type": "constant", "children": [{"attributes": {"text": "<p>Numeric translation of log levels</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "type": "Array", "name": "__appenders", "value": "[]"}, "type": "constant", "children": [{"attributes": {"text": "<p>Map of all known appenders by ID</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"access": "private", "name": "__appendersByName"}, "type": "constant", "children": [{"attributes": {"text": "<p>Map of all known appenders by name</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}]}