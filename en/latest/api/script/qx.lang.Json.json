{"attributes": {"fullName": "qx.lang.Json", "packageName": "qx.lang", "isStatic": true, "type": "bootstrap", "name": "Json"}, "type": "class", "children": [{"attributes": {"text": "<p>Exposes (potentially polyfilled or patched) window.JSON to qooxdoo\n(enabled by <a href=\"https://github.com/bestiejs/json3\"><span class=\"caps\">JSON</span> 3</a>).</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 1, "isStatic": true, "name": "parse"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "text"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">JSON</span> string to parse</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "reviver"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional reviver function to filter and transform the results</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method parses a <span class=\"caps\">JSON</span> text to produce an object or array.\nIt can throw a SyntaxError exception.</p>\n\n<p>The optional reviver parameter is a function that can filter and\ntransform the results. It receives each of the keys and values,\nand its return value is used instead of the original value.\nIf it returns what it received, then the structure is not modified.\nIf it returns undefined then the member is deleted.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\n// Parse the text. Values that look like ISO date strings will\n// be converted to Date objects.\n\nmyData = JSON.parse(text, function (key, value)\n{\n  if (typeof value === 'string')\n  {\n    var a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n    if (a) {\n      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n    }\n  }\n  return value;\n});\n\nmyData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n    var d;\n    if (typeof value === 'string' &&\n            value.slice(0, 5) === 'Date(' &&\n            value.slice(-1) === ')') {\n        d = new Date(value.slice(5, -1));\n        if (d) {\n            return d;\n        }\n    }\n    return value;\n});\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The parsed <span class=\"caps\">JSON</span> object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"line": 1, "isStatic": true, "name": "stringify"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>any JavaScript value, usually an object or array.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "replacer"}, "type": "param", "children": [{"attributes": {"text": "<p>an optional parameter that determines how object values are stringified for objects. It can be a function or an array of strings.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "space"}, "type": "param", "children": [{"attributes": {"text": "<p>an optional parameter that specifies the indentation of nested structures. If it is omitted, the text will be packed without extra whitespace. If it is a number, it will specify the number of spaces to indent at each level. If it is a string (such as &#8217;\\t&#8217; or &#8217;&nbsp;&#8217;), it contains the characters used to indent at each level.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method produces a <span class=\"caps\">JSON</span> text from a JavaScript value.</p>\n\n<p>When an object value is found, if the object contains a toJSON\nmethod, its toJSON method will be called and the result will be\nstringified. A toJSON method does not serialize: it returns the\nvalue represented by the name/value pair that should be serialized,\nor undefined if nothing should be serialized. The toJSON method\nwill be passed the key associated with the value, and this will be\nbound to the object holding the key.</p>\n\n<p>For example, this would serialize Dates as <span class=\"caps\">ISO</span> strings.</p>\n\n<pre class=\"javascript\">\n    Date.prototype.toJSON = function (key) {\n        function f(n) {\n            // Format integers to have at least two digits.\n            return n < 10 ? '0' + n : n;\n        }\n\n        return this.getUTCFullYear()   + '-' +\n             f(this.getUTCMonth() + 1) + '-' +\n             f(this.getUTCDate())      + 'T' +\n             f(this.getUTCHours())     + ':' +\n             f(this.getUTCMinutes())   + ':' +\n             f(this.getUTCSeconds())   + 'Z';\n    };\n</pre>\n\n<p>You can provide an optional replacer method. It will be passed the\nkey and value of each member, with this bound to the containing\nobject. The value that is returned from your method will be\nserialized. If your method returns undefined, then the member will\nbe excluded from the serialization.</p>\n\n<p>If the replacer parameter is an array of strings, then it will be\nused to select the members to be serialized. It filters the results\nsuch that only members with keys listed in the replacer array are\nstringified.</p>\n\n<p>Values that do not have <span class=\"caps\">JSON</span> representations, such as undefined or\nfunctions, will not be serialized. Such values in objects will be\ndropped; in arrays they will be replaced with null. You can use\na replacer function to replace those with <span class=\"caps\">JSON</span> values.\n<span class=\"caps\">JSON</span>.stringify(undefined) returns undefined.</p>\n\n<p>The optional space parameter produces a stringification of the\nvalue that is filled with line breaks and indentation to make it\neasier to read.</p>\n\n<p>If the space parameter is a non-empty string, then that string will\nbe used for indentation. If the space parameter is a number, then\nthe indentation will be that many spaces.</p>\n\n<p>Example:</p>\n\n<pre class=\"javascript\">\ntext = JSON.stringify(['e', {pluribus: 'unum'}]);\n// text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\ntext = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n// text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\ntext = JSON.stringify([new Date()], function (key, value) {\n    return this[key] instanceof Date ?\n        'Date(' + this[key] + ')' : value;\n});\n// text is '[\"Date(---current time---)\"]'\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">JSON</span> string of the value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}]}]}