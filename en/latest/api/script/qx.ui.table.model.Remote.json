{"attributes": {"isAbstract": true, "name": "Remote", "packageName": "qx.ui.table.model", "superClass": "qx.ui.table.model.Abstract", "fullName": "qx.ui.table.model.Remote", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>A table model that loads its data from a backend.</p>\n\n<p>Only a subset of the available rows, those which are within or near the\ncurrently visible area, are loaded. If a quick scroll operation occurs,\nrows will soon be displayed using asynchronous loading in the background.\nAll loaded data is managed through a cache which automatically removes\nthe oldest used rows when it gets full.</p>\n\n<p>This class is abstract: The actual loading of row data must be done by\nsubclasses.</p>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"docFrom": "qx.core.Object", "line": 43, "isCtor": true, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "ctor"}, "type": "method"}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "protected", "line": 370, "name": "_cancelCurrentRequest"}, "type": "method", "children": [{"attributes": {"text": "<p>Cancels the current request if possible.</p>\n\n<p>Should be overridden by subclasses if they are able to cancel requests. This\nallows sending a new request directly after a call of {@link #reloadData}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the request was canceled.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 170, "name": "_getIgnoreCurrentRequest"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns whether the current request is ignored by the model.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>true when the current request is ignored by the model.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 206, "name": "_loadRowCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Implementing classes have to call {@link #_onRowCountLoaded} when the\nserver response arrived. That method has to be called! Even when there\nwas an error.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>the abstract function warning.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"access": "protected", "line": 491, "name": "_loadRowData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "firstRow"}, "type": "param", "children": [{"attributes": {"text": "<p>The index of the first row to load.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "lastRow"}, "type": "param", "children": [{"attributes": {"text": "<p>The index of the last row to load.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Loads some row data from the server.</p>\n\n<p>Implementing classes have to call {@link #_onRowDataLoaded} when the server\nresponse arrived. That method has to be called! Even when there was an error.</p>"}, "type": "desc"}, {"attributes": {}, "type": "throws", "children": [{"attributes": {"text": "<p>the abstract function warning.</p>", "type": "Error"}, "type": "desc"}]}]}, {"attributes": {"access": "protected", "line": 218, "name": "_onRowCountLoaded"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowCount"}, "type": "param", "children": [{"attributes": {"text": "<p>the number of rows in this model or null if loading.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the row count.</p>\n\n<p>Has to be called by {@link #_loadRowCount}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 503, "name": "_onRowDataLoaded"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowDataArr"}, "type": "param", "children": [{"attributes": {"text": "<p>the loaded row data or null if there was an error.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets row data.</p>\n\n<p>Has to be called by {@link #_loadRowData}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 568, "name": "_setRowBlockData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "block"}, "type": "param", "children": [{"attributes": {"text": "<p>the index of the block.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "rowDataArr"}, "type": "param", "children": [{"attributes": {"text": "<p>the data to set.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var", "dimensions": 2}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the data of one block.</p>"}, "type": "desc"}]}, {"attributes": {"line": 286, "name": "clearCache"}, "type": "method", "children": [{"attributes": {"text": "<p>Clears the cache.</p>"}, "type": "desc"}]}, {"attributes": {"name": "getBlockConcurrentLoadRowCount", "fromProperty": "blockConcurrentLoadRowCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>blockConcurrentLoadRowCount</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getBlockSize", "fromProperty": "blockSize"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>blockSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>blockSize</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 302, "name": "getCacheContent"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the current state of the cache.</p>\n\n<p>Do not change anything in the returned data. This breaks the model state.\nUse this method only together with {@link #restoreCacheContent} for backing\nup state for a later restore.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the current cache state.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getClearCacheOnRemove", "fromProperty": "clearCacheOnRemove"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>clearCacheOnRemove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>clearCacheOnRemove</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getMaxCachedBlockCount", "fromProperty": "maxCachedBlockCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>maxCachedBlockCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>maxCachedBlockCount</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 177, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getRowCount"}, "type": "method"}, {"attributes": {"line": 710, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getRowData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the model index of the row.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>See overridden method for details.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Map containing a value for each column.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 871, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getSortColumnIndex"}, "type": "method"}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 735, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "getValue"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}, {"attributes": {"name": "rowIndex"}, "type": "param"}]}]}, {"attributes": {"access": "protected", "name": "initBlockConcurrentLoadRowCount", "fromProperty": "blockConcurrentLoadRowCount"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>blockConcurrentLoadRowCount</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>blockConcurrentLoadRowCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initBlockSize", "fromProperty": "blockSize"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>blockSize</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>blockSize</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initClearCacheOnRemove", "fromProperty": "clearCacheOnRemove"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>clearCacheOnRemove</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>clearCacheOnRemove</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initMaxCachedBlockCount", "fromProperty": "maxCachedBlockCount"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>maxCachedBlockCount</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>maxCachedBlockCount</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isBlockConcurrentLoadRowCount", "fromProperty": "blockConcurrentLoadRowCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>blockConcurrentLoadRowCount</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isClearCacheOnRemove", "fromProperty": "clearCacheOnRemove"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>clearCacheOnRemove</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 818, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "isColumnEditable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 846, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "isColumnSortable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 876, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "isSortAscending"}, "type": "method"}, {"attributes": {"line": 388, "name": "iterateCachedRows"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "iterator"}, "type": "param", "children": [{"attributes": {"text": "<p>The iterator function to call.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>context of the iterator</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Iterates through all cached rows.</p>\n\n<p>The iterator will be called for each cached row with two parameters: The row\nindex of the current row (Integer) and the row data of that row (var[]). If\nthe iterator returns something this will be used as new row data.</p>\n\n<p>The iterator is called in the same order as the rows are in the model\n(the row index is always ascending).</p>"}, "type": "desc"}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 418, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "prefetchRows"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "firstRowIndex"}, "type": "param"}, {"attributes": {"name": "lastRowIndex"}, "type": "param"}]}]}, {"attributes": {"line": 250, "name": "reloadData"}, "type": "method", "children": [{"attributes": {"text": "<p>Reloads the model and clears the local cache.</p>"}, "type": "desc"}]}, {"attributes": {"line": 614, "name": "removeRow"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "rowIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the index of the row to remove.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes a row from the model.</p>"}, "type": "desc"}]}, {"attributes": {"name": "resetBlockConcurrentLoadRowCount", "fromProperty": "blockConcurrentLoadRowCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "resetBlockSize", "fromProperty": "blockSize"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>blockSize</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "resetClearCacheOnRemove", "fromProperty": "clearCacheOnRemove"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>clearCacheOnRemove</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "resetMaxCachedBlockCount", "fromProperty": "maxCachedBlockCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>maxCachedBlockCount</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>"}, "type": "desc"}]}, {"attributes": {"line": 319, "name": "restoreCacheContent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "cacheContent"}, "type": "param", "children": [{"attributes": {"text": "<p>An old cache state.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Restores a cache state created by {@link #getCacheContent}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setBlockConcurrentLoadRowCount", "fromProperty": "blockConcurrentLoadRowCount"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>blockConcurrentLoadRowCount</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setBlockSize", "fromProperty": "blockSize"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>blockSize</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>blockSize</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockSize}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setClearCacheOnRemove", "fromProperty": "clearCacheOnRemove"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>clearCacheOnRemove</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>clearCacheOnRemove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 803, "name": "setColumnEditable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the column of which to set the editable state.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "editable"}, "type": "param", "children": [{"attributes": {"text": "<p>whether the column should be editable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets whether a column is editable.</p>"}, "type": "desc"}]}, {"attributes": {"line": 831, "name": "setColumnSortable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the column of which to set the sortable state.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "sortable"}, "type": "param", "children": [{"attributes": {"text": "<p>whether the column should be sortable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets whether a column is sortable.</p>"}, "type": "desc"}]}, {"attributes": {"line": 785, "name": "setEditable"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "editable"}, "type": "param", "children": [{"attributes": {"text": "<p>whether all columns are editable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets all columns editable or not editable.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setMaxCachedBlockCount", "fromProperty": "maxCachedBlockCount"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>maxCachedBlockCount</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>maxCachedBlockCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #maxCachedBlockCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 902, "name": "setSortAscendingWithoutSortingData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "sortAscending"}, "type": "param", "children": [{"attributes": {"text": "<p>whether the sorting direction is ascending (true) or not (false).</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the direction of the sorting without sorting the data.\nUse this method, if you want to set the direction of sorting, (e.g\nfor appearance reason), but the sorting of the data will be done in\nanother step.</p>"}, "type": "desc"}]}, {"attributes": {"line": 888, "name": "setSortColumnIndexWithoutSortingData"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "sortColumnIndex"}, "type": "param", "children": [{"attributes": {"text": "<p>the column, which shall be marked as the sorted column.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the sorted column without sorting the data.\nUse this method, if you want to mark the column as the sorted column,\n(e.g. for appearance reason), but the sorting of the data will be done\nin another step.</p>"}, "type": "desc"}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 750, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "setValue"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}, {"attributes": {"name": "rowIndex"}, "type": "param"}, {"attributes": {"name": "value"}, "type": "param"}]}]}, {"attributes": {"docFrom": "qx.ui.table.ITableModel", "line": 856, "overriddenFrom": "qx.ui.table.model.Abstract", "name": "sortByColumn"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "columnIndex"}, "type": "param"}, {"attributes": {"name": "ascending"}, "type": "param"}]}]}, {"attributes": {"name": "toggleBlockConcurrentLoadRowCount", "fromProperty": "blockConcurrentLoadRowCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>blockConcurrentLoadRowCount</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleClearCacheOnRemove", "fromProperty": "clearCacheOnRemove"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>clearCacheOnRemove</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #clearCacheOnRemove}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "properties", "children": [{"attributes": {"check": "Boolean", "defaultValue": "true", "name": "blockConcurrentLoadRowCount", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Whether to block remote requests for the row count while a request for\nthe row count is pending. Row counts are requested at various times and\nfrom various parts of the code, resulting in numerous requests to the\nuser-provided _loadRowCount() method, often while other requests are\nalready pending. The default behavior now ignores requests to load a\nnew row count if such a request is already pending. It is therefore now\nconceivable that the row count changes between an initial request for\nthe row count and a later (ignored) request. Since the chance of this\nis low, the desirability of reducing the server requests outweighs the\nslight possibility of an altered count (which will, by the way, be\ndetected soon thereafter upon the next request for the row count). If\nthe old behavior is desired, set this property to false.</p>"}, "type": "desc"}]}, {"attributes": {"check": "Integer", "defaultValue": "50", "name": "blockSize", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The number of rows that are stored in one cache block.</p>"}, "type": "desc"}]}, {"attributes": {"check": "Boolean", "defaultValue": "false", "name": "clearCacheOnRemove", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>Whether to clear the cache when some rows are removed.\nIf true the rows are removed locally in the cache.</p>"}, "type": "desc"}]}, {"attributes": {"check": "Integer", "defaultValue": "15", "name": "maxCachedBlockCount", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>The maximum number of row blocks kept in the cache.</p>"}, "type": "desc"}]}]}]}