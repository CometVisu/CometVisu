{"attributes": {"fullName": "qx.data.controller.MSelection", "packageName": "qx.data.controller", "type": "mixin", "name": "MSelection", "includer": "qx.data.controller.List,qx.data.controller.Tree"}, "type": "class", "children": [{"attributes": {"text": "<p>Mixin for the selection in the data binding controller.\nIt contains an selection property which can be manipulated.\nRemember to call the method {@link #_addChangeTargetListener} on every\nchange of the target.\nIt is also important that the elements stored in the target e.g. ListItems\ndo have the corresponding model stored as user data under the &#8220;model&#8221; key.</p>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"line": 36, "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "changeSelection"}, "type": "event", "children": [{"attributes": {"text": "Fired on change of the property {@link #selection}."}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "changeSelection"}, "type": "event", "children": [{"attributes": {"text": "<p>This event is fired as soon as the content of the selection property changes, but\nthis is not equal to the change of the selection of the widget. If the selection\nof the widget changes, the content of the array stored in the selection property\nchanges. This means you have to listen to the change event of the selection array\nto get an event as soon as the user changes the selected item.</p>\n\n<pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 142, "isMixin": true, "name": "__changeSelectionArray"}, "type": "method", "children": [{"attributes": {"text": "<p>Event handler for the change of the data array holding the selection.\nIf a change is in the selection array, the selection update will be\ninvoked.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 345, "isMixin": true, "name": "__getSelectableForModel"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "model"}, "type": "param", "children": [{"attributes": {"text": "<p>The representing model of a selectable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Returns the list item storing the given model in its model property.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>List item or <code>null</code> if none was found</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 322, "isMixin": true, "name": "__selectItem"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>A model element.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.core.Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Internal helper for selecting an item in the target. The item to select\nis defined by a given model item.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "line": 300, "isMixin": true, "name": "__targetSupportsMultiSelection"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper-method returning true, if the target supports multi selection.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>true, if the target supports multi selection.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 310, "isMixin": true, "name": "__targetSupportsSingleSelection"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper-method returning true, if the target supports single selection.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>true, if the target supports single selection.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 203, "isMixin": true, "name": "_addChangeTargetListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>The new target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>The old target.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Helper method which should be called by the classes including this\nMixin when the target changes.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 114, "isMixin": true, "name": "_applySelection"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>The new data array for the selection.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.data.Array"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>The old data array for the selection.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.data.Array"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Apply-method for setting a new selection array. Only the change listener\nwill be removed from the old array and added to the new.</p>"}, "type": "desc"}, {"attributes": {}, "type": "apply", "children": [{"attributes": {"applies": "qx.data.controller.MSelection#selection"}, "type": "entry"}]}]}, {"attributes": {"access": "protected", "line": 152, "isMixin": true, "name": "_changeTargetSelection"}, "type": "method", "children": [{"attributes": {"text": "<p>Event handler for a change in the target selection.\nIf the selection in the target has changed, the selected model objects\nwill be found and added to the selection array.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 376, "isMixin": true, "name": "_endSelectionModification"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper-Method signaling that the internal changing of the targets\nselection is over.\n{@link #_startSelectionModification}</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 387, "isMixin": true, "name": "_inSelectionModification"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper-Method for checking the state of the selection modification.\n{@link #_startSelectionModification}\n{@link #_endSelectionModification}</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<code>true</code> if selection modification is active"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "line": 366, "isMixin": true, "name": "_startSelectionModification"}, "type": "method", "children": [{"attributes": {"text": "<p>Helper-Method signaling that currently the selection of the target is\nin change. That will block the change of the internal selection.\n{@link #_endSelectionModification}</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 229, "isMixin": true, "name": "_updateSelection"}, "type": "method", "children": [{"attributes": {"text": "<p>Method for updating the selection. It checks for the case of single or\nmulti selection and after that checks if the selection in the selection\narray is the same as in the target widget.</p>"}, "type": "desc"}]}, {"attributes": {"name": "getSelection", "fromProperty": "selection"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>selection</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initSelection", "fromProperty": "selection"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>selection</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>selection</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetSelection", "fromProperty": "selection"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>selection</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setSelection", "fromProperty": "selection"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>selection</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>selection</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #selection}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "properties", "children": [{"attributes": {"name": "selection", "defaultValue": "null", "check": "qx.data.Array", "propertyType": "new", "apply": "_applySelection", "isMixin": true, "event": "changeSelection"}, "type": "property", "children": [{"attributes": {"text": "<p>Data array containing the selected model objects. This property can be\nmanipulated directly which means that a push to the selection will also\nselect the corresponding element in the target.</p>"}, "type": "desc"}]}]}]}