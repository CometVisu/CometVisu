{"attributes": {"fullName": "qx.ui.layout.Canvas", "packageName": "qx.ui.layout", "type": "class", "name": "Canvas", "superClass": "qx.ui.layout.Abstract"}, "type": "class", "children": [{"attributes": {"text": "<p>The Canvas is an extended Basic layout.</p>\n\n<p>It is possible to position a widget relative to the right or bottom edge of\nthe available space. It further supports stretching between left and right\nor top and bottom e.g. <code>left=20</code> and <code>right=20</code> would\nkeep a margin of 20 pixels to both edges. The Canvas layout has support for\npercent dimensions and locations.</p>\n\n<p><strong>Features</strong></p>\n\n<ul>\n<li>Pixel dimensions and locations</li>\n<li>Percent dimensions and locations</li>\n<li>Stretching between left+right and top+bottom</li>\n<li>Minimum and maximum dimensions</li>\n<li>Children are automatically shrunk to their minimum dimensions if not enough space is available</li>\n<li>Auto sizing (ignoring percent values)</li>\n<li>Margins (also negative ones)</li>\n</ul>\n\n<p><strong>Item Properties</strong></p>\n\n<ul>\n<li><strong>left</strong> <em>(Integer|String)</em>: The left coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>top</strong> <em>(Integer|String)</em>: The top coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>right</strong> <em>(Integer|String)</em>: The right coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>bottom</strong> <em>(Integer|String)</em>: The bottom coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>edge</strong> <em>(Integer|String)</em>: The coordinate in pixels or as a percent string to be used for all four edges.\n<li><strong>width</strong> <em>(String)</em>: A percent width e.g. <code>40%</code>.</li>\n<li><strong>height</strong> <em>(String)</em>: A percent height e.g. <code>60%</code>.</li>\n</ul>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n<li>Stretching (<code>left</code>-><code>right</code> or <code>top</code>-><code>bottom</code>)\n  has a higher priority than the preferred dimensions</li>\n<li>Stretching has a lower priority than the min/max dimensions.</li>\n<li>Percent values have no influence on the size hint of the layout.</li>\n</ul>\n\n<p><strong>Example</strong></p>\n\n<p>Here is a little example of how to use the canvas layout.</p>\n\n<pre class=\"javascript\">\nvar container = new qx.ui.container.Composite(new qx.ui.layout.Canvas());\n\n// simple positioning\ncontainer.add(new qx.ui.core.Widget(), {top: 10, left: 10});\n\n// stretch vertically with 10 pixel distance to the parent's top\n// and bottom border\ncontainer.add(new qx.ui.core.Widget(), {top: 10, left: 10, bottom: 10});\n\n// percent positioning and size\ncontainer.add(new qx.ui.core.Widget(), {left: \"50%\", top: \"50%\", width: \"25%\", height: \"40%\"});\n</pre>\n\n<p><strong>External Documentation</strong></p>\n\n<a href=\"http://manual.qooxdoo.org/5.1/pages/layout/canvas.html\">\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual."}, "type": "desc"}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "protected", "docFrom": "qx.ui.layout.Abstract", "line": 320, "overriddenFrom": "qx.ui.layout.Abstract", "name": "_computeSizeHint"}, "type": "method"}, {"attributes": {"name": "getDesktop", "fromProperty": "desktop"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>desktop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>desktop</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initDesktop", "fromProperty": "desktop"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>desktop</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>desktop</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isDesktop", "fromProperty": "desktop"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>desktop</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"docFrom": "qx.ui.layout.Abstract", "line": 168, "overriddenFrom": "qx.ui.layout.Abstract", "name": "renderLayout"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "availWidth"}, "type": "param"}, {"attributes": {"name": "availHeight"}, "type": "param"}, {"attributes": {"name": "padding"}, "type": "param"}]}]}, {"attributes": {"name": "resetDesktop", "fromProperty": "desktop"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>desktop</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setDesktop", "fromProperty": "desktop"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>desktop</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>desktop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleDesktop", "fromProperty": "desktop"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>desktop</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #desktop}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "properties", "children": [{"attributes": {"check": "Boolean", "defaultValue": "false", "name": "desktop", "propertyType": "new"}, "type": "property", "children": [{"attributes": {"text": "<p>If desktop mode is active, the children&#8217;s minimum sizes are ignored\nby the layout calculation. This is necessary to prevent the desktop\nfrom growing if e.g. a window is moved beyond the edge of the desktop</p>"}, "type": "desc"}]}]}]}