<div class="highlight"><pre><span class="cm">/* templateengine.js (c) 2010 by Christian Mayer [CometVisu at ChristianMayer dot de]</span>
<span class="cm"> *</span>
<span class="cm"> * This program is free software; you can redistribute it and/or modify it</span>
<span class="cm"> * under the terms of the GNU General Public License as published by the Free</span>
<span class="cm"> * Software Foundation; either version 3 of the License, or (at your option)</span>
<span class="cm"> * any later version.</span>
<span class="cm"> *</span>
<span class="cm"> * This program is distributed in the hope that it will be useful, but WITHOUT</span>
<span class="cm"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span>
<span class="cm"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for</span>
<span class="cm"> * more details.</span>
<span class="cm"> *</span>
<span class="cm"> * You should have received a copy of the GNU General Public License along</span>
<span class="cm"> * with this program; if not, write to the Free Software Foundation, Inc.,</span>
<span class="cm"> * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA</span>
<span class="cm"> * </span>
<span class="cm"> * @module Templateengine</span>
<span class="cm"> * @title  CometVisu templateengine</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">templateEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TemplateEngine</span><span class="p">();</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;resize&#39;</span><span class="p">,</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">handleResize</span><span class="p">);</span>
<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">unload</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">visu</span> <span class="p">)</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
<span class="p">});</span>
<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">configError</span><span class="p">(</span><span class="nx">textStatus</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="s1">&#39;Config-File Error! &#39;</span><span class="p">;</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nx">textStatus</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="s1">&#39;parsererror&#39;</span><span class="o">:</span>
        <span class="nx">message</span> <span class="o">+=</span> <span class="s1">&#39;&lt;br /&gt;Invalid config file!&lt;br /&gt;&lt;a href=&quot;check_config.php?config=&#39;</span> <span class="o">+</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">configSuffix</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;Please check!&lt;/a&gt;&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#loading&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="c1">// get the data once the page was loaded</span>
  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="nx">url</span> <span class="o">:</span> <span class="s1">&#39;config/visu_config&#39;</span><span class="o">+</span> <span class="p">(</span><span class="nx">templateEngine</span><span class="p">.</span><span class="nx">configSuffix</span> <span class="o">?</span> <span class="s1">&#39;_&#39;</span> <span class="o">+</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">configSuffix</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;.xml&#39;</span><span class="p">,</span>
    <span class="nx">cache</span> <span class="o">:</span> <span class="o">!</span><span class="nx">templateEngine</span><span class="p">.</span><span class="nx">forceReload</span><span class="p">,</span>
    <span class="nx">success</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xml</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">xml</span> <span class="o">||</span> <span class="o">!</span><span class="nx">xml</span><span class="p">.</span><span class="nx">documentElement</span> <span class="o">||</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span> <span class="s2">&quot;parsererror&quot;</span> <span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">configError</span><span class="p">(</span><span class="s2">&quot;parsererror&quot;</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">parseXML</span><span class="p">(</span><span class="nx">xml</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">error</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">jqXHR</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">,</span> <span class="nx">errorThrown</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">configError</span><span class="p">(</span><span class="nx">textStatus</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">dataType</span> <span class="o">:</span> <span class="s1">&#39;xml&#39;</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nx">TemplateEngine</span><span class="p">(</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">thisTemplateEngine</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">pageReady</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">pluginsReady</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">designReady</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">design</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisuDesign_Custom</span><span class="p">();</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">pagePartsHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PagePartsHandler</span><span class="p">();</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">currentPageID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">currentPageUnavailableWidth</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  
  <span class="c1">// if true the whole widget reacts on click events</span>
  <span class="c1">// if false only the actor in the widget reacts on click events</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">bindClickToWidget</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    
  <span class="c1">// threshold where the mobile.css is loaded</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">maxMobileScreenWidth</span> <span class="o">=</span> <span class="mi">480</span><span class="p">;</span>
  <span class="c1">// use to recognize if the screen width has crossed the maxMobileScreenWidth</span>
  <span class="kd">var</span> <span class="nx">lastBodyWidth</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">mappings</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// store the mappings</span>
  <span class="kd">var</span> <span class="nx">stylings</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// store the stylings</span>
 
  <span class="kd">var</span> <span class="nx">ga_list</span> <span class="o">=</span> <span class="p">{};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Function to test if the path is in a valid form.</span>
<span class="cm">   * Note: it doesn&#39;t check if it exists!</span>
<span class="cm">   */</span>
  <span class="kd">var</span> <span class="nx">pathRegEx</span> <span class="o">=</span> <span class="sr">/^id(_[0-9]+)+$/</span><span class="p">;</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">old_scroll</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">visu</span><span class="p">;</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">scrollSpeed</span><span class="p">;</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">defaultColumns</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">minColumnWidth</span> <span class="o">=</span> <span class="mi">120</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">enableColumnAdjustment</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">enableAddressQueue</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;enableQueue&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">backend</span> <span class="o">=</span> <span class="s1">&#39;cgi-bin&#39;</span><span class="p">;</span> <span class="c1">// default path to backend</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s2">&quot;backend&quot;</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">backend</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s2">&quot;backend&quot;</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">initBackendClient</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span><span class="o">==</span><span class="s2">&quot;oh&quot;</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// the path to the openHAB cometvisu backend is cv</span>
	  <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span> <span class="o">=</span> <span class="s1">&#39;/services/cv/&#39;</span><span class="p">;</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CometVisu</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span><span class="p">);</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">resendHeaders</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;X-Atmosphere-tracking-id&#39;</span><span class="o">:</span><span class="kc">null</span><span class="p">};</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CometVisu</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="kd">function</span> <span class="nx">update</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;_&#39;</span> <span class="o">+</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">json</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// overload the handler</span>
      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span> <span class="s1">&#39;firstdata&#39;</span><span class="p">,</span> <span class="nx">json</span> <span class="p">);</span>
      <span class="nx">update</span><span class="p">(</span> <span class="nx">json</span> <span class="p">);</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="nx">update</span><span class="p">;</span> <span class="c1">// handle future requests directly</span>
    <span class="p">}</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="s1">&#39;demo_user&#39;</span><span class="p">;</span> <span class="c1">// example for setting a user</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">configSuffix</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s2">&quot;config&quot;</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">configSuffix</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s2">&quot;config&quot;</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">forceReload</span> <span class="o">==</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">forceReload</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;forceReload&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">forceReload</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;forceReload&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;false&#39;</span><span class="p">;</span> <span class="c1">// true unless set</span>
                                                              <span class="c1">// to false</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;forceDevice&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">forceMobile</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;forceDevice&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;mobile&#39;</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">forceMobile</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// &quot;Bug&quot;-Fix for ID: 3204682 &quot;Caching on web server&quot;</span>
  <span class="c1">// This isn&#39;t a real fix for the problem as that&#39;s part of the web browser,</span>
  <span class="c1">// but</span>
  <span class="c1">// it helps to avoid the problems on the client, e.g. when the config file</span>
  <span class="c1">// has changed but the browser doesn&#39;t even ask the server about it...</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">forceReload</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="c1">// Disable features that aren&#39;t ready yet</span>
  <span class="c1">// This can be overwritten in the URL with the parameter &quot;maturity&quot;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">use_maturity</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;maturity&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">url_maturity</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;maturity&#39;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">url_maturity</span> <span class="o">-</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">use_maturity</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">url_maturity</span> <span class="o">-</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// given directly as number</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">use_maturity</span> <span class="o">=</span> <span class="nx">Maturity</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">url_maturity</span><span class="p">];</span> <span class="c1">// or as the ENUM name</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">use_maturity</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">use_maturity</span> <span class="o">=</span> <span class="nx">Maturity</span><span class="p">.</span><span class="nx">release</span><span class="p">;</span> <span class="c1">// default to release</span>
  <span class="p">}</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">transformEncode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">transformation</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">basetrans</span> <span class="o">=</span> <span class="nx">transformation</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">return</span> <span class="nx">transformation</span> <span class="k">in</span> <span class="nx">Transform</span> <span class="o">?</span> <span class="nx">Transform</span><span class="p">[</span><span class="nx">transformation</span><span class="p">]</span>
        <span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="nx">basetrans</span> <span class="k">in</span> <span class="nx">Transform</span> <span class="o">?</span> <span class="nx">Transform</span><span class="p">[</span><span class="nx">basetrans</span><span class="p">]</span>
        <span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">transformDecode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">transformation</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">basetrans</span> <span class="o">=</span> <span class="nx">transformation</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">return</span> <span class="nx">transformation</span> <span class="k">in</span> <span class="nx">Transform</span> <span class="o">?</span> <span class="nx">Transform</span><span class="p">[</span><span class="nx">transformation</span><span class="p">]</span>
        <span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="nx">basetrans</span> <span class="k">in</span> <span class="nx">Transform</span> <span class="o">?</span> <span class="nx">Transform</span><span class="p">[</span><span class="nx">basetrans</span><span class="p">]</span>
        <span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">addAddress</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ga_list</span><span class="p">[</span><span class="nx">address</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">getAddresses</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">ga_list</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="cm">/*</span>
<span class="cm">   * this function implements widget stylings </span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setWidgetStyling</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">styling</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="nx">styling</span> <span class="p">)</span> <span class="nx">styling</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;styling&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">sty</span> <span class="o">=</span> <span class="nx">stylings</span><span class="p">[</span><span class="nx">styling</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">sty</span><span class="p">)</span> <span class="p">{</span>    
      <span class="nx">e</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">sty</span><span class="p">[</span><span class="s1">&#39;classnames&#39;</span><span class="p">]);</span> <span class="c1">// remove only styling classes</span>
      <span class="kd">function</span> <span class="nx">findValue</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">findExact</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="kc">undefined</span> <span class="o">===</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">sty</span><span class="p">[</span><span class="nx">v</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// fixed value</span>
          <span class="nx">e</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">sty</span><span class="p">[</span><span class="nx">v</span><span class="p">]);</span>
          <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span> 
          <span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="nx">sty</span><span class="p">[</span><span class="s1">&#39;range&#39;</span><span class="p">];</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">findExact</span> <span class="o">&amp;&amp;</span> <span class="nx">range</span><span class="p">[</span><span class="nx">v</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">range</span><span class="p">[</span><span class="nx">v</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="kd">var</span> <span class="nx">valueFloat</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">min</span> <span class="k">in</span> <span class="nx">range</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">min</span> <span class="o">&gt;</span> <span class="nx">valueFloat</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">range</span><span class="p">[</span><span class="nx">min</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">valueFloat</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// check max</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">range</span><span class="p">[</span><span class="nx">min</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">findValue</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">sty</span><span class="p">[</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">findValue</span><span class="p">(</span><span class="nx">sty</span><span class="p">[</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">],</span> <span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">map</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">this_map</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">this_map</span> <span class="o">&amp;&amp;</span> <span class="nx">mappings</span><span class="p">[</span><span class="nx">this_map</span><span class="p">])</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">mappings</span><span class="p">[</span><span class="nx">this_map</span><span class="p">];</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">formula</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">formula</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kd">function</span> <span class="nx">mapValue</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="nx">v</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">m</span><span class="p">[</span><span class="nx">v</span><span class="p">];</span>
          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="s1">&#39;range&#39;</span><span class="p">])</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">valueFloat</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="nx">m</span><span class="p">[</span><span class="s1">&#39;range&#39;</span><span class="p">];</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">min</span> <span class="k">in</span> <span class="nx">range</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="nx">min</span> <span class="o">&gt;</span> <span class="nx">valueFloat</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
              <span class="k">if</span> <span class="p">(</span><span class="nx">range</span><span class="p">[</span><span class="nx">min</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">valueFloat</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// check max</span>
              <span class="k">return</span> <span class="nx">range</span><span class="p">[</span><span class="nx">min</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">mapValue</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ret</span> <span class="o">&amp;&amp;</span> <span class="nx">m</span><span class="p">[</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">])</span> <span class="p">{</span>
          <span class="nx">ret</span> <span class="o">=</span> <span class="nx">mapValue</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">ret</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="cm">/**</span>
<span class="cm">   * Look up the entry for @param value in the mapping @param this_map and</span>
<span class="cm">   * @return the next value in the list (including wrap around).</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">getNextMappedValue</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">this_map</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">this_map</span> <span class="o">&amp;&amp;</span> <span class="nx">mappings</span><span class="p">[</span><span class="nx">this_map</span><span class="p">])</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">mappings</span><span class="p">[</span><span class="nx">this_map</span><span class="p">]);</span>
      <span class="k">return</span> <span class="nx">keys</span><span class="p">[</span> <span class="p">(</span><span class="nx">keys</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nx">value</span> <span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span> <span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">resetPageValues</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableWidth</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">getCurrentPageNavbarVisibility</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pagePartsHandler</span><span class="p">.</span><span class="nx">getNavbarsVisibility</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">adjustColumns</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">enableColumnAdjustment</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span> <span class="o">!=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">))</span> <span class="p">{</span>
    	  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">({</span><span class="s1">&#39;columns&#39;</span> <span class="o">:</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span><span class="p">});</span>
    	  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    	  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    	<span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getAvailableWidth</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">$main</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">newColumns</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">width</span> <span class="o">/</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">minColumnWidth</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">newColumns</span> <span class="o">&gt;</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span> <span class="o">&gt;</span> <span class="nx">newColumns</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// don´t accept values between 50% and 100% of defaultColumns</span>
      <span class="c1">// e.g if default is 12, then skip column-reduction to 10 and 8</span>
      <span class="nx">newColumns</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// the value should be a divisor of defaultColumns-value</span>
      <span class="k">while</span> <span class="p">((</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span> <span class="o">%</span> <span class="nx">newColumns</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">newColumns</span> <span class="o">&lt;</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">newColumns</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="c1">// make sure that newColumns does not exceed defaultColumns</span>
      <span class="nx">newColumns</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span><span class="p">,</span> <span class="nx">newColumns</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">newColumns</span> <span class="o">!=</span> <span class="nx">$main</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">$main</span><span class="p">.</span><span class="nx">data</span><span class="p">({</span>
        <span class="s1">&#39;columns&#39;</span> <span class="o">:</span> <span class="nx">newColumns</span>
      <span class="p">});</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * return the available width for a the currently visible page</span>
<span class="cm">   * the available width is calculated by subtracting the following elements widths (if they are visible) from the body width</span>
<span class="cm">   * - Left-Navbar</span>
<span class="cm">   * - Right-Navbar</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">getAvailableWidth</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// currently this calculation is done once after every page scroll (where thisTemplateEngine.currentPageUnavailableWidth is reseted)</span>
    <span class="c1">// if the screen width falls below the threshold which activates/deactivates the mobile.css</span>
    <span class="c1">// the calculation has to be done again, even if the page hasn´t changed (e.g. switching between portrait and landscape mode on a mobile can cause that)</span>
    <span class="kd">var</span> <span class="nx">bodyWidth</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">width</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">mobileUseChanged</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lastBodyWidth</span><span class="o">&lt;</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">maxMobileScreenWidth</span><span class="p">)</span><span class="o">!=</span><span class="p">(</span><span class="nx">bodyWidth</span><span class="o">&lt;</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">maxMobileScreenWidth</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableWidth</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="nx">mobileUseChanged</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">//      console.log(&quot;Mobile.css use changed &quot;+mobileUseChanged);</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableWidth</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">navbarVisibility</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getCurrentPageNavbarVisibility</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">widthNavbarLeft</span> <span class="o">=</span> <span class="nx">navbarVisibility</span><span class="p">.</span><span class="nx">left</span><span class="o">==</span><span class="s2">&quot;true&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarLeft&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;none&quot;</span> <span class="o">?</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarLeft&#39;</span><span class="p">).</span><span class="nx">outerWidth</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">widthNavbarLeft</span><span class="o">&gt;=</span><span class="nx">bodyWidth</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Left-Navbar has the same size as the complete body, this can happen, when the navbar has no content</span>
        <span class="c1">// maybe there is a better solution to solve this problem</span>
        <span class="nx">widthNavbarLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">widthNavbarRight</span> <span class="o">=</span> <span class="nx">navbarVisibility</span><span class="p">.</span><span class="nx">right</span><span class="o">==</span><span class="s2">&quot;true&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarRight&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;none&quot;</span> <span class="o">?</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarRight&#39;</span><span class="p">).</span><span class="nx">outerWidth</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">widthNavbarRight</span><span class="o">&gt;=</span><span class="nx">bodyWidth</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Right-Navbar has the same size as the complete body, this can happen, when the navbar has no content</span>
        <span class="c1">// maybe there is a better solution to solve this problem</span>
        <span class="nx">widthNavbarRight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableWidth</span> <span class="o">=</span> <span class="nx">widthNavbarLeft</span> <span class="o">+</span> <span class="nx">widthNavbarRight</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// remove an additional pixel for Firefox</span>
<span class="c1">//      console.log(&quot;Width: &quot;+bodyWidth+&quot; - &quot;+widthNavbarLeft+&quot; - &quot;+widthNavbarRight);</span>
    <span class="p">}</span>
    <span class="nx">lastBodyWidth</span> <span class="o">=</span> <span class="nx">bodyWidth</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">bodyWidth</span> <span class="o">-</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableWidth</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * return the available height for a the currently visible page</span>
<span class="cm">   * the available height is calculated by subtracting the following elements heights (if they are visible) from the window height</span>
<span class="cm">   * - Top-Navigation</span>
<span class="cm">   * - Top-Navbar</span>
<span class="cm">   * - Bottom-Navbar</span>
<span class="cm">   * - Statusbar</span>
<span class="cm">   * </span>
<span class="cm">   * Notice: the former way to use the subtract the $main.position().top value from the total height leads to errors in certain cases</span>
<span class="cm">   *         because the value of $main.position().top is not reliable all the time</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">getAvailableHeight</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">force</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">windowHeight</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">height</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="nx">force</span><span class="o">==</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">navbarVisibility</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getCurrentPageNavbarVisibility</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">heightStr</span> <span class="o">=</span> <span class="s2">&quot;Height: &quot;</span><span class="o">+</span><span class="nx">windowHeight</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;none&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav_path&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">);</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - &quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav_path&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - 0&quot;</span><span class="p">;</span>
      <span class="p">}</span>
<span class="c1">//      console.log($(&#39;#navbarTop&#39;).css(&#39;display&#39;)+&quot;: &quot;+$(&#39;#navbarTop&#39;).outerHeight(true));</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarTop&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;none&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">navbarVisibility</span><span class="p">.</span><span class="nx">top</span><span class="o">==</span><span class="s2">&quot;true&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarTop&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">+=</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarTop&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - &quot;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarTop&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - 0&quot;</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarBottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;none&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">navbarVisibility</span><span class="p">.</span><span class="nx">bottom</span><span class="o">==</span><span class="s2">&quot;true&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarBottom&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">+=</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarBottom&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - &quot;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarBottom&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - 0&quot;</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;none&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">+=</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - #bottom:&quot;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nx">heightStr</span><span class="o">+=</span><span class="s2">&quot; - 0&quot;</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="c1">// remove an additional pixel for Firefox</span>
      <span class="p">}</span>
      <span class="c1">//console.log(heightStr);</span>
      <span class="c1">//console.log(windowHeight+&quot; - &quot;+thisTemplateEngine.currentPageUnavailableHeight);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">windowHeight</span> <span class="o">-</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageUnavailableHeight</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="cm">/*</span>
<span class="cm">   * Make sure everything looks right when the window gets resized. This is</span>
<span class="cm">   * necessary as the scroll effect requires a fixed element size</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">handleResize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resize</span><span class="p">,</span> <span class="nx">skipScrollFix</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">uagent</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getAvailableWidth</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">$main</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">);</span>
    <span class="c1">// if (/(android|blackberry|iphone|ipod|series60|symbian|windows ce|palm)/i.test(uagent)) {</span>
    <span class="kd">var</span> <span class="nx">mobileDevice</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/(android|blackberry|iphone|ipod|series60|symbian|windows ce|palm)/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">uagent</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="sr">/(nexus 7|tablet)/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">uagent</span><span class="p">))</span> <span class="nx">mobileDevice</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>  <span class="c1">// Nexus 7 and Android Tablets have a &quot;big&quot; screen, so prevent Navbar from scrolling</span>
    <span class="nx">mobileDevice</span> <span class="o">|=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">forceMobile</span><span class="p">;</span>  <span class="c1">// overwrite detection when set by URL</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">mobileDevice</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$main</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">width</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pageSize&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;.page{width:&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">width</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;px;}&#39;</span><span class="p">);</span>
      <span class="c1">//do nothing</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getAvailableHeight</span><span class="p">();</span>
      <span class="nx">$main</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">width</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pageSize&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;.page{width:&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">width</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;px;height:&#39;</span> <span class="o">+</span> <span class="nx">height</span> <span class="o">+</span> <span class="s1">&#39;px;}&#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">((</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarTop&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;none&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarTop&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">2</span><span class="p">)</span>
          <span class="o">||</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarBottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;none&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarBottom&#39;</span><span class="p">).</span><span class="nx">innerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// Top/Bottom-Navbar is not initialized yet, wait some time and recalculate available height</span>
        <span class="c1">// this is an ugly workaround, if someone can come up with a better solution, feel free to implement it</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleResize</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">skipScrollFix</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">adjustColumns</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// the amount of columns has changed -&gt; recalculate the widgets widths</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">applyColumnWidths</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">rowspanClass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rowspan</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;rowspan rowspan&#39;</span> <span class="o">+</span> <span class="nx">rowspan</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">styleId</span> <span class="o">=</span> <span class="nx">className</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;Style&#39;</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">styleId</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">dummyDiv</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span>
          <span class="s1">&#39;&lt;div class=&quot;clearfix&quot; id=&quot;calcrowspan&quot;&gt;&lt;div id=&quot;containerDiv&quot; class=&quot;widget_container&quot;&gt;&lt;div class=&quot;widget clearfix text&quot; id=&quot;innerDiv&quot; /&gt;&lt;/div&gt;&lt;/div&gt;&#39;</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>

      <span class="kd">var</span> <span class="nx">singleHeight</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#containerDiv&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">singleHeightMargin</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#containerDiv&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#calcrowspan&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>

      <span class="c1">// append css style</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
          <span class="s1">&#39;&lt;style id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">styleId</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;.rowspan.rowspan&#39;</span> <span class="o">+</span> <span class="nx">rowspan</span>
              <span class="o">+</span> <span class="s1">&#39; { height: &#39;</span>
              <span class="o">+</span> <span class="p">((</span><span class="nx">rowspan</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">singleHeightMargin</span> <span class="o">+</span> <span class="nx">singleHeight</span><span class="p">)</span>
              <span class="o">+</span> <span class="s1">&#39;px;} &lt;/style&gt;&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">className</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">className</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">pluginsToLoadCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">xml</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">parseXML</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">loaded_xml</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">xml</span> <span class="o">=</span> <span class="nx">loaded_xml</span><span class="p">;</span>
    <span class="c1">// erst mal den Cache für AJAX-Requests wieder aktivieren</span>
    <span class="cm">/*</span>
<span class="cm">    $.ajaxSetup({</span>
<span class="cm">      cache : true</span>
<span class="cm">    });</span>
<span class="cm">    */</span>

    <span class="cm">/*</span>
<span class="cm">     * First, we try to get a design by url. Secondly, we try to get a predefined</span>
<span class="cm">     * design in the config file. Otherwise we show the design selection dialog.</span>
<span class="cm">     */</span>
    <span class="c1">// read predefined design in config</span>
    <span class="kd">var</span> <span class="nx">predefinedDesign</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;design&quot;</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;backend&quot;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">backend</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;backend&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">initBackendClient</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;scroll_speed&#39;</span> <span class="p">)</span> <span class="p">)</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollSpeed</span> <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
    <span class="k">else</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollSpeed</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;scroll_speed&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="kd">var</span> <span class="nx">enableColumnAdjustment</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;enable_column_adjustment&#39;</span><span class="p">)</span><span class="o">!=</span><span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">enableColumnAdjustment</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;enable_column_adjustment&#39;</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;true&quot;</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;bind_click_to_widget&#39;</span><span class="p">)</span><span class="o">!=</span><span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">bindClickToWidget</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;bind_click_to_widget&#39;</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;true&quot;</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">enableColumnAdjustment</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">enableColumnAdjustment</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">enableColumnAdjustment</span><span class="o">==</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="sr">/(android|blackberry|iphone|ipod|series60|symbian|windows ce|palm)/i</span>
        <span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()))</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">enableColumnAdjustment</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;default_columns&#39;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;default_columns&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;min_column_width&#39;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">minColumnWidth</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;min_column_width&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave_time</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;screensave_time&#39;</span><span class="p">);</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave_page</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;screensave_page&#39;</span><span class="p">);</span>

    <span class="c1">// design by url</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s2">&quot;design&quot;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s2">&quot;design&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// design by config file</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">predefinedDesign</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">=</span> <span class="nx">predefinedDesign</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// selection dialog</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">selectDesign</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;max_mobile_screen_width&#39;</span><span class="p">))</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">maxMobileScreenWidth</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;max_mobile_screen_width&#39;</span><span class="p">);</span>

    <span class="nx">$</span><span class="p">.</span><span class="nx">getCSS</span><span class="p">(</span> <span class="s1">&#39;designs/designglobals.css&#39;</span> <span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">getCSS</span><span class="p">(</span> <span class="s1">&#39;designs/&#39;</span> <span class="o">+</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">+</span> <span class="s1">&#39;/basic.css&#39;</span> <span class="p">);</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">getCSS</span><span class="p">(</span> <span class="s1">&#39;designs/&#39;</span> <span class="o">+</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">+</span> <span class="s1">&#39;/mobile.css&#39;</span><span class="p">,</span>
              <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">forceMobile</span> <span class="o">?</span> <span class="p">{}</span> <span class="o">:</span> 
              <span class="p">{</span><span class="nx">media</span><span class="o">:</span> <span class="s1">&#39;only screen and (max-width: &#39;</span>
              <span class="o">+</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">maxMobileScreenWidth</span> <span class="o">+</span> <span class="s1">&#39;px)&#39;</span><span class="p">}</span> <span class="p">);</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">getCSS</span><span class="p">(</span> <span class="s1">&#39;designs/&#39;</span> <span class="o">+</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">+</span> <span class="s1">&#39;/custom.css&#39;</span> <span class="p">);</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">getOrderedScripts</span><span class="p">(</span> <span class="p">[</span><span class="s1">&#39;designs/&#39;</span> <span class="o">+</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">clientDesign</span> <span class="o">+</span> <span class="s1">&#39;/design_setup.js&#39;</span><span class="p">],</span>
        <span class="kd">function</span><span class="p">(){</span>
          <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">designReady</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
          <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">setup_page</span><span class="p">();</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// start with the plugins</span>
    <span class="kd">var</span> <span class="nx">pluginsToLoad</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;meta &gt; plugins plugin&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">pluginsToLoadCount</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">getOrderedScripts</span><span class="p">(</span> <span class="p">[</span><span class="s1">&#39;plugins/&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/structure_plugin.js&#39;</span><span class="p">]</span> <span class="p">);</span>
    <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">pluginsToLoadCount</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// there are no plugins to load</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pluginsReady</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">setup_page</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// then the icons</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;meta &gt; icons icon-definition&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">$this</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">uri</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;uri&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">flavour</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;flavour&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">styling</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;styling&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">dynamic</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;dynamic&#39;</span><span class="p">);</span>
      <span class="nx">icons</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">uri</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">flavour</span><span class="p">,</span> <span class="nx">color</span><span class="p">,</span> <span class="nx">styling</span><span class="p">,</span> <span class="nx">dynamic</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// then the mappings</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;meta &gt; mappings mapping&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">$this</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
      <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="kd">var</span> <span class="nx">formula</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;formula&#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">formula</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;var func = function(x){&#39;</span> <span class="o">+</span> <span class="nx">formula</span><span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;; return y;}&#39;</span><span class="p">);</span>
        <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;formula&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">func</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">$this</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;entry&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">$localThis</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
          <span class="kd">var</span> <span class="nx">origin</span> <span class="o">=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">contents</span><span class="p">();</span>
          <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">[];</span>
          <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
             <span class="kd">var</span> <span class="nx">$v</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">origin</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
             <span class="k">if</span> <span class="p">(</span><span class="nx">$v</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="s1">&#39;icon&#39;</span><span class="p">))</span>
               <span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">icons</span><span class="p">.</span><span class="nx">getIcon</span><span class="p">(</span><span class="nx">$v</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span> <span class="nx">$v</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">),</span> <span class="nx">$v</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;flavour&#39;</span><span class="p">),</span> <span class="nx">$v</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">),</span> <span class="nx">$v</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;styling&#39;</span><span class="p">),</span> <span class="nx">$v</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">));</span>
             <span class="k">else</span>
               <span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">$v</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
          <span class="p">}</span>
          <span class="c1">// check for default entry</span>
          <span class="kd">var</span> <span class="nx">isDefaultValue</span> <span class="o">=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">);</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">isDefaultValue</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">isDefaultValue</span> <span class="o">=</span> <span class="nx">isDefaultValue</span> <span class="o">==</span> <span class="s2">&quot;true&quot;</span><span class="p">;</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">isDefaultValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="c1">// now set the mapped values</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">value</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">isDefaultValue</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">);</span>
            <span class="p">}</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;range&#39;</span><span class="p">])</span>
              <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
            <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;range&#39;</span><span class="p">][</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;range_min&#39;</span><span class="p">))]</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;range_max&#39;</span><span class="p">)),</span> <span class="nx">value</span> <span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">isDefaultValue</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">mappings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;range_min&#39;</span><span class="p">));</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">});</span>

    <span class="c1">// then the stylings</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;meta &gt; stylings styling&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">classnames</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
      <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;entry&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">$localThis</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="nx">classnames</span> <span class="o">+=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="p">;</span>
        <span class="c1">// check for default entry</span>
        <span class="kd">var</span> <span class="nx">isDefaultValue</span> <span class="o">=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isDefaultValue</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">isDefaultValue</span> <span class="o">=</span> <span class="nx">isDefaultValue</span> <span class="o">==</span> <span class="s2">&quot;true&quot;</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">isDefaultValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// now set the styling values</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">))</span> <span class="p">{</span>
          <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)]</span> <span class="o">=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">isDefaultValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// a range</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;range&#39;</span><span class="p">])</span>
            <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
          <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;range&#39;</span><span class="p">][</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;range_min&#39;</span><span class="p">))]</span> <span class="o">=</span> <span class="p">[</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;range_max&#39;</span><span class="p">)),</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">text</span><span class="p">()];</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">isDefaultValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;defaultValue&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$localThis</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;range_min&#39;</span><span class="p">));</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">});</span>
      <span class="nx">stylings</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="s1">&#39;classnames&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">classnames</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="c1">// then the status bar</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;meta &gt; statusbar status&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">condition</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;condition&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">extend</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;hrefextend&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">sPath</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">sPage</span> <span class="o">=</span> <span class="nx">sPath</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">sPath</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

      <span class="c1">// @TODO: make this match once the new editor is finished-ish.</span>
      <span class="kd">var</span> <span class="nx">editMode</span> <span class="o">=</span> <span class="s1">&#39;edit_config.html&#39;</span> <span class="o">==</span> <span class="nx">sPage</span><span class="p">;</span>

      <span class="c1">// skip this element if it&#39;s edit-only and we are non-edit, or the other</span>
      <span class="c1">// way</span>
      <span class="c1">// round</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">editMode</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;!edit&#39;</span> <span class="o">==</span> <span class="nx">condition</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">editMode</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;edit&#39;</span> <span class="o">==</span> <span class="nx">condition</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>

      <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
      <span class="k">switch</span> <span class="p">(</span><span class="nx">extend</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="s1">&#39;all&#39;</span><span class="o">:</span> <span class="c1">// append all parameters</span>
        <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\$/g</span><span class="p">,</span> <span class="s1">&#39;$$$$&#39;</span><span class="p">);</span>
        <span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(href=&quot;[^&quot;]*)(&quot;)/g</span><span class="p">,</span> <span class="s1">&#39;$1&#39;</span> <span class="o">+</span> <span class="nx">search</span> <span class="o">+</span> <span class="s1">&#39;$2&#39;</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="s1">&#39;config&#39;</span><span class="o">:</span> <span class="c1">// append config file info</span>
        <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\$/g</span><span class="p">,</span> <span class="s1">&#39;$$$$&#39;</span><span class="p">);</span>
        <span class="nx">search</span> <span class="o">=</span> <span class="nx">search</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/.*(config=[^&amp;]*).*|.*/</span><span class="p">,</span> <span class="s1">&#39;?$1&#39;</span><span class="p">);</span>

        <span class="c1">// text = $(text).replaceWith( /(href=&quot;[^&quot;]*)(&quot;)/g, &#39;$1&#39; + search + &#39;$2&#39;</span>
        <span class="c1">// );</span>

        <span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(href=&quot;[^&quot;]*)(&quot;)/g</span><span class="p">,</span> <span class="s1">&#39;$1&#39;</span> <span class="o">+</span> <span class="nx">search</span> <span class="o">+</span> <span class="s1">&#39;$2&#39;</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.footer&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.footer&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span> <span class="o">+</span> <span class="nx">text</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pageReady</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">setup_page</span><span class="p">();</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * applies the correct width to the widgets corresponding to the given colspan setting </span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">applyColumnWidths</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// all containers</span>
    <span class="kd">var</span> <span class="nx">allContainer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.widget_container&#39;</span><span class="p">);</span>
    <span class="nx">allContainer</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">$e</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">ourColspan</span> <span class="o">=</span> <span class="nx">$e</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;*:first-child&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;colspan&#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">ourColspan</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">areaColspan</span> <span class="o">=</span> <span class="nx">$e</span><span class="p">.</span><span class="nx">parentsUntil</span><span class="p">(</span><span class="s1">&#39;#centerContainer&#39;</span><span class="p">).</span><span class="nx">last</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">ourWidth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="nx">ourColspan</span> <span class="o">/</span> <span class="nx">areaColspan</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
      <span class="nx">$e</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">ourWidth</span> <span class="o">+</span> <span class="s1">&#39;%&#39;</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="c1">// and elements inside groups</span>
    <span class="kd">var</span> <span class="nx">adjustableElements</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.group .widget_container&#39;</span><span class="p">);</span>
    <span class="nx">adjustableElements</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">$e</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">ourColspan</span> <span class="o">=</span> <span class="nx">$e</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;.widget&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;colspan&#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">ourColspan</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">ourColspan</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// workaround for nowidget groups</span>
        <span class="nx">ourColspan</span> <span class="o">=</span> <span class="nx">$e</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;.group&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;colspan&#39;</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">areaColspan</span> <span class="o">=</span> <span class="nx">$e</span><span class="p">.</span><span class="nx">parentsUntil</span><span class="p">(</span><span class="s1">&#39;#centerContainer&#39;</span><span class="p">).</span><span class="nx">last</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;columns&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">defaultColumns</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">groupColspan</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">areaColspan</span><span class="p">,</span> <span class="nx">$e</span><span class="p">.</span><span class="nx">parentsUntil</span><span class="p">(</span>
          <span class="s1">&#39;.widget_container&#39;</span><span class="p">,</span> <span class="s1">&#39;.group&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;colspan&#39;</span><span class="p">));</span>
      <span class="kd">var</span> <span class="nx">ourWidth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="nx">ourColspan</span> <span class="o">/</span> <span class="nx">groupColspan</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span> <span class="c1">// in</span>
      <span class="c1">// percent</span>
      <span class="nx">$e</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">ourWidth</span> <span class="o">+</span> <span class="s1">&#39;%&#39;</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">};</span>

  
  <span class="k">this</span><span class="p">.</span><span class="nx">setup_page</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// and now setup the pages</span>
    
    <span class="c1">// check if the page and the plugins are ready now</span>
    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">pageReady</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">pluginsReady</span> <span class="o">||</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">designReady</span><span class="p">)</span>
      <span class="k">return</span><span class="p">;</span> <span class="c1">// we&#39;ll be called again...</span>
    
    <span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pages &gt; page&#39;</span><span class="p">,</span> <span class="nx">xml</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// only one page element allowed...</span>

    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">create_pages</span><span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">);</span>
    
    <span class="kd">var</span> <span class="nx">startpage</span> <span class="o">=</span> <span class="s1">&#39;id_&#39;</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;startpage&#39;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">startpage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getUrlVar</span><span class="p">(</span><span class="s1">&#39;startpage&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">startpage</span><span class="p">);</span>
    
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">adjustColumns</span><span class="p">();</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">applyColumnWidths</span><span class="p">();</span>
    
    <span class="c1">// Prevent elastic scrolling apart the main pane for iOS devices</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span> <span class="s1">&#39;touchmove&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.page,#navbarTop&gt;.navbar,#navbarBottom&gt;.navbar&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span> <span class="s1">&#39;touchmove&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">startTopScroll</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">startLeftScroll</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">();</span>
      
      <span class="c1">// prevent scrolling of an element that takes full height and width</span>
      <span class="c1">// as it doesn&#39;t need scrolling</span>
      <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="nx">startTopScroll</span>  <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">startTopScroll</span>  <span class="o">+</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetHeight</span> <span class="o">&gt;=</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">scrollHeight</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
          <span class="p">(</span><span class="nx">startLeftScroll</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">startLeftScroll</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetWidth</span>  <span class="o">&gt;=</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">scrollWidth</span> <span class="p">)</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>
      
      <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="c1">// stop the propagation if scrollable is at the end</span>
    <span class="c1">// inspired by https://github.com/joelambert/ScrollFix</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.page,#navbarTop&gt;.navbar,#navbarBottom&gt;.navbar&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span> <span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">startTopScroll</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">();</span>

      <span class="k">if</span><span class="p">(</span><span class="nx">startTopScroll</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="nx">elem</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

      <span class="k">if</span><span class="p">(</span><span class="nx">startTopScroll</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetHeight</span> <span class="o">&gt;=</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">scrollHeight</span><span class="p">)</span>
        <span class="nx">elem</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">(</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">scrollHeight</span> <span class="o">-</span> <span class="nx">elem</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetHeight</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">);</span>
    <span class="p">});</span>
    
    <span class="c1">// setup the scrollable</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">main_scroll</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">).</span><span class="nx">scrollable</span><span class="p">({</span>
      <span class="nx">keyboard</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nx">touch</span> <span class="o">:</span> <span class="kc">false</span>
    <span class="p">}).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scrollable&#39;</span><span class="p">);</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">onSeek</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pagePartsHandler</span><span class="p">.</span><span class="nx">updateTopNavigation</span><span class="p">(</span> <span class="k">this</span> <span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.activePage&#39;</span><span class="p">,</span> <span class="s1">&#39;#pages&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;activePage&#39;</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.pageActive&#39;</span><span class="p">,</span> <span class="s1">&#39;#pages&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;pageActive&#39;</span><span class="p">);</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;pageActive activePage&#39;</span><span class="p">);</span><span class="c1">// show new page</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pages&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
    <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollSpeed</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">getConf</span><span class="p">().</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollSpeed</span><span class="p">;</span>
    <span class="p">}</span>
   
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollToPage</span><span class="p">(</span><span class="nx">startpage</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.fast&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">seekTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
    <span class="p">});</span>

    <span class="c1">// reaction on browser back button</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">onpopstate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// where do we come frome?</span>
      <span class="nx">lastpage</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">lastpage</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// browser back button takes back to the last page</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollToPage</span><span class="p">(</span><span class="nx">lastpage</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;embed&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSVGDocument</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">svg</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span>
        
        <span class="c1">// Pipe-O-Matic:</span>
        <span class="kd">var</span> <span class="nx">pipes</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;pipe_group&#39;</span><span class="p">);</span>
        <span class="nx">$</span><span class="p">(</span><span class="nx">pipes</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">pipe_group</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">halfsize</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">strokeWidth</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">opacity</span> <span class="o">=</span> <span class="mf">0.15</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">halfsize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">width</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">width</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">opacity</span> <span class="o">-=</span> <span class="mf">0.1</span> <span class="o">/</span> <span class="nx">halfsize</span><span class="p">;</span>
              <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">();</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">baseVal</span> <span class="o">+=</span> <span class="s1">&#39; pipe-o-matic_clone&#39;</span><span class="p">;</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">strokeWidth</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">stroke</span> <span class="o">=</span> <span class="s1">&#39;#ffffff&#39;</span><span class="p">;</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">strokeOpacity</span> <span class="o">=</span> <span class="nx">opacity</span><span class="p">;</span>
              <span class="nx">pipe_group</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span>
                  <span class="nx">path</span><span class="p">.</span><span class="nx">nextElementSibling</span><span class="p">);</span>
            <span class="p">}</span>
          <span class="p">});</span>
        <span class="p">});</span>

        <span class="c1">// Flow-O-Matic: add Paths</span>
        <span class="kd">var</span> <span class="nx">segmentLength</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">pipes</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;show_flow&#39;</span><span class="p">);</span>
        <span class="nx">$</span><span class="p">(</span><span class="nx">pipes</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">pipe_group</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
          <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">animVal</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;pipe-o-matic_clone&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
              <span class="k">return</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">stroke</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">stroke</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">,</span> <span class="nx">b</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">stroke</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;#&#39;</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">r</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">stroke</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">16</span><span class="p">);</span>
              <span class="nx">g</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">stroke</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="mi">16</span><span class="p">);</span>
              <span class="nx">b</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">stroke</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="mi">16</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">stroke</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;rgb(&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="nx">stroke</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^0-9,.]*/g</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
              <span class="nx">r</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
              <span class="nx">g</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
              <span class="nx">b</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="kd">var</span> <span class="nx">rTarget</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// this color should be</span>
            <span class="c1">// somehow user setable -</span>
            <span class="c1">// but how?</span>
            <span class="kd">var</span> <span class="nx">gTarget</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">bTarget</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kd">function</span> <span class="nx">toHex</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">v</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
              <span class="k">return</span> <span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;0&#39;</span> <span class="o">+</span> <span class="nx">ret</span> <span class="o">:</span> <span class="nx">ret</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">segmentLength</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">factor</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">i</span> <span class="o">/</span> <span class="p">(</span><span class="nx">segmentLength</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
              <span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="p">(</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">segmentLength</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="nx">i</span><span class="p">)</span>
              <span class="o">%</span> <span class="nx">segmentLength</span><span class="p">;</span>
              <span class="kd">var</span> <span class="nx">low</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
              <span class="kd">var</span> <span class="nx">high</span> <span class="o">=</span> <span class="nx">segmentLength</span> <span class="o">-</span> <span class="nx">low</span><span class="p">;</span>
              <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">();</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">baseVal</span> <span class="o">+=</span> <span class="s1">&#39; flow-o-matic_clone&#39;</span><span class="p">;</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">stroke</span> <span class="o">=</span> <span class="s1">&#39;#&#39;</span><span class="o">+</span> <span class="nx">toHex</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span> <span class="nx">factor</span> <span class="o">+</span> <span class="nx">rTarget</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">factor</span><span class="p">))</span><span class="o">+</span> <span class="nx">toHex</span><span class="p">(</span><span class="nx">g</span> <span class="o">*</span> <span class="nx">factor</span> <span class="o">+</span> <span class="nx">gTarget</span><span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">factor</span><span class="p">))</span><span class="o">+</span> <span class="nx">toHex</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span> <span class="nx">factor</span> <span class="o">+</span> <span class="nx">bTarget</span><span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">factor</span><span class="p">));</span>
              <span class="k">if</span> <span class="p">(</span><span class="nx">high</span> <span class="o">&gt;</span> <span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">strokeDasharray</span> <span class="o">=</span> <span class="p">[</span><span class="nx">high</span> <span class="o">-</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="mi">0</span> <span class="p">];</span>
              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">strokeDasharray</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">0</span><span class="p">,</span><span class="nx">low</span> <span class="o">-</span> <span class="p">(</span><span class="nx">offset</span> <span class="o">-</span> <span class="nx">high</span><span class="p">),</span> <span class="nx">high</span><span class="p">,</span> <span class="nx">offset</span> <span class="o">-</span> <span class="nx">high</span> <span class="p">];</span>
              <span class="p">}</span>
              <span class="nx">n</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">strokeDashoffset</span> <span class="o">=</span> <span class="nx">length</span> <span class="o">%</span> <span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="nx">segmentLength</span><span class="p">);</span>
              <span class="nx">pipe_group</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">nextElementSibling</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">length</span> <span class="o">+=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">getTotalLength</span><span class="p">();</span>
          <span class="p">});</span>
          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">getNamedItem</span><span class="p">(</span><span class="s1">&#39;data-cometvisu-active&#39;</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">activeValues</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">getNamedItem</span><span class="p">(</span><span class="s1">&#39;data-cometvisu-active&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
            <span class="nx">$</span><span class="p">(</span><span class="nx">activeValues</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;_&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">passedElement</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">==</span> <span class="s1">&#39;01&#39;</span><span class="p">)</span>
                  <span class="c1">// pipe_group.classList.add(&#39;flow_active&#39;);</span>
                  <span class="nx">pipe_group</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span><span class="nx">pipe_group</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39; flow_active&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span> <span class="s1">&#39; flow_active&#39;</span><span class="p">);</span>
                <span class="k">else</span>
                  <span class="nx">pipe_group</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span><span class="nx">pipe_group</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39; flow_active&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
                <span class="c1">// pipe_group.classList.remove(&#39;flow_active&#39;);</span>
              <span class="p">});</span>
            <span class="p">});</span>
          <span class="p">}</span>
        <span class="p">});</span>

        <span class="c1">// Flow-O-Matic: add CSS</span>
        <span class="c1">// helper for multiple bowser support</span>
        <span class="kd">function</span> <span class="nx">createKeyframe</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">content</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="s1">&#39;@keyframes &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; {\n&quot;</span> <span class="o">+</span> <span class="nx">content</span> <span class="o">+</span> <span class="s2">&quot;}\n&quot;</span>
          <span class="o">+</span> <span class="s1">&#39;@-moz-keyframes &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; {\n&quot;</span> <span class="o">+</span> <span class="nx">content</span> <span class="o">+</span> <span class="s2">&quot;}\n&quot;</span>
          <span class="o">+</span> <span class="s1">&#39;@-webkit-keyframes &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; {\n&quot;</span> <span class="o">+</span> <span class="nx">content</span> <span class="o">+</span> <span class="s2">&quot;}\n&quot;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">keyframes</span> <span class="o">=</span> <span class="nx">createKeyframe</span><span class="p">(</span><span class="s1">&#39;move&#39;</span><span class="p">,</span>
            <span class="s2">&quot;from {  stroke-dashoffset: &quot;</span> <span class="o">+</span> <span class="nx">segmentLength</span> <span class="o">+</span> <span class="s2">&quot;;  }\n&quot;</span>
            <span class="o">+</span> <span class="s2">&quot;to   {  stroke-dashoffset: 0;  }\n&quot;</span><span class="p">);</span>
        <span class="kd">function</span> <span class="nx">createCSSRules</span><span class="p">(</span><span class="nx">style</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">style</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s2">&quot;;\n&quot;</span> <span class="o">+</span> <span class="s1">&#39;-moz-&#39;</span> <span class="o">+</span> <span class="nx">style</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span>
          <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s2">&quot;;\n&quot;</span> <span class="o">+</span> <span class="s1">&#39;-webkit-&#39;</span> <span class="o">+</span> <span class="nx">style</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nx">value</span>
          <span class="o">+</span> <span class="s2">&quot;;\n&quot;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">keyframes</span> <span class="o">+=</span> <span class="s2">&quot;.flow_active path {\n&quot;</span>
          <span class="o">+</span> <span class="nx">createCSSRules</span><span class="p">(</span><span class="s1">&#39;animation-duration&#39;</span><span class="p">,</span> <span class="s1">&#39;3s&#39;</span><span class="p">)</span>
          <span class="o">+</span> <span class="nx">createCSSRules</span><span class="p">(</span><span class="s1">&#39;animation-name&#39;</span><span class="p">,</span> <span class="s1">&#39;move&#39;</span><span class="p">)</span>
          <span class="o">+</span> <span class="nx">createCSSRules</span><span class="p">(</span><span class="s1">&#39;animation-timing-function&#39;</span><span class="p">,</span> <span class="s1">&#39;linear&#39;</span><span class="p">)</span>
          <span class="o">+</span> <span class="nx">createCSSRules</span><span class="p">(</span><span class="s1">&#39;animation-iteration-count&#39;</span><span class="p">,</span> <span class="s1">&#39;infinite&#39;</span><span class="p">)</span>
          <span class="o">+</span> <span class="s2">&quot;}\n&quot;</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s1">&#39;http://www.w3.org/2000/svg&#39;</span><span class="p">,</span>
        <span class="s1">&#39;style&#39;</span><span class="p">);</span>
        <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css&#39;</span><span class="p">);</span>
        <span class="nx">s</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">keyframes</span><span class="p">;</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg&#39;</span><span class="p">,</span> <span class="nx">svg</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
      <span class="p">};</span>
    <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">enableAddressQueue</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// identify addresses on startpage</span>
      <span class="kd">var</span> <span class="nx">startPageAddresses</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.actor&#39;</span><span class="p">,</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">startpage</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;address&#39;</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">ga</span> <span class="k">in</span> <span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">startPageAddresses</span><span class="p">[</span><span class="nx">ga</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">});</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">setInitialAddresses</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">startPageAddresses</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">addressesToSubscribe</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getAddresses</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span> <span class="mi">0</span> <span class="o">==</span> <span class="nx">addressesToSubscribe</span><span class="p">.</span><span class="nx">length</span> <span class="p">)</span>
      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span> <span class="s1">&#39;firstdata&#39;</span> <span class="p">);</span> <span class="c1">// no data to receive =&gt; send event now</span>
    <span class="k">else</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">visu</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">getAddresses</span><span class="p">());</span>
    
    <span class="nx">xml</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">delete</span> <span class="nx">xml</span><span class="p">;</span> <span class="c1">// not needed anymore - free the space</span>
<span class="c1">//    $(window).trigger(&#39;resize&#39;);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.loading&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;loading&#39;</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#pages&quot;</span><span class="p">).</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s2">&quot;done&quot;</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">!==</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave_time</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollToPage</span><span class="p">();},</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave_time</span><span class="o">*</span><span class="mi">1000</span> <span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">clearInterval</span><span class="p">(</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave</span> <span class="p">);</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollToPage</span><span class="p">();},</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">screensave_time</span><span class="o">*</span><span class="mi">1000</span> <span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">create_pages</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">flavour</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">creator</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">design</span><span class="p">.</span><span class="nx">getCreator</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">retval</span> <span class="o">=</span> <span class="nx">creator</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">flavour</span><span class="p">,</span> <span class="nx">type</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="nx">retval</span> <span class="p">)</span>
      <span class="k">return</span><span class="p">;</span>
    
    <span class="nx">retval</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span>
      <span class="s1">&#39;&lt;div class=&quot;widget_container &#39;</span>
      <span class="o">+</span> <span class="p">(</span><span class="nx">retval</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;rowspanClass&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">retval</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;rowspanClass&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
      <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;break&#39;</span> <span class="o">===</span> <span class="nx">retval</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;break_container&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="c1">// special case for break widget</span>
      <span class="o">+</span> <span class="s1">&#39;&quot; id=&quot;&#39;</span><span class="o">+</span><span class="nx">path</span><span class="o">+</span><span class="s1">&#39;&quot;/&gt;&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="nx">page</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">retval</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">retval</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">scrollToPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page_id</span><span class="p">,</span> <span class="nx">speed</span><span class="p">,</span> <span class="nx">skipHistory</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="nx">page_id</span> <span class="p">)</span>
      <span class="nx">page_id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">screensave_page</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">page_id</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^id_[0-9_]*$/</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// find Page-ID by name</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.page h1:contains(&#39;</span> <span class="o">+</span> <span class="nx">page_id</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="s1">&#39;#pages&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">==</span> <span class="nx">page_id</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">page_id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;.page&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="c1">// don&#39;t scroll when target is already active</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageID</span> <span class="o">===</span> <span class="nx">page_id</span> <span class="p">)</span>
      <span class="k">return</span><span class="p">;</span>
    
    <span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">page_id</span><span class="p">);</span>
    
    <span class="k">if</span><span class="p">(</span> <span class="mi">0</span> <span class="o">===</span> <span class="nx">page</span><span class="p">.</span><span class="nx">length</span> <span class="p">)</span> <span class="c1">// check if page does exist</span>
      <span class="k">return</span><span class="p">;</span>
    
    <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="nx">speed</span> <span class="p">)</span>
      <span class="nx">speed</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">scrollSpeed</span><span class="p">;</span>
    
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPageID</span> <span class="o">=</span> <span class="nx">page_id</span><span class="p">;</span>
    
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">resetPageValues</span><span class="p">();</span>
    
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">page</span><span class="p">;</span>

    <span class="nx">page</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;pageActive activePage&#39;</span><span class="p">);</span><span class="c1">// show new page</span>
    
    <span class="c1">// update visibility of navbars, top-navigation, footer</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pagePartsHandler</span><span class="p">.</span><span class="nx">updatePageParts</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">speed</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">scrollLeft</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">position</span><span class="p">().</span><span class="nx">left</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="c1">// jump to the page on the left of the page we need to scroll to</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">scrollLeft</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pages&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="o">-</span><span class="nx">page</span><span class="p">.</span><span class="nx">position</span><span class="p">().</span><span class="nx">left</span> <span class="o">+</span> <span class="nx">page</span><span class="p">.</span><span class="nx">width</span><span class="p">());</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#pages&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="o">-</span><span class="nx">page</span><span class="p">.</span><span class="nx">position</span><span class="p">().</span><span class="nx">left</span> <span class="o">-</span> <span class="nx">page</span><span class="p">.</span><span class="nx">width</span><span class="p">());</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// push new state to history</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">skipHistory</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">(</span><span class="nx">page_id</span><span class="p">,</span> <span class="nx">page_id</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">);</span>
    
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">seekTo</span><span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="nx">speed</span><span class="p">);</span> <span class="c1">// scroll to it</span>

    <span class="c1">// show the navbars for this page</span>
    <span class="cm">/*</span>
<span class="cm">     * $(&#39;#&#39;+page_id+&#39;_top_navbar&#39;).addClass(&#39;navbarActive&#39;);</span>
<span class="cm">     * $(&#39;#&#39;+page_id+&#39;_right_navbar&#39;).addClass(&#39;navbarActive&#39;);</span>
<span class="cm">     * $(&#39;#&#39;+page_id+&#39;_bottom_navbar&#39;).addClass(&#39;navbarActive&#39;);</span>
<span class="cm">     * $(&#39;#&#39;+page_id+&#39;_left_navbar&#39;).addClass(&#39;navbarActive&#39;);</span>
<span class="cm">     */</span>
    <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pagePartsHandler</span><span class="p">.</span><span class="nx">initializeNavbars</span><span class="p">(</span><span class="nx">page_id</span><span class="p">);</span>

    <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;scrolltopage&#39;</span><span class="p">,</span> <span class="nx">page_id</span><span class="p">);</span>    
  <span class="p">};</span>

  <span class="cm">/*</span>
<span class="cm">   * Show a popup of type &quot;type&quot;. The attributes is an type dependend object</span>
<span class="cm">   * This function returnes a jQuery object that points to the whole popup, so</span>
<span class="cm">   * it&#39;s content can be easily extended</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">showPopup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// var retval = design.popups[ type ].create( attributes ); //page, path );</span>
    <span class="c1">// return retval;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">design</span><span class="p">.</span><span class="nx">popups</span><span class="p">[</span><span class="nx">type</span><span class="p">])</span>
      <span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;unknown&#39;</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">design</span><span class="p">.</span><span class="nx">popups</span><span class="p">[</span><span class="nx">type</span><span class="p">].</span><span class="nx">create</span><span class="p">(</span><span class="nx">attributes</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="cm">/*</span>
<span class="cm">   * Remove the popup. The parameter is the jQuery object returned by the</span>
<span class="cm">   * showPopup function</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">removePopup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">jQuery_object</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">jQuery_object</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
  <span class="p">};</span>

  <span class="cm">/** ************************************************************************* */</span>
  <span class="cm">/* FIXME - Question: should this belong to the VisuDesign object so that it */</span>
  <span class="cm">/* is possible to overload?!? */</span>
  <span class="cm">/** ************************************************************************* */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">refreshAction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/*</span>
<span class="cm">     * Special treatment for (external) iframes: we need to clear it and reload</span>
<span class="cm">     * it in another thread as otherwise stays blank for some targets/sites and</span>
<span class="cm">     * src = src doesnt work anyway on external This creates though some</span>
<span class="cm">     * &quot;flickering&quot; so we avoid to use it on images, internal iframes and others</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">parenthost</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s2">&quot;//&quot;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">==</span> <span class="s2">&quot;IFRAME&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">src</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">parenthost</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">target</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">target</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">src</span><span class="p">;</span>
      <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">target</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">src</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">setupRefreshAction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">refresh</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;refresh&#39;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">refresh</span> <span class="o">&amp;&amp;</span> <span class="nx">refresh</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;iframe&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">))[</span><span class="mi">0</span><span class="p">];</span>
      <span class="kd">var</span> <span class="nx">src</span> <span class="o">=</span> <span class="nx">target</span><span class="p">.</span><span class="nx">src</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">src</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="nx">src</span> <span class="o">+=</span> <span class="s1">&#39;?&#39;</span><span class="p">;</span>
      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;interval&#39;</span><span class="p">,</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">refreshAction</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">src</span><span class="p">);</span>
      <span class="p">},</span> <span class="nx">refresh</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">selectDesign</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$body</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">);</span>

    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;body &gt; *&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
    <span class="nx">$body</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
      <span class="nx">backgroundColor</span> <span class="o">:</span> <span class="s2">&quot;black&quot;</span>
    <span class="p">});</span>

    <span class="nx">$div</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;div id=\&quot;designSelector\&quot; /&gt;&quot;</span><span class="p">);</span>
    <span class="nx">$div</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
      <span class="nx">background</span> <span class="o">:</span> <span class="s2">&quot;#808080&quot;</span><span class="p">,</span>
      <span class="nx">width</span> <span class="o">:</span> <span class="s2">&quot;400px&quot;</span><span class="p">,</span>
      <span class="nx">color</span> <span class="o">:</span> <span class="s2">&quot;white&quot;</span><span class="p">,</span>
      <span class="nx">margin</span> <span class="o">:</span> <span class="s2">&quot;auto&quot;</span><span class="p">,</span>
      <span class="nx">padding</span> <span class="o">:</span> <span class="s2">&quot;0.5em&quot;</span>
    <span class="p">});</span>
    <span class="nx">$div</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;Loading ...&quot;</span><span class="p">);</span>

    <span class="nx">$body</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$div</span><span class="p">);</span>

    <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;./designs/get_designs.php&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$div</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>

      <span class="nx">$div</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;h1&gt;Please select design&lt;/h1&gt;&quot;</span><span class="p">);</span>
      <span class="nx">$div</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;p&gt;The Location/URL will change after you have chosen your design. Please bookmark the new URL if you do not want to select the design every time.&lt;/p&gt;&quot;</span><span class="p">);</span>

      <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">$myDiv</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;div /&gt;&quot;</span><span class="p">);</span>

        <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
          <span class="nx">cursor</span> <span class="o">:</span> <span class="s2">&quot;pointer&quot;</span><span class="p">,</span>
          <span class="nx">padding</span> <span class="o">:</span> <span class="s2">&quot;0.5em 1em&quot;</span><span class="p">,</span>
          <span class="nx">borderBottom</span> <span class="o">:</span> <span class="s2">&quot;1px solid black&quot;</span><span class="p">,</span>
          <span class="nx">margin</span> <span class="o">:</span> <span class="s2">&quot;auto&quot;</span><span class="p">,</span>
          <span class="nx">width</span> <span class="o">:</span> <span class="s2">&quot;262px&quot;</span><span class="p">,</span>
          <span class="nx">position</span> <span class="o">:</span> <span class="s2">&quot;relative&quot;</span>
        <span class="p">});</span>

        <span class="nx">$myDiv</span>
        <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;div style=\&quot;font-weight: bold; margin: 1em 0 .5em;\&quot;&gt;Design: &quot;</span>
            <span class="o">+</span> <span class="nx">element</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="p">);</span>
        <span class="nx">$myDiv</span>
        <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;iframe src=\&quot;designs/design_preview.html?design=&quot;</span>
            <span class="o">+</span> <span class="nx">element</span>
            <span class="o">+</span> <span class="s2">&quot;\&quot; width=\&quot;160\&quot; height=\&quot;90\&quot; border=\&quot;0\&quot; scrolling=\&quot;auto\&quot; frameborder=\&quot;0\&quot; style=\&quot;z-index: 1;\&quot;&gt;&lt;/iframe&gt;&quot;</span><span class="p">);</span>
        <span class="nx">$myDiv</span>
        <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;img width=\&quot;60\&quot; height=\&quot;30\&quot; src=\&quot;./config/media/arrow.png\&quot; alt=\&quot;select\&quot; border=\&quot;0\&quot; style=\&quot;margin: 60px 10px 10px 30px;\&quot;/&gt;&quot;</span><span class="p">);</span>

        <span class="nx">$div</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$myDiv</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">$tDiv</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;div /&gt;&quot;</span><span class="p">);</span>
        <span class="nx">$tDiv</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
          <span class="nx">background</span> <span class="o">:</span> <span class="s2">&quot;transparent&quot;</span><span class="p">,</span>
          <span class="nx">position</span> <span class="o">:</span> <span class="s2">&quot;absolute&quot;</span><span class="p">,</span>
          <span class="nx">height</span> <span class="o">:</span> <span class="s2">&quot;90px&quot;</span><span class="p">,</span>
          <span class="nx">width</span> <span class="o">:</span> <span class="s2">&quot;160px&quot;</span><span class="p">,</span>
          <span class="nx">zIndex</span> <span class="o">:</span> <span class="mi">2</span>
        <span class="p">});</span>
        <span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;iframe&quot;</span><span class="p">).</span><span class="nx">position</span><span class="p">();</span>
        <span class="nx">$tDiv</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
          <span class="nx">left</span> <span class="o">:</span> <span class="nx">pos</span><span class="p">.</span><span class="nx">left</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span><span class="p">,</span>
          <span class="nx">top</span> <span class="o">:</span> <span class="nx">pos</span><span class="p">.</span><span class="nx">top</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span>
        <span class="p">});</span>
        <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$tDiv</span><span class="p">);</span>

        <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">hover</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="c1">// over</span>
          <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
            <span class="nx">background</span> <span class="o">:</span> <span class="s2">&quot;#bbbbbb&quot;</span>
          <span class="p">});</span>
        <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="c1">// out</span>
          <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
            <span class="nx">background</span> <span class="o">:</span> <span class="s2">&quot;transparent&quot;</span>
          <span class="p">});</span>
        <span class="p">});</span>

        <span class="nx">$myDiv</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span>
            <span class="o">+</span> <span class="s2">&quot;?design=&quot;</span> <span class="o">+</span> <span class="nx">element</span><span class="p">;</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span>
            <span class="o">+</span> <span class="s2">&quot;&amp;design=&quot;</span> <span class="o">+</span> <span class="nx">element</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">};</span>

  <span class="c1">// tools for widget handling</span>
  <span class="cm">/**</span>
<span class="cm">   * Return a widget (to be precise: the widget_container) for the given path</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">lookupWidget</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span> <span class="s1">&#39;_&#39;</span> <span class="p">);</span>
    <span class="kd">var</span> <span class="nx">elementNumber</span> <span class="o">=</span> <span class="o">+</span><span class="nx">id</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;.page#&#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">children</span><span class="p">()[</span> <span class="nx">elementNumber</span><span class="o">+</span><span class="mi">1</span> <span class="p">];</span>
  <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">getParentPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="mi">0</span> <span class="o">===</span> <span class="nx">page</span><span class="p">.</span><span class="nx">length</span> <span class="p">)</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    
    <span class="kd">var</span> <span class="nx">pathParts</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">);</span>
    <span class="nx">pathParts</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">pathParts</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// top-level (id_)-&gt; no parent pages</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">pathParts</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">pathParts</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">pathParts</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;_&#39;</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;page&quot;</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Load a script and run it before page setup.</span>
<span class="cm">   * This is needed for plugin that depend on an external library.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">getPluginDependency</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">url</span> <span class="p">){</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">getScriptSync</span><span class="p">(</span> <span class="nx">url</span> <span class="p">);</span>
  <span class="p">}</span>
  
  <span class="cm">/**</span>
<span class="cm">   * This has to be called by a plugin once it was loaded.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">pluginLoaded</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">pluginsToLoadCount</span><span class="o">--</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span> <span class="mi">0</span> <span class="o">==</span> <span class="nx">pluginsToLoadCount</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">pluginsReady</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">setup_page</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Create a new widget.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">element</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">&quot;created widget &#39;&quot;</span> <span class="o">+</span> <span class="nx">path</span> <span class="o">+</span> <span class="s2">&quot;&#39;: &#39;&quot;</span> <span class="o">+</span> <span class="nx">element</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Delete an existing path, i.e. widget, group or even page - including </span>
<span class="cm">   * child elements.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">deleteCommand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">lookupWidget</span><span class="p">(</span> <span class="nx">path</span> <span class="p">),</span> <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">path</span> <span class="p">)</span> <span class="p">);</span>
    <span class="c1">//$( this.lookupWidget( path ) ).remove();</span>
    <span class="k">return</span> <span class="s2">&quot;deleted widget &#39;&quot;</span> <span class="o">+</span> <span class="nx">path</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Focus a widget.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">focus</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.focused&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;focused&#39;</span><span class="p">)</span>
    <span class="nx">$</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">lookupWidget</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span> <span class="s1">&#39;focused&#39;</span> <span class="p">);</span>
  <span class="p">};</span>
  
  <span class="c1">////////// Reflection API for possible Editor communication: Start //////////</span>
  <span class="cm">/**</span>
<span class="cm">   * Return a list of all widgets.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">widgetTree</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.page&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span> <span class="s1">&#39;_&#39;</span> <span class="p">);</span>
      <span class="kd">var</span> <span class="nx">thisEntry</span> <span class="o">=</span> <span class="nx">widgetTree</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span> <span class="s1">&#39;id&#39;</span> <span class="o">===</span> <span class="nx">id</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">thisNumber</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span> <span class="nx">thisNumber</span> <span class="o">=</span> <span class="nx">id</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="p">(</span><span class="nx">thisNumber</span> <span class="k">in</span> <span class="nx">thisEntry</span><span class="p">)</span> <span class="p">)</span>
            <span class="nx">thisEntry</span><span class="p">[</span> <span class="nx">thisNumber</span> <span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
          
          <span class="nx">thisEntry</span> <span class="o">=</span> <span class="nx">thisEntry</span><span class="p">[</span> <span class="nx">thisNumber</span> <span class="p">];</span>
        <span class="p">}</span>
        <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">children</span><span class="p">(</span> <span class="s1">&#39;div.widget_container&#39;</span> <span class="p">).</span><span class="nx">each</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">i</span> <span class="p">){</span>
          <span class="k">if</span><span class="p">(</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="nx">thisEntry</span><span class="p">[</span> <span class="nx">i</span> <span class="p">]</span> <span class="p">)</span>
          <span class="p">{</span>
            <span class="nx">thisEntry</span><span class="p">[</span> <span class="nx">i</span> <span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
          <span class="p">}</span>
          <span class="kd">var</span> <span class="nx">thisWidget</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">children</span><span class="p">()[</span><span class="mi">0</span><span class="p">];</span>
          <span class="nx">thisEntry</span><span class="p">[</span> <span class="nx">i</span> <span class="p">].</span><span class="nx">name</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;className&#39;</span> <span class="k">in</span> <span class="nx">thisWidget</span><span class="p">)</span> <span class="o">?</span> <span class="nx">thisWidget</span><span class="p">.</span><span class="nx">className</span> <span class="o">:</span> <span class="s1">&#39;TODO&#39;</span><span class="p">;</span>
          <span class="nx">thisEntry</span><span class="p">[</span> <span class="nx">i</span> <span class="p">].</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">widgetTree</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Return all attributes of a widget.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">read</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">widget</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lookupWidget</span><span class="p">(</span> <span class="nx">path</span> <span class="p">),</span>
        <span class="nx">data</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="p">{},</span> <span class="nx">$</span><span class="p">(</span> <span class="nx">widget</span> <span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">data</span><span class="p">()</span> <span class="p">);</span> <span class="c1">// copy</span>
    <span class="k">delete</span> <span class="nx">data</span><span class="p">.</span><span class="nx">basicvalue</span><span class="p">;</span>
    <span class="k">delete</span> <span class="nx">data</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Set the selection state of a widget.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">state</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lookupWidget</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">state</span> <span class="p">)</span>
      <span class="nx">$</span><span class="p">(</span> <span class="nx">container</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span> <span class="s1">&#39;selected&#39;</span><span class="p">);</span>
    <span class="k">else</span>
      <span class="nx">$</span><span class="p">(</span> <span class="nx">container</span> <span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span> <span class="s1">&#39;selected&#39;</span><span class="p">);</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Set all attributes of a widget.</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">write</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">attributes</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">lookupWidget</span><span class="p">(</span> <span class="nx">path</span> <span class="p">)</span> <span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">data</span><span class="p">(</span> <span class="nx">attributes</span> <span class="p">);</span>
  <span class="p">};</span>
  
  <span class="cm">/**</span>
<span class="cm">   * Reflection API: communication</span>
<span class="cm">   * Handle messages that might be sent by the editor</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">handleMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// prevend bad or even illegal requests</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">origin</span>  <span class="o">!==</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">origin</span> <span class="o">||</span>
        <span class="s1">&#39;object&#39;</span>      <span class="o">!==</span> <span class="k">typeof</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span>      <span class="o">||</span>
        <span class="o">!</span><span class="p">(</span><span class="s1">&#39;command&#39;</span>    <span class="k">in</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span> <span class="p">)</span>           <span class="o">||</span>
        <span class="o">!</span><span class="p">(</span><span class="s1">&#39;parameters&#39;</span> <span class="k">in</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span> <span class="p">)</span>
    <span class="p">)</span>
      <span class="k">return</span><span class="p">;</span>
    
    <span class="kd">var</span> <span class="nx">answer</span>     <span class="o">=</span> <span class="s1">&#39;bad command&#39;</span><span class="p">,</span>
        <span class="nx">parameters</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">parameters</span><span class="p">;</span>
    
    <span class="c1">// note: as the commands are from external, we have to be a bit more</span>
    <span class="c1">//       carefull for corectness testing</span>
    <span class="k">switch</span><span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">command</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">case</span> <span class="s1">&#39;create&#39;</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span> <span class="s1">&#39;object&#39;</span>  <span class="o">===</span> <span class="k">typeof</span> <span class="nx">parameters</span>   <span class="o">&amp;&amp;</span>
            <span class="nx">pathRegEx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">path</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="s1">&#39;string&#39;</span> <span class="o">===</span> <span class="k">typeof</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">element</span>
        <span class="p">)</span>
          <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">element</span> <span class="p">);</span>
        <span class="k">else</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="s1">&#39;bad path or element&#39;</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
        
      <span class="k">case</span> <span class="s1">&#39;delete&#39;</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span> <span class="nx">pathRegEx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span> <span class="nx">parameters</span> <span class="p">)</span> <span class="p">)</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">deleteCommand</span><span class="p">(</span> <span class="nx">parameters</span> <span class="p">);</span>
        <span class="k">else</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="s1">&#39;bad path&#39;</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
        
      <span class="k">case</span> <span class="s1">&#39;focus&#39;</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span> <span class="nx">pathRegEx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span> <span class="nx">parameters</span> <span class="p">)</span> <span class="p">)</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">focus</span><span class="p">(</span> <span class="nx">parameters</span> <span class="p">);</span>
        <span class="k">else</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="s1">&#39;bad path&#39;</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
        
      <span class="k">case</span> <span class="s1">&#39;list&#39;</span><span class="o">:</span>
        <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">list</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
        
      <span class="k">case</span> <span class="s1">&#39;read&#39;</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span> <span class="nx">pathRegEx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span> <span class="nx">parameters</span> <span class="p">)</span> <span class="p">)</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span> <span class="nx">parameters</span> <span class="p">);</span>
        <span class="k">else</span> 
          <span class="nx">answer</span> <span class="o">=</span> <span class="s1">&#39;bad path&#39;</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
        
      <span class="k">case</span> <span class="s1">&#39;select&#39;</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span> <span class="s1">&#39;object&#39;</span>  <span class="o">===</span> <span class="k">typeof</span> <span class="nx">parameters</span>   <span class="o">&amp;&amp;</span>
            <span class="nx">pathRegEx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">path</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="s1">&#39;boolean&#39;</span> <span class="o">===</span> <span class="k">typeof</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">state</span>
        <span class="p">)</span>
          <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">state</span> <span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
        
      <span class="k">case</span> <span class="s1">&#39;write&#39;</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span> <span class="s1">&#39;object&#39;</span>  <span class="o">===</span> <span class="k">typeof</span> <span class="nx">parameters</span>   <span class="o">&amp;&amp;</span>
            <span class="nx">pathRegEx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">path</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="s1">&#39;object&#39;</span>  <span class="o">===</span> <span class="k">typeof</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">attributes</span> 
        <span class="p">)</span>
          <span class="nx">answer</span> <span class="o">=</span> <span class="nx">thisTemplateEngine</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">attributes</span> <span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nx">event</span><span class="p">.</span><span class="nx">source</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span> <span class="nx">answer</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">origin</span> <span class="p">);</span>
  <span class="p">};</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleMessage</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
  <span class="c1">////////// Reflection API for possible Editor communication: End //////////</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">PagePartsHandler</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">thisPagePartsHandler</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">navbars</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// store informations about the nav bars</span>
      <span class="nx">top</span> <span class="o">:</span> <span class="p">{</span>
        <span class="nx">dynamic</span> <span class="o">:</span> <span class="kc">false</span>
      <span class="p">},</span>
      <span class="nx">left</span> <span class="o">:</span> <span class="p">{</span>
        <span class="nx">dynamic</span> <span class="o">:</span> <span class="kc">false</span>
      <span class="p">},</span>
      <span class="nx">right</span> <span class="o">:</span> <span class="p">{</span>
        <span class="nx">dynamic</span> <span class="o">:</span> <span class="kc">false</span>
      <span class="p">},</span>
      <span class="nx">bottom</span> <span class="o">:</span> <span class="p">{</span>
        <span class="nx">dynamic</span> <span class="o">:</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">updateTopNavigation</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">self</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">self</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#main .page&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">getIndex</span><span class="p">()).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;id_&#39;</span><span class="p">;</span> <span class="c1">// path[0];</span>
    <span class="kd">var</span> <span class="nx">nav</span> <span class="o">=</span> <span class="s1">&#39;&lt;a href=&quot;javascript:templateEngine.scrollToPage(\&#39;&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;\&#39;)&quot;&gt;&#39;</span>
            <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39; h1&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&lt;/a&gt;&#39;</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">path</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// element 0 is id_ (JNK)</span>
      <span class="nx">id</span> <span class="o">+=</span> <span class="nx">path</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;_&#39;</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;page&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// FIXME is this still needed?!?</span>
        <span class="nx">nav</span> <span class="o">+=</span> <span class="s1">&#39;&lt;span&gt; &amp;#x25ba; &lt;/span&gt;&#39;</span>
            <span class="o">+</span> <span class="s1">&#39;&lt;a href=&quot;javascript:templateEngine.scrollToPage(\&#39;&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;\&#39;)&quot;&gt;&#39;</span>
            <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39; h1&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&lt;/a&gt;&#39;</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav_path&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">nav</span><span class="p">);</span>
    <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">handleResize</span><span class="p">();</span>
  <span class="p">};</span>

  <span class="cm">/**</span>
<span class="cm">   * Change the size of the selected navbar</span>
<span class="cm">   * </span>
<span class="cm">   * currently only &quot;left&quot; and &quot;right&quot; are implemented</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">navbarSetSize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">position</span><span class="p">,</span> <span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">cssSize</span> <span class="o">=</span> <span class="nx">size</span> <span class="o">+</span> <span class="p">(</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">size</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;px&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">&#39;left&#39;</span><span class="o">:</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarLeft&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
        <span class="nx">width</span> <span class="o">:</span> <span class="nx">cssSize</span>
      <span class="p">});</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="s1">&#39;right&#39;</span><span class="o">:</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#centerContainer&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;padding-right&#39;</span><span class="p">,</span> <span class="nx">cssSize</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbarRight&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
        <span class="nx">width</span> <span class="o">:</span> <span class="nx">cssSize</span><span class="p">,</span>
        <span class="s1">&#39;margin-right&#39;</span> <span class="o">:</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">cssSize</span>
      <span class="p">});</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>
  
  <span class="k">this</span><span class="p">.</span><span class="nx">getNavbarsVisibility</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">templateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">page</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">page</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">page</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">()</span><span class="o">==</span><span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="p">{</span> <span class="nx">top</span> <span class="o">:</span> <span class="s1">&#39;true&#39;</span><span class="p">,</span> <span class="nx">bottom</span> <span class="o">:</span> <span class="s1">&#39;true&#39;</span><span class="p">,</span> <span class="nx">left</span> <span class="o">:</span> <span class="s1">&#39;true&#39;</span><span class="p">,</span> <span class="nx">right</span> <span class="o">:</span> <span class="s1">&#39;true&#39;</span> <span class="p">};</span>
      <span class="kd">var</span> <span class="nx">shownavbar</span> <span class="o">=</span> <span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">shownavbar</span> <span class="o">!=</span> <span class="kc">undefined</span> <span class="o">?</span> <span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">shownavbar</span> <span class="o">:</span> <span class="p">{</span>
        <span class="nx">top</span> <span class="o">:</span> <span class="s1">&#39;inherit&#39;</span><span class="p">,</span>
        <span class="nx">bottom</span> <span class="o">:</span> <span class="s1">&#39;inherit&#39;</span><span class="p">,</span>
        <span class="nx">left</span> <span class="o">:</span> <span class="s1">&#39;inherit&#39;</span><span class="p">,</span>
        <span class="nx">right</span> <span class="o">:</span> <span class="s1">&#39;inherit&#39;</span>
      <span class="p">});</span>
      <span class="c1">// set inherit for undefined </span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">pos</span> <span class="k">in</span> <span class="nx">shownavbar</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;inherit&#39;</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// traverse up the page tree for shownavbar</span>
        <span class="kd">var</span> <span class="nx">parentPage</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">getParentPage</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">parentPage</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// do we need to go further? Check for inheritance</span>
          <span class="kd">var</span> <span class="nx">inherit</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">pos</span> <span class="k">in</span> <span class="nx">shownavbar</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;inherit&#39;</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">inherit</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
              <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
          <span class="p">}</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">inherit</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">parentPage</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">shownavbar</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">pos</span> <span class="k">in</span> <span class="nx">shownavbar</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;inherit&#39;</span><span class="p">)</span> <span class="p">{</span>
                  <span class="c1">// set value of parent page</span>
                  <span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parentPage</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">];</span>
                  <span class="k">if</span> <span class="p">(</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;inherit&#39;</span><span class="p">;</span>
                  <span class="p">}</span>
                <span class="p">}</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// we are done</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nx">parentPage</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">getParentPage</span><span class="p">(</span><span class="nx">parentPage</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="c1">// set default values for shownavbar if not set otherwise</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">pos</span> <span class="k">in</span> <span class="nx">shownavbar</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;inherit&#39;</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">shownavbar</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;true&#39;</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span> <span class="o">=</span> <span class="nx">shownavbar</span><span class="p">;</span>
<span class="c1">//      console.log(shownavbar);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">currentPageNavbarVisibility</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="cm">/**</span>
<span class="cm">   * update the visibility ob top-navigation, footer and navbar for this page</span>
<span class="cm">   * </span>
<span class="cm">   * @param page</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">updatePageParts</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// default values</span>
    <span class="kd">var</span> <span class="nx">showtopnavigation</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">showfooter</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">shownavbar</span> <span class="o">=</span> <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">getNavbarsVisibility</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showtopnavigation</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">showtopnavigation</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showtopnavigation</span> <span class="o">!=</span> <span class="s2">&quot;false&quot;</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// traverse up the page tree</span>
        <span class="kd">var</span> <span class="nx">parentPage</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">getParentPage</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">parentPage</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">parentPage</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showtopnavigation</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">showtopnavigation</span> <span class="o">=</span> <span class="nx">parentPage</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showtopnavigation</span> <span class="o">!=</span> <span class="s2">&quot;false&quot;</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nx">parentPage</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">getParentPage</span><span class="p">(</span><span class="nx">parentPage</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showfooter</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">showfooter</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showfooter</span> <span class="o">!=</span> <span class="s2">&quot;false&quot;</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// traverse up the page tree</span>
        <span class="kd">var</span> <span class="nx">parentPage</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">getParentPage</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">parentPage</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">parentPage</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showfooter</span> <span class="o">!=</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">showfooter</span> <span class="o">=</span> <span class="nx">parentPage</span><span class="p">.</span><span class="nx">data</span><span class="p">().</span><span class="nx">showfooter</span> <span class="o">!=</span> <span class="s2">&quot;false&quot;</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nx">parentPage</span> <span class="o">=</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">getParentPage</span><span class="p">(</span><span class="nx">parentPage</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">showtopnavigation</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top, #top &gt; *&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
        <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#top&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">);</span>
        <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">showfooter</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
        <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bottom&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">);</span>
        <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span> <span class="s1">&#39;Left&#39;</span><span class="p">,</span> <span class="s1">&#39;Top&#39;</span><span class="p">,</span> <span class="s1">&#39;Right&#39;</span><span class="p">,</span> <span class="s1">&#39;Bottom&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">shownavbar</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbar&#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">fadeNavbar</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">);</span>
          <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
        <span class="p">}</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbar&#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">fadeNavbar</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="s2">&quot;out&quot;</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">};</span>

  <span class="cm">/**</span>
<span class="cm">   * fades in/out a navbar</span>
<span class="cm">   * </span>
<span class="cm">   * @param position</span>
<span class="cm">   *                [Top|Left|Right|Bottom]</span>
<span class="cm">   * @param direction</span>
<span class="cm">   *                [in|out]</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">fadeNavbar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">position</span><span class="p">,</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">initCss</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">targetCss</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">navbar</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#navbar&#39;</span> <span class="o">+</span> <span class="nx">position</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      
    <span class="p">};</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s2">&quot;in&quot;</span><span class="o">:</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">navbar</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;none&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">initCss</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;block&#39;</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">targetCss</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">switch</span> <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="s2">&quot;Top&quot;</span><span class="o">:</span>
      <span class="k">case</span> <span class="s2">&quot;Bottom&quot;</span><span class="o">:</span>
        <span class="nx">initCss</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="nx">navbar</span><span class="p">.</span><span class="nx">height</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="s2">&quot;Left&quot;</span><span class="o">:</span>
      <span class="k">case</span> <span class="s2">&quot;Right&quot;</span><span class="o">:</span>
        <span class="nx">initCss</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="nx">navbar</span><span class="p">.</span><span class="nx">width</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s2">&quot;out&quot;</span><span class="o">:</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">navbar</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="nx">navbar</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">);</span>
        <span class="p">};</span>
      <span class="p">}</span>
      <span class="k">switch</span> <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="s2">&quot;Top&quot;</span><span class="o">:</span>
      <span class="k">case</span> <span class="s2">&quot;Bottom&quot;</span><span class="o">:</span>
        <span class="nx">targetCss</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="nx">navbar</span><span class="p">.</span><span class="nx">height</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="s2">&quot;Left&quot;</span><span class="o">:</span>
      <span class="k">case</span> <span class="s2">&quot;Right&quot;</span><span class="o">:</span>
        <span class="nx">targetCss</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="nx">navbar</span><span class="p">.</span><span class="nx">width</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">navbar</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">initCss</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">templateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">getConf</span><span class="p">().</span><span class="nx">speed</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">navbar</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">targetCss</span><span class="p">);</span>
      <span class="nx">fn</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">navbar</span><span class="p">.</span><span class="nx">animate</span><span class="p">(</span><span class="nx">targetCss</span><span class="p">,</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">getConf</span><span class="p">().</span><span class="nx">speed</span><span class="p">,</span> <span class="nx">templateEngine</span><span class="p">.</span><span class="nx">main_scroll</span><span class="p">.</span><span class="nx">getConf</span><span class="p">().</span><span class="nx">easing</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="cm">/**</span>
<span class="cm">   * traverse down the page tree from root page id_ -&gt; .. -&gt; page_id activate</span>
<span class="cm">   * all navbars in that path deactivate all others</span>
<span class="cm">   * </span>
<span class="cm">   * @param page_id</span>
<span class="cm">   */</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">initializeNavbars</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page_id</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">thisPagePartsHandler</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span><span class="p">(</span><span class="nx">page_id</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">tree</span> <span class="o">=</span> <span class="p">[</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#id_&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">page_id</span> <span class="o">!=</span> <span class="s2">&quot;id_&quot;</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">parts</span> <span class="o">=</span> <span class="nx">page_id</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">);</span>
      <span class="nx">parts</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
      <span class="nx">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#id&#39;</span> <span class="o">+</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;_.page&quot;</span><span class="p">,</span>
            <span class="s1">&#39;#pages&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">tree</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">level</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">tree</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">topNav</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;top_navbar&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">rightNav</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;right_navbar&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">bottomNav</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;bottom_navbar&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">leftNav</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;left_navbar&#39;</span><span class="p">);</span>
      <span class="c1">// console.log(tree.length+&quot;-&quot;+level+&quot;&lt;=&quot;+topNav.data(&#39;scope&#39;));</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">topNav</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">topNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">topNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
            <span class="o">||</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">level</span> <span class="o">&lt;=</span> <span class="nx">topNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">))</span> <span class="p">{</span>
          <span class="nx">topNav</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">topNav</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">rightNav</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">rightNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">undefined</span>
            <span class="o">||</span> <span class="nx">rightNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
            <span class="o">||</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">level</span> <span class="o">&lt;=</span> <span class="nx">rightNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">))</span> <span class="p">{</span>
          <span class="nx">rightNav</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">rightNav</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">bottomNav</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">bottomNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">undefined</span>
            <span class="o">||</span> <span class="nx">bottomNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
            <span class="o">||</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">level</span> <span class="o">&lt;=</span> <span class="nx">bottomNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">))</span> <span class="p">{</span>
          <span class="nx">bottomNav</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">bottomNav</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">leftNav</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">leftNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">leftNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
            <span class="o">||</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">level</span> <span class="o">&lt;=</span> <span class="nx">leftNav</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">))</span> <span class="p">{</span>
          <span class="nx">leftNav</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">leftNav</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="nx">level</span><span class="o">++</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">removeInactiveNavbars</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page_id</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// remove all navbars that do not belong to this page</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.navbar.navbarActive&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">navBarPath</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">);</span>
      <span class="c1">// skip last 2 elements e.g. &#39;_top_navbar&#39;</span>
      <span class="nx">navBarPath</span> <span class="o">=</span> <span class="nx">navBarPath</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">navBarPath</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">expr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^&quot;</span> <span class="o">+</span> <span class="nx">navBarPath</span> <span class="o">+</span> <span class="s2">&quot;.*&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">navBarPath</span> <span class="o">!=</span> <span class="nx">page_id</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">expr</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">page_id</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;navbarActive&#39;</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">};</span>
<span class="p">}</span>
</pre></div>
