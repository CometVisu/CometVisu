{"majorversion": 0, "classmap": {"CometVisu": {"name": "CometVisu", "constructors": [{"params": [{"type": "String", "name": "urlPrefix", "description": " The address of the service"}], "description": "Class that handles the communicaton of the client"}], "namespace": "", "module": "CometVisu Client", "methods": {"appendCanvas": {"description": "Append to the jQuery element a canvas element and return it.", "guessedname": "appendCanvas", "guessedtype": "function"}, "write": {"description": "This function sends a value", "guessedname": "write", "guessedtype": "function"}, "readResendHeaderValues": {"description": "read the header values of a response and stores them to the resendHeaders array", "guessedname": "readResendHeaderValues", "guessedtype": "function"}, "handleSession": {"description": "This function gets called once the communication is established and session information is available", "guessedname": "handleSession", "guessedtype": "function"}, "getOrderedScripts": {"description": "heavily inspired by: http://stackoverflow.com/questions/13066712/how-to-load-a-list-of-javascript-files-and-call-a-callback-after-all-of-them-are", "guessedname": "getOrderedScripts", "guessedtype": "function"}, "doRecolorNonTransparent": {"description": "Do the recoloring based on @param thisIcon and store it in the \nhash @param thisIconColors.", "guessedname": "doRecolorNonTransparent", "guessedtype": "function"}, "handleError": {"description": "This function gets called on an error\nFIXME: this should be a prototype, so that the application developer can override it", "guessedname": "handleError", "guessedtype": "function"}, "stop": {"description": "This function stops an ongoing connection", "guessedname": "stop", "guessedtype": "function"}, "handleRead": {"description": "This function gets called once the communication is established and session information is available", "guessedname": "handleRead", "guessedtype": "function"}, "subscribe": {"description": "Subscribe to the addresses in the parameter\nThe second parameter (filter) is optional", "guessedname": "subscribe", "guessedtype": "function"}, "includeScripts": {"description": "Include files on this place. This will be replaced by the content of the\nscript during packaging", "guessedname": "includeScripts", "guessedtype": "function"}, "beforeSend": {"description": "manipulates the header of the current ajax query before it is been send to the server", "guessedname": "beforeSend", "guessedtype": "function"}, "buildRequest": {"description": "Build the URL part that contains the addresses and filters", "guessedname": "buildRequest", "guessedtype": "function"}, "watchdog": {"description": "The watchdog to recreate a read request when it stopped somehow", "guessedname": "watchdog", "guessedtype": "function"}, "login": {"description": "This function starts the communication by a login and then runs the\nongoing communication task", "guessedname": "login", "guessedtype": "function"}, "recolorNonTransparent": {"description": "Funtion to call for each icon that should be dynamically recolored.\nThis will be called for each known URL, so only remember the string but\ndon't load the image yet as it might not be needed.", "guessedname": "recolorNonTransparent", "guessedtype": "function"}, "restart": {"description": "Restart the read request, e.g. when the watchdog kicks in", "guessedname": "restart", "guessedtype": "function"}, "fillCanvas": {"description": "Fill the canvas element @param c with the ImageData. Also resize the \ncanvas at the same time.", "guessedname": "fillCanvas", "guessedtype": "function"}}, "file": "cometvisu-client.js", "shortname": "CometVisu", "properties": {"ts": {"description": "ts is a quirk to fix wrong caching on some Android-tablets/Webkit;\ncould maybe selective based on UserAgent but isn't that costly on writes", "guessedname": "ts", "guessedtype": "property"}, "innerRecolorLoop": {"description": "Two versions of a recoloring funtion to work around an Android bug:\nhttp://stackoverflow.com/questions/14969496/html5-canvas-pixel-manipulation-problems-on-mobile-devices-when-setting-the-alph\nhttps://code.google.com/p/android/issues/detail?id=17565", "guessedname": "innerRecolorLoop", "guessedtype": "property"}, "sprintfWrapper": {"description": "Javascript sprintf\nhttp://www.webtoolkit.info/", "guessedname": "sprintfWrapper", "guessedtype": "property"}}, "description": "Class that handles the communicaton of the client"}, "icon": {"name": "icon", "constructors": [{"description": "The object \"icon\" contains the whole API necessary to handle the icons."}], "namespace": "", "module": "CometVisu Client", "methods": {"getAvailableWidth": {"description": "return the available width for a the currently visible page\nthe available width is calculated by subtracting the following elements widths (if they are visible) from the body width\n- Left-Navbar\n- Right-Navbar", "guessedname": "getAvailableWidth", "guessedtype": "function"}, "getNextMappedValue": {"return": {"type": "", "description": "the next value in the list (including wrap around)."}, "description": "Look up the entry for @param value in the mapping @param this_map and", "guessedname": "getNextMappedValue", "guessedtype": "function"}, "navbarSetSize": {"description": "Change the size of the selected navbar\ncurrently only \"left\" and \"right\" are implemented", "guessedname": "navbarSetSize", "guessedtype": "function"}, "focus": {"description": "Focus a widget.", "guessedname": "focus", "guessedtype": "function"}, "select": {"description": "Set the selection state of a widget.", "guessedname": "select", "guessedtype": "function"}, "lookupWidget": {"description": "Return a widget (to be precise: the widget_container) for the given path", "guessedname": "lookupWidget", "guessedtype": "function"}, "create": {"description": "Create a new widget.", "guessedname": "create", "guessedtype": "function"}, "getAvailableHeight": {"description": "return the available height for a the currently visible page\nthe available height is calculated by subtracting the following elements heights (if they are visible) from the window height\n- Top-Navigation\n- Top-Navbar\n- Bottom-Navbar\n- Statusbar\nNotice: the former way to use the subtract the $main.position().top value from the total height leads to errors in certain cases\nbecause the value of $main.position().top is not reliable all the time", "guessedname": "getAvailableHeight", "guessedtype": "function"}, "write": {"description": "Set all attributes of a widget.", "guessedname": "write", "guessedtype": "function"}, "applyColumnWidths": {"description": "applies the correct width to the widgets corresponding to the given colspan setting", "guessedname": "applyColumnWidths", "guessedtype": "function"}, "get": {"return": {"type": "URI", "description": "The URI for the icon - or \"undefined\" if not known"}, "params": [{"type": "String", "name": "name", "description": " Name"}, {"type": "String", "name": "type", "description": " Type (optional)"}, {"type": "String", "name": "flavour", "description": " Flavour (optional)"}, {"type": "String", "name": "color", "description": " Color (optional, only relevant for monochrome icons)"}], "description": "Get the icon information for a name.", "guessedname": "get", "guessedtype": "function"}, "read": {"description": "Return all attributes of a widget.", "guessedname": "read", "guessedtype": "function"}, "pluginLoaded": {"description": "This has to be called by a plugin once it was loaded.", "guessedname": "pluginLoaded", "guessedtype": "function"}, "insert": {"description": "Insert or overwrite one or many icons into the database. The parameter\nmight be a full hash of icon definitions or a single one consisting out of\na name and a URI path. Optional further parameters are a \"type\" and a\nflavour.", "guessedname": "insert", "guessedtype": "function"}, "initializeNavbars": {"params": [{"type": "", "name": "page_id", "description": ""}], "description": "traverse down the page tree from root page id_ -> .. -> page_id activate\nall navbars in that path deactivate all others", "guessedname": "initializeNavbars", "guessedtype": "function"}, "list": {"return": {"type": "Array", "description": "List of all known icon names"}, "description": "List all known icons", "guessedname": "list", "guessedtype": "function"}, "getPluginDependency": {"description": "Load a script and run it before page setup.\nThis is needed for plugin that depend on an external library.", "guessedname": "getPluginDependency", "guessedtype": "function"}, "updatePageParts": {"params": [{"type": "", "name": "page", "description": ""}], "description": "update the visibility ob top-navigation, footer and navbar for this page", "guessedname": "updatePageParts", "guessedtype": "function"}, "fadeNavbar": {"params": [{"type": "", "name": "position", "description": "\n[Top|Left|Right|Bottom]"}, {"type": "", "name": "direction", "description": "\n[in|out]"}, {"type": "", "name": "speed", "description": "\ntime in milliseconds"}], "description": "fades in/out a navbar", "guessedname": "fadeNavbar", "guessedtype": "function"}, "deleteCommand": {"description": "Delete an existing path, i.e. widget, group or even page - including \nchild elements.", "guessedname": "deleteCommand", "guessedtype": "function"}, "debug": {"return": {"type": "Object", "description": "The icon database"}, "description": "Return icon database for debuging purposes - use ONLY for debugging as it's\ncircumventing the data hiding and exposes a writeable reference to the\ndatabase object!", "guessedname": "debug", "guessedtype": "function"}, "handleMessage": {"description": "Reflection API: communication\nHandle messages that might be sent by the editor", "guessedname": "handleMessage", "guessedtype": "function"}, "refreshAction": {"guessedname": "refreshAction", "guessedtype": "function"}}, "file": "iconhandler.js", "shortname": "icon", "properties": {"pathRegEx": {"description": "Function to test if the path is in a valid form.\nNote: it doesn't check if it exists!", "guessedname": "pathRegEx", "guessedtype": "property"}, "db": {"private": "", "description": "Internal database of the known icons.\nInitially filled with the default icons.", "guessedname": "db", "guessedtype": "property"}}, "description": "The object \"icon\" contains the whole API necessary to handle the icons."}}, "version": "0.8.0-RC2", "modules": {"CometVisu Client": {"description": "The JavaScript library that implements the CometVisu protocol.", "reqires": "jQuery", "submodules": [], "classlist": ["CometVisu", "icon"], "title": "CometVisu Client", "filelist": ["cometvisu-client.js", "compatibility.js", "iconhandler.js", "templateengine.js"], "subdata": {}, "name": "CometVisu Client"}}, "filemap": {"design_setup.js": {"classlist": [], "name": "design_setup.js"}, "templateengine.js": {"classlist": [], "name": "templateengine.js", "module": "CometVisu Client"}, "cometvisu-client.js": {"classlist": ["CometVisu"], "name": "cometvisu-client.js", "module": "CometVisu Client"}, "compatibility.js": {"classlist": [], "name": "compatibility.js", "module": "CometVisu Client"}, "iconhandler.js": {"classlist": ["icon"], "name": "iconhandler.js", "module": "CometVisu Client"}}}