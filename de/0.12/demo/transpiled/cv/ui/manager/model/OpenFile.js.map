{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/ui/manager/model/OpenFile.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "file",
    "handlerId",
    "setFile",
    "setHandlerId",
    "properties",
    "check",
    "nullable",
    "event",
    "apply",
    "handlerOptions",
    "permanent",
    "init",
    "icon",
    "closeable",
    "members",
    "__ibid",
    "_applyFile",
    "value",
    "old",
    "removeListener",
    "_maintainPermanent",
    "removeRelatedBindings",
    "addListener",
    "_maintainIcon",
    "getFile",
    "getHandlerId",
    "handlerClass",
    "getByName",
    "ICON",
    "setIcon",
    "removeBinding",
    "bind",
    "resetIcon",
    "isModified",
    "isPermanent",
    "setPermanent",
    "cv",
    "ui",
    "manager",
    "model",
    "OpenFile"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * Data model for currently opened files, a combination of cv.ui.manager.model.FileItem and a certain FileHandler.\n */\nqx.Class.define('cv.ui.manager.model.OpenFile', {\n  extend: qx.core.Object,\n\n\n    /*\n    ***********************************************\n      CONSTRUCTOR\n    ***********************************************\n    */\n    construct: function (file, handlerId) {\n      this.base(arguments);\n      if (file) {\n        this.setFile(file);\n      }\n      if (handlerId) {\n        this.setHandlerId(handlerId);\n      }\n    },\n  /*\n  ***********************************************\n    PROPERTIES\n  ***********************************************\n  */\n  properties: {\n    file: {\n      check: 'cv.ui.manager.model.FileItem || cv.ui.manager.model.CompareFiles',\n      nullable: true,\n      event: 'changeFile',\n      apply: '_applyFile'\n    },\n\n    handlerId: {\n      check: '!!qx.Class.getByName(value)',\n      nullable: true,\n      apply: '_maintainIcon'\n    },\n\n    handlerOptions: {\n      check: 'Map',\n      nullable: true\n    },\n\n    /**\n     * The opening state: permanent false behaves like a quick preview, where\n     * the current file content is replaces by the next selected file on single click.\n     * In permanent mode a new tab will be created, which content will not be replaced.\n     */\n    permanent: {\n      check: 'Boolean',\n      init: false,\n      event: 'changePermanent'\n    },\n\n    /**\n     * Icon to show in e.g. the File-Tab\n     */\n    icon: {\n      check: 'String',\n      init: '',\n      event: 'changeIcon'\n    },\n\n    closeable: {\n      check: 'Boolean',\n      init: true,\n      event: 'changeCloseable'\n    }\n  },\n\n  /*\n  ***********************************************\n    MEMBERS\n  ***********************************************\n  */\n  members: {\n    __ibid: null,\n\n    _applyFile: function (value, old) {\n      if (old) {\n        old.removeListener('changeModified', this._maintainPermanent, this);\n        old.removeRelatedBindings(this);\n        this.__ibid = null;\n      }\n      if (value) {\n        value.addListener('changeModified', this._maintainPermanent, this);\n      }\n      this._maintainIcon();\n    },\n\n    _maintainIcon: function () {\n      // use the handlers icon is there is one, otherwise the file items icon\n      var file = this.getFile();\n      if (this.getHandlerId() && file) {\n        var handlerClass = qx.Class.getByName(this.getHandlerId());\n        if (handlerClass && handlerClass.ICON) {\n          this.setIcon(handlerClass.ICON);\n          if (this.__ibid) {\n            file.removeBinding(this.__ibid);\n            this.__ibid = null;\n          }\n        } else {\n          this.__ibid = file.bind('icon', this, 'icon');\n        }\n      } else {\n        this.resetIcon();\n      }\n    },\n\n    _maintainPermanent: function () {\n      if (this.getFile().isModified() && !this.isPermanent()) {\n        // change to permanent once we have a modification\n        this.setPermanent(true);\n      }\n    }\n  }\n});\n"
  ]
}