{
  "className": "cv.io.transport.LongPolling",
  "packageName": "cv.io.transport",
  "name": "LongPolling",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 21,
        "column": 0
      },
      "end": {
        "line": 323,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>LongPolling.js\n copyright (c) 2010-2016, Christian Mayer and the CometVisu contributers.\n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the Free\n Software Foundation; either version 3 of the License, or (at your option)\n any later version.\n This program is distributed in the hope that it will be useful, but WITHOUT\n ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n more details.\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 33,
        "column": 13
      },
      "end": {
        "line": 37,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>***********************************************\nCONSTRUCTOR\n***********************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "client {cv.io.Client}"
        }
      ]
    }
  },
  "members": {
    "watchdog": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 46,
          "column": 18
        }
      },
      "type": "variable",
      "access": "public"
    },
    "doRestart": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 47,
          "column": 20
        }
      },
      "type": "variable",
      "access": "public"
    },
    "xhr": {
      "location": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 13
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>are we currently in a restart, e.g. due to the watchdog</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "lastIndex": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>the ongoing AJAX request</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "retryCounter": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>index returned by the last request</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "retryServerErrorCounter": {
      "location": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 30
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>count number of retries (reset with each valid response)</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "sessionId": {
      "location": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>count number of successive temporary server errors</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "client": {
      "location": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 16
        }
      },
      "type": "variable",
      "access": "public"
    },
    "running": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 54,
          "column": 17
        }
      },
      "type": "variable",
      "access": "public"
    },
    "handleSession": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 79,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function gets called once the communication is established\n and this.client information is available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {Array} arguments from the XHR response callback",
            "paramName": "args",
            "description": " arguments from the XHR response callback",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "connect {Boolean} whether to start the connection or not",
            "paramName": "connect",
            "description": " whether to start the connection or not",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "connect": {
      "location": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "__startReading": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "type": "function",
      "access": "private"
    },
    "handleRead": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function gets called once the communication is established\n and this.client information is available</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "handleReadStart": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 203,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "handleError": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 253,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function gets called on an error</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {Event}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "beforeSend": {
      "location": {
        "start": {
          "line": 262,
          "column": 4
        },
        "end": {
          "line": 273,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>manipulates the header of the current ajax query before it is\n been send to the server</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "xhr {Object} the native XHR object",
            "paramName": "xhr",
            "description": " the native XHR object",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "readResendHeaderValues": {
      "location": {
        "start": {
          "line": 279,
          "column": 4
        },
        "end": {
          "line": 284,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>read the header values of a response and stores them to the\n resendHeaders array</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isConnectionRunning": {
      "location": {
        "start": {
          "line": 289,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the connection is still running.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "restart": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 306,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restart the read request, e.g. when the watchdog kicks in</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "doFullReload {Boolean} reload all data and not only restart connection",
            "paramName": "doFullReload",
            "description": " reload all data and not only restart connection",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "abort": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 321,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abort the read request properly</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": []
}