{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/source/class/cv/Transform.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "registry",
    "name",
    "encode",
    "i",
    "decode",
    "toString",
    "parseInt",
    "parseFloat",
    "addTransform",
    "prefix",
    "transforms",
    "trans",
    "link",
    "Object",
    "assign",
    "clip",
    "min",
    "value",
    "max",
    "transformation",
    "cv",
    "Config",
    "testMode",
    "basetrans",
    "split",
    "Transform"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* Transform.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This class defines some default transformations like <code>raw</code>, <code>int</code> and <code>float</code>.\n * New transformation can be added and used. For example an openHAB transformation for a switch item is added by\n * {@link cv.transforms.OpenHab} like this:\n *\n * <pre class=\"javascript\">\n *   cv.Transform.addTransform('OH', {\n *    'switch': {\n *      name: 'OH_Switch',\n *       encode: function (phy) {\n *         return phy == 1 ? 'ON' : 'OFF';\n *      },\n *\n *       decode: function (string) {\n *         if (cv.transforms.OpenHab.isUndefined(string)) return 0;\n *         return (string == \"ON\" || parseInt(string) > 0) ? 1 : 0;\n *       }\n *     }\n *   });\n * </pre>\n *\n * @author Christian Mayer\n * @since 2010\n */\nqx.Class.define('cv.Transform', {\n  type: \"static\",\n\n  /*\n   ******************************************************\n   STATICS\n   ******************************************************\n   */\n  statics: {\n    registry: {\n      'raw': {\n        name: 'Only the RAW value',\n        encode: function (i) {\n          return i;\n        },\n        decode: function (i) {\n          return i;\n        }\n      },\n      'int': {\n        name: 'Cast to Int',\n        encode: function (i) {\n          return i.toString();\n        },\n        decode: function (i) {\n          return parseInt(i);\n        }\n      },\n      'float': {\n        name: 'Cast to Float',\n        encode: function (i) {\n          return i.toString();\n        },\n        decode: function (i) {\n          return parseFloat(i);\n        }\n      }\n    },\n\n    /* ***************************************************************************\n     * All functions below are only in this, i.e. the default, file.\n     * All further transforms will only have the above data structure.\n     ************************************************************************** */\n\n    /**\n     * Add transformation rules to the registry\n     * @param prefix {String} Tranformation prefix (e.g. DPT for KNX tranformations or OH for openHAB transformations)\n     * @param transforms {Map} map of transformations\n     */\n    addTransform: function (prefix, transforms) {\n      for (var trans in transforms) {\n        if (transforms[trans].link) {\n          this.registry[prefix + ':' + trans] = Object.assign({}, transforms[transforms[trans].link], transforms[trans]);\n        } else {\n          this.registry[prefix + ':' + trans] = transforms[trans];\n        }\n      }\n    },\n\n    /**\n     * Enforce that value stays within range\n     * When value is not a valid number, the min value is returned\n     * @param min {Number} lower threshold\n     * @param value {var} value to clip\n     * @param max {Number} upper threshold\n     * @return {Number} the clipped value\n     */\n    clip: function (min, value, max) {\n      value = +value; // enforce number\n      return value > min ? (value > max ? max : value) : min;\n    },\n\n    /**\n     * transform JavaScript to bus value\n     *\n     * @param transformation {String} type of the transformation\n     * @param value {var} value to transform\n     * @return {var} the encoded value\n     */\n    encode: function (transformation, value) {\n      if (cv.Config.testMode === true) {\n        return value;\n      }\n      var basetrans = transformation.split('.')[0];\n      return transformation in cv.Transform.registry ? cv.Transform.registry[transformation]\n        .encode(value) : (basetrans in cv.Transform.registry ? cv.Transform.registry[basetrans]\n        .encode(value) : value);\n    },\n\n    /**\n     * transform bus to JavaScript value\n     * @param transformation {String} type of the transformation\n     * @param value {var} value to transform\n     * @return {var} the decoded value\n     */\n    decode: function (transformation, value) {\n      if (cv.Config.testMode === true) {\n        return value;\n      }\n      var basetrans = transformation.split('.')[0];\n      return transformation in cv.Transform.registry ? cv.Transform.registry[transformation]\n        .decode(value) : (basetrans in cv.Transform.registry ? cv.Transform.registry[basetrans]\n        .decode(value) : value);\n    }\n  }\n});"
  ]
}