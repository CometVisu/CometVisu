{
  "className": "cv.Transform",
  "packageName": "cv",
  "name": "Transform",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 45,
        "column": 0
      },
      "end": {
        "line": 163,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class defines some default transformations like <code>raw</code>, <code>int</code> and <code>float</code>.\n New transformation can be added and used. For example an openHAB transformation for a switch item is added by\n {@link cv.transforms.OpenHab} like this:\n </p>\n<pre class=\"javascript\">\n   cv.Transform.addTransform('OH', {\n    'switch': {\n      name: 'OH_Switch',\n       encode: function (phy) {\n         return phy == 1 ? 'ON' : 'OFF';\n      },\n       decode: function (string) {\n         if (cv.transforms.OpenHab.isUndefined(string)) return 0;\n         return (string == \"ON\" || parseInt(string) > 0) ? 1 : 0;\n       }\n     }\n   });\n </pre>"
        }
      ],
      "@author": [
        {
          "name": "@author",
          "body": "Christian Mayer"
        }
      ],
      "@since": [
        {
          "name": "@since",
          "body": "2010"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": true,
  "isSingleton": false,
  "statics": {
    "registry": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "type": "variable",
      "access": "public"
    },
    "addTransform": {
      "location": {
        "start": {
          "line": 94,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add transformation rules to the registry</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prefix {String} Transformation prefix (e.g. DPT for KNX transformations or OH for openHAB transformations)",
            "paramName": "prefix",
            "description": " Transformation prefix (e.g. DPT for KNX transformations or OH for openHAB transformations)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "transforms {Object} map of transformations",
            "paramName": "transforms",
            "description": " map of transformations",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clip": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enforce that value stays within range\n When value is not a valid number, the min value is returned</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "min {Number} lower threshold",
            "paramName": "min",
            "description": " lower threshold",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "value {var} value to clip",
            "paramName": "value",
            "description": " value to clip",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "max {Number} upper threshold",
            "paramName": "max",
            "description": " upper threshold",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the clipped value",
            "type": "Number",
            "description": " the clipped value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "encodeBusAndRaw": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>transform JavaScript to bus value and raw value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transformation {String} type of the transformation",
            "paramName": "transformation",
            "description": " type of the transformation",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} value to transform",
            "paramName": "value",
            "description": " value to transform",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} object with both encoded values",
            "type": "Object",
            "description": " object with both encoded values"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "encode": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>transform JavaScript to bus value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transformation {String} type of the transformation",
            "paramName": "transformation",
            "description": " type of the transformation",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} value to transform",
            "paramName": "value",
            "description": " value to transform",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the encoded value",
            "type": "var",
            "description": " the encoded value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "decode": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>transform bus to JavaScript value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transformation {String} type of the transformation",
            "paramName": "transformation",
            "description": " type of the transformation",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} value to transform",
            "paramName": "value",
            "description": " value to transform",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the decoded value",
            "type": "var",
            "description": " the decoded value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}