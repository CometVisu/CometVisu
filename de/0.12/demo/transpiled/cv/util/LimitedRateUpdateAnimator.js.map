{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/source/class/cv/util/LimitedRateUpdateAnimator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "displayRatioFn",
    "context",
    "window",
    "displayRatioFnParameters",
    "undefined",
    "setDisplayRatioFn",
    "__displayRatioFnContext",
    "__displayRatioFnParameters",
    "destruct",
    "__animationFrame",
    "cancelAnimationFrame",
    "properties",
    "linearRateLimit",
    "check",
    "init",
    "expDampTimeConstant",
    "epsilon",
    "members",
    "__currentRatio",
    "__targetRatio",
    "setTo",
    "targetRatio",
    "instant",
    "now",
    "performance",
    "__animate",
    "thistime",
    "lasttime",
    "dt",
    "maxLinearDelta",
    "getLinearRateLimit",
    "alpha",
    "Math",
    "exp",
    "getExpDampTimeConstant",
    "nextRatio",
    "delta",
    "abs",
    "sign",
    "getEpsilon",
    "getDisplayRatioFn",
    "call",
    "requestAnimationFrame",
    "time",
    "cv",
    "util",
    "LimitedRateUpdateAnimator"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* LimitedRateUpdateAnimator.js\n *\n * copyright (c) 2020-2020, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * LimitedRateUpdateAnimator\n *\n * @author ChristianMayer\n * @since 2020\n */\n\n/**\n * Helper function to allow widgets animate a displayed property with a\n * limited speed of change to look smoother for the user.\n */\nqx.Class.define('cv.util.LimitedRateUpdateAnimator',{\n  extend: qx.core.Object,\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n\n  /**\n   * Create a new animated display where an object will be smoothly transitioned\n   * from its current position to a new target position.\n   *\n   * @param displayRatioFn {Function} Callback function that does the displaying\n   * @param context The context `this` of the callback function\n   * @param displayRatioFnParameters Optional additional parameter that will be passed to the callback function\n   */\n  construct: function (displayRatioFn, context = window, displayRatioFnParameters = undefined) {\n    this.base(arguments);\n    this.setDisplayRatioFn(displayRatioFn);\n    this.__displayRatioFnContext = context;\n    this.__displayRatioFnParameters = displayRatioFnParameters;\n  },\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct: function() {\n    if (this.__animationFrame !== undefined) {\n      window.cancelAnimationFrame(this.__animationFrame);\n      this.__animationFrame = undefined;\n    }\n  },\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    linearRateLimit: {\n      // in ratio/second\n      check: \"Number\",\n      init: 2\n    },\n    expDampTimeConstant: {\n      // time constant for exponential dampening\n      check: \"Number\",\n      init: 0.01\n    },\n    epsilon: {\n      // a difference between current and target ratio smaller than the epsilon\n      // will be immediately closed\n      check: \"Number\",\n      init: 0.001\n    },\n    displayRatioFn: {\n      check: \"Function\"\n    }\n  },\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __animationFrame: undefined,\n    __displayRatioFnContext: undefined,\n    __displayRatioFnParameters: undefined,\n    __currentRatio: 0.0,\n    __targetRatio: 0.0,\n    /**\n     * Set the value to a new value.\n     * @param {Number} targetRatio the new value.\n     * @param {Boolean} instant skip animation when true\n     */\n    setTo: function (targetRatio, instant= false) {\n      let now = performance.now();\n\n      this.__targetRatio = targetRatio;\n      if(instant) {\n        this.__currentRatio = targetRatio;\n      }\n      if (this.__animationFrame === undefined) {\n        this.__animate(now, now - 10);\n      }\n    },\n\n    /**\n     * Internal implementation of the animation and value setting.\n     * @param {DOMHighResTimeStamp} thistime\n     * @param {DOMHighResTimeStamp} lasttime\n     * @private\n     */\n    __animate: function (thistime, lasttime) {\n      let dt = (thistime - lasttime) / 1000; // in seconds\n      let maxLinearDelta =  this.getLinearRateLimit() * dt;\n      let alpha = Math.exp(-dt / this.getExpDampTimeConstant());\n      let nextRatio =  this.__targetRatio * alpha + this.__currentRatio * (1 - alpha);\n      let delta = nextRatio - this.__currentRatio;\n      if (Math.abs(delta) > maxLinearDelta) {\n        nextRatio = this.__currentRatio + Math.sign(delta) * maxLinearDelta;\n      }\n      if (Math.abs(nextRatio - this.__targetRatio) < this.getEpsilon()) {\n        nextRatio = this.__targetRatio;\n      }\n      this.__currentRatio = nextRatio;\n\n      this.getDisplayRatioFn().call(this.__displayRatioFnContext, this.__currentRatio, this.__displayRatioFnParameters);\n\n      if (this.__currentRatio !== this.__targetRatio) {\n        this.__animationFrame = window.requestAnimationFrame((time)=>{this.__animate(time, thistime);});\n      } else {\n        this.__animationFrame = undefined;\n      }\n    }\n  }\n});\n"
  ]
}