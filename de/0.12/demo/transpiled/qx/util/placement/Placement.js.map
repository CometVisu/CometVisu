{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/util/placement/Placement.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__defaultAxis",
    "util",
    "placement",
    "DirectAxis",
    "properties",
    "axisX",
    "check",
    "axisY",
    "edge",
    "init",
    "align",
    "statics",
    "__instance",
    "compute",
    "size",
    "area",
    "target",
    "offsets",
    "position",
    "modeX",
    "modeY",
    "Placement",
    "splitted",
    "split",
    "set",
    "__getAxis",
    "__direct",
    "__keepAlign",
    "__bestFit",
    "mode",
    "KeepAlignAxis",
    "BestFitAxis",
    "Error",
    "members",
    "getAxisX",
    "left",
    "computeStart",
    "width",
    "start",
    "end",
    "right",
    "__getPositionX",
    "getAxisY",
    "top",
    "height",
    "bottom",
    "__getPositionY",
    "getEdge",
    "getAlign",
    "destruct",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Contains methods to compute a position for any object which should\n * be positioned relative to another object.\n */\nqx.Class.define(\"qx.util.placement.Placement\",\n{\n  extend : qx.core.Object,\n\n  construct : function()\n  {\n    this.base(arguments);\n    this.__defaultAxis = qx.util.placement.DirectAxis;\n  },\n\n\n  properties :\n  {\n    /**\n     * The axis object to use for the horizontal placement\n     */\n    axisX : {\n      check: \"Class\"\n    },\n\n    /**\n     * The axis object to use for the vertical placement\n     */\n    axisY : {\n      check: \"Class\"\n    },\n\n    /**\n     * Specify to which edge of the target object, the object should be attached\n     */\n    edge : {\n      check: [\"top\", \"right\", \"bottom\", \"left\"],\n      init: \"top\"\n    },\n\n    /**\n     * Specify with which edge of the target object, the object should be aligned\n     */\n    align : {\n      check: [\"top\", \"right\", \"bottom\", \"left\", \"center\", \"middle\"],\n      init: \"right\"\n    }\n  },\n\n\n  statics :\n  {\n    __instance : null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @param position {String} Alignment of the object on the target, any of\n     *   \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\",\n     *   \"left-top\", \"left-middle\", \"left-bottom\", \"right-top\", \"right-middle\", \"right-bottom\".\n     * @param modeX {String} Horizontal placement mode. Valid values are:\n     *   <ul>\n     *   <li><code>direct</code>: place the object directly at the given\n     *   location.</li>\n     *   <li><code>keep-align</code>: if parts of the object is outside of the visible\n     *   area it is moved to the best fitting 'edge' and 'alignment' of the target.\n     *   It is guaranteed the the new position attaches the object to one of the\n     *   target edges and that that is aligned with a target edge.</li>\n     *   <li>best-fit</li>: If parts of the object are outside of the visible\n     *   area it is moved into the view port ignoring any offset, and position\n     *   values.\n     *   </ul>\n     * @param modeY {String} Vertical placement mode. Accepts the same values as\n     *   the 'modeX' argument.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute: function(size, area, target, offsets, position, modeX, modeY)\n    {\n      this.__instance = this.__instance || new qx.util.placement.Placement();\n\n      var splitted = position.split(\"-\");\n      var edge = splitted[0];\n      var align = splitted[1];\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (align === \"center\" || align === \"middle\")\n        {\n          var expected = \"middle\";\n          if (edge === \"top\" || edge === \"bottom\") {\n            expected = \"center\";\n          }\n          qx.core.Assert.assertEquals(expected, align, \"Please use '\" + edge + \"-\" + expected + \"' instead!\");\n        }\n      }\n\n      this.__instance.set({\n        axisX: this.__getAxis(modeX),\n        axisY: this.__getAxis(modeY),\n        edge: edge,\n        align: align\n      });\n\n      return this.__instance.compute(size, area, target, offsets);\n    },\n\n\n    __direct : null,\n    __keepAlign : null,\n    __bestFit : null,\n\n    /**\n     * Get the axis implementation for the given mode\n     *\n     * @param mode {String} One of <code>direct</code>, <code>keep-align</code> or\n     *   <code>best-fit</code>\n     * @return {qx.util.placement.AbstractAxis}\n     */\n    __getAxis : function(mode)\n    {\n      switch(mode)\n      {\n        case \"direct\":\n          this.__direct = this.__direct || qx.util.placement.DirectAxis;\n          return this.__direct;\n\n        case \"keep-align\":\n          this.__keepAlign = this.__keepAlign || qx.util.placement.KeepAlignAxis;\n          return this.__keepAlign;\n\n        case \"best-fit\":\n          this.__bestFit = this.__bestFit || qx.util.placement.BestFitAxis;\n          return this.__bestFit;\n\n        default:\n          throw new Error(\"Invalid 'mode' argument!'\");\n      }\n    }\n  },\n\n\n  members :\n  {\n    __defaultAxis : null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute : function(size, area, target, offsets)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertObject(size, \"size\");\n        this.assertNumber(size.width, \"size.width\");\n        this.assertNumber(size.height, \"size.height\");\n\n        this.assertObject(area, \"area\");\n        this.assertNumber(area.width, \"area.width\");\n        this.assertNumber(area.height, \"area.height\");\n\n        this.assertObject(target, \"target\");\n        this.assertNumber(target.top, \"target.top\");\n        this.assertNumber(target.right, \"target.right\");\n        this.assertNumber(target.bottom, \"target.bottom\");\n        this.assertNumber(target.left, \"target.left\");\n\n        this.assertObject(offsets, \"offsets\");\n        this.assertNumber(offsets.top, \"offsets.top\");\n        this.assertNumber(offsets.right, \"offsets.right\");\n        this.assertNumber(offsets.bottom, \"offsets.bottom\");\n        this.assertNumber(offsets.left, \"offsets.left\");\n      }\n\n      var axisX = this.getAxisX() || this.__defaultAxis;\n      var left = axisX.computeStart(\n        size.width,\n        {start: target.left, end: target.right},\n        {start: offsets.left, end: offsets.right},\n        area.width,\n        this.__getPositionX()\n      );\n\n      var axisY = this.getAxisY() || this.__defaultAxis;\n      var top = axisY.computeStart(\n        size.height,\n        {start: target.top, end: target.bottom},\n        {start: offsets.top, end: offsets.bottom},\n        area.height,\n        this.__getPositionY()\n      );\n\n      return {\n        left: left,\n        top: top\n      };\n    },\n\n\n    /**\n     * Get the position value for the horizontal axis\n     *\n     * @return {String} the position\n     */\n    __getPositionX : function()\n    {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"left\") {\n        return \"edge-start\";\n      } else if (edge == \"right\") {\n        return \"edge-end\";\n      } else if (align == \"left\") {\n        return \"align-start\";\n      } else if (align == \"center\") {\n        return \"align-center\";\n      } else if (align == \"right\") {\n        return \"align-end\";\n      }\n    },\n\n\n    /**\n     * Get the position value for the vertical axis\n     *\n     * @return {String} the position\n     */\n    __getPositionY : function()\n    {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"top\") {\n        return \"edge-start\";\n      } else if (edge == \"bottom\") {\n        return \"edge-end\";\n      } else if (align == \"top\") {\n        return \"align-start\";\n      } else if (align == \"middle\") {\n        return \"align-center\";\n      } else if (align == \"bottom\") {\n        return \"align-end\";\n      }\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._disposeObjects('__defaultAxis');\n  }\n});"
  ]
}