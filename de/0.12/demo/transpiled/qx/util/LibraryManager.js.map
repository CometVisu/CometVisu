{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/LibraryManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "__libs",
    "$$libraries",
    "members",
    "has",
    "namespace",
    "get",
    "key",
    "set",
    "value",
    "util",
    "LibraryManager"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAIAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EAA0C;AAExCC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MAFuB;AAIxCC,IAAAA,IAAI,EAAG,WAJiC;AAMxCC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,QAAM,EAAGX,EAAE,CAACY,WAAH,IAAkB;AAF7B,KAPwC;AAYxCC,IAAAA,OAAO,EACP;AACE;;;;;;AAMAC,MAAAA,GAAG,EAAG,aAASC,SAAT,EACN;AACE,eAAO,CAAC,CAAC,uBAAqBJ,QAArB,CAA4BI,SAA5B,CAAT;AACD,OAVH;;AAaE;;;;;;AAMAC,MAAAA,GAAG,EAAG,aAASD,SAAT,EAAoBE,GAApB,EACN;AACE,eAAO,uBAAqBN,QAArB,CAA4BI,SAA5B,EAAuCE,GAAvC,IACL,uBAAqBN,QAArB,CAA4BI,SAA5B,EAAuCE,GAAvC,CADK,GACyC,IADhD;AAED,OAvBH;;AA0BE;;;;;;;AAOAC,MAAAA,GAAG,EAAG,aAASH,SAAT,EAAoBE,GAApB,EAAyBE,KAAzB,EACN;AACE,+BAAqBR,QAArB,CAA4BI,SAA5B,EAAuCE,GAAvC,IAA8CE,KAA9C;AACD;AApCH;AAbwC,GAA1C;AAtBAnB,EAAAA,EAAE,CAACoB,IAAH,CAAQC,cAAR,CAAuBlB,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Author:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Provides read/write access to library-specific information such as\n * source/resource URIs.\n */\nqx.Class.define(\"qx.util.LibraryManager\", {\n\n  extend : qx.core.Object,\n\n  type : \"singleton\",\n\n  statics :\n  {\n    /** @type {Map} The libraries used by this application */\n    __libs : qx.$$libraries || {}\n  },\n\n  members :\n  {\n    /**\n     * Checks whether the library with the given namespace is known to the\n     * application.\n     * @param namespace {String} The library's namespace\n     * @return {Boolean} <code>true</code> if the given library is known\n     */\n    has : function(namespace)\n    {\n      return !!this.self(arguments).__libs[namespace];\n    },\n\n\n    /**\n     * Returns the value of an attribute of the given library\n     * @param namespace {String} The library's namespace\n     * @param key {String} Name of the attribute\n     * @return {var|null} The attribute's value or <code>null</code> if it's not defined\n     */\n    get : function(namespace, key)\n    {\n      return this.self(arguments).__libs[namespace][key] ?\n        this.self(arguments).__libs[namespace][key] : null;\n    },\n\n\n    /**\n     * Sets an attribute on the given library.\n     *\n     * @param namespace {String} The library's namespace\n     * @param key {String} Name of the attribute\n     * @param value {var} Value of the attribute\n     */\n    set : function(namespace, key, value)\n    {\n      this.self(arguments).__libs[namespace][key] = value;\n    }\n  }\n});\n"
  ]
}