{
  "className": "qx.util.DynamicScriptLoader",
  "packageName": "qx.util",
  "name": "DynamicScriptLoader",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 71,
        "column": 0
      },
      "end": {
        "line": 285,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2016 Visionet GmbH, http://www.visionet.de\n     2016 OETIKER+PARTNER AG, https://www.oetiker.ch\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Dietrich Streifert (level420)\n Tobias Oetiker (oetiker)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Dynamically load non qx scripts. This class is aware of all scripts that have\n been loaded using its instances, so if two instances load jquery, it will only\n be loaded once, and the second instance will wait for the jquery to be loaded\n before continuing to load additional scripts.\n Usage example:\n </p>\n<pre>\n  ... assets ...\n /**\n* @asset(myapp/jquery/*)\n* @asset(myapp/highcharts/*)\n*\n* @ignore(jQuery.*)\n* @ignore(Highcharts.*)\n  ...\n\n    var src = '';\n    var min = '.min';\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      src = '.src';\n      min = '';\n    }\n\n    var dynLoader = new qx.util.DynamicScriptLoader([\n        \"myapp/jquery/jquery\"+min+\".js\",\n        \"myapp/highcharts/highcharts\"+src+\".js\",\n        \"myapp/highcharts/highcharts-more\"+src+\".js\",\n        \"myapp/highcharts/highcharts-modifications.js\"\n    ]);\n    dynLoader.addListenerOnce('ready',function(e){\n      console.log(\"all scripts have been loaded!\");\n    });\n    dynLoader.addListener('failed',function(e){\n      var data = e.getData();\n      console.log(\"failed to load \"+data.script);\n    });\n    dynLoader.start();\n </pre>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 80,
        "column": 13
      },
      "end": {
        "line": 86,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Create a loader for the given scripts.</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "scriptArr {Array|String} the uri name(s) of the script(s) to load",
          "paramName": "scriptArr",
          "description": " the uri name(s) of the script(s) to load",
          "type": [
            "Array",
            "String"
          ]
        }
      ]
    }
  },
  "events": {
    "loaded": {
      "location": {
        "start": {
          "line": 98,
          "column": 4
        },
        "end": {
          "line": 98,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>fired when a script is loaded successfully. The data contains 'script' and 'status' keys.</p>"
          }
        ]
      },
      "name": "loaded",
      "type": "qx.event.type.Data"
    },
    "failed": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>fired when a specific script fails loading.  The data contains 'script' and 'status' keys.</p>"
          }
        ]
      },
      "name": "failed",
      "type": "qx.event.type.Data"
    },
    "ready": {
      "location": {
        "start": {
          "line": 108,
          "column": 4
        },
        "end": {
          "line": 108,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>fired when all given scripts are loaded, each time loadScriptsDynamic is called.</p>"
          }
        ]
      },
      "name": "ready",
      "type": "qx.event.type.Event"
    }
  },
  "statics": {
    "__IN_PROGRESS": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of scripts being added at the present time. Key is script name; value is instance of this class which\n is loading it.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__LOADED": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of scripts that have fully loaded. Key is script name; value is true</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    }
  },
  "members": {
    "__QUEUE": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Array of the scripts to be loaded</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__started": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>True if start has been called.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "start": {
      "location": {
        "start": {
          "line": 148,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start loading scripts. This may only be called once!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise?} a promise which will be resolved after load of all scripts if promise support is enabled; nothing (undefined) if promises are not enabled.",
            "type": "Promise?",
            "description": " a promise which will be resolved after load of all scripts if promise support is enabled; nothing (undefined) if promises are not enabled."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__loadScripts": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 274,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Chain loading scripts.\n Recursively called until the array of scripts is consumed</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 276,
        "column": 13
      },
      "end": {
        "line": 284,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}