{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/DeferredCall.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "callback",
    "context",
    "__callback",
    "__context",
    "__manager",
    "util",
    "DeferredCallManager",
    "getInstance",
    "members",
    "cancel",
    "schedule",
    "call",
    "apply",
    "destruct",
    "DeferredCall"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,sBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;;AAKE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,QAAT,EAAmBC,OAAnB,EACZ;AACE;AAEA,WAAKC,QAAL,GAAkBF,QAAlB;AACA,WAAKG,QAAL,GAAiBF,OAAO,IAAI,IAA5B;AACA,WAAKG,QAAL,GAAiBd,EAAE,CAACe,IAAH,CAAQC,mBAAR,CAA4BC,WAA5B,EAAjB;AACD,KAtBH;;AA0BE;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EACP;AAEEN,MAAAA,QAAU,EAAG,IAFf;AAGEC,MAAAA,QAAS,EAAG,IAHd;AAIEC,MAAAA,QAAS,EAAG,IAJd;;AAME;AACJ;AACA;AACIK,MAAAA,MAAM,EAAG,kBAAW;AAClB,aAAKL,QAAL,CAAeK,MAAf,CAAsB,IAAtB;AACD,OAXH;;AAcE;AACJ;AACA;AACIC,MAAAA,QAAQ,EAAG,oBAAW;AACpB,aAAKN,QAAL,CAAeM,QAAf,CAAwB,IAAxB;AACD,OAnBH;;AAsBE;AACJ;AACA;AACIC,MAAAA,IAAI,EAAG,gBAAW;AAahB,aAAKR,QAAL,GAAiB,KAAKD,QAAL,CAAgBU,KAAhB,CAAsB,KAAKT,QAA3B,CAAjB,GAAyD,KAAKD,QAAL,EAAzD;AACD;AAvCH,KAjCF;;AA6EE;AACF;AACA;AACA;AACA;AAEEW,IAAAA,QAAQ,EAAG,oBACX;AACE,WAAKJ,MAAL;AACA,WAAKN,QAAL,GAAiB,KAAKD,QAAL,GAAkB,KAAKE,QAAL,GAAiB,IAApD;AACD;AAvFH,GADA;AA9BAd,EAAAA,EAAE,CAACe,IAAH,CAAQS,YAAR,CAAqBrB,aAArB,GAAqCA,aAArC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class represents a wrapper for functions, which should be called after\n * the current thread of JavaScript has finished and the control is returned to\n * the browser. The wrapped function will at most be called once after the control\n * has been given back to the browser, independent of the number of {@link #call}\n * calls.\n * \n * This class does not need to be disposed, although doing so will cancel any\n * pending call\n *\n * @require(qx.util.DeferredCallManager)\n */\nqx.Class.define(\"qx.util.DeferredCall\",\n{\n  extend : qx.core.Object,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param callback {Function} The callback\n   * @param context {Object?window} the context in which the function will be called.\n   */\n  construct : function(callback, context)\n  {\n    this.base(arguments);\n\n    this.__callback = callback;\n    this.__context = context || null;\n    this.__manager = qx.util.DeferredCallManager.getInstance();\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    __callback : null,\n    __context : null,\n    __manager : null,\n\n    /**\n     * Prevent the callback from being called.\n     */\n    cancel : function() {\n      this.__manager.cancel(this);\n    },\n\n\n    /**\n     * Issue a deferred call of the callback.\n     */\n    schedule : function() {\n      this.__manager.schedule(this);\n    },\n\n\n    /**\n     * Calls the callback directly.\n     */\n    call : function() {\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // warn if the context is disposed\n        var context = this.__context;\n        if (context && context.isDisposed && context.isDisposed()) {\n          this.warn(\n            \"The context object '\" + context + \"' of the defered call '\" +\n            this + \"'is already disposed.\"\n          );\n        }\n      }\n\n      this.__context ? this.__callback.apply(this.__context) : this.__callback();\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.cancel();\n    this.__context = this.__callback = this.__manager = null;\n  }\n});\n"
  ]
}