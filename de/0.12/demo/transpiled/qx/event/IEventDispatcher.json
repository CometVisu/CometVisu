{
  "className": "qx.event.IEventDispatcher",
  "packageName": "qx.event",
  "name": "IEventDispatcher",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 57,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>All event dispatchers must implement this interface. Event dispatchers must\n register themselves at the event Manager using\n {@link qx.event.Registration#addDispatcher}.</p>"
        }
      ]
    }
  },
  "type": "interface",
  "members": {
    "canDispatchEvent": {
      "location": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the dispatcher is responsible for the this event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event object",
            "paramName": "event",
            "description": " The event object",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event dispatcher is responsible for the this event",
            "type": "Boolean",
            "description": " Whether the event dispatcher is responsible for the this event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "dispatchEvent": {
      "location": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 55,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function dispatches the event to the event listeners.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} event object to dispatch",
            "paramName": "event",
            "description": " event object to dispatch",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one or more of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": " a promise, if one or more of the event handlers returned a promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}