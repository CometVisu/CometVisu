{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/event/Timer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "interval",
    "setInterval",
    "self",
    "__oninterval",
    "_oninterval",
    "call",
    "events",
    "statics",
    "once",
    "func",
    "obj",
    "timeout",
    "timer",
    "event",
    "Timer",
    "__onceFunc",
    "addListener",
    "e",
    "stop",
    "dispose",
    "start",
    "properties",
    "enabled",
    "init",
    "check",
    "apply",
    "members",
    "__intervalHandler",
    "_applyInterval",
    "value",
    "old",
    "getEnabled",
    "restart",
    "_applyEnabled",
    "window",
    "clearInterval",
    "getInterval",
    "setEnabled",
    "startWith",
    "restartWith",
    "GlobalError",
    "observeMethod",
    "$$disposed",
    "fireEvent",
    "destruct"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Global timer support.\n *\n * This class can be used to periodically fire an event. This event can be\n * used to simulate e.g. a background task. The static method\n * {@link #once} is a special case. It will call a function deferred after a\n * given timeout.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.event.Timer\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param interval {Number} initial interval in milliseconds of the timer.\n   */\n  construct : function(interval)\n  {\n    this.base(arguments);\n\n    if (interval != null) {\n      this.setInterval(interval);\n    }\n\n    // don't use qx.lang.Function.bind because this function would add a\n    // disposed check, which could break the functionality. In IE the handler\n    // may get called after \"clearInterval\" (i.e. after the timer is disposed)\n    // and we must be able to handle this.\n    var self = this;\n    this.__oninterval = function() {\n      self._oninterval.call(self);\n    };\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** This event if fired each time the interval time has elapsed */\n    \"interval\" : \"qx.event.type.Event\"\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Start a function after a given timeout.\n     *\n     * @param func {Function} Function to call\n     * @param obj {Object} context (this), the function is called with\n     * @param timeout {Number} Number of milliseconds to wait before the\n     *   function is called.\n     * @return {qx.event.Timer} The timer object used for the timeout. This\n     *    object can be used to cancel the timeout. Note that the timer is\n     *    only valid until the timer has been executed.\n     */\n    once : function(func, obj, timeout)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // check the given parameter\n        qx.core.Assert.assertFunction(func, \"func is not a function\");\n        qx.core.Assert.assertNotUndefined(timeout, \"No timeout given\");\n      }\n\n      // Create time instance\n      var timer = new qx.event.Timer(timeout);\n\n      // Bug #3481: append original function to timer instance so it can be\n      // read by a debugger\n      timer.__onceFunc = func;\n\n      // Add event listener to interval\n      timer.addListener(\"interval\", function(e)\n      {\n        timer.stop();\n        func.call(obj, e);\n        delete timer.__onceFunc;\n        timer.dispose();\n\n        obj = null;\n      },\n      obj);\n\n      // Directly start timer\n      timer.start();\n      return timer;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * With the enabled property the Timer can be started and suspended.\n     * Setting it to \"true\" is equivalent to {@link #start}, setting it\n     * to \"false\" is equivalent to {@link #stop}.\n     */\n    enabled :\n    {\n      init : false,\n      check : \"Boolean\",\n      apply : \"_applyEnabled\"\n    },\n\n    /**\n     * Time in milliseconds between two callback calls.\n     * This property can be set to modify the interval of\n     * a running timer.\n     */\n    interval :\n    {\n      check : \"Integer\",\n      init : 1000,\n      apply : \"_applyInterval\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __intervalHandler : null,\n    __oninterval : null,\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply the interval of the timer.\n     *\n     * @param value {var} Current value\n     * @param old {var} Previous value\n     */\n    _applyInterval : function(value, old)\n    {\n      if (this.getEnabled()) {\n        this.restart();\n      }\n    },\n\n\n    /**\n     * Apply the enabled state of the timer.\n     *\n     * @param value {var} Current value\n     * @param old {var} Previous value\n     */\n    _applyEnabled : function(value, old)\n    {\n      if (old)\n      {\n        window.clearInterval(this.__intervalHandler);\n        this.__intervalHandler = null;\n      }\n      else if (value)\n      {\n        this.__intervalHandler = window.setInterval(this.__oninterval, this.getInterval());\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER-ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Start the timer\n     *\n     */\n    start : function() {\n      this.setEnabled(true);\n    },\n\n\n    /**\n     * Start the timer with a given interval\n     *\n     * @param interval {Integer} Time in milliseconds between two callback calls.\n     */\n    startWith : function(interval)\n    {\n      this.setInterval(interval);\n      this.start();\n    },\n\n\n    /**\n     * Stop the timer.\n     *\n     */\n    stop : function() {\n      this.setEnabled(false);\n    },\n\n\n    /**\n     * Restart the timer.\n     * This makes it possible to change the interval of a running timer.\n     *\n     */\n    restart : function()\n    {\n      this.stop();\n      this.start();\n    },\n\n\n    /**\n     * Restart the timer. with a given interval.\n     *\n     * @param interval {Integer} Time in milliseconds between two callback calls.\n     */\n    restartWith : function(interval)\n    {\n      this.stop();\n      this.startWith(interval);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT-MAPPER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * timer callback\n     *\n     * @signature function()\n     */\n    _oninterval : qx.event.GlobalError.observeMethod(function()\n    {\n      if (this.$$disposed) {\n        return;\n      }\n\n      if (this.getEnabled()) {\n        this.fireEvent(\"interval\");\n      }\n    })\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (this.__intervalHandler) {\n      window.clearInterval(this.__intervalHandler);\n    }\n\n    this.__intervalHandler = this.__oninterval = null;\n  }\n});\n"
  ]
}