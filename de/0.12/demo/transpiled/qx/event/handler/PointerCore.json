{
  "className": "qx.event.handler.PointerCore",
  "packageName": "qx.event.handler",
  "name": "PointerCore",
  "superClass": "Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0
      },
      "end": {
        "line": 491,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2014 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Christopher Zuendorf (czuendorf)\n Daniel Wagner (danielwagner)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Low-level pointer event handler.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.client.Event"
        },
        {
          "name": "@require",
          "body": "qx.bom.client.Device"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "MOUSE_TO_POINTER_MAPPING": {
      "location": {
        "start": {
          "line": 32,
          "column": 4
        },
        "end": {
          "line": 38,
          "column": 5
        }
      },
      "type": "variable",
      "access": "public"
    },
    "TOUCH_TO_POINTER_MAPPING": {
      "location": {
        "start": {
          "line": 40,
          "column": 4
        },
        "end": {
          "line": 45,
          "column": 5
        }
      },
      "type": "variable",
      "access": "public"
    },
    "MSPOINTER_TO_POINTER_MAPPING": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 56,
          "column": 5
        }
      },
      "type": "variable",
      "access": "public"
    },
    "POINTER_TO_GESTURE_MAPPING": {
      "location": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 5
        }
      },
      "type": "variable",
      "access": "public"
    },
    "LEFT_BUTTON": {
      "location": {
        "start": {
          "line": 65,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 67
        }
      },
      "type": "variable",
      "access": "public"
    },
    "SIM_MOUSE_DISTANCE": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 27
        }
      },
      "type": "variable",
      "access": "public"
    },
    "SIM_MOUSE_DELAY": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 26
        }
      },
      "type": "variable",
      "access": "public"
    },
    "__lastTouch": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 79,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Coordinates of the last touch. This needs to be static because the target could\n change between touch and simulated mouse events. Touch events will be detected\n by one instance which moves the target. The simulated mouse events will be fired with\n a delay which causes another target and with that, another instance of this handler.\n last touch was.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 89,
        "column": 14
      },
      "end": {
        "line": 128,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Create a new instance</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "target {Element} element on which to listen for native touch events",
          "paramName": "target",
          "description": " element on which to listen for native touch events",
          "type": "qx.event.handler.Element"
        },
        {
          "name": "@param",
          "body": "emitter {qx.event.Emitter?} Event emitter (used if dispatchEvent\n is not supported, e.g. in IE8)",
          "paramName": "emitter",
          "description": " Event emitter (used if dispatchEvent\n is not supported, e.g. in IE8)",
          "optional": true,
          "type": "qx.event.Emitter"
        }
      ]
    }
  },
  "members": {
    "__defaultTarget": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__emitter": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__eventNames": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__nativePointerEvents": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__wrappedListener": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastButtonState": {
      "location": {
        "start": {
          "line": 137,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__buttonStates": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__primaryIdentifier": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 139,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__activeTouches": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_processedFlag": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 25
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_initPointerObserver": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds listeners to native pointer events if supported</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_initObserver": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 169,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Register native event listeners</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} listener callback",
            "paramName": "callback",
            "description": " listener callback",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "useEmitter {Boolean} attach listener to Emitter instead of\n native event",
            "paramName": "useEmitter",
            "description": " attach listener to Emitter instead of\n native event",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerEvent": {
      "location": {
        "start": {
          "line": 175,
          "column": 4
        },
        "end": {
          "line": 190,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for native pointer events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event}  Native DOM event",
            "paramName": "domEvent",
            "description": "  Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTouchEvent": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 286,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for touch events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native DOM event",
            "paramName": "domEvent",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onMouseEvent": {
      "location": {
        "start": {
          "line": 293,
          "column": 4
        },
        "end": {
          "line": 350,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for touch events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native DOM event",
            "paramName": "domEvent",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_determineActiveTouches": {
      "location": {
        "start": {
          "line": 358,
          "column": 4
        },
        "end": {
          "line": 381,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determines the current active touches.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} the DOM event type.",
            "paramName": "type",
            "description": " the DOM event type.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "changedTouches {Array} the current changed touches.",
            "paramName": "changedTouches",
            "description": " the current changed touches.",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isSimulatedMouseEvent": {
      "location": {
        "start": {
          "line": 391,
          "column": 4
        },
        "end": {
          "line": 405,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given MouseEvent position is identical to the previously fired TouchEvent position.\n If <code>true</code> the corresponding event can be identified as simulated.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} current mouse x",
            "paramName": "x",
            "description": " current mouse x",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "y {Integer} current mouse y",
            "paramName": "y",
            "description": " current mouse y",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if passed mouse position is a synthetic MouseEvent.",
            "type": "Boolean",
            "description": " <code>true</code> if passed mouse position is a synthetic MouseEvent."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopObserver": {
      "location": {
        "start": {
          "line": 411,
          "column": 4
        },
        "end": {
          "line": 415,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes native pointer event listeners.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireEvent": {
      "location": {
        "start": {
          "line": 425,
          "column": 4
        },
        "end": {
          "line": 481,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a touch event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String ? null} type of the event",
            "paramName": "type",
            "description": " type of the event",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element ? null} event target",
            "paramName": "target",
            "description": " event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one was returned by event handlers",
            "type": "qx.Promise?",
            "description": " a promise, if one was returned by event handlers"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 486,
          "column": 4
        },
        "end": {
          "line": 489,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose this object</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.IDisposable",
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    }
  },
  "descendants": [
    "qx.event.handler.Pointer"
  ]
}