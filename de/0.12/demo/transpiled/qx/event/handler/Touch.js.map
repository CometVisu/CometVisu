{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/event/handler/Touch.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "handler",
    "TouchCore",
    "implement",
    "IEventHandler",
    "core",
    "IDisposable",
    "construct",
    "manager",
    "__manager",
    "__window",
    "getWindow",
    "__root",
    "document",
    "apply",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "touchstart",
    "touchmove",
    "touchend",
    "touchcancel",
    "tap",
    "longtap",
    "swipe",
    "TARGET_CHECK",
    "TARGET_DOMNODE",
    "TARGET_DOCUMENT",
    "IGNORE_CAN_HANDLE",
    "MOUSE_TO_TOUCH_MAPPING",
    "members",
    "__isInTouch",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_fireEvent",
    "domEvent",
    "eventTypeClass",
    "_getTarget",
    "nodeType",
    "fireEvent",
    "Touch",
    "Data",
    "_onTouchEvent",
    "GlobalError",
    "observeMethod",
    "_commonTouchEventHandler",
    "dispose",
    "__callBase",
    "method",
    "args",
    "prototype",
    "defer",
    "addHandler",
    "Environment",
    "get",
    "getManager",
    "getHandler"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Tino Butz (tbtz)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This class provides a unified touch event handler.\n *\n * @require(qx.event.handler.UserAction)\n * @require(qx.event.handler.Orientation)\n * @require(qx.event.type.Tap)\n * @require(qx.event.type.Swipe)\n * @require(qx.event.type.Track)\n * @require(qx.event.type.Rotate)\n * @require(qx.event.type.Pinch)\n */\nqx.Class.define(\"qx.event.handler.Touch\",\n{\n  extend : qx.event.handler.TouchCore,\n  implement : [ qx.event.IEventHandler, qx.core.IDisposable ],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager)\n  {\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n    this.__root = this.__window.document;\n\n    qx.event.handler.TouchCore.apply(this, [this.__root]);\n  },\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY : qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES :\n    {\n      touchstart : 1,\n      touchmove : 1,\n      touchend : 1,\n      touchcancel : 1, // Appears when the touch is interrupted, e.g. by an alert box\n      tap : 1,\n      longtap : 1,\n      swipe : 1\n    },\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK : qx.event.IEventHandler.TARGET_DOMNODE + qx.event.IEventHandler.TARGET_DOCUMENT,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE : true,\n\n    /** @type {Map} Mapping of mouse events to touch events */\n    MOUSE_TO_TOUCH_MAPPING :\n    {\n      \"mousedown\" : \"touchstart\",\n      \"mousemove\" : \"touchmove\",\n      \"mouseup\" : \"touchend\"\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __manager : null,\n    __window : null,\n    __root : null,\n\n    // Checks if the mouse movement is happening while simulating a touch event\n    __isInTouch : false,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent : function(target, type) {},\n\n    // interface implementation\n    registerEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    unregisterEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Fire a touch event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String ? null} type of the event\n     * @param target {Element ? null} event target\n     * @param eventTypeClass {Class ? qx.event.type.Touch} the event type class\n     */\n    _fireEvent : function(domEvent, type, target, eventTypeClass)\n    {\n      if (!target) {\n        target = this._getTarget(domEvent);\n      }\n\n      var type = type || domEvent.type;\n\n      if (target && target.nodeType)\n      {\n        qx.event.Registration.fireEvent(\n          target,\n          type,\n          eventTypeClass||qx.event.type.Touch,\n          [domEvent, target, null, true, true]\n        );\n      }\n\n      // Fire user action event\n      qx.event.Registration.fireEvent(this.__window, \"useraction\", qx.event.type.Data, [type]);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for the native touch events.\n     *\n     * @signature function(domEvent)\n     * @param domEvent {Event} The touch event from the browser.\n     */\n    _onTouchEvent : qx.event.GlobalError.observeMethod(function(domEvent)\n    {\n      this._commonTouchEventHandler(domEvent);\n    }),\n\n\n    /**\n     * Dispose this object\n     */\n    dispose : function()\n    {\n      this.__callBase(\"dispose\");\n      this.__manager = this.__window = this.__root = null;\n    },\n\n\n    /**\n     * Call overridden method.\n     *\n     * @param method {String} Name of the overridden method.\n     * @param args {Array} Arguments.\n     */\n    __callBase: function(method, args) {\n      qx.event.handler.TouchCore.prototype[method].apply(this, args || []);\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    qx.event.Registration.addHandler(statics);\n\n    // Prevent scrolling on the document to avoid scrolling at all\n    if (qx.core.Environment.get(\"event.touch\")) {\n      // get the handler to assure that the instance is created\n      qx.event.Registration.getManager(document).getHandler(statics);\n    }\n  }\n});\n"
  ]
}