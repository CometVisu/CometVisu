{
  "className": "qx.event.handler.Focus",
  "packageName": "qx.event.handler",
  "name": "Focus",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler",
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 38,
        "column": 0
      },
      "end": {
        "line": 1304,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2007-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Fabian Jakobs (fjakobs)\n Christian Hagendorn (chris_schmidt)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This handler is used to normalize all focus/activation requirements\n and normalize all cross browser quirks in this area.\n Notes:</p>\n<ul>\n<li>Webkit and Opera (before 9.5) do not support tabIndex for all elements\n(See also: https://bugs.webkit.org/show_bug.cgi?id=7138)</li>\n<li>TabIndex is normally 0, which means all naturally focusable elements are focusable.</li>\n<li>TabIndex &gt; 0 means that the element is focusable and tabable</li>\n<li>TabIndex &lt; 0 means that the element, even if naturally possible, is not focusable.\nNOTE: Instances of this class must be disposed of after use</li>\n</ul>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.event.dispatch.DomBubbling"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 56,
        "column": 14
      },
      "end": {
        "line": 75,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": "<p>Create a new instance</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.application.Inline"
        }
      ]
    }
  },
  "properties": {
    "active": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 90,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The active DOM element</p>"
          }
        ]
      },
      "name": "active",
      "propertyType": "new",
      "apply": "_applyActive",
      "nullable": true,
      "allowNull": true
    },
    "focus": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The focussed DOM element</p>"
          }
        ]
      },
      "name": "focus",
      "propertyType": "new",
      "apply": "_applyFocus",
      "nullable": true,
      "allowNull": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 52
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SUPPORTED_TYPES": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "IGNORE_CAN_HANDLE": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "FOCUSABLE_ELEMENTS": {
      "location": {
        "start": {
          "line": 128,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} See: http://msdn.microsoft.com/en-us/library/ms534654(VS.85).aspx"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__onNativeMouseDownWrapper": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 37
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeMouseUpWrapper": {
      "location": {
        "start": {
          "line": 185,
          "column": 4
        },
        "end": {
          "line": 185,
          "column": 35
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusWrapper": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeBlurWrapper": {
      "location": {
        "start": {
          "line": 187,
          "column": 4
        },
        "end": {
          "line": 187,
          "column": 32
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeDragGestureWrapper": {
      "location": {
        "start": {
          "line": 188,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeSelectStartWrapper": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 39
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusInWrapper": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 190,
          "column": 35
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusOutWrapper": {
      "location": {
        "start": {
          "line": 191,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 36
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__previousFocus": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__previousActive": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__down": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 15
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__up": {
      "location": {
        "start": {
          "line": 195,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 13
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__needsScrollFix": {
      "location": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__relatedTarget": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 197,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 206,
          "column": 46
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  EVENT HANDLER INTERFACE\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>interface implementation</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\n     be attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\n     be attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event handler can handle events of the\n     given type.",
            "type": "Boolean",
            "description": " Whether the event handler can handle events of the\n     given type."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>interface implementation</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\n     be attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\n     be attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>interface implementation</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target from, which the event handler should\n     be removed",
            "paramName": "target",
            "description": " The target from, which the event handler should\n     be removed",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "focus": {
      "location": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  FOCUS/BLUR USER INTERFACE\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Focuses the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 274,
          "column": 4
        },
        "end": {
          "line": 276,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activates the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to activate",
            "paramName": "element",
            "description": " DOM element to activate",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 283,
          "column": 4
        },
        "end": {
          "line": 296,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Blurs the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 303,
          "column": 4
        },
        "end": {
          "line": 308,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deactivates the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to activate",
            "paramName": "element",
            "description": " DOM element to activate",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "tryActivate": {
      "location": {
        "start": {
          "line": 316,
          "column": 4
        },
        "end": {
          "line": 322,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tries to activate the given element. This checks whether\n the activation is allowed first.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to activate",
            "paramName": "element",
            "description": " DOM element to activate",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__fireEvent": {
      "location": {
        "start": {
          "line": 339,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  HELPER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Shorthand to fire events from within this class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} DOM element which is the target",
            "paramName": "target",
            "description": " DOM element which is the target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "related {Element} DOM element which is the related target",
            "paramName": "related",
            "description": " DOM element which is the related target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event to fire",
            "paramName": "type",
            "description": " Name of the event to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "bubbles {Boolean} Whether the event should bubble",
            "paramName": "bubbles",
            "description": " Whether the event should bubble",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one or more of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": " a promise, if one or more of the event handlers returned a promise"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_windowFocused": {
      "location": {
        "start": {
          "line": 354,
          "column": 4
        },
        "end": {
          "line": 354,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  WINDOW FOCUS/BLUR SUPPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the window is focused currently"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__doWindowBlur": {
      "location": {
        "start": {
          "line": 359,
          "column": 4
        },
        "end": {
          "line": 368,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper for native event listeners to react on window blur</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__doWindowFocus": {
      "location": {
        "start": {
          "line": 374,
          "column": 4
        },
        "end": {
          "line": 383,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper for native event listeners to react on window focus</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_initObserver": {
      "location": {
        "start": {
          "line": 396,
          "column": 4
        },
        "end": {
          "line": 516,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  NATIVE OBSERVER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Initializes event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_stopObserver": {
      "location": {
        "start": {
          "line": 523,
          "column": 4
        },
        "end": {
          "line": 580,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__onNativeDragGesture": {
      "location": {
        "start": {
          "line": 597,
          "column": 4
        },
        "end": {
          "line": 608,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  NATIVE LISTENERS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>draggesture</code> event\n supported by gecko. Used to stop native drag and drop when\n selection is disabled.</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "https://developer.mozilla.org/en-US/docs/Drag_and_Drop"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusIn": {
      "location": {
        "start": {
          "line": 617,
          "column": 4
        },
        "end": {
          "line": 699,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>DOMFocusIn</code> or <code>focusin</code>\n depending on the client's engine.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusOut": {
      "location": {
        "start": {
          "line": 708,
          "column": 4
        },
        "end": {
          "line": 790,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>DOMFocusOut</code> or <code>focusout</code>\n depending on the client's engine.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeBlur": {
      "location": {
        "start": {
          "line": 798,
          "column": 4
        },
        "end": {
          "line": 831,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>blur</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocus": {
      "location": {
        "start": {
          "line": 839,
          "column": 4
        },
        "end": {
          "line": 886,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>focus</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeMouseDown": {
      "location": {
        "start": {
          "line": 894,
          "column": 4
        },
        "end": {
          "line": 999,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>mousedown</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeMouseUp": {
      "location": {
        "start": {
          "line": 1007,
          "column": 4
        },
        "end": {
          "line": 1048,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>mouseup</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__getCorrectFocusTarget": {
      "location": {
        "start": {
          "line": 1057,
          "column": 4
        },
        "end": {
          "line": 1074,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fix for bug #9331.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} element to check",
            "paramName": "target",
            "description": " element to check",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} return correct target (in case of compound input controls should always return textfield);",
            "type": "qx.event.handler.Element",
            "description": " return correct target (in case of compound input controls should always return textfield);"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fixFocus": {
      "location": {
        "start": {
          "line": 1083,
          "column": 4
        },
        "end": {
          "line": 1096,
          "column": 9
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fix for bug #2602.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} target element from mouse up event",
            "paramName": "target",
            "description": " target element from mouse up event",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} Element to activate;",
            "type": "qx.event.handler.Element",
            "description": " Element to activate;"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeSelectStart": {
      "location": {
        "start": {
          "line": 1104,
          "column": 4
        },
        "end": {
          "line": 1123,
          "column": 7
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>selectstart</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__isFocusable": {
      "location": {
        "start": {
          "line": 1138,
          "column": 4
        },
        "end": {
          "line": 1151,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  HELPER METHODS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Whether the given element is focusable. This is perfectly modeled to the\n browsers behavior and this way may differ in the various clients.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} DOM Element to query",
            "paramName": "el",
            "description": " DOM Element to query",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element is focusable",
            "type": "Boolean",
            "description": " Whether the element is focusable"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findFocusableElement": {
      "location": {
        "start": {
          "line": 1160,
          "column": 4
        },
        "end": {
          "line": 1179,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the next focusable parent element of an activated DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} Element to start lookup with.",
            "paramName": "el",
            "description": " Element to start lookup with.",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} The next focusable element.",
            "type": "Element|null",
            "description": " The next focusable element."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findActivatableElement": {
      "location": {
        "start": {
          "line": 1191,
          "column": 4
        },
        "end": {
          "line": 1205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the next activatable element. May be the element itself.\n Works a bit different than the method {@link #__findFocusableElement}\n as it looks up for a parent which is has a keep focus flag. When\n there is such a parent it returns null otherwise the original\n incoming element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} Element to start lookup with.",
            "paramName": "el",
            "description": " Element to start lookup with.",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The next activatable element.",
            "type": "qx.event.handler.Element",
            "description": " The next activatable element."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isSelectable": {
      "location": {
        "start": {
          "line": 1214,
          "column": 4
        },
        "end": {
          "line": 1227,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given el (or its content) should be selectable\n by the user.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Element} Node to start lookup with",
            "paramName": "node",
            "description": " Node to start lookup with",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the content is selectable.",
            "type": "Boolean",
            "description": " Whether the content is selectable."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyActive": {
      "location": {
        "start": {
          "line": 1236,
          "column": 4
        },
        "end": {
          "line": 1250,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  PROPERTY APPLY ROUTINES\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>apply routine</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "active"
      ]
    },
    "_applyFocus": {
      "location": {
        "start": {
          "line": 1253,
          "column": 4
        },
        "end": {
          "line": 1272,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>apply routine</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "focus"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getActive": {
      "type": "function",
      "name": "getActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>active</code>.\n\nFor further details take a look at the property definition: {@link #active}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for active"
          }
        ]
      }
    },
    "setActive": {
      "type": "function",
      "name": "setActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>active</code>.\n\nFor further details take a look at the property definition: {@link #active}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for active"
          }
        ]
      }
    },
    "resetActive": {
      "type": "function",
      "name": "resetActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>active</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #active}."
          }
        ]
      }
    },
    "getFocus": {
      "type": "function",
      "name": "getFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focus</code>.\n\nFor further details take a look at the property definition: {@link #focus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for focus"
          }
        ]
      }
    },
    "setFocus": {
      "type": "function",
      "name": "setFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focus</code>.\n\nFor further details take a look at the property definition: {@link #focus}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for focus"
          }
        ]
      }
    },
    "resetFocus": {
      "type": "function",
      "name": "resetFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>focus</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #focus}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1281,
        "column": 13
      },
      "end": {
        "line": 1286,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 1294,
        "column": 10
      },
      "end": {
        "line": 1303,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DEFER\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}