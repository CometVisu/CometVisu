{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/event/type/Dom.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Native",
    "statics",
    "SHIFT_MASK",
    "CTRL_MASK",
    "ALT_MASK",
    "META_MASK",
    "CAPSLOCK_MASK",
    "NUMLOCK_MASK",
    "SCROLLLOCK_MASK",
    "members",
    "_cloneNativeEvent",
    "nativeEvent",
    "clone",
    "shiftKey",
    "ctrlKey",
    "altKey",
    "metaKey",
    "getModifierState",
    "numLock",
    "capsLock",
    "scrollLock",
    "getModifiers",
    "mask",
    "evt",
    "_native",
    "Dom",
    "getKeyLockState",
    "isCtrlPressed",
    "isShiftPressed",
    "isAltPressed",
    "isMetaPressed",
    "isCapsLocked",
    "isNumLocked",
    "isScrollLocked",
    "isCtrlOrCommandPressed",
    "core",
    "Environment",
    "get"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Common base class for all DOM events.\n */\nqx.Class.define(\"qx.event.type.Dom\",\n{\n  extend : qx.event.type.Native,\n\n\n\n  statics :\n  {\n    /** @type {Integer} The modifier mask for the shift key. */\n    SHIFT_MASK : 1,\n\n    /** @type {Integer} The modifier mask for the control key. */\n    CTRL_MASK  : 2,\n\n    /** @type {Integer} The modifier mask for the alt key. */\n    ALT_MASK   : 4,\n\n    /** @type {Integer} The modifier mask for the meta key (e.g. apple key on Macs). */\n    META_MASK  : 8,\n\n    /** @type {Integer} The modifier mask for the CapsLock modifier. */\n    CAPSLOCK_MASK : 16,\n\n    /** @type {Integer} The modifier mask for the NumLock modifier. */\n    NUMLOCK_MASK : 32,\n\n    /** @type {Integer} The modifier mask for the ScrollLock modifier. */\n    SCROLLLOCK_MASK : 64\n  },\n\n\n  members :\n  {\n    // overridden\n    _cloneNativeEvent : function(nativeEvent, clone)\n    {\n      var clone = this.base(arguments, nativeEvent, clone);\n\n      clone.shiftKey = nativeEvent.shiftKey;\n      clone.ctrlKey = nativeEvent.ctrlKey;\n      clone.altKey = nativeEvent.altKey;\n      clone.metaKey = nativeEvent.metaKey;\n\n      if (typeof nativeEvent.getModifierState === \"function\") {\n        clone.numLock = nativeEvent.getModifierState(\"NumLock\");\n        clone.capsLock = nativeEvent.getModifierState(\"CapsLock\");\n        clone.scrollLock = nativeEvent.getModifierState(\"ScrollLock\");\n      }\n      else {\n        clone.numLock = false;\n        clone.capsLock = false;\n        clone.scrollLock = false;\n      }\n\n      return clone;\n    },\n\n\n    /**\n     * Return in a bit map, which modifier keys are pressed. The constants\n     * {@link #SHIFT_MASK}, {@link #CTRL_MASK}, {@link #ALT_MASK},\n     * {@link #META_MASK} and {@link #CAPSLOCK_MASK} define the bit positions\n     * of the corresponding keys.\n     *\n     * @return {Integer} A bit map with the pressed modifier keys.\n     */\n    getModifiers : function()\n    {\n      var mask = 0;\n      var evt = this._native;\n      if (evt.shiftKey) {\n        mask |= qx.event.type.Dom.SHIFT_MASK;\n      }\n      if (evt.ctrlKey) {\n        mask |= qx.event.type.Dom.CTRL_MASK;\n      }\n      if (evt.altKey) {\n        mask |= qx.event.type.Dom.ALT_MASK;\n      }\n      if (evt.metaKey) {\n        mask |= qx.event.type.Dom.META_MASK;\n      }\n      return mask;\n    },\n\n    /**\n     * Return in a bit map, which lock keys are pressed. The constants\n     * {@link #CAPSLOCK_MASK}, {@link #NUMLOCK_MASK}, and {@link #SCROLLLOCK_MASK} \n     * define the bit positions of the corresponding keys.\n     *\n     * @return {Integer} A bit map with the locked keys.\n     */\n    getKeyLockState: function () {\n      var mask = 0;\n      var evt = this._native;\n\n      if (evt.capsLock) {\n        mask |= qx.event.type.Dom.CAPSLOCK_MASK;\n      }\n      if (evt.numLock) {\n        mask |= qx.event.type.Dom.NUMLOCK_MASK;\n      }\n      if (evt.scrollLock) {\n        mask |= qx.event.type.Dom.SCROLLLOCK_MASK;\n      }\n      return mask;\n    },\n\n\n    /**\n     * Returns whether the ctrl key is pressed.\n     *\n     * @return {Boolean} whether the ctrl key is pressed.\n     */\n    isCtrlPressed : function() {\n      return this._native.ctrlKey;\n    },\n\n\n    /**\n     * Returns whether the shift key is pressed.\n     *\n     * @return {Boolean} whether the shift key is pressed.\n     */\n    isShiftPressed : function() {\n      return this._native.shiftKey;\n    },\n\n\n    /**\n     * Returns whether the alt key is pressed.\n     *\n     * @return {Boolean} whether the alt key is pressed.\n     */\n    isAltPressed : function() {\n      return this._native.altKey;\n    },\n\n\n    /**\n     * Returns whether the meta key is pressed.\n     *\n     * @return {Boolean} whether the meta key is pressed.\n     */\n    isMetaPressed : function() {\n      return this._native.metaKey;\n    },\n\n    /**\n      * Returns whether the caps-lock modifier is active\n      *\n      * @return {Boolean} whether the CapsLock key is pressed.\n      */\n    isCapsLocked: function () {\n      return this._native.capsLock;\n    },\n\n    /**\n      * Returns whether the num-lock modifier is active\n      *\n      * @return {Boolean} whether the NumLock key is pressed.\n      */\n    isNumLocked: function () {\n      return this._native.numLock;\n    },\n\n    /**\n      * Returns whether the scroll-lock modifier is active\n      *\n      * @return {Boolean} whether the ScrollLock key is pressed.\n      */\n    isScrollLocked: function () {\n      return this._native.scrollLock;\n    },\n\n    /**\n     * Returns whether the ctrl key or (on the Mac) the command key is pressed.\n     *\n     * @return {Boolean} <code>true</code> if the command key is pressed on the Mac\n     *           or the ctrl key is pressed on another system.\n     */\n    isCtrlOrCommandPressed : function()\n    {\n      // Opera seems to use ctrlKey for the cmd key so don't fix that for opera\n      // on mac [BUG #5884]\n      if (\n        qx.core.Environment.get(\"os.name\") == \"osx\" &&\n        qx.core.Environment.get(\"engine.name\") != \"opera\"\n      ) {\n        return this._native.metaKey;\n      } else {\n        return this._native.ctrlKey;\n      }\n    }\n  }\n});\n"
  ]
}