{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/core/Axis.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "defaultItemSize",
    "itemCount",
    "customSizes",
    "events",
    "members",
    "__ranges",
    "getDefaultItemSize",
    "setDefaultItemSize",
    "fireNonBubblingEvent",
    "getItemCount",
    "setItemCount",
    "setItemSize",
    "index",
    "size",
    "getItemSize",
    "resetItemSizes",
    "__getRanges",
    "defaultSize",
    "indexes",
    "key",
    "parseInt",
    "push",
    "length",
    "ranges",
    "startIndex",
    "endIndex",
    "firstItemSize",
    "rangeStart",
    "rangeEnd",
    "sort",
    "a",
    "b",
    "correctionSum",
    "i",
    "cellSize",
    "unshift",
    "lastRange",
    "remainingItemsSize",
    "__findRangeByPosition",
    "position",
    "start",
    "end",
    "pivot",
    "range",
    "getItemAtPosition",
    "getTotalSize",
    "startPos",
    "offset",
    "Math",
    "floor",
    "__findRangeByIndex",
    "getItemPosition",
    "getItemSizes",
    "minSizeSum",
    "sum",
    "sizes",
    "itemSize",
    "destruct",
    "ui",
    "virtual",
    "Axis"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The axis maps virtual screen coordinates to item indexes. By default all\n * items have the same size but it is also possible to give specific items\n * a different size.\n */\nqx.Class.define(\"qx.ui.virtual.core.Axis\",\n{\n  extend : qx.core.Object,\n\n  /**\n   * @param defaultItemSize {Integer} The default size of the items.\n   * @param itemCount {Integer} The number of item on the axis.\n   */\n  construct : function(defaultItemSize, itemCount)\n  {\n    this.base(arguments);\n\n    this.itemCount = itemCount;\n    this.defaultItemSize = defaultItemSize;\n\n    // sparse array\n    this.customSizes = {};\n  },\n\n\n  events :\n  {\n    /** Every change to the axis configuration triggers this event. */\n    \"change\" : \"qx.event.type.Event\"\n  },\n\n\n  members :\n  {\n    __ranges : null,\n\n\n    /**\n     * Get the default size of the items.\n     *\n     * @return {Integer} The default item size.\n     */\n    getDefaultItemSize : function() {\n      return this.defaultItemSize;\n    },\n\n\n    /**\n     * Set the default size the items.\n     *\n     * @param defaultItemSize {Integer} The default size of the items.\n     */\n    setDefaultItemSize : function(defaultItemSize)\n    {\n      if (this.defaultItemSize !== defaultItemSize)\n      {\n        this.defaultItemSize = defaultItemSize;\n        this.__ranges = null;\n        this.fireNonBubblingEvent(\"change\");\n      }\n    },\n\n\n    /**\n     * Get the number of items in the axis.\n     *\n     * @return {Integer} The number of items.\n     */\n    getItemCount : function() {\n      return this.itemCount;\n    },\n\n\n    /**\n     * Set the number of items in the axis.\n     *\n     * @param itemCount {Integer} The new item count.\n     */\n    setItemCount : function(itemCount)\n    {\n      if (this.itemCount !== itemCount)\n      {\n        this.itemCount = itemCount;\n        this.__ranges = null;\n        this.fireNonBubblingEvent(\"change\");\n      }\n    },\n\n\n    /**\n     * Sets the size of a specific item. This allow item, which have a size\n     * different from the default size.\n     *\n     * @param index {Integer} Index of the item to change.\n     * @param size {Integer} New size of the item.\n     */\n    setItemSize : function(index, size)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertArgumentsCount(arguments, 2, 2);\n        this.assert(\n          size >= 0 || size === null,\n          \"'size' must be 'null' or an integer larger than 0.\"\n        );\n      }\n      if (this.customSizes[index] == size) {\n        return;\n      }\n\n      if (size === null) {\n        delete this.customSizes[index];\n      } else {\n        this.customSizes[index] = size;\n      }\n      this.__ranges = null;\n      this.fireNonBubblingEvent(\"change\");\n    },\n\n\n    /**\n     * Get the size of the item at the given index.\n     *\n     * @param index {Integer} Index of the item to get the size for.\n     * @return {Integer} Size of the item.\n     */\n    getItemSize : function(index)\n    {\n      // custom size of 0 is not allowed\n      return this.customSizes[index] || this.defaultItemSize;\n    },\n\n\n    /**\n     * Reset all custom sizes set with {@link #setItemSize}.\n     */\n    resetItemSizes : function()\n    {\n      this.customSizes = {};\n      this.__ranges = null;\n      this.fireNonBubblingEvent(\"change\");\n    },\n\n\n    /**\n     * Split the position range into disjunct intervals. Each interval starts\n     * with a custom sized cell. Each position is contained in exactly one range.\n     * The ranges are sorted according to their start position.\n     *\n     * Complexity: O(n log n) (n = number of custom sized cells)\n     *\n     * @return {Map[]} The sorted list of ranges.\n     */\n    __getRanges : function()\n    {\n      if (this.__ranges) {\n        return this.__ranges;\n      }\n\n      var defaultSize = this.defaultItemSize;\n      var itemCount = this.itemCount;\n\n      var indexes = [];\n      for (var key in this.customSizes)\n      {\n        var index = parseInt(key, 10);\n        if (index < itemCount) {\n          indexes.push(index);\n        }\n      }\n      if (indexes.length == 0)\n      {\n        var ranges = [{\n          startIndex: 0,\n          endIndex: itemCount - 1,\n          firstItemSize: defaultSize,\n          rangeStart: 0,\n          rangeEnd: itemCount * defaultSize - 1\n        }];\n        this.__ranges = ranges;\n        return ranges;\n      }\n\n      indexes.sort(function(a,b) { return a > b ? 1 : -1;});\n\n      var ranges = [];\n      var correctionSum = 0;\n\n      for (var i=0; i<indexes.length; i++)\n      {\n        var index = indexes[i];\n        if (index >= itemCount) {\n          break;\n        }\n\n        var cellSize = this.customSizes[index];\n        var rangeStart = index * defaultSize + correctionSum;\n\n        correctionSum += cellSize - defaultSize;\n\n        ranges[i] = {\n          startIndex: index,\n          firstItemSize: cellSize,\n          rangeStart: rangeStart\n        };\n        if (i > 0) {\n          ranges[i-1].rangeEnd = rangeStart-1;\n          ranges[i-1].endIndex = index-1;\n        }\n      }\n\n      // fix first range\n      if (ranges[0].rangeStart > 0)\n      {\n        ranges.unshift({\n          startIndex: 0,\n          endIndex: ranges[0].startIndex-1,\n          firstItemSize: defaultSize,\n          rangeStart: 0,\n          rangeEnd: ranges[0].rangeStart-1\n        });\n      }\n\n      // fix last range\n      var lastRange = ranges[ranges.length-1];\n      var remainingItemsSize = (itemCount - lastRange.startIndex - 1) * defaultSize;\n      lastRange.rangeEnd = lastRange.rangeStart + lastRange.firstItemSize + remainingItemsSize - 1;\n      lastRange.endIndex = itemCount - 1;\n\n      this.__ranges = ranges;\n      return ranges;\n    },\n\n\n    /**\n     * Returns the range, which contains the position\n     *\n     * Complexity: O(log n) (n = number of custom sized cells)\n     *\n     * @param position {Integer} The position.\n     * @return {Map} The range, which contains the given position.\n     */\n    __findRangeByPosition : function(position)\n    {\n      var ranges = this.__ranges || this.__getRanges();\n\n      var start = 0;\n      var end = ranges.length-1;\n\n      // binary search in the sorted ranges list\n      while (true)\n      {\n        var pivot = start + ((end - start) >> 1);\n        var range = ranges[pivot];\n\n        if (range.rangeEnd < position) {\n          start = pivot + 1;\n        } else if (range.rangeStart > position) {\n          end = pivot - 1;\n        } else {\n          return range;\n        }\n      }\n    },\n\n\n    /**\n     * Get the item and the offset into the item at the given position.\n     *\n     * @param position {Integer|null} The position to get the item for.\n     * @return {Map} A map with the keys <code>index</code> and\n     *    <code>offset</code>. The index is the index of the item containing the\n     *    position and offsets specifies offset into this item. If the position\n     *    is outside of the range, <code>null</code> is returned.\n     */\n    getItemAtPosition : function(position)\n    {\n      if (position < 0 || position >= this.getTotalSize()) {\n        return null;\n      }\n\n      var range = this.__findRangeByPosition(position);\n\n      var startPos = range.rangeStart;\n      var index = range.startIndex;\n      var firstItemSize = range.firstItemSize;\n\n      if (startPos + firstItemSize > position)\n      {\n        return {\n          index: index,\n          offset: position - startPos\n        };\n      }\n      else\n      {\n        var defaultSize = this.defaultItemSize;\n        return {\n          index: index + 1 + Math.floor((position - startPos - firstItemSize) / defaultSize),\n          offset: (position - startPos - firstItemSize) % defaultSize\n        };\n      }\n    },\n\n\n    /**\n     * Returns the range, which contains the position.\n     *\n     * Complexity: O(log n) (n = number of custom sized cells)\n     *\n     * @param index {Integer} The index of the item to get the range for.\n     * @return {Map} The range for the index.\n     */\n    __findRangeByIndex : function(index)\n    {\n      var ranges = this.__ranges || this.__getRanges();\n\n      var start = 0;\n      var end = ranges.length-1;\n\n      // binary search in the sorted ranges list\n      while (true)\n      {\n        var pivot = start + ((end - start) >> 1);\n        var range = ranges[pivot];\n\n        if (range.endIndex < index) {\n          start = pivot + 1;\n        } else if (range.startIndex > index) {\n          end = pivot - 1;\n        } else {\n          return range;\n        }\n      }\n    },\n\n\n    /**\n     * Get the start position of the item with the given index.\n     *\n     * @param index {Integer} The item's index.\n     * @return {Integer|null} The start position of the item. If the index is outside\n     *    of the axis range <code>null</code> is returned.\n     */\n    getItemPosition : function(index)\n    {\n      if (index < 0 || index >= this.itemCount) {\n        return null;\n      }\n\n      var range = this.__findRangeByIndex(index);\n      if (range.startIndex == index) {\n        return range.rangeStart;\n      } else {\n        return range.rangeStart + range.firstItemSize + (index-range.startIndex-1) * this.defaultItemSize;\n      }\n    },\n\n\n    /**\n     * Returns the sum of all cell sizes.\n     *\n     * @return {Integer} The sum of all item sizes.\n     */\n    getTotalSize : function()\n    {\n      var ranges = this.__ranges || this.__getRanges();\n      return ranges[ranges.length-1].rangeEnd + 1;\n    },\n\n\n    /**\n     * Get an array of item sizes starting with the item at \"startIndex\". The\n     * sum of all sizes in the returned array is at least \"minSizeSum\".\n     *\n     * @param startIndex {Integer} The index of the first item.\n     * @param minSizeSum {Integer} The minimum sum of the item sizes.\n     * @return {Integer[]} List of item sizes starting with the size of the item\n     *    at index <code>startIndex</code>. The sum of the item sizes is at least\n     *    <code>minSizeSum</code>.\n     */\n    getItemSizes : function(startIndex, minSizeSum)\n    {\n      var customSizes = this.customSizes;\n      var defaultSize = this.defaultItemSize;\n\n      var sum = 0;\n      var sizes = [];\n      var i=0;\n      while (sum < minSizeSum)\n      {\n        var itemSize = customSizes[startIndex] != null ? customSizes[startIndex] : defaultSize;\n        startIndex++;\n\n        sum += itemSize;\n        sizes[i++] = itemSize;\n        if (startIndex >= this.itemCount) {\n          break;\n        }\n      }\n      return sizes;\n    }\n  },\n\n\n  destruct : function() {\n    this.customSizes = this.__ranges = null;\n  }\n});\n"
  ]
}