{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/cell/IWidgetCell.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "getCellWidget",
    "data",
    "states",
    "pool",
    "widget",
    "updateStates",
    "updateData",
    "ui",
    "virtual",
    "cell",
    "IWidgetCell"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,gCAApB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,aAAa,EAAG,uBAASC,IAAT,EAAeC,MAAf,EAAuB,CAAE,CAV3C;;AAaE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG,cAASC,MAAT,EAAiB,CAAE,CApB5B;;AAuBE;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,YAAY,EAAG,sBAASD,MAAT,EAAiBF,MAAjB,EAAyB,CAAE,CA7B5C;;AAgCE;AACJ;AACA;AACA;AACA;AACA;AACII,MAAAA,UAAU,EAAG,oBAASF,MAAT,EAAiBH,IAAjB,EAAuB,CAAE;AAtCxC;AAFF,GADA;AAvBAR,EAAAA,EAAE,CAACc,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBC,WAAnB,CAA+Bd,aAA/B,GAA+CA,aAA/C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A widget cell renderer manages a pool of widgets to render cells in a\n * {@link qx.ui.virtual.layer.WidgetCell} layer.\n */\nqx.Interface.define(\"qx.ui.virtual.cell.IWidgetCell\",\n{\n  members :\n  {\n    /**\n     * Get a widget instance to render the cell\n     *\n     * @param data {var} Data needed for the cell to render.\n     * @param states {Map} The states set on the cell (e.g. <i>selected</i>,\n     * <i>focused</i>, <i>editable</i>).\n     *\n     * @return {qx.ui.core.LayoutItem} The cell widget\n     */\n    getCellWidget : function(data, states) {},\n\n\n    /**\n     * Release the given widget instance.\n     *\n     * Either pool or dispose the widget.\n     *\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to pool\n     */\n    pool : function(widget) {},\n\n\n    /**\n     * Update the states of the given widget.\n     *\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to update\n     * @param states {Map} The cell widget's states\n     */\n    updateStates : function(widget, states) {},\n\n\n    /**\n     * Update the data the cell widget should display\n     *\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to update\n     * @param data {var} The data to display\n     */\n    updateData : function(widget, data) {}\n  }\n});"
  ]
}