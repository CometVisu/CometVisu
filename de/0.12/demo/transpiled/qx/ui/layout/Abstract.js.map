{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "members",
    "__sizeHint",
    "_invalidChildrenCache",
    "__widget",
    "invalidateLayoutCache",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "warn",
    "getSizeHint",
    "_computeSizeHint",
    "hasHeightForWidth",
    "getHeightForWidth",
    "width",
    "invalidateChildrenCache",
    "verifyLayoutProperty",
    "_clearSeparators",
    "widget",
    "ui",
    "LayoutItem",
    "clearSeparators",
    "_renderSeparator",
    "separator",
    "bounds",
    "renderSeparator",
    "connectToWidget",
    "Error",
    "_getWidget",
    "_applyLayoutChange",
    "scheduleLayoutUpdate",
    "_getLayoutChildren",
    "getLayoutChildren",
    "destruct",
    "layout",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Base class for all layout managers.\n *\n * Custom layout manager must derive from\n * this class and implement the methods {@link #invalidateLayoutCache},\n * {@link #renderLayout} and {@link #getSizeHint}.\n */\nqx.Class.define(\"qx.ui.layout.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {Map} The cached size hint */\n    __sizeHint : null,\n\n    /** @type {Boolean} Whether the children cache is valid. This field is protected\n     *    because sub classes must be able to access it quickly.\n     */\n    _invalidChildrenCache : null,\n\n    /** @type {qx.ui.core.Widget} The connected widget */\n    __widget : null,\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Invalidate all layout relevant caches. Automatically deletes the size hint.\n     *\n     * @abstract\n     */\n    invalidateLayoutCache : function() {\n      this.__sizeHint = null;\n    },\n\n\n    /**\n     * Applies the children layout.\n     *\n     * @abstract\n     * @param availWidth {Integer} Final width available for the content (in pixel)\n     * @param availHeight {Integer} Final height available for the content (in pixel)\n     * @param padding {Map} Map containing the padding values. Keys:\n     * <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>\n     */\n    renderLayout : function(availWidth, availHeight, padding) {\n      this.warn(\"Missing renderLayout() implementation!\");\n    },\n\n\n    /**\n     * Computes the layout dimensions and possible ranges of these.\n     *\n     * @return {Map|null} The map with the preferred width/height and the allowed\n     *   minimum and maximum values in cases where shrinking or growing\n     *   is required. Can also return <code>null</code> when this detection\n     *   is not supported by the layout.\n     */\n    getSizeHint : function()\n    {\n      if (this.__sizeHint) {\n        return this.__sizeHint;\n      }\n\n      return this.__sizeHint = this._computeSizeHint();\n    },\n\n\n    /**\n     * Whether the layout manager supports height for width.\n     *\n     * @return {Boolean} Whether the layout manager supports height for width\n     */\n    hasHeightForWidth : function() {\n      return false;\n    },\n\n\n    /**\n     * If layout wants to trade height for width it has to implement this\n     * method and return the preferred height if it is resized to\n     * the given width. This function returns <code>null</code> if the item\n     * do not support height for width.\n     *\n     * @param width {Integer} The computed width\n     * @return {Integer} The desired height\n     */\n    getHeightForWidth : function(width)\n    {\n      this.warn(\"Missing getHeightForWidth() implementation!\");\n      return null;\n    },\n\n\n    /**\n     * This computes the size hint of the layout and returns it.\n     *\n     * @abstract\n     * @return {Map} The size hint.\n     */\n    _computeSizeHint : function() {\n      return null;\n    },\n\n\n    /**\n     * This method is called, on each child \"add\" and \"remove\" action and\n     * whenever the layout data of a child is changed. The method should be used\n     * to clear any children relevant cached data.\n     *\n     */\n    invalidateChildrenCache : function() {\n      this._invalidChildrenCache = true;\n    },\n\n\n    /**\n     * Verifies the value of a layout property.\n     *\n     * Note: This method is only available in the debug builds.\n     *\n     * @signature function(item, name, value)\n     * @param item {Object} The affected layout item\n     * @param name {Object} Name of the layout property\n     * @param value {Object} Value of the layout property\n     */\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value) {\n        // empty implementation\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Remove all currently visible separators\n     */\n    _clearSeparators : function()\n    {\n      // It may be that the widget do not implement clearSeparators which is especially true\n      // when it do not inherit from LayoutItem.\n      var widget = this.__widget;\n      if (widget instanceof qx.ui.core.LayoutItem) {\n        widget.clearSeparators();\n      }\n    },\n\n\n    /**\n     * Renders a separator between two children\n     *\n     * @param separator {String|qx.ui.decoration.IDecorator} The separator to render\n     * @param bounds {Map} Contains the left and top coordinate and the width and height\n     *    of the separator to render.\n     */\n    _renderSeparator : function(separator, bounds) {\n      this.__widget.renderSeparator(separator, bounds);\n    },\n\n\n    /**\n     * This method is called by the widget to connect the widget with the layout.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to connect to.\n     */\n    connectToWidget : function(widget)\n    {\n      if (widget && this.__widget) {\n        throw new Error(\"It is not possible to manually set the connected widget.\");\n      }\n\n      this.__widget = widget;\n\n      // Invalidate cache\n      this.invalidateChildrenCache();\n    },\n\n    /**\n     * Return the widget that is this layout is responsible for.\n     *\n     * @return {qx.ui.core.Widget} The widget connected to this layout.\n     */\n    _getWidget : function()\n    {\n      return this.__widget;\n    },\n\n    /**\n     * Indicate that the layout has layout changed and propagate this information\n     * up the widget hierarchy.\n     *\n     * Also a generic property apply method for all layout relevant properties.\n     */\n    _applyLayoutChange : function()\n    {\n      if (this.__widget) {\n        this.__widget.scheduleLayoutUpdate();\n      }\n    },\n\n\n    /**\n     * Returns the list of all layout relevant children.\n     *\n     * @return {Array} List of layout relevant children.\n     */\n    _getLayoutChildren : function() {\n      return this.__widget.getLayoutChildren();\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__widget = this.__sizeHint = null;\n  }\n});\n"
  ]
}