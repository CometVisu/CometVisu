{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Grid.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "__rowData",
    "__colData",
    "setSpacingX",
    "setSpacingY",
    "properties",
    "check",
    "init",
    "apply",
    "allowGrowSpannedCellWidth",
    "members",
    "__grid",
    "__colSpans",
    "__rowSpans",
    "__maxRowIndex",
    "__maxColIndex",
    "__rowHeights",
    "__colWidths",
    "verifyLayoutProperty",
    "__buildGrid",
    "grid",
    "colSpans",
    "rowSpans",
    "maxRowIndex",
    "maxColIndex",
    "children",
    "_getLayoutChildren",
    "i",
    "l",
    "length",
    "child",
    "props",
    "getLayoutProperties",
    "row",
    "column",
    "colSpan",
    "rowSpan",
    "Error",
    "x",
    "y",
    "undefined",
    "Math",
    "max",
    "push",
    "_invalidChildrenCache",
    "_setRowData",
    "key",
    "value",
    "rowData",
    "_setColumnData",
    "colData",
    "setSpacing",
    "spacing",
    "setColumnAlign",
    "hAlign",
    "vAlign",
    "_applyLayoutChange",
    "getColumnAlign",
    "setRowAlign",
    "getRowAlign",
    "getCellWidget",
    "getRowCount",
    "getColumnCount",
    "getCellAlign",
    "widget",
    "widgetProps",
    "getAlignY",
    "getAlignX",
    "setColumnFlex",
    "flex",
    "getColumnFlex",
    "setRowFlex",
    "getRowFlex",
    "rowFlex",
    "setColumnMaxWidth",
    "maxWidth",
    "getColumnMaxWidth",
    "Infinity",
    "setColumnWidth",
    "width",
    "getColumnWidth",
    "setColumnMinWidth",
    "minWidth",
    "getColumnMinWidth",
    "setRowMaxHeight",
    "maxHeight",
    "getRowMaxHeight",
    "setRowHeight",
    "height",
    "getRowHeight",
    "setRowMinHeight",
    "minHeight",
    "getRowMinHeight",
    "_getOuterSize",
    "hint",
    "getSizeHint",
    "hMargins",
    "getMarginLeft",
    "getMarginRight",
    "vMargins",
    "getMarginTop",
    "getMarginBottom",
    "outerSize",
    "_fixHeightsRowSpan",
    "rowHeights",
    "vSpacing",
    "getSpacingY",
    "widgetRow",
    "prefSpanHeight",
    "minSpanHeight",
    "rowFlexes",
    "j",
    "rowHeight",
    "min",
    "lang",
    "Object",
    "isEmpty",
    "rowIncrements",
    "Util",
    "computeFlexOffsets",
    "k",
    "offset",
    "totalSpacing",
    "availableHeight",
    "avgRowHeight",
    "floor",
    "usedHeight",
    "rowsNeedAddition",
    "currentHeight",
    "additionalRowHeight",
    "_fixWidthsColSpan",
    "colWidths",
    "hSpacing",
    "getSpacingX",
    "_getColSpans",
    "widgetColumn",
    "prefSpanWidth",
    "minSpanWidth",
    "colFlexes",
    "col",
    "colWidth",
    "colFlex",
    "getAllowGrowSpannedCellWidth",
    "colIncrements",
    "availableWidth",
    "avgColWidth",
    "usedWidth",
    "colsNeedAddition",
    "currentWidth",
    "additionalColWidth",
    "_getRowHeights",
    "widgetRowSpan",
    "cellSize",
    "_getColWidths",
    "widgetColSpan",
    "_getColumnFlexOffsets",
    "diff",
    "flexibles",
    "_getRowFlexOffsets",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "prefWidths",
    "colStretchOffsets",
    "prefHeights",
    "rowStretchOffsets",
    "left",
    "top",
    "spanWidth",
    "spanHeight",
    "cellHint",
    "marginTop",
    "marginLeft",
    "marginBottom",
    "marginRight",
    "cellWidth",
    "cellHeight",
    "cellAlign",
    "cellLeft",
    "computeHorizontalAlignOffset",
    "cellTop",
    "computeVerticalAlignOffset",
    "invalidateLayoutCache",
    "_computeSizeHint",
    "destruct",
    "Grid"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The grid layout manager arranges the items in a two dimensional\n * grid. Widgets can be placed into the grid's cells and may span multiple rows\n * and columns.\n *\n * *Features*\n *\n * * Flex values for rows and columns\n * * Minimal and maximal column and row sizes\n * * Manually setting of column and row sizes\n * * Horizontal and vertical alignment\n * * Horizontal and vertical spacing\n * * Column and row spans\n * * Auto-sizing\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\n *   widget should span, starting from the row specified in the <code>row</code>\n *   property. The cells in the spanned rows must be empty as well.\n * </li>\n * <li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\n *   widget should span, starting from the column specified in the <code>column</code>\n *   property. The cells in the spanned columns must be empty as well.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the grid layout.\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.Grid();\n * layout.setRowFlex(0, 1); // make row 0 flexible\n * layout.setColumnWidth(1, 200); // set with of column 1 to 200 pixel\n *\n * var container = new qx.ui.container.Composite(layout);\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 0});\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 1});\n * container.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#layout/grid.md'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Grid\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The horizontal spacing between grid cells.\n   *     Sets {@link #spacingX}.\n   * @param spacingY {Integer?0} The vertical spacing between grid cells.\n   *     Sets {@link #spacingY}.\n   */\n  construct : function(spacingX, spacingY)\n  {\n    this.base(arguments);\n\n    this.__rowData = [];\n    this.__colData = [];\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The horizontal spacing between grid cells.\n     */\n    spacingX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * The vertical spacing between grid cells.\n     */\n    spacingY :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * Allow growing of spanning cells' widths beyond the accumulated widths of the columns.\n     * The default behavior (init value false) is that the width of the spanning cell is\n     * determined by the accumulated width of the columns (plus spacing).\n     * Setting this property to true lets the cell width grow as needed to show\n     * the widget in the spanning cell, which also enlarges the width of the spanned columns.\n     */\n    allowGrowSpannedCellWidth :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {Array} 2D array of grid cell data */\n    __grid : null,\n    __rowData : null,\n    __colData : null,\n\n    __colSpans : null,\n    __rowSpans : null,\n    __maxRowIndex : null,\n    __maxColIndex : null,\n\n    /** @type {Array} cached row heights */\n    __rowHeights : null,\n\n    /** @type {Array} cached column widths */\n    __colWidths : null,\n\n\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        var layoutProperties = {\n          \"row\" : 1,\n          \"column\" : 1,\n          \"rowSpan\" : 1,\n          \"colSpan\" : 1\n        };\n        this.assert(layoutProperties[name] == 1, \"The property '\"+name+\"' is not supported by the Grid layout!\");\n        this.assertInteger(value);\n        this.assert(value >= 0, \"Value must be positive\");\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Rebuild the internal representation of the grid\n     */\n    __buildGrid : function()\n    {\n      var grid = [];\n      var colSpans = [];\n      var rowSpans = [];\n\n      var maxRowIndex = -1;\n      var maxColIndex = -1;\n\n      var children = this._getLayoutChildren();\n\n      for (var i=0,l=children.length; i<l; i++)\n      {\n        var child = children[i];\n        var props = child.getLayoutProperties();\n\n        var row = props.row;\n        var column = props.column;\n\n        props.colSpan = props.colSpan || 1;\n        props.rowSpan = props.rowSpan || 1;\n\n        // validate arguments\n        if (row == null || column == null) {\n          throw new Error(\n            \"The layout properties 'row' and 'column' of the child widget '\" +\n            child + \"' must be defined!\"\n          );\n        }\n\n        if (grid[row] && grid[row][column]) {\n          throw new Error(\n            \"Cannot add widget '\" + child + \"'!. \" +\n            \"There is already a widget '\" + grid[row][column] +\n            \"' in this cell (\" + row + \", \" + column + \") for '\" + this + \"'\"\n          );\n        }\n\n        for (var x=column; x<column+props.colSpan; x++)\n        {\n          for (var y=row; y<row+props.rowSpan; y++)\n          {\n            if (grid[y] == undefined) {\n               grid[y] = [];\n            }\n\n            grid[y][x] = child;\n\n            maxColIndex = Math.max(maxColIndex, x);\n            maxRowIndex = Math.max(maxRowIndex, y);\n          }\n        }\n\n        if (props.rowSpan > 1) {\n          rowSpans.push(child);\n        }\n\n        if (props.colSpan > 1) {\n          colSpans.push(child);\n        }\n      }\n\n      // make sure all columns are defined so that accessing the grid using\n      // this.__grid[column][row] will never raise an exception\n      for (var y=0; y<=maxRowIndex; y++) {\n        if (grid[y] == undefined) {\n           grid[y] = [];\n        }\n      }\n\n      this.__grid = grid;\n\n      this.__colSpans = colSpans;\n      this.__rowSpans = rowSpans;\n\n      this.__maxRowIndex = maxRowIndex;\n      this.__maxColIndex = maxColIndex;\n\n      this.__rowHeights = null;\n      this.__colWidths = null;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n\n    /**\n     * Stores data for a grid row\n     *\n     * @param row {Integer} The row index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setRowData : function(row, key, value)\n    {\n      var rowData = this.__rowData[row];\n\n      if (!rowData)\n      {\n        this.__rowData[row] = {};\n        this.__rowData[row][key] = value;\n      }\n      else\n      {\n        rowData[key] = value;\n      }\n    },\n\n\n    /**\n     * Stores data for a grid column\n     *\n     * @param column {Integer} The column index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setColumnData : function(column, key, value)\n    {\n      var colData = this.__colData[column];\n\n      if (!colData)\n      {\n        this.__colData[column] = {};\n        this.__colData[column][key] = value;\n      }\n      else\n      {\n        colData[key] = value;\n      }\n    },\n\n\n    /**\n     * Shortcut to set both horizontal and vertical spacing between grid cells\n     * to the same value.\n     *\n     * @param spacing {Integer} new horizontal and vertical spacing\n     * @return {qx.ui.layout.Grid} This object (for chaining support).\n     */\n    setSpacing : function(spacing)\n    {\n      this.setSpacingY(spacing);\n      this.setSpacingX(spacing);\n      return this;\n    },\n\n\n    /**\n     * Set the default cell alignment for a column. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param column {Integer} Column index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnAlign : function(column, hAlign, vAlign)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(column, \"Invalid parameter 'column'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setColumnData(column, \"hAlign\", hAlign);\n      this._setColumnData(column, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n\n    /**\n     * Get a map of the column's alignment.\n     *\n     * @param column {Integer} The column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal column alignment.\n     */\n    getColumnAlign : function(column)\n    {\n      var colData = this.__colData[column] || {};\n\n      return {\n        vAlign : colData.vAlign || \"top\",\n        hAlign : colData.hAlign || \"left\"\n      };\n    },\n\n\n    /**\n     * Set the default cell alignment for a row. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param row {Integer} Row index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowAlign : function(row, hAlign, vAlign)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(row, \"Invalid parameter 'row'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setRowData(row, \"hAlign\", hAlign);\n      this._setRowData(row, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n\n    /**\n     * Get a map of the row's alignment.\n     *\n     * @param row {Integer} The Row index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal row alignment.\n     */\n    getRowAlign : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n\n      return {\n        vAlign : rowData.vAlign || \"top\",\n        hAlign : rowData.hAlign || \"left\"\n      };\n    },\n\n\n    /**\n     * Get the widget located in the cell. If a the cell is empty or the widget\n     * has a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\n     * <code>null</code> is returned.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.Widget|null}The cell's widget. The value may be null.\n     */\n    getCellWidget : function(row, column)\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var row = this.__grid[row] || {};\n      return row[column] ||  null;\n    },\n\n\n    /**\n     * Get the number of rows in the grid layout.\n     *\n     * @return {Integer} The number of rows in the layout\n     */\n    getRowCount : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxRowIndex + 1;\n    },\n\n\n    /**\n     * Get the number of columns in the grid layout.\n     *\n     * @return {Integer} The number of columns in the layout\n     */\n    getColumnCount : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxColIndex + 1;\n    },\n\n\n    /**\n     * Get a map of the cell's alignment. For vertical alignment the row alignment\n     * takes precedence over the column alignment. For horizontal alignment it is\n     * the over way round. If an alignment is set on the cell widget using\n     * {@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\n     * always precedence over row or column alignment.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal cell alignment.\n     */\n    getCellAlign : function(row, column)\n    {\n      var vAlign = \"top\";\n      var hAlign = \"left\";\n\n      var rowData = this.__rowData[row];\n      var colData = this.__colData[column];\n\n      var widget = this.__grid[row][column];\n      if (widget)\n      {\n        var widgetProps = {\n          vAlign : widget.getAlignY(),\n          hAlign : widget.getAlignX()\n        };\n      }\n      else\n      {\n        widgetProps = {};\n      }\n\n      // compute vAlign\n      // precedence : widget -> row -> column\n      if (widgetProps.vAlign) {\n        vAlign = widgetProps.vAlign;\n      } else if (rowData && rowData.vAlign) {\n        vAlign = rowData.vAlign;\n      } else if (colData && colData.vAlign) {\n        vAlign = colData.vAlign;\n      }\n\n      // compute hAlign\n      // precedence : widget -> column -> row\n      if (widgetProps.hAlign) {\n        hAlign = widgetProps.hAlign;\n      } else if (colData && colData.hAlign) {\n        hAlign = colData.hAlign;\n      } else if (rowData && rowData.hAlign) {\n        hAlign = rowData.hAlign;\n      }\n\n      return {\n        vAlign : vAlign,\n        hAlign : hAlign\n      };\n    },\n\n\n    /**\n     * Set the flex value for a grid column.\n     * By default the column flex value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param flex {Integer} The column's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnFlex : function(column, flex)\n    {\n      this._setColumnData(column, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the flex value of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's flex value\n     */\n    getColumnFlex : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.flex !== undefined ? colData.flex : 0;\n    },\n\n\n    /**\n     * Set the flex value for a grid row.\n     * By default the row flex value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param flex {Integer} The row's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowFlex : function(row, flex)\n    {\n      this._setRowData(row, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the flex value of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's flex value\n     */\n    getRowFlex : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      var rowFlex = rowData.flex !== undefined ? rowData.flex : 0;\n      return rowFlex;\n    },\n\n\n    /**\n     * Set the maximum width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param maxWidth {Integer} The column's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMaxWidth : function(column, maxWidth)\n    {\n      this._setColumnData(column, \"maxWidth\", maxWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the maximum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's maximum width\n     */\n    getColumnMaxWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.maxWidth !== undefined ? colData.maxWidth : Infinity;\n    },\n\n\n    /**\n     * Set the preferred width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param width {Integer} The column's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnWidth : function(column, width)\n    {\n      this._setColumnData(column, \"width\", width);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the preferred width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's width\n     */\n    getColumnWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.width !== undefined ? colData.width : null;\n    },\n\n\n    /**\n     * Set the minimum width of a grid column.\n     * The default value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param minWidth {Integer} The column's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMinWidth : function(column, minWidth)\n    {\n      this._setColumnData(column, \"minWidth\", minWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the minimum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's minimum width\n     */\n    getColumnMinWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.minWidth || 0;\n    },\n\n\n    /**\n     * Set the maximum height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param maxHeight {Integer} The row's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMaxHeight : function(row, maxHeight)\n    {\n      this._setRowData(row, \"maxHeight\", maxHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the maximum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's maximum width\n     */\n    getRowMaxHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.maxHeight || Infinity;\n    },\n\n\n    /**\n     * Set the preferred height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param height {Integer} The row's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowHeight : function(row, height)\n    {\n      this._setRowData(row, \"height\", height);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the preferred height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's width\n     */\n    getRowHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.height !== undefined ? rowData.height : null;\n    },\n\n\n    /**\n     * Set the minimum height of a grid row.\n     * The default value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param minHeight {Integer} The row's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMinHeight : function(row, minHeight)\n    {\n      this._setRowData(row, \"minHeight\", minHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the minimum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's minimum width\n     */\n    getRowMinHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.minHeight || 0;\n    },\n\n\n    /**\n     * Computes the widget's size hint including the widget's margins\n     *\n     * @param widget {qx.ui.core.LayoutItem} The widget to get the size for\n     * @return {Map} a size hint map\n     */\n    _getOuterSize : function(widget)\n    {\n      var hint = widget.getSizeHint();\n      var hMargins = widget.getMarginLeft() + widget.getMarginRight();\n      var vMargins = widget.getMarginTop() + widget.getMarginBottom();\n\n      var outerSize = {\n        height: hint.height + vMargins,\n        width: hint.width + hMargins,\n        minHeight: hint.minHeight + vMargins,\n        minWidth: hint.minWidth + hMargins,\n        maxHeight: hint.maxHeight + vMargins,\n        maxWidth: hint.maxWidth + hMargins\n      };\n\n      return outerSize;\n    },\n\n\n    /**\n     * Check whether all row spans fit with their preferred height into the\n     * preferred row heights. If there is not enough space, the preferred\n     * row sizes are increased. The distribution respects the flex and max\n     * values of the rows.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The height array is modified in place.\n     *\n     * @param rowHeights {Map[]} The current row height array as computed by\n     *     {@link #_getRowHeights}.\n     */\n    _fixHeightsRowSpan : function(rowHeights)\n    {\n      var vSpacing = this.getSpacingY();\n\n      for (var i=0, l=this.__rowSpans.length; i<l; i++)\n      {\n        var widget = this.__rowSpans[i];\n\n        var hint = this._getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetRow = widgetProps.row;\n\n        var prefSpanHeight = vSpacing * (widgetProps.rowSpan - 1);\n        var minSpanHeight = prefSpanHeight;\n\n        var rowFlexes = {};\n\n        for (var j=0; j<widgetProps.rowSpan; j++)\n        {\n          var row = widgetProps.row+j;\n          var rowHeight = rowHeights[row];\n          var rowFlex = this.getRowFlex(row);\n\n          if (rowFlex > 0)\n          {\n            // compute flex array for the preferred height\n            rowFlexes[row] =\n            {\n              min : rowHeight.minHeight,\n              value : rowHeight.height,\n              max : rowHeight.maxHeight,\n              flex: rowFlex\n            };\n          }\n\n          prefSpanHeight += rowHeight.height;\n          minSpanHeight += rowHeight.minHeight;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred row sizes.\n        if (prefSpanHeight < hint.height)\n        {\n          if (!qx.lang.Object.isEmpty(rowFlexes)) {\n            var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n              rowFlexes, hint.height, prefSpanHeight\n            );\n\n            for (var k=0; k<widgetProps.rowSpan; k++)\n            {\n              var offset = rowIncrements[widgetRow+k] ? rowIncrements[widgetRow+k].offset : 0;\n              rowHeights[widgetRow+k].height += offset;\n            }\n          // row is too small and we have no flex value set\n          } else {\n            var totalSpacing = vSpacing * (widgetProps.rowSpan - 1);\n            var availableHeight = hint.height - totalSpacing;\n\n            // get the row height which every child would need to share the\n            // available hight equally\n            var avgRowHeight =\n              Math.floor(availableHeight / widgetProps.rowSpan);\n\n            // get the hight already used and the number of children which do\n            // not have at least that avg row height\n            var usedHeight = 0;\n            var rowsNeedAddition = 0;\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              var currentHeight = rowHeights[widgetRow + k].height;\n              usedHeight += currentHeight;\n              if (currentHeight < avgRowHeight) {\n                rowsNeedAddition++;\n              }\n            }\n\n            // the difference of available and used needs to be shared among\n            // those not having the min size\n            var additionalRowHeight =\n              Math.floor((availableHeight - usedHeight) / rowsNeedAddition);\n\n            // add the extra height to the too small children\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              if (rowHeights[widgetRow + k].height < avgRowHeight) {\n                rowHeights[widgetRow + k].height += additionalRowHeight;\n              }\n            }\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min row sizes.\n        if (minSpanHeight < hint.minHeight)\n        {\n          var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            rowFlexes, hint.minHeight, minSpanHeight\n          );\n\n          for (var j=0; j<widgetProps.rowSpan; j++)\n          {\n            var offset = rowIncrements[widgetRow+j] ? rowIncrements[widgetRow+j].offset : 0;\n            rowHeights[widgetRow+j].minHeight += offset;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Check whether all col spans fit with their preferred width into the\n     * preferred column widths. If there is not enough space the preferred\n     * column sizes are increased. The distribution respects the flex and max\n     * values of the columns.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The width array is modified in place.\n     *\n     * @param colWidths {Map[]} The current column width array as computed by\n     *     {@link #_getColWidths}.\n     */\n    _fixWidthsColSpan : function(colWidths)\n    {\n      var hSpacing = this.getSpacingX();\n      var colSpans = this._getColSpans();\n\n      for (var i=0, l=colSpans.length; i<l; i++)\n      {\n        var widget = colSpans[i];\n\n        var hint = this._getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetColumn = widgetProps.column;\n\n        var prefSpanWidth = hSpacing * (widgetProps.colSpan - 1);\n        var minSpanWidth = prefSpanWidth;\n\n        var colFlexes = {};\n\n        var offset;\n\n        for (var j=0; j<widgetProps.colSpan; j++)\n        {\n          var col = widgetProps.column+j;\n          var colWidth = colWidths[col];\n          var colFlex = this.getColumnFlex(col);\n\n          // compute flex array for the preferred width\n          if (colFlex > 0)\n          {\n            colFlexes[col] =\n            {\n              min : colWidth.minWidth,\n              value : colWidth.width,\n              max : colWidth.maxWidth,\n              flex: colFlex\n            };\n          }\n\n          prefSpanWidth += colWidth.width;\n          minSpanWidth += colWidth.minWidth;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred column sizes.\n        if (prefSpanWidth < hint.width)\n        {\n          // Do not adapt column widths to the width\n          // of the spanning cell if allowGrowSpannedCellWidth property\n          // is set to false\n          // See https://github.com/qooxdoo/qooxdoo/issues/9871\n          if (!this.getAllowGrowSpannedCellWidth() || !qx.lang.Object.isEmpty(colFlexes)) {\n            var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n              colFlexes, hint.width, prefSpanWidth\n            );\n\n            for (var j=0; j<widgetProps.colSpan; j++)\n            {\n              offset = colIncrements[widgetColumn+j] ? colIncrements[widgetColumn+j].offset : 0;\n              colWidths[widgetColumn+j].width += offset;\n            }\n          // col is too small and we have no flex value set\n          } else {\n            var totalSpacing = hSpacing * (widgetProps.colSpan - 1);\n            var availableWidth = hint.width - totalSpacing;\n\n            // get the col width which every child would need to share the\n            // available width equally\n            var avgColWidth = Math.floor(availableWidth / widgetProps.colSpan);\n\n            // get the width already used and the number of children which do\n            // not have at least that avg col width\n            var usedWidth = 0;\n            var colsNeedAddition = 0;\n            for (var k = 0; k < widgetProps.colSpan; k++) {\n              var currentWidth = colWidths[widgetColumn + k].width;\n              usedWidth += currentWidth;\n              if (currentWidth < avgColWidth) {\n                colsNeedAddition++;\n              }\n            }\n\n            // the difference of available and used needs to be shared among\n            // those not having the min size\n            var additionalColWidth = Math.floor((availableWidth - usedWidth) / colsNeedAddition);\n\n            // add the extra width to the too small children\n            for (var k = 0; k < widgetProps.colSpan; k++) {\n              if (colWidths[widgetColumn + k].width < avgColWidth) {\n                colWidths[widgetColumn + k].width += additionalColWidth;\n              }\n            }\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min column sizes.\n        if (minSpanWidth < hint.minWidth)\n        {\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            colFlexes, hint.minWidth, minSpanWidth\n          );\n\n          for (var j=0; j<widgetProps.colSpan; j++)\n          {\n            offset = colIncrements[widgetColumn+j] ? colIncrements[widgetColumn+j].offset : 0;\n            colWidths[widgetColumn+j].minWidth += offset;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Compute the min/pref/max row heights.\n     *\n     * @return {Map[]} An array containing height information for each row. The\n     *     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\n     *     <code>height</code>.\n     */\n    _getRowHeights : function()\n    {\n      if (this.__rowHeights != null) {\n        return this.__rowHeights;\n      }\n\n      var rowHeights = [];\n\n      var maxRowIndex = this.__maxRowIndex;\n      var maxColIndex = this.__maxColIndex;\n\n      for (var row=0; row<=maxRowIndex; row++)\n      {\n        var minHeight = 0;\n        var height = 0;\n        var maxHeight = 0;\n\n        for (var col=0; col<=maxColIndex; col++)\n        {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore rows with row spans at this place\n          // these rows will be taken into account later\n          var widgetRowSpan = widget.getLayoutProperties().rowSpan || 0;\n          if (widgetRowSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this._getOuterSize(widget);\n\n          if (this.getRowFlex(row) > 0) {\n            minHeight = Math.max(minHeight, cellSize.minHeight);\n          } else {\n            minHeight = Math.max(minHeight, cellSize.height);\n          }\n\n          height = Math.max(height, cellSize.height);\n        }\n\n        var minHeight = Math.max(minHeight, this.getRowMinHeight(row));\n        var maxHeight = this.getRowMaxHeight(row);\n\n        if (this.getRowHeight(row) !== null) {\n          var height = this.getRowHeight(row);\n        } else {\n          var height = Math.max(minHeight, Math.min(height, maxHeight));\n        }\n\n        rowHeights[row] = {\n          minHeight : minHeight,\n          height : height,\n          maxHeight : maxHeight\n        };\n      }\n\n      if (this.__rowSpans.length > 0) {\n        this._fixHeightsRowSpan(rowHeights);\n      }\n\n      this.__rowHeights = rowHeights;\n      return rowHeights;\n    },\n\n\n    /**\n     * Compute the min/pref/max column widths.\n     *\n     * @return {Map[]} An array containing width information for each column. The\n     *     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\n     *     <code>width</code>.\n     */\n    _getColWidths : function()\n    {\n      if (this.__colWidths != null) {\n        return this.__colWidths;\n      }\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        var width = 0;\n        var minWidth = 0;\n        var maxWidth = Infinity;\n\n        for (var row=0; row<=maxRowIndex; row++)\n        {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore columns with col spans at this place\n          // these columns will be taken into account later\n          var widgetColSpan = widget.getLayoutProperties().colSpan || 0;\n          if (widgetColSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this._getOuterSize(widget);\n\n          minWidth = Math.max(minWidth, cellSize.minWidth);\n\n          width = Math.max(width, cellSize.width);\n        }\n\n        minWidth = Math.max(minWidth, this.getColumnMinWidth(col));\n        maxWidth = this.getColumnMaxWidth(col);\n\n        if (this.getColumnWidth(col) !== null) {\n          var width = this.getColumnWidth(col);\n        } else {\n          var width = Math.max(minWidth, Math.min(width, maxWidth));\n        }\n\n        colWidths[col] = {\n          minWidth: minWidth,\n          width : width,\n          maxWidth : maxWidth\n        };\n      }\n\n      if (this._getColSpans().length > 0) {\n        this._fixWidthsColSpan(colWidths);\n      }\n\n      this.__colWidths = colWidths;\n      return colWidths;\n    },\n\n\n    /**\n     * Computes for each column by how many pixels it must grow or shrink, taking\n     * the column flex values and min/max widths into account.\n     *\n     * @param width {Integer} The grid width\n     * @return {Integer[]} Sparse array of offsets to add to each column width. If\n     *     an array entry is empty nothing should be added to the column.\n     */\n    _getColumnFlexOffsets : function(width)\n    {\n      var hint = this.getSizeHint();\n      var diff = width - hint.width;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var colWidths = this._getColWidths();\n      var flexibles = {};\n\n      for (var i=0, l=colWidths.length; i<l; i++)\n      {\n        var col = colWidths[i];\n        var colFlex = this.getColumnFlex(i);\n\n        if (\n          (colFlex <= 0) ||\n          (col.width == col.maxWidth && diff > 0) ||\n          (col.width == col.minWidth && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] ={\n          min : col.minWidth,\n          value : col.width,\n          max : col.maxWidth,\n          flex : colFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, width, hint.width);\n    },\n\n\n    /**\n     * Computes for each row by how many pixels it must grow or shrink, taking\n     * the row flex values and min/max heights into account.\n     *\n     * @param height {Integer} The grid height\n     * @return {Integer[]} Sparse array of offsets to add to each row height. If\n     *     an array entry is empty nothing should be added to the row.\n     */\n    _getRowFlexOffsets : function(height)\n    {\n      var hint = this.getSizeHint();\n      var diff = height - hint.height;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var rowHeights = this._getRowHeights();\n      var flexibles = {};\n\n      for (var i=0, l=rowHeights.length; i<l; i++)\n      {\n        var row = rowHeights[i];\n        var rowFlex = this.getRowFlex(i);\n\n        if (\n          (rowFlex <= 0) ||\n          (row.height == row.maxHeight && diff > 0) ||\n          (row.height == row.minHeight && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] = {\n          min : row.minHeight,\n          value : row.height,\n          max : row.maxHeight,\n          flex : rowFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, height, hint.height);\n    },\n\n\n    /**\n     * Returns the internal private __colSpans array in order\n     * have a protected getter which can be used other methods\n     * to make them overridable\n     *\n     * @return {Array} the __colSpans array\n     */\n    _getColSpans : function() {\n      return this.__colSpans;\n    },\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var Util = qx.ui.layout.Util;\n      var hSpacing = this.getSpacingX();\n      var vSpacing = this.getSpacingY();\n\n      // calculate column widths\n      var prefWidths = this._getColWidths();\n      var colStretchOffsets = this._getColumnFlexOffsets(availWidth);\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      var offset;\n\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        offset = colStretchOffsets[col] ? colStretchOffsets[col].offset : 0;\n        colWidths[col] = prefWidths[col].width + offset;\n      }\n\n      // calculate row heights\n      var prefHeights = this._getRowHeights();\n      var rowStretchOffsets = this._getRowFlexOffsets(availHeight);\n\n      var rowHeights = [];\n\n      for (var row=0; row<=maxRowIndex; row++)\n      {\n        offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;\n        rowHeights[row] = prefHeights[row].height + offset;\n      }\n\n      // do the layout\n      var left = 0;\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        var top = 0;\n\n        for (var row=0; row<=maxRowIndex; row++)\n        {\n          var widget = this.__grid[row][col];\n\n          // ignore empty cells\n          if (!widget)\n          {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          var widgetProps = widget.getLayoutProperties();\n\n          // ignore cells, which have cell spanning but are not the origin\n          // of the widget\n          if(widgetProps.row !== row || widgetProps.column !== col)\n          {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          // compute sizes width including cell spanning\n          var spanWidth = hSpacing * (widgetProps.colSpan - 1);\n          for (var i=0; i<widgetProps.colSpan; i++) {\n            spanWidth += colWidths[col+i];\n          }\n\n          var spanHeight = vSpacing * (widgetProps.rowSpan - 1);\n          for (var i=0; i<widgetProps.rowSpan; i++) {\n            spanHeight += rowHeights[row+i];\n          }\n\n          var cellHint = widget.getSizeHint();\n          var marginTop = widget.getMarginTop();\n          var marginLeft = widget.getMarginLeft();\n          var marginBottom = widget.getMarginBottom();\n          var marginRight = widget.getMarginRight();\n\n          var cellWidth = Math.max(cellHint.minWidth, Math.min(spanWidth-marginLeft-marginRight, cellHint.maxWidth));\n          var cellHeight = Math.max(cellHint.minHeight, Math.min(spanHeight-marginTop-marginBottom, cellHint.maxHeight));\n\n          var cellAlign = this.getCellAlign(row, col);\n          var cellLeft = left + Util.computeHorizontalAlignOffset(cellAlign.hAlign, cellWidth, spanWidth, marginLeft, marginRight);\n          var cellTop = top + Util.computeVerticalAlignOffset(cellAlign.vAlign, cellHeight, spanHeight, marginTop, marginBottom);\n\n          widget.renderLayout(\n            cellLeft + padding.left,\n            cellTop + padding.top,\n            cellWidth,\n            cellHeight\n          );\n\n          top += rowHeights[row] + vSpacing;\n        }\n\n        left += colWidths[col] + hSpacing;\n      }\n    },\n\n\n    // overridden\n    invalidateLayoutCache : function()\n    {\n      this.base(arguments);\n\n      this.__colWidths = null;\n      this.__rowHeights = null;\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      // calculate col widths\n      var colWidths = this._getColWidths();\n\n      var minWidth=0, width=0;\n\n      for (var i=0, l=colWidths.length; i<l; i++)\n      {\n        var col = colWidths[i];\n        if (this.getColumnFlex(i) > 0) {\n          minWidth += col.minWidth;\n        } else {\n          minWidth += col.width;\n        }\n\n        width += col.width;\n      }\n\n      // calculate row heights\n      var rowHeights = this._getRowHeights();\n\n      var minHeight=0, height=0;\n      for (var i=0, l=rowHeights.length; i<l; i++)\n      {\n        var row = rowHeights[i];\n\n        if (this.getRowFlex(i) > 0) {\n          minHeight += row.minHeight;\n        } else {\n          minHeight += row.height;\n        }\n\n        height += row.height;\n      }\n\n      var spacingX = this.getSpacingX() * (colWidths.length - 1);\n      var spacingY = this.getSpacingY() * (rowHeights.length - 1);\n\n      var hint = {\n        minWidth : minWidth + spacingX,\n        width : width + spacingX,\n        minHeight : minHeight + spacingY,\n        height : height + spacingY\n      };\n\n      return hint;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__grid = this.__rowData = this.__colData = this.__colSpans =\n      this.__rowSpans = this.__colWidths = this.__rowHeights = null;\n  }\n});\n"
  ]
}