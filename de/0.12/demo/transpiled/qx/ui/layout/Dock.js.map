{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Dock.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "separatorX",
    "separatorY",
    "setSpacingX",
    "setSpacingY",
    "setSeparatorX",
    "setSeparatorY",
    "properties",
    "sort",
    "check",
    "init",
    "apply",
    "nullable",
    "connectSeparators",
    "members",
    "__children",
    "__edges",
    "verifyLayoutProperty",
    "_applySort",
    "_invalidChildrenCache",
    "_applyLayoutChange",
    "__edgeMap",
    "north",
    "south",
    "west",
    "east",
    "center",
    "__alignMap",
    "__rebuildCache",
    "all",
    "_getLayoutChildren",
    "child",
    "length",
    "high",
    "low",
    "edge",
    "yfirst",
    "getSort",
    "xfirst",
    "i",
    "getLayoutProperties",
    "Error",
    "push",
    "result",
    "concat",
    "edges",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "util",
    "Util",
    "children",
    "flexibles",
    "hint",
    "props",
    "flex",
    "grow",
    "width",
    "height",
    "offset",
    "widths",
    "heights",
    "separatorWidths",
    "_getSeparatorWidths",
    "getSpacingX",
    "getSpacingY",
    "allocatedWidth",
    "allocatedHeight",
    "x",
    "y",
    "getSizeHint",
    "Math",
    "floor",
    "parseFloat",
    "minWidth",
    "maxWidth",
    "minHeight",
    "maxHeight",
    "getMarginTop",
    "getMarginBottom",
    "getMarginLeft",
    "getMarginRight",
    "min",
    "value",
    "max",
    "computeFlexOffsets",
    "_clearSeparators",
    "getSeparatorX",
    "getSeparatorY",
    "getConnectSeparators",
    "nextTop",
    "nextLeft",
    "left",
    "top",
    "used",
    "separatorLeft",
    "separatorTop",
    "separatorWidth",
    "separatorHeight",
    "marginTop",
    "marginBottom",
    "marginLeft",
    "marginRight",
    "alignMap",
    "computeVerticalAlignOffset",
    "computeHorizontalAlignOffset",
    "getAlignX",
    "_renderSeparator",
    "getAlignY",
    "decorationManager",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "separatorInstanceX",
    "resolve",
    "separatorInsetsX",
    "getInsets",
    "separatorWidthX",
    "right",
    "separatorInstanceY",
    "separatorInsetsY",
    "separatorWidthY",
    "bottom",
    "_computeSizeHint",
    "marginX",
    "marginY",
    "widthX",
    "minWidthX",
    "heightX",
    "minHeightX",
    "widthY",
    "minWidthY",
    "heightY",
    "minHeightY",
    "spacingSumX",
    "spacingSumY",
    "destruct",
    "Dock"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,EAAH,CAAMC,MAAN,CAAaC,QADxB;;AAKE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAG,mBAASC,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,EAAyCC,UAAzC,EACZ;AACE;;AAEA,UAAIH,QAAJ,EAAc;AACZ,aAAKI,WAAL,CAAiBJ,QAAjB;AACD;;AAED,UAAIC,QAAJ,EAAc;AACZ,aAAKI,WAAL,CAAiBJ,QAAjB;AACD;;AAED,UAAIC,UAAJ,EAAgB;AACd,aAAKI,aAAL,CAAmBJ,UAAnB;AACD;;AAED,UAAIC,UAAJ,EAAgB;AACd,aAAKI,aAAL,CAAmBJ,UAAnB;AACD;AACF,KApCH;;AA0CE;AACF;AACA;AACA;AACA;AAEEK,IAAAA,UAAU,EACV;AACE;AACJ;AACA;AACA;AACIC,MAAAA,IAAI,EACJ;AACEC,QAAAA,KAAK,EAAG,CAAE,MAAF,EAAU,GAAV,EAAe,GAAf,CADV;AAEEC,QAAAA,IAAI,EAAG,MAFT;AAGEC,QAAAA,KAAK,EA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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Docks children to one of the edges.\n *\n * *Features*\n *\n * * Percent width for left/right/center attached children\n * * Percent height for top/bottom/center attached children\n * * Minimum and maximum dimensions\n * * Prioritized growing/shrinking (flex)\n * * Auto sizing\n * * Margins and Spacings\n * * Alignment in orthogonal axis (e.g. alignX of north attached)\n * * Different sort options for children\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>edge</strong> <em>(String)</em>: The edge where the layout item\n *   should be docked. This may be one of <code>north</code>, <code>east</code>,\n *   <code>south</code>, <code>west</code> or <code>center</code>. (Required)</li>\n * <li><strong>width</strong> <em>(String)</em>: Defines a percent\n *   width for the item. The percent width,\n *   when specified, is used instead of the width defined by the size hint.\n *   This is only supported for children added to the north or south edge or\n *   are centered in the middle of the layout.\n *   The minimum and maximum width still takes care of the elements limitations.\n *   It has no influence on the layout's size hint. Percents are mainly useful for\n *   widgets which are sized by the outer hierarchy.\n * </li>\n * <li><strong>height</strong> <em>(String)</em>: Defines a percent\n *   height for the item. The percent height,\n *   when specified, is used instead of the height defined by the size hint.\n *   This is only supported for children added to the west or east edge or\n *   are centered in the middle of the layout.\n *   The minimum and maximum height still takes care of the elements limitations.\n *   It has no influence on the layout's size hint. Percents are mainly useful for\n *   widgets which are sized by the outer hierarchy.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.Dock();\n *\n * var w1 = new qx.ui.core.Widget();\n * var w2 = new qx.ui.core.Widget();\n * var w3 = new qx.ui.core.Widget();\n *\n * w1.setHeight(200);\n * w2.setWidth(150);\n *\n * var container = new qx.ui.container.Composite(layout);\n * container.add(w1, {edge:\"north\"});\n * container.add(w2, {edge:\"west\"});\n * container.add(w3, {edge:\"center\"});\n * </pre>\n *\n * *Detailed Description*\n *\n * Using this layout, items may be \"docked\" to a specific side\n * of the available space. Each displayed item reduces the available space\n * for the following children. Priorities depend on the position of\n * the child in the internal children list.\n *\n * *External Documentation*\n *\n * <a href='https://qooxdoo.org/documentation/#/desktop/layout/dock.md'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Dock\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The horizontal spacing. Sets {@link #spacingX}.\n   * @param spacingY {Integer?0} The vertical spacing. Sets {@link #spacingY}.\n   * @param separatorX {String|qx.ui.decoration.IDecorator} Separator to render between columns\n   * @param separatorY {String|qx.ui.decoration.IDecorator} Separator to render between rows\n   */\n  construct : function(spacingX, spacingY, separatorX, separatorY)\n  {\n    this.base(arguments);\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n\n    if (separatorX) {\n      this.setSeparatorX(separatorX);\n    }\n\n    if (separatorY) {\n      this.setSeparatorY(separatorY);\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The way the widgets should be displayed (in conjunction with their\n     * position in the childrens array).\n     */\n    sort :\n    {\n      check : [ \"auto\", \"y\", \"x\" ],\n      init : \"auto\",\n      apply : \"_applySort\"\n    },\n\n\n    /** Separator lines to use between the horizontal objects */\n    separatorX :\n    {\n      check : \"Decorator\",\n      nullable : true,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** Separator lines to use between the vertical objects */\n    separatorY :\n    {\n      check : \"Decorator\",\n      nullable : true,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * Whether separators should be collapsed so when a spacing is\n     * configured the line go over into each other\n     */\n    connectSeparators :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** Horizontal spacing between two children */\n    spacingX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** Vertical spacing between two children */\n    spacingY :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __children : null,\n    __edges : null,\n\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        this.assertInArray(name, [\"flex\", \"edge\", \"height\", \"width\"], \"The property '\"+name+\"' is not supported by the Dock layout!\");\n\n        if (name === \"edge\")\n        {\n          this.assertInArray(value, [\"north\", \"south\", \"west\", \"east\", \"center\"]);\n        }\n        else if (name === \"flex\")\n        {\n          this.assertNumber(value);\n          this.assert(value >= 0);\n        } else {\n          this.assertMatch(value, qx.ui.layout.Util.PERCENT_VALUE);\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    // property apply\n    _applySort : function()\n    {\n      // easiest way is to invalidate the cache\n      this._invalidChildrenCache = true;\n\n      // call normal layout change\n      this._applyLayoutChange();\n    },\n\n\n    /**\n     * @type {Map} Maps edge IDs to numeric values\n     *\n     * @lint ignoreReferenceField(__edgeMap)\n     */\n    __edgeMap :\n    {\n      north : 1,\n      south : 2,\n      west : 3,\n      east : 4,\n      center : 5\n    },\n\n\n    /**\n     * @type {Map} Maps edges to align values\n     *\n     * @lint ignoreReferenceField(__alignMap)\n     */\n    __alignMap :\n    {\n      1 : \"top\",\n      2 : \"bottom\",\n      3 : \"left\",\n      4 : \"right\"\n    },\n\n\n    /**\n     * Rebuilds cache for sorted children list.\n     *\n     */\n    __rebuildCache : function()\n    {\n      var all = this._getLayoutChildren();\n      var child, center;\n      var length = all.length;\n\n      var high = [];\n      var low = [];\n      var edge = [];\n\n      var yfirst = this.getSort() === \"y\";\n      var xfirst = this.getSort() === \"x\";\n\n      for (var i=0; i<length; i++)\n      {\n        child = all[i];\n        edge = child.getLayoutProperties().edge;\n\n        if (edge === \"center\")\n        {\n          if (center) {\n            throw new Error(\"It is not allowed to have more than one child aligned to 'center'!\");\n          }\n\n          center = child;\n        }\n        else if (xfirst || yfirst)\n        {\n          if (edge === \"north\" || edge === \"south\") {\n            yfirst ? high.push(child) : low.push(child);\n          } else if (edge === \"west\" || edge === \"east\") {\n            yfirst ? low.push(child) : high.push(child);\n          }\n        }\n        else\n        {\n          high.push(child);\n        }\n      }\n\n      // Combine sorted children list\n      var result = high.concat(low);\n      if (center) {\n        result.push(center);\n      }\n\n      this.__children = result;\n\n      // Cache edges for faster access\n      var edges=[];\n      for (var i=0; i<length; i++)\n      {\n        edge = result[i].getLayoutProperties().edge;\n        edges[i] = this.__edgeMap[edge] || 5;\n      }\n\n      this.__edges = edges;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      var util = qx.ui.layout.Util;\n      var children = this.__children;\n      var edges = this.__edges;\n      var length = children.length;\n      var flexibles, child, hint, props, flex, grow, width, height, offset;\n\n      var widths = [];\n      var heights = [];\n\n      var separatorWidths = this._getSeparatorWidths();\n      var spacingX = this.getSpacingX();\n      var spacingY = this.getSpacingY();\n\n\n\n\n      // **************************************\n      //   Caching children data\n      // **************************************\n\n      var allocatedWidth = -spacingX;\n      var allocatedHeight = -spacingY;\n\n      if (separatorWidths.x) {\n        allocatedWidth -= separatorWidths.x + spacingX;\n      }\n\n      if (separatorWidths.y) {\n        allocatedHeight -= separatorWidths.y + spacingY;\n      }\n\n      for (var i=0; i<length; i++)\n      {\n        child = children[i];\n        props = child.getLayoutProperties();\n        hint = child.getSizeHint();\n\n        width = hint.width;\n        height = hint.height;\n\n        if (props.width != null)\n        {\n          width = Math.floor(availWidth * parseFloat(props.width) / 100);\n          if (width < hint.minWidth) {\n            width = hint.minWidth;\n          } else if (width > hint.maxWidth) {\n            width = hint.maxWidth;\n          }\n        }\n\n        if (props.height != null)\n        {\n          height = Math.floor(availHeight * parseFloat(props.height) / 100);\n          if (height < hint.minHeight) {\n            height = hint.minHeight;\n          } else if (height > hint.maxHeight) {\n            height = hint.maxHeight;\n          }\n        }\n\n        widths[i] = width;\n        heights[i] = height;\n\n        // Update allocated width\n        switch(edges[i])\n        {\n          // north+south\n          case 1:\n          case 2:\n            allocatedHeight += height + child.getMarginTop() + child.getMarginBottom() + spacingY;\n            if (separatorWidths.y) {\n              allocatedHeight += separatorWidths.y + spacingY;\n            }\n            break;\n\n          // west+east\n          case 3:\n          case 4:\n            allocatedWidth += width + child.getMarginLeft() + child.getMarginRight() + spacingX;\n            if (separatorWidths.x) {\n              allocatedWidth += separatorWidths.x + spacingX;\n            }\n            break;\n\n          // center\n          default:\n            allocatedWidth += width + child.getMarginLeft() + child.getMarginRight() + spacingX;\n            allocatedHeight += height + child.getMarginTop() + child.getMarginBottom() + spacingY;\n\n            if (separatorWidths.x) {\n              allocatedWidth += separatorWidths.x + spacingX;\n            }\n\n            if (separatorWidths.y) {\n              allocatedHeight += separatorWidths.y + spacingY;\n            }\n        }\n      }\n\n\n\n\n\n      // **************************************\n      //   Horizontal flex support\n      // **************************************\n\n      if (allocatedWidth != availWidth)\n      {\n        flexibles = {};\n        grow = allocatedWidth < availWidth;\n\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n\n          switch(edges[i])\n          {\n            case 3:\n            case 4:\n            case 5:\n              flex = child.getLayoutProperties().flex;\n\n              // Default flex for centered children is '1'\n              if (flex == null && edges[i] == 5) {\n                flex = 1;\n              }\n\n              if (flex > 0)\n              {\n                hint = child.getSizeHint();\n\n                flexibles[i] =\n                {\n                  min : hint.minWidth,\n                  value : widths[i],\n                  max : hint.maxWidth,\n                  flex : flex\n                };\n              }\n          }\n        }\n\n        var result = util.computeFlexOffsets(flexibles, availWidth, allocatedWidth);\n        for (var i in result)\n        {\n          offset = result[i].offset;\n\n          widths[i] += offset;\n          allocatedWidth += offset;\n        }\n      }\n\n\n\n\n      // **************************************\n      //   Vertical flex support\n      // **************************************\n\n      // Process height for flex stretching/shrinking\n      if (allocatedHeight != availHeight)\n      {\n        flexibles = {};\n        grow = allocatedHeight < availHeight;\n\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n\n          switch(edges[i])\n          {\n            case 1:\n            case 2:\n            case 5:\n              flex = child.getLayoutProperties().flex;\n\n              // Default flex for centered children is '1'\n              if (flex == null && edges[i] == 5) {\n                flex = 1;\n              }\n\n              if (flex > 0)\n              {\n                hint = child.getSizeHint();\n\n                flexibles[i] =\n                {\n                  min : hint.minHeight,\n                  value : heights[i],\n                  max : hint.maxHeight,\n                  flex : flex\n                };\n              }\n          }\n        }\n\n        var result = util.computeFlexOffsets(flexibles, availHeight, allocatedHeight);\n        for (var i in result)\n        {\n          offset = result[i].offset;\n\n          heights[i] += offset;\n          allocatedHeight += offset;\n        }\n      }\n\n\n\n\n\n      // **************************************\n      //   Layout children\n      // **************************************\n\n      // Pre configure separators\n      this._clearSeparators();\n\n      // Prepare loop\n      var separatorX=this.getSeparatorX(), separatorY=this.getSeparatorY();\n      var connectSeparators=this.getConnectSeparators();\n      var nextTop=0, nextLeft=0;\n      var left, top, width, height, used, edge;\n      var separatorLeft, separatorTop, separatorWidth, separatorHeight;\n      var marginTop, marginBottom, marginLeft, marginRight;\n      var alignMap = this.__alignMap;\n\n      for (var i=0; i<length; i++)\n      {\n        // Cache child data\n        child = children[i];\n        edge = edges[i];\n        hint = child.getSizeHint();\n\n        // Cache child margins\n        marginTop = child.getMarginTop();\n        marginBottom = child.getMarginBottom();\n        marginLeft = child.getMarginLeft();\n        marginRight = child.getMarginRight();\n\n        // Calculate child layout\n        switch(edge)\n        {\n          // north + south\n          case 1:\n          case 2:\n            // Full available width\n            width = availWidth - marginLeft - marginRight;\n\n            // Limit width to min/max\n            if (width < hint.minWidth) {\n              width = hint.minWidth;\n            } else if (width > hint.maxWidth) {\n              width = hint.maxWidth;\n            }\n\n            // Child preferred height\n            height = heights[i];\n\n            // Compute position\n            top = nextTop + util.computeVerticalAlignOffset(alignMap[edge], height, availHeight, marginTop, marginBottom);\n            left = nextLeft + util.computeHorizontalAlignOffset(child.getAlignX()||\"left\", width, availWidth, marginLeft, marginRight);\n\n            // Render the separator\n            if (separatorWidths.y)\n            {\n              if (edge == 1) {\n                separatorTop = nextTop + height + marginTop + spacingY + marginBottom;\n              } else {\n                separatorTop = nextTop + availHeight - height - marginTop - spacingY - marginBottom - separatorWidths.y;\n              }\n\n              separatorLeft = left;\n              separatorWidth = availWidth;\n\n              if (connectSeparators && separatorLeft > 0)\n              {\n                separatorLeft -= spacingX + marginLeft;\n                separatorWidth += (spacingX) * 2;\n              }\n              else\n              {\n                separatorLeft -= marginLeft;\n              }\n\n              this._renderSeparator(separatorY, {\n                left : separatorLeft + padding.left,\n                top : separatorTop + padding.top,\n                width : separatorWidth,\n                height : separatorWidths.y\n              });\n            }\n\n            // Update available height\n            used = height + marginTop + marginBottom + spacingY;\n            if (separatorWidths.y) {\n              used += separatorWidths.y + spacingY;\n            }\n\n            availHeight -= used;\n\n            // Update coordinates, for next child\n            if (edge == 1) {\n              nextTop += used;\n            }\n\n            break;\n\n\n          // west + east\n          case 3:\n          case 4:\n            // Full available height\n            height = availHeight - marginTop - marginBottom;\n\n            // Limit height to min/max\n            if (height < hint.minHeight) {\n              height = hint.minHeight;\n            } else if (height > hint.maxHeight) {\n              height = hint.maxHeight;\n            }\n\n            // Child preferred width\n            width = widths[i];\n\n            // Compute position\n            left = nextLeft + util.computeHorizontalAlignOffset(alignMap[edge], width, availWidth, marginLeft, marginRight);\n            top = nextTop + util.computeVerticalAlignOffset(child.getAlignY()||\"top\", height, availHeight, marginTop, marginBottom);\n\n            // Render the separator\n            if (separatorWidths.x)\n            {\n              if (edge == 3) {\n                separatorLeft = nextLeft + width + marginLeft + spacingX + marginRight;\n              } else {\n                separatorLeft = nextLeft + availWidth - width - marginLeft - spacingX - marginRight - separatorWidths.x;\n              }\n\n              separatorTop = top;\n              separatorHeight = availHeight;\n\n              if (connectSeparators && separatorTop > 0)\n              {\n                separatorTop -= spacingY + marginTop;\n                separatorHeight += (spacingY) * 2;\n              }\n              else\n              {\n                separatorTop -= marginTop;\n              }\n\n              this._renderSeparator(separatorX, {\n                left : separatorLeft + padding.left,\n                top : separatorTop + padding.top,\n                width : separatorWidths.x,\n                height : separatorHeight\n              });\n            }\n\n            // Update available height\n            used = width + marginLeft + marginRight + spacingX;\n            if (separatorWidths.x) {\n              used += separatorWidths.x + spacingX;\n            }\n            availWidth -= used;\n\n            // Update coordinates, for next child\n            if (edge == 3) {\n              nextLeft += used;\n            }\n\n            break;\n\n\n          // center\n          default:\n            // Calculated width/height\n            width = availWidth - marginLeft - marginRight;\n            height = availHeight - marginTop - marginBottom;\n\n            // Limit width to min/max\n            if (width < hint.minWidth) {\n              width = hint.minWidth;\n            } else if (width > hint.maxWidth) {\n              width = hint.maxWidth;\n            }\n\n            // Limit height to min/max\n            if (height < hint.minHeight) {\n              height = hint.minHeight;\n            } else if (height > hint.maxHeight) {\n              height = hint.maxHeight;\n            }\n\n            // Compute coordinates (respect margins and alignments for both axis)\n            left = nextLeft + util.computeHorizontalAlignOffset(child.getAlignX()||\"left\", width, availWidth, marginLeft, marginRight);\n            top = nextTop + util.computeVerticalAlignOffset(child.getAlignY()||\"top\", height, availHeight, marginTop, marginBottom);\n        }\n\n        // Apply layout\n        child.renderLayout(left + padding.left, top + padding.top, width, height);\n      }\n    },\n\n\n    /**\n     * Computes the dimensions each separator on both the <code>x</code> and\n     * <code>y</code> axis needs.\n     *\n     * @return {Map} Map with the keys <code>x</code> and\n     *   <code>y</code>\n     */\n    _getSeparatorWidths : function()\n    {\n      var separatorX=this.getSeparatorX(), separatorY=this.getSeparatorY();\n      if (separatorX || separatorY) {\n        var decorationManager = qx.theme.manager.Decoration.getInstance();\n      }\n\n      if (separatorX)\n      {\n        var separatorInstanceX = decorationManager.resolve(separatorX);\n        var separatorInsetsX = separatorInstanceX.getInsets();\n        var separatorWidthX = separatorInsetsX.left + separatorInsetsX.right;\n      }\n\n      if (separatorY)\n      {\n        var separatorInstanceY = decorationManager.resolve(separatorY);\n        var separatorInsetsY = separatorInstanceY.getInsets();\n        var separatorWidthY = separatorInsetsY.top + separatorInsetsY.bottom;\n      }\n\n      return {\n        x : separatorWidthX || 0,\n        y : separatorWidthY || 0\n      };\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      var children = this.__children;\n      var edges = this.__edges;\n\n      var length = children.length;\n      var hint, child;\n      var marginX, marginY;\n\n      var widthX=0, minWidthX=0;\n      var heightX=0, minHeightX=0;\n      var widthY=0, minWidthY=0;\n      var heightY=0, minHeightY=0;\n\n      var separatorWidths = this._getSeparatorWidths();\n      var spacingX=this.getSpacingX(), spacingY=this.getSpacingY();\n      var spacingSumX=-spacingX, spacingSumY=-spacingY;\n\n      if (separatorWidths.x) {\n        spacingSumX -= separatorWidths.x + spacingX;\n      }\n\n      if (separatorWidths.y) {\n        spacingSumY -= separatorWidths.y + spacingY;\n      }\n\n      // Detect children sizes\n      for (var i=0; i<length; i++)\n      {\n        child = children[i];\n        hint = child.getSizeHint();\n\n        // Pre-cache margin sums\n        marginX = child.getMarginLeft() + child.getMarginRight();\n        marginY = child.getMarginTop() + child.getMarginBottom();\n\n        // Ok, this part is a bit complicated :)\n        switch(edges[i])\n        {\n          case 1:\n          case 2:\n            // Find the maximum width used by these fully stretched items\n            // The recommended width used by these must add the currently\n            // occupied width by the orthogonal ordered children.\n            widthY = Math.max(widthY, hint.width + widthX + marginX);\n            minWidthY = Math.max(minWidthY, hint.minWidth + minWidthX + marginX);\n\n            // Add the needed heights of this widget\n            heightY += hint.height + marginY;\n            minHeightY += hint.minHeight + marginY;\n\n            // Add spacing\n            spacingSumY += spacingY;\n            if (separatorWidths.y) {\n              spacingSumY += separatorWidths.y + spacingY;\n            }\n\n            break;\n\n          case 3:\n          case 4:\n            // Find the maximum height used by these fully stretched items\n            // The recommended height used by these must add the currently\n            // occupied height by the orthogonal ordered children.\n            heightX = Math.max(heightX, hint.height + heightY + marginY);\n            minHeightX = Math.max(minHeightX, hint.minHeight + minHeightY + marginY);\n\n            // Add the needed widths of this widget\n            widthX += hint.width + marginX;\n            minWidthX += hint.minWidth + marginX;\n\n            // Add spacing\n            spacingSumX += spacingX;\n            if (separatorWidths.x) {\n              spacingSumX += separatorWidths.x + spacingX;\n            }\n\n            break;\n\n          default:\n            // A centered widget must be added to both sums as\n            // it stretches into the remaining available space.\n            widthX += hint.width + marginX;\n            minWidthX += hint.minWidth + marginX;\n\n            heightY += hint.height + marginY;\n            minHeightY += hint.minHeight + marginY;\n\n            // Add spacing\n            spacingSumX += spacingX;\n            if (separatorWidths.x) {\n              spacingSumX += separatorWidths.x + spacingX;\n            }\n\n            spacingSumY += spacingY;\n            if (separatorWidths.y) {\n              spacingSumY += separatorWidths.y + spacingY;\n            }\n        }\n      }\n\n      var minWidth = Math.max(minWidthX, minWidthY) + spacingSumX;\n      var width = Math.max(widthX, widthY) + spacingSumX;\n      var minHeight = Math.max(minHeightX, minHeightY) + spacingSumY;\n      var height = Math.max(heightX, heightY) + spacingSumY;\n\n      // Return hint\n      return {\n        minWidth : minWidth,\n        width : width,\n        minHeight : minHeight,\n        height : height\n      };\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__edges = this.__children = null;\n  }\n});\n"
  ]
}