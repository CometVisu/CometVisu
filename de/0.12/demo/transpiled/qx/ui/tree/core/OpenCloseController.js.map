{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/OpenCloseController.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "tree",
    "rootModel",
    "openProperty",
    "getOpenProperty",
    "_tree",
    "_lids",
    "sync",
    "node",
    "hasProperty",
    "constructor",
    "getChildren",
    "forEach",
    "get",
    "openNode",
    "closeNode",
    "bind",
    "lid",
    "addListener",
    "_onOpen",
    "push",
    "_onClose",
    "_onChangeBubble",
    "members",
    "ev",
    "getData",
    "set",
    "index",
    "item",
    "isOpen",
    "bubble",
    "name",
    "replace",
    "getItem",
    "isNodeOpen",
    "refresh",
    "destruct",
    "data",
    "removeListenerById",
    "ui",
    "OpenCloseController"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Cajus Pollmeier\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Cajus Pollmeier\n     * Derrell Lipman\n\n************************************************************************ */\n\n/**\n * Because of the virtual nature of the VirtualTree, and the fact that\n * rendering occurs asynchronously, it is not a simple matter to bind a\n * property in the model that will open or close branches in the\n * tree. Instead, this controller listens to both the model and the tree, and\n * synchronizes the openness of branches in the tree.\n * \n * To use this controller, simply instantiate it with the requisite\n * constructor arguments.\n */\nqx.Class.define(\"qx.ui.tree.core.OpenCloseController\",\n{\n  extend: qx.core.Object,\n  \n  /**\n   * @param tree {qx.ui.tree.VirtualTree}\n   *   The tree whose branch open or closed state is to be synchronized to a\n   *   model property.\n   * \n   * @param rootModel {qx.data.Array}\n   *   The tree root model wherein a property is to be synchronized to the\n   *   tree branches' open or closed states\n   */\n  construct: function(tree, rootModel)\n  {\n    var             openProperty = tree.getOpenProperty();\n\n    this.base(arguments);\n    \n    // Save the tree and initialize storage of listener IDs\n    this._tree = tree;\n    this._lids = [];\n    \n    // Sync tree nodes\n    var sync = function(node) {\n      if (qx.Class.hasProperty(node.constructor, \"children\")) {\n        node.getChildren().forEach(sync);\n      }\n      \n      if (qx.Class.hasProperty(node.constructor, openProperty)) {\n        if (node.get(openProperty)) {\n          tree.openNode(node);\n        }\n        else {\n          tree.closeNode(node);\n        }\n      }\n    }.bind(this);\n    sync(rootModel);\n    \n    // Wire change listeners\n    var lid = tree.addListener(\"open\", this._onOpen, this);\n    this._lids.push([tree, lid]);\n    lid = tree.addListener(\"close\", this._onClose, this);\n    this._lids.push([tree, lid]);\n    lid = rootModel.addListener(\"changeBubble\", this._onChangeBubble, this);\n    this._lids.push([rootModel, lid]);\n  },\n  \n  members:\n  {\n    /** The tree which is synced to the model */\n    _tree: null,\n\n    /** Listener IDs that we manage */\n    _lids: null,\n    \n    // event listener for \"open\" on the tree\n    _onOpen: function(ev)\n    {\n      ev.getData().set(this._tree.getOpenProperty(), true);\n    },\n    \n    // event listener for \"close\" on the tree\n    _onClose: function(ev)\n    {\n      ev.getData().set(this._tree.getOpenProperty(), false);\n    },\n    \n    // event listener for model changes\n    _onChangeBubble: function(ev)\n    {\n      var index;\n      var item;\n      var isOpen;\n      var bubble = ev.getData();\n\n      // Extract the index of the current item\n      index = bubble.name.replace(/.*\\[([0-9]+)\\]$/, \"$1\");\n\n      // Retrieve that indexed array item if it's an array; otherwise the item itself\n      item = bubble.item.getItem ? bubble.item.getItem(index) : bubble.item;\n\n      // If this item isn't being deleted and has an open property...\n      if (item && qx.Class.hasProperty(item.constructor, this._tree.getOpenProperty())) {\n        // ... then find out if this branch is open\n        isOpen = item.get(this._tree.getOpenProperty());\n\n        // Open or close the tree branch as necessary\n        if (isOpen && !this._tree.isNodeOpen(item)) {\n          this._tree.openNode(item);\n        }\n        else if (! isOpen && this._tree.isNodeOpen(item)) {\n          this._tree.closeNode(item);\n        }\n      }\n\n      // Rebuild the internal lookup table\n      this._tree.refresh();\n    }\n  },\n  \n  destruct: function()\n  {\n    this._tree = null;\n    this._lids.forEach(function(data) {\n      data[0].removeListenerById(data[1]);\n    });\n  }\n});\n"
  ]
}