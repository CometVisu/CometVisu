{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/command/Group.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "_cmds",
    "properties",
    "active",
    "init",
    "check",
    "apply",
    "members",
    "_applyActive",
    "value",
    "cmdkey",
    "setActive",
    "add",
    "key",
    "command",
    "has",
    "get",
    "cmd",
    "remove",
    "destruct",
    "ui",
    "Group"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;AAIEC,IAAAA,SAAS,EAAG,qBACZ;AACE;AACA,WAAKC,KAAL,GAAa,EAAb;AACD,KARH;AAWEC,IAAAA,UAAU,EACV;AACE;AACJ;AACA;AACIC,MAAAA,MAAM,EACN;AACEC,QAAAA,IAAI,EAAG,IADT;AAEEC,QAAAA,KAAK,EAAG,SAFV;AAGEC,QAAAA,KAAK,EAAG;AAHV;AALF,KAZF;AAyBEC,IAAAA,OAAO,EACP;AACEN,MAAAA,KAAK,EAAG,IADV;AAIE;AACAO,MAAAA,YAAY,EAAG,sBAASC,KAAT,EACf;AACE,aAAI,IAAIC,MAAR,IAAkB,KAAKT,KAAvB,EAA6B;AAC3B,eAAKA,KAAL,CAAWS,MAAX,EAAmBC,SAAnB,CAA6BF,KAA7B;AACD;AACF,OAVH;;AAaE;AACJ;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIG,MAAAA,GAAG,EAAG,aAASC,GAAT,EAAcC,OAAd,EACN;AAYE,YAAI,KAAKC,GAAL,CAASF,GAAT,CAAJ,EAAkB;AAIhB,iBAAO,KAAP;AACD;;AAED,aAAKZ,KAAL,CAAWY,GAAX,IAAkBC,OAAlB;AAEA,eAAO,IAAP;AACD,OAnDH;;AAsDE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIE,MAAAA,GAAG,EAAG,aAASH,GAAT,EACN;AAKE,YAAII,GAAG,GAAG,KAAKhB,KAAL,CAAWY,GAAX,CAAV;;AACA,YAAI,CAACI,GAAL,EAAU;AAMR,iBAAO,IAAP;AACD;;AAED,eAAOA,GAAP;AACD,OA9EH;;AAiFE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIF,MAAAA,GAAG,EAAG,aAASF,GAAT,EACN;AAKE,eAAO,CAAC,CAAE,KAAKZ,KAAL,CAAWY,GAAX,CAAV;AACD,OA/FH;;AAkGE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIK,MAAAA,MAAM,EAAG,gBAASL,GAAT,EACT;AAKE,YAAII,GAAG,GAAG,KAAKhB,KAAL,CAAWY,GAAX,CAAV;;AACA,YAAI,CAACI,GAAL,EAAU;AAMR,iBAAO,IAAP;AACD;;AAED,eAAO,KAAKhB,KAAL,CAAWY,GAAX,CAAP;AAEA,eAAOI,GAAP;AACD;AA5HH,KA1BF;AA0JEE,IAAAA,QAAQ,EAAG,oBACX;AACE,WAAKlB,KAAL,GAAa,IAAb;AACD;AA7JH,GADA;AAbAV,EAAAA,EAAE,CAAC6B,EAAH,CAAMN,OAAN,CAAcO,KAAd,CAAoB3B,aAApB,GAAoCA,aAApC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   Authors:\n     * Mustafa Sak (msak)\n\n************************************************************************ */\n\n/**\n * Registrar for commands to be able to group them.\n */\nqx.Class.define(\"qx.ui.command.Group\",\n{\n  extend : qx.core.Object,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n    this._cmds = {};\n  },\n\n\n  properties :\n  {\n    /**\n     * Activates or deactivates all commands in group.\n     */\n    active :\n    {\n      init : true,\n      check : \"Boolean\",\n      apply : \"_applyActive\"\n    }\n  },\n\n\n  members :\n  {\n    _cmds : null,\n\n\n    // property apply\n    _applyActive : function(value)\n    {\n      for(var cmdkey in this._cmds){\n        this._cmds[cmdkey].setActive(value);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Adds a command with a key to the group.\n     *\n     * @param key {String} Key to be able to addresses the command\n     * @param command {qx.ui.command.Command} Command\n     *\n     * @return {Boolean} <code>false</code> if key already added before\n     */\n    add : function(key, command)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArgumentsCount(arguments, 2, 2,\n          \"Given parameter count mismatch! Please provide a key as string \" +\n          \"and a command intsance.\"\n        );\n        this.assertString(key, \"Key parameter must be a string.\");\n        this.assertInstance(command, qx.ui.command.Command,\n          \"Given command is not an instance of qx.ui.command.Command\"\n        );\n      }\n\n      if (this.has(key)){\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\"Command with key: '\" + key +  \"' already exists!\");\n        }\n        return false;\n      }\n\n      this._cmds[key] = command;\n\n      return true;\n    },\n\n\n    /**\n     * Returns a command by key.\n     *\n     * @param key {String} Key which addresses the command\n     *\n     * @return {qx.ui.command.Command | null} Corresponding command instance or null\n     */\n    get : function(key)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertString(key, \"Key parameter must be a string.\");\n      }\n\n      var cmd = this._cmds[key];\n      if (!cmd) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\"The key: '\" + key + \"' was not added before. Please use \" +\n            \"'add()' method to add the command.\");\n        }\n\n        return null;\n      }\n\n      return cmd;\n    },\n\n\n    /**\n     * Returns true if a command is registered by key.\n     *\n     * @param key {String} Key which addresses the command\n     *\n     * @return {Boolean} Returns <code>true</code> if a command is registered by a key\n     */\n    has : function(key)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertString(key, \"Key parameter must be a string.\");\n      }\n\n      return !!(this._cmds[key]);\n    },\n\n\n    /**\n     * Removes a command by key from group. Returns the command.\n     *\n     * @param key {String} Key which addresses the command\n     *\n     * @return {qx.ui.command.Command | null} Corresponding command instance or null\n     */\n    remove : function(key)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertString(key, \"Key parameter must be a string.\");\n      }\n\n      var cmd = this._cmds[key];\n      if (!cmd) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.debug(\"The key: '\" + key + \"' was not added before. Please use \" +\n            \"'add()' method to add the command.\");\n        }\n\n        return null;\n      }\n\n      delete this._cmds[key];\n\n      return cmd;\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._cmds = null;\n  }\n});\n"
  ]
}