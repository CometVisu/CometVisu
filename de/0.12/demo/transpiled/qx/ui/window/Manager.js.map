{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/window/Manager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "window",
    "IWindowManager",
    "members",
    "__desktop",
    "setDesktop",
    "desktop",
    "updateStack",
    "queue",
    "Widget",
    "remove",
    "getDesktop",
    "changeActiveWindow",
    "active",
    "oldActive",
    "bringToFront",
    "setActive",
    "resetActive",
    "_minZIndex",
    "add",
    "syncWidget",
    "forceUnblock",
    "windows",
    "getWindows",
    "zIndex",
    "zIndexOnTop",
    "length",
    "zIndexModal",
    "i",
    "l",
    "win",
    "isVisible",
    "isModal",
    "setZIndex",
    "blockContent",
    "isAlwaysOnTop",
    "isActive",
    "getZIndex",
    "setActiveWindow",
    "removed",
    "lang",
    "Array",
    "push",
    "sendToBack",
    "unshift",
    "destruct",
    "_disposeObjects",
    "Manager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The default window manager implementation\n */\nqx.Class.define(\"qx.ui.window.Manager\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.window.IWindowManager,\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __desktop : null,\n\n\n    // interface implementation\n    setDesktop : function(desktop)\n    {\n      this.__desktop = desktop;\n        \n      if(desktop) {\n        this.updateStack();\n      }\n      else {\n         // the window manager should be removed\n         // from the widget queue if the desktop\n         // was set to null\n         qx.ui.core.queue.Widget.remove(this);\n      }\n    },\n\n\n    /**\n     * Returns the connected desktop\n     *\n     * @return {qx.ui.window.IDesktop} The desktop\n     */\n    getDesktop : function() {\n      return this.__desktop;\n    },\n\n\n    // interface implementation\n    changeActiveWindow : function(active, oldActive) {\n      if (active) {\n        this.bringToFront(active);\n        active.setActive(true);\n      }\n      if (oldActive) {\n        oldActive.resetActive();\n      }\n    },\n\n\n    /** @type {Integer} Minimum zIndex to start with for windows */\n    _minZIndex : 1e5,\n\n\n    // interface implementation\n    updateStack : function()\n    {\n      // we use the widget queue to do the sorting one before the queues are\n      // flushed. The queue will call \"syncWidget\"\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * This method is called during the flush of the\n     * {@link qx.ui.core.queue.Widget widget queue}.\n     */\n    syncWidget : function()\n    {\n      this.__desktop.forceUnblock();\n\n      var windows = this.__desktop.getWindows();\n      // z-index for all three window kinds\n      var zIndex = this._minZIndex;\n      var zIndexOnTop = zIndex + windows.length * 2;\n      var zIndexModal = zIndex + windows.length * 4;\n      // marker if there is an active window\n      var active = null;\n\n      for (var i = 0, l = windows.length; i < l; i++)\n      {\n        var win = windows[i];\n        // ignore invisible windows\n        if (!win.isVisible()) {\n          continue;\n        }\n        // take the first window as active window\n        active = active || win;\n\n        // We use only every second z index to easily insert a blocker between\n        // two windows\n        // Modal Windows stays on top of AlwaysOnTop Windows, which stays on\n        // top of Normal Windows.\n        if (win.isModal()) {\n          win.setZIndex(zIndexModal);\n          this.__desktop.blockContent(zIndexModal - 1);\n          zIndexModal +=2;\n          //just activate it if it's modal\n          active = win;\n\n        } else if (win.isAlwaysOnTop()) {\n          win.setZIndex(zIndexOnTop);\n          zIndexOnTop +=2;\n\n        } else {\n          win.setZIndex(zIndex);\n          zIndex +=2;\n        }\n\n        // store the active window\n        if (!active.isModal() &&\n            win.isActive() ||\n            win.getZIndex() > active.getZIndex()) {\n          active = win;\n        }\n      }\n\n      //set active window or null otherwise\n      this.__desktop.setActiveWindow(active);\n    },\n\n\n    // interface implementation\n    bringToFront : function(win)\n    {\n      var windows = this.__desktop.getWindows();\n\n      var removed = qx.lang.Array.remove(windows, win);\n      if (removed)\n      {\n        windows.push(win);\n        this.updateStack();\n      }\n    },\n\n\n    // interface implementation\n    sendToBack : function(win)\n    {\n      var windows = this.__desktop.getWindows();\n\n      var removed = qx.lang.Array.remove(windows, win);\n      if (removed)\n      {\n        windows.unshift(win);\n        this.updateStack();\n      }\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this._disposeObjects(\"__desktop\");\n  }\n});\n"
  ]
}