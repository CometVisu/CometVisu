{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/form/renderer/AbstractRenderer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "renderer",
    "IFormRenderer",
    "construct",
    "_labels",
    "locale",
    "Manager",
    "getInstance",
    "addListener",
    "_onChangeLocale",
    "_names",
    "_form",
    "_render",
    "_onFormChange",
    "properties",
    "labelSuffix",
    "check",
    "init",
    "event",
    "nullable",
    "requiredSuffix",
    "members",
    "groups",
    "getGroups",
    "i",
    "length",
    "group",
    "addItems",
    "items",
    "labels",
    "title",
    "options",
    "headerOptions",
    "buttons",
    "getButtons",
    "buttonOptions",
    "getButtonOptions",
    "addButton",
    "_removeAll",
    "dispose",
    "_connectVisibility",
    "item",
    "label",
    "bind",
    "e",
    "entry",
    "name",
    "translate",
    "newText",
    "_createLabelText",
    "setValue",
    "getRequired",
    "getRequiredSuffix",
    "getLabelSuffix",
    "names",
    "Error",
    "button",
    "destruct",
    "removeListener",
    "AbstractRenderer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Abstract renderer for {@link qx.ui.form.Form}. This abstract renderer should\n * be the superclass of all form renderer. It takes the form, which is\n * supplied as constructor parameter and configures itself. So if you need to\n * set some additional information on your renderer before adding the widgets,\n * be sure to do that before calling this.base(arguments, form).\n */\nqx.Class.define(\"qx.ui.form.renderer.AbstractRenderer\",\n{\n  type : \"abstract\",\n  extend : qx.ui.core.Widget,\n  implement : qx.ui.form.renderer.IFormRenderer,\n\n  /**\n   * @param form {qx.ui.form.Form} The form to render.\n   */\n  construct : function(form)\n  {\n    this.base(arguments);\n\n    this._labels = [];\n\n    // translation support\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\", this._onChangeLocale, this\n      );\n      this._names = [];\n    }\n    this._form = form;\n    this._render();\n\n    form.addListener(\"change\", this._onFormChange, this);\n  },\n\n  properties :\n  {\n    /**\n     * A string that is appended to the label if it is not empty.\n     * Defaults to \" :\"\n     */\n    labelSuffix :\n    {\n      check : \"String\",\n      init : \" :\",\n      event : \"changeLabelSuffix\",\n      nullable : true\n    },\n\n    /**\n     * A string that is appended to the label and the label suffix if the corresponding\n     * form field is mandatory. Defaults to space plus a red asterisk.\n     */\n    requiredSuffix :\n    {\n      check : \"String\",\n      init : \" <span style='color:red'>*</span> \",\n      event : \"changeRequiredSuffix\",\n      nullable : false\n    }\n  },\n\n\n  members :\n  {\n    _names : null,\n    _form : null,\n    _labels : null,\n\n\n    /**\n     * Renders the form: adds the items and buttons.\n     */\n    _render : function() {\n      // add the groups\n      var groups = this._form.getGroups();\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        this.addItems(\n          group.items, group.labels, group.title, group.options, group.headerOptions\n        );\n      }\n\n      // add the buttons\n      var buttons = this._form.getButtons();\n      var buttonOptions = this._form.getButtonOptions();\n      for (var i = 0; i < buttons.length; i++) {\n        this.addButton(buttons[i], buttonOptions[i]);\n      }\n    },\n\n\n    /**\n     * Handler responsible for updating the rendered widget as soon as the\n     * form changes.\n     */\n    _onFormChange : function() {\n      this._removeAll();\n      // remove all created labels\n      for (var i=0; i < this._labels.length; i++) {\n        this._labels[i].dispose();\n      }\n      this._labels = [];\n\n      this._render();\n    },\n\n\n    /**\n     * Helper to bind the item's visibility to the label's visibility.\n     * @param item {qx.ui.core.Widget} The form element.\n     * @param label {qx.ui.basic.Label} The label for the form element.\n     */\n    _connectVisibility : function(item, label) {\n      // map the items visibility to the label\n      item.bind(\"visibility\", label, \"visibility\");\n    },\n\n\n    /**\n     * Locale change event handler\n     *\n     * @signature function(e)\n     * @param e {Event} the change event\n     */\n    _onChangeLocale : qx.core.Environment.select(\"qx.dynlocale\",\n    {\n      \"true\" : function(e) {\n        for (var i = 0; i < this._names.length; i++) {\n          var entry = this._names[i];\n          if (entry.name && entry.name.translate) {\n            entry.name = entry.name.translate();\n          }\n          var newText = this._createLabelText(entry.name, entry.item);\n          entry.label.setValue(newText);\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Creates the label text for the given form item.\n     *\n     * @param name {String} The content of the label without the\n     *   trailing * and :\n     * @param item {qx.ui.form.IForm} The item, which has the required state.\n     * @return {String} The text for the given item.\n     */\n    _createLabelText : function(name, item)\n    {\n      var requiredSuffix = \"\";\n      if (item.getRequired()) {\n        requiredSuffix = this.getRequiredSuffix();\n      }\n\n      // Create the label. Append a suffix only if there's text to display.\n      var labelSuffix = name.length > 0 || item.getRequired() ? this.getLabelSuffix() : \"\";\n      return name + requiredSuffix + labelSuffix;\n    },\n\n\n    // interface implementation\n    addItems : function(items, names, title) {\n      throw new Error(\"Abstract method call\");\n    },\n\n\n    // interface implementation\n    addButton : function(button) {\n      throw new Error(\"Abstract method call\");\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n    this._names = null;\n\n    this._form.removeListener(\"change\", this._onFormChange, this);\n    this._form = null;\n  }\n});\n"
  ]
}