{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/form/IForm.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "events",
    "members",
    "setEnabled",
    "enabled",
    "arguments",
    "length",
    "getEnabled",
    "setRequired",
    "required",
    "getRequired",
    "setValid",
    "valid",
    "getValid",
    "setInvalidMessage",
    "message",
    "getInvalidMessage",
    "setRequiredInvalidMessage",
    "getRequiredInvalidMessage",
    "ui",
    "form",
    "IForm"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAIAH,EAAAA,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,kBAApB,EACA;AACE;;;;;AAMAC,IAAAA,MAAM,EACN;AACE;AACA,uBAAkB,oBAFpB;;AAIE;AACA,qBAAgB,oBALlB;;AAOE;AACA,8BAAyB,oBAR3B;;AAUE;AACA,wBAAmB;AAXrB,KARF;;AAuBE;;;;;AAMAC,IAAAA,OAAO,EACP;AACE;;;;;;AAMA;;;;;AAKAC,MAAAA,UAAU,EAAG,oBAASC,OAAT,EAAkB;AAC7B,eAAOC,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OAdH;;AAiBE;;;;;AAKAC,MAAAA,UAAU,EAAG,sBAAW,CAAE,CAtB5B;;AAyBE;;;;;;AAMA;;;;;AAKAC,MAAAA,WAAW,EAAG,qBAASC,QAAT,EAAmB;AAC/B,eAAOJ,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OAtCH;;AAyCE;;;;;AAKAI,MAAAA,WAAW,EAAG,uBAAW,CAAE,CA9C7B;;AAiDE;;;;;;AAMA;;;;;AAKAC,MAAAA,QAAQ,EAAG,kBAASC,KAAT,EAAgB;AACzB,eAAOP,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OA9DH;;AAiEE;;;;;AAKAO,MAAAA,QAAQ,EAAG,oBAAW,CAAE,CAtE1B;;AAyEE;;;;;;AAMA;;;;;AAKAC,MAAAA,iBAAiB,EAAG,2BAASC,OAAT,EAAkB;AACpC,eAAOV,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OAtFH;;AAyFE;;;;;AAKAU,MAAAA,iBAAiB,EAAG,6BAAW,CAAE,CA9FnC;;AAkGE;;;;;;AAMA;;;;;AAKAC,MAAAA,yBAAyB,EAAG,mCAASF,OAAT,EAAkB;AAC5C,eAAOV,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OA/GH;;AAkHE;;;;;AAKAY,MAAAA,yBAAyB,EAAG,qCAAW,CAAE;AAvH3C;AA9BF,GADA;AAtBAvB,EAAAA,EAAE,CAACwB,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiBvB,aAAjB,GAAiCA,aAAjC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Form interface for all form widgets. It includes the API for enabled,\n * required and valid states.\n */\nqx.Interface.define(\"qx.ui.form.IForm\",\n{\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fired when the enabled state was modified */\n    \"changeEnabled\" : \"qx.event.type.Data\",\n\n    /** Fired when the valid state was modified */\n    \"changeValid\" : \"qx.event.type.Data\",\n\n    /** Fired when the invalidMessage was modified */\n    \"changeInvalidMessage\" : \"qx.event.type.Data\",\n\n    /** Fired when the required was modified */\n    \"changeRequired\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      ENABLED PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set the enabled state of the widget.\n     *\n     * @param enabled {Boolean} The enabled state.\n     */\n    setEnabled : function(enabled) {\n      return arguments.length == 1;\n    },\n\n\n    /**\n     * Return the current set enabled state.\n     *\n     * @return {Boolean} If the widget is enabled.\n     */\n    getEnabled : function() {},\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUIRED PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the required state of a widget.\n     *\n     * @param required {Boolean} A flag signaling if the widget is required.\n     */\n    setRequired : function(required) {\n      return arguments.length == 1;\n    },\n\n\n    /**\n     * Return the current required state of the widget.\n     *\n     * @return {Boolean} True, if the widget is required.\n     */\n    getRequired : function() {},\n\n\n    /*\n    ---------------------------------------------------------------------------\n      VALID PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the valid state of the widget.\n     *\n     * @param valid {Boolean} The valid state of the widget.\n     */\n    setValid : function(valid) {\n      return arguments.length == 1;\n    },\n\n\n    /**\n     * Returns the valid state of the widget.\n     *\n     * @return {Boolean} If the state of the widget is valid.\n     */\n    getValid : function() {},\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INVALID MESSAGE PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the invalid message of the widget.\n     *\n     * @param message {String} The invalid message.\n     */\n    setInvalidMessage : function(message) {\n      return arguments.length == 1;\n    },\n\n\n    /**\n     * Returns the invalid message of the widget.\n     *\n     * @return {String} The current set message.\n     */\n    getInvalidMessage : function() {},\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUIRED INVALID MESSAGE PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the invalid message if required of the widget.\n     *\n     * @param message {String} The invalid message.\n     */\n    setRequiredInvalidMessage : function(message) {\n      return arguments.length == 1;\n    },\n\n\n    /**\n     * Returns the invalid message if required of the widget.\n     *\n     * @return {String} The current set message.\n     */\n    getRequiredInvalidMessage : function() {}\n\n  }\n});\n"
  ]
}