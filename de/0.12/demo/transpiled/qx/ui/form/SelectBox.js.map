{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/form/SelectBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "AbstractSelectBox",
    "implement",
    "core",
    "ISingleSelection",
    "IModelSelection",
    "IField",
    "include",
    "MSingleSelectionHandling",
    "MModelSelection",
    "construct",
    "_createChildControl",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "_onTap",
    "_onKeyInput",
    "__onChangeSelection",
    "properties",
    "appearance",
    "refine",
    "init",
    "rich",
    "check",
    "apply",
    "members",
    "__preSelectedItem",
    "_applyRich",
    "value",
    "oldValue",
    "getChildControl",
    "setRich",
    "_defaultFormat",
    "item",
    "isRich",
    "getLabel",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "Spacer",
    "_add",
    "flex",
    "basic",
    "Atom",
    "setCenter",
    "setAnonymous",
    "Image",
    "_forwardStates",
    "focused",
    "_getItems",
    "getChildrenContainer",
    "getChildren",
    "_isAllowEmptySelection",
    "getSelectionMode",
    "e",
    "listItem",
    "getData",
    "list",
    "getSelection",
    "setSelection",
    "resetSelection",
    "__updateIcon",
    "__updateLabel",
    "atom",
    "icon",
    "getIcon",
    "resetIcon",
    "setIcon",
    "label",
    "format",
    "getFormat",
    "call",
    "translate",
    "resetLabel",
    "setLabel",
    "isEnabled",
    "getTarget",
    "hasState",
    "removeState",
    "addState",
    "toggle",
    "_onKeyPress",
    "iden",
    "getKeyIdentifier",
    "clone",
    "setTarget",
    "_list",
    "setBubbles",
    "dispatchEvent",
    "_onListPointerDown",
    "_onListChangeSelection",
    "current",
    "old",
    "getOldData",
    "length",
    "removeListener",
    "popup",
    "context",
    "getSelectionContext",
    "isVisible",
    "_onPopupChangeVisibility",
    "hasChildren",
    "distance",
    "getLayoutLocation",
    "viewPortHeight",
    "bom",
    "Viewport",
    "getHeight",
    "toTop",
    "top",
    "toBottom",
    "bottom",
    "availableHeigth",
    "maxListHeight",
    "getMaxListHeight",
    "setMaxHeight",
    "destruct",
    "SelectBox"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Sebastian Werner (wpbasti)\n     * Jonathan Weiß (jonathan_rass)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * A form widget which allows a single selection. Looks somewhat like\n * a normal button, but opens a list of items to select when tapping on it.\n *\n * Keep in mind that the SelectBox widget has always a selected item (due to the\n * single selection mode). Right after adding the first item a <code>changeSelection</code>\n * event is fired.\n *\n * <pre class='javascript'>\n * var selectBox = new qx.ui.form.SelectBox();\n *\n * selectBox.addListener(\"changeSelection\", function(e) {\n *   // ...\n * });\n *\n * // now the 'changeSelection' event is fired\n * selectBox.add(new qx.ui.form.ListItem(\"Item 1\"));\n * </pre>\n *\n * @childControl spacer {qx.ui.core.Spacer} flexible spacer widget\n * @childControl atom {qx.ui.basic.Atom} shows the text and icon of the content\n * @childControl arrow {qx.ui.basic.Image} shows the arrow to open the popup\n */\nqx.Class.define(\"qx.ui.form.SelectBox\",\n{\n  extend : qx.ui.form.AbstractSelectBox,\n  implement : [\n    qx.ui.core.ISingleSelection,\n    qx.ui.form.IModelSelection,\n    qx.ui.form.IField\n  ],\n  include : [qx.ui.core.MSingleSelectionHandling, qx.ui.form.MModelSelection],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this._createChildControl(\"atom\");\n    this._createChildControl(\"spacer\");\n    this._createChildControl(\"arrow\");\n\n    // Register listener\n    this.addListener(\"pointerover\", this._onPointerOver, this);\n    this.addListener(\"pointerout\", this._onPointerOut, this);\n    this.addListener(\"tap\", this._onTap, this);\n\n    this.addListener(\"keyinput\", this._onKeyInput, this);\n    this.addListener(\"changeSelection\", this.__onChangeSelection, this);\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"selectbox\"\n    },\n    \n    rich: {\n      init: false,\n      check: \"Boolean\",\n      apply: \"_applyRich\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    /** @type {qx.ui.form.ListItem} instance */\n    __preSelectedItem : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    _applyRich: function(value, oldValue) {\n      this.getChildControl(\"atom\").setRich(value);\n    },\n    \n    // overridden\n    _defaultFormat: function(item) {\n      if (item) {\n        if (typeof item.isRich == \"function\" && item.isRich()) {\n          this.setRich(true);\n        }\n        return item.getLabel();\n      }\n      return null;\n    },\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"spacer\":\n          control = new qx.ui.core.Spacer();\n          this._add(control, {flex: 1});\n          break;\n\n        case \"atom\":\n          control = new qx.ui.basic.Atom(\" \");\n          control.setCenter(false);\n          control.setAnonymous(true);\n\n          this._add(control, {flex:1});\n          break;\n\n        case \"arrow\":\n          control = new qx.ui.basic.Image();\n          control.setAnonymous(true);\n\n          this._add(control);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates : {\n      focused : true\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS FOR SELECTION API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Returns the list items for the selection.\n     *\n     * @return {qx.ui.form.ListItem[]} List items to select.\n     */\n    _getItems : function() {\n      return this.getChildrenContainer().getChildren();\n    },\n\n    /**\n     * Returns if the selection could be empty or not.\n     *\n     * @return {Boolean} <code>true</code> If selection could be empty,\n     *    <code>false</code> otherwise.\n     */\n    _isAllowEmptySelection: function() {\n      return this.getChildrenContainer().getSelectionMode() !== \"one\";\n    },\n\n    /**\n     * Event handler for <code>changeSelection</code>.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    __onChangeSelection : function(e)\n    {\n      var listItem = e.getData()[0];\n\n      var list = this.getChildControl(\"list\");\n      if (list.getSelection()[0] != listItem) {\n        if(listItem) {\n          list.setSelection([listItem]);\n        } else {\n          list.resetSelection();\n        }\n      }\n\n      this.__updateIcon();\n      this.__updateLabel();\n    },\n\n\n    /**\n     * Sets the icon inside the list to match the selected ListItem.\n     */\n    __updateIcon : function()\n    {\n      var listItem = this.getChildControl(\"list\").getSelection()[0];\n      var atom = this.getChildControl(\"atom\");\n      var icon = listItem ? listItem.getIcon() : \"\";\n      icon == null ? atom.resetIcon() : atom.setIcon(icon);\n    },\n\n    /**\n     * Sets the label inside the list to match the selected ListItem.\n     */\n    __updateLabel : function()\n    {\n      var listItem = this.getChildControl(\"list\").getSelection()[0];\n      var atom = this.getChildControl(\"atom\");\n      var label = listItem ? listItem.getLabel() : \"\";\n      var format = this.getFormat();\n      if (format != null && listItem) {\n        label = format.call(this, listItem);\n      }\n\n      // check for translation\n      if (label && label.translate) {\n        label = label.translate();\n      }\n      label == null ? atom.resetLabel() : atom.setLabel(label);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Listener method for \"pointerover\" event\n     * <ul>\n     * <li>Adds state \"hovered\"</li>\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOver : function(e)\n    {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      if (this.hasState(\"abandoned\"))\n      {\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n      }\n\n      this.addState(\"hovered\");\n    },\n\n\n    /**\n     * Listener method for \"pointerout\" event\n     * <ul>\n     * <li>Removes \"hovered\" state</li>\n     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOut : function(e)\n    {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      this.removeState(\"hovered\");\n\n      if (this.hasState(\"pressed\"))\n      {\n        this.removeState(\"pressed\");\n        this.addState(\"abandoned\");\n      }\n    },\n\n\n    /**\n     * Toggles the popup's visibility.\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onTap : function(e) {\n      this.toggle();\n    },\n\n\n    // overridden\n    _onKeyPress : function(e)\n    {\n      var iden = e.getKeyIdentifier();\n      if(iden == \"Enter\" || iden == \"Space\")\n      {\n        // Apply pre-selected item (translate quick selection to real selection)\n        if (this.__preSelectedItem)\n        {\n          this.setSelection([this.__preSelectedItem]);\n          this.__preSelectedItem = null;\n        }\n\n        this.toggle();\n      }\n      else\n      {\n        this.base(arguments, e);\n      }\n    },\n\n    /**\n     * Forwards key event to list widget.\n     *\n     * @param e {qx.event.type.KeyInput} Key event\n     */\n    _onKeyInput : function(e)\n    {\n      // clone the event and re-calibrate the event\n      var clone = e.clone();\n      clone.setTarget(this._list);\n      clone.setBubbles(false);\n\n      // forward it to the list\n      this.getChildControl(\"list\").dispatchEvent(clone);\n    },\n\n\n    // overridden\n    _onListPointerDown : function(e)\n    {\n      // Apply pre-selected item (translate quick selection to real selection)\n      if (this.__preSelectedItem)\n      {\n        this.setSelection([this.__preSelectedItem]);\n        this.__preSelectedItem = null;\n      }\n    },\n\n\n    // overridden\n    _onListChangeSelection : function(e)\n    {\n      var current = e.getData();\n      var old = e.getOldData();\n\n      // Remove old listeners for icon and label changes.\n      if (old && old.length > 0)\n      {\n        old[0].removeListener(\"changeIcon\", this.__updateIcon, this);\n        old[0].removeListener(\"changeLabel\", this.__updateLabel, this);\n      }\n\n\n      if (current.length > 0)\n      {\n        // Ignore quick context (e.g. pointerover)\n        // and configure the new value when closing the popup afterwards\n        var popup = this.getChildControl(\"popup\");\n        var list = this.getChildControl(\"list\");\n        var context = list.getSelectionContext();\n\n        if (popup.isVisible() && (context == \"quick\" || context == \"key\"))\n        {\n          this.__preSelectedItem = current[0];\n        }\n        else\n        {\n          this.setSelection([current[0]]);\n          this.__preSelectedItem = null;\n        }\n\n        // Add listeners for icon and label changes\n        current[0].addListener(\"changeIcon\", this.__updateIcon, this);\n        current[0].addListener(\"changeLabel\", this.__updateLabel, this);\n      }\n      else\n      {\n        this.resetSelection();\n      }\n    },\n\n    // overridden\n    _onPopupChangeVisibility : function(e)\n    {\n      this.base(arguments, e);\n\n      // Synchronize the current selection to the list selection\n      // when the popup is closed. The list selection may be invalid\n      // because of the quick selection handling which is not\n      // directly applied to the selectbox\n      var popup = this.getChildControl(\"popup\");\n      if (!popup.isVisible())\n      {\n        var list = this.getChildControl(\"list\");\n\n        // check if the list has any children before selecting\n        if (list.hasChildren()) {\n          list.setSelection(this.getSelection());\n        }\n      } else {\n        // ensure that the list is never bigger that the max list height and\n        // the available space in the viewport\n        var distance = popup.getLayoutLocation(this);\n        var viewPortHeight = qx.bom.Viewport.getHeight();\n        // distance to the bottom and top borders of the viewport\n        var toTop = distance.top;\n        var toBottom = viewPortHeight - distance.bottom;\n        var availableHeigth = toTop > toBottom ? toTop : toBottom;\n\n        var maxListHeight = this.getMaxListHeight();\n        var list = this.getChildControl(\"list\");\n        if (maxListHeight == null || maxListHeight > availableHeigth) {\n          list.setMaxHeight(availableHeigth);\n        } else if (maxListHeight < availableHeigth) {\n          list.setMaxHeight(maxListHeight);\n        }\n      }\n    }\n\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n\n  destruct : function() {\n    this.__preSelectedItem = null;\n  }\n});\n"
  ]
}