{
  "className": "qx.ui.core.MPlacement",
  "packageName": "qx.ui.core",
  "name": "MPlacement",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 581,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Martin Wittemann (martinwittemann)\n Christian Hagendorn (chris_schmidt)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Methods to place popup like widgets to other widgets, points,\n pointer event coordinates, etc.</p>"
        }
      ]
    }
  },
  "type": "mixin",
  "statics": {
    "__visible": {
      "location": {
        "start": {
          "line": 29,
          "column": 4
        },
        "end": {
          "line": 29,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__direction": {
      "location": {
        "start": {
          "line": 30,
          "column": 4
        },
        "end": {
          "line": 30,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "setVisibleElement": {
      "location": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 41,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the always visible element. If an element is set, the\n {@link #moveTo} method takes care of every move and tries not to cover\n the given element with a movable widget like a popup or context menu.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.ui.core.Widget} The widget which should always be visible.",
            "paramName": "elem",
            "description": " The widget which should always be visible.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getVisibleElement": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the given always visible element. See {@link #setVisibleElement}\n for more details.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The given widget.",
            "type": "qx.ui.core.Widget|null",
            "description": " The given widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setMoveDirection": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the move direction for an element which hides always visible element.\n The value has only an effect when the {@link #setVisibleElement} is set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "direction {String} The direction <code>left</code> or <code>top</code>.",
            "paramName": "direction",
            "description": " The direction <code>left</code> or <code>top</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMoveDirection": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the move direction for an element which hides always visible element.\n See {@link #setMoveDirection} for more details.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The move direction.",
            "type": "String",
            "description": " The move direction."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "position": {
      "location": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 118,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Position of the aligned object in relation to the opener.\n Please note than changes to this property are only applied\n when re-aligning the widget.\n The first part of the value is the edge to attach to. The second\n part the alignment of the orthogonal edge after the widget\n has been attached.\n The default value \"bottom-left\" for example means that the\n widget should be shown directly under the given target and\n then should be aligned to be left edge:\n </p>\n<pre>\n +--------+\n | target |\n +--------+\n +-------------+\n |   widget    |\n +-------------+\n </pre>"
          }
        ]
      },
      "name": "position",
      "propertyType": "new",
      "themeable": true,
      "init": "bottom-left",
      "possibleValues": [
        "top-left",
        "top-center",
        "top-right",
        "bottom-left",
        "bottom-center",
        "bottom-right",
        "left-top",
        "left-middle",
        "left-bottom",
        "right-top",
        "right-middle",
        "right-bottom"
      ],
      "defaultValue": "bottom-left"
    },
    "placeMethod": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget should be placed relative to an other widget or to\n the pointer.</p>"
          }
        ]
      },
      "name": "placeMethod",
      "propertyType": "new",
      "themeable": true,
      "init": "pointer",
      "possibleValues": [
        "widget",
        "pointer"
      ],
      "defaultValue": "pointer"
    },
    "domMove": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget should moved using DOM methods.</p>"
          }
        ]
      },
      "name": "domMove",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "placementModeX": {
      "location": {
        "start": {
          "line": 144,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects the algorithm to place the widget horizontally. <code>direct</code>\n uses {@link qx.util.placement.DirectAxis}, <code>keep-align</code>\n uses {@link qx.util.placement.KeepAlignAxis} and <code>best-fit</code>\n uses {@link qx.util.placement.BestFitAxis}.</p>"
          }
        ]
      },
      "name": "placementModeX",
      "propertyType": "new",
      "themeable": true,
      "init": "keep-align",
      "possibleValues": [
        "direct",
        "keep-align",
        "best-fit"
      ],
      "defaultValue": "keep-align"
    },
    "placementModeY": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 162,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects the algorithm to place the widget vertically. <code>direct</code>\n uses {@link qx.util.placement.DirectAxis}, <code>keep-align</code>\n uses {@link qx.util.placement.KeepAlignAxis} and <code>best-fit</code>\n uses {@link qx.util.placement.BestFitAxis}.</p>"
          }
        ]
      },
      "name": "placementModeY",
      "propertyType": "new",
      "themeable": true,
      "init": "keep-align",
      "possibleValues": [
        "direct",
        "keep-align",
        "best-fit"
      ],
      "defaultValue": "keep-align"
    },
    "offsetLeft": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 170,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Left offset of the pointer (in pixel)</p>"
          }
        ]
      },
      "name": "offsetLeft",
      "propertyType": "new",
      "themeable": true,
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "offsetTop": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 178,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Top offset of the pointer (in pixel)</p>"
          }
        ]
      },
      "name": "offsetTop",
      "propertyType": "new",
      "themeable": true,
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "offsetRight": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Right offset of the pointer (in pixel)</p>"
          }
        ]
      },
      "name": "offsetRight",
      "propertyType": "new",
      "themeable": true,
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "offsetBottom": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Bottom offset of the pointer (in pixel)</p>"
          }
        ]
      },
      "name": "offsetBottom",
      "propertyType": "new",
      "themeable": true,
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "offset": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 202,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Offsets in one group</p>"
          }
        ]
      },
      "name": "offset",
      "propertyType": "new",
      "themeable": true,
      "group": [
        "offsetTop",
        "offsetRight",
        "offsetBottom",
        "offsetLeft"
      ]
    }
  },
  "members": {
    "__ptwLiveUpdater": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__ptwLiveDisappearListener": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 37
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__ptwLiveUpdateDisappearListener": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 43
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getLayoutLocation": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 282,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the location data like {qx.bom.element.Location#get} does,\n but does not rely on DOM elements coordinates to be rendered. Instead,\n this method works with the available layout data available in the moment\n when it is executed.\n This works best when called in some type of <code>resize</code> or\n <code>move</code> event which are supported by all widgets out of the\n box.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Any widget",
            "paramName": "widget",
            "description": " Any widget",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} Returns a map with <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code> which contains the distance\n   of the widget relative coords the document.",
            "type": "Map|null",
            "description": " Returns a map with <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code> which contains the distance\n   of the widget relative coords the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveTo": {
      "location": {
        "start": {
          "line": 296,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the position. Uses low-level, high-performance DOM\n methods when the property {@link #domMove} is enabled.\n Checks if an always visible element is set and moves the widget to not\n overlay the always visible widget if possible. The algorithm tries to\n move the widget as far left as necessary but not of the screen.\n ({@link #setVisibleElement})</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} The left position",
            "paramName": "left",
            "description": " The left position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} The top position",
            "paramName": "top",
            "description": " The top position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "placeToWidget": {
      "location": {
        "start": {
          "line": 358,
          "column": 4
        },
        "end": {
          "line": 390,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Places the widget to another (at least laid out) widget. The DOM\n element is not needed, but the bounds are needed to compute the\n location of the widget to align to.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {qx.ui.core.Widget} Target coords align coords",
            "paramName": "target",
            "description": " Target coords align coords",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "liveupdate {Boolean} Flag indicating if the position of the\n widget should be checked and corrected automatically.",
            "paramName": "liveupdate",
            "description": " Flag indicating if the position of the\n widget should be checked and corrected automatically.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the widget was successfully placed",
            "type": "Boolean",
            "description": " true if the widget was successfully placed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__cleanupFromLastPlaceToWidgetLiveUpdate": {
      "location": {
        "start": {
          "line": 396,
          "column": 4
        },
        "end": {
          "line": 409,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all resources allocated by the last run of placeToWidget with liveupdate=true</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "placeToPointer": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 431,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Places the widget to the pointer position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Pointer} Pointer event to align to",
            "paramName": "event",
            "description": " Pointer event to align to",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "placeToElement": {
      "location": {
        "start": {
          "line": 441,
          "column": 4
        },
        "end": {
          "line": 473,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Places the widget to any (rendered) DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to align to",
            "paramName": "elem",
            "description": " DOM element to align to",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "liveupdate {Boolean} Flag indicating if the position of the\n widget should be checked and corrected automatically.",
            "paramName": "liveupdate",
            "description": " Flag indicating if the position of the\n widget should be checked and corrected automatically.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "placeToPoint": {
      "location": {
        "start": {
          "line": 482,
          "column": 4
        },
        "end": {
          "line": 493,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Places the widget in relation to the given point</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "point {Map} Coordinate of any point with the keys <code>left</code>\n   and <code>top</code>.",
            "paramName": "point",
            "description": " Coordinate of any point with the keys <code>left</code>\n   and <code>top</code>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getPlacementOffsets": {
      "location": {
        "start": {
          "line": 501,
          "column": 4
        },
        "end": {
          "line": 509,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the placement offsets as a map</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The placement offsets",
            "type": "Map",
            "description": " The placement offsets"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__getPlacementSize": {
      "location": {
        "start": {
          "line": 523,
          "column": 4
        },
        "end": {
          "line": 541,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the size of the object to place. The callback will be called with\n the size as first argument. This methods works asynchronously.\n The size of the object to place is the size of the widget. If a widget\n including this mixin needs a different size it can implement the method\n <code>_computePlacementSize</code>, which returns the size.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} This function will be called with the size as\n    first argument",
            "paramName": "callback",
            "description": " This function will be called with the size as\n    first argument",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_place": {
      "location": {
        "start": {
          "line": 552,
          "column": 4
        },
        "end": {
          "line": 573,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal method to read specific this properties and\n apply the results to the this afterwards.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coords {Map} Location of the object to align the this to. This map\n   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n   and <code>bottom</code>.",
            "paramName": "coords",
            "description": " Location of the object to align the this to. This map\n   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n   and <code>bottom</code>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getPosition": {
      "type": "function",
      "name": "getPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>position</code>.\n\nFor further details take a look at the property definition: {@link #position}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for position"
          }
        ]
      }
    },
    "setPosition": {
      "type": "function",
      "name": "setPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>position</code>.\n\nFor further details take a look at the property definition: {@link #position}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for position"
          }
        ]
      }
    },
    "resetPosition": {
      "type": "function",
      "name": "resetPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>position</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #position}."
          }
        ]
      }
    },
    "getPlaceMethod": {
      "type": "function",
      "name": "getPlaceMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>placeMethod</code>.\n\nFor further details take a look at the property definition: {@link #placeMethod}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for placeMethod"
          }
        ]
      }
    },
    "setPlaceMethod": {
      "type": "function",
      "name": "setPlaceMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>placeMethod</code>.\n\nFor further details take a look at the property definition: {@link #placeMethod}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for placeMethod"
          }
        ]
      }
    },
    "resetPlaceMethod": {
      "type": "function",
      "name": "resetPlaceMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>placeMethod</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #placeMethod}."
          }
        ]
      }
    },
    "getDomMove": {
      "type": "function",
      "name": "getDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>domMove</code>.\n\nFor further details take a look at the property definition: {@link #domMove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for domMove"
          }
        ]
      }
    },
    "isDomMove": {
      "type": "function",
      "name": "isDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>domMove</code>.\n\nFor further details take a look at the property definition: {@link #domMove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for domMove"
          }
        ]
      }
    },
    "setDomMove": {
      "type": "function",
      "name": "setDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>domMove</code>.\n\nFor further details take a look at the property definition: {@link #domMove}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for domMove"
          }
        ]
      }
    },
    "resetDomMove": {
      "type": "function",
      "name": "resetDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>domMove</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #domMove}."
          }
        ]
      }
    },
    "getPlacementModeX": {
      "type": "function",
      "name": "getPlacementModeX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>placementModeX</code>.\n\nFor further details take a look at the property definition: {@link #placementModeX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for placementModeX"
          }
        ]
      }
    },
    "setPlacementModeX": {
      "type": "function",
      "name": "setPlacementModeX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>placementModeX</code>.\n\nFor further details take a look at the property definition: {@link #placementModeX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for placementModeX"
          }
        ]
      }
    },
    "resetPlacementModeX": {
      "type": "function",
      "name": "resetPlacementModeX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>placementModeX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #placementModeX}."
          }
        ]
      }
    },
    "getPlacementModeY": {
      "type": "function",
      "name": "getPlacementModeY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>placementModeY</code>.\n\nFor further details take a look at the property definition: {@link #placementModeY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for placementModeY"
          }
        ]
      }
    },
    "setPlacementModeY": {
      "type": "function",
      "name": "setPlacementModeY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>placementModeY</code>.\n\nFor further details take a look at the property definition: {@link #placementModeY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for placementModeY"
          }
        ]
      }
    },
    "resetPlacementModeY": {
      "type": "function",
      "name": "resetPlacementModeY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>placementModeY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #placementModeY}."
          }
        ]
      }
    },
    "getOffsetLeft": {
      "type": "function",
      "name": "getOffsetLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>offsetLeft</code>.\n\nFor further details take a look at the property definition: {@link #offsetLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for offsetLeft"
          }
        ]
      }
    },
    "setOffsetLeft": {
      "type": "function",
      "name": "setOffsetLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>offsetLeft</code>.\n\nFor further details take a look at the property definition: {@link #offsetLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for offsetLeft"
          }
        ]
      }
    },
    "resetOffsetLeft": {
      "type": "function",
      "name": "resetOffsetLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>offsetLeft</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #offsetLeft}."
          }
        ]
      }
    },
    "getOffsetTop": {
      "type": "function",
      "name": "getOffsetTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>offsetTop</code>.\n\nFor further details take a look at the property definition: {@link #offsetTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for offsetTop"
          }
        ]
      }
    },
    "setOffsetTop": {
      "type": "function",
      "name": "setOffsetTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>offsetTop</code>.\n\nFor further details take a look at the property definition: {@link #offsetTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for offsetTop"
          }
        ]
      }
    },
    "resetOffsetTop": {
      "type": "function",
      "name": "resetOffsetTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>offsetTop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #offsetTop}."
          }
        ]
      }
    },
    "getOffsetRight": {
      "type": "function",
      "name": "getOffsetRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>offsetRight</code>.\n\nFor further details take a look at the property definition: {@link #offsetRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for offsetRight"
          }
        ]
      }
    },
    "setOffsetRight": {
      "type": "function",
      "name": "setOffsetRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>offsetRight</code>.\n\nFor further details take a look at the property definition: {@link #offsetRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for offsetRight"
          }
        ]
      }
    },
    "resetOffsetRight": {
      "type": "function",
      "name": "resetOffsetRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>offsetRight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #offsetRight}."
          }
        ]
      }
    },
    "getOffsetBottom": {
      "type": "function",
      "name": "getOffsetBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>offsetBottom</code>.\n\nFor further details take a look at the property definition: {@link #offsetBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for offsetBottom"
          }
        ]
      }
    },
    "setOffsetBottom": {
      "type": "function",
      "name": "setOffsetBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>offsetBottom</code>.\n\nFor further details take a look at the property definition: {@link #offsetBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for offsetBottom"
          }
        ]
      }
    },
    "resetOffsetBottom": {
      "type": "function",
      "name": "resetOffsetBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>offsetBottom</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #offsetBottom}."
          }
        ]
      }
    },
    "getOffset": {
      "type": "function",
      "name": "getOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>offset</code>.\n\nFor further details take a look at the property definition: {@link #offset}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for offset"
          }
        ]
      }
    },
    "setOffset": {
      "type": "function",
      "name": "setOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>offset</code>.\n\nFor further details take a look at the property definition: {@link #offset}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for offset"
          }
        ]
      }
    },
    "resetOffset": {
      "type": "function",
      "name": "resetOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>offset</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #offset}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 577,
        "column": 13
      },
      "end": {
        "line": 580,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}