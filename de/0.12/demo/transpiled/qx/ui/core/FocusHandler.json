{
  "className": "qx.ui.core.FocusHandler",
  "packageName": "qx.ui.core",
  "name": "FocusHandler",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 630,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Each focus root delegates the focus handling to instances of the FocusHandler.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 37,
        "column": 14
      },
      "end": {
        "line": 43,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "properties": {
    "useTabNavigation": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activate changing focus with the tab key (default: true)</p>"
          }
        ]
      },
      "name": "useTabNavigation",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__roots": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__activeChild": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedChild": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__currentRoot": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 73,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "connectTo": {
      "location": {
        "start": {
          "line": 84,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Connects to a top-level root element (which initially receives\n all events of the root). This are normally all page and application\n roots, but no inline roots (they are typically sitting inside\n another root).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {qx.ui.root.Abstract} Any root",
            "paramName": "root",
            "description": " Any root",
            "type": "qx.ui.root.Abstract"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addRoot": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers a widget as a focus root. A focus root comes\n with an separate tab sequence handling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to register",
            "paramName": "widget",
            "description": " The widget to register",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeRoot": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deregisters a previous added widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to deregister",
            "paramName": "widget",
            "description": " The widget to deregister",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getActiveWidget": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the active widget</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The active widget or <code>null</code>\n    if no widget is active",
            "type": "qx.ui.core.Widget|null",
            "description": " The active widget or <code>null</code>\n    if no widget is active"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isActive": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given widget is the active one</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check",
            "paramName": "widget",
            "description": " The widget to check",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the given widget is active",
            "type": "Boolean",
            "description": " <code>true</code> if the given widget is active"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedWidget": {
      "location": {
        "start": {
          "line": 147,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the focused widget</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The focused widget or <code>null</code>\n    if no widget has the focus",
            "type": "qx.ui.core.Widget|null",
            "description": " The focused widget or <code>null</code>\n    if no widget has the focus"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFocused": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given widget is the focused one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check",
            "paramName": "widget",
            "description": " The widget to check",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the given widget is focused",
            "type": "Boolean",
            "description": " <code>true</code> if the given widget is focused"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFocusRoot": {
      "location": {
        "start": {
          "line": 169,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given widgets acts as a focus root.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check",
            "paramName": "widget",
            "description": " The widget to check",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the given widget is a focus root",
            "type": "Boolean",
            "description": " <code>true</code> if the given widget is a focus root"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onActivate": {
      "location": {
        "start": {
          "line": 188,
          "column": 4
        },
        "end": {
          "line": 198,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  EVENT HANDLER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Internal event handler for activate event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Focus} Focus event",
            "paramName": "e",
            "description": " Focus event",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDeactivate": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 212,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal event handler for deactivate event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Focus} Focus event",
            "paramName": "e",
            "description": " Focus event",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onFocusIn": {
      "location": {
        "start": {
          "line": 220,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal event handler for focusin event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Focus} Focus event",
            "paramName": "e",
            "description": " Focus event",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onFocusOut": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal event handler for focusout event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Focus} Focus event",
            "paramName": "e",
            "description": " Focus event",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__onKeyPress": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 278,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal event handler for TAB key.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findFocusRoot": {
      "location": {
        "start": {
          "line": 296,
          "column": 4
        },
        "end": {
          "line": 309,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  UTILS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Finds the next focus root, starting with the given widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to find a focus root for.",
            "paramName": "widget",
            "description": " The widget to find a focus root for.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The focus root for the given widget or\n <code>true</code> if no focus root could be found",
            "type": "qx.ui.core.Widget|null",
            "description": " The focus root for the given widget or\n <code>true</code> if no focus root could be found"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__compareTabOrder": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 371,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  TAB SUPPORT IMPLEMENTATION\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Compares the order of two widgets</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget1 {qx.ui.core.Widget} Widget A",
            "paramName": "widget1",
            "description": " Widget A",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "widget2 {qx.ui.core.Widget} Widget B",
            "paramName": "widget2",
            "description": " Widget B",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} A sort() compatible integer with values\n   small than 0, exactly 0 or bigger than 0.",
            "type": "Integer",
            "description": " A sort() compatible integer with values\n   small than 0, exactly 0 or bigger than 0."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getFirstWidget": {
      "location": {
        "start": {
          "line": 380,
          "column": 4
        },
        "end": {
          "line": 382,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the first widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Returns the first (positioned) widget from\n    the current root.",
            "type": "qx.ui.core.Widget",
            "description": " Returns the first (positioned) widget from\n    the current root."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getLastWidget": {
      "location": {
        "start": {
          "line": 391,
          "column": 4
        },
        "end": {
          "line": 393,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the last widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Returns the last (positioned) widget from\n    the current root.",
            "type": "qx.ui.core.Widget",
            "description": " Returns the last (positioned) widget from\n    the current root."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getWidgetAfter": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 423,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget after the given one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to start with",
            "paramName": "widget",
            "description": " Widget to start with",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The found widget.",
            "type": "qx.ui.core.Widget",
            "description": " The found widget."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getWidgetBefore": {
      "location": {
        "start": {
          "line": 432,
          "column": 4
        },
        "end": {
          "line": 453,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget before the given one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to start with",
            "paramName": "widget",
            "description": " Widget to start with",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The found widget.",
            "type": "qx.ui.core.Widget",
            "description": " The found widget."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__collectAllAfter": {
      "location": {
        "start": {
          "line": 475,
          "column": 4
        },
        "end": {
          "line": 498,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  INTERNAL API USED BY METHODS ABOVE\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Collects all widgets which are after the given widget in\n the given parent widget. Append all found children to the\n <code>list</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget} Parent widget",
            "paramName": "parent",
            "description": " Parent widget",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Child widget to start with",
            "paramName": "widget",
            "description": " Child widget to start with",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "result {Array} Result list",
            "paramName": "result",
            "description": " Result list",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__collectAllBefore": {
      "location": {
        "start": {
          "line": 510,
          "column": 4
        },
        "end": {
          "line": 533,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all widgets which are before the given widget in\n the given parent widget. Append all found children to the\n <code>list</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget} Parent widget",
            "paramName": "parent",
            "description": " Parent widget",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Child widget to start with",
            "paramName": "widget",
            "description": " Child widget to start with",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "result {Array} Result list",
            "paramName": "result",
            "description": " Result list",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getFirst": {
      "location": {
        "start": {
          "line": 543,
          "column": 4
        },
        "end": {
          "line": 573,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Find first (positioned) widget. (Sorted by coordinates, zIndex, etc.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget} Parent widget",
            "paramName": "parent",
            "description": " Parent widget",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "firstWidget {qx.ui.core.Widget?null} Current first widget",
            "paramName": "firstWidget",
            "description": " Current first widget",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The first (positioned) widget",
            "type": "qx.ui.core.Widget",
            "description": " The first (positioned) widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getLast": {
      "location": {
        "start": {
          "line": 583,
          "column": 4
        },
        "end": {
          "line": 613,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Find last (positioned) widget. (Sorted by coordinates, zIndex, etc.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget} Parent widget",
            "paramName": "parent",
            "description": " Parent widget",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "lastWidget {qx.ui.core.Widget?null} Current last widget",
            "paramName": "lastWidget",
            "description": " Current last widget",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The last (positioned) widget",
            "type": "qx.ui.core.Widget",
            "description": " The last (positioned) widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getUseTabNavigation": {
      "type": "function",
      "name": "getUseTabNavigation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useTabNavigation</code>.\n\nFor further details take a look at the property definition: {@link #useTabNavigation}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useTabNavigation"
          }
        ]
      }
    },
    "isUseTabNavigation": {
      "type": "function",
      "name": "isUseTabNavigation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useTabNavigation</code>.\n\nFor further details take a look at the property definition: {@link #useTabNavigation}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useTabNavigation"
          }
        ]
      }
    },
    "setUseTabNavigation": {
      "type": "function",
      "name": "setUseTabNavigation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useTabNavigation</code>.\n\nFor further details take a look at the property definition: {@link #useTabNavigation}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useTabNavigation"
          }
        ]
      }
    },
    "resetUseTabNavigation": {
      "type": "function",
      "name": "resetUseTabNavigation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>useTabNavigation</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #useTabNavigation}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 625,
        "column": 13
      },
      "end": {
        "line": 629,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}