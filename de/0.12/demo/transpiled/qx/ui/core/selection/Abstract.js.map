{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/selection/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__selection",
    "events",
    "properties",
    "mode",
    "check",
    "init",
    "apply",
    "drag",
    "quick",
    "members",
    "__scrollStepX",
    "__scrollStepY",
    "__scrollTimer",
    "__frameScroll",
    "__lastRelX",
    "__lastRelY",
    "__frameLocation",
    "__dragStartX",
    "__dragStartY",
    "__inCapture",
    "__pointerX",
    "__pointerY",
    "__moveDirectionX",
    "__moveDirectionY",
    "__selectionModified",
    "__selectionContext",
    "__leadItem",
    "__anchorItem",
    "__pointerDownOnSelected",
    "_userInteraction",
    "__oldScrollTop",
    "getSelectionContext",
    "selectAll",
    "getMode",
    "Error",
    "_selectAllItems",
    "_fireChange",
    "selectItem",
    "item",
    "_setSelectedItem",
    "_setLeadItem",
    "_setAnchorItem",
    "_scrollItemIntoView",
    "addItem",
    "_getAnchorItem",
    "_addToSelection",
    "removeItem",
    "_removeFromSelection",
    "isSelectionEmpty",
    "selected",
    "_applyDefaultSelection",
    "getLeadItem",
    "selectItemRange",
    "begin",
    "end",
    "_selectItemRange",
    "clearSelection",
    "_clearSelection",
    "replaceSelection",
    "items",
    "length",
    "_replaceMultiSelection",
    "getSelectedItem",
    "result",
    "_getSelectedItem",
    "undefined",
    "getSelection",
    "values",
    "getSortedSelection",
    "children",
    "getSelectables",
    "sel",
    "sort",
    "a",
    "b",
    "indexOf",
    "isItemSelected",
    "hash",
    "_selectableToHashCode",
    "lang",
    "isEmpty",
    "invertSelection",
    "selectables",
    "i",
    "_toggleInSelection",
    "value",
    "old",
    "_styleSelectable",
    "_isSelectable",
    "_getSelectableFromPointerEvent",
    "event",
    "target",
    "getTarget",
    "enabled",
    "_capture",
    "_releaseCapture",
    "_getLocation",
    "_getDimension",
    "_getSelectableLocationX",
    "_getSelectableLocationY",
    "_getScroll",
    "_scrollBy",
    "xoff",
    "yoff",
    "all",
    "_getSelectableRange",
    "item1",
    "item2",
    "_getFirstSelectable",
    "_getLastSelectable",
    "_getRelatedSelectable",
    "relation",
    "_getPage",
    "lead",
    "up",
    "_applyMode",
    "handlePointerOver",
    "top",
    "getPointerType",
    "getQuick",
    "handlePointerDown",
    "isCtrlPressed",
    "Environment",
    "get",
    "isMetaPressed",
    "isShiftPressed",
    "getDrag",
    "getDocumentLeft",
    "left",
    "getDocumentTop",
    "handleTap",
    "anchor",
    "_cleanup",
    "handleLoseCapture",
    "handlePointerMove",
    "dragX",
    "dragY",
    "location",
    "right",
    "bottom",
    "Timer",
    "addListener",
    "_onInterval",
    "start",
    "_autoSelect",
    "stopPropagation",
    "handleAddItem",
    "e",
    "getData",
    "handleRemoveItem",
    "stop",
    "inner",
    "relX",
    "Math",
    "max",
    "min",
    "width",
    "relY",
    "height",
    "moveX",
    "nextX",
    "locationX",
    "moveY",
    "nextY",
    "locationY",
    "_deselectItemRange",
    "__navigationKeys",
    "Home",
    "Down",
    "Right",
    "PageDown",
    "End",
    "Up",
    "Left",
    "PageUp",
    "handleKeyPress",
    "current",
    "next",
    "key",
    "getKeyIdentifier",
    "consumed",
    "range",
    "l",
    "selection",
    "mapped",
    "__rangeToMap",
    "modified",
    "selectable",
    "incoming",
    "first",
    "last",
    "context",
    "fireDataEvent",
    "force",
    "destruct",
    "_disposeObjects",
    "ui",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Generic selection manager to bring rich desktop like selection behavior\n * to widgets and low-level interactive controls.\n *\n * The selection handling supports both Shift and Ctrl/Meta modifies like\n * known from native applications.\n */\nqx.Class.define(\"qx.ui.core.selection.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // {Map} Internal selection storage\n    this.__selection = {};\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fires after the selection was modified. Contains the selection under the data property. */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Selects the selection mode to use.\n     *\n     * * single: One or no element is selected\n     * * multi: Multi items could be selected. Also allows empty selections.\n     * * additive: Easy Web-2.0 selection mode. Allows multiple selections without modifier keys.\n     * * one: If possible always exactly one item is selected\n     */\n    mode :\n    {\n      check : [ \"single\", \"multi\", \"additive\", \"one\" ],\n      init : \"single\",\n      apply : \"_applyMode\"\n    },\n\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the modes <code>multi</code> and <code>additive</code>\n     */\n    drag :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quick :\n    {\n      check : \"Boolean\",\n      init : false\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __scrollStepX : 0,\n    __scrollStepY : 0,\n    __scrollTimer : null,\n    __frameScroll : null,\n    __lastRelX : null,\n    __lastRelY : null,\n    __frameLocation : null,\n    __dragStartX : null,\n    __dragStartY : null,\n    __inCapture : null,\n    __pointerX : null,\n    __pointerY : null,\n    __moveDirectionX : null,\n    __moveDirectionY : null,\n    __selectionModified : null,\n    __selectionContext : null,\n    __leadItem : null,\n    __selection : null,\n    __anchorItem : null,\n    __pointerDownOnSelected : null,\n\n    // A flag that signals an user interaction, which means the selection change\n    // was triggered by pointer or keyboard [BUG #3344]\n    _userInteraction : false,\n\n    __oldScrollTop : null,\n\n    /*\n    ---------------------------------------------------------------------------\n      USER APIS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the selection context. One of <code>tap</code>,\n     * <code>quick</code>, <code>drag</code> or <code>key</code> or\n     * <code>null</code>.\n     *\n     * @return {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    getSelectionContext : function() {\n      return this.__selectionContext;\n    },\n\n\n    /**\n     * Selects all items of the managed object.\n     *\n     */\n    selectAll : function()\n    {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\"Can not select all items in selection mode: \" + mode);\n      }\n\n      this._selectAllItems();\n      this._fireChange();\n    },\n\n\n    /**\n     * Selects the given item. Replaces current selection\n     * completely with the new item.\n     *\n     * Use {@link #addItem} instead if you want to add new\n     * items to an existing selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    selectItem : function(item)\n    {\n      this._setSelectedItem(item);\n\n      var mode = this.getMode();\n      if (mode !== \"single\" && mode !== \"one\")\n      {\n        this._setLeadItem(item);\n        this._setAnchorItem(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n\n    /**\n     * Adds the given item to the existing selection.\n     *\n     * Use {@link #selectItem} instead if you want to replace\n     * the current selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    addItem : function(item)\n    {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        this._setSelectedItem(item);\n      }\n      else\n      {\n        if (this._getAnchorItem() == null) {\n          this._setAnchorItem(item);\n        }\n\n        this._setLeadItem(item);\n        this._addToSelection(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n\n    /**\n     * Removes the given item from the selection.\n     *\n     * Use {@link #clearSelection} when you want to clear\n     * the whole selection at once.\n     *\n     * @param item {Object} Any valid item\n     */\n    removeItem : function(item)\n    {\n      this._removeFromSelection(item);\n\n      if (this.getMode() === \"one\" && this.isSelectionEmpty())\n      {\n        var selected = this._applyDefaultSelection();\n\n        // Do not fire any event in this case.\n        if (selected == item) {\n          return;\n        }\n      }\n\n      if (this.getLeadItem() == item) {\n        this._setLeadItem(null);\n      }\n\n      if (this._getAnchorItem() == item) {\n        this._setAnchorItem(null);\n      }\n\n      this._fireChange();\n    },\n\n\n    /**\n     * Selects an item range between two given items.\n     *\n     * @param begin {Object} Item to start with\n     * @param end {Object} Item to end at\n     */\n    selectItemRange : function(begin, end)\n    {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\"Can not select multiple items in selection mode: \" + mode);\n      }\n\n      this._selectItemRange(begin, end);\n\n      this._setAnchorItem(begin);\n\n      this._setLeadItem(end);\n      this._scrollItemIntoView(end);\n\n      this._fireChange();\n    },\n\n\n    /**\n     * Clears the whole selection at once. Also\n     * resets the lead and anchor items and their\n     * styles.\n     *\n     */\n    clearSelection : function()\n    {\n      if (this.getMode() == \"one\")\n      {\n        var selected = this._applyDefaultSelection(true);\n        if (selected != null) {\n          return;\n        }\n      }\n\n      this._clearSelection();\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._fireChange();\n    },\n\n\n    /**\n     * Replaces current selection with given array of items.\n     *\n     * Please note that in single selection scenarios it is more\n     * efficient to directly use {@link #selectItem}.\n     *\n     * @param items {Array} Items to select\n     */\n    replaceSelection : function(items)\n    {\n      var mode = this.getMode();\n      if (mode == \"one\" || mode === \"single\")\n      {\n        if (items.length > 1)   {\n          throw new Error(\"Could not select more than one items in mode: \" + mode + \"!\");\n        }\n\n        if (items.length == 1) {\n          this.selectItem(items[0]);\n        } else {\n          this.clearSelection();\n        }\n        return;\n      }\n      else\n      {\n        this._replaceMultiSelection(items);\n      }\n    },\n\n\n    /**\n     * Get the selected item. This method does only work in <code>single</code>\n     * selection mode.\n     *\n     * @return {Object} The selected item.\n     */\n    getSelectedItem : function()\n    {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\")\n      {\n        var result = this._getSelectedItem();\n        return result != undefined ? result : null;\n      }\n\n      throw new Error(\"The method getSelectedItem() is only supported in 'single' and 'one' selection mode!\");\n    },\n\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {Object[]} List of items.\n     */\n    getSelection : function() {\n      return Object.values(this.__selection);\n    },\n\n\n    /**\n     * Returns the selection sorted by the index in the\n     * container of the selection (the assigned widget)\n     *\n     * @return {Object[]} Sorted list of items\n     */\n    getSortedSelection : function()\n    {\n      var children = this.getSelectables();\n      var sel = Object.values(this.__selection);\n\n      sel.sort(function(a, b) {\n        return children.indexOf(a) - children.indexOf(b);\n      });\n\n      return sel;\n    },\n\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {var} Any valid selectable item\n     * @return {Boolean} Whether the item is selected\n     */\n    isItemSelected : function(item)\n    {\n      var hash = this._selectableToHashCode(item);\n      return this.__selection[hash] !== undefined;\n    },\n\n\n    /**\n     * Whether the selection is empty\n     *\n     * @return {Boolean} Whether the selection is empty\n     */\n    isSelectionEmpty : function() {\n      return qx.lang.Object.isEmpty(this.__selection);\n    },\n\n\n    /**\n     * Invert the selection. Select the non selected and deselect the selected.\n     */\n    invertSelection: function() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        throw new Error(\"The method invertSelection() is only supported in 'multi' and 'additive' selection mode!\");\n      }\n\n      var selectables = this.getSelectables();\n      for (var i = 0; i < selectables.length; i++)\n      {\n        this._toggleInSelection(selectables[i]);\n      }\n\n      this._fireChange();\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LEAD/ANCHOR SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setLeadItem : function(value)\n    {\n      var old = this.__leadItem;\n\n      if (old !== null) {\n        this._styleSelectable(old, \"lead\", false);\n      }\n\n      if (value !== null) {\n        this._styleSelectable(value, \"lead\", true);\n      }\n\n      this.__leadItem = value;\n    },\n\n\n    /**\n     * Returns the current lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @return {Object} The lead item or <code>null</code>\n     */\n    getLeadItem : function() {\n      return this.__leadItem;\n    },\n\n\n    /**\n     * Sets the anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setAnchorItem : function(value)\n    {\n      var old = this.__anchorItem;\n\n      if (old != null) {\n        this._styleSelectable(old, \"anchor\", false);\n      }\n\n      if (value != null) {\n        this._styleSelectable(value, \"anchor\", true);\n      }\n\n      this.__anchorItem = value;\n    },\n\n\n    /**\n     * Returns the current anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @return {Object} The anchor item or <code>null</code>\n     */\n    _getAnchorItem : function() {\n      return this.__anchorItem !== null ? this.__anchorItem : null;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      BASIC SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the given item is selectable.\n     *\n     * @param item {var} Any item\n     * @return {Boolean} <code>true</code> when the item is selectable\n     */\n    _isSelectable : function(item) {\n      throw new Error(\"Abstract method call: _isSelectable()\");\n    },\n\n\n    /**\n     * Finds the selectable instance from a pointer event\n     *\n     * @param event {qx.event.type.Pointer} The pointer event\n     * @return {Object|null} The resulting selectable\n     */\n    _getSelectableFromPointerEvent : function(event)\n    {\n      var target = event.getTarget();\n      // check for target (may be null when leaving the viewport) [BUG #4378]\n      if (target && this._isSelectable(target)) {\n        return target;\n      }\n      return null;\n    },\n\n\n    /**\n     * Returns an unique hashcode for the given item.\n     *\n     * @param item {var} Any item\n     * @return {String} A valid hashcode\n     */\n    _selectableToHashCode : function(item) {\n      throw new Error(\"Abstract method call: _selectableToHashCode()\");\n    },\n\n\n    /**\n     * Updates the style (appearance) of the given item.\n     *\n     * @param item {var} Item to modify\n     * @param type {String} Any of <code>selected</code>, <code>anchor</code> or <code>lead</code>\n     * @param enabled {Boolean} Whether the given style should be added or removed.\n     */\n    _styleSelectable : function(item, type, enabled) {\n      throw new Error(\"Abstract method call: _styleSelectable()\");\n    },\n\n\n    /**\n     * Enables capturing of the container.\n     *\n     */\n    _capture : function() {\n      throw new Error(\"Abstract method call: _capture()\");\n    },\n\n\n    /**\n     * Releases capturing of the container\n     *\n     */\n    _releaseCapture : function() {\n      throw new Error(\"Abstract method call: _releaseCapture()\");\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION AND LOCATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the location of the container\n     *\n     * @return {Map} Map with the keys <code>top</code>, <code>right</code>,\n     *    <code>bottom</code> and <code>left</code>.\n     */\n    _getLocation : function() {\n      throw new Error(\"Abstract method call: _getLocation()\");\n    },\n\n\n    /**\n     * Returns the dimension of the container (available scrolling space).\n     *\n     * @return {Map} Map with the keys <code>width</code> and <code>height</code>.\n     */\n    _getDimension : function() {\n      throw new Error(\"Abstract method call: _getDimension()\");\n    },\n\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>left</code> and <code>right</code>.\n     */\n    _getSelectableLocationX : function(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationX()\");\n    },\n\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>top</code> and <code>bottom</code>.\n     */\n    _getSelectableLocationY : function(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationY()\");\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the scroll position of the container.\n     *\n     * @return {Map} Map with the keys <code>left</code> and <code>top</code>.\n     */\n    _getScroll : function() {\n      throw new Error(\"Abstract method call: _getScroll()\");\n    },\n\n\n    /**\n     * Scrolls by the given offset\n     *\n     * @param xoff {Integer} Horizontal offset to scroll by\n     * @param yoff {Integer} Vertical offset to scroll by\n     */\n    _scrollBy : function(xoff, yoff) {\n      throw new Error(\"Abstract method call: _scrollBy()\");\n    },\n\n\n    /**\n     * Scrolls the given item into the view (make it visible)\n     *\n     * @param item {var} Any item\n     */\n    _scrollItemIntoView : function(item) {\n      throw new Error(\"Abstract method call: _scrollItemIntoView()\");\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      QUERY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns all selectable items of the container.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n      *   selectables the user can interactively select\n     * @return {Array} A list of items\n     */\n    getSelectables : function(all) {\n      throw new Error(\"Abstract method call: getSelectables()\");\n    },\n\n\n    /**\n     * Returns all selectable items between the two given items.\n     *\n     * The items could be given in any order.\n     *\n     * @param item1 {var} First item\n     * @param item2 {var} Second item\n     * @return {Array} List of items\n     */\n    _getSelectableRange : function(item1, item2) {\n      throw new Error(\"Abstract method call: _getSelectableRange()\");\n    },\n\n\n    /**\n     * Returns the first selectable item.\n     *\n     * @return {var} The first selectable item\n     */\n    _getFirstSelectable : function() {\n      throw new Error(\"Abstract method call: _getFirstSelectable()\");\n    },\n\n\n    /**\n     * Returns the last selectable item.\n     *\n     * @return {var} The last selectable item\n     */\n    _getLastSelectable : function() {\n      throw new Error(\"Abstract method call: _getLastSelectable()\");\n    },\n\n\n    /**\n     * Returns a selectable item which is related to the given\n     * <code>item</code> through the value of <code>relation</code>.\n     *\n     * @param item {var} Any item\n     * @param relation {String} A valid relation: <code>above</code>,\n     *    <code>right</code>, <code>under</code> or <code>left</code>\n     * @return {var} The related item\n     */\n    _getRelatedSelectable : function(item, relation) {\n      throw new Error(\"Abstract method call: _getRelatedSelectable()\");\n    },\n\n\n    /**\n     * Returns the item which should be selected on pageUp/pageDown.\n     *\n     * May also scroll to the needed position.\n     *\n     * @param lead {var} The current lead item\n     * @param up {Boolean?false} Which page key was pressed:\n     *   <code>up</code> or <code>down</code>.\n     */\n    _getPage : function(lead, up) {\n      throw new Error(\"Abstract method call: _getPage()\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyMode : function(value, old)\n    {\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._clearSelection();\n\n      // Mode \"one\" requires one selected item\n      if (value === \"one\") {\n        this._applyDefaultSelection(true);\n      }\n\n      this._fireChange();\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method should be connected to the <code>pointerover</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerOver : function(event)\n    {\n      // All browsers (except Opera) fire a native \"mouseover\" event when a scroll appears\n      // by keyboard interaction. We have to ignore the event to avoid a selection for\n      // \"pointerover\" (quick selection). For more details see [BUG #4225]\n      if(this.__oldScrollTop != null &&\n         this.__oldScrollTop != this._getScroll().top)\n      {\n        this.__oldScrollTop = null;\n        return;\n      }\n\n      // quick select should only work on mouse events\n      if (event.getPointerType() != \"mouse\") {\n        return;\n      }\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      if (!this.getQuick()) {\n        this._userInteraction = false;\n        return;\n      }\n\n      var mode = this.getMode();\n      if (mode !== \"one\" && mode !== \"single\") {\n        this._userInteraction = false;\n        return;\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      this._setSelectedItem(item);\n\n      // Be sure that item is in view\n      // This does not feel good when pointerover is used\n      // this._scrollItemIntoView(item);\n\n      // Fire change event as needed\n      this._fireChange(\"quick\");\n\n      this._userInteraction = false;\n    },\n\n\n    /**\n     * This method should be connected to the <code>pointerdown</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerDown : function(event)\n    {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Read in keyboard modifiers\n      var isCtrlPressed = event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      // tapping on selected items deselect on pointerup, not on pointerdown\n      if (this.isItemSelected(item) && !isShiftPressed && !isCtrlPressed && !this.getDrag())\n      {\n        this.__pointerDownOnSelected = item;\n        this._userInteraction = false;\n        return;\n      }\n      else\n      {\n        this.__pointerDownOnSelected = null;\n      }\n\n      // Be sure that item is in view\n      this._scrollItemIntoView(item);\n\n      // Drag selection\n      var mode = this.getMode();\n      if (\n        this.getDrag() &&\n        mode !== \"single\" &&\n        mode !== \"one\" &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        event.getPointerType() == \"mouse\"\n      )\n      {\n        this._setAnchorItem(item);\n        this._setLeadItem(item);\n\n        // Cache location/scroll data\n        this.__frameLocation = this._getLocation();\n        this.__frameScroll = this._getScroll();\n\n        // Store position at start\n        this.__dragStartX = event.getDocumentLeft() + this.__frameScroll.left;\n        this.__dragStartY = event.getDocumentTop() + this.__frameScroll.top;\n\n        // Switch to capture mode\n        this.__inCapture = true;\n        this._capture();\n      }\n\n\n      // Fire change event as needed\n      this._fireChange(\"tap\");\n\n      this._userInteraction = false;\n    },\n\n\n    /**\n     * This method should be connected to the <code>tap</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Tap} A valid pointer event\n     */\n    handleTap : function(event)\n    {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Read in keyboard modifiers\n      var isCtrlPressed = event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      if (!isCtrlPressed && !isShiftPressed && this.__pointerDownOnSelected != null)\n      {\n        this._userInteraction = false;\n        var item = this._getSelectableFromPointerEvent(event);\n        if (item === null || !this.isItemSelected(item)) {\n          return;\n        }\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Action depends on selected mode\n      switch(this.getMode())\n      {\n        case \"single\":\n        case \"one\":\n          this._setSelectedItem(item);\n          break;\n\n        case \"additive\":\n          this._setLeadItem(item);\n          this._setAnchorItem(item);\n          this._toggleInSelection(item);\n          break;\n\n        case \"multi\":\n          // Update lead item\n          this._setLeadItem(item);\n\n          // Create/Update range selection\n          if (isShiftPressed)\n          {\n            var anchor = this._getAnchorItem();\n            if (anchor === null)\n            {\n              anchor = this._getFirstSelectable();\n              this._setAnchorItem(anchor);\n            }\n\n            this._selectItemRange(anchor, item, isCtrlPressed);\n          }\n\n          // Toggle in selection\n          else if (isCtrlPressed)\n          {\n            this._setAnchorItem(item);\n            this._toggleInSelection(item);\n          }\n\n          // Replace current selection\n          else\n          {\n            this._setAnchorItem(item);\n            this._setSelectedItem(item);\n          }\n\n          break;\n      }\n\n      // Cleanup operation\n      this._userInteraction = false;      \n      this._cleanup();\n    },\n\n\n    /**\n     * This method should be connected to the <code>losecapture</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handleLoseCapture : function(event) {\n      this._cleanup();\n    },\n\n\n    /**\n     * This method should be connected to the <code>pointermove</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerMove : function(event)\n    {\n      // Only relevant when capturing is enabled\n      if (!this.__inCapture) {\n        return;\n      }\n\n\n      // Update pointer position cache\n      this.__pointerX = event.getDocumentLeft();\n      this.__pointerY = event.getDocumentTop();\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Detect move directions\n      var dragX = this.__pointerX + this.__frameScroll.left;\n      if (dragX > this.__dragStartX) {\n        this.__moveDirectionX = 1;\n      } else if (dragX < this.__dragStartX) {\n        this.__moveDirectionX = -1;\n      } else {\n        this.__moveDirectionX = 0;\n      }\n\n      var dragY = this.__pointerY + this.__frameScroll.top;\n      if (dragY > this.__dragStartY) {\n        this.__moveDirectionY = 1;\n      } else if (dragY < this.__dragStartY) {\n        this.__moveDirectionY = -1;\n      } else {\n        this.__moveDirectionY = 0;\n      }\n\n\n      // Update scroll steps\n      var location = this.__frameLocation;\n\n      if (this.__pointerX < location.left) {\n        this.__scrollStepX = this.__pointerX - location.left;\n      } else if (this.__pointerX > location.right) {\n        this.__scrollStepX = this.__pointerX - location.right;\n      } else {\n        this.__scrollStepX = 0;\n      }\n\n      if (this.__pointerY < location.top) {\n        this.__scrollStepY = this.__pointerY - location.top;\n      } else if (this.__pointerY > location.bottom) {\n        this.__scrollStepY = this.__pointerY - location.bottom;\n      } else {\n        this.__scrollStepY = 0;\n      }\n\n\n      // Dynamically create required timer instance\n      if (!this.__scrollTimer)\n      {\n        this.__scrollTimer = new qx.event.Timer(100);\n        this.__scrollTimer.addListener(\"interval\", this._onInterval, this);\n      }\n\n\n      // Start interval\n      this.__scrollTimer.start();\n\n\n      // Auto select based on new cursor position\n      this._autoSelect();\n\n      event.stopPropagation();\n      this._userInteraction = false;\n    },\n\n\n    /**\n     * This method should be connected to the <code>addItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleAddItem : function(e)\n    {\n      var item = e.getData();\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        this.addItem(item);\n      }\n    },\n\n\n    /**\n     * This method should be connected to the <code>removeItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleRemoveItem : function(e) {\n      this.removeItem(e.getData());\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT INTERNALS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Stops all timers, release capture etc. to cleanup drag selection\n     */\n    _cleanup : function()\n    {\n      if (!this.getDrag() && this.__inCapture) {\n        return;\n      }\n\n      // Fire change event if needed\n      if (this.__selectionModified) {\n        this._fireChange(\"tap\");\n      }\n\n      // Remove flags\n      delete this.__inCapture;\n      delete this.__lastRelX;\n      delete this.__lastRelY;\n\n      // Stop capturing\n      this._releaseCapture();\n\n      // Stop timer\n      if (this.__scrollTimer) {\n        this.__scrollTimer.stop();\n      }\n    },\n\n\n    /**\n     * Event listener for timer used by drag selection\n     *\n     * @param e {qx.event.type.Event} Timer event\n     */\n    _onInterval : function(e)\n    {\n      // Scroll by defined block size\n      this._scrollBy(this.__scrollStepX, this.__scrollStepY);\n\n      // Update scroll cache\n      this.__frameScroll = this._getScroll();\n\n      // Auto select based on new scroll position and cursor\n      this._autoSelect();\n    },\n\n\n    /**\n     * Automatically selects items based on the pointer movement during a drag selection\n     */\n    _autoSelect : function()\n    {\n      var inner = this._getDimension();\n\n      // Get current relative Y position and compare it with previous one\n      var relX = Math.max(0, Math.min(this.__pointerX - this.__frameLocation.left, inner.width)) + this.__frameScroll.left;\n      var relY = Math.max(0, Math.min(this.__pointerY - this.__frameLocation.top, inner.height)) + this.__frameScroll.top;\n\n      // Compare old and new relative coordinates (for performance reasons)\n      if (this.__lastRelX === relX && this.__lastRelY === relY) {\n        return;\n      }\n      this.__lastRelX = relX;\n      this.__lastRelY = relY;\n\n      // Cache anchor\n      var anchor = this._getAnchorItem();\n      var lead = anchor;\n\n\n      // Process X-coordinate\n      var moveX = this.__moveDirectionX;\n      var nextX, locationX;\n\n      while (moveX !== 0)\n      {\n        // Find next item to process depending on current scroll direction\n        nextX = moveX > 0 ?\n          this._getRelatedSelectable(lead, \"right\") :\n          this._getRelatedSelectable(lead, \"left\");\n\n        // May be null (e.g. first/last item)\n        if (nextX !== null)\n        {\n          locationX = this._getSelectableLocationX(nextX);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveX > 0 && locationX.left <= relX) ||\n            (moveX < 0 && locationX.right >= relX)\n          )\n          {\n            lead = nextX;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n\n      // Process Y-coordinate\n      var moveY = this.__moveDirectionY;\n      var nextY, locationY;\n\n      while (moveY !== 0)\n      {\n        // Find next item to process depending on current scroll direction\n        nextY = moveY > 0 ?\n          this._getRelatedSelectable(lead, \"under\") :\n          this._getRelatedSelectable(lead, \"above\");\n\n        // May be null (e.g. first/last item)\n        if (nextY !== null)\n        {\n          locationY = this._getSelectableLocationY(nextY);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveY > 0 && locationY.top <= relY) ||\n            (moveY < 0 && locationY.bottom >= relY)\n          )\n          {\n            lead = nextY;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n\n      // Differenciate between the two supported modes\n      var mode = this.getMode();\n      if (mode === \"multi\")\n      {\n        // Replace current selection with new range\n        this._selectItemRange(anchor, lead);\n      }\n      else if (mode === \"additive\")\n      {\n        // Behavior depends on the fact whether the\n        // anchor item is selected or not\n        if (this.isItemSelected(anchor)) {\n          this._selectItemRange(anchor, lead, true);\n        } else {\n          this._deselectItemRange(anchor, lead);\n        }\n\n        // Improve performance. This mode does not rely\n        // on full ranges as it always extend the old\n        // selection/deselection.\n        this._setAnchorItem(lead);\n      }\n\n\n      // Fire change event as needed\n      this._fireChange(\"drag\");\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      KEYBOARD SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} All supported navigation keys\n     *\n     * @lint ignoreReferenceField(__navigationKeys)\n     */\n    __navigationKeys :\n    {\n      Home : 1,\n      Down : 1 ,\n      Right : 1,\n      PageDown : 1,\n      End : 1,\n      Up : 1,\n      Left : 1,\n      PageUp : 1\n    },\n\n\n    /**\n     * This method should be connected to the <code>keypress</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.KeySequence} A valid key sequence event\n     */\n    handleKeyPress : function(event)\n    {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var current, next;\n      var key = event.getKeyIdentifier();\n      var mode = this.getMode();\n\n      // Support both control keys on Mac\n      var isCtrlPressed = event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      var consumed = false;\n\n      if (key === \"A\" && isCtrlPressed)\n      {\n        if (mode !== \"single\" && mode !== \"one\")\n        {\n          this._selectAllItems();\n          consumed = true;\n        }\n      }\n      else if (key === \"Escape\")\n      {\n        if (mode !== \"single\" && mode !== \"one\")\n        {\n          this._clearSelection();\n          consumed = true;\n        }\n      }\n      else if (key === \"Space\")\n      {\n        var lead = this.getLeadItem();\n        if (lead != null && !isShiftPressed)\n        {\n          if (isCtrlPressed || mode === \"additive\") {\n            this._toggleInSelection(lead);\n          } else {\n            this._setSelectedItem(lead);\n          }\n          consumed = true;\n        }\n      }\n      else if (this.__navigationKeys[key])\n      {\n        consumed = true;\n        if (mode === \"single\" || mode == \"one\") {\n          current = this._getSelectedItem();\n        } else {\n          current = this.getLeadItem();\n        }\n\n        if (current !== null)\n        {\n          switch(key)\n          {\n            case \"Home\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n              next = this._getLastSelectable();\n              break;\n\n            case \"Up\":\n              next = this._getRelatedSelectable(current, \"above\");\n              break;\n\n            case \"Down\":\n              next = this._getRelatedSelectable(current, \"under\");\n              break;\n\n            case \"Left\":\n              next = this._getRelatedSelectable(current, \"left\");\n              break;\n\n            case \"Right\":\n              next = this._getRelatedSelectable(current, \"right\");\n              break;\n\n            case \"PageUp\":\n              next = this._getPage(current, true);\n              break;\n\n            case \"PageDown\":\n              next = this._getPage(current, false);\n              break;\n          }\n        }\n        else\n        {\n          switch(key)\n          {\n            case \"Home\":\n            case \"Down\":\n            case \"Right\":\n            case \"PageDown\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n            case \"Up\":\n            case \"Left\":\n            case \"PageUp\":\n              next = this._getLastSelectable();\n              break;\n          }\n        }\n\n        // Process result\n        if (next !== null)\n        {\n          switch(mode)\n          {\n            case \"single\":\n            case \"one\":\n              this._setSelectedItem(next);\n              break;\n\n            case \"additive\":\n              this._setLeadItem(next);\n              break;\n\n            case \"multi\":\n              if (isShiftPressed)\n              {\n                var anchor = this._getAnchorItem();\n                if (anchor === null) {\n                  this._setAnchorItem(anchor = this._getFirstSelectable());\n                }\n\n                this._setLeadItem(next);\n                this._selectItemRange(anchor, next, isCtrlPressed);\n              }\n              else\n              {\n                this._setAnchorItem(next);\n                this._setLeadItem(next);\n\n                if (!isCtrlPressed) {\n                  this._setSelectedItem(next);\n                }\n              }\n\n              break;\n          }\n\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      }\n\n\n      if (consumed)\n      {\n        // Stop processed events\n        event.stop();\n\n        // Fire change event as needed\n        this._fireChange(\"key\");\n      }\n      this._userInteraction = false;\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR ITEM RANGES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds all items to the selection\n     */\n    _selectAllItems : function()\n    {\n      var range = this.getSelectables();\n      for (var i=0, l=range.length; i<l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n\n    /**\n     * Clears current selection\n     */\n    _clearSelection : function()\n    {\n      var selection = this.__selection;\n      for (var hash in selection) {\n        this._removeFromSelection(selection[hash]);\n      }\n      this.__selection = {};\n    },\n\n\n    /**\n     * Select a range from <code>item1</code> to <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     * @param extend {Boolean?false} Whether the current\n     *    selection should be replaced or extended.\n     */\n    _selectItemRange : function(item1, item2, extend)\n    {\n      var range = this._getSelectableRange(item1, item2);\n\n      // Remove items which are not in the detected range\n      if (!extend)\n      {\n        var selected = this.__selection;\n        var mapped = this.__rangeToMap(range);\n\n        for (var hash in selected)\n        {\n          if (!mapped[hash]) {\n            this._removeFromSelection(selected[hash]);\n          }\n        }\n      }\n\n      // Add new items to the selection\n      for (var i=0, l=range.length; i<l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n\n    /**\n     * Deselect all items between <code>item1</code> and <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     */\n    _deselectItemRange : function(item1, item2)\n    {\n      var range = this._getSelectableRange(item1, item2);\n      for (var i=0, l=range.length; i<l; i++) {\n        this._removeFromSelection(range[i]);\n      }\n    },\n\n\n    /**\n     * Internal method to convert a range to a map of hash\n     * codes for faster lookup during selection compare routines.\n     *\n     * @param range {Array} List of selectable items\n     */\n    __rangeToMap : function(range)\n    {\n      var mapped = {};\n      var item;\n\n      for (var i=0, l=range.length; i<l; i++)\n      {\n        item = range[i];\n        mapped[this._selectableToHashCode(item)] = item;\n      }\n\n      return mapped;\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SINGLE ITEM QUERY AND MODIFICATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the first selected item. Only makes sense\n     * when using manager in single selection mode.\n     *\n     * @return {var} The selected item (or <code>null</code>)\n     */\n    _getSelectedItem : function()\n    {\n      for (var hash in this.__selection) {\n        return this.__selection[hash];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Replace current selection with given item.\n     *\n     * @param item {var} Any valid selectable item\n     */\n    _setSelectedItem : function(item)\n    {\n      if (this._isSelectable(item))\n      {\n        // If already selected try to find out if this is the only item\n        var current = this.__selection;\n        var hash = this._selectableToHashCode(item);\n\n        if (!current[hash] || (current.length >= 2))\n        {\n          this._clearSelection();\n          this._addToSelection(item);\n        }\n      }\n    },\n\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      MODIFY ITEM SELECTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an item to the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _addToSelection : function(item)\n    {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null && this._isSelectable(item))\n      {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n\n        this.__selectionModified = true;\n      }\n    },\n\n\n    /**\n     * Toggles the item e.g. remove it when already selected\n     * or select it when currently not.\n     *\n     * @param item {Object} Any item\n     */\n    _toggleInSelection : function(item)\n    {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null)\n      {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n      }\n      else\n      {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n      }\n\n      this.__selectionModified = true;\n    },\n\n\n    /**\n     * Removes the given item from the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _removeFromSelection : function(item)\n    {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] != null)\n      {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n\n        this.__selectionModified = true;\n      }\n    },\n\n\n    /**\n     * Replaces current selection with items from given array.\n     *\n     * @param items {Array} List of items to select\n     */\n    _replaceMultiSelection : function(items)\n    {\n      if (items.length === 0) {\n        this.clearSelection();\n        return;\n      }\n\n      var modified = false;\n\n      // Build map from hash codes and filter non-selectables\n      var selectable, hash;\n      var incoming = {};\n      for (var i=0, l=items.length; i<l; i++)\n      {\n        selectable = items[i];\n        if (this._isSelectable(selectable))\n        {\n          hash = this._selectableToHashCode(selectable);\n          incoming[hash] = selectable;\n        }\n      }\n\n      // Remember last\n      var first = items[0];\n      var last = selectable;\n\n      // Clear old entries from map\n      var current = this.__selection;\n      for (var hash in current)\n      {\n        if (incoming[hash])\n        {\n          // Reduce map to make next loop faster\n          delete incoming[hash];\n        }\n        else\n        {\n          // update internal map\n          selectable = current[hash];\n          delete current[hash];\n\n          // apply styling\n          this._styleSelectable(selectable, \"selected\", false);\n\n          // remember that the selection has been modified\n          modified = true;\n        }\n      }\n\n      // Add remaining selectables to selection\n      for (var hash in incoming)\n      {\n        // update internal map\n        selectable = current[hash] = incoming[hash];\n\n        // apply styling\n        this._styleSelectable(selectable, \"selected\", true);\n\n        // remember that the selection has been modified\n        modified = true;\n      }\n\n      // Do not do anything if selection is equal to previous one\n      if (!modified) {\n        return false;\n      }\n\n      // Scroll last incoming item into view\n      this._scrollItemIntoView(last);\n\n      // Reset anchor and lead item\n      this._setLeadItem(first);\n      this._setAnchorItem(first);\n\n      // Finally fire change event\n      this.__selectionModified = true;\n      this._fireChange();\n    },\n\n\n    /**\n     * Fires the selection change event if the selection has\n     * been modified.\n     *\n     * @param context {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    _fireChange : function(context)\n    {\n      if (this.__selectionModified)\n      {\n        // Store context\n        this.__selectionContext = context || null;\n\n        // Fire data event which contains the current selection\n        this.fireDataEvent(\"changeSelection\", this.getSelection());\n        delete this.__selectionModified;\n      }\n    },\n\n\n    /**\n     * Applies the default selection. The default item is the first item.\n     *\n     * @param force {Boolean} Whether the default selection should be forced.\n     *\n     * @return {var} The selected item.\n     */\n    _applyDefaultSelection : function(force)\n    {\n      if (force === true || this.getMode() === \"one\" && this.isSelectionEmpty())\n      {\n        var first = this._getFirstSelectable();\n        if (first != null) {\n          this.selectItem(first);\n        }\n        return first;\n      }\n      return null;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._disposeObjects(\"__scrollTimer\");\n    this.__selection = this.__pointerDownOnSelected = this.__anchorItem = null;\n    this.__leadItem = null;\n  }\n});\n"
  ]
}