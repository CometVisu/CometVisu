{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/ui/core/MSingleSelectionHandling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "events",
    "members",
    "__manager",
    "setValue",
    "item",
    "resetSelection",
    "ui",
    "core",
    "Widget",
    "__getManager",
    "setSelected",
    "TypeError",
    "getValue",
    "getSelected",
    "resetValue",
    "resetSelected",
    "getSelection",
    "selected",
    "setSelection",
    "items",
    "length",
    "Error",
    "isSelected",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "_onChangeSelected",
    "e",
    "newValue",
    "getData",
    "oldValue",
    "getOldData",
    "fireDataEvent",
    "that",
    "SingleSelectionManager",
    "getItems",
    "_getItems",
    "isItemSelectable",
    "_isItemSelectable",
    "isVisible",
    "addListener",
    "setAllowEmptySelection",
    "_isAllowEmptySelection",
    "destruct",
    "_disposeObjects",
    "MSingleSelectionHandling"
  ],
  "mappings": ";;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;AAcAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qCAAhB,EACA;AACE;;;;;AAMAC,IAAAA,MAAM,EACN;AACE;AACA,qBAAgB,oBAFlB;;AAIE;AACA,yBAAoB;AALtB,KARF;;AAiBE;;;;;AAOAC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,SAAS,EAAG,IAFd;;AAKE;;;;;;AAMA;;;;;;AAMAC,MAAAA,QAAQ,EAAG,kBAASC,IAAT,EAAe;AACxB,YAAI,SAASA,IAAb,EAAmB;AACjB,eAAKC,cAAL;AACA,iBAAO,IAAP;AACD;;AAED,YAAID,IAAI,YAAYV,EAAE,CAACY,EAAH,CAAMC,IAAN,CAAWC,MAA/B,EAAuC;AACrC,eAAKC,YAAL,GAAoBC,WAApB,CAAgCN,IAAhC;;AACA,iBAAO,IAAP;AAED,SAJD,MAIO;AACL,iBAAO,IAAIO,SAAJ,CAAc,sDAAd,CAAP;AACD;AACF,OA9BH;;AAgCE;;;;;AAKAC,MAAAA,QAAQ,EAAG,oBAAW;AACpB,eAAO,KAAKH,YAAL,GAAoBI,WAApB,MAAqC,IAA5C;AACD,OAvCH;;AAyCE;;;AAGAC,MAAAA,UAAU,EAAG,sBAAW;AACtB,aAAKL,YAAL,GAAoBM,aAApB;AACD,OA9CH;;AAgDE;;;;;;;;AAQAC,MAAAA,YAAY,EAAG,wBAAW;AACxB,YAAIC,QAAQ,GAAG,KAAKR,YAAL,GAAoBI,WAApB,EAAf;;AAEA,YAAII,QAAJ,EAAc;AACZ,iBAAO,CAACA,QAAD,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,EAAP;AACD;AACF,OAhEH;;AAkEE;;;;;;;AAOAC,MAAAA,YAAY,EAAG,sBAASC,KAAT,EAAgB;AAC7B,gBAAOA,KAAK,CAACC,MAAb;AAEE,eAAK,CAAL;AACE,iBAAKf,cAAL;AACA;;AACF,eAAK,CAAL;AACE,iBAAKI,YAAL,GAAoBC,WAApB,CAAgCS,KAAK,CAAC,CAAD,CAArC;;AACA;;AACF;AACE,kBAAM,IAAIE,KAAJ,CAAU,kEACOF,KAAK,CAACC,MADb,GACsB,SADhC,CAAN;AATJ;AAYD,OAtFH;;AAwFE;;;AAGAf,MAAAA,cAAc,EAAG,0BAAW;AAC1B,aAAKI,YAAL,GAAoBM,aAApB;AACD,OA7FH;;AA+FE;;;;;;;AAOAO,MAAAA,UAAU,EAAG,oBAASlB,IAAT,EAAe;AAC1B,eAAO,KAAKK,YAAL,GAAoBa,UAApB,CAA+BlB,IAA/B,CAAP;AACD,OAxGH;;AA0GE;;;;;AAKAmB,MAAAA,gBAAgB,EAAG,4BAAW;AAC5B,eAAO,KAAKd,YAAL,GAAoBc,gBAApB,EAAP;AACD,OAjHH;;AAoHE;;;;;;;AAOAC,MAAAA,cAAc,EAAE,wBAASC,GAAT,EAAc;AAC5B,eAAO,KAAKhB,YAAL,GAAoBe,cAApB,CAAmCC,GAAnC,CAAP;AACD,OA7HH;;AAgIE;;;;;;AAOA;;;;;;AAMAC,MAAAA,iBAAiB,EAAG,2BAASC,CAAT,EAAY;AAC9B,YAAIC,QAAQ,GAAGD,CAAC,CAACE,OAAF,EAAf;AACA,YAAIC,QAAQ,GAAGH,CAAC,CAACI,UAAF,EAAf;AACA,aAAKC,aAAL,CAAmB,aAAnB,EAAkCJ,QAAlC,EAA4CE,QAA5C;AAEAF,QAAAA,QAAQ,IAAI,IAAZ,GAAmBA,QAAQ,GAAG,EAA9B,GAAmCA,QAAQ,GAAG,CAACA,QAAD,CAA9C;AACAE,QAAAA,QAAQ,IAAI,IAAZ,GAAmBA,QAAQ,GAAG,EAA9B,GAAmCA,QAAQ,GAAG,CAACA,QAAD,CAA9C;AACA,aAAKE,aAAL,CAAmB,iBAAnB,EAAsCJ,QAAtC,EAAgDE,QAAhD;AACD,OArJH;;AAuJE;;;;;;AAMArB,MAAAA,YAAY,EAAG,wBACf;AACE,YAAI,KAAKP,SAAL,IAAkB,IAAtB,EACA;AACE,cAAI+B,IAAI,GAAG,IAAX;AACA,eAAK/B,SAAL,GAAiB,IAAIR,EAAE,CAACY,EAAH,CAAMC,IAAN,CAAW2B,sBAAf,CACjB;AACEC,YAAAA,QAAQ,EAAG,oBAAW;AACpB,qBAAOF,IAAI,CAACG,SAAL,EAAP;AACD,aAHH;AAKEC,YAAAA,gBAAgB,EAAG,0BAASjC,IAAT,EAAe;AAChC,kBAAI6B,IAAI,CAACK,iBAAT,EAA4B;AAC1B,uBAAOL,IAAI,CAACK,iBAAL,CAAuBlC,IAAvB,CAAP;AACD,eAFD,MAEO;AACL,uBAAOA,IAAI,CAACmC,SAAL,EAAP;AACD;AACF;AAXH,WADiB,CAAjB;;AAcA,eAAKrC,SAAL,CAAesC,WAAf,CAA2B,gBAA3B,EAA6C,KAAKd,iBAAlD,EAAqE,IAArE;AACD;;AACD,aAAKxB,SAAL,CAAeuC,sBAAf,CAAsC,KAAKC,sBAAL,EAAtC;;AAEA,eAAO,KAAKxC,SAAZ;AACD;AArLH,KAzBF;;AAkNE;;;;;AAOAyC,IAAAA,QAAQ,EAAG,oBAAW;AACpB,WAAKC,eAAL,CAAqB,WAArB;AACD;AA3NH,GADA;AAhCAlD,EAAAA,EAAE,CAACY,EAAH,CAAMC,IAAN,CAAWsC,wBAAX,CAAoChD,aAApC,GAAoDA,aAApD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This mixin links all methods to manage the single selection.\n *\n * The class which includes the mixin has to implements two methods:\n *\n * <ul>\n * <li><code>_getItems</code>, this method has to return a <code>Array</code>\n *    of <code>qx.ui.core.Widget</code> that should be managed from the manager.\n * </li>\n * <li><code>_isAllowEmptySelection</code>, this method has to return a\n *    <code>Boolean</code> value for allowing empty selection or not.\n * </li>\n * </ul>\n */\nqx.Mixin.define(\"qx.ui.core.MSingleSelectionHandling\",\n{\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\",\n\n    /** Fires after the selection was modified */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    /** @type {qx.ui.core.SingleSelectionManager} the single selection manager */\n    __manager : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param item {null|qx.ui.core.Widget} Item to set as selected value.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue : function(item) {\n      if (null === item) {\n        this.resetSelection();\n        return null;\n      }\n\n      if (item instanceof qx.ui.core.Widget) {\n        this.__getManager().setSelected(item);\n        return null;\n\n      } else {\n        return new TypeError(\"Given argument is not null or a {qx.ui.core.Widget}.\");\n      }\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.\n     */\n    getValue : function() {\n      return this.__getManager().getSelected() || null;\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue : function() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection : function() {\n      var selected = this.__getManager().getSelected();\n\n      if (selected) {\n        return [selected];\n      } else {\n        return [];\n      }\n    },\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if one of the items is not a child element and if\n     *    items contains more than one elements.\n     */\n    setSelection : function(items) {\n      switch(items.length)\n      {\n        case 0:\n          this.resetSelection();\n          break;\n        case 1:\n          this.__getManager().setSelected(items[0]);\n          break;\n        default:\n          throw new Error(\"Could only select one item, but the selection\" +\n            \" array contains \" + items.length + \" items!\");\n      }\n    },\n\n    /**\n     * Clears the whole selection at once.\n     */\n    resetSelection : function() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if one of the items is not a child element.\n     */\n    isSelected : function(item) {\n      return this.__getManager().isSelected(item);\n    },\n\n    /**\n     * Whether the selection is empty.\n     *\n     * @return {Boolean} Whether the selection is empty.\n     */\n    isSelectionEmpty : function() {\n      return this.__getManager().isSelectionEmpty();\n    },\n\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables: function(all) {\n      return this.__getManager().getSelectables(all);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Event listener for <code>changeSelected</code> event on single\n     * selection manager.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    _onChangeSelected : function(e) {\n      var newValue = e.getData();\n      var oldValue = e.getOldData();\n      this.fireDataEvent(\"changeValue\", newValue, oldValue);\n\n      newValue == null ? newValue = [] : newValue = [newValue];\n      oldValue == null ? oldValue = [] : oldValue = [oldValue];\n      this.fireDataEvent(\"changeSelection\", newValue, oldValue);\n    },\n\n    /**\n     * Return the selection manager if it is already exists, otherwise creates\n     * the manager.\n     *\n     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.\n     */\n    __getManager : function()\n    {\n      if (this.__manager == null)\n      {\n        var that = this;\n        this.__manager = new qx.ui.core.SingleSelectionManager(\n        {\n          getItems : function() {\n            return that._getItems();\n          },\n\n          isItemSelectable : function(item) {\n            if (that._isItemSelectable) {\n              return that._isItemSelectable(item);\n            } else {\n              return item.isVisible();\n            }\n          }\n        });\n        this.__manager.addListener(\"changeSelected\", this._onChangeSelected, this);\n      }\n      this.__manager.setAllowEmptySelection(this._isAllowEmptySelection());\n\n      return this.__manager;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  destruct : function() {\n    this._disposeObjects(\"__manager\");\n  }\n});\n"
  ]
}