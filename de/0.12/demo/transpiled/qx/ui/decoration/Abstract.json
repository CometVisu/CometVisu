{
  "className": "qx.ui.decoration.Abstract",
  "packageName": "qx.ui.decoration",
  "name": "Abstract",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.ui.decoration.IDecorator"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 94,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (martinwittemann)\n Fabian Jakobs (fjakobs)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This class acts as abstract class for all decorators. It offers the\n properties for the insets handling. Each decorator has to define its own\n default insets by implementing the template method\n (http://en.wikipedia.org/wiki/Template_Method) <code>_getDefaultInsets</code></p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "members": {
    "__insets": {
      "location": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 34,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_getDefaultInsets": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method. Should return a map containing the default insets of\n the decorator. This could look like this:\n </p>\n<pre>\n return {\n   top : 0,\n   right : 0,\n   bottom : 0,\n   left : 0\n };\n </pre>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing the insets.",
            "type": "Map",
            "description": " Map containing the insets."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isInitialized": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 62,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method. Should return an boolean value if the decorator is\n already initialized or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True, if the decorator is initialized.",
            "type": "Boolean",
            "description": " True, if the decorator is initialized."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_resetInsets": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the insets.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getInsets": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>interface implementation</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} the desired inset as a map with the keys <code>top</code>,\n     <code>right</code>, <code>bottom</code>, <code>left</code>.",
            "type": "Map",
            "description": " the desired inset as a map with the keys <code>top</code>,\n     <code>right</code>, <code>bottom</code>, <code>left</code>."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.decoration.IDecorator",
      "appearsIn": [
        "qx.ui.decoration.IDecorator"
      ]
    },
    "getStyles": {
      "type": "function",
      "name": "getStyles",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.decoration.IDecorator",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the decorator's styles.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of decoration styles",
            "type": "Map",
            "description": " Map of decoration styles"
          }
        ]
      }
    },
    "getPadding": {
      "type": "function",
      "name": "getPadding",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.decoration.IDecorator",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the configured padding minus the border width.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of top, right, bottom and left padding values",
            "type": "Map",
            "description": " Map of top, right, bottom and left padding values"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 91,
        "column": 14
      },
      "end": {
        "line": 93,
        "column": 4
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n  DESTRUCTOR\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "abstract": true,
  "descendants": [
    "qx.ui.decoration.Decorator"
  ]
}