{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/Theme.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "include",
    "__normalizeArray",
    "patch",
    "theme",
    "$$type",
    "title",
    "toString",
    "genericToString",
    "extend",
    "supertheme",
    "basename",
    "createNamespace",
    "__convert",
    "__initializeAliases",
    "$$registry",
    "i",
    "a",
    "l",
    "length",
    "boot",
    "objectOrArray",
    "isArray",
    "aliases",
    "objectMergeWith",
    "getAll",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "__extractType",
    "keys",
    "__inheritableKeys",
    "type",
    "clazz",
    "prototype",
    "$$clazz",
    "target",
    "source",
    "id",
    "base",
    "__allowedKeys",
    "__metaKeys",
    "__validateConfig",
    "mixinTheme",
    "__checkForInvalidTheme",
    "Error",
    "key",
    "errorObj",
    "Theme"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Theme classes contain styling information for certain aspects of the\n * graphical user interface.\n *\n * Supported themes are: colors, decorations, fonts, icons, appearances.\n * The additional meta theme allows for grouping of the individual\n * themes.\n *\n * For more details, take a look at the\n * <a href='http://qooxdoo.org/docs/#desktop/gui/theming.md' target='_blank'>\n * documentation of the theme system in the qooxdoo manual.</a>\n */\nqx.Bootstrap.define(\"qx.Theme\",\n{\n  statics:\n  {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Theme config\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Theme.define(\"name\",\n     * {\n     *   aliases : {\n     *     \"aliasKey\" : \"resourceFolderOrUri\"\n     *   },\n     *   extend : otherTheme,\n     *   include : [MMixinTheme],\n     *   patch : [MMixinTheme],\n     *   colors : {},\n     *   decorations : {},\n     *   fonts : {},\n     *   widgets : {},\n     *   appearances : {},\n     *   meta : {},\n     *   boot : function(){}\n     * });\n     * </pre>\n     *\n     * For more details, take a look at the\n     * <a href='http://qooxdoo.org/docs/#desktop/gui/theming.md' target='_blank'>\n     * documentation of the theme system in the qooxdoo manual.</a>\n     *\n     * @param name {String} name of the mixin\n     * @param config {Map} config structure\n     */\n    define : function(name, config)\n    {\n      if (!config) {\n        var config = {};\n      }\n\n      config.include = this.__normalizeArray(config.include);\n      config.patch = this.__normalizeArray(config.patch);\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateConfig(name, config);\n      }\n\n      // Create alias\n      var theme =\n      {\n        $$type : \"Theme\",\n        name : name,\n        title : config.title,\n\n        // Attach toString\n        toString : this.genericToString\n      };\n\n      // Remember extend\n      if (config.extend) {\n        theme.supertheme = config.extend;\n      }\n\n      // Assign to namespace\n      theme.basename = qx.Bootstrap.createNamespace(name, theme);\n\n      // Convert theme entry from Object to Function (for prototype inheritance)\n      this.__convert(theme, config);\n\n      this.__initializeAliases(theme, config);\n\n      // Store class reference in global class registry\n      this.$$registry[name] = theme;\n\n      // Include mixin themes\n      for (var i=0, a=config.include, l=a.length; i<l; i++) {\n        this.include(theme, a[i]);\n      }\n\n      for (var i=0, a=config.patch, l=a.length; i<l; i++) {\n        this.patch(theme, a[i]);\n      }\n\n      // Run boot code\n      if (config.boot) {\n      \tconfig.boot();\n      }\n    },\n\n    /**\n     * Normalize an object to an array\n     *\n     * @param objectOrArray {Object|Array} Either an object that is to be\n     *   normalized to an array, or an array, which is just passed through\n     *\n     * @return {Array} Either an array that has the original object as its\n     *   single item, or the original array itself\n     */\n    __normalizeArray : function(objectOrArray)\n    {\n      if (!objectOrArray) {\n        return [];\n      }\n\n      if (qx.Bootstrap.isArray(objectOrArray)) {\n        return objectOrArray;\n      } else {\n        return [objectOrArray];\n      }\n    },\n\n\n    /**\n     * Initialize alias inheritance\n     *\n     * @param theme {Map} The theme\n     * @param config {Map} config structure\n     */\n    __initializeAliases : function(theme, config)\n    {\n      var aliases = config.aliases || {};\n      if (config.extend && config.extend.aliases) {\n        qx.Bootstrap.objectMergeWith(aliases, config.extend.aliases, false);\n      }\n\n      theme.aliases = aliases;\n    },\n\n\n    /**\n     * Return a map of all known themes\n     *\n     * @return {Map} known themes\n     */\n    getAll : function() {\n      return this.$$registry;\n    },\n\n\n    /**\n     * Returns a theme by name\n     *\n     * @param name {String} theme name to check\n     * @return {Object ? void} theme object\n     */\n    getByName : function(name) {\n      return this.$$registry[name];\n    },\n\n\n    /**\n     * Determine if theme exists\n     *\n     * @param name {String} theme name to check\n     * @return {Boolean} true if theme exists\n     */\n    isDefined : function(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n\n    /**\n     * Determine the number of themes which are defined\n     *\n     * @return {Number} the number of classes\n     */\n    getTotalNumber : function() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all themes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The interface identifier\n     */\n    genericToString : function() {\n      return \"[Theme \" + this.name + \"]\";\n    },\n\n\n    /**\n     * Extract the inheritable key (could be only one)\n     *\n     * @param config {Map} The map from where to extract the key\n     * @return {String} the key which was found\n     */\n    __extractType : function(config)\n    {\n      for (var i=0, keys=this.__inheritableKeys, l=keys.length; i<l; i++)\n      {\n        if (config[keys[i]]) {\n          return keys[i];\n        }\n      }\n    },\n\n\n    /**\n     * Convert existing entry to a prototype based inheritance function\n     *\n     * @param theme {Theme} newly created theme object\n     * @param config {Map} incoming theme configuration\n     */\n    __convert : function(theme, config)\n    {\n      var type = this.__extractType(config);\n\n      // Use theme key from extended theme if own one is not available\n      if (config.extend && !type) {\n        type = config.extend.type;\n      }\n\n      // Save theme type\n      theme.type = type || \"other\";\n\n      // Create pseudo class\n      var clazz = function() {};\n\n      // Process extend config\n      if (config.extend) {\n        clazz.prototype = new config.extend.$$clazz;\n      }\n\n      var target = clazz.prototype;\n      var source = config[type];\n\n      // Copy entries to prototype\n      for (var id in source)\n      {\n        target[id] = source[id];\n\n        // Appearance themes only:\n        // Convert base flag to class reference (needed for mixin support)\n        if (target[id].base)\n        {\n          if (qx.core.Environment.get(\"qx.debug\"))\n          {\n            if (!config.extend) {\n              throw new Error(\"Found base flag in entry '\" + id + \"' of theme '\" + config.name + \"'. Base flags are not allowed for themes without a valid super theme!\");\n            }\n          }\n\n          target[id].base = config.extend;\n        }\n      }\n\n      // store pseudo class\n      theme.$$clazz = clazz;\n\n      // and create instance under the old key\n      theme[type] = new clazz;\n    },\n\n\n    /** @type {Map} Internal theme registry */\n    $$registry : {},\n\n\n    /** @type {Array} Keys which support inheritance */\n    __inheritableKeys : [ \"colors\", \"borders\", \"decorations\", \"fonts\", \"icons\", \"widgets\", \"appearances\", \"meta\" ],\n\n\n    /** @type {Map} allowed keys in theme definition */\n    __allowedKeys : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"title\"       : \"string\", // String\n        \"aliases\"     : \"object\", // Map\n        \"type\"        : \"string\", // String\n        \"extend\"      : \"object\", // Theme\n        \"colors\"      : \"object\", // Map\n        \"borders\"     : \"object\", // Map\n        \"decorations\" : \"object\", // Map\n        \"fonts\"       : \"object\", // Map\n        \"icons\"       : \"object\", // Map\n        \"widgets\"     : \"object\", // Map\n        \"appearances\" : \"object\", // Map\n        \"meta\"        : \"object\", // Map\n        \"include\"     : \"object\", // Array\n        \"patch\"       : \"object\", // Array\n        \"boot\"        : \"function\" // Function\n      },\n\n      \"default\" : null\n    }),\n\n    /** @type {Map} allowed keys inside a meta theme block */\n    __metaKeys :qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"color\" : \"object\",\n        \"border\" : \"object\",\n        \"decoration\" : \"object\",\n        \"font\" : \"object\",\n        \"icon\" : \"object\",\n        \"appearance\" : \"object\",\n        \"widget\" : \"object\"\n      },\n\n      \"default\" : null\n    }),\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     * @throws {Error} if the given config is not valid (e.g. wrong key or wrong key value)\n     */\n    __validateConfig : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(name, config)\n      {\n        var allowed = this.__allowedKeys;\n        for (var key in config)\n        {\n          if (allowed[key] === undefined) {\n            throw new Error('The configuration key \"' + key + '\" in theme \"' + name + '\" is not allowed!');\n          }\n\n          if (config[key] == null) {\n            throw new Error('Invalid key \"' + key + '\" in theme \"' + name + '\"! The value is undefined/null!');\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error('Invalid type of key \"' + key + '\" in theme \"' + name + '\"! The type of the key must be \"' + allowed[key] + '\"!');\n          }\n        }\n\n        // Validate maps\n        var maps = [ \"colors\", \"borders\", \"decorations\", \"fonts\", \"icons\", \"widgets\", \"appearances\", \"meta\" ];\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key] !== undefined && (config[key] instanceof Array || config[key] instanceof RegExp || config[key] instanceof Date || config[key].classname !== undefined)) {\n            throw new Error('Invalid key \"' + key + '\" in theme \"' + name + '\"! The value needs to be a map!');\n          }\n        }\n\n        // Check conflicts (detect number ...)\n        var counter = 0;\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key]) {\n            counter++;\n          }\n\n          if (counter > 1) {\n            throw new Error(\"You can only define one theme category per file! Invalid theme: \" + name);\n          }\n        }\n\n        // Validate meta\n        if (config.meta)\n        {\n          var value;\n          for (var key in config.meta)\n          {\n            value = config.meta[key];\n\n            if (this.__metaKeys[key] === undefined) {\n              throw new Error('The key \"' + key + '\" is not allowed inside a meta theme block.');\n            }\n\n            if (typeof value !== this.__metaKeys[key]) {\n              throw new Error('The type of the key \"' + key + '\" inside the meta block is wrong.');\n            }\n\n            if (!(typeof value === \"object\" && value !== null && value.$$type === \"Theme\")) {\n              throw new Error('The content of a meta theme must reference to other themes. The value for \"' + key + '\" in theme \"' + name + '\" is invalid: ' + value);\n            }\n          }\n        }\n\n        // Validate extend\n        if (config.extend && config.extend.$$type !== \"Theme\") {\n          throw new Error('Invalid extend in theme \"' + name + '\": ' + config.extend);\n        }\n\n        // Validate include\n        if (config.include) {\n          for (var i=0,l=config.include.length; i<l; i++) {\n            if (typeof(config.include[i]) == \"undefined\" || config.include[i].$$type !== \"Theme\") {\n              throw new Error('Invalid include in theme \"' + name + '\": ' + config.include[i]);\n            }\n          }\n        }\n\n        // Validate patch\n        if (config.patch) {\n          for (var i=0,l=config.patch.length; i<l; i++) {\n            if (typeof(config.patch[i]) === \"undefined\" || config.patch[i].$$type !== \"Theme\") {\n              throw new Error('Invalid patch in theme \"' + name + '\": ' + config.patch[i]);\n            }\n          }\n        }\n      },\n\n      \"default\" : function() {}\n    }),\n\n\n    /**\n     * Include all keys of the given mixin theme into the theme. The mixin may\n     * include keys which are already defined in the target theme. Existing\n     * features of equal name will be overwritten.\n     *\n     * @param theme {Theme} An existing theme which should be modified by including the mixin theme.\n     * @param mixinTheme {Theme} The theme to be included.\n     */\n    patch : function(theme, mixinTheme)\n    {\n      this.__checkForInvalidTheme(mixinTheme);\n\n      var type = this.__extractType(mixinTheme);\n      if (type !== this.__extractType(theme)) {\n        throw new Error(\"The mixins '\" + theme.name + \"' are not compatible '\" + mixinTheme.name + \"'!\");\n      }\n\n      var source = mixinTheme[type];\n      var target = theme.$$clazz.prototype;\n\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    },\n\n\n    /**\n     * Include all keys of the given mixin theme into the theme. If the\n     * mixin includes any keys that are already available in the\n     * class, they will be silently ignored. Use the {@link #patch} method\n     * if you need to overwrite keys in the current class.\n     *\n     * @param theme {Theme} An existing theme which should be modified by including the mixin theme.\n     * @param mixinTheme {Theme} The theme to be included.\n     */\n    include : function(theme, mixinTheme)\n    {\n      this.__checkForInvalidTheme(mixinTheme);\n\n      var type = mixinTheme.type;\n      if (type !== theme.type) {\n        throw new Error(\"The mixins '\" + theme.name + \"' are not compatible '\" + mixinTheme.name + \"'!\");\n      }\n\n      var source = mixinTheme[type];\n      var target = theme.$$clazz.prototype;\n\n      for (var key in source)\n      {\n        //Skip keys already present\n        if (target[key] !== undefined) {\n          continue;\n        }\n\n        target[key] = source[key];\n      }\n    },\n\n    /**\n     * Helper method to check for an invalid theme\n     *\n     * @param mixinTheme {qx.Theme?null} theme to check\n     * @throws {Error} if the theme is not valid\n     */\n    __checkForInvalidTheme: function(mixinTheme)\n    {\n      if (typeof mixinTheme === \"undefined\" || mixinTheme == null)\n      {\n        var errorObj = new Error(\"Mixin theme is not a valid theme!\");\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          var stackTrace = qx.dev.StackTrace.getStackTraceFromError(errorObj);\n          qx.Bootstrap.error(this, stackTrace);\n        }\n\n        throw errorObj;\n      }\n    }\n  }\n});\n"
  ]
}