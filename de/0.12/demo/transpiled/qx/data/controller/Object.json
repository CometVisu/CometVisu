{
  "className": "qx.data.controller.Object",
  "packageName": "qx.data.controller",
  "name": "Object",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 49,
        "column": 0
      },
      "end": {
        "line": 360,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2009 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Martin Wittemann (martinwittemann)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<h2>Object Controller</h2>\n<p><em>General idea</em>\n The idea of the object controller is to make the binding of one model object\n containing one or more properties as easy as possible. Therefore the\n controller can take a model as property. Every property in that model can be\n bound to one or more target properties. The binding will be for\n atomic types only like Numbers, Strings, â€¦\n<em>Features</em></p>\n<ul>\n<li>Manages the bindings between the model properties and the different targets</li>\n<li>No need for the user to take care of the binding ids</li>\n<li>Can create an bidirectional binding (read- / write-binding)</li>\n<li>Handles the change of the model which means adding the old targets\n<em>Usage</em>\nThe controller only can work if a model is set. If the model property is\nnull, the controller is not working. But it can be null on any time.\n<em>Cross reference</em></li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n<li>If you want to bind a form widget, use {@link qx.data.controller.Form}</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 63,
        "column": 14
      },
      "end": {
        "line": 75,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n CONSTRUCTOR\n**********************************************************************\n</code></pre>"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "model {qx.core.Object?null} The model for the model property.",
          "paramName": "model",
          "description": " The model for the model property.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.core.Object"
        }
      ]
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The model object which does have the properties for the binding.</p>"
          }
        ]
      },
      "name": "model",
      "propertyType": "new",
      "event": "changeModel",
      "apply": "_applyModel",
      "nullable": true,
      "allowNull": true,
      "check": "qx.core.Object"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__targets": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>private members</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__bindings": {
      "location": {
        "start": {
          "line": 110,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applyModel": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if a new model has been set.\n All bindings will be moved to the new model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new model.",
            "paramName": "value",
            "description": " The new model.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old model.",
            "paramName": "old",
            "description": " The old model.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "model"
      ]
    },
    "addTarget": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new target to the controller. After adding the target, the given\n property of the model will be bound to the targets property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object on which the property\n   should be bound.",
            "paramName": "targetObject",
            "description": " The object on which the property\n   should be bound.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property to which the binding should\n   go.",
            "paramName": "targetProperty",
            "description": " The property to which the binding should\n   go.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property in the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property in the model.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "bidirectional {Boolean?false} Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "paramName": "bidirectional",
            "description": " Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "options {Map?null} The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "options",
            "description": " The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "reverseOptions {Map?null} The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "reverseOptions",
            "description": " The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__addTarget": {
      "location": {
        "start": {
          "line": 234,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the work for {@link #addTarget} but without saving the target\n to the internal target registry.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object on which the property\n   should be bound.",
            "paramName": "targetObject",
            "description": " The object on which the property\n   should be bound.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property to which the binding should\n   go.",
            "paramName": "targetProperty",
            "description": " The property to which the binding should\n   go.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property in the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property in the model.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "bidirectional {Boolean?false} Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "paramName": "bidirectional",
            "description": " Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "options {Map?null} The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "options",
            "description": " The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "reverseOptions {Map?null} The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "reverseOptions",
            "description": " The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "removeTarget": {
      "location": {
        "start": {
          "line": 277,
          "column": 4
        },
        "end": {
          "line": 292,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the target identified by the three properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object on which the\n   binding exist.",
            "paramName": "targetObject",
            "description": " The target object on which the\n   binding exist.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The targets property name used by the\n   adding of the target.",
            "paramName": "targetProperty",
            "description": " The targets property name used by the\n   adding of the target.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property of the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property of the model.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__removeTargetFrom": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 344,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the work for {@link #removeTarget} but without removing the target\n from the internal registry.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object on which the\n   binding exist.",
            "paramName": "targetObject",
            "description": " The target object on which the\n   binding exist.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The targets property name used by the\n   adding of the target.",
            "paramName": "targetProperty",
            "description": " The targets property name used by the\n   adding of the target.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property of the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property of the model.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourceObject {String} The source object from which the binding\n   comes.",
            "paramName": "sourceObject",
            "description": " The source object from which the binding\n   comes.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for model"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for model"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>model</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 354,
        "column": 13
      },
      "end": {
        "line": 359,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>**********************************************************************\n  DESTRUCT\n**********************************************************************\n</code></pre>"
        }
      ]
    }
  },
  "descendants": []
}