{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/core/MAssert.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "assert",
    "condition",
    "msg",
    "core",
    "Assert",
    "fail",
    "compact",
    "assertTrue",
    "value",
    "assertFalse",
    "assertEquals",
    "expected",
    "found",
    "assertNotEquals",
    "assertEqualsFloat",
    "assertNotEqualsFloat",
    "assertIdentical",
    "assertNotIdentical",
    "assertNotUndefined",
    "assertUndefined",
    "assertNotNull",
    "assertNull",
    "assertJsonEquals",
    "assertMatch",
    "str",
    "re",
    "assertArgumentsCount",
    "args",
    "minCount",
    "maxCount",
    "assertEventFired",
    "obj",
    "event",
    "invokeFunc",
    "listener",
    "assertEventNotFired",
    "assertException",
    "callback",
    "exception",
    "assertInArray",
    "array",
    "assertNotInArray",
    "assertArrayEquals",
    "assertKeyInMap",
    "map",
    "assertFunction",
    "assertString",
    "assertBoolean",
    "assertNumber",
    "assertPositiveNumber",
    "assertInteger",
    "assertPositiveInteger",
    "assertInRange",
    "min",
    "max",
    "assertObject",
    "assertArray",
    "assertMap",
    "assertRegExp",
    "assertType",
    "type",
    "assertInstance",
    "clazz",
    "assertInterface",
    "iface",
    "assertCssColor",
    "assertElement",
    "assertQxObject",
    "assertQxWidget",
    "MAssert"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This mixin includes all assertions from {@link qx.core.Assert} to conveniently\n * call assertions. It is included into {@link qx.core.Object} if debugging code\n * is enabled. It is further included into all unit tests\n * {@link qx.dev.unit.TestCase}.\n *\n * @require(qx.core.Assert)\n */\nqx.Mixin.define(\"qx.core.MAssert\",\n{\n  members :\n  {\n  /**\n   * Assert that the condition evaluates to <code>true</code>.\n   *\n   * @param condition {var} Condition to check for. Must evaluate to\n   *    <code>true</code>.\n   * @param msg {String?} Message to be shown if the assertion fails.\n   */\n    assert : function(condition, msg) {\n      qx.core.Assert.assert(condition, msg);\n    },\n\n\n    /**\n     * Raise an {@link AssertionError}\n     *\n     * @param msg {String} Message to be shown if the assertion fails.\n     * @param compact {Boolean?false} Show less verbose message. Default: false.\n     */\n    fail : function(msg, compact) {\n      qx.core.Assert.fail(msg, compact);\n    },\n\n\n    /**\n     * Assert that the value is <code>true</code> (Identity check).\n     *\n     * @param value {Boolean} Condition to check for. Must be identical to\n     *    <code>true</code>.\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertTrue : function(value, msg) {\n      qx.core.Assert.assertTrue(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is <code>false</code> (Identity check).\n     *\n     * @param value {Boolean} Condition to check for. Must be identical to\n     *    <code>false</code>.\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertFalse : function(value, msg) {\n      qx.core.Assert.assertFalse(value, msg);\n    },\n\n\n    /**\n     * Assert that both values are equal. (Uses the equality operator\n     * <code>==</code>.)\n     *\n     * @param expected {var} Reference value\n     * @param found {var} found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertEquals : function(expected, found, msg) {\n      qx.core.Assert.assertEquals(expected, found, msg);\n    },\n\n    /**\n     * Assert that both values are not equal. (Uses the not equality operator\n     * <code>!=</code>.)\n     *\n     * @param expected {var} Reference value\n     * @param found {var} found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNotEquals : function(expected, found, msg) {\n      qx.core.Assert.assertNotEquals(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that both float values are equal. This might be needed because\n     * of the natural floating point inaccuracy of computers.\n     *\n     * @param expected {Float} Reference value\n     * @param found {Float} Found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertEqualsFloat : function(expected, found, msg) {\n      qx.core.Assert.assertEqualsFloat(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that both float values are not equal. This might be needed\n     * because of the natural floating point inaccuracy of computers.\n     *\n     * @param expected {Float} Reference value\n     * @param found {Float} Found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNotEqualsFloat : function(expected, found, msg) {\n      qx.core.Assert.assertNotEqualsFloat(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that both values are identical. (Uses the identity operator\n     * <code>===</code>.)\n     *\n     * @param expected {var} Reference value\n     * @param found {var} found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertIdentical : function(expected, found, msg) {\n      qx.core.Assert.assertIdentical(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that both values are not identical. (Uses the not identity operator\n     * <code>!==</code>.)\n     *\n     * @param expected {var} Reference value\n     * @param found {var} found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNotIdentical : function(expected, found, msg) {\n      qx.core.Assert.assertNotIdentical(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that the value is not <code>undefined</code>.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNotUndefined : function(value, msg) {\n      qx.core.Assert.assertNotUndefined(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is <code>undefined</code>.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertUndefined : function(value, msg) {\n      qx.core.Assert.assertUndefined(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is not <code>null</code>.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNotNull : function(value, msg) {\n      qx.core.Assert.assertNotNull(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is <code>null</code>.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNull : function(value, msg) {\n      qx.core.Assert.assertNull(value, msg);\n    },\n\n\n    /**\n     * Assert that the first two arguments are equal, when serialized into\n     * JSON.\n     *\n     * @param expected {var} The expected value\n     * @param found {var} The found value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertJsonEquals : function(expected, found, msg) {\n      qx.core.Assert.assertJsonEquals(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that the given string matches the regular expression\n     *\n     * @param str {String} String, which should match the regular expression\n     * @param re {RegExp} Regular expression to match\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertMatch : function(str, re, msg) {\n      qx.core.Assert.assertMatch(str, re, msg);\n    },\n\n\n    /**\n     * Assert that the number of arguments is within the given range\n     *\n     * @param args {arguments} The <code>arguments<code> variable of a function\n     * @param minCount {Integer} Minimal number of arguments\n     * @param maxCount {Integer} Maximum number of arguments\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertArgumentsCount : function(args, minCount, maxCount, msg) {\n      qx.core.Assert.assertArgumentsCount(args, minCount, maxCount, msg);\n    },\n\n\n    /**\n     * Assert that an event is fired.\n     *\n     * @param obj {Object} The object on which the event should be fired.\n     * @param event {String} The event which should be fired.\n     * @param invokeFunc {Function} The function which will be invoked and which\n     *   fires the event.\n     * @param listener {Function?null} The function which will be invoked in the\n     *   listener. The function has one parameter called e which is the event.\n     * @param msg {String?\"\"} Message to be shows if the assertion fails.\n     */\n    assertEventFired : function(obj, event, invokeFunc, listener, msg) {\n      qx.core.Assert.assertEventFired(obj, event, invokeFunc, listener, msg);\n    },\n\n\n    /**\n     * Assert that an event is not fired.\n     *\n     * @param obj {Object} The object on which the event should be fired.\n     * @param event {String} The event which should be fired.\n     * @param invokeFunc {Function} The function which will be invoked and which\n     *   should not fire the event.\n     * @param msg {String?} Message to be shows if the assertion fails.\n     */\n    assertEventNotFired : function(obj, event, invokeFunc, msg) {\n      qx.core.Assert.assertEventNotFired(obj, event, invokeFunc, msg);\n    },\n\n\n    /**\n     * Asserts that the callback raises a matching exception.\n     *\n     * @param callback {Function} function to check\n     * @param exception {Error?Error} Expected constructor of the exception.\n     *   The assertion fails if the raised exception is not an instance of the\n     *   parameter.\n     * @param re {String|RegExp} The assertion fails if the error message does\n     *   not match this parameter\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertException : function(callback, exception, re, msg) {\n      qx.core.Assert.assertException(callback, exception, re, msg);\n    },\n\n\n    /**\n     * Assert that the value is an item in the given array.\n     *\n     * @param value {var} Value to check\n     * @param array {Array} List of valid values\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertInArray : function(value, array, msg) {\n      qx.core.Assert.assertInArray(value, array, msg);\n    },\n\n\n    /**\n     * Assert that the value is NOT an item in the given array\n     *\n     * @param value {var} Value to check\n     * @param array {Array} List of values\n     * @param msg {String?} Message to be shown if the assertion fails\n     */\n    assertNotInArray : function(value, array, msg) {\n      qx.core.Assert.assertNotInArray(value, array, msg);\n    },\n\n\n    /**\n     * Assert that both array have identical array items.\n     *\n     * @param expected {Array} The expected array\n     * @param found {Array} The found array\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertArrayEquals : function(expected, found, msg) {\n      qx.core.Assert.assertArrayEquals(expected, found, msg);\n    },\n\n\n    /**\n     * Assert that the value is a key in the given map.\n     *\n     * @param value {var} Value to check\n     * @param map {Map} Map, where the keys represent the valid values\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertKeyInMap : function(value, map, msg) {\n      qx.core.Assert.assertKeyInMap(value, map, msg);\n    } ,\n\n\n    /**\n     * Assert that the value is a function.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertFunction : function(value, msg) {\n      qx.core.Assert.assertFunction(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a string.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertString : function(value, msg) {\n      qx.core.Assert.assertString(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a boolean.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertBoolean : function(value, msg) {\n      qx.core.Assert.assertBoolean(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a number.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertNumber : function(value, msg) {\n      qx.core.Assert.assertNumber(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a number >= 0.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertPositiveNumber : function(value, msg) {\n      qx.core.Assert.assertPositiveNumber(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is an integer.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertInteger : function(value, msg) {\n      qx.core.Assert.assertInteger(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is an integer >= 0.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertPositiveInteger : function(value, msg) {\n      qx.core.Assert.assertPositiveInteger(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is inside the given range.\n     *\n     * @param value {var} Value to check\n     * @param min {Number} lower bound\n     * @param max {Number} upper bound\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertInRange : function(value, min, max, msg) {\n      qx.core.Assert.assertInRange(value, min, max, msg);\n    },\n\n\n    /**\n     * Assert that the value is an object.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertObject : function(value, msg) {\n      qx.core.Assert.assertObject(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is an array.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertArray : function(value, msg) {\n      qx.core.Assert.assertArray(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a map either created using <code>new Object</code>\n     * or by using the object literal notation <code>{ ... }</code>.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertMap : function(value, msg) {\n      qx.core.Assert.assertMap(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a regular expression.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertRegExp : function(value, msg) {\n       qx.core.Assert.assertRegExp(value, msg);\n    },\n\n\n    /**\n     * Assert that the value has the given type using the <code>typeof</code>\n     * operator. Because the type is not always what it is supposed to be it is\n     * better to use more explicit checks like {@link #assertString} or\n     * {@link #assertArray}.\n     *\n     * @param value {var} Value to check\n     * @param type {String} expected type of the value\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertType : function(value, type, msg) {\n      qx.core.Assert.assertType(value, type, msg);\n    },\n\n\n    /**\n     * Assert that the value is an instance of the given class.\n     *\n     * @param value {var} Value to check\n     * @param clazz {Class} The value must be an instance of this class\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertInstance : function(value, clazz, msg) {\n      qx.core.Assert.assertInstance(value, clazz, msg);\n    },\n\n\n    /**\n     * Assert that the value implements the given interface.\n     *\n     * @param value {var} Value to check\n     * @param iface {Class} The value must implement this interface\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertInterface : function(value, iface, msg) {\n      qx.core.Assert.assertInterface(value, iface, msg);\n    },\n\n\n    /**\n     * Assert that the value represents the given CSS color value. This method\n     * parses the color strings and compares the RGB values. It is able to\n     * parse values supported by {@link qx.util.ColorUtil#stringToRgb}.\n     *\n     *  @param expected {String} The expected color\n     *  @param value {String} The value to check\n     *  @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertCssColor : function(expected, value, msg) {\n      qx.core.Assert.assertCssColor(expected, value, msg);\n    },\n\n\n    /**\n     * Assert that the value is a DOM element.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertElement : function(value, msg) {\n      qx.core.Assert.assertElement(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is an instance of {@link qx.core.Object}.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertQxObject : function(value, msg) {\n      qx.core.Assert.assertQxObject(value, msg);\n    },\n\n\n    /**\n     * Assert that the value is an instance of {@link qx.ui.core.Widget}.\n     *\n     * @param value {var} Value to check\n     * @param msg {String?} Message to be shown if the assertion fails.\n     */\n    assertQxWidget : function(value, msg) {\n      qx.core.Assert.assertQxWidget(value, msg);\n    }\n  }\n});\n"
  ]
}