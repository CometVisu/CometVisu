{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/core/ObjectRegistry.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "inShutDown",
    "__registry",
    "__nextHash",
    "__postId",
    "__stackTraces",
    "register",
    "obj",
    "registry",
    "hash",
    "core",
    "ObjectRegistry",
    "toHashCode",
    "unregister",
    "$$hash",
    "clearHashCode",
    "createHashCode",
    "String",
    "$$discardedHashCode",
    "ex",
    "removeAttribute",
    "fromHashCode",
    "suppressWarnings",
    "log",
    "Logger",
    "warn",
    "hasHashCode",
    "shutdown",
    "hashes",
    "push",
    "sort",
    "a",
    "b",
    "parseInt",
    "i",
    "l",
    "length",
    "dispose",
    "error",
    "toString",
    "debug",
    "getRegistry",
    "getNextHash",
    "getPostId",
    "getStackTraces",
    "defer",
    "window",
    "top",
    "frames"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Registration for all instances of qooxdoo classes. Mainly\n * used to manage them for the final shutdown sequence and to\n * use weak references when connecting widgets to DOM nodes etc.\n *\n * @ignore(qx.dev, qx.dev.Debug.*)\n */\nqx.Bootstrap.define(\"qx.core.ObjectRegistry\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** \n     * @type {Boolean} Whether the application is in the shutdown phase\n     * @deprecated {6.0} shutdown is not a valid mechanism to terminate apps \n     * */\n    inShutDown : false,\n\n    /** @type {Map} Internal data structure to store objects */\n    __registry : {},\n\n    /** @type {Integer} Next new hash code. */\n    __nextHash : 0,\n\n    /** @type {String} Post id for hash code creation. */\n    __postId : \"\",\n\n    /** @type {Map} Object hashes to stack traces (for dispose profiling only) */\n    __stackTraces : {},\n\n    /**\n     * Registers an object into the database. This adds a hashcode\n     * to the object (if not already done before) and stores it under\n     * this hashcode. You can access this object later using the hashcode\n     * by calling {@link #fromHashCode}.\n     *\n     * All registered objects are automatically disposed on application\n     * shutdown. Each registered object must at least have a method\n     * called <code>dispose</code>.\n     *\n     * @param obj {Object} Any object with a dispose() method\n     */\n    register : function(obj)\n    {\n      var registry = this.__registry;\n      if (!registry) {\n        return;\n      }\n\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!obj.dispose) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      registry[hash] = obj;\n    },\n\n\n    /**\n     * Removes the given object from the database.\n     *\n     * @param obj {Object} Any previously registered object\n     */\n    unregister : function(obj)\n    {\n      var hash = obj.$$hash;\n      if (hash == null) {\n        return;\n      }\n\n      var registry = this.__registry;\n      if (registry && registry[hash])\n      {\n        delete registry[hash];\n      }\n\n      this.clearHashCode(obj);\n    },\n\n\n    /**\n     * Returns an unique identifier for the given object. If such an identifier\n     * does not yet exist, create it.\n     *\n     * @param obj {Object} the object to get the hashcode for\n     * @return {String} unique identifier for the given object\n     */\n    toHashCode : function(obj)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null) {\n        return hash;\n      }\n\n      // Create new hash code\n      hash = this.createHashCode();\n\n      // Store\n      obj.$$hash = hash;\n\n      if (qx.core.Environment.get(\"qx.debug.dispose\")) {\n        if (qx.dev && qx.dev.Debug && qx.dev.Debug.disposeProfilingActive) {\n          this.__stackTraces[hash] = qx.dev.StackTrace.getStackTrace();\n        }\n      }\n      \n      return obj.$$hash;\n    },\n    \n    \n    /**\n     * Creates a hash code\n     * \n     * @return {String}\n     */\n    createHashCode: function() {\n      var hash = String((this.__nextHash++) + this.__postId);\n      return hash;\n    },\n\n\n    /**\n     * Clears the unique identifier on the given object.\n     *\n     * @param obj {Object} the object to clear the hashcode for\n     */\n    clearHashCode : function(obj)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null)\n      {\n        // Delete the hash code\n        try\n        {\n          obj.$$discardedHashCode = hash;\n          delete obj.$$hash;\n        }\n        catch(ex)\n        {\n          // IE has trouble directly removing the hash\n          // but it's ok with using removeAttribute\n          if (obj.removeAttribute) {\n            obj.removeAttribute(\"$$hash\");\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Get an object instance by its hash code as returned by {@link #toHashCode}.\n     * If the object is already disposed or the hashCode is invalid,\n     * <code>null</code> is returned.\n     *\n     * @param hash {String} The object's hash code.\n     * @param suppressWarnings {Boolean?} if true warnings are suppressed; default is false\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    fromHashCode : function(hash, suppressWarnings) {\n      var obj = this.__registry[hash] || null;\n      if (!obj && !suppressWarnings) {\n        qx.log.Logger.warn(this, \"Object with hash code \"+ hash + \" does not exist (since Qooxdoo 6.0 fromHashCode requires that you explicitly register objects with qx.core.ObjectRegistry.register)\");\n      }\n      return obj;\n    },\n\n\n    /**\n     * Detects whether an object instance is indexed by its hash code as returned by {@link #toHashCode}.\n     * Unlike {@link #fromHashCode} this does not output warnings if the object does not exist\n     *\n     * @param hash {String} The object's hash code.\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    hasHashCode : function(hash) {\n      return !!this.__registry[hash];\n    },\n\n\n    /**\n     * Disposing all registered object and cleaning up registry. This is\n     * automatically executed at application shutdown.\n     * \n     * @deprecated {6.0} shutdown is not a valid means to clean up because destruction order\n     * is not defined and dispose()/destructors are deprecated in favour of automatic\n     * garbage collection\n     */\n    shutdown : function()\n    {\n      this.inShutDown = true;\n\n      var registry = this.__registry;\n      var hashes = [];\n\n      for (var hash in registry) {\n        hashes.push(hash);\n      }\n\n      // sort the objects! Remove the objecs created at startup\n      // as late as possible\n      hashes.sort(function(a, b) {\n        return parseInt(b, 10)-parseInt(a, 10);\n      });\n\n      var obj, i=0, l=hashes.length;\n      while(true)\n      {\n        try\n        {\n          for (; i<l; i++)\n          {\n            hash = hashes[i];\n            obj = registry[hash];\n\n            if (obj && obj.dispose) {\n              obj.dispose();\n            }\n          }\n        }\n        catch(ex)\n        {\n          qx.Bootstrap.error(this, \"Could not dispose object \" + obj.toString() + \": \" + ex, ex);\n\n          if (i !== l)\n          {\n            i++;\n            continue;\n          }\n        }\n\n        break;\n      }\n\n      qx.Bootstrap.debug(this, \"Disposed \" + l + \" objects\");\n\n      delete this.__registry;\n    },\n\n\n    /**\n     * Returns the object registry.\n     *\n     * @return {Object} The registry\n     */\n    getRegistry : function() {\n      return this.__registry;\n    },\n\n\n    /**\n     * Returns the next hash code that will be used.\n     * \n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getNextHash : function() {\n      return this.__nextHash;\n    },\n\n\n    /**\n     * Returns the postfix that identifies the current iframe\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getPostId : function() {\n      return this.__postId;\n    },\n\n\n    /**\n     * Returns the map of stack traces recorded when objects are registered\n     * (for dispose profiling)\n     * @return {Map} Map: object hash codes to stack traces\n     * @internal\n     */\n    getStackTraces : function() {\n      return this.__stackTraces;\n    }\n  },\n\n  defer : function(statics)\n  {\n    if (window && window.top)\n    {\n      var frames = window.top.frames;\n      for (var i = 0; i < frames.length; i++)\n      {\n        if (frames[i] === window)\n        {\n          statics.__postId = \"-\" + (i + 1);\n          return;\n        }\n      }\n    }\n    statics.__postId = \"-0\";\n  }\n});\n"
  ]
}