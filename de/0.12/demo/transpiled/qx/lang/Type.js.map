{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/lang/Type.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getClass",
    "isString",
    "isArray",
    "isObject",
    "isFunction",
    "isFunctionOrAsyncFunction",
    "isRegExp",
    "value",
    "isNumber",
    "Number",
    "isBoolean",
    "Boolean",
    "isDate",
    "Date",
    "isError",
    "Error",
    "isPromise",
    "then",
    "lang",
    "Type"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAIAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,cAApB,EACA;AACEC,IAAAA,OAAO,EACP;AACE;;;;;;;;;AASAC,MAAAA,QAAQ,EAAGN,EAAE,CAACC,SAAH,CAAaK,QAV1B;;AAaE;;;;;;;AAOAC,MAAAA,QAAQ,EAAGP,EAAE,CAACC,SAAH,CAAaM,QApB1B;;AAuBE;;;;;;;AAOAC,MAAAA,OAAO,EAAGR,EAAE,CAACC,SAAH,CAAaO,OA9BzB;;AAiCE;;;;;;;;AAQCC,MAAAA,QAAQ,EAAGT,EAAE,CAACC,SAAH,CAAaQ,QAzC3B;;AA4CE;;;;;;;AAOAC,MAAAA,UAAU,EAAGV,EAAE,CAACC,SAAH,CAAaS,UAnD5B;;AAsDE;;;;;;;AAOAC,MAAAA,yBAAyB,EAAGX,EAAE,CAACC,SAAH,CAAaU,yBA7D3C;;AAgEE;;;;;;AAMAC,MAAAA,QAAQ,EAAG,kBAASC,KAAT,EAAgB;AACzB,eAAO,KAAKP,QAAL,CAAcO,KAAd,MAAyB,QAAhC;AACD,OAxEH;;AA2EE;;;;;;;;;;;AAWAC,MAAAA,QAAQ,EAAG,kBAASD,KAAT,EAAgB;AACzB;AACA;AACA;AACA;AACA;AACA,eACEA,KAAK,KAAK,IAAV,KACA,KAAKP,QAAL,CAAcO,KAAd,MAAyB,QAAzB,IACAA,KAAK,YAAYE,MAFjB,CADF;AAKD,OAjGH;;AAoGE;;;;;;AAMAC,MAAAA,SAAS,EAAG,mBAASH,KAAT,EACZ;AACE;AACA;AACA;AACA;AACA;AACA,eACEA,KAAK,KAAK,IAAV,KACA,KAAKP,QAAL,CAAcO,KAAd,MAAyB,SAAzB,IACAA,KAAK,YAAYI,OAFjB,CADF;AAKD,OAtHH;;AAyHE;;;;;;AAMAC,MAAAA,MAAM,EAAG,gBAASL,KAAT,EACT;AACE;AACA;AACA;AACA;AACA;AACA,eACEA,KAAK,KAAK,IAAV,KACA,KAAKP,QAAL,CAAcO,KAAd,MAAyB,MAAzB,IACAA,KAAK,YAAYM,IAFjB,CADF;AAKD,OA3IH;;AA8IE;;;;;;AAMAC,MAAAA,OAAO,EAAG,iBAASP,KAAT,EACV;AACE;AACA;AACA;AACA;AACA;AACA,eACEA,KAAK,KAAK,IAAV,KACA,KAAKP,QAAL,CAAcO,KAAd,MAAyB,OAAzB,IACAA,KAAK,YAAYQ,KAFjB,CADF;AAKD,OAhKH;;AAmKE;;;;;;;;;AASCC,MAAAA,SAAS,EAAG,mBAAST,KAAT,EACZ;AACC,eAAQA,KAAK,IAAI,IAAV,IAAmB,KAAKH,UAAL,CAAgBG,KAAK,CAACU,IAAtB,CAA1B;AACA;AA/KJ;AAFF,GADA;AAtBAvB,EAAAA,EAAE,CAACwB,IAAH,CAAQC,IAAR,CAAatB,aAAb,GAA6BA,aAA7B",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Utility class with type check for all native JavaScript data types.\n *\n */\nqx.Bootstrap.define(\"qx.lang.Type\",\n{\n  statics :\n  {\n    /**\n     * Get the internal class of the value. See\n     * http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\n     * for details.\n     *\n     * @signature function(value)\n     * @param value {var} value to get the class for\n     * @return {String} the internal class of the value\n     */\n    getClass : qx.Bootstrap.getClass,\n\n\n    /**\n     * Whether the value is a string.\n     *\n     * @signature function(value)\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is a string.\n     */\n    isString : qx.Bootstrap.isString,\n\n\n    /**\n     * Whether the value is an array.\n     *\n     * @signature function(value)\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is an array.\n     */\n    isArray : qx.Bootstrap.isArray,\n\n\n    /**\n     * Whether the value is an object. Note that built-in types like Window are\n     * not reported to be objects.\n     *\n     * @signature function(value)\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is an object.\n     */\n     isObject : qx.Bootstrap.isObject,\n\n\n    /**\n     * Whether the value is a function.\n     *\n     * @signature function(value)\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is a function.\n     */\n    isFunction : qx.Bootstrap.isFunction,\n\n\n    /**\n     * Whether the value is a function or an async function.\n     *\n     * @signature function(value)\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is a function or an async function.\n     */\n    isFunctionOrAsyncFunction : qx.Bootstrap.isFunctionOrAsyncFunction,\n\n\n    /**\n    * Whether the value is a regular expression.\n    *\n    * @param value {var} Value to check.\n    * @return {Boolean} Whether the value is a regular expression.\n    */\n    isRegExp : function(value) {\n      return this.getClass(value) === \"RegExp\";\n    },\n\n\n    /**\n    * Whether the value is a number.\n    *\n    * This function checks if the _type_ of the value is Number.\n    * Global properties *NaN*, *-Infinity*, *+Infinity*,\n    * *Number.POSITIVE_INFINITY* and *Number.NEGATIVE_INFINITY*\n    * return true.\n    *\n    * @param value {var} Value to check.\n    * @return {Boolean} Whether the value is a number.\n    */\n    isNumber : function(value) {\n      // Added \"value !== null\" because IE throws an exception \"Object expected\"\n      // by executing \"value instanceof Number\" if value is a DOM element that\n      // doesn't exist. It seems that there is an internal different between a\n      // JavaScript null and a null returned from calling DOM.\n      // e.q. by document.getElementById(\"ReturnedNull\").\n      return (\n        value !== null && (\n        this.getClass(value) === \"Number\" ||\n        value instanceof Number)\n      );\n    },\n\n\n    /**\n    * Whether the value is a boolean.\n    *\n    * @param value {var} Value to check.\n    * @return {Boolean} Whether the value is a boolean.\n    */\n    isBoolean : function(value)\n    {\n      // Added \"value !== null\" because IE throws an exception \"Object expected\"\n      // by executing \"value instanceof Boolean\" if value is a DOM element that\n      // doesn't exist. It seems that there is an internal different between a\n      // JavaScript null and a null returned from calling DOM.\n      // e.q. by document.getElementById(\"ReturnedNull\").\n      return (\n        value !== null && (\n        this.getClass(value) === \"Boolean\" ||\n        value instanceof Boolean)\n      );\n    },\n\n\n    /**\n     * Whether the value is a date.\n     *\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is a date.\n     */\n    isDate : function(value)\n    {\n      // Added \"value !== null\" because IE throws an exception \"Object expected\"\n      // by executing \"value instanceof Date\" if value is a DOM element that\n      // doesn't exist. It seems that there is an internal different between a\n      // JavaScript null and a null returned from calling DOM.\n      // e.q. by document.getElementById(\"ReturnedNull\").\n      return (\n        value !== null && (\n        this.getClass(value) === \"Date\" ||\n        value instanceof Date)\n      );\n    },\n\n\n    /**\n     * Whether the value is a Error.\n     *\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is a Error.\n     */\n    isError : function(value)\n    {\n      // Added \"value !== null\" because IE throws an exception \"Object expected\"\n      // by executing \"value instanceof Error\" if value is a DOM element that\n      // doesn't exist. It seems that there is an internal different between a\n      // JavaScript null and a null returned from calling DOM.\n      // e.q. by document.getElementById(\"ReturnedNull\").\n      return (\n        value !== null && (\n        this.getClass(value) === \"Error\" ||\n        value instanceof Error)\n      );\n    },\n\n\n    /**\n     * Whether the value is a Promise.\n     *\n     * checks if value exists and has a function 'then'\n     *\n     * @param value {var} Value to check.\n     * @return {Boolean} Whether the value is a Promise.\n     *\n     */\n     isPromise : function(value)\n     {\n      return (value != null) && this.isFunction(value.then);\n     }\n  }\n});\n"
  ]
}