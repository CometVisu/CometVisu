{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/lang/Array.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "cast",
    "object",
    "constructor",
    "offset",
    "data",
    "IListData",
    "Class",
    "hasInterface",
    "toArray",
    "ret",
    "core",
    "Environment",
    "get",
    "item",
    "i",
    "l",
    "length",
    "push",
    "Object",
    "prototype",
    "toString",
    "call",
    "apply",
    "Array",
    "slice",
    "fromArguments",
    "args",
    "fromCollection",
    "coll",
    "arr",
    "fromShortHand",
    "input",
    "len",
    "result",
    "lang",
    "clone",
    "concat",
    "insertAt",
    "obj",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "insertAfter",
    "removeAt",
    "removeAll",
    "append",
    "arr1",
    "arr2",
    "exclude",
    "forEach",
    "index",
    "remove",
    "contains",
    "includes",
    "equals",
    "toNativeArray",
    "sum",
    "undefined",
    "max",
    "min",
    "unique",
    "doneStrings",
    "doneNumbers",
    "doneObjects",
    "value",
    "count",
    "key",
    "Date",
    "now",
    "hasNull",
    "hasFalse",
    "hasTrue",
    "hash",
    "ex",
    "ex1",
    "Error",
    "range",
    "start",
    "stop",
    "step",
    "arguments",
    "Math",
    "ceil",
    "idx",
    "replace",
    "dest",
    "src",
    "Type",
    "isArray"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery\n     http://jquery.com\n     Version 1.3.1\n\n     Copyright:\n       2009 John Resig\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n   * Underscore.js\n     http://underscorejs.org\n\n     Copyright:\n       2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * Static helper functions for arrays with a lot of often used convenience\n * methods like <code>remove</code> or <code>contains</code>.\n *\n * The native JavaScript Array is not modified by this class. However,\n * there are modifications to the native Array in {@link qx.lang.normalize.Array} for\n * browsers that do not support certain JavaScript features natively .\n *\n * @ignore(qx.data)\n * @ignore(qx.data.IListData)\n * @ignore(qx.Class.*)\n * @require(qx.lang.normalize.Date)\n */\nqx.Bootstrap.define(\"qx.lang.Array\",\n{\n  statics :\n  {\n    /**\n     * Converts an array like object to any other array like\n     * object.\n     *\n     * Attention: The returned array may be same\n     * instance as the incoming one if the constructor is identical!\n     *\n     * @param object {var} any array-like object\n     * @param constructor {Function} constructor of the new instance\n     * @param offset {Integer?0} position to start from\n     * @return {Array} the converted array\n     */\n    cast : function(object, constructor, offset)\n    {\n      if (object.constructor === constructor) {\n        return object;\n      }\n\n      if (qx.data && qx.data.IListData) {\n        if (qx.Class && qx.Class.hasInterface(object, qx.data.IListData)) {\n          var object = object.toArray();\n        }\n      }\n\n\n      // Create from given constructor\n      var ret = new constructor;\n\n      // Some collections in mshtml are not able to be sliced.\n      // These lines are a special workaround for this client.\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        if (object.item)\n        {\n          for (var i=offset||0, l=object.length; i<l; i++) {\n            ret.push(object[i]);\n          }\n\n          return ret;\n        }\n      }\n\n      // Copy over items\n      if (Object.prototype.toString.call(object) === \"[object Array]\" && offset == null) {\n        ret.push.apply(ret, object);\n      } else {\n        ret.push.apply(ret, Array.prototype.slice.call(object, offset||0));\n      }\n\n      return ret;\n    },\n\n\n    /**\n     * Convert an arguments object into an array.\n     *\n     * @param args {arguments} arguments object\n     * @param offset {Integer?0} position to start from\n     * @return {Array} a newly created array (copy) with the content of the arguments object.\n     */\n    fromArguments : function(args, offset) {\n      return Array.prototype.slice.call(args, offset||0);\n    },\n\n\n    /**\n     * Convert a (node) collection into an array\n     *\n     * @param coll {var} node collection\n     * @return {Array} a newly created array (copy) with the content of the node collection.\n     */\n    fromCollection : function(coll)\n    {\n      // The native Array.slice cannot be used with some Array-like objects\n      // including NodeLists in older IEs\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        if (coll.item)\n        {\n          var arr = [];\n          for (var i=0, l=coll.length; i<l; i++) {\n            arr[i] = coll[i];\n          }\n\n          return arr;\n        }\n      }\n\n      return Array.prototype.slice.call(coll, 0);\n    },\n\n\n    /**\n     * Expand shorthand definition to a four element list.\n     * This is an utility function for padding/margin and all other shorthand handling.\n     *\n     * @param input {Array} arr with one to four elements\n     * @return {Array} an arr with four elements\n     */\n    fromShortHand : function(input)\n    {\n      var len = input.length;\n      var result = qx.lang.Array.clone(input);\n\n      // Copy Values (according to the length)\n      switch(len)\n      {\n        case 1:\n          result[1] = result[2] = result[3] = result[0];\n          break;\n\n        case 2:\n          result[2] = result[0];\n          // no break here\n\n        case 3:\n          result[3] = result[1];\n      }\n\n      // Return list with 4 items\n      return result;\n    },\n\n\n    /**\n     * Return a copy of the given array\n     *\n     * @param arr {Array} the array to copy\n     * @return {Array} copy of the array\n     */\n    clone : function(arr) {\n      return arr.concat();\n    },\n\n\n    /**\n     * Insert an element at a given position into the array\n     *\n     * @param arr {Array} the array\n     * @param obj {var} the element to insert\n     * @param i {Integer} position where to insert the element into the array\n     * @return {Array} the array\n     */\n    insertAt : function(arr, obj, i)\n    {\n      arr.splice(i, 0, obj);\n\n      return arr;\n    },\n\n\n    /**\n     * Insert an element into the array before a given second element.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 before this object\n     * @return {Array} the array\n     */\n    insertBefore : function(arr, obj, obj2)\n    {\n      var i = arr.indexOf(obj2);\n\n      if (i == -1) {\n        arr.push(obj);\n      } else {\n        arr.splice(i, 0, obj);\n      }\n\n      return arr;\n    },\n\n\n    /**\n     * Insert an element into the array after a given second element.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 after this object\n     * @return {Array} the array\n     */\n    insertAfter : function(arr, obj, obj2)\n    {\n      var i = arr.indexOf(obj2);\n\n      if (i == -1 || i == (arr.length - 1)) {\n        arr.push(obj);\n      } else {\n        arr.splice(i + 1, 0, obj);\n      }\n\n      return arr;\n    },\n\n\n    /**\n     * Remove an element from the array at the given index\n     *\n     * @param arr {Array} the array\n     * @param i {Integer} index of the element to be removed\n     * @return {var} The removed element.\n     */\n    removeAt : function(arr, i) {\n      return arr.splice(i, 1)[0];\n    },\n\n\n    /**\n     * Remove all elements from the array\n     *\n     * @param arr {Array} the array\n     * @return {Array} empty array\n     */\n    removeAll : function(arr)\n    {\n      arr.length = 0;\n      return this;\n    },\n\n\n    /**\n     * Append the elements of an array to the array\n     *\n     * @param arr1 {Array} the array\n     * @param arr2 {Array} the elements of this array will be appended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    append : function(arr1, arr2)\n    {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.append(arr2);\n      }\n      if (arr2 instanceof qx.data.Array) {\n        arr2 = arr2.toArray();\n      }\n      \n      // this check is important because opera throws an uncatchable error if apply is called without\n      // an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert && qx.core.Assert.assertArray(arr1, \"The first parameter must be an array.\");\n        qx.core.Assert && qx.core.Assert.assertArray(arr2, \"The second parameter must be an array.\");\n      }\n\n      Array.prototype.push.apply(arr1, arr2);\n      return arr1;\n    },\n\n\n    /**\n     * Modifies the first array as it removes all elements\n     * which are listed in the second array as well.\n     *\n     * @param arr1 {Array} the array\n     * @param arr2 {Array} the elements of this array will be excluded from the other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    exclude : function(arr1, arr2)\n    {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.exclude(arr2);\n      }\n      \n      // this check is important because opera throws an uncatchable error if apply is called without\n      // an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert && qx.core.Assert.assertArray(arr1, \"The first parameter must be an array.\");\n        qx.core.Assert && qx.core.Assert.assertArray(arr2, \"The second parameter must be an array.\");\n      }\n\n      arr2.forEach(function(item) {\n        var index = arr1.indexOf(item);\n        if (index != -1) {\n          arr1.splice(index, 1);\n        }\n      });\n\n      return arr1;\n    },\n\n\n    /**\n     * Remove an element from the array.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} element to be removed from the array\n     * @return {var} the removed element\n     */\n    remove : function(arr, obj)\n    {\n      if (arr instanceof qx.data.Array) {\n        return arr.remove(obj);\n      }\n      \n      var i = arr.indexOf(obj);\n\n      if (i != -1)\n      {\n        arr.splice(i, 1);\n        return obj;\n      }\n    },\n\n    /**\n     * Whether the array contains the given element\n     *\n     * @deprecated {6.0} Please use Array instance include method instead\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to look for\n     * @return {Boolean} whether the arr contains the element\n     */\n    contains : function(arr, obj) {\n      return arr.includes(obj);\n    },\n\n    /**\n     * Check whether the two arrays have the same content. Checks only the\n     * equality of the arrays' content.\n     *\n     * @param arr1 {Array} first array\n     * @param arr2 {Array} second array\n     * @return {Boolean} Whether the two arrays are equal\n     */\n    equals : function(arr1, arr2)\n    {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.equals(arr2);\n      }\n      arr2 = qx.lang.Array.toNativeArray(arr2);\n      \n      var length = arr1.length;\n\n      if (length !== arr2.length) {\n        return false;\n      }\n\n      for (var i=0; i<length; i++)\n      {\n        if (arr1[i] !== arr2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n\n    /**\n     * Returns the sum of all values in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number} The sum of all values.\n     */\n    sum : function(arr)\n    {\n      var result = 0;\n      for (var i=0, l=arr.length; i<l; i++) {\n        if (arr[i] != undefined) {\n          result += arr[i];\n        }\n      }\n\n      return result;\n    },\n\n\n    /**\n     * Returns the highest value in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number | null} The highest of all values or undefined if array is empty.\n     */\n    max : function(arr)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert && qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\n      }\n\n      var i, len=arr.length, result = arr[0];\n\n      for (i = 1; i < len; i++)\n      {\n        if (arr[i] > result) {\n          result = arr[i];\n        }\n      }\n\n      return result === undefined ? null : result;\n    },\n\n\n    /**\n     * Returns the lowest value in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number | null} The lowest of all values or undefined if array is empty.\n     */\n    min : function(arr)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert && qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\n      }\n\n      var i, len=arr.length, result = arr[0];\n\n      for (i = 1; i < len; i++)\n      {\n        if (arr[i] < result) {\n          result = arr[i];\n        }\n      }\n\n      return result === undefined ? null : result;\n    },\n\n\n    /**\n     * Recreates an array which is free of all duplicate elements from the original.\n     *\n     * This method does not modify the original array!\n     *\n     * Keep in mind that this methods deletes undefined indexes.\n     *\n     * @param arr {Array} Incoming array\n     * @return {Array} Returns a copy with no duplicates\n     */\n    unique: function(arr)\n    {\n      var ret=[], doneStrings={}, doneNumbers={}, doneObjects={};\n      var value, count=0;\n      var key = \"qx\" + Date.now();\n      var hasNull=false, hasFalse=false, hasTrue=false;\n\n      // Rebuild array and omit duplicates\n      for (var i=0, len=arr.length; i<len; i++)\n      {\n        value = arr[i];\n\n        // Differ between null, primitives and reference types\n        if (value === null)\n        {\n          if (!hasNull)\n          {\n            hasNull = true;\n            ret.push(value);\n          }\n        }\n        else if (value === undefined)\n        {\n          // pass\n        }\n        else if (value === false)\n        {\n          if (!hasFalse)\n          {\n            hasFalse = true;\n            ret.push(value);\n          }\n        }\n        else if (value === true)\n        {\n          if (!hasTrue)\n          {\n            hasTrue = true;\n            ret.push(value);\n          }\n        }\n        else if (typeof value === \"string\")\n        {\n          if (!doneStrings[value])\n          {\n            doneStrings[value] = 1;\n            ret.push(value);\n          }\n        }\n        else if (typeof value === \"number\")\n        {\n          if (!doneNumbers[value])\n          {\n            doneNumbers[value] = 1;\n            ret.push(value);\n          }\n        }\n        else\n        {\n          var hash = value[key];\n\n          if (hash == null) {\n            hash = value[key] = count++;\n          }\n\n          if (!doneObjects[hash])\n          {\n            doneObjects[hash] = value;\n            ret.push(value);\n          }\n        }\n      }\n\n      // Clear object hashs\n      for (var hash in doneObjects)\n      {\n        try\n        {\n          delete doneObjects[hash][key];\n        }\n        catch(ex)\n        {\n          try\n          {\n            doneObjects[hash][key] = null;\n          }\n          catch(ex1)\n          {\n            throw new Error(\"Cannot clean-up map entry doneObjects[\" + hash + \"][\" + key + \"]\");\n          }\n        }\n      }\n\n      return ret;\n    },\n\n    /**\n     * Returns a new array with integers from start to stop incremented or decremented by step.\n     *\n     * @param start {Integer} start of the new array, defaults to 0\n     * @param stop {Integer} stop of the new array\n     * @param step {Integer} increment / decrement - depends whether you use positive or negative values\n     * @return {Array} Returns a new array with integers\n     */\n    range : function(start, stop, step)\n    {\n      if (arguments.length <= 1) {\n        stop = start || 0;\n        start = 0;\n      }\n      step = arguments[2] || 1;\n\n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var idx = 0;\n      var range = Array(length);\n\n      while (idx < length) {\n        range[idx++] = start;\n        start += step;\n      }\n\n      return range;\n    },\n    \n    \n    /**\n     * Replaces the contents of the array `dest`\n     * \n     * @param dest {Array|qx.data.Array} the array to edit (if null then a new array is created)\n     * @param src {Array|qx.data.Array} the array to copy from, or null\n     * @return {Array} the edited array (or the new array, if dest is null)\n     */\n    replace: function(dest, src) {\n      if (dest instanceof qx.data.Array) {\n        return dest.replace(src);\n      }\n      \n      if (src === null) {\n        if (dest === null) {\n          return null;\n        } else {\n          return [];\n        }\n      }\n      \n      src = qx.lang.Array.toNativeArray(src);\n      if (dest === null) {\n        dest = src.slice(0);\n      } else {\n        var args = [ 0, dest.length ];\n        src.forEach(function(item) {\n          args.push(item);\n        });\n        dest.splice.apply(dest, args);\n      }\n      return dest;\n    },\n    \n    \n    /**\n     * Returns a native array from src where possible; qx.data.Array is converted to its native array,\n     * in which case unless `clone` parameter is set to true the rules of qx.data.Array.toArray should \n     * be followed, ie that the array should not be manipulated directly.\n     * \n     * @param src {qx.data.Array|Array} the object to return as an array\n     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code\n     * @return {Array}\n     */\n    toNativeArray: function(src, clone) {\n      if (src === undefined || src === null) {\n        return src;\n      }\n      if (src instanceof qx.data.Array) {\n        if (clone) {\n          return src.toArray().slice(0);\n        }\n        return src.toArray();\n      }\n      if (qx.lang.Type.isArray(src)) {\n        if (clone) {\n          return src.slice(0);\n        }\n        return src;\n      }\n      return [ src ];\n    }\n  }\n});\n"
  ]
}