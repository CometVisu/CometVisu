{
  "className": "qx.lang.String",
  "packageName": "qx.lang",
  "name": "String",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 58,
        "column": 0
      },
      "end": {
        "line": 398,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n Andreas Ecker (ecker)\n   ======================================================================\n   This class contains code based on the following work:\n Mootools\n     http://mootools.net/\n     Version 1.1.1\n     Copyright:\n       (c) 2007 Valerio Proietti\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n   and\n XRegExp\n   http://xregexp.com/\n   Version 1.5\n   Copyright:\n       (c) 2006-2007, Steven Levithan <a href=\"http://stevenlevithan.com\">http://stevenlevithan.com</a>\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n     Authors:\n Steven Levithan\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>String helper functions\n The native JavaScript String is not modified by this class. However,\n there are modifications to the native String in {@link qx.lang.normalize.String} for\n browsers that do not support certain features.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.lang.normalize.String"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__unicodeLetters": {
      "location": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 2786
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unicode letters.  they are taken from Steve Levithan's excellent XRegExp library [http://xregexp.com/addons/unicode/unicode-base.js]</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__unicodeFirstLetterInWordRegexp": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 43
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A RegExp that matches the first letter in a word - unicode aware</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__stringsMap": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Cache for often used string operations [camelCasing and hyphenation]\n e.g. marginTop => margin-top"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "camelCase": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a hyphenated string (separated by '-') to camel case.\n Example:\n <pre class='javascript'>qx.lang.String.camelCase(\"I-like-cookies\");</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} hyphenated string",
            "paramName": "str",
            "description": " hyphenated string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} camelcase string",
            "type": "qx.lang.String",
            "description": " camelcase string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hyphenate": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a camelcased string to a hyphenated (separated by '-') string.\n Example:\n <pre class='javascript'>qx.lang.String.hyphenate(\"weLikeCookies\");</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} camelcased string",
            "paramName": "str",
            "description": " camelcased string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} hyphenated string",
            "type": "qx.lang.String",
            "description": " hyphenated string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "capitalize": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 144,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a string to camel case.\n Example:\n <pre class='javascript'>qx.lang.String.camelCase(\"i like cookies\");</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} capitalized string",
            "type": "qx.lang.String",
            "description": " capitalized string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clean": {
      "location": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all extraneous whitespace from a string and trims it\n Example:\n <code>\n qx.lang.String.clean(\" i      like     cookies      \\n\\n\");\n </code>\n Returns \"i like cookies\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to clean up",
            "paramName": "str",
            "description": " the string to clean up",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Cleaned up string",
            "type": "qx.lang.String",
            "description": " Cleaned up string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trimLeft": {
      "location": {
        "start": {
          "line": 172,
          "column": 4
        },
        "end": {
          "line": 174,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>removes white space from the left side of a string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to trim",
            "paramName": "str",
            "description": " the string to trim",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the trimmed string",
            "type": "qx.lang.String",
            "description": " the trimmed string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trimRight": {
      "location": {
        "start": {
          "line": 183,
          "column": 4
        },
        "end": {
          "line": 185,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>removes white space from the right side of a string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to trim",
            "paramName": "str",
            "description": " the string to trim",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the trimmed string",
            "type": "qx.lang.String",
            "description": " the trimmed string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "startsWith": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 199,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the string starts with the given substring</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use String instance startsWith method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullstr {String} the string to search in",
            "paramName": "fullstr",
            "description": " the string to search in",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "substr {String} the substring to look for",
            "paramName": "substr",
            "description": " the substring to look for",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the string starts with the given substring",
            "type": "Boolean",
            "description": " whether the string starts with the given substring"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "endsWith": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the string ends with the given substring</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use String instance endsWith method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullstr {String} the string to search in",
            "paramName": "fullstr",
            "description": " the string to search in",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "substr {String} the substring to look for",
            "paramName": "substr",
            "description": " the substring to look for",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the string ends with the given substring",
            "type": "Boolean",
            "description": " whether the string ends with the given substring"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "repeat": {
      "location": {
        "start": {
          "line": 223,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a string, which repeats a string 'length' times</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} string used to repeat",
            "paramName": "str",
            "description": " string used to repeat",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "times {Integer} the number of repetitions",
            "paramName": "times",
            "description": " the number of repetitions",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} repeated string",
            "type": "qx.lang.String",
            "description": " repeated string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pad": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 250,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pad a string up to a given length. Padding characters are added to the left of the string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to pad",
            "paramName": "str",
            "description": " the string to pad",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "length {Integer} the final length of the string",
            "paramName": "length",
            "description": " the final length of the string",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "ch {String} character used to fill up the string",
            "paramName": "ch",
            "description": " character used to fill up the string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} padded string",
            "type": "qx.lang.String",
            "description": " padded string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "firstUp": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert the first character of the string to upper case.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(str)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with an upper case first character",
            "type": "qx.lang.String",
            "description": " the string with an upper case first character"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "firstLow": {
      "location": {
        "start": {
          "line": 270,
          "column": 4
        },
        "end": {
          "line": 270,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert the first character of the string to lower case.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(str)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with a lower case first character",
            "type": "qx.lang.String",
            "description": " the string with a lower case first character"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 280,
          "column": 4
        },
        "end": {
          "line": 282,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the string contains a given substring</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "substring {String} substring to search for",
            "paramName": "substring",
            "description": " substring to search for",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the string contains the substring",
            "type": "Boolean",
            "description": " whether the string contains the substring"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "format": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 326,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Print a list of arguments using a format string\n In the format string occurrences of %n are replaced by the n'th element of the args list.\n You can give an object as argument.\n In this case you should specify namedArgument in your string with %{namedArgument}.\n The named argument will be replace by the value of the property of the object named \"namedArgument\"\n Example:\n </p>\n<pre class='javascript'>qx.lang.String.format(\"Hello %1, my name is %2\", [\"Egon\", \"Franz\"]) == \"Hello Egon, my name is Franz\"</pre>\n<pre class='javascript'>qx.lang.String.format(\"Hello %{yourName}, my name is %{myName}\", {yourName: \"Egon\", myName: \"Franz\"}) == \"Hello Egon, my name is Franz\"</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pattern {String} format string",
            "paramName": "pattern",
            "description": " format string",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "args {Array} array of arguments to insert into the format string",
            "paramName": "args",
            "description": " array of arguments to insert into the format string",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the formatted string",
            "type": "qx.lang.String",
            "description": " the formatted string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "escapeRegexpChars": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 337,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Escapes all chars that have a special meaning in regular expressions</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string where to escape the chars.",
            "paramName": "str",
            "description": " the string where to escape the chars.",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with the escaped chars.",
            "type": "qx.lang.String",
            "description": " the string with the escaped chars."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toArray": {
      "location": {
        "start": {
          "line": 347,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a string to an array of characters.\n </p>\n<pre>\"hello\" => [ \"h\", \"e\", \"l\", \"l\", \"o\" ];</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string which should be split",
            "paramName": "str",
            "description": " the string which should be split",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the result array of characters",
            "type": "qx.lang.Array",
            "description": " the result array of characters"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stripTags": {
      "location": {
        "start": {
          "line": 360,
          "column": 4
        },
        "end": {
          "line": 362,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove HTML/XML tags from a string\n Example:\n </p>\n<pre class='javascript'>qx.lang.String.stripTags(\"&lt;h1>Hello&lt;/h1>\") == \"Hello\"</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} string containing tags",
            "paramName": "str",
            "description": " string containing tags",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with stripped tags",
            "type": "qx.lang.String",
            "description": " the string with stripped tags"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stripScripts": {
      "location": {
        "start": {
          "line": 372,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Strips <script> tags including its content from the given string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} string containing tags",
            "paramName": "str",
            "description": " string containing tags",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "exec {Boolean?false} Whether the filtered code should be executed",
            "paramName": "exec",
            "description": " Whether the filtered code should be executed",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The filtered string",
            "type": "qx.lang.String",
            "description": " The filtered string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "quote": {
      "location": {
        "start": {
          "line": 394,
          "column": 4
        },
        "end": {
          "line": 396,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Quotes the given string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String to quote.",
            "paramName": "str",
            "description": " String to quote.",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The quoted string.",
            "type": "qx.lang.String",
            "description": " The quoted string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}