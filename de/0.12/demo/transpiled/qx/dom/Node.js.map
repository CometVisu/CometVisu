{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/dom/Node.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "ELEMENT",
    "ATTRIBUTE",
    "TEXT",
    "CDATA_SECTION",
    "ENTITY_REFERENCE",
    "ENTITY",
    "PROCESSING_INSTRUCTION",
    "COMMENT",
    "DOCUMENT",
    "DOCUMENT_TYPE",
    "DOCUMENT_FRAGMENT",
    "NOTATION",
    "getDocument",
    "node",
    "nodeType",
    "ownerDocument",
    "document",
    "getWindow",
    "defaultView",
    "parentWindow",
    "getDocumentElement",
    "documentElement",
    "getBodyElement",
    "body",
    "isNode",
    "isElement",
    "isDocument",
    "isDocumentFragment",
    "isText",
    "isWindow",
    "obj",
    "history",
    "location",
    "isNodeName",
    "nodeName",
    "toLowerCase",
    "dom",
    "Node",
    "getName",
    "getText",
    "i",
    "a",
    "nodes",
    "childNodes",
    "length",
    "join",
    "nodeValue",
    "isBlockNode",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Basic node creation and type detection\n */\nqx.Bootstrap.define(\"qx.dom.Node\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      NODE TYPES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} Node type:\n     *\n     * * ELEMENT\n     * * ATTRIBUTE\n     * * TEXT\n     * * CDATA_SECTION\n     * * ENTITY_REFERENCE\n     * * ENTITY\n     * * PROCESSING_INSTRUCTION\n     * * COMMENT\n     * * DOCUMENT\n     * * DOCUMENT_TYPE\n     * * DOCUMENT_FRAGMENT\n     * * NOTATION\n     */\n    ELEMENT                : 1,\n    ATTRIBUTE              : 2,\n    TEXT                   : 3,\n    CDATA_SECTION          : 4,\n    ENTITY_REFERENCE       : 5,\n    ENTITY                 : 6,\n    PROCESSING_INSTRUCTION : 7,\n    COMMENT                : 8,\n    DOCUMENT               : 9,\n    DOCUMENT_TYPE          : 10,\n    DOCUMENT_FRAGMENT      : 11,\n    NOTATION               : 12,\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      DOCUMENT ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the owner document of the given node\n     *\n     * @param node {Node|Document|Window} the node which should be tested\n     * @return {Document|null} The document of the given DOM node\n     */\n    getDocument : function(node)\n    {\n      return node.nodeType === this.DOCUMENT ? node : // is document already\n        node.ownerDocument || // is DOM node\n        node.document; // is window\n    },\n\n\n    /**\n     * Returns the DOM2 <code>defaultView</code> (window).\n     *\n     * @param node {Node|Document|Window} node to inspect\n     * @return {Window} the <code>defaultView</code> of the given node\n     */\n    getWindow : function(node)\n    {\n      // is a window already\n        if (node.nodeType == null) {\n          return node;\n        }\n\n        // jump to document\n        if (node.nodeType !== this.DOCUMENT) {\n          node = node.ownerDocument;\n        }\n\n        // jump to window\n        return node.defaultView || node.parentWindow;\n    },\n\n\n    /**\n     * Returns the document element. (Logical root node)\n     *\n     * This is a convenience attribute that allows direct access to the child\n     * node that is the root element of the document. For HTML documents,\n     * this is the element with the tagName \"HTML\".\n     *\n     * @param node {Node|Document|Window} node to inspect\n     * @return {Element} document element of the given node\n     */\n    getDocumentElement : function(node) {\n      return this.getDocument(node).documentElement;\n    },\n\n\n    /**\n     * Returns the body element. (Visual root node)\n     *\n     * This normally only makes sense for HTML documents. It returns\n     * the content area of the HTML document.\n     *\n     * @param node {Node|Document|Window} node to inspect\n     * @return {Element} document body of the given node\n     */\n    getBodyElement : function(node) {\n      return this.getDocument(node).body;\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      TYPE TESTS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the given object is a DOM node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true if the node is a DOM node\n     */\n    isNode : function(node) {\n      return !!(node && node.nodeType != null);\n    },\n\n\n    /**\n     * Whether the given object is a DOM element node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true if the node is a DOM element\n     */\n    isElement : function(node) {\n      return !!(node && node.nodeType === this.ELEMENT);\n    },\n\n\n    /**\n     * Whether the given object is a DOM document node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true when the node is a DOM document\n     */\n    isDocument : function(node) {\n      return !!(node && node.nodeType === this.DOCUMENT);\n    },\n\n\n    /**\n     * Whether the given object is a DOM document fragment node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true when the node is a DOM document fragment\n     */\n    isDocumentFragment : function(node) {\n      return !!(node && node.nodeType === this.DOCUMENT_FRAGMENT);\n    },\n\n\n    /**\n     * Whether the given object is a DOM text node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true if the node is a DOM text node\n     */\n    isText : function(node) {\n      return !!(node && node.nodeType === this.TEXT);\n    },\n\n\n    /**\n     * Check whether the given object is a browser window object.\n     *\n     * @param obj {Object} the object which should be tested\n     * @return {Boolean} true if the object is a window object\n     */\n    isWindow : function(obj) {\n      return !!(obj && obj.history && obj.location && obj.document);\n    },\n\n\n    /**\n     * Whether the node has the given node name\n     *\n     * @param node {Node} the node\n     * @param nodeName {String} the node name to check for\n     * @return {Boolean} Whether the node has the given node name\n     */\n    isNodeName : function (node, nodeName)\n    {\n      if(!nodeName || !node || !node.nodeName) {\n        return false;\n      }\n\n      return nodeName.toLowerCase() == qx.dom.Node.getName(node);\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILITIES\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Get the node name as lower case string\n     *\n     * @param node {Node} the node\n     * @return {String} the node name\n     */\n    getName : function (node)\n    {\n      if(!node || !node.nodeName) {\n        return null;\n      }\n\n      return node.nodeName.toLowerCase();\n    },\n\n\n    /**\n     * Returns the text content of an node where the node may be of node type\n     * NODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT or NODE_CDATA\n     *\n     * @param node {Node} the node from where the search should start.\n     *     If the node has subnodes the text contents are recursively retreived and joined.\n     * @return {String} the joined text content of the given node or null if not appropriate.\n     * @signature function(node)\n     */\n    getText : function(node)\n    {\n      if(!node || !node.nodeType) {\n        return null;\n      }\n\n      switch(node.nodeType)\n      {\n        case 1: // NODE_ELEMENT\n          var i, a=[], nodes=node.childNodes, length=nodes.length;\n          for (i=0; i<length; i++) {\n            a[i] = this.getText(nodes[i]);\n          }\n\n          return a.join(\"\");\n\n        case 2: // NODE_ATTRIBUTE\n        case 3: // NODE_TEXT\n        case 4: // CDATA\n          return node.nodeValue;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Checks if the given node is a block node\n     *\n     * @param node {Node} Node\n     * @return {Boolean} whether it is a block node\n     */\n    isBlockNode : function(node)\n    {\n      if (!qx.dom.Node.isElement(node)) {\n       return false;\n      }\n\n      node = qx.dom.Node.getName(node);\n\n      return /^(body|form|textarea|fieldset|ul|ol|dl|dt|dd|li|div|hr|p|h[1-6]|quote|pre|table|thead|tbody|tfoot|tr|td|th|iframe|address|blockquote)$/.test(node);\n    }\n  }\n});\n"
  ]
}