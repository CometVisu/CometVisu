{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/theme/manager/Color.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "util",
    "ValueManager",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "_applyTheme",
    "value",
    "dest",
    "colors",
    "name",
    "__parseColor",
    "_setDynamic",
    "color",
    "ColorUtil",
    "isCssString",
    "undefined",
    "Error",
    "Array",
    "rgbToRgbString",
    "resolve",
    "cache",
    "_dynamic",
    "resolved",
    "getTheme",
    "isDynamic",
    "manager",
    "Color"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Manager for color themes\n */\nqx.Class.define(\"qx.theme.manager.Color\",\n{\n  type : \"singleton\",\n  extend : qx.util.ValueManager,\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** the currently selected color theme */\n    theme :\n    {\n      check : \"Theme\",\n      nullable : true,\n      apply : \"_applyTheme\",\n      event : \"changeTheme\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    _applyTheme : function(value)\n    {\n      var dest = {};\n\n      if (value) {\n        var colors = value.colors;\n\n        for (var name in colors) {\n          dest[name] = this.__parseColor(colors, name);\n        }\n      }\n\n      this._setDynamic(dest);\n    },\n\n\n    /**\n     * Helper to take a color stored in the theme and returns the string color value.\n     * In most of the times that means it just returns the string stored in the theme.\n     * It additionally checks if its a valid color at all.\n     *\n     * @param colors {Map} The map of color definitions.\n     * @param name {String} The name of the color to check.\n     * @return {String} The resolved color as string.\n     */\n    __parseColor : function(colors, name) {\n      var color = colors[name];\n      if (typeof color === \"string\") {\n        if (!qx.util.ColorUtil.isCssString(color)) {\n          // check for references to in theme colors\n          if (colors[color] != undefined) {\n            return this.__parseColor(colors, color);\n          }\n          throw new Error(\"Could not parse color: \" + color);\n        }\n        return color;\n\n      } else if (color instanceof Array) {\n        return qx.util.ColorUtil.rgbToRgbString(color);\n      }\n\n      throw new Error(\"Could not parse color: \" + color);\n    },\n\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value,\n     * (if available), otherwise returns the original value\n     * @param value {String} Value to resolve\n     * @return {var} either returns the (translated) result of the incoming\n     * value or the value itself\n     */\n    resolve : function(value)\n    {\n      var cache = this._dynamic;\n      var resolved = cache[value];\n\n      if (resolved)\n      {\n        return resolved;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && theme.colors[value])\n      {\n        return cache[value] = theme.colors[value];\n      }\n\n      return value;\n    },\n\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns true if the value is interpreted dynamically\n     */\n    isDynamic : function(value) {\n      var cache = this._dynamic;\n\n      if (value && (cache[value] !== undefined))\n      {\n        return true;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && value && (theme.colors[value] !== undefined))\n      {\n        cache[value] = theme.colors[value];\n        return true;\n      }\n\n      return false;\n    }\n  }\n});\n"
  ]
}