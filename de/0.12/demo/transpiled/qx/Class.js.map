{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/Class.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__Property",
    "core",
    "Property",
    "name",
    "config",
    "include",
    "getClass",
    "implement",
    "implicitType",
    "hasOwnProperty",
    "type",
    "clazz",
    "__createClass",
    "extend",
    "construct",
    "destruct",
    "forEach",
    "id",
    "__attachAnno",
    "properties",
    "__addProperties",
    "members",
    "__addMembers",
    "events",
    "__addEvents",
    "i",
    "l",
    "length",
    "__addMixin",
    "Error",
    "environment",
    "key",
    "Environment",
    "add",
    "__addInterface",
    "defer",
    "self",
    "addPendingDefer",
    "Class",
    "getByName",
    "classname",
    "prototype",
    "undefine",
    "$$registry",
    "ns",
    "split",
    "objects",
    "window",
    "push",
    "last",
    "parent",
    "isFunction",
    "objectGetLength",
    "isDefined",
    "util",
    "OOUtil",
    "classIsDefined",
    "getTotalNumber",
    "mixin",
    "patch",
    "isClass",
    "obj",
    "$$type",
    "constructor",
    "isSubClassOf",
    "superClass",
    "getPropertyDefinition",
    "getProperties",
    "list",
    "$$properties",
    "apply",
    "Object",
    "keys",
    "superclass",
    "getByProperty",
    "hasProperty",
    "getEventType",
    "supportsEvent",
    "hasOwnMixin",
    "$$includes",
    "indexOf",
    "getByMixin",
    "$$flatIncludes",
    "getMixins",
    "hasMixin",
    "hasOwnInterface",
    "iface",
    "$$implements",
    "getByInterface",
    "getInterfaces",
    "$$flatImplements",
    "hasInterface",
    "implementsInterface",
    "Interface",
    "objectImplements",
    "classImplements",
    "getInstance",
    "$$instance",
    "$$allowconstruct",
    "getSubclasses",
    "subclasses",
    "registry",
    "genericToString",
    "__allowedKeys",
    "__staticAllowedKeys",
    "__validateConfig",
    "__validateAbstractInterfaces",
    "group",
    "anno",
    "undefined",
    "$$annotations",
    "lang",
    "Type",
    "isArray",
    "mixins",
    "isStrictMode",
    "setDisplayNames",
    "__createDefaultConstructor",
    "__wrapConstructor",
    "setDisplayName",
    "a",
    "staticValue",
    "charAt",
    "basename",
    "createNamespace",
    "ex",
    "$$classtype",
    "toString",
    "extendClass",
    "$$destructor",
    "$$events",
    "proto",
    "refine",
    "init",
    "event",
    "async",
    "inheritable",
    "$$inheritable",
    "$$refreshInheritables",
    "attachRefreshInheritables",
    "attachMethods",
    "__validateProperty",
    "base",
    "wrap",
    "member",
    "annoKey",
    "substring",
    "$$install",
    "Function",
    "__mixinMemberWrapper",
    "oldBase",
    "retval",
    "arguments",
    "flatten",
    "Mixin",
    "entry",
    "$$members",
    "defaultConstructor",
    "wrapper",
    "$$original",
    "$$constructor"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * This class is one of the most important parts of qooxdoo's\n * object-oriented features.\n *\n * Its {@link #define} method is used to create qooxdoo classes.\n *\n * Each instance of a class defined by {@link #define} has\n * the following keys attached to the constructor and the prototype:\n *\n * <table>\n * <tr><th><code>classname</code></th><td>The fully-qualified name of the class (e.g. <code>\"qx.ui.core.Widget\"</code>).</td></tr>\n * <tr><th><code>basename</code></th><td>The namespace part of the class name (e.g. <code>\"qx.ui.core\"</code>).</td></tr>\n * <tr><th><code>constructor</code></th><td>A reference to the constructor of the class.</td></tr>\n * <tr><th><code>superclass</code></th><td>A reference to the constructor of the super class.</td></tr>\n * </table>\n *\n * Each method may access static members of the same class by using\n * <code>this.self(arguments)</code> ({@link qx.core.Object#self}):\n * <pre class='javascript'>\n * statics : { FOO : \"bar\" },\n * members: {\n *   baz: function(x) {\n *     this.self(arguments).FOO;\n *     ...\n *   }\n * }\n * </pre>\n *\n * Each overriding method may call the overridden method by using\n * <code>this.base(arguments [, ...])</code> ({@link qx.core.Object#base}). This is also true for calling\n * the constructor of the superclass.\n * <pre class='javascript'>\n * members: {\n *   foo: function(x) {\n *     this.base(arguments, x);\n *     ...\n *   }\n * }\n * </pre>\n *\n * By using <code>qx.Class</code> within an app, the native JS data types are\n * conveniently polyfilled according to {@link qx.lang.normalize}.\n * \n * Annotations can be added to classes, constructors, destructors, and methods, properties, and statics - \n * see <code>qx.Annotation</code> for examples and means access annotations at runtime.\n *\n * @require(qx.Interface)\n * @require(qx.Mixin)\n * @require(qx.lang.normalize.Array)\n * @require(qx.lang.normalize.Date)\n * @require(qx.lang.normalize.Error)\n * @require(qx.lang.normalize.Function)\n * @require(qx.lang.normalize.String)\n * @require(qx.lang.normalize.Object)\n * @require(qx.lang.normalize.Number)\n */\nqx.Bootstrap.define(\"qx.Class\",\n{\n  statics :\n  {\n    /**\n     * A static reference to the property implementation in the case it\n     * should be included.\n     */\n    __Property : qx.core.Environment.get(\"module.property\") ? qx.core.Property : null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new class using the qooxdoo class system. This sets up the\n     * namespace for the class and generates the class from the definition map.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Class.define(\"name\",\n     * {\n     *   extend : Object, // superclass\n     *   implement : [Interfaces],\n     *   include : [Mixins],\n     *\n     *   statics:\n     *   {\n     *     CONSTANT : 3.141,\n     *\n     *     publicMethod: function() {},\n     *     _protectedMethod: function() {},\n     *     __privateMethod: function() {}\n     *   },\n     *\n     *   properties:\n     *   {\n     *     \"tabIndex\": { check: \"Number\", init : -1 }\n     *   },\n     *\n     *   members:\n     *   {\n     *     publicField: \"foo\",\n     *     publicMethod: function() {},\n     *\n     *     _protectedField: \"bar\",\n     *     _protectedMethod: function() {},\n     *\n     *     __privateField: \"baz\",\n     *     __privateMethod: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String?null} Name of the class. If <code>null</code>, the class\n     *   will not be added to any namespace which could be handy for testing.\n     * @param config {Map ? null} Class definition structure. The configuration map has the following keys:\n     *     <table>\n     *       <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *       <tr><th>type</th><td>String</td><td>\n     *           Type of the class. Valid types are \"abstract\", \"static\" and \"singleton\".\n     *           If unset it defaults to a regular non-static class.\n     *       </td></tr>\n     *       <tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n     *       <tr><th>implement</th><td>Interface | Interface[]</td><td>Single interface or array of interfaces the class implements.</td></tr>\n     *       <tr><th>include</th><td>Mixin | Mixin[]</td><td>Single mixin or array of mixins, which will be merged into the class.</td></tr>\n     *       <tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n     *       <tr><th>statics</th><td>Map</td><td>Map of static members of the class.</td></tr>\n     *       <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *       <tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n     *       <tr><th>environment</th><td>Map</td><td>Map of environment settings for this class. For a description of the format of a setting see\n     *           {@link qx.core.Environment}.</td></tr>\n     *       <tr><th>events</th><td>Map</td><td>\n     *           Map of events the class fires. The keys are the names of the events and the values are the\n     *           corresponding event type class names.\n     *       </td></tr>\n     *       <tr><th>defer</th><td>Function</td><td>Function that is called at the end of processing the class declaration. It allows access to the declared statics, members and properties.</td></tr>\n     *       <tr><th>destruct</th><td>Function</td><td>The destructor of the class.</td></tr>\n     *     </table>\n     * @return {Class} The defined class\n     */\n    define : function(name, config)\n    {\n      if (!config) {\n        config = {};\n      }\n\n      // Normalize include to array\n      if (config.include && !(qx.Bootstrap.getClass(config.include) === \"Array\")) {\n        config.include = [config.include];\n      }\n\n      // Normalize implement to array\n      if (config.implement && !(qx.Bootstrap.getClass(config.implement) === \"Array\")) {\n        config.implement = [config.implement];\n      }\n\n      // Normalize type\n      var implicitType = false;\n      if (!config.hasOwnProperty(\"extend\") && !config.type) {\n        config.type = \"static\";\n        implicitType = true;\n      }\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        try {\n          this.__validateConfig(name, config);\n        } catch(ex) {\n          if (implicitType) {\n            ex.message = 'Assumed static class because no \"extend\" key was found. ' + ex.message;\n          }\n          throw ex;\n        }\n      }\n\n      // Create the class\n      var clazz = this.__createClass(name, config.type, config.extend, config.statics, config.construct, config.destruct, config.include);\n      \n      // Initialise class and constructor/destructor annotations\n      [ \"@\", \"@construct\", \"@destruct\" ].forEach(function(id) {\n        this.__attachAnno(clazz, id, null, config[id]);\n      }, this);\n\n      // Members, properties, events and mixins are only allowed for non-static classes\n      if (config.extend)\n      {\n        // Attach properties\n        if (config.properties) {\n          this.__addProperties(clazz, config.properties, true);\n        }\n\n        // Attach members\n        if (config.members) {\n          this.__addMembers(clazz, config.members, true, true, false);\n        }\n\n        // Process events\n        if (config.events) {\n          this.__addEvents(clazz, config.events, true);\n        }\n\n        // Include mixins\n        // Must be the last here to detect conflicts\n        if (config.include)\n        {\n          for (var i=0, l=config.include.length; i<l; i++) {\n            this.__addMixin(clazz, config.include[i], false);\n          }\n        }\n      }\n      // If config has a 'extend' key but it's null or undefined\n      else if (config.hasOwnProperty('extend') && qx.core.Environment.get(\"qx.debug\"))\n      {\n         throw new Error('\"extend\" parameter is null or undefined');\n      }\n\n      // Process environment\n      if (config.environment)\n      {\n        for (var key in config.environment) {\n          qx.core.Environment.add(key, config.environment[key]);\n        }\n      }\n\n      // Interface support for non-static classes\n      if (config.implement)\n      {\n        for (var i=0, l=config.implement.length; i<l; i++) {\n          this.__addInterface(clazz, config.implement[i]);\n        }\n      }\n\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateAbstractInterfaces(clazz);\n      }\n\n\n      // Process defer\n      if (config.defer)\n      {\n        config.defer.self = clazz;\n        qx.Bootstrap.addPendingDefer(clazz, function() {\n          clazz = qx.Class.getByName(clazz.classname);\n          config.defer(clazz, clazz.prototype,\n            {\n              add : function(name, config)\n              {\n                // build pseudo properties map\n                var properties = {};\n                properties[name] = config;\n\n                // execute generic property handler\n                qx.Class.__addProperties(clazz, properties, true);\n              }\n            });\n        });\n      }\n\n      return clazz;\n    },\n\n\n    /**\n     * Removes a class from qooxdoo defined by {@link #define}\n     *\n     * @param name {String} Name of the class\n     */\n    undefine : function(name)\n    {\n      // first, delete the class from the registry\n      delete this.$$registry[name];\n      // delete the class reference from the namespaces and all empty namespaces\n      var ns = name.split(\".\");\n      // build up an array containing all namespace objects including window\n      var objects = [window];\n      for (var i = 0; i < ns.length; i++) {\n        objects.push(objects[i][ns[i]]);\n      }\n\n      // go through all objects and check for the constructor or empty namespaces\n      for (var i = objects.length - 1; i >= 1; i--) {\n        var last = objects[i];\n        var parent = objects[i - 1];\n        if (qx.Bootstrap.isFunction(last) || qx.Bootstrap.objectGetLength(last) === 0) {\n          delete parent[ns[i - 1]];\n        } else {\n          break;\n        }\n      }\n    },\n\n\n    /**\n     * Whether the given class exists\n     *\n     * @signature function(name)\n     * @param name {String} class name to check\n     * @return {Boolean} true if class exists\n     */\n    isDefined : qx.util.OOUtil.classIsDefined,\n\n\n    /**\n     * Determine the total number of classes\n     *\n     * @return {Number} the total number of classes\n     */\n    getTotalNumber : function() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n\n    /**\n     * Find a class by its name\n     *\n     * @signature function(name)\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName : qx.Bootstrap.getByName,\n\n\n    /**\n     * Include all features of the given mixin into the class. The mixin must\n     * not include any methods or properties that are already available in the\n     * class. This would only be possible using the {@link #patch} method.\n     *\n     * @param clazz {Class} An existing class which should be augmented by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     */\n    include : function(clazz, mixin)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (!mixin) {\n          throw new Error(\"The mixin to include into class '\" + clazz.classname + \"' is undefined/null!\");\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, false);\n    },\n\n\n    /**\n     * Include all features of the given mixin into the class. The mixin may\n     * include features, which are already defined in the target class. Existing\n     * features of equal name will be overwritten.\n     * Please keep in mind that this functionality is not intended for regular\n     * use, but as a formalized way (and a last resort) in order to patch\n     * existing classes.\n     * \n     * <b>WARNING</b>: You may break working classes and features.\n     *\n     * @param clazz {Class} An existing class which should be modified by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     * @return {Class} the new class definition\n     */\n    patch : function(clazz, mixin)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (!mixin) {\n          throw new Error(\"The mixin to patch class '\" + clazz.classname + \"' is undefined/null!\");\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, true);\n      return qx.Class.getByName(clazz.classname);\n    },\n    \n    \n    /**\n     * Detects whether the object is a Class (and not an instance of a class)\n     * \n     *  @param obj {Object?} the object to inspect\n     *  @return {Boolean} true if it is a class, false if it is anything else\n     */\n    isClass: function(obj) {\n      return obj && obj.$$type === \"Class\" && obj.constructor === obj;\n    },\n\n\n    /**\n     * Whether a class is a direct or indirect sub class of another class,\n     * or both classes coincide.\n     *\n     * @param clazz {Class} the class to check.\n     * @param superClass {Class} the potential super class\n     * @return {Boolean} whether clazz is a sub class of superClass.\n     */\n    isSubClassOf : function(clazz, superClass)\n    {\n      if (!clazz) {\n        return false;\n      }\n\n      if (clazz == superClass) {\n        return true;\n      }\n\n      if (clazz.prototype instanceof superClass) {\n        return true;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Returns the definition of the given property. Returns null\n     * if the property does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the class to check for\n     * @return {Map|null} whether the object support the given event.\n     */\n    getPropertyDefinition : qx.util.OOUtil.getPropertyDefinition,\n\n\n    /**\n     * Returns a list of all properties supported by the given class\n     *\n     * @param clazz {Class} Class to query\n     * @return {String[]} List of all property names\n     */\n    getProperties : function(clazz)\n    {\n      var list = [];\n\n      while (clazz)\n      {\n        if (clazz.$$properties) {\n          list.push.apply(list, Object.keys(clazz.$$properties));\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given property in its class definition. Returns null\n     * if the property is not specified anywhere.\n     *\n     * @param clazz {Class} class to look for the property\n     * @param name {String} name of the property\n     * @return {Class | null} The class which includes the property\n     */\n    getByProperty : function(clazz, name)\n    {\n      while (clazz)\n      {\n        if (clazz.$$properties && clazz.$$properties[name]) {\n          return clazz;\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Whether a class has the given property\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the property to check for\n     * @return {Boolean} whether the class includes the given property.\n     */\n    hasProperty : qx.util.OOUtil.hasProperty,\n\n\n    /**\n     * Returns the event type of the given event. Returns null if\n     * the event does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event\n     * @return {String|null} Event type of the given event.\n     */\n    getEventType : qx.util.OOUtil.getEventType,\n\n\n    /**\n     * Whether a class supports the given event type\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event to check for\n     * @return {Boolean} whether the class supports the given event.\n     */\n    supportsEvent : qx.util.OOUtil.supportsEvent,\n\n\n    /**\n     * Whether a class directly includes a mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnMixin : function(clazz, mixin) {\n      return clazz.$$includes && clazz.$$includes.indexOf(mixin) !== -1;\n    },\n\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given mixin. Returns null if the mixin is not\n     * specified anywhere.\n     *\n     * @param clazz {Class} class to look for the mixin\n     * @param mixin {Mixin} mixin to look for\n     * @return {Class | null} The class which directly includes the given mixin\n     */\n    getByMixin : function(clazz, mixin)\n    {\n      var list, i, l;\n\n      while (clazz)\n      {\n        if (clazz.$$includes)\n        {\n          list = clazz.$$flatIncludes;\n\n          for (i=0, l=list.length; i<l; i++)\n          {\n            if (list[i] === mixin) {\n              return clazz;\n            }\n          }\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Returns a list of all mixins available in a given class.\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} class which should be inspected\n     * @return {Mixin[]} array of mixins this class uses\n     */\n    getMixins : qx.util.OOUtil.getMixins,\n\n\n    /**\n     * Whether a given class or any of its superclasses includes a given mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin.\n     */\n    hasMixin: function(clazz, mixin) {\n      return !!this.getByMixin(clazz, mixin);\n    },\n\n\n    /**\n     * Whether a given class directly includes an interface.\n     *\n     * This function will only return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) using the \"implement\"\n     * key.\n     *\n     * @param clazz {Class} class or instance to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnInterface : function(clazz, iface) {\n      return clazz.$$implements && clazz.$$implements.indexOf(iface) !== -1;\n    },\n\n\n    /**\n     * Returns the class or one of its super classes which contains the\n     * declaration of the given interface. Returns null if the interface is not\n     * specified anywhere.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to look for the interface\n     * @param iface {Interface} interface to look for\n     * @return {Class | null} the class which directly implements the given interface\n     */\n    getByInterface : qx.util.OOUtil.getByInterface,\n\n\n    /**\n     * Returns a list of all interfaces a given class has to implement.\n     *\n     * @param clazz {Class} class which should be inspected\n     * @return {Interface[]} array of interfaces this class implements\n     */\n    getInterfaces : function(clazz)\n    {\n      var list = [];\n\n      while (clazz)\n      {\n        if (clazz.$$implements) {\n          list.push.apply(list, clazz.$$flatImplements);\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n\n    /**\n     * Whether a given class or any of its super classes includes a given interface.\n     *\n     * This function will return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) of the class\n     * or any of its super classes using the \"implement\"\n     * key.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the interface.\n     */\n    hasInterface : qx.util.OOUtil.hasInterface,\n\n\n    /**\n     * Whether a given class complies to an interface.\n     *\n     * Checks whether all methods defined in the interface are\n     * implemented. The class does not need to implement\n     * the interface explicitly in the <code>extend</code> key.\n     *\n     * @param obj {Object} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class conforms to the interface.\n     */\n    implementsInterface : function(obj, iface)\n    {\n      var clazz = obj.constructor;\n\n      if (this.hasInterface(clazz, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.objectImplements(obj, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.classImplements(clazz, iface)) {\n        return true;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance : function()\n    {\n      if (this.$$instance === null)\n      {\n        throw new Error(\"Singleton instance of \" + this + \n          \" is requested, but not ready yet. This is most likely due to a recursive call in the constructor path.\");\n      }\n\n      if (!this.$$instance)\n      {\n        this.$$allowconstruct = true;\n        this.$$instance = null;  // null means \"object is being created\"; needed for another call of getInstance() during instantiation\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    },\n\n\n    /**\n     * Retreive all subclasses of a given class\n     *\n     * @param clazz {Class} the class which should be inspected\n     * \n     * @return {Object} class name hash holding the references to the subclasses or null if the class does not exist.\n     */\n    getSubclasses : function(clazz)\n    {\n      if(!clazz) {\n        return null;\n      }\n      \n      var subclasses = {};\n      var registry = qx.Class.$$registry;\n\n      for (var name in registry) {\n        if(registry[name].superclass && registry[name].superclass == clazz) {\n          subclasses[name] = registry[name];\n        }\n      }\n\n      return subclasses;\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL BASICS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all classes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The class identifier\n     */\n    genericToString : function() {\n      return \"[Class \" + this.classname + \"]\";\n    },\n\n\n    /** Stores all defined classes */\n    $$registry : qx.Bootstrap.$$registry,\n\n\n    /** @type {Map} allowed keys in non-static class definition */\n    __allowedKeys : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"@\"          : \"object\",\n        \"@construct\" : \"object\",\n        \"@destruct\"  : \"object\",\n        \"type\"       : \"string\",    // String\n        \"extend\"     : \"function\",  // Function\n        \"implement\"  : \"object\",    // Interface[]\n        \"include\"    : \"object\",    // Mixin[]\n        \"construct\"  : \"function\",  // Function\n        \"statics\"    : \"object\",    // Map\n        \"properties\" : \"object\",    // Map\n        \"members\"    : \"object\",    // Map\n        \"environment\"   : \"object\", // Map\n        \"events\"     : \"object\",    // Map\n        \"defer\"      : \"function\",  // Function\n        \"destruct\"   : \"function\"   // Function\n      },\n\n      \"default\" : null\n    }),\n\n\n    /** @type {Map} allowed keys in static class definition */\n    __staticAllowedKeys : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"@\"           : \"object\",\n        \"type\"        : \"string\",    // String\n        \"statics\"     : \"object\",    // Map\n        \"environment\" : \"object\",    // Map\n        \"defer\"       : \"function\"   // Function\n      },\n\n      \"default\" : null\n    }),\n\n\n    /**\n     * Validates an incoming configuration and checks for proper keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(name, config)\n      {\n        // Validate type\n        if (config.type && !(config.type === \"static\" || config.type === \"abstract\" || config.type === \"singleton\")) {\n          throw new Error('Invalid type \"' + config.type + '\" definition for class \"' + name + '\"!');\n        }\n\n        // Validate non-static class on the \"extend\" key\n        if (config.type && config.type !== \"static\" && !config.extend) {\n          throw new Error('Invalid config in class \"' + name + '\"! Every non-static class has to extend at least the \"qx.core.Object\" class.');\n        }\n\n        // Validate keys\n        var allowed = config.type === \"static\" ? this.__staticAllowedKeys : this.__allowedKeys;\n        for (var key in config)\n        {\n          if (!allowed[key]) {\n            throw new Error('The configuration key \"' + key + '\" in class \"' + name + '\" is not allowed!');\n          }\n\n          if (config[key] == null) {\n            throw new Error('Invalid key \"' + key + '\" in class \"' + name + '\"! The value is undefined/null!');\n          }\n\n          if (typeof config[key] !== allowed[key]) {\n            throw new Error('Invalid type of key \"' + key + '\" in class \"' + name + '\"! The type of the key must be \"' + allowed[key] + '\"!');\n          }\n        }\n\n        // Validate maps\n        var maps = [ \"statics\", \"properties\", \"members\", \"environment\", \"settings\", \"variants\", \"events\" ];\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key] !== undefined && (\n            config[key].$$hash !== undefined || !qx.Bootstrap.isObject(config[key])\n          )) {\n            throw new Error('Invalid key \"' + key + '\" in class \"' + name + '\"! The value needs to be a map!');\n          }\n        }\n\n        // Validate include definition\n        if (config.include)\n        {\n          if (qx.Bootstrap.getClass(config.include) === \"Array\")\n          {\n            for (var i=0, a=config.include, l=a.length; i<l; i++)\n            {\n              if (a[i] == null || a[i].$$type !== \"Mixin\") {\n                throw new Error('The include definition in class \"' + name + '\" contains an invalid mixin at position ' + i + ': ' + a[i]);\n              }\n            }\n          }\n          else\n          {\n            throw new Error('Invalid include definition in class \"' + name + '\"! Only mixins and arrays of mixins are allowed!');\n          }\n        }\n\n        // Validate implement definition\n        if (config.implement)\n        {\n          if (qx.Bootstrap.getClass(config.implement) === \"Array\")\n          {\n            for (var i=0, a=config.implement, l=a.length; i<l; i++)\n            {\n              if (a[i] == null || a[i].$$type !== \"Interface\") {\n                throw new Error('The implement definition in class \"' + name + '\" contains an invalid interface at position ' + i + ': ' + a[i]);\n              }\n            }\n          }\n          else\n          {\n            throw new Error('Invalid implement definition in class \"' + name + '\"! Only interfaces and arrays of interfaces are allowed!');\n          }\n        }\n\n        // Check mixin compatibility\n        if (config.include)\n        {\n          try {\n            qx.Mixin.checkCompatibility(config.include);\n          } catch(ex) {\n            throw new Error('Error in include definition of class \"' + name + '\"! ' + ex.message);\n          }\n        }\n\n        // Validate environment\n        if (config.environment)\n        {\n          for (var key in config.environment)\n          {\n            if (key.substr(0, key.indexOf(\".\")) != name.substr(0, name.indexOf(\".\"))) {\n              throw new Error('Forbidden environment setting \"' + key +\n                '\" found in \"' + name + '\". It is forbidden to define a ' +\n                'environment setting for an external namespace!');\n            }\n          }\n        }\n\n        // Validate settings\n        if (config.settings)\n        {\n          for (var key in config.settings)\n          {\n            if (key.substr(0, key.indexOf(\".\")) != name.substr(0, name.indexOf(\".\"))) {\n              throw new Error('Forbidden setting \"' + key + '\" found in \"' + name + '\". It is forbidden to define a default setting for an external namespace!');\n            }\n          }\n        }\n\n        // Validate variants\n        if (config.variants)\n        {\n          for (var key in config.variants)\n          {\n            if (key.substr(0, key.indexOf(\".\")) != name.substr(0, name.indexOf(\".\"))) {\n              throw new Error('Forbidden variant \"' + key + '\" found in \"' + name + '\". It is forbidden to define a variant for an external namespace!');\n            }\n          }\n        }\n      },\n\n      \"default\" : function(name, config) {}\n    }),\n\n\n    /**\n     * Validates the interfaces required by abstract base classes\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} The configured class.\n     */\n    __validateAbstractInterfaces : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(clazz)\n      {\n        var superclass = clazz.superclass;\n        while (superclass)\n        {\n          if (superclass.$$classtype !== \"abstract\") {\n            break;\n          }\n\n          var interfaces = superclass.$$implements;\n          if (interfaces)\n          {\n            for (var i=0; i<interfaces.length; i++) {\n              qx.Interface.assert(clazz, interfaces[i], true);\n            }\n          }\n          superclass = superclass.superclass;\n        }\n      },\n\n      \"default\" : function(clazz) {}\n    }),\n    \n    \n    /**\n     * Attaches an annotation to a class\n     *\n     * @param clazz {Map} Static methods or fields\n     * @param group {String} Group name\n     * @param key {String} Name of the annotated item\n     * @param anno {Object} Annotation object\n     */\n    __attachAnno : function(clazz, group, key, anno) {\n      if (anno !== undefined) {\n        if (clazz.$$annotations === undefined) {\n          clazz.$$annotations = {};\n          clazz.$$annotations[group] = {};\n          \n        } else if (clazz.$$annotations[group] === undefined) {\n          clazz.$$annotations[group] = {};\n        }\n        \n        if (!qx.lang.Type.isArray(anno)) {\n          anno = [anno];\n        }\n        \n        if (key) {\n          clazz.$$annotations[group][key] = anno;\n        } else {\n          clazz.$$annotations[group] = anno;\n        }\n      }\n    },\n\n\n    /**\n     * Creates a class by type. Supports modern inheritance etc.\n     *\n     * @param name {String} Full name of the class\n     * @param type {String} type of the class, i.e. \"static\", \"abstract\" or \"singleton\"\n     * @param extend {Class} Superclass to inherit from\n     * @param statics {Map} Static methods or fields\n     * @param construct {Function} Constructor of the class\n     * @param destruct {Function} Destructor of the class\n     * @param mixins {Mixin[]} array of mixins of the class\n     * @return {Class} The generated class\n     */\n    __createClass : function(name, type, extend, statics, construct, destruct, mixins)\n    {\n      var isStrictMode = function () {\n        return (typeof this == 'undefined');\n      };\n\n      var clazz;\n\n      if (!extend && qx.core.Environment.get(\"qx.aspects\") == false)\n      {\n        // Create empty/non-empty class\n        clazz = statics || {};\n        qx.Bootstrap.setDisplayNames(clazz, name);\n      }\n      else\n      {\n        clazz = {};\n\n        if (extend)\n        {\n          // Create default constructor\n          if (!construct) {\n            construct = this.__createDefaultConstructor();\n          }\n\n          clazz = this.__wrapConstructor(construct, name, type);\n\n          // Add singleton getInstance()\n          if (type === \"singleton\") {\n            clazz.getInstance = this.getInstance;\n          }\n\n          qx.Bootstrap.setDisplayName(construct, name, \"constructor\");\n        }\n        \n        // Copy statics\n        if (statics)\n        {\n          qx.Bootstrap.setDisplayNames(statics, name);\n\n          var key;\n\n          for (var i=0, a=Object.keys(statics), l=a.length; i<l; i++)\n          {\n            key = a[i];\n            var staticValue = statics[key];\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              if (key.charAt(0) === '@') {\n                if (statics[key.substring(1)] === undefined) {\n                  throw new Error('Annonation for static \"' + key.substring(1) + '\" of Class \"' + clazz.classname + '\" does not exist!');\n                }\n                if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n                  throw new Error('Cannot annotate private static \"' + key.substring(1) + '\" of Class \"' + clazz.classname);\n                }\n              }\n            }\n            if (key.charAt(0) === '@') {\n              continue;\n            }\n\n            if (qx.core.Environment.get(\"qx.aspects\"))\n            {\n\n              if (staticValue instanceof Function) {\n                staticValue = qx.core.Aspect.wrap(name + \".\" + key, staticValue, \"static\");\n              }\n\n              clazz[key] = staticValue;\n            }\n            else\n            {\n              clazz[key] = staticValue;\n            }\n            \n            // Attach annotations\n            this.__attachAnno(clazz, \"statics\", key, statics[\"@\" + key]);\n          }\n        }\n      }\n\n      // Create namespace\n      var basename = name ? qx.Bootstrap.createNamespace(name, clazz) : \"\";\n\n      // Store names in constructor/object\n      clazz.classname = name;\n      if (!isStrictMode()) {\n        try {\n          clazz.name = name;\n        } catch(ex) {\n          // Nothing\n        }\n      }\n      clazz.basename = basename;\n\n      // Store type info\n      clazz.$$type = \"Class\";\n      if (type) {\n        clazz.$$classtype = type;\n      }\n\n      // Attach toString\n      if (!clazz.hasOwnProperty(\"toString\")) {\n        clazz.toString = this.genericToString;\n      }\n\n      if (extend)\n      {\n        qx.Bootstrap.extendClass(clazz, construct, extend, name, basename);\n\n        // Store destruct onto class\n        if (destruct)\n        {\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            destruct = qx.core.Aspect.wrap(name, destruct, \"destructor\");\n          }\n\n          clazz.$$destructor = destruct;\n          qx.Bootstrap.setDisplayName(destruct, name, \"destruct\");\n        }\n      }\n\n      // Store class reference in global class registry\n      this.$$registry[name] = clazz;\n\n      // Return final class object\n      return clazz;\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE ADD HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Attach events to the class\n     *\n     * @param clazz {Class} class to add the events to\n     * @param events {Map} map of event names the class fires.\n     * @param patch {Boolean ? false} Enable redefinition of event type?\n     */\n    __addEvents : function(clazz, events, patch)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (typeof events !== \"object\" || qx.Bootstrap.getClass(events) === \"Array\") {\n          throw new Error(clazz.classname + \": the events must be defined as map!\");\n        }\n\n        for (var key in events)\n        {\n          if (typeof events[key] !== \"string\") {\n            throw new Error(clazz.classname + \"/\" + key + \": the event value needs to be a string with the class name of the event object which will be fired.\");\n          }\n        }\n\n        // Compare old and new event type/value if patching is disabled\n        if (clazz.$$events && patch !== true)\n        {\n          for (var key in events)\n          {\n            if (clazz.$$events[key] !== undefined && clazz.$$events[key] !== events[key]) {\n              throw new Error(clazz.classname + \"/\" + key + \": the event value/type cannot be changed from \" + clazz.$$events[key] + \" to \" + events[key]);\n            }\n          }\n        }\n      }\n\n      if (clazz.$$events)\n      {\n        for (var key in events) {\n          clazz.$$events[key] = events[key];\n        }\n      }\n      else\n      {\n        clazz.$$events = events;\n      }\n    },\n\n\n    /**\n     * Attach properties to classes\n     *\n     * @param clazz {Class} class to add the properties to\n     * @param properties {Map} map of properties\n     * @param patch {Boolean ? false} Overwrite property with the limitations of a property\n               which means you are able to refine but not to replace (esp. for new properties)\n     */\n    __addProperties : function(clazz, properties, patch)\n    {\n      // check for the property module\n      if (!qx.core.Environment.get(\"module.property\")) {\n        throw new Error(\"Property module disabled.\");\n      }\n      \n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.Bootstrap.isQxCoreObject(properties)) {\n          throw new Error(\"Invalid 'properties' for \" + clazz.classname);\n        }\n      }\n\n      var config;\n\n      if (patch === undefined) {\n        patch = false;\n      }\n\n      var proto = clazz.prototype;\n\n      for (var name in properties)\n      {\n        config = properties[name];\n\n        // Check incoming configuration\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateProperty(clazz, name, config, patch);\n        }\n\n        // Store name into configuration\n        config.name = name;\n\n        // Add config to local registry\n        if (!config.refine)\n        {\n          if (clazz.$$properties === undefined) {\n            clazz.$$properties = {};\n          }\n\n          clazz.$$properties[name] = config;\n        }\n\n        // Store init value to prototype. This makes it possible to\n        // overwrite this value in derived classes.\n        if (config.init !== undefined) {\n          clazz.prototype[\"$$init_\" + name] = config.init;\n        }\n\n        // register event name\n        if (config.event !== undefined) {\n          // break if no events layer loaded\n          if (!qx.core.Environment.get(\"module.events\")) {\n            throw new Error(\"Events module not enabled.\");\n          }\n          var event = {};\n          event[config.event] = \"qx.event.type.Data\";\n          if (config.async) {\n          \tevent[config.event + \"Async\"] = \"qx.event.type.Data\";\n          }\n          this.__addEvents(clazz, event, patch);\n        }\n\n        // Remember inheritable properties\n        if (config.inheritable)\n        {\n          this.__Property.$$inheritable[name] = true;\n          if (!proto.$$refreshInheritables) {\n            this.__Property.attachRefreshInheritables(clazz);\n          }\n        }\n\n        if (!config.refine) {\n          this.__Property.attachMethods(clazz, name, config);\n        }\n        \n        // Add annotations\n        this.__attachAnno(clazz, \"properties\", name, config[\"@\"]);\n      }\n    },\n\n    /**\n     * Validates the given property\n     *\n     * @signature function(clazz, name, config, patch)\n     * @param clazz {Class} class to add property to\n     * @param name {String} name of the property\n     * @param config {Map} configuration map\n     * @param patch {Boolean ? false} enable refine/patch?\n     */\n    __validateProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(clazz, name, config, patch)\n      {\n        // check for properties\n        if (!qx.core.Environment.get(\"module.property\")) {\n          throw new Error(\"Property module disabled.\");\n        }\n\n        var has = this.hasProperty(clazz, name);\n\n        if (has)\n        {\n          var existingProperty = this.getPropertyDefinition(clazz, name);\n\n          if (config.refine && existingProperty.init === undefined) {\n            throw new Error(\"Could not refine an init value if there was previously no init value defined. Property '\" + name + \"' of class '\" + clazz.classname + \"'.\");\n          }\n        }\n\n        if (!has && config.refine) {\n          throw new Error(\"Could not refine non-existent property: '\" + name + \"' of class: '\" + clazz.classname + \"'!\");\n        }\n\n        if (has && !patch) {\n          throw new Error(\"Class \" + clazz.classname + \" already has a property: \" + name + \"!\");\n        }\n\n        if (has && patch)\n        {\n          if (!config.refine) {\n            throw new Error('Could not refine property \"' + name + '\" without a \"refine\" flag in the property definition! This class: ' + clazz.classname + ', original class: ' + this.getByProperty(clazz, name).classname + '.');\n          }\n\n          for (var key in config)\n          {\n            if (key !== \"init\" && key !== \"refine\" && key !== \"@\") {\n              throw new Error(\"Class \" + clazz.classname + \" could not refine property: \" + name + \"! Key: \" + key + \" could not be refined!\");\n            }\n          }\n        }\n\n        // Check 0.7 keys\n        var allowed = config.group ? this.__Property.$$allowedGroupKeys : this.__Property.$$allowedKeys;\n        for (var key in config)\n        {\n          if (allowed[key] === undefined) {\n            throw new Error('The configuration key \"' + key + '\" of property \"' + name + '\" in class \"' + clazz.classname + '\" is not allowed!');\n          }\n\n          if (config[key] === undefined) {\n            throw new Error('Invalid key \"' + key + '\" of property \"' + name + '\" in class \"' + clazz.classname + '\"! The value is undefined: ' + config[key]);\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error('Invalid type of key \"' + key + '\" of property \"' + name + '\" in class \"' + clazz.classname + '\"! The type of the key must be \"' + allowed[key] + '\"!');\n          }\n        }\n\n        if (config.transform != null)\n        {\n          if (!(typeof config.transform === \"string\")) {\n            throw new Error('Invalid transform definition of property \"' + name + '\" in class \"' + clazz.classname + '\"! Needs to be a String.');\n          }\n        }\n\n        if (config.check != null)\n        {\n          if (\n            !qx.Bootstrap.isString(config.check) &&\n            !qx.Bootstrap.isArray(config.check) &&\n            !qx.Bootstrap.isFunction(config.check)\n          ) {\n            throw new Error('Invalid check definition of property \"' + name + '\" in class \"' + clazz.classname + '\"! Needs to be a String, Array or Function.');\n          }\n        }\n      },\n\n      \"default\" : null\n    }),\n\n\n    /**\n     * Attach members to a class\n     *\n     * @param clazz {Class} clazz to add members to\n     * @param members {Map} The map of members to attach\n     * @param patch {Boolean ? false} Enable patching of\n     * @param base {Boolean ? true} Attach base flag to mark function as members\n     *     of this class\n     * @param wrap {Boolean ? false} Whether the member method should be wrapped.\n     *     this is needed to allow base calls in patched mixin members.\n     */\n    __addMembers : function(clazz, members, patch, base, wrap)\n    {\n      var proto = clazz.prototype;\n      var key, member;\n      qx.Bootstrap.setDisplayNames(members, clazz.classname + \".prototype\");\n\n      for (var i=0, a=Object.keys(members), l=a.length; i<l; i++)\n      {\n        key = a[i];\n        member = members[key];\n\n        if (qx.core.Environment.get(\"qx.debug\"))\n        {\n          if (key.charAt(0) === '@') {\n            var annoKey = key.substring(1);\n            if (members[annoKey] === undefined && proto[annoKey] === undefined) {\n              throw new Error('Annonation for \"' + annoKey + '\" of Class \"' + clazz.classname + '\" does not exist!');\n            }\n            if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n              throw new Error('Cannot annotate private member \"' + key.substring(1) + '\" of Class \"' + clazz.classname);\n            }\n          } else {\n            if (proto[key] !== undefined && key.charAt(0) === \"_\" && key.charAt(1) === \"_\") {\n              throw new Error('Overwriting private member \"' + key + '\" of Class \"' + clazz.classname + '\" is not allowed!');\n            }\n  \n            if (patch !== true && proto.hasOwnProperty(key)) {\n              throw new Error('Overwriting member \"' + key + '\" of Class \"' + clazz.classname + '\" is not allowed!');\n            }\n          }\n        }\n        \n        // Annotations are not members\n        if (key.charAt(0) === '@') {\n          var annoKey = key.substring(1);\n          if (members[annoKey] === undefined) {\n            this.__attachAnno(clazz, \"members\", annoKey, members[key]);\n          }\n          continue;\n        }\n\n        // If it's a property accessor, we need to install it now so that this.base can refer to it\n        if (proto[key] != undefined && proto[key].$$install) {\n        \tproto[key].$$install();\n        }\n\n        // Added helper stuff to functions\n        // Hint: Could not use typeof function because RegExp objects are functions, too\n        // Protect to apply base property and aspect support on special attributes e.g.\n        // classes which are function like as well.\n        if (base !== false && member instanceof Function && member.$$type == null)\n        {\n          if (wrap == true)\n          {\n            // wrap \"patched\" mixin member\n            member = this.__mixinMemberWrapper(member, proto[key]);\n          }\n          else\n          {\n            // Configure extend (named base here)\n            // Hint: proto[key] is not yet overwritten here\n            if (proto[key]) {\n              member.base = proto[key];\n            }\n            member.self = clazz;\n          }\n\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            member = qx.core.Aspect.wrap(clazz.classname + \".\" + key, member, \"member\");\n          }\n        }\n\n        // Attach member\n        proto[key] = member;\n        \n        // Attach annotations\n        this.__attachAnno(clazz, \"members\", key, members[\"@\" + key]);\n      }\n    },\n\n\n    /**\n     * Wraps a member function of a mixin, which is included using \"patch\". This\n     * allows \"base\" calls in the mixin member function.\n     *\n     * @param member {Function} The mixin method to wrap\n     * @param base {Function} The overwritten method\n     * @return {Function} the wrapped mixin member\n     */\n    __mixinMemberWrapper : function(member, base)\n    {\n      if (base)\n      {\n        return function()\n        {\n          var oldBase = member.base;\n          member.base = base;\n          var retval = member.apply(this, arguments);\n          member.base = oldBase;\n          return retval;\n        };\n      }\n      else\n      {\n        return member;\n      }\n    },\n\n\n    /**\n     * Add a single interface to a class\n     *\n     * @param clazz {Class} class to add interface to\n     * @param iface {Interface} the Interface to add\n     */\n    __addInterface : function(clazz, iface)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (!clazz || !iface) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n\n        // This differs from mixins, we only check if the interface is already\n        // directly used by this class. It is allowed however, to have an interface\n        // included multiple times by extends in the interfaces etc.\n        if (this.hasOwnInterface(clazz, iface)) {\n          throw new Error('Interface \"' + iface.name + '\" is already used by Class \"' + clazz.classname + '!');\n        }\n\n        // Check interface and wrap members\n        if (clazz.$$classtype !== \"abstract\") {\n          qx.Interface.assert(clazz, iface, true);\n        }\n      }\n\n      // Store interface reference\n      var list = qx.Interface.flatten([iface]);\n      if (clazz.$$implements)\n      {\n        clazz.$$implements.push(iface);\n        clazz.$$flatImplements.push.apply(clazz.$$flatImplements, list);\n      }\n      else\n      {\n        clazz.$$implements = [iface];\n        clazz.$$flatImplements = list;\n      }\n    },\n\n\n    /**\n     * Include all features of the mixin into the given class, recursively.\n     *\n     * @param clazz {Class} The class onto which the mixin should be attached.\n     * @param mixin {Mixin} Include all features of this mixin\n     * @param patch {Boolean} Overwrite existing fields, functions and properties\n     */\n    __addMixin : function(clazz, mixin, patch)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (!clazz || !mixin) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n      }\n\n      if (this.hasMixin(clazz, mixin)) {\n        return;\n      }\n\n      // Attach content\n      var list = qx.Mixin.flatten([mixin]);\n      var entry;\n\n      for (var i=0, l=list.length; i<l; i++)\n      {\n        entry = list[i];\n\n        // Attach events\n        if (entry.$$events) {\n          this.__addEvents(clazz, entry.$$events, patch);\n        }\n\n        // Attach properties (Properties are already readonly themselves, no patch handling needed)\n        if (entry.$$properties) {\n          this.__addProperties(clazz, entry.$$properties, patch);\n        }\n\n        // Attach members (Respect patch setting, but dont apply base variables)\n        if (entry.$$members) {\n          this.__addMembers(clazz, entry.$$members, patch, patch, patch);\n        }\n      }\n\n      // Store mixin reference\n      if (clazz.$$includes)\n      {\n        clazz.$$includes.push(mixin);\n        clazz.$$flatIncludes.push.apply(clazz.$$flatIncludes, list);\n      }\n      else\n      {\n        clazz.$$includes = [mixin];\n        clazz.$$flatIncludes = list;\n      }\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE FUNCTION HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the default constructor.\n     * This constructor just calls the constructor of the base class.\n     *\n     * @return {Function} The default constructor.\n     */\n    __createDefaultConstructor : function()\n    {\n      function defaultConstructor() {\n        defaultConstructor.base.apply(this, arguments);\n      }\n\n      return defaultConstructor;\n    },\n\n\n    /**\n     * Generate a wrapper of the original class constructor in order to enable\n     * some of the advanced OO features (e.g. abstract class, singleton, mixins)\n     *\n     * @param construct {Function} the original constructor\n     * @param name {String} name of the class\n     * @param type {String} the user specified class type\n     * @return {Function} The wrapped constructor\n     */\n    __wrapConstructor : function(construct, name, type)\n    {\n      var wrapper = function()\n      {\n        var clazz = wrapper;\n\n        if (qx.core.Environment.get(\"qx.debug\"))\n        {\n          // new keyword check\n          if (!(this instanceof clazz)) {\n            throw new Error(\"Please initialize '\" + name + \"' objects using the new keyword!\");\n          }\n\n          // add abstract and singleton checks\n          if (type === \"abstract\")\n          {\n            if (this.classname===name) {\n              throw new Error(\"The class ',\" + name + \"' is abstract! It is not possible to instantiate it.\");\n            }\n          }\n          else if (type === \"singleton\")\n          {\n            if (!clazz.$$allowconstruct) {\n              throw new Error(\"The class '\" + name + \"' is a singleton! It is not possible to instantiate it directly. Use the static getInstance() method instead.\");\n            }\n          }\n        }\n\n        // Execute default constructor\n        var retval=clazz.$$original.apply(this,arguments);\n\n        // Initialize local mixins\n        if (clazz.$$includes)\n        {\n          var mixins=clazz.$$flatIncludes;\n          for (var i=0, l=mixins.length; i<l; i++)\n          {\n            if (mixins[i].$$constructor) {\n              mixins[i].$$constructor.apply(this,arguments);\n            }\n          }\n        }\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // Mark instance as initialized\n          if (this.classname === name) {\n            this.$$initialized = true;\n          }\n        }\n\n        // Return optional return value\n        return retval;\n      };\n\n      if (qx.core.Environment.get(\"qx.aspects\"))\n      {\n        var aspectWrapper = qx.core.Aspect.wrap(name, wrapper, \"constructor\");\n        wrapper.$$original = construct;\n        wrapper.constructor = aspectWrapper;\n        wrapper = aspectWrapper;\n      }\n\n      // Store original constructor\n      wrapper.$$original = construct;\n\n      // Store wrapper into constructor (needed for base calls etc.)\n      construct.wrapper = wrapper;\n\n      // Return generated wrapper\n      return wrapper;\n    }\n  },\n\n  defer : function()\n  {\n    // Binding of already loaded bootstrap classes\n    if (qx.core.Environment.get(\"qx.aspects\"))\n    {\n      for (var classname in qx.Bootstrap.$$registry)\n      {\n        var statics = qx.Bootstrap.$$registry[classname];\n\n        for (var key in statics)\n        {\n          // only functions, no regexps\n          if (statics[key] instanceof Function) {\n            statics[key] = qx.core.Aspect.wrap(classname + \".\" + key, statics[key], \"static\");\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}