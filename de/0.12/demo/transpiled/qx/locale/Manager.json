{
  "className": "qx.locale.Manager",
  "packageName": "qx.locale",
  "name": "Manager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 35,
        "column": 0
      },
      "end": {
        "line": 478,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The qx.locale.Manager provides static translation methods (like tr()) and\n general locale information.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.event.dispatch.Direct"
        },
        {
          "name": "@require",
          "body": "qx.locale.LocalizedString"
        },
        {
          "name": "@require",
          "body": "qx.bom.client.Locale"
        }
      ],
      "@cldr": [
        {
          "name": "@cldr",
          "body": ""
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 49,
        "column": 14
      },
      "end": {
        "line": 58,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "statics": {
    "tr": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "qx.lang.String.format"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trn": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "count {Integer} singular form if equals 1, otherwise plural",
            "paramName": "count",
            "description": " singular form if equals 1, otherwise plural",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "qx.lang.String.format"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trc": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message with translation hint (from developer addressed to translator).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "qx.lang.String.format"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trnc": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message with translation hint (from developer addressed to translator).\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "count {Integer} singular form if equals 1, otherwise plural",
            "paramName": "count",
            "description": " singular form if equals 1, otherwise plural",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "qx.lang.String.format"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "marktr": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark the message for translation but return the original message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} the message ID",
            "paramName": "messageId",
            "description": " the message ID",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} messageId",
            "type": "String",
            "description": " messageId"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "locale": {
      "location": {
        "start": {
          "line": 179,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>current locale. locale is an language code like de, de<em>AT, en, en</em>GB, fr, …</p>"
          }
        ]
      },
      "name": "locale",
      "propertyType": "new",
      "event": "changeLocale",
      "apply": "_applyLocale",
      "check": "String"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__defaultLocale": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 63
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__locale": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__language": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__translations": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 212,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__locales": {
      "location": {
        "start": {
          "line": 213,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__clientLocale": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getLanguage": {
      "location": {
        "start": {
          "line": 223,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the language code of the current locale\n This is the first part of a locale definition. The language for \"de_DE\" would be \"de\"</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} language code",
            "type": "String",
            "description": " language code"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTerritory": {
      "location": {
        "start": {
          "line": 235,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the territory code of the current locale\n This is the second part of a locale definition. The territory for \"de_DE\" would be \"DE\"</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} territory code",
            "type": "String",
            "description": " territory code"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAvailableLocales": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the available application locales\n This corresponds to the LOCALES setting in config.json. Without argument,\n it only returns the currently loaded locales, with an argument of true\n all locales that went into the build. This is particularly interesting if\n locales were generated as dedicated I18N parts, and have to be loaded\n explicitly before being available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "includeNonloaded {Boolean?null} include locales not yet loaded",
            "paramName": "includeNonloaded",
            "description": " include locales not yet loaded",
            "optional": true,
            "defaultValue": "null",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} array of available locales",
            "type": "String[]",
            "description": " array of available locales"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__extractLanguage": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Extract the language part from a locale.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "locale {String} locale to be used",
            "paramName": "locale",
            "description": " locale to be used",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} language",
            "type": "String",
            "description": " language"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyLocale": {
      "location": {
        "start": {
          "line": 295,
          "column": 4
        },
        "end": {
          "line": 305,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "locale"
      ]
    },
    "addTranslation": {
      "location": {
        "start": {
          "line": 320,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a translation to the translation manager.\n If <code>languageCode</code> already exists, its map will be updated with\n <code>translationMap</code> (new keys will be added, existing keys will be\n overwritten).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "languageCode {String} language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "paramName": "languageCode",
            "description": " language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "translationMap {Map} mapping of message identifiers to message strings in the target\n                             language, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\n                             are separate keys.",
            "paramName": "translationMap",
            "description": " mapping of message identifiers to message strings in the target\n                             language, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\n                             are separate keys.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addLocale": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a localization to the localization manager.\n If <code>localeCode</code> already exists, its map will be updated with\n <code>localeMap</code> (new keys will be added, existing keys will be overwritten).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "localeCode {String} locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "paramName": "localeCode",
            "description": " locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "localeMap {Map} mapping of locale keys to the target locale values, e.g.\n                        <i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.",
            "paramName": "localeMap",
            "description": " mapping of locale keys to the target locale values, e.g.\n                        <i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "translate": {
      "location": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 379,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message using the current locale and apply format string to the arguments.\n Implements the lookup chain locale (e.g. en_US) -&gt; language (e.g. en) -&gt;\n default locale (e.g. C). Localizes the arguments if possible and splices\n them into the message. If qx.dynlocale is on, returns a {@link\n LocalizedString}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object[]} array of objects, which are inserted into the format string",
            "paramName": "args",
            "description": " array of objects, which are inserted into the format string",
            "type": "Object[]"
          },
          {
            "name": "@param",
            "body": "locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}",
            "paramName": "locale",
            "description": " locale to be used; if not given, defaults to the value of {@link #locale}",
            "optional": true,
            "defaultValue": "#locale",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} translated message or localized string",
            "type": "String | LocalizedString",
            "description": " translated message or localized string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "localize": {
      "location": {
        "start": {
          "line": 394,
          "column": 4
        },
        "end": {
          "line": 398,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provide localization (CLDR) data.\n Implements the lookup chain locale (e.g. en_US) -&gt; language (e.g. en) -&gt;\n default locale (e.g. C). Localizes the arguments if possible and splices\n them into the message. If qx.dynlocale is on, returns a {@link\n LocalizedString}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object[]} array of objects, which are inserted into the format string",
            "paramName": "args",
            "description": " array of objects, which are inserted into the format string",
            "type": "Object[]"
          },
          {
            "name": "@param",
            "body": "locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}",
            "paramName": "locale",
            "description": " locale to be used; if not given, defaults to the value of {@link #locale}",
            "optional": true,
            "defaultValue": "#locale",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} translated message or localized string",
            "type": "String | LocalizedString",
            "description": " translated message or localized string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__lookupAndExpand": {
      "location": {
        "start": {
          "line": 415,
          "column": 4
        },
        "end": {
          "line": 476,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Look up an I18N key in a catalog and expand format strings.\n Implements the lookup chain locale (e.g. en_US) -&gt; language (e.g. en) -&gt;\n default locale (e.g. C). Localizes the arguments if possible and splices\n them into the message. If qx.dynlocale is on, returns a {@link\n LocalizedString}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "catalog {Map} map of I18N keys and their values",
            "paramName": "catalog",
            "description": " map of I18N keys and their values",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object[]} array of objects, which are inserted into the format string",
            "paramName": "args",
            "description": " array of objects, which are inserted into the format string",
            "type": "Object[]"
          },
          {
            "name": "@param",
            "body": "locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}",
            "paramName": "locale",
            "description": " locale to be used; if not given, defaults to the value of {@link #locale}",
            "optional": true,
            "defaultValue": "#locale",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} translated message or localized string",
            "type": "String | LocalizedString",
            "description": " translated message or localized string"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "bind": {
      "type": "function",
      "name": "bind",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The bind method delegates the call to the\n {@link qx.data.SingleValueBinding#bind} function. As source, the current\n object (this) will be used.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property name of the target object.",
            "paramName": "targetProperty",
            "description": " The property name of the target object.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map?null} A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information.",
            "paramName": "options",
            "description": " A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\n   for referencing the binding e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index.",
            "type": "var",
            "description": " Returns the internal id for that binding. This can be used\n   for referencing the binding e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for object and property (source and\n   target).",
            "type": "qx.core.AssertionError",
            "description": " If the event is no data event or\n   there is no property definition for object and property (source and\n   target)."
          }
        ]
      }
    },
    "bindAsync": {
      "type": "function",
      "name": "bindAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The bind method delegates the call to the\n {@link qx.data.SingleValueBinding#bind} function. As source, the current\n object (this) will be used.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property name of the target object.",
            "paramName": "targetProperty",
            "description": " The property name of the target object.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map} A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information.",
            "paramName": "options",
            "description": " A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} A promise which is resolved when the initial value\n \t has been set on the target.  Note that this does NOT resolve when subsequent\n   values are returned.  The promise value is the internal id for that binding.\n   The id can be used for referencing the binding e.g. for removing. This is not\n   an atomic id so you can't you use it as a hash-map index.",
            "type": "qx.Promise",
            "description": " A promise which is resolved when the initial value\n \t has been set on the target.  Note that this does NOT resolve when subsequent\n   values are returned.  The promise value is the internal id for that binding.\n   The id can be used for referencing the binding e.g. for removing. This is not\n   an atomic id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for object and property (source and\n   target).",
            "type": "qx.core.AssertionError",
            "description": " If the event is no data event or\n   there is no property definition for object and property (source and\n   target)."
          }
        ]
      }
    },
    "removeBinding": {
      "type": "function",
      "name": "removeBinding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the binding with the given id from the current object. The\n id has to be the id returned by any of the bind functions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id of the binding.",
            "paramName": "id",
            "description": " The id of the binding.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the binding could not be found.",
            "type": "Error",
            "description": " If the binding could not be found."
          }
        ]
      }
    },
    "removeRelatedBindings": {
      "type": "function",
      "name": "removeRelatedBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings between the object and the related one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "relatedObject {qx.core.Object} The object of which related\n   bindings should be removed.",
            "paramName": "relatedObject",
            "description": " The object of which related\n   bindings should be removed.",
            "type": "qx.core.Object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed.",
            "type": "Error",
            "description": " If one of the bindings listed internally can not be\n   removed."
          }
        ]
      }
    },
    "removeAllBindings": {
      "type": "function",
      "name": "removeAllBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings from the object.</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the object is not in the internal\n   registry of the bindings.",
            "type": "qx.core.AssertionError",
            "description": " If the object is not in the internal\n   registry of the bindings."
          },
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed.",
            "type": "Error",
            "description": " If one of the bindings listed internally can not be\n   removed."
          }
        ]
      }
    },
    "getBindings": {
      "type": "function",
      "name": "getBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array which lists all bindings for the object.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject, sourceEvent,\n   targetObject and targetProperty in that order.",
            "type": "qx.data.Array",
            "description": " An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject, sourceEvent,\n   targetObject and targetProperty in that order."
          }
        ]
      }
    },
    "debug": {
      "type": "function",
      "name": "debug",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs a debug message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "info": {
      "type": "function",
      "name": "info",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an info message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "warn": {
      "type": "function",
      "name": "warn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs a warning message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "error": {
      "type": "function",
      "name": "error",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an error message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "trace": {
      "type": "function",
      "name": "trace",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an error message with the current stack trace</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      }
    },
    "__logMessage": {
      "type": "function",
      "name": "__logMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper that calls the appropriate logger function with the current object\n and any number of items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} The log level of the message",
            "paramName": "level",
            "description": " The log level of the message",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {arguments} Arguments list to be logged",
            "paramName": "varargs",
            "description": " Arguments list to be logged",
            "type": "arguments"
          }
        ]
      }
    },
    "addListener": {
      "type": "function",
      "name": "addListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event listener to this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "String",
            "description": " An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "addListenerOnce": {
      "type": "function",
      "name": "addListenerOnce",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event listener to this object, which is only called once. After the\n listener is called the event listener gets removed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object ? window} reference to the 'this' variable inside the callback",
            "paramName": "context",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "String",
            "description": " An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "removeListener": {
      "type": "function",
      "name": "removeListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove event listener from this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "removeListenerById": {
      "type": "function",
      "name": "removeListenerById",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from an event target by an id returned by\n {@link #addListener}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "hasListener": {
      "type": "function",
      "name": "hasListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if there are one or more listeners for an event type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "Boolean",
            "description": " Whether the object has a listener of the given type."
          }
        ]
      }
    },
    "dispatchEvent": {
      "type": "function",
      "name": "dispatchEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatch an event on this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Event} event to dispatch",
            "paramName": "evt",
            "description": " event to dispatch",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean",
            "description": " Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireEvent": {
      "type": "function",
      "name": "fireEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an event on this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": " whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireEventAsync": {
      "type": "function",
      "name": "fireEventAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an event on this object; equivalent to fireEvent, except that it\n always returns a promise</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": " a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      }
    },
    "fireNonBubblingEvent": {
      "type": "function",
      "name": "fireNonBubblingEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event object and dispatch it on this object.\n The event dispatched with this method does never bubble! Use only if you\n are sure that bubbling is not required.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean",
            "description": " Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireNonBubblingEventAsync": {
      "type": "function",
      "name": "fireNonBubblingEventAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event object and dispatch it on this object; equivalent to fireNonBubblingEvent,\n except that it always returns a promise.\n The event dispatched with this method does never bubble! Use only if you\n are sure that bubbling is not required.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": " a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      }
    },
    "fireDataEvent": {
      "type": "function",
      "name": "fireDataEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an non-bubbling data event on this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": " whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireDataEventAsync": {
      "type": "function",
      "name": "fireDataEventAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an non-bubbling data event on this object; equivalent to\n fireEvent, except that it always returns a promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": " a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      }
    },
    "set": {
      "type": "function",
      "name": "set",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets multiple properties at once by using a property list or\n sets one property and its value by the first and second argument.\n As a fallback, if no generated property setter could be found, a\n handwritten setter will be searched and invoked if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Map | String} a map of property values. The key is the name of the property.",
            "paramName": "data",
            "description": " a map of property values. The key is the name of the property.",
            "type": [
              "Map",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "value {var?} the value, only used when <code>data</code> is a string.",
            "paramName": "value",
            "description": " the value, only used when <code>data</code> is a string.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>.",
            "type": "qx.core.Object",
            "description": " Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      }
    },
    "get": {
      "type": "function",
      "name": "get",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the value of the given property. If no generated getter could be\n found, a fallback tries to access a handwritten getter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the value",
            "type": "var",
            "description": " The value of the value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      }
    },
    "reset": {
      "type": "function",
      "name": "reset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value of the given property. If no generated resetter could be\n found, a handwritten resetter will be invoked, if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      }
    },
    "isPropertyInitialized": {
      "type": "function",
      "name": "isPropertyInitialized",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the property is initialized, i.e. has a defined init value or\n has got a value by a setter method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property",
            "paramName": "prop",
            "description": " Name of the property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the property is initialized",
            "type": "Boolean",
            "description": " If the property is initialized"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the property defined does not exist",
            "type": "Error",
            "description": " If the property defined does not exist"
          }
        ]
      }
    },
    "_applyQxOwner": {
      "type": "function",
      "name": "_applyQxOwner",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply owner</p>"
          }
        ]
      }
    },
    "_applyQxObjectId": {
      "type": "function",
      "name": "_applyQxObjectId",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply objectId</p>"
          }
        ]
      }
    },
    "__onOwnedObjectIdChange": {
      "type": "function",
      "name": "__onOwnedObjectIdChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when a child's objectId changes</p>"
          }
        ]
      }
    },
    "_cascadeQxObjectIdChanges": {
      "type": "function",
      "name": "_cascadeQxObjectIdChanges",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reflect changes to IDs or owners</p>"
          }
        ]
      }
    },
    "getQxObject": {
      "type": "function",
      "name": "getQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the object with the specified ID</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id\n          {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the found object",
            "type": "qx.core.Object?",
            "description": " the found object"
          }
        ]
      }
    },
    "_createQxObject": {
      "type": "function",
      "name": "_createQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the object and adds it to a list; most classes are expected to\n override <code>_createQxObjectImpl</code> NOT this method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the created object",
            "type": "qx.core.Object?",
            "description": " the created object"
          }
        ]
      }
    },
    "_createQxObjectImpl": {
      "type": "function",
      "name": "_createQxObjectImpl",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the object, intended to be overridden. Null is a valid return\n value and will be cached by <code>getQxObject</code>, however <code>undefined</code> is NOT a\n valid value and so will not be cached meaning that <code>_createQxObjectImpl</code>\n will be called multiple times until a valid value is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the created object",
            "type": "qx.core.Object?",
            "description": " the created object"
          }
        ]
      }
    },
    "addOwnedQxObject": {
      "type": "function",
      "name": "addOwnedQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an object as owned by this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} the object to register",
            "paramName": "obj",
            "description": " the object to register",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "id {String?} the id to set when registering the object",
            "paramName": "id",
            "description": " the id to set when registering the object",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "removeOwnedQxObject": {
      "type": "function",
      "name": "removeOwnedQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Discards an object from the list of owned objects; note that this does\n not dispose of the object, simply forgets it if it exists.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {String|Object} the ID of the object to discard, or the object itself",
            "paramName": "args",
            "description": " the ID of the object to discard, or the object itself",
            "type": [
              "String",
              "Object"
            ]
          }
        ]
      }
    },
    "__removeOwnedQxObjectImpl": {
      "type": "function",
      "name": "__removeOwnedQxObjectImpl",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an owned object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} the object",
            "paramName": "obj",
            "description": " the object",
            "type": "qx.core.Object"
          }
        ]
      }
    },
    "getOwnedQxObjects": {
      "type": "function",
      "name": "getOwnedQxObjects",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of objects that are owned by this object, or an empty\n array if none exists.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "Array",
            "description": ""
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "assert": {
      "type": "function",
      "name": "assert",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the condition evaluates to <code>true</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n    <code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n    <code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "fail": {
      "type": "function",
      "name": "fail",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Raise an {@link AssertionError}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "compact {Boolean?false} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      }
    },
    "assertTrue": {
      "type": "function",
      "name": "assertTrue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>true</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>true</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertFalse": {
      "type": "function",
      "name": "assertFalse",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>false</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>false</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertEquals": {
      "type": "function",
      "name": "assertEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are equal. (Uses the equality operator\n <code>==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotEquals": {
      "type": "function",
      "name": "assertNotEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not equal. (Uses the not equality operator\n <code>!=</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertEqualsFloat": {
      "type": "function",
      "name": "assertEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are equal. This might be needed because\n of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotEqualsFloat": {
      "type": "function",
      "name": "assertNotEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are not equal. This might be needed\n because of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertIdentical": {
      "type": "function",
      "name": "assertIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are identical. (Uses the identity operator\n <code>===</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotIdentical": {
      "type": "function",
      "name": "assertNotIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not identical. (Uses the not identity operator\n <code>!==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotUndefined": {
      "type": "function",
      "name": "assertNotUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertUndefined": {
      "type": "function",
      "name": "assertUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotNull": {
      "type": "function",
      "name": "assertNotNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNull": {
      "type": "function",
      "name": "assertNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertJsonEquals": {
      "type": "function",
      "name": "assertJsonEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the first two arguments are equal, when serialized into\n JSON.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The expected value",
            "paramName": "expected",
            "description": " The expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertMatch": {
      "type": "function",
      "name": "assertMatch",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the given string matches the regular expression</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "re {RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertArgumentsCount": {
      "type": "function",
      "name": "assertArgumentsCount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the number of arguments is within the given range</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertEventFired": {
      "type": "function",
      "name": "assertEventFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   fires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   fires the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "listener {Function?null} The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "paramName": "listener",
            "description": " The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      }
    },
    "assertEventNotFired": {
      "type": "function",
      "name": "assertEventNotFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is not fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   should not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   should not fire the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertException": {
      "type": "function",
      "name": "assertException",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Asserts that the callback raises a matching exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\n   not match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\n   not match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInArray": {
      "type": "function",
      "name": "assertInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an item in the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNotInArray": {
      "type": "function",
      "name": "assertNotInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is NOT an item in the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertArrayEquals": {
      "type": "function",
      "name": "assertArrayEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both array have identical array items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertKeyInMap": {
      "type": "function",
      "name": "assertKeyInMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a key in the given map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertFunction": {
      "type": "function",
      "name": "assertFunction",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertString": {
      "type": "function",
      "name": "assertString",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertBoolean": {
      "type": "function",
      "name": "assertBoolean",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a boolean.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertNumber": {
      "type": "function",
      "name": "assertNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveNumber": {
      "type": "function",
      "name": "assertPositiveNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInteger": {
      "type": "function",
      "name": "assertInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveInteger": {
      "type": "function",
      "name": "assertPositiveInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInRange": {
      "type": "function",
      "name": "assertInRange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is inside the given range.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertObject": {
      "type": "function",
      "name": "assertObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertArray": {
      "type": "function",
      "name": "assertArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertMap": {
      "type": "function",
      "name": "assertMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a map either created using <code>new Object</code>\n or by using the object literal notation <code>{ ... }</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertRegExp": {
      "type": "function",
      "name": "assertRegExp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a regular expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertType": {
      "type": "function",
      "name": "assertType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value has the given type using the <code>typeof</code>\n operator. Because the type is not always what it is supposed to be it is\n better to use more explicit checks like {@link #assertString} or\n {@link #assertArray}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInstance": {
      "type": "function",
      "name": "assertInstance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of the given class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertInterface": {
      "type": "function",
      "name": "assertInterface",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value implements the given interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertCssColor": {
      "type": "function",
      "name": "assertCssColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value represents the given CSS color value. This method\n parses the color strings and compares the RGB values. It is able to\n parse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertElement": {
      "type": "function",
      "name": "assertElement",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertQxObject": {
      "type": "function",
      "name": "assertQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.core.Object}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "assertQxWidget": {
      "type": "function",
      "name": "assertQxWidget",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      }
    },
    "getLocale": {
      "type": "function",
      "name": "getLocale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>locale</code>.\n\nFor further details take a look at the property definition: {@link #locale}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for locale"
          }
        ]
      }
    },
    "setLocale": {
      "type": "function",
      "name": "setLocale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>locale</code>.\n\nFor further details take a look at the property definition: {@link #locale}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for locale"
          }
        ]
      }
    },
    "resetLocale": {
      "type": "function",
      "name": "resetLocale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>locale</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #locale}."
          }
        ]
      }
    }
  },
  "descendants": []
}