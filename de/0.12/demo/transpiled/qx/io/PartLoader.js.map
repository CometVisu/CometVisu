{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/io/PartLoader.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "loader",
    "_loader",
    "Part",
    "getInstance",
    "self",
    "onpart",
    "part",
    "getReadyState",
    "fireDataEvent",
    "getName",
    "events",
    "statics",
    "require",
    "partNames",
    "callback",
    "members",
    "getPart",
    "name",
    "getParts",
    "hasPart",
    "undefined",
    "io",
    "PartLoader"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;AAKAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EACA;AACEC,IAAAA,IAAI,EAAG,WADT;AAEEC,IAAAA,MAAM,EAAGP,EAAE,CAACQ,IAAH,CAAQC,MAFnB;AAKEC,IAAAA,SAAS,EAAG,qBACZ;AACE;AAGA,UAAIC,MAAM,GAAG,KAAKC,OAAL,GAAeZ,EAAE,CAACa,IAAH,CAAQC,WAAR,EAA5B;AAEA,UAAIC,IAAI,GAAG,IAAX;;AACAJ,MAAAA,MAAM,CAACK,MAAP,GAAgB,UAASC,IAAT,EAAe;AAC7B,YAAIA,IAAI,CAACC,aAAL,MAAwB,UAA5B,EAAwC;AACtCH,UAAAA,IAAI,CAACI,aAAL,CAAmB,YAAnB,EAAiCF,IAAjC;AACD,SAFD,MAEO;AACLF,UAAAA,IAAI,CAACI,aAAL,CAAmB,kBAAnB,EAAuCF,IAAI,CAACG,OAAL,EAAvC;AACD;AACF,OAND;AAOD,KApBH;AAuBEC,IAAAA,MAAM,EACN;AACE;;;;AAIA,oBAAe,oBALjB;;AAOE;;;;;AAKA,0BAAqB;AAZvB,KAxBF;AAwCEC,IAAAA,OAAO,EACP;AACE;;;;;;;;;;;;AAYAC,MAAAA,OAAO,EAAG,iBAASC,SAAT,EAAoBC,QAApB,EAA8BV,IAA9B,EAAoC;AAC5C,aAAKD,WAAL,GAAmBS,OAAnB,CAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDV,IAAhD;AACD;AAfH,KAzCF;AA4DEW,IAAAA,OAAO,EACP;AACE;;;;;;;;;;;AAWAH,MAAAA,OAAO,EAAG,iBAASC,SAAT,EAAoBC,QAApB,EAA8BV,IAA9B,EAAoC;AAC5C,aAAKH,OAAL,CAAaW,OAAb,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0CV,IAA1C;AACD,OAdH;;AAiBE;;;;;;;AAOAY,MAAAA,OAAO,EAAG,iBAASC,IAAT,EAAe;AACvB,eAAO,KAAKC,QAAL,GAAgBD,IAAhB,CAAP;AACD,OA1BH;;AA6BE;;;;;;AAMAE,MAAAA,OAAO,EAAG,iBAASF,IAAT,EAAe;AACvB,eAAO,KAAKD,OAAL,CAAaC,IAAb,MAAuBG,SAA9B;AACD,OArCH;;AAwCE;;;;AAIAF,MAAAA,QAAQ,EAAG,oBAAW;AACpB,eAAO,KAAKjB,OAAL,CAAaiB,QAAb,EAAP;AACD;AA9CH;AA7DF,GADA;AAvBA7B,EAAAA,EAAE,CAACgC,EAAH,CAAMC,UAAN,CAAiB9B,aAAjB,GAAiCA,aAAjC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The part loader knows about all generated packages and parts.\n *\n * It contains functionality to load parts and to retrieve part instances.\n */\nqx.Class.define(\"qx.io.PartLoader\",\n{\n  type : \"singleton\",\n  extend : qx.core.Object,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n\n    var loader = this._loader = qx.Part.getInstance();\n\n    var self = this;\n    loader.onpart = function(part) {\n      if (part.getReadyState() == \"complete\") {\n        self.fireDataEvent(\"partLoaded\", part);\n      } else {\n        self.fireDataEvent(\"partLoadingError\", part.getName());\n      }\n    };\n  },\n\n\n  events :\n  {\n    /**\n     * Fired if a parts was loaded. The data of the event instance point to the\n     * loaded part instance.\n     */\n    \"partLoaded\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired if a part could not be loaded. The event's\n     * {@link qx.event.type.Data#getData} method returns the name of the failed\n     * part.\n     */\n    \"partLoadingError\" : \"qx.event.type.Data\"\n  },\n\n\n  statics :\n  {\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String[]} List of parts names to load as defined in the\n     *    config file at compile time.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require : function(partNames, callback, self) {\n      this.getInstance().require(partNames, callback, self);\n    }\n  },\n\n\n  members :\n  {\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String|String[]} List of parts names to load as defined\n     *    in the config file at compile time. The method also accepts a single\n     *    string as parameter to only load one part.\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require : function(partNames, callback, self) {\n      this._loader.require(partNames, callback, self);\n    },\n\n\n    /**\n     * Get the part instance of the part with the given name.\n     *\n     * @param name {String} Name of the part as defined in the config file at\n     *    compile time.\n     * @return {qx.io.part.Part} The corresponding part instance\n     */\n    getPart : function(name) {\n      return this.getParts()[name];\n    },\n\n\n    /**\n     * Checks if a part with the given name is available.\n     * @param name {String} Name of the part as defined in the config file at\n     *    compile time.\n     * @return {Boolean} <code>true</code>, if the part is available\n     */\n    hasPart : function(name) {\n      return this.getPart(name) !== undefined;\n    },\n\n\n    /**\n     * Returns a map of all known parts.\n     * @return {Map} Map containing all parts.\n     */\n    getParts : function() {\n      return this._loader.getParts();\n    }\n  }\n});\n"
  ]
}