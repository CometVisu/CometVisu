{
  "className": "qx.io.request.Jsonp",
  "packageName": "qx.io.request",
  "name": "Jsonp",
  "superClass": "qx.io.request.AbstractRequest",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 72,
        "column": 0
      },
      "end": {
        "line": 209,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2011 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Tristan Koch (tristankoch)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>Query JSONP services using the script element. Requests may be cross-origin.\n Configuration of the request is done with properties. Events are fired for\n various states in the life cycle of a request, such as \"success\". Request\n data is transparently processed.\n For an introduction to JSONP, please refer to\n <a href=\"http://ajaxian.com/archives/jsonp-json-with-padding\">Ajaxian.com</a>.\n Here is how to request a JSON file from a REST service and listen to\n the \"success\" event:\n </p>\n<pre class=\"javascript\">\n var req = new qx.io.request.Jsonp();\n req.setUrl(\"http://feeds.delicious.com/v2/json/popular\");\n\n\n req.addListener(\"success\", function(e) {\n   var req = e.getTarget();\n\n   req.getStatus();\n\n   req.getPhase();\n\n   req.getResponse();\n }, this);\n\n req.send();\n </pre>\n<p>Some noteable features:</p>\n<ul>\n<li>Abstraction of low-level request</li>\n<li>Convenient setup using properties</li>\n<li>Fine-grained events</li>\n<li>Symbolic phases</li>\n<li>Transparent processing of request data</li>\n<li>Stream-lined authentication</li>\n<li>Flexible callback handling</li>\n<li>Cross-origin requests\nIn order to debug requests, set the environment flag\n<code>qx.debug.io</code>.\nInternally uses {@link qx.bom.request.Jsonp}.</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "events": {
    "success": {
      "location": {
        "start": {
          "line": 82,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes without error and data has been received.</p>"
          }
        ]
      },
      "name": "success",
      "type": "qx.event.type.Event"
    },
    "load": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes without error.\n Every request receiving a response completes without error. This means\n that even for responses that do not call the callback, a \"load\" event\n is fired. If you are only interested in the JSON data received, consider\n listening to the {@link #success} event instead.</p>"
          }
        ]
      },
      "name": "load",
      "type": "qx.event.type.Event"
    },
    "statusError": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes without error but no data was received.\n The underlying script transport does not know the HTTP status of the\n response. However, if the callback was not called (no data received)\n an erroneous status (500) is assigned to the transport’s status\n property.\n Note: If you receive an unexpected \"statusError\", check that the JSONP\n service accepts arbitrary callback names given as the \"callback\"\n parameter. In case the service expects another parameter for the callback\n name, use {@link #setCallbackParam}. Should the service respond with a\n hard-coded callback, set a custom callback name with\n {@link #setCallbackName}.</p>"
          }
        ]
      },
      "name": "statusError",
      "type": "qx.event.type.Event"
    }
  },
  "properties": {
    "cache": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to allow request to be answered from cache.\n Allowed values:</p>\n<ul>\n<li><code>true</code>: Allow caching (Default)</li>\n<li><code>false</code>: Prohibit caching. Appends nocache parameter to URL.</li>\n</ul>"
          }
        ]
      },
      "name": "cache",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    }
  },
  "members": {
    "_createTransport": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  CONFIGURE TRANSPORT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Create JSONP transport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.request.Jsonp} Transport.",
            "type": "qx.bom.request.Jsonp",
            "description": " Transport."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "appearsIn": [
        "qx.io.request.AbstractRequest"
      ]
    },
    "_getConfiguredUrl": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get configured URL.\n Append request data to URL. Also append random string\n to URL if required by value of {@link #cache}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The configured URL.",
            "type": "String",
            "description": " The configured URL."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "appearsIn": [
        "qx.io.request.AbstractRequest"
      ]
    },
    "_getParsedResponse": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 179,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the transport’s responseJson property.\n See {@link qx.bom.request.Jsonp}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The parsed response of the request.",
            "type": "Object",
            "description": " The parsed response of the request."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "appearsIn": [
        "qx.io.request.AbstractRequest"
      ]
    },
    "setCallbackParam": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  CALLBACK MANAGEMENT\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Set callback parameter.\n See {@link qx.bom.request.Jsonp#setCallbackParam}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "param {String} Name of the callback parameter.",
            "paramName": "param",
            "description": " Name of the callback parameter.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setCallbackName": {
      "location": {
        "start": {
          "line": 205,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set callback name.\n See {@link qx.bom.request.Jsonp#setCallbackName}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the callback function.",
            "paramName": "name",
            "description": " Name of the callback function.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "reset"
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "reset"
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "reset"
    },
    "getRequestData": {
      "type": "function",
      "name": "getRequestData",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requestData</code>.\n\nFor further details take a look at the property definition: {@link #requestData}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for requestData"
          }
        ]
      }
    },
    "setRequestData": {
      "type": "function",
      "name": "setRequestData",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requestData</code>.\n\nFor further details take a look at the property definition: {@link #requestData}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for requestData"
          }
        ]
      }
    },
    "resetRequestData": {
      "type": "function",
      "name": "resetRequestData",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "reset"
    },
    "getAuthentication": {
      "type": "function",
      "name": "getAuthentication",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>authentication</code>.\n\nFor further details take a look at the property definition: {@link #authentication}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.io.request.authentication.IAuthentication",
            "desc": "Returns the value for authentication"
          }
        ]
      }
    },
    "setAuthentication": {
      "type": "function",
      "name": "setAuthentication",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>authentication</code>.\n\nFor further details take a look at the property definition: {@link #authentication}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.io.request.authentication.IAuthentication",
            "paramName": "value",
            "desc": "Value for authentication"
          }
        ]
      }
    },
    "resetAuthentication": {
      "type": "function",
      "name": "resetAuthentication",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.io.request.AbstractRequest",
      "property": "reset"
    },
    "getCache": {
      "type": "function",
      "name": "getCache",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cache</code>.\n\nFor further details take a look at the property definition: {@link #cache}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for cache"
          }
        ]
      }
    },
    "isCache": {
      "type": "function",
      "name": "isCache",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cache</code>.\n\nFor further details take a look at the property definition: {@link #cache}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for cache"
          }
        ]
      }
    },
    "setCache": {
      "type": "function",
      "name": "setCache",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cache</code>.\n\nFor further details take a look at the property definition: {@link #cache}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for cache"
          }
        ]
      }
    },
    "resetCache": {
      "type": "function",
      "name": "resetCache",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>cache</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #cache}."
          }
        ]
      }
    }
  },
  "descendants": []
}