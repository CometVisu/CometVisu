{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/io/request/Xhr.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "request",
    "AbstractRequest",
    "construct",
    "url",
    "method",
    "undefined",
    "setMethod",
    "_parser",
    "_createResponseParser",
    "events",
    "properties",
    "init",
    "async",
    "check",
    "accept",
    "nullable",
    "cache",
    "value",
    "lang",
    "Type",
    "isBoolean",
    "isString",
    "members",
    "_createTransport",
    "bom",
    "Xhr",
    "_getConfiguredUrl",
    "getUrl",
    "serializedData",
    "getMethod",
    "getRequestData",
    "_serializeData",
    "util",
    "Uri",
    "appendParamsToUrl",
    "getCache",
    "nocache",
    "Date",
    "valueOf",
    "_getConfiguredRequestHeaders",
    "headers",
    "isAllowsBody",
    "Request",
    "methodAllowsRequestBody",
    "isFormData",
    "getClass",
    "isCrossDomain",
    "getAccept",
    "core",
    "Environment",
    "get",
    "debug",
    "_getMethod",
    "_isAsync",
    "isAsync",
    "ResponseParser",
    "_getParsedResponse",
    "response",
    "_transport",
    "responseType",
    "responseText",
    "contentType",
    "getResponseContentType",
    "parsedResponse",
    "parse",
    "_parserFailed",
    "e",
    "fireDataEvent",
    "error",
    "setParser",
    "parser"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Send HTTP requests and handle responses using the HTTP client API.\n *\n * Configuration of the request is done with properties. Events are fired for\n * various states in the life cycle of a request, such as \"success\". Request\n * data is transparently processed.\n *\n * Here is how to request a JSON file and listen to the \"success\" event:\n *\n * <pre class=\"javascript\">\n * var req = new qx.io.request.Xhr(\"/some/path/file.json\");\n *\n * req.addListener(\"success\", function(e) {\n *   var req = e.getTarget();\n *\n *   // Response parsed according to the server's\n *   // response content type, e.g. JSON\n *   req.getResponse();\n * }, this);\n *\n * // Send request\n * req.send();\n * </pre>\n *\n * Some noteable features:\n *\n * * Abstraction of low-level request\n * * Convenient setup using properties\n * * Fine-grained events\n * * Symbolic phases\n * * Transparent processing of request data\n * * Stream-lined authentication\n * * Automagic parsing of response based on content type\n *\n * Cross-origin requests are supported, but require browser support\n * (see <a href=\"http://caniuse.com/#search=CORS\">caniuse.com</a>) and backend configuration\n * (see <a href=\"https://developer.mozilla.org/en-US/docs/docs/HTTP/Access_control_CORS>MDN</a>).\n * Note that IE's <code>XDomainRequest</code> is not currently supported.\n * For a cross-browser alternative, consider {@link qx.io.request.Jsonp}.\n *\n * In order to debug requests, set the environment flag\n * <code>qx.debug.io</code>.\n *\n * Internally uses {@link qx.bom.request.Xhr}.\n */\nqx.Class.define(\"qx.io.request.Xhr\",\n{\n  extend: qx.io.request.AbstractRequest,\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   * @param method {String?} The HTTP method.\n   */\n  construct: function(url, method) {\n    if (method !== undefined) {\n      this.setMethod(method);\n    }\n\n    this.base(arguments, url);\n    this._parser = this._createResponseParser();\n  },\n\n  // Only document events with transport specific details.\n  // For a complete list of events, refer to AbstractRequest.\n\n  events:\n  {\n    /**\n     * Fired on every change of the transportâ€™s readyState.\n     *\n     * See {@link qx.bom.request.Xhr} for available readyStates.\n     */\n    \"readyStateChange\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport status\n     * indicates success.\n     *\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\n     * status considered successful.\n     */\n    \"success\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     *\n     * Every request not canceled or aborted completes. This means that\n     * even requests receiving a response with erroneous HTTP status\n     * fire a \"load\" event. If you are only interested in successful\n     * responses, listen to the {@link #success} event instead.\n     */\n    \"load\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     *\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\n     * status considered successful.\n     */\n    \"statusError\": \"qx.event.type.Event\"\n  },\n\n  properties:\n  {\n    /**\n     * The HTTP method.\n     */\n    method: {\n      init: \"GET\"\n    },\n\n    /**\n     * Whether the request should be executed asynchronously.\n     */\n    async: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * The content type to accept. By default, every content type\n     * is accepted.\n     *\n     * Note: Some backends send distinct representations of the same\n     * resource depending on the content type accepted. For instance,\n     * a backend may respond with either a JSON (the accept header\n     * indicates so) or a HTML representation (the default, no accept\n     * header given).\n     */\n    accept: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * Whether to allow request to be answered from cache.\n     *\n     * Allowed values:\n     *\n     * * <code>true</code>: Allow caching (Default)\n     * * <code>false</code>: Prohibit caching. Appends nocache parameter to URL.\n     * * <code>String</code>: Any Cache-Control request directive\n     *\n     * If a string is given, it is inserted in the request's Cache-Control\n     * header. A requestâ€™s Cache-Control header may contain a number of directives\n     * controlling the behavior of any caches in between client and origin\n     * server.\n     *\n     * * <code>\"no-cache\"</code>: Force caches to submit request in order to\n     *   validate the freshness of the representation. Note that the requested\n     *   resource may still be served from cache if the representation is\n     *   considered fresh. Use this directive to ensure freshness but save\n     *   bandwidth when possible.\n     * * <code>\"no-store\"</code>: Do not keep a copy of the representation under\n     *   any conditions.\n     *\n     * See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\n     * Caching tutorial</a> for an excellent introduction to Caching in general.\n     * Refer to the corresponding section in the\n     * <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\n     * HTTP 1.1 specification</a> for more details and advanced directives.\n     *\n     * It is recommended to choose an appropriate Cache-Control directive rather\n     * than prohibit caching using the nocache parameter.\n     */\n    cache: {\n      check: function(value) {\n        return qx.lang.Type.isBoolean(value) ||\n          qx.lang.Type.isString(value);\n      },\n      init: true\n    }\n  },\n\n  members:\n  {\n\n    /**\n     * @type {Function} Parser.\n     */\n    _parser: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create XHR transport.\n     *\n     * @return {qx.bom.request.Xhr} Transport.\n     */\n    _createTransport: function() {\n      return new qx.bom.request.Xhr();\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * Append request data to URL if HTTP method is GET. Append random\n     * string to URL if required by value of {@link #cache}.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl: function() {\n      var url = this.getUrl(),\n          serializedData;\n\n      if (this.getMethod() === \"GET\" && this.getRequestData()) {\n        serializedData = this._serializeData(this.getRequestData());\n        url = qx.util.Uri.appendParamsToUrl(url, serializedData);\n      }\n\n      if (this.getCache() === false) {\n        // Make sure URL cannot be served from cache and new request is made\n        url = qx.util.Uri.appendParamsToUrl(url, {nocache: new Date().valueOf()});\n      }\n\n      return url;\n    },\n\n    // overridden\n    _getConfiguredRequestHeaders: function() {\n      var headers = {},\n          isAllowsBody = qx.util.Request.methodAllowsRequestBody(this.getMethod()),\n          isFormData = (qx.Bootstrap.getClass(this.getRequestData()) == \"FormData\");\n\n      // Follow convention to include X-Requested-With header when same origin\n      if (!qx.util.Request.isCrossDomain(this.getUrl())) {\n        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n      }\n\n      // Include Cache-Control header if configured\n      if (qx.lang.Type.isString(this.getCache())) {\n        headers[\"Cache-Control\"] = this.getCache();\n      }\n\n      // By default, set content-type urlencoded for requests with body\n      if (this.getRequestData() && isAllowsBody && !isFormData) {\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n      }\n\n      // What representations to accept\n      if (this.getAccept()) {\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\"Accepting: '\" + this.getAccept() + \"'\");\n        }\n        headers[\"Accept\"] = this.getAccept();\n      }\n\n      return headers;\n    },\n\n    // overridden\n    _getMethod: function() {\n      return this.getMethod();\n    },\n\n    // overridden\n    _isAsync: function() {\n      return this.isAsync();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PARSING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create response parser.\n     *\n     * @return {qx.util.ResponseParser} parser.\n     */\n    _createResponseParser: function() {\n        return new qx.util.ResponseParser();\n    },\n\n    /**\n     * Returns response parsed with parser determined by content type.\n     *\n     * @return {String|Object} The parsed response of the request.\n     */\n    _getParsedResponse: function() {\n      var response = this._transport.responseType === 'blob' ? this._transport.response : this._transport.responseText,\n          contentType = this.getResponseContentType() || \"\",\n          parsedResponse = \"\";\n\n      try {\n        parsedResponse = this._parser.parse(response, contentType);\n        this._parserFailed = false\n      } catch(e) {\n        this._parserFailed = true\n        this.fireDataEvent(\"parseError\", {\n          error: e,\n          response: response\n        });\n      }\n\n      return parsedResponse;\n    },\n\n    /**\n     * Set parser used to parse response once request has\n     * completed successfully.\n     *\n     * @see qx.util.ResponseParser#setParser\n     *\n     * @param parser {String|Function}\n     * @return {Function} The parser function\n     */\n    setParser: function(parser) {\n      return this._parser.setParser(parser);\n    }\n  }\n});\n"
  ]
}