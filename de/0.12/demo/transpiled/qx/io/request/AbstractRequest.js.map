{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/io/request/AbstractRequest.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "url",
    "undefined",
    "setUrl",
    "__requestHeaders",
    "transport",
    "_transport",
    "_createTransport",
    "_setPhase",
    "__onReadyStateChangeBound",
    "lang",
    "Function",
    "bind",
    "_onReadyStateChange",
    "__onLoadBound",
    "_onLoad",
    "__onLoadEndBound",
    "_onLoadEnd",
    "__onAbortBound",
    "_onAbort",
    "__onTimeoutBound",
    "_onTimeout",
    "__onErrorBound",
    "_onError",
    "onreadystatechange",
    "onload",
    "onloadend",
    "onabort",
    "ontimeout",
    "onerror",
    "events",
    "properties",
    "check",
    "timeout",
    "nullable",
    "init",
    "requestData",
    "value",
    "Type",
    "isString",
    "isSubClassOf",
    "constructor",
    "isObject",
    "isArray",
    "getClass",
    "authentication",
    "members",
    "__response",
    "__abort",
    "__phase",
    "__requestHeadersDeprecated",
    "_parserFailed",
    "Error",
    "_getConfiguredUrl",
    "_getConfiguredRequestHeaders",
    "_getParsedResponse",
    "_getMethod",
    "_isAsync",
    "send",
    "method",
    "async",
    "test",
    "replace",
    "getTimeout",
    "Environment",
    "get",
    "debug",
    "open",
    "getRequestData",
    "indexOf",
    "_serializeData",
    "_setRequestHeaders",
    "sendWithPromise",
    "context",
    "BaseError",
    "abort",
    "requestHeaders",
    "_getAllRequestHeaders",
    "key",
    "setRequestHeader",
    "mergeWith",
    "__getAuthRequestHeaders",
    "auth",
    "getAuthentication",
    "headers",
    "getAuthHeaders",
    "forEach",
    "header",
    "getRequestHeader",
    "removeRequestHeader",
    "getTransport",
    "getReadyState",
    "readyState",
    "getPhase",
    "getStatus",
    "status",
    "getStatusText",
    "statusText",
    "getResponseText",
    "responseText",
    "getAllResponseHeaders",
    "getResponseHeader",
    "overrideResponseContentType",
    "contentType",
    "overrideMimeType",
    "getResponseContentType",
    "isDone",
    "getResponse",
    "_setResponse",
    "response",
    "oldResponse",
    "fireEvent",
    "event",
    "Data",
    "__onReadyStateDone",
    "util",
    "Request",
    "isSuccessful",
    "_fireStatefulEvent",
    "e",
    "evt",
    "phase",
    "previousPhase",
    "fireDataEvent",
    "data",
    "isPost",
    "getMethod",
    "isJson",
    "Serializer",
    "toUriParameter",
    "Json",
    "stringify",
    "Uri",
    "toParameter",
    "environment",
    "destruct",
    "noop",
    "window",
    "setTimeout",
    "dispose",
    "io",
    "request",
    "AbstractRequest"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;AAgBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,+BAAhB,EACA;AACEC,IAAAA,IAAI,EAAG,UADT;AAGEC,IAAAA,MAAM,EAAGP,EAAE,CAACQ,IAAH,CAAQC,MAHnB;AAIEC,IAAAA,SAAS,EAAE,CAAEV,EAAE,CAACQ,IAAH,CAAQG,WAAV,CAJb;;AAME;;;AAGAC,IAAAA,SAAS,EAAG,mBAASC,GAAT,EACZ;AACE;;AAEA,UAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACrB,aAAKC,MAAL,CAAYF,GAAZ;AACD;;AAED,WAAKG,gBAAL,GAAwB,EAAxB;;AAEA,UAAIC,SAAS,GAAG,KAAKC,UAAL,GAAkB,KAAKC,gBAAL,EAAlC;;AACA,WAAKC,SAAL,CAAe,QAAf;;AAEA,WAAKC,yBAAL,GAAiCrB,EAAE,CAACsB,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsB,KAAKC,mBAA3B,EAAgD,IAAhD,CAAjC;AACA,WAAKC,aAAL,GAAqB1B,EAAE,CAACsB,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsB,KAAKG,OAA3B,EAAoC,IAApC,CAArB;AACA,WAAKC,gBAAL,GAAwB5B,EAAE,CAACsB,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsB,KAAKK,UAA3B,EAAuC,IAAvC,CAAxB;AACA,WAAKC,cAAL,GAAsB9B,EAAE,CAACsB,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsB,KAAKO,QAA3B,EAAqC,IAArC,CAAtB;AACA,WAAKC,gBAAL,GAAwBhC,EAAE,CAACsB,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsB,KAAKS,UAA3B,EAAuC,IAAvC,CAAxB;AACA,WAAKC,cAAL,GAAsBlC,EAAE,CAACsB,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsB,KAAKW,QAA3B,EAAqC,IAArC,CAAtB;AAEAlB,MAAAA,SAAS,CAACmB,kBAAV,GAA+B,KAAKf,yBAApC;AACAJ,MAAAA,SAAS,CAACoB,MAAV,GAAmB,KAAKX,aAAxB;AACAT,MAAAA,SAAS,CAACqB,SAAV,GAAsB,KAAKV,gBAA3B;AACAX,MAAAA,SAAS,CAACsB,OAAV,GAAoB,KAAKT,cAAzB;AACAb,MAAAA,SAAS,CAACuB,SAAV,GAAsB,KAAKR,gBAA3B;AACAf,MAAAA,SAAS,CAACwB,OAAV,GAAoB,KAAKP,cAAzB;AACD,KAnCH;AAqCEQ,IAAAA,MAAM,EACN;AACE;;;AAGA,0BAAoB,qBAJtB;;AAME;;;;AAIA,iBAAW,qBAVb;;AAYE;;;AAGA,cAAQ,qBAfV;;AAiBE;;;AAGA,iBAAW,qBApBb;;AAsBE;;;AAGA,eAAS,qBAzBX;;AA2BE;;;AAGA,iBAAW,qBA9Bb;;AAgCE;;;AAGA,eAAS,qBAnCX;;AAqCE;;;AAGA,qBAAe,qBAxCjB;;AA0CE;;;AAGA,oBAAc,oBA7ChB;;AA+CE;;;;;;AAMA,cAAQ,qBArDV;;AAuDE;;;;;;;;;;;;;;;;;;;;AAoBA,wBAAkB,oBA3EpB;;AA6EE;;;AAGA,qBAAe;AAhFjB,KAtCF;AAyHEC,IAAAA,UAAU,EACV;AACE;;;;;;;AAOA9B,MAAAA,GAAG,EAAE;AACH+B,QAAAA,KAAK,EAAE;AADJ,OARP;;AAaE;;;AAGAC,MAAAA,OAAO,EAAE;AACPD,QAAAA,KAAK,EAAE,QADA;AAEPE,QAAAA,QAAQ,EAAE,IAFH;AAGPC,QAAAA,IAAI,EAAE;AAHC,OAhBX;;AAsBE;;;;;;;;;;;;;;;;;;;;;;;;AAwBAC,MAAAA,WAAW,EAAE;AACXJ,QAAAA,KAAK,EAAE,eAASK,KAAT,EAAgB;AACrB,iBAAOjD,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaC,QAAb,CAAsBF,KAAtB,KACAjD,EAAE,CAACI,KAAH,CAASgD,YAAT,CAAsBH,KAAK,CAACI,WAA5B,EAAyCrD,EAAE,CAACQ,IAAH,CAAQC,MAAjD,CADA,IAEAT,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaI,QAAb,CAAsBL,KAAtB,CAFA,IAGAjD,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaK,OAAb,CAAqBN,KAArB,CAHA,IAIAjD,EAAE,CAACC,SAAH,CAAauD,QAAb,CAAsBP,KAAtB,KAAgC,MAJhC,IAKAjD,EAAE,CAACC,SAAH,CAAauD,QAAb,CAAsBP,KAAtB,KAAgC,aALhC,IAMAjD,EAAE,CAACC,SAAH,CAAauD,QAAb,CAAsBP,KAAtB,KAAgC,UANvC;AAOD,SATU;AAUXH,QAAAA,QAAQ,EAAE;AAVC,OA9Cf;;AA2DE;;;;;AAKAW,MAAAA,cAAc,EAAE;AACdb,QAAAA,KAAK,EAAE,8CADO;AAEdE,QAAAA,QAAQ,EAAE;AAFI;AAhElB,KA1HF;AAgMEY,IAAAA,OAAO,EACP;AAEE;;;AAGArC,MAAAA,yBAAyB,EAAE,IAL7B;AAMEK,MAAAA,aAAa,EAAE,IANjB;AAOEE,MAAAA,gBAAgB,EAAE,IAPpB;AAQEE,MAAAA,cAAc,EAAE,IARlB;AASEE,MAAAA,gBAAgB,EAAE,IATpB;AAUEE,MAAAA,cAAc,EAAE,IAVlB;;AAYE;;;AAGAyB,MAAAA,UAAU,EAAE,IAfd;;AAiBE;;;AAGCC,MAAAA,OAAO,EAAE,IApBZ;;AAsBE;;;AAGAC,MAAAA,OAAO,EAAE,IAzBX;;AA2BE;;;AAGA7C,MAAAA,gBAAgB,EAAE,IA9BpB;;AAgCE;;;AAGA8C,MAAAA,0BAA0B,EAAE,IAnC9B;;AAqCE;;;AAGA5C,MAAAA,UAAU,EAAE,IAxCd;;AA0CE;;;AAGA6C,MAAAA,aAAa,EAAE,KA7CjB;;AA+CE;;;;;;AAMA;;;;;;;;;AASA5C,MAAAA,gBAAgB,EAAE,4BAAW;AAC3B,cAAM,IAAI6C,KAAJ,CAAU,sBAAV,CAAN;AACD,OAhEH;;AAkEE;;;;;;;;;;;;AAYAC,MAAAA,iBAAiB,EAAE,6BAAW,CAAE,CA9ElC;;AAgFE;;;;;;;;AAQAC,MAAAA,4BAA4B,EAAE,wCAAW,CAAE,CAxF7C;;AA0FE;;;;;;;;;;AAUAC,MAAAA,kBAAkB,EAAE,8BAAW;AAC7B,cAAM,IAAIH,KAAJ,CAAU,sBAAV,CAAN;AACD,OAtGH;;AAwGE;;;;;;;;AAQAI,MAAAA,UAAU,EAAE,sBAAW;AACrB,eAAO,KAAP;AACD,OAlHH;;AAoHE;;;;;;;;AAQAC,MAAAA,QAAQ,EAAE,oBAAW;AACnB,eAAO,IAAP;AACD,OA9HH;;AAgIE;;;;;;AAMA;;;AAGAC,MAAAA,IAAI,EAAE,gBAAW;AACf,YAAIrD,SAAS,GAAG,KAAKC,UAArB;AAAA,YACIL,GADJ;AAAA,YACS0D,MADT;AAAA,YACiBC,KADjB;AAAA,YACwBxB,WADxB,CADe,CAIf;AACA;AACA;;AAEAnC,QAAAA,GAAG,GAAG,KAAKoD,iBAAL,EAAN,CARe,CAUf;AACA;;AACA,YAAI,KAAKQ,IAAL,CAAU5D,GAAV,CAAJ,EAAoB;AAClBA,UAAAA,GAAG,GAAGA,GAAG,CAAC6D,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAN;AACD;;AAEDzD,QAAAA,SAAS,CAAC4B,OAAV,GAAoB,KAAK8B,UAAL,EAApB,CAhBe,CAkBf;;AACAJ,QAAAA,MAAM,GAAG,KAAKH,UAAL,EAAT;AACAI,QAAAA,KAAK,GAAG,KAAKH,QAAL,EAAR,CApBe,CAsBf;;AACA,YAAIrE,EAAE,CAACQ,IAAH,CAAQoE,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;AAC1C,eAAKC,KAAL,CAAW,yCACTP,MADS,GACA,SADA,GACY1D,GADZ,GACkB,WADlB,GACgC2D,KAD3C;AAED;;AAEDvD,QAAAA,SAAS,CAAC8D,IAAV,CAAeR,MAAf,EAAuB1D,GAAvB,EAA4B2D,KAA5B;;AACA,aAAKpD,SAAL,CAAe,QAAf,EA7Be,CA+Bf;AACA;AACA;;;AAEA4B,QAAAA,WAAW,GAAG,KAAKgC,cAAL,EAAd;;AACA,YAAI,CAAC,aAAD,EAAgB,MAAhB,EAAwB,UAAxB,EAAoCC,OAApC,CAA4CjF,EAAE,CAACC,SAAH,CAAauD,QAAb,CAAsBR,WAAtB,CAA5C,KAAmF,CAAC,CAAxF,EAA2F;AACzFA,UAAAA,WAAW,GAAG,KAAKkC,cAAL,CAAoBlC,WAApB,CAAd;AACD;;AAED,aAAKmC,kBAAL,GAxCe,CA0Cf;;;AACA,YAAInF,EAAE,CAACQ,IAAH,CAAQoE,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;AAC1C,eAAKC,KAAL,CAAW,wBAAX;AACD;;AAEDP,QAAAA,MAAM,IAAI,KAAV,GAAkBtD,SAAS,CAACqD,IAAV,EAAlB,GAAqCrD,SAAS,CAACqD,IAAV,CAAetB,WAAf,CAArC;;AACA,aAAK5B,SAAL,CAAe,MAAf;AACD,OA1LH;;AA4LE;;;;;;;;;;;;;;;AAeAgE,MAAAA,eAAe,EAAE,yBAASC,OAAT,EAAkB;AAmE1B;AACL;AACA,gBAAM,IAAIrF,EAAE,CAACM,IAAH,CAAQgF,SAAZ,CAAsB,OAAtB,EAA+B,iDAA/B,CAAN;AACD;AACF,OAlRH;;AAoRE;;;AAGAC,MAAAA,KAAK,EAAE,iBAAW;AACf,YAAIvF,EAAE,CAACQ,IAAH,CAAQoE,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;AAC1C,eAAKC,KAAL,CAAW,eAAX;AACD;;AACD,aAAKlB,OAAL,GAAe,IAAf,CAJe,CAMf;;AACA,aAAKC,OAAL,GAAe,OAAf;;AAEA,aAAK3C,UAAL,CAAgBqE,KAAhB;AACF,OAjSH;;AAmSE;;;;;;AAMA;;;;;;AAMAJ,MAAAA,kBAAkB,EAAE,8BAAW;AAC7B,YAAIlE,SAAS,GAAG,KAAKC,UAArB;AAAA,YACIsE,cAAc,GAAG,KAAKC,qBAAL,EADrB;;AAGA,aAAK,IAAIC,GAAT,IAAgBF,cAAhB,EAAgC;AAC9BvE,UAAAA,SAAS,CAAC0E,gBAAV,CAA2BD,GAA3B,EAAgCF,cAAc,CAACE,GAAD,CAA9C;AACD;AAEF,OAvTH;;AAyTE;;;;;AAKAD,MAAAA,qBAAqB,EAAE,iCAAW;AAChC,YAAID,cAAc,GAAG,EAArB,CADgC,CAEhC;;AACAxF,QAAAA,EAAE,CAACsB,IAAH,CAAQb,MAAR,CAAemF,SAAf,CAAyBJ,cAAzB,EAAyC,KAAKtB,4BAAL,EAAzC,EAHgC,CAIhC;;AACAlE,QAAAA,EAAE,CAACsB,IAAH,CAAQb,MAAR,CAAemF,SAAf,CAAyBJ,cAAzB,EAAyC,KAAKK,uBAAL,EAAzC,EALgC,CAMhC;;AACA7F,QAAAA,EAAE,CAACsB,IAAH,CAAQb,MAAR,CAAemF,SAAf,CAAyBJ,cAAzB,EAAyC,KAAK1B,0BAA9C,EAPgC,CAQhC;;AACA9D,QAAAA,EAAE,CAACsB,IAAH,CAAQb,MAAR,CAAemF,SAAf,CAAyBJ,cAAzB,EAAyC,KAAKxE,gBAA9C;AAEA,eAAOwE,cAAP;AACD,OA1UH;;AA4UE;;;;;AAKAK,MAAAA,uBAAuB,EAAE,mCAAW;AAClC,YAAIC,IAAI,GAAG,KAAKC,iBAAL,EAAX;AAAA,YACIC,OAAO,GAAG,EADd;;AAGA,YAAIF,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAACG,cAAL,GAAsBC,OAAtB,CAA8B,UAASC,MAAT,EAAiB;AAC7CH,YAAAA,OAAO,CAACG,MAAM,CAACT,GAAR,CAAP,GAAsBS,MAAM,CAAClD,KAA7B;AACD,WAFD;AAGA,iBAAO+C,OAAP;AACD;AACF,OA3VH;;AA6VE;;;;;;;;AAQAL,MAAAA,gBAAgB,EAAE,0BAASD,GAAT,EAAczC,KAAd,EAAqB;AACrC,aAAKjC,gBAAL,CAAsB0E,GAAtB,IAA6BzC,KAA7B;AACD,OAvWH;;AAyWE;;;;;;AAMAmD,MAAAA,gBAAgB,EAAE,0BAASV,GAAT,EAAc;AAC7B,eAAO,KAAK1E,gBAAL,CAAsB0E,GAAtB,CAAP;AACF,OAjXH;;AAmXE;;;;;;;AAOAW,MAAAA,mBAAmB,EAAE,6BAASX,GAAT,EAAc;AACjC,YAAI,KAAK1E,gBAAL,CAAsB0E,GAAtB,CAAJ,EAAgC;AAC/B,iBAAO,KAAK1E,gBAAL,CAAsB0E,GAAtB,CAAP;AACA;AACF,OA9XH;;AAiYE;;;;;;AAMA;;;;;;;;;;;;;AAcC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACDY,MAAAA,YAAY,EAAE,wBAAW;AACvB,eAAO,KAAKpF,UAAZ;AACD,OA/ZH;;AAiaE;;;;;;;;;;;;AAYAqF,MAAAA,aAAa,EAAE,yBAAW;AACxB,eAAO,KAAKrF,UAAL,CAAgBsF,UAAvB;AACD,OA/aH;;AAibE;;;;;;;;;;;;;;;;;;;AAmBAC,MAAAA,QAAQ,EAAE,oBAAW;AACnB,eAAO,KAAK5C,OAAZ;AACD,OAtcH;;AAwcE;;;;;AAKA6C,MAAAA,SAAS,EAAE,qBAAW;AACpB,eAAO,KAAKxF,UAAL,CAAgByF,MAAvB;AACD,OA/cH;;AAidE;;;;;AAKAC,MAAAA,aAAa,EAAE,yBAAW;AACxB,eAAO,KAAK1F,UAAL,CAAgB2F,UAAvB;AACD,OAxdH;;AA0dE;;;;;AAKAC,MAAAA,eAAe,EAAE,2BAAW;AAC1B,eAAO,KAAK5F,UAAL,CAAgB6F,YAAvB;AACD,OAjeH;;AAmeE;;;;;AAKAC,MAAAA,qBAAqB,EAAE,iCAAW;AAChC,eAAO,KAAK9F,UAAL,CAAgB8F,qBAAhB,EAAP;AACD,OA1eH;;AA4eE;;;;;;;;AAQAC,MAAAA,iBAAiB,EAAE,2BAASvB,GAAT,EAAc;AAC/B,eAAO,KAAKxE,UAAL,CAAgB+F,iBAAhB,CAAkCvB,GAAlC,CAAP;AACD,OAtfH;;AAwfE;;;;;;;AAOAwB,MAAAA,2BAA2B,EAAE,qCAASC,WAAT,EAAsB;AACjD,eAAO,KAAKjG,UAAL,CAAgBkG,gBAAhB,CAAiCD,WAAjC,CAAP;AACD,OAjgBH;;AAmgBE;;;;;;AAMAE,MAAAA,sBAAsB,EAAE,kCAAW;AACjC,eAAO,KAAKJ,iBAAL,CAAuB,cAAvB,CAAP;AACD,OA3gBH;;AA6gBE;;;AAGAK,MAAAA,MAAM,EAAE,kBAAW;AACjB,eAAO,KAAKf,aAAL,OAAyB,CAAhC;AACD,OAlhBH;;AAohBE;;;;;;AAMA;;;;;AAKAgB,MAAAA,WAAW,EAAE,uBAAW;AACtB,eAAO,KAAK5D,UAAZ;AACD,OAjiBH;;AAmiBE;;;;;AAKA6D,MAAAA,YAAY,EAAE,sBAASC,QAAT,EAAmB;AAC/B,YAAIC,WAAW,GAAGD,QAAlB;;AAEA,YAAI,KAAK9D,UAAL,KAAoB8D,QAAxB,EAAkC;AAChC,eAAK9D,UAAL,GAAkB8D,QAAlB;AACA,eAAKE,SAAL,CAAe,gBAAf,EAAiC3H,EAAE,CAAC4H,KAAH,CAAStH,IAAT,CAAcuH,IAA/C,EAAqD,CAAC,KAAKlE,UAAN,EAAkB+D,WAAlB,CAArD;AACD;AACF,OA/iBH;;AAijBE;;;;;;AAMA;;;AAGAjG,MAAAA,mBAAmB,EAAE,+BAAW;AAC9B,YAAI+E,UAAU,GAAG,KAAKD,aAAL,EAAjB;;AAEA,YAAIvG,EAAE,CAACQ,IAAH,CAAQoE,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;AAC1C,eAAKC,KAAL,CAAW,sBAAsB0B,UAAjC;AACD;;AAED,aAAKmB,SAAL,CAAe,kBAAf,EAP8B,CAS9B;AACA;AACA;AACA;;AACA,YAAI,KAAK/D,OAAT,EAAkB;AAChB;AACD;;AAED,YAAI4C,UAAU,KAAK,CAAnB,EAAsB;AACpB,eAAKpF,SAAL,CAAe,SAAf;AACD;;AAED,YAAI,KAAKkG,MAAL,EAAJ,EAAmB;AACjB,eAAKQ,kBAAL;AACD;AACF,OAllBH;;AAolBE;;;AAGAA,MAAAA,kBAAkB,EAAE,8BAAW;AAC7B,YAAI9H,EAAE,CAACQ,IAAH,CAAQoE,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;AAC1C,eAAKC,KAAL,CAAW,yCAAyC,KAAK4B,SAAL,EAApD;AACD,SAH4B,CAK7B;;;AACA,aAAKtF,SAAL,CAAe,MAAf,EAN6B,CAQ7B;;;AACA,YAAIpB,EAAE,CAAC+H,IAAH,CAAQC,OAAR,CAAgBC,YAAhB,CAA6B,KAAKvB,SAAL,EAA7B,CAAJ,EAAoD;AAElD;AACA,cAAI1G,EAAE,CAACQ,IAAH,CAAQoE,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;AAC1C,iBAAKC,KAAL,CAAW,2BAA2B,KAAKuC,sBAAL,EAA3B,GAA2D,GAAtE;AACD;;AAED,eAAKG,YAAL,CAAkB,KAAKrD,kBAAL,EAAlB;;AAEA,cAAI,KAAKJ,aAAT,EAAwB;AACtB,iBAAK4D,SAAL,CAAe,MAAf;AACD,WAFD,MAEO;AACL,iBAAKO,kBAAL,CAAwB,SAAxB;AACD,WAbiD,CAepD;;AACC,SAhBD,MAgBO;AAEL,cAAI;AACF,iBAAKV,YAAL,CAAkB,KAAKrD,kBAAL,EAAlB;AACD,WAFD,CAEE,OAAOgE,CAAP,EAAU,CAEX,CAFC,CACA;AAGF;;;AACA,cAAI,KAAKzB,SAAL,OAAqB,CAAzB,EAA4B;AAC1B,iBAAKwB,kBAAL,CAAwB,aAAxB;;AACA,iBAAKP,SAAL,CAAe,MAAf;AACD;AACF;AACF,OA9nBH;;AAgoBE;;;AAGAhG,MAAAA,OAAO,EAAE,mBAAW;AAClB,aAAKgG,SAAL,CAAe,MAAf;AACD,OAroBH;;AAuoBE;;;AAGA9F,MAAAA,UAAU,EAAE,sBAAW;AACrB,aAAK8F,SAAL,CAAe,SAAf;AACD,OA5oBH;;AA8oBE;;;AAGA5F,MAAAA,QAAQ,EAAE,oBAAW;AACnB,aAAKmG,kBAAL,CAAwB,OAAxB;AACD,OAnpBH;;AAqpBE;;;AAGAjG,MAAAA,UAAU,EAAE,sBAAW;AACrB,aAAKiG,kBAAL,CAAwB,SAAxB,EADqB,CAGrB;;;AACA,aAAKP,SAAL,CAAe,MAAf;AACD,OA7pBH;;AA+pBE;;;AAGAxF,MAAAA,QAAQ,EAAE,oBAAW;AACnB,aAAKwF,SAAL,CAAe,OAAf,EADmB,CAGnB;;AACA,aAAKA,SAAL,CAAe,MAAf;AACD,OAvqBH;;AAyqBE;;;;;;AAMA;;;;;;;AAOAO,MAAAA,kBAAkB,EAAE,4BAASE,GAAT,EAAc;AAIhC,aAAKhH,SAAL,CAAegH,GAAf;;AACA,aAAKT,SAAL,CAAeS,GAAf;AACD,OA5rBH;;AA8rBE;;;;;AAKAhH,MAAAA,SAAS,EAAE,mBAASiH,KAAT,EAAgB;AACzB,YAAIC,aAAa,GAAG,KAAKzE,OAAzB;AAQA,aAAKA,OAAL,GAAewE,KAAf;AACA,aAAKE,aAAL,CAAmB,aAAnB,EAAkCF,KAAlC,EAAyCC,aAAzC;AACD,OA9sBH;;AAgtBE;;;;;;AAMApD,MAAAA,cAAc,EAAE,wBAASsD,IAAT,EAAe;AAC7B,YAAIC,MAAM,GAAG,OAAO,KAAKC,SAAZ,KAA0B,WAA1B,IAAyC,KAAKA,SAAL,MAAoB,MAA1E;AAAA,YACIC,MAAM,GAAI,wBAAD,CAA2BlE,IAA3B,CAAgC,KAAK2B,gBAAL,CAAsB,cAAtB,CAAhC,CADb;;AAGA,YAAI,CAACoC,IAAL,EAAW;AACT,iBAAO,IAAP;AACD;;AAED,YAAIxI,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaC,QAAb,CAAsBqF,IAAtB,CAAJ,EAAiC;AAC/B,iBAAOA,IAAP;AACD;;AAED,YAAIxI,EAAE,CAACI,KAAH,CAASgD,YAAT,CAAsBoF,IAAI,CAACnF,WAA3B,EAAwCrD,EAAE,CAACQ,IAAH,CAAQC,MAAhD,CAAJ,EAA6D;AAC3D,iBAAOT,EAAE,CAAC+H,IAAH,CAAQa,UAAR,CAAmBC,cAAnB,CAAkCL,IAAlC,CAAP;AACD;;AAED,YAAIG,MAAM,KAAK3I,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaI,QAAb,CAAsBkF,IAAtB,KAA+BxI,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaK,OAAb,CAAqBiF,IAArB,CAApC,CAAV,EAA2E;AACzE,iBAAOxI,EAAE,CAACsB,IAAH,CAAQwH,IAAR,CAAaC,SAAb,CAAuBP,IAAvB,CAAP;AACD;;AAED,YAAIxI,EAAE,CAACsB,IAAH,CAAQ4B,IAAR,CAAaI,QAAb,CAAsBkF,IAAtB,CAAJ,EAAiC;AAC/B,iBAAOxI,EAAE,CAAC+H,IAAH,CAAQiB,GAAR,CAAYC,WAAZ,CAAwBT,IAAxB,EAA8BC,MAA9B,CAAP;AACD;;AAED,eAAO,IAAP;AACD;AA/uBH,KAjMF;AAm7BES,IAAAA,WAAW,EACX;AACE,qBAAe;AADjB,KAp7BF;AAw7BEC,IAAAA,QAAQ,EAAE,oBACV;AACE,UAAIlI,SAAS,GAAG,KAAKC,UAArB;AAAA,UACIkI,IAAI,GAAG,SAAPA,IAAO,GAAW,CAAE,CADxB;;AAGA,UAAI,KAAKlI,UAAT,EAAqB;AACnBD,QAAAA,SAAS,CAACmB,kBAAV,GAA+BnB,SAAS,CAACoB,MAAV,GAAmBpB,SAAS,CAACqB,SAAV,GAClDrB,SAAS,CAACsB,OAAV,GAAoBtB,SAAS,CAACuB,SAAV,GAAsBvB,SAAS,CAACwB,OAAV,GAAoB2G,IAD9D,CADmB,CAInB;;AACAC,QAAAA,MAAM,CAACC,UAAP,CAAkB,YAAW;AAC3BrI,UAAAA,SAAS,CAACsI,OAAV;AACD,SAFD,EAEG,CAFH;AAGD;;AACD,WAAK5F,UAAL,GAAkB,IAAlB;AACD;AAv8BH,GADA;AAlCA3D,EAAAA,EAAE,CAACwJ,EAAH,CAAMC,OAAN,CAAcC,eAAd,CAA8BvJ,aAA9B,GAA8CA,aAA9C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n * and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n * communicate with transports found in {@link qx.bom.request}.\n *\n * The general procedure to derive a new request is to choose a\n * transport (override {@link #_createTransport}) and link\n * the transport’s response (override {@link #_getParsedResponse}).\n * The transport must implement {@link qx.bom.request.IRequest}.\n *\n * To adjust the behavior of {@link #send} override\n * {@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.request.AbstractRequest\",\n{\n  type : \"abstract\",\n\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   */\n  construct : function(url)\n  {\n    this.base(arguments);\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = {};\n\n    var transport = this._transport = this._createTransport();\n    this._setPhase(\"unsent\");\n\n    this.__onReadyStateChangeBound = qx.lang.Function.bind(this._onReadyStateChange, this);\n    this.__onLoadBound = qx.lang.Function.bind(this._onLoad, this);\n    this.__onLoadEndBound = qx.lang.Function.bind(this._onLoadEnd, this);\n    this.__onAbortBound = qx.lang.Function.bind(this._onAbort, this);\n    this.__onTimeoutBound = qx.lang.Function.bind(this._onTimeout, this);\n    this.__onErrorBound = qx.lang.Function.bind(this._onError, this);\n\n    transport.onreadystatechange = this.__onReadyStateChangeBound;\n    transport.onload = this.__onLoadBound;\n    transport.onloadend = this.__onLoadEndBound;\n    transport.onabort = this.__onAbortBound;\n    transport.ontimeout = this.__onTimeoutBound;\n    transport.onerror = this.__onErrorBound;\n  },\n\n  events :\n  {\n    /**\n     * Fired on every change of the transport’s readyState.\n     */\n    \"readyStateChange\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport’s status\n     * indicates success.\n     */\n    \"success\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     */\n    \"load\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with or without error.\n     */\n    \"loadEnd\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request is aborted.\n     */\n    \"abort\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request reaches timeout limit.\n     */\n    \"timeout\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with error.\n     */\n    \"error\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     */\n    \"statusError\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when the configured parser runs into an unrecoverable error.\n     */\n    \"parseError\": \"qx.event.type.Data\",\n\n    /**\n     * Fired on timeout, error or remote error.\n     *\n     * This event is fired for convenience. Usually, it is recommended\n     * to handle error related events in a more fine-grained approach.\n     */\n    \"fail\": \"qx.event.type.Event\",\n\n    /**\n    * Fired on change of the parsed response.\n    *\n    * This event allows to use data binding with the\n    * parsed response as source.\n    *\n    * For example, to bind the response to the value of a label:\n    *\n    * <pre class=\"javascript\">\n    * // req is an instance of qx.io.request.*,\n    * // label an instance of qx.ui.basic.Label\n    * req.bind(\"response\", label, \"value\");\n    * </pre>\n    *\n    * The response is parsed (and therefore changed) only\n    * after the request completes successfully. This means\n    * that when a new request is made the initial empty value\n    * is ignored, instead only the final value is bound.\n    *\n    */\n    \"changeResponse\": \"qx.event.type.Data\",\n\n    /**\n     * Fired on change of the phase.\n     */\n    \"changePhase\": \"qx.event.type.Data\"\n  },\n\n  properties :\n  {\n    /**\n     * The URL of the resource to request.\n     *\n     * Note: Depending on the configuration of the request\n     * and/or the transport chosen, query params may be appended\n     * automatically.\n     */\n    url: {\n      check: \"String\"\n    },\n\n\n    /**\n     * Timeout limit in milliseconds. Default (0) means no limit.\n     */\n    timeout: {\n      check: \"Number\",\n      nullable: true,\n      init: 0\n    },\n\n    /**\n     * Data to be sent as part of the request.\n     *\n     * Supported types:\n     *\n     * * String\n     * * Map\n     * * qooxdoo Object\n     * * Blob\n     * * ArrayBuffer\n     * * FormData\n     *\n     * For maps, Arrays and qooxdoo objects, a URL encoded string\n     * with unsafe characters escaped is internally generated and sent\n     * as part of the request.\n     *\n     * Depending on the underlying transport and its configuration, the request\n     * data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * If a string is given the user must make sure it is properly formatted and\n     * escaped. See {@link qx.util.Serializer#toUriParameter}.\n     *\n     */\n    requestData: {\n      check: function(value) {\n        return qx.lang.Type.isString(value) ||\n               qx.Class.isSubClassOf(value.constructor, qx.core.Object) ||\n               qx.lang.Type.isObject(value) ||\n               qx.lang.Type.isArray(value) ||\n               qx.Bootstrap.getClass(value) == \"Blob\" ||\n               qx.Bootstrap.getClass(value) == \"ArrayBuffer\" ||\n               qx.Bootstrap.getClass(value) == \"FormData\";\n      },\n      nullable: true\n    },\n\n    /**\n     * Authentication delegate.\n     *\n     * The delegate must implement {@link qx.io.request.authentication.IAuthentication}.\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  members :\n  {\n\n    /**\n     * Bound handlers.\n     */\n    __onReadyStateChangeBound: null,\n    __onLoadBound: null,\n    __onLoadEndBound: null,\n    __onAbortBound: null,\n    __onTimeoutBound: null,\n    __onErrorBound: null,\n\n    /**\n     * Parsed response.\n     */\n    __response: null,\n\n    /**\n     * Abort flag.\n     */\n     __abort: null,\n\n    /**\n     * Current phase.\n     */\n    __phase: null,\n\n    /**\n     * Request headers.\n     */\n    __requestHeaders: null,\n\n    /**\n     * Request headers (deprecated).\n     */\n    __requestHeadersDeprecated: null,\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Holds information about the parser status for the last request.\n     */\n    _parserFailed: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create and return transport.\n     *\n     * This method MUST be overridden, unless the constructor is overridden as\n     * well. It is called by the constructor and should return the transport that\n     * is to be interfaced.\n     *\n     * @return {qx.bom.request} Transport.\n     */\n    _createTransport: function() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * A configured URL typically includes a query string that\n     * encapsulates transport specific settings such as request\n     * data or no-cache settings.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl: function() {},\n\n    /**\n     * Get configuration related request headers.\n     *\n     * This method MAY be overridden to add request headers for features limited\n     * to a certain transport.\n     *\n     * @return {Map} Map of request headers.\n     */\n    _getConfiguredRequestHeaders: function() {},\n\n    /**\n     * Get parsed response.\n     *\n     * Is called in the {@link #_onReadyStateChange} event handler\n     * to parse and store the transport’s response.\n     *\n     * This method MUST be overridden.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    _getParsedResponse: function() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get method.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The method.\n     */\n    _getMethod: function() {\n      return \"GET\";\n    },\n\n    /**\n     * Whether async.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {Boolean} Whether to process asynchronously.\n     */\n    _isAsync: function() {\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERACT WITH TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Send request.\n     */\n    send: function() {\n      var transport = this._transport,\n          url, method, async, requestData;\n\n      //\n      // Open request\n      //\n\n      url = this._getConfiguredUrl();\n\n      // Drop fragment (anchor) from URL as per\n      // http://www.w3.org/TR/XMLHttpRequest/#the-open-method\n      if (/\\#/.test(url)) {\n        url = url.replace(/\\#.*/, \"\");\n      }\n\n      transport.timeout = this.getTimeout();\n\n      // Support transports with enhanced feature set\n      method = this._getMethod();\n      async = this._isAsync();\n\n      // Open\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Open low-level request with method: \" +\n          method + \", url: \" + url + \", async: \" + async);\n      }\n\n      transport.open(method, url, async);\n      this._setPhase(\"opened\");\n\n      //\n      // Send request\n      //\n\n      requestData = this.getRequestData();\n      if ([\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(qx.Bootstrap.getClass(requestData)) == -1) {\n        requestData = this._serializeData(requestData);\n      }\n\n      this._setRequestHeaders();\n\n      // Send\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Send low-level request\");\n      }\n\n      method == \"GET\" ? transport.send() : transport.send(requestData);\n      this._setPhase(\"sent\");\n    },\n\n    /**\n    * The same as send() but also return a `qx.Promise` object. The promise\n    * is resolved to this object if the request is successful.\n    *\n    * Calling `abort()` on the request object, rejects the promise. Calling\n    * `cancel()` on the promise aborts the request if the request is not in a\n    * final state.\n    * If the promise has other listener paths, then cancelation of one path will\n    * not have any effect on the request and consequently that call will not\n    * affect the other paths.\n    *\n    * @param context {Object?} optional context to bind the qx.Promise.\n    * @return {qx.Promise} The qx.Promise object\n    * @throws {qx.type.BaseError} If the environment setting `qx.promise` is set to false\n    */\n    sendWithPromise: function(context) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        context = context || this;\n\n        // save this object's context\n        var req = this;\n\n        var promise = new qx.Promise(function(resolve, reject) {\n          var listeners = [];\n\n          var changeResponseListener = req.addListener(\"success\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            resolve(req);\n          }, this);\n          listeners.push(changeResponseListener);\n\n          var statusErrorListener = req.addListener(\"statusError\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\"%1: %2.\", [req.getStatus(), req.getStatusText()]);\n            var err = new qx.type.BaseError(\"statusError\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(statusErrorListener);\n\n          var timeoutListener = req.addListener(\"timeout\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\"Request failed with timeout after %1 ms.\", [req.getTimeout()]);\n            var err = new qx.type.BaseError(\"timeout\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(timeoutListener);\n\n          var parseErrorListener = req.addListener(\"parseError\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Error parsing the response.\";\n            var err = new qx.type.BaseError(\"parseError\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(parseErrorListener);\n\n          var abortListener = req.addListener(\"abort\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request aborted.\";\n            var err = new qx.type.BaseError(\"abort\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(abortListener);\n\n          var errorListener = req.addListener(\"error\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request failed.\";\n            var err = new qx.type.BaseError(\"error\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(errorListener);\n\n          req.send();\n        }, context)\n\n        .finally(function() {\n          if (req.getReadyState() !== 4) {\n            req.abort();\n          }\n        });\n\n        return promise;\n        // eslint-disable-next-line no-else-return\n      } else {\n        // fail loudly\n        throw new qx.type.BaseError(\"Error\", \"Environment setting qx.promise is set to false.\");\n      }\n    },\n\n    /**\n     * Abort request.\n     */\n    abort: function() {\n       if (qx.core.Environment.get(\"qx.debug.io\")) {\n         this.debug(\"Abort request\");\n       }\n       this.__abort = true;\n\n       // Update phase to \"abort\" before user handler are invoked [BUG #5485]\n       this.__phase = \"abort\";\n\n       this._transport.abort();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     REQUEST HEADERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply configured request headers to transport.\n     *\n     * This method MAY be overridden to customize application of request headers\n     * to transport.\n     */\n    _setRequestHeaders: function() {\n      var transport = this._transport,\n          requestHeaders = this._getAllRequestHeaders();\n\n      for (var key in requestHeaders) {\n        transport.setRequestHeader(key, requestHeaders[key]);\n      }\n\n    },\n\n    /**\n     * Get all request headers.\n     *\n     * @return {Map} All request headers.\n     */\n    _getAllRequestHeaders: function() {\n      var requestHeaders = {};\n      // Transport specific headers\n      qx.lang.Object.mergeWith(requestHeaders, this._getConfiguredRequestHeaders());\n      // Authentication delegate\n      qx.lang.Object.mergeWith(requestHeaders, this.__getAuthRequestHeaders());\n      // User-defined, requestHeaders property (deprecated)\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeadersDeprecated);\n      // User-defined\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeaders);\n\n      return requestHeaders;\n    },\n\n    /**\n    * Retrieve authentication headers from auth delegate.\n    *\n    * @return {Map} Authentication related request headers.\n    */\n    __getAuthRequestHeaders: function() {\n      var auth = this.getAuthentication(),\n          headers = {};\n\n      if (auth) {\n        auth.getAuthHeaders().forEach(function(header) {\n          headers[header.key] = header.value;\n        });\n        return headers;\n      }\n    },\n\n    /**\n     * Set a request header.\n     *\n     * Note: Setting request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     */\n    setRequestHeader: function(key, value) {\n      this.__requestHeaders[key] = value;\n    },\n\n    /**\n     * Get a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader: function(key) {\n       return this.__requestHeaders[key];\n    },\n\n    /**\n     * Remove a request header.\n     *\n     * Note: Removing request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     */\n    removeRequestHeader: function(key) {\n      if (this.__requestHeaders[key]) {\n       delete this.__requestHeaders[key];\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n     QUERY TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n\n     // This method mainly exists so that some methods found in the\n     // low-level transport can be deliberately omitted here,\n     // but still be accessed should it be absolutely necessary.\n     //\n     // Valid use cases include to query the transport’s responseXML\n     // property if performance is critical and any extra parsing\n     // should be avoided at all costs.\n     //\n    getTransport: function() {\n      return this._transport;\n    },\n\n    /**\n     * Get current ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     *\n     * @return {Number} Ready state.\n     */\n    getReadyState: function() {\n      return this._transport.readyState;\n    },\n\n    /**\n     * Get current phase.\n     *\n     * A more elaborate version of {@link #getReadyState}, this method indicates\n     * the current phase of the request. Maps to stateful (i.e. deterministic)\n     * events (success, abort, timeout, statusError) and intermediate\n     * readyStates (unsent, configured, loading, load).\n     *\n     * When the requests is successful, it progresses the states:<br>\n     * 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n     *\n     * In case of failure, the final state is one of:<br>\n     * 'abort', 'timeout', 'statusError'\n     *\n     * For each change of the phase, a {@link #changePhase} data event is fired.\n     *\n     * @return {String} Current phase.\n     *\n     */\n    getPhase: function() {\n      return this.__phase;\n    },\n\n    /**\n     * Get status code.\n     *\n     * @return {Number} The transport’s status code.\n     */\n    getStatus: function() {\n      return this._transport.status;\n    },\n\n    /**\n     * Get status text.\n     *\n     * @return {String} The transport’s status text.\n     */\n    getStatusText: function() {\n      return this._transport.statusText;\n    },\n\n    /**\n     * Get raw (unprocessed) response.\n     *\n     * @return {String} The raw response of the request.\n     */\n    getResponseText: function() {\n      return this._transport.responseText;\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders: function() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param key {String}\n     *   Key of the header to get the value from.\n     * @return {String}\n     *   Response header.\n     */\n    getResponseHeader: function(key) {\n      return this._transport.getResponseHeader(key);\n    },\n\n    /**\n     * Override the content type response header from response.\n     *\n     * @param contentType {String}\n     *   Content type for overriding.\n     * @see qx.bom.request.Xhr#overrideMimeType\n     */\n    overrideResponseContentType: function(contentType) {\n      return this._transport.overrideMimeType(contentType);\n    },\n\n    /**\n     * Get the content type response header from response.\n     *\n     * @return {String}\n     *   Content type response header.\n     */\n    getResponseContentType: function() {\n      return this.getResponseHeader(\"Content-Type\");\n    },\n\n    /**\n     * Whether request completed (is done).\n     */\n    isDone: function() {\n      return this.getReadyState() === 4;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get parsed response.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    getResponse: function() {\n      return this.__response;\n    },\n\n    /**\n     * Set response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse: function(response) {\n      var oldResponse = response;\n\n      if (this.__response !== response) {\n        this.__response = response;\n        this.fireEvent(\"changeResponse\", qx.event.type.Data, [this.__response, oldResponse]);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle \"readyStateChange\" event.\n     */\n    _onReadyStateChange: function() {\n      var readyState = this.getReadyState();\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Fire readyState: \" + readyState);\n      }\n\n      this.fireEvent(\"readyStateChange\");\n\n      // Transport switches to readyState DONE on abort and may already\n      // have successful HTTP status when response is served from cache.\n      //\n      // Not fire custom event \"loading\" (or \"success\", when cached).\n      if (this.__abort) {\n        return;\n      }\n\n      if (readyState === 3) {\n        this._setPhase(\"loading\");\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone: function() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Request completed with HTTP status: \" + this.getStatus());\n      }\n\n      // Event \"load\" fired in onLoad\n      this._setPhase(\"load\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this.getStatus())) {\n\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\"Response is of type: '\" + this.getResponseContentType() + \"'\");\n        }\n\n        this._setResponse(this._getParsedResponse());\n\n        if (this._parserFailed) {\n          this.fireEvent(\"fail\");\n        } else {\n          this._fireStatefulEvent(\"success\");\n        }\n\n      // Erroneous HTTP status\n      } else {\n\n        try {\n          this._setResponse(this._getParsedResponse());\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this.getStatus() !== 0) {\n          this._fireStatefulEvent(\"statusError\");\n          this.fireEvent(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handle \"load\" event.\n     */\n    _onLoad: function() {\n      this.fireEvent(\"load\");\n    },\n\n    /**\n     * Handle \"loadEnd\" event.\n     */\n    _onLoadEnd: function() {\n      this.fireEvent(\"loadEnd\");\n    },\n\n    /**\n     * Handle \"abort\" event.\n     */\n    _onAbort: function() {\n      this._fireStatefulEvent(\"abort\");\n    },\n\n    /**\n     * Handle \"timeout\" event.\n     */\n    _onTimeout: function() {\n      this._fireStatefulEvent(\"timeout\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /**\n     * Handle \"error\" event.\n     */\n    _onError: function() {\n      this.fireEvent(\"error\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL / HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire stateful event.\n     *\n     * Fires event and sets phase to name of event.\n     *\n     * @param evt {String} Name of the event to fire.\n     */\n    _fireStatefulEvent: function(evt) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(evt);\n      }\n      this._setPhase(evt);\n      this.fireEvent(evt);\n    },\n\n    /**\n     * Set phase.\n     *\n     * @param phase {String} The phase to set.\n     */\n    _setPhase: function(phase) {\n      var previousPhase = this.__phase;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(phase);\n        qx.core.Assert.assertMatch(phase,\n          /^(unsent)|(opened)|(sent)|(loading)|(load)|(success)|(abort)|(timeout)|(statusError)$/);\n      }\n\n      this.__phase = phase;\n      this.fireDataEvent(\"changePhase\", phase, previousPhase);\n    },\n\n    /**\n     * Serialize data.\n     *\n     * @param data {String|Map|qx.core.Object} Data to serialize.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData: function(data) {\n      var isPost = typeof this.getMethod !== \"undefined\" && this.getMethod() == \"POST\",\n          isJson = (/application\\/.*\\+?json/).test(this.getRequestHeader(\"Content-Type\"));\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (qx.Class.isSubClassOf(data.constructor, qx.core.Object)) {\n        return qx.util.Serializer.toUriParameter(data);\n      }\n\n      if (isJson && (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      return null;\n    }\n  },\n\n  environment:\n  {\n    \"qx.debug.io\": false\n  },\n\n  destruct: function()\n  {\n    var transport = this._transport,\n        noop = function() {};\n\n    if (this._transport) {\n      transport.onreadystatechange = transport.onload = transport.onloadend =\n      transport.onabort = transport.ontimeout = transport.onerror = noop;\n\n      // [BUG #8315] dispose asynchronously to work with Sinon.js fake server\n      window.setTimeout(function() {\n        transport.dispose();\n      }, 0);\n    }\n    this.__response = null;\n  }\n});\n"
  ]
}