{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/module/Css.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "_getHeight",
    "force",
    "elem",
    "dom",
    "Node",
    "isElement",
    "elementHeight",
    "stylesToSwap",
    "display",
    "position",
    "visibility",
    "module",
    "Css",
    "__swap",
    "bom",
    "element",
    "Dimension",
    "getHeight",
    "isDocument",
    "Document",
    "getWindow",
    "isWindow",
    "Viewport",
    "_getWidth",
    "elementWidth",
    "getWidth",
    "_getContentHeight",
    "obj",
    "contentHeight",
    "getContentHeight",
    "_getContentWidth",
    "contentWidth",
    "getContentWidth",
    "__displayDefaults",
    "__getDisplayDefault",
    "tagName",
    "doc",
    "defaults",
    "docu",
    "document",
    "tempEl",
    "qxWeb",
    "createElement",
    "appendTo",
    "body",
    "getStyle",
    "remove",
    "styles",
    "methodName",
    "context",
    "currentValues",
    "styleProperty",
    "style",
    "value",
    "includeStylesheet",
    "uri",
    "Stylesheet",
    "includeFile",
    "members",
    "show",
    "_forEachElementWrapped",
    "item",
    "currentVal",
    "prevVal",
    "$$qPrevDisp",
    "newVal",
    "getDocument",
    "setStyle",
    "hide",
    "prevStyle",
    "getPosition",
    "Location",
    "getOffset",
    "mode",
    "get",
    "name",
    "test",
    "lang",
    "String",
    "camelCase",
    "_forEachElement",
    "Style",
    "set",
    "setStyles",
    "getStyles",
    "names",
    "i",
    "length",
    "addClass",
    "Class",
    "add",
    "addClasses",
    "removeClass",
    "removeClasses",
    "hasClass",
    "has",
    "getClass",
    "toggleClass",
    "bCls",
    "toggleClasses",
    "l",
    "replaceClass",
    "oldName",
    "newName",
    "replace",
    "defer",
    "$attachAll",
    "$attach"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n/**\n * CSS/Style property manipulation module\n * @group (Core)\n */\nqx.Bootstrap.define(\"qx.module.Css\", {\n  statics: {\n    /**\n     * INTERNAL\n     *\n     * Returns the rendered height of the first element in the collection.\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the height of a <em>non displayed</em> element\n     * @return {Number} The first item's rendered height\n     */\n    _getHeight : function(force) {\n      var elem = this[0];\n\n      if (elem) {\n        if (qx.dom.Node.isElement(elem)) {\n\n          var elementHeight;\n          if (force) {\n            var stylesToSwap = {\n              display : \"block\",\n              position : \"absolute\",\n              visibility : \"hidden\"\n            };\n            elementHeight = qx.module.Css.__swap(elem, stylesToSwap, \"_getHeight\", this);\n          } else {\n            elementHeight = qx.bom.element.Dimension.getHeight(elem);\n          }\n\n          return elementHeight;\n        } else if (qx.dom.Node.isDocument(elem)) {\n          return qx.bom.Document.getHeight(qx.dom.Node.getWindow(elem));\n        } else if (qx.dom.Node.isWindow(elem)) {\n          return qx.bom.Viewport.getHeight(elem);\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * INTERNAL\n     *\n     * Returns the rendered width of the first element in the collection\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the width of a <em>non displayed</em> element\n     * @return {Number} The first item's rendered width\n     */\n    _getWidth : function(force) {\n      var elem = this[0];\n\n      if (elem) {\n        if (qx.dom.Node.isElement(elem)) {\n\n          var elementWidth;\n          if (force) {\n            var stylesToSwap = {\n              display : \"block\",\n              position : \"absolute\",\n              visibility : \"hidden\"\n            };\n            elementWidth = qx.module.Css.__swap(elem, stylesToSwap, \"_getWidth\", this);\n          } else {\n            elementWidth = qx.bom.element.Dimension.getWidth(elem);\n          }\n\n          return elementWidth;\n        } else if (qx.dom.Node.isDocument(elem)) {\n          return qx.bom.Document.getWidth(qx.dom.Node.getWindow(elem));\n        } else if (qx.dom.Node.isWindow(elem)) {\n          return qx.bom.Viewport.getWidth(elem);\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * INTERNAL\n     *\n     * Returns the content height of the first element in the collection.\n     * This is the maximum height the element can use, excluding borders,\n     * margins, padding or scroll bars.\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the content height of a <em>non displayed</em> element\n     * @return {Number} Computed content height\n     */\n    _getContentHeight : function(force)\n    {\n      var obj = this[0];\n      if (qx.dom.Node.isElement(obj)) {\n\n        var contentHeight;\n        if (force) {\n          var stylesToSwap = {\n            position: \"absolute\",\n            visibility: \"hidden\",\n            display: \"block\"\n          };\n          contentHeight = qx.module.Css.__swap(obj, stylesToSwap, \"_getContentHeight\", this);\n        } else {\n          contentHeight = qx.bom.element.Dimension.getContentHeight(obj);\n        }\n\n        return contentHeight;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * INTERNAL\n     *\n     * Returns the content width of the first element in the collection.\n     * This is the maximum width the element can use, excluding borders,\n     * margins, padding or scroll bars.\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the content width of a <em>non displayed</em> element\n     * @return {Number} Computed content width\n     */\n    _getContentWidth : function(force)\n    {\n      var obj = this[0];\n      if (qx.dom.Node.isElement(obj)) {\n\n        var contentWidth;\n        if (force) {\n          var stylesToSwap = {\n            position: \"absolute\",\n            visibility: \"hidden\",\n            display: \"block\"\n          };\n          contentWidth = qx.module.Css.__swap(obj, stylesToSwap, \"_getContentWidth\", this);\n        } else {\n          contentWidth = qx.bom.element.Dimension.getContentWidth(obj);\n        }\n\n        return contentWidth;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Maps HTML elements to their default \"display\" style values.\n     */\n    __displayDefaults : {},\n\n\n    /**\n     * Attempts tp determine the default \"display\" style value for\n     * elements with the given tag name.\n     *\n     * @param tagName {String} Tag name\n     * @param  doc {Document?} Document element. Default: The current document\n     * @return {String} The default \"display\" value, e.g. <code>inline</code>\n     * or <code>block</code>\n     */\n    __getDisplayDefault : function(tagName, doc)\n    {\n      var defaults = qx.module.Css.__displayDefaults;\n      if (!defaults[tagName]) {\n        var docu = doc || document;\n        var tempEl = qxWeb(docu.createElement(tagName)).appendTo(doc.body);\n        defaults[tagName] = tempEl.getStyle(\"display\");\n        tempEl.remove();\n      }\n\n      return defaults[tagName] || \"\";\n    },\n\n\n    /**\n     * Swaps the given styles of the element and execute the callback\n     * before the original values are restored.\n     *\n     * Finally returns the return value of the callback.\n     *\n     * @param element {Element} the DOM element to operate on\n     * @param styles {Map} the styles to swap\n     * @param methodName {String} the callback functions name\n     * @param context {Object} the context in which the callback should be called\n     * @return {Object} the return value of the callback\n     */\n    __swap : function(element, styles, methodName, context)\n    {\n      // get the current values\n      var currentValues = {};\n      for (var styleProperty in styles) {\n        currentValues[styleProperty] = element.style[styleProperty];\n        element.style[styleProperty] = styles[styleProperty];\n      }\n\n      var value = context[methodName]();\n\n      for (var styleProperty in currentValues) {\n        element.style[styleProperty] = currentValues[styleProperty];\n      }\n\n      return value;\n    },\n\n\n    /**\n     * Includes a Stylesheet file\n     *\n     * @attachStatic {qxWeb}\n     * @param uri {String} The stylesheet's URI\n     * @param doc {Document?} Document to modify\n     */\n    includeStylesheet : function(uri, doc) {\n      qx.bom.Stylesheet.includeFile(uri, doc);\n    }\n  },\n\n\n  members :\n  {\n    /**\n     * Returns the rendered height of the first element in the collection.\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the height of a <em>non displayed</em> element\n     * @return {Number} The first item's rendered height\n     */\n    getHeight : function(force) {\n      return this._getHeight(force);\n    },\n\n\n    /**\n     * Returns the rendered width of the first element in the collection\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the width of a <em>non displayed</em> element\n     * @return {Number} The first item's rendered width\n     */\n    getWidth : function(force) {\n      return this._getWidth(force);\n    },\n\n    /**\n     * Returns the content height of the first element in the collection.\n     * This is the maximum height the element can use, excluding borders,\n     * margins, padding or scroll bars.\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the content height of a <em>non displayed</em> element\n     * @return {Number} Computed content height\n     */\n    getContentHeight : function(force) {\n      return this._getContentHeight(force);\n    },\n\n    /**\n     * Returns the content width of the first element in the collection.\n     * This is the maximum width the element can use, excluding borders,\n     * margins, padding or scroll bars.\n     * @attach {qxWeb}\n     * @param force {Boolean?false} When true also get the content width of a <em>non displayed</em> element\n     * @return {Number} Computed content width\n     */\n    getContentWidth : function(force) {\n      return this._getContentWidth(force);\n    },\n\n    /**\n     * Shows any elements with \"display: none\" in the collection. If an element\n     * was hidden by using the {@link #hide} method, its previous\n     * \"display\" style value will be re-applied. Otherwise, the\n     * default \"display\" value for the element type will be applied.\n     *\n     * @attach {qxWeb}\n     * @return {qxWeb} The collection for chaining\n     */\n    show : function() {\n      this._forEachElementWrapped(function(item) {\n        var currentVal = item.getStyle(\"display\");\n        var prevVal = item[0].$$qPrevDisp;\n        var newVal;\n        if (currentVal == \"none\") {\n          if (prevVal && prevVal != \"none\") {\n            newVal = prevVal;\n          }\n          else {\n            var doc = qxWeb.getDocument(item[0]);\n            newVal = qx.module.Css.__getDisplayDefault(item[0].tagName, doc);\n          }\n          item.setStyle(\"display\", newVal);\n          item[0].$$qPrevDisp = \"none\";\n        }\n      });\n\n      return this;\n    },\n\n\n    /**\n     * Hides all elements in the collection by setting their \"display\"\n     * style to \"none\". The previous value is stored so it can be re-applied\n     * when {@link #show} is called.\n     *\n     * @attach {qxWeb}\n     * @return {qxWeb} The collection for chaining\n     */\n    hide : function() {\n      this._forEachElementWrapped(function(item) {\n        var prevStyle = item.getStyle(\"display\");\n        if (prevStyle !== \"none\") {\n          item[0].$$qPrevDisp = prevStyle;\n          item.setStyle(\"display\", \"none\");\n        }\n      });\n\n      return this;\n    },\n\n\n    /**\n     * Returns the distance between the first element in the collection and its\n     * offset parent\n     *\n     * @attach {qxWeb}\n     * @return {Map} a map with the keys <code>left</code> and <code>top</code>\n     * containing the distance between the elements\n     */\n    getPosition : function()\n    {\n      var obj = this[0];\n      if (qx.dom.Node.isElement(obj)) {\n        return qx.bom.element.Location.getPosition(obj);\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Returns the computed location of the given element in the context of the\n     * document dimensions.\n     *\n     * Supported modes:\n     *\n     * * <code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)\n     * * <code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)\n     * * <code>border</code>: Calculate the border box (useful to align to border edges of two elements).\n     * * <code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).\n     * * <code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).\n     *\n     * @attach {qxWeb}\n     * @param mode {String?box} A supported option. See comment above.\n     * @return {Map} A map with the keys <code>left</code>, <code>top</code>,\n     * <code>right</code> and <code>bottom</code> which contains the distance\n     * of the element relative to the document.\n     */\n    getOffset : function(mode) {\n      var elem = this[0];\n\n      if (elem && qx.dom.Node.isElement(elem)) {\n        return qx.bom.element.Location.get(elem, mode);\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Modifies the given style property on all elements in the collection.\n     *\n     * @attach {qxWeb}\n     * @param name {String} Name of the style property to modify\n     * @param value {var} The value to apply\n     * @return {qxWeb} The collection for chaining\n     */\n    setStyle : function(name, value) {\n      if (/\\w-\\w/.test(name)) {\n        name = qx.lang.String.camelCase(name);\n      }\n      this._forEachElement(function(item) {\n        qx.bom.element.Style.set(item, name, value);\n      });\n      return this;\n    },\n\n\n    /**\n     * Returns the value of the given style property for the first item in the\n     * collection.\n     *\n     * @attach {qxWeb}\n     * @param name {String} Style property name\n     * @return {var} Style property value\n     */\n    getStyle : function(name) {\n      if (this[0] && qx.dom.Node.isElement(this[0])) {\n        if (/\\w-\\w/.test(name)) {\n          name = qx.lang.String.camelCase(name);\n        }\n        return qx.bom.element.Style.get(this[0], name);\n      }\n      return null;\n    },\n\n\n    /**\n     * Sets multiple style properties for each item in the collection.\n     *\n     * @attach {qxWeb}\n     * @param styles {Map} A map of style property name/value pairs\n     * @return {qxWeb} The collection for chaining\n     */\n    setStyles : function(styles) {\n      for (var name in styles) {\n        this.setStyle(name, styles[name]);\n      }\n      return this;\n    },\n\n\n    /**\n     * Returns the values of multiple style properties for each item in the\n     * collection\n     *\n     * @attach {qxWeb}\n     * @param names {String[]} List of style property names\n     * @return {Map} Map of style property name/value pairs\n     */\n    getStyles : function(names) {\n      var styles = {};\n      for (var i=0; i < names.length; i++) {\n        styles[names[i]] = this.getStyle(names[i]);\n      }\n      return styles;\n    },\n\n\n    /**\n     * Adds a class name to each element in the collection\n     *\n     * @attach {qxWeb}\n     * @param name {String} Class name\n     * @return {qxWeb} The collection for chaining\n     */\n    addClass : function(name) {\n      this._forEachElement(function(item) {\n        qx.bom.element.Class.add(item, name);\n      });\n      return this;\n    },\n\n\n    /**\n     * Adds multiple class names to each element in the collection\n     *\n     * @attach {qxWeb}\n     * @param names {String[]} List of class names to add\n     * @return {qxWeb} The collection for chaining\n     */\n    addClasses : function(names) {\n      this._forEachElement(function(item) {\n        qx.bom.element.Class.addClasses(item, names);\n      });\n      return this;\n    },\n\n\n    /**\n     * Removes a class name from each element in the collection\n     *\n     * @attach {qxWeb}\n     * @param name {String} The class name to remove\n     * @return {qxWeb} The collection for chaining\n     */\n    removeClass : function(name) {\n      this._forEachElement(function(item) {\n        qx.bom.element.Class.remove(item, name);\n      });\n      return this;\n    },\n\n\n    /**\n     * Removes multiple class names from each element in the collection.\n     * Use {@link qx.module.Attribute#removeAttribute} to remove all classes.\n     *\n     * @attach {qxWeb}\n     * @param names {String[]} List of class names to remove\n     * @return {qxWeb} The collection for chaining\n     */\n    removeClasses : function(names) {\n      this._forEachElement(function(item) {\n        qx.bom.element.Class.removeClasses(item, names);\n      });\n      return this;\n    },\n\n\n    /**\n     * Checks if the first element in the collection has the given class name\n     *\n     * @attach {qxWeb}\n     * @param name {String} Class name to check for\n     * @return {Boolean} <code>true</code> if the first item has the given class name\n     */\n    hasClass : function(name) {\n      if (!this[0] || !qx.dom.Node.isElement(this[0])) {\n        return false;\n      }\n      return qx.bom.element.Class.has(this[0], name);\n    },\n\n\n    /**\n     * Returns the class name of the first element in the collection\n     *\n     * @attach {qxWeb}\n     * @return {String} Class name\n     */\n    getClass : function() {\n      if (!this[0] || !qx.dom.Node.isElement(this[0])) {\n        return \"\";\n      }\n      return qx.bom.element.Class.get(this[0]);\n    },\n\n\n    /**\n     * Toggles the given class name on each item in the collection\n     *\n     * @attach {qxWeb}\n     * @param name {String} Class name\n     * @return {qxWeb} The collection for chaining\n     */\n    toggleClass : function(name) {\n      var bCls = qx.bom.element.Class;\n      this._forEachElement(function(item) {\n        bCls.has(item, name) ?\n          bCls.remove(item, name) :\n          bCls.add(item, name);\n      });\n      return this;\n    },\n\n\n    /**\n     * Toggles the given list of class names on each item in the collection\n     *\n     * @attach {qxWeb}\n     * @param names {String[]} Class names\n     * @return {qxWeb} The collection for chaining\n     */\n    toggleClasses : function(names) {\n      for (var i=0,l=names.length; i<l; i++) {\n        this.toggleClass(names[i]);\n      }\n      return this;\n    },\n\n\n    /**\n     * Replaces a class name on each element in the collection\n     *\n     * @attach {qxWeb}\n     * @param oldName {String} Class name to remove\n     * @param newName {String} Class name to add\n     * @return {qxWeb} The collection for chaining\n     */\n    replaceClass : function(oldName, newName) {\n      this._forEachElement(function(item) {\n        qx.bom.element.Class.replace(item, oldName, newName);\n      });\n      return this;\n    }\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachAll(this);\n    // manually attach private method which is ignored by attachAll\n    qxWeb.$attach({\n      \"_getWidth\" : statics._getWidth,\n      \"_getHeight\" : statics._getHeight,\n      \"_getContentHeight\" : statics._getContentHeight,\n      \"_getContentWidth\" : statics._getContentWidth\n    });\n  }\n});\n"
  ]
}