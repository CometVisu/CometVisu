{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/event/PointerHandler.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "register",
    "element",
    "type",
    "$$pointerHandler",
    "core",
    "Environment",
    "get",
    "$$emitter",
    "event",
    "Emitter",
    "handler",
    "PointerCore",
    "unregister",
    "classname",
    "listeners",
    "getListeners",
    "module",
    "PointerHandler",
    "indexOf",
    "length",
    "dispose",
    "undefined",
    "defer",
    "qxWeb",
    "$registerEventHook"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,gCAApB,EAAsD;AAEpDC,IAAAA,OAAO,EACP;AACE;;;AAGAC,MAAAA,KAAK,EAAG,CACN,aADM,EAEN,aAFM,EAGN,YAHM,EAIN,aAJM,EAKN,WALM,EAMN,eANM,EAQN,cARM,EASN,aATM,EAUN,eAVM,EAWN,eAXM,CAJV;;AAkBE;;;;;;;AAOAC,MAAAA,QAAQ,EAAG,kBAASC,OAAT,EAAkBC,IAAlB,EAAwB;AACjC,YAAI,CAACD,OAAO,CAACE,gBAAb,EAA+B;AAE7B,cAAI,CAACV,EAAE,CAACW,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAL,EAAqD;AACnD,gBAAI,CAACL,OAAO,CAACM,SAAb,EAAwB;AACtBN,cAAAA,OAAO,CAACM,SAAR,GAAoB,IAAId,EAAE,CAACe,KAAH,CAASC,OAAb,EAApB;AACD;AACF;;AAEDR,UAAAA,OAAO,CAACE,gBAAR,GAA2B,IAAIV,EAAE,CAACe,KAAH,CAASE,OAAT,CAAiBC,WAArB,CAAiCV,OAAjC,EAA0CA,OAAO,CAACM,SAAlD,CAA3B;AACD;AACF,OApCH;;AAuCE;;;;;AAKAK,MAAAA,UAAU,EAAG,oBAASX,OAAT,EAAkB;AAC7B;AACA,YAAIA,OAAO,CAACE,gBAAZ,EAA8B;AAC5B;AACA;AACA;AACA,cAAIF,OAAO,CAACE,gBAAR,CAAyBU,SAAzB,KAAuC,0BAA3C,EAAuE;AACrE;AACD;;AAED,cAAIC,SAAS,GAAGb,OAAO,CAACM,SAAR,CAAkBQ,YAAlB,EAAhB;;AACA,eAAK,IAAIb,IAAT,IAAiBY,SAAjB,EAA4B;AAC1B,gBAAIrB,EAAE,CAACuB,MAAH,CAAUR,KAAV,CAAgBS,cAAhB,CAA+BlB,KAA/B,CAAqCmB,OAArC,CAA6ChB,IAA7C,MAAuD,CAAC,CAA5D,EAA+D;AAC7D,kBAAIY,SAAS,CAACZ,IAAD,CAAT,CAAgBiB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B;AACD;AACF;AACF,WAf2B,CAiB5B;;;AACAlB,UAAAA,OAAO,CAACE,gBAAR,CAAyBiB,OAAzB;AACAnB,UAAAA,OAAO,CAACE,gBAAR,GAA2BkB,SAA3B;AACD;AACF;AAnEH,KAHoD;AAyEpDC,IAAAA,KAAK,EAAG,eAASxB,OAAT,EAAkB;AACxByB,MAAAA,KAAK,CAACC,kBAAN,CAAyB1B,OAAO,CAACC,KAAjC,EAAwCD,OAAO,CAACE,QAAhD,EAA0DF,OAAO,CAACc,UAAlE;AACD;AA3EmD,GAAtD;AAzBAnB,EAAAA,EAAE,CAACuB,MAAH,CAAUR,KAAV,CAAgBS,cAAhB,CAA+BrB,aAA/B,GAA+CA,aAA/C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * TODOC\n *\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.PointerHandler\", {\n\n  statics :\n  {\n    /**\n     * List of events that require a pointer handler\n     */\n    TYPES : [\n      \"pointermove\",\n      \"pointerover\",\n      \"pointerout\",\n      \"pointerdown\",\n      \"pointerup\",\n      \"pointercancel\",\n\n      \"gesturebegin\",\n      \"gesturemove\",\n      \"gesturefinish\",\n      \"gesturecancel\"\n    ],\n\n    /**\n     * Creates a pointer handler for the given element when a pointer event listener\n     * is attached to it\n     *\n     * @param element {Element} DOM element\n     * @param type {String} event type\n     */\n    register : function(element, type) {\n      if (!element.$$pointerHandler) {\n\n        if (!qx.core.Environment.get(\"event.dispatchevent\")) {\n          if (!element.$$emitter) {\n            element.$$emitter = new qx.event.Emitter();\n          }\n        }\n\n        element.$$pointerHandler = new qx.event.handler.PointerCore(element, element.$$emitter);\n      }\n    },\n\n\n    /**\n     * Removes the pointer event handler from the element if there are no more\n     * pointer event listeners attached to it\n     * @param element {Element} DOM element\n     */\n    unregister : function(element) {\n      // check if there are any registered listeners left\n      if (element.$$pointerHandler) {\n        // in a standalone or in-line application the pointer handler of\n        // document will be qx.event.handler.Pointer, do not dispose that handler.\n        // see constructor of qx.event.handler.Pointer\n        if (element.$$pointerHandler.classname === \"qx.event.handler.Pointer\") {\n          return;\n        }\n\n        var listeners = element.$$emitter.getListeners();\n        for (var type in listeners) {\n          if (qx.module.event.PointerHandler.TYPES.indexOf(type) !== -1) {\n            if (listeners[type].length > 0) {\n              return;\n            }\n          }\n        }\n\n        // no more listeners, get rid of the handler\n        element.$$pointerHandler.dispose();\n        element.$$pointerHandler = undefined;\n      }\n    }\n  },\n\n  defer : function(statics) {\n    qxWeb.$registerEventHook(statics.TYPES, statics.register, statics.unregister);\n  }\n});\n"
  ]
}