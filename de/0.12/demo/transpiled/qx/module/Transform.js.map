{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/module/Transform.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "members",
    "transform",
    "transforms",
    "_forEachElement",
    "el",
    "bom",
    "element",
    "Transform",
    "translate",
    "value",
    "scale",
    "rotate",
    "skew",
    "setTransformOrigin",
    "setOrigin",
    "getTransformOrigin",
    "nodeType",
    "getOrigin",
    "setTransformStyle",
    "setStyle",
    "getTransformStyle",
    "getStyle",
    "setTransformPerspective",
    "setPerspective",
    "getTransformPerspective",
    "getPerspective",
    "setTransformPerspectiveOrigin",
    "setPerspectiveOrigin",
    "getTransformPerspectiveOrigin",
    "getPerspectiveOrigin",
    "setTransformBackfaceVisibility",
    "setBackfaceVisibility",
    "getTransformBackfaceVisibility",
    "getBackfaceVisibility",
    "defer",
    "statics",
    "qxWeb",
    "$attachAll",
    "module"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This class is responsible for applying CSS3 transforms to the collection.\n * The implementation is mostly a cross browser wrapper for applying the\n * transforms.\n * The API is keep to the spec as close as possible.\n *\n * http://www.w3.org/TR/css3-3d-transforms/\n */\nqx.Bootstrap.define(\"qx.module.Transform\",\n{\n  members :\n  {\n    /**\n     * Method to apply multiple transforms at once to the given element. It\n     * takes a map containing the transforms you want to apply plus the values\n     * e.g.<code>{scale: 2, rotate: \"5deg\"}</code>.\n     * The values can be either singular, which means a single value will\n     * be added to the CSS. If you give an array, the values will be split up\n     * and each array entry will be used for the X, Y or Z dimension in that\n     * order e.g. <code>{scale: [2, 0.5]}</code> will result in a element\n     * double the size in X direction and half the size in Y direction.\n     * Make sure your browser supports all transformations you apply.\n     *\n     * @attach {qxWeb}\n     * @param transforms {Map} The map containing the transforms and value.\n     * @return {qxWeb} This reference for chaining.\n     */\n    transform : function(transforms) {\n      this._forEachElement(function(el) {\n        qx.bom.element.Transform.transform(el, transforms);\n      });\n      return this;\n    },\n\n\n    /**\n     * Translates by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {String|Array} The value to translate e.g. <code>\"10px\"</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    translate : function(value) {\n      return this.transform({translate: value});\n    },\n\n\n    /**\n     * Scales by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {Number|Array} The value to scale.\n     * @return {qxWeb} This reference for chaining.\n     */\n    scale : function(value) {\n      return this.transform({scale: value});\n    },\n\n\n    /**\n     * Rotates by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {String|Array} The value to rotate e.g. <code>\"90deg\"</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    rotate : function(value) {\n      return this.transform({rotate: value});\n    },\n\n\n    /**\n     * Skews by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {String|Array} The value to skew e.g. <code>\"90deg\"</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    skew : function(value) {\n      return this.transform({skew: value});\n    },\n\n\n    /**\n     * Sets the transform-origin property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     *\n     * @attach {qxWeb}\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformOrigin : function(value) {\n      this._forEachElement(function(el) {\n        qx.bom.element.Transform.setOrigin(el, value);\n      });\n      return this;\n    },\n\n\n    /**\n     * Returns the transform-origin property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, e.g. <code>50% 50%</code> or null,\n     *   of the collection is empty.\n     */\n    getTransformOrigin : function() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getOrigin(this[0]);\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the transform-style property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     *\n     * @attach {qxWeb}\n     * @param value {String} Either <code>flat</code> or <code>preserve-3d</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformStyle : function(value) {\n      this._forEachElement(function(el) {\n        qx.bom.element.Transform.setStyle(el, value);\n      });\n      return this;\n    },\n\n\n    /**\n     * Returns the transform-style property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, either <code>flat</code> or\n     *   <code>preserve-3d</code>.\n     */\n    getTransformStyle : function() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getStyle(this[0]);\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the perspective property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     *\n     * @attach {qxWeb}\n     * @param value {Number} The perspective layer. Numbers between 100\n     *   and 5000 give the best results.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformPerspective : function(value) {\n      this._forEachElement(function(el) {\n        qx.bom.element.Transform.setPerspective(el, value);\n      });\n      return this;\n    },\n\n\n    /**\n     * Returns the perspective property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, e.g. <code>500</code>\n     */\n    getTransformPerspective : function() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getPerspective(this[0]);\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the perspective-origin property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     *\n     * @attach {qxWeb}\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformPerspectiveOrigin : function(value) {\n      this._forEachElement(function(el) {\n        qx.bom.element.Transform.setPerspectiveOrigin(el, value);\n      });\n      return this;\n    },\n\n\n    /**\n     * Returns the perspective-origin property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, e.g. <code>50% 50%</code>\n     */\n    getTransformPerspectiveOrigin : function() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getPerspectiveOrigin(this[0]);\n      }\n      return \"\";\n    },\n\n\n    /**\n     * Sets the backface-visibility property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     *\n     * @attach {qxWeb}\n     * @param value {Boolean} <code>true</code> if the backface should be visible.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformBackfaceVisibility : function(value) {\n      this._forEachElement(function(el) {\n        qx.bom.element.Transform.setBackfaceVisibility(el, value);\n      });\n      return this;\n    },\n\n\n    /**\n     * Returns the backface-visibility property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     *\n     * @attach {qxWeb}\n     * @return {Boolean} <code>true</code>, if the backface is visible.\n     */\n    getTransformBackfaceVisibility : function() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getBackfaceVisibility(this[0]);\n      }\n      return \"\";\n    }\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachAll(this);\n  }\n});\n"
  ]
}