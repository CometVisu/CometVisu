{
  "className": "qx.bom.Selector",
  "packageName": "qx.bom",
  "name": "Selector",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 130,
        "column": 0
      },
      "end": {
        "line": 154,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The selector engine supports virtually all CSS 3 Selectors  â€“ this even\n includes some parts that are infrequently implemented such as escaped\n selectors (<code>.foo\\\\+bar</code>), Unicode selectors, and results returned\n in document order. There are a few notable exceptions to the CSS 3 selector\n support:</p>\n<ul>\n<li><code>:root</code></li>\n<li><code>:target</code></li>\n<li><code>:nth-last-child</code></li>\n<li><code>:nth-of-type</code></li>\n<li><code>:nth-last-of-type</code></li>\n<li><code>:first-of-type</code></li>\n<li><code>:last-of-type</code></li>\n<li><code>:only-of-type</code></li>\n<li><code>:lang()</code>\nIn addition to the CSS 3 Selectors the engine supports the following\nadditional selectors or conventions.\n<em>Changes</em></li>\n<li><code>:not(a.b)</code>: Supports non-simple selectors in <code>:not()</code> (most browsers only support <code>:not(a)</code>, for example).</li>\n<li><code>:not(div &gt; p)</code>: Supports full selectors in <code>:not()</code>.</li>\n<li><code>:not(div, p)</code>: Supports multiple selectors in <code>:not()</code>.</li>\n<li><code>[NAME=VALUE]</code>: Doesn't require quotes around the specified value in an attribute selector.\n<em>Additions</em></li>\n<li><code>[NAME!=VALUE]</code>: Finds all elements whose <code>NAME</code> attribute doesn't match the specified value. Is equivalent to doing <code>:not([NAME=VALUE])</code>.</li>\n<li><code>:contains(TEXT)</code>: Finds all elements whose textual context contains the word <code>TEXT</code> (case sensitive).</li>\n<li><code>:header</code>: Finds all elements that are a header element (h1, h2, h3, h4, h5, h6).</li>\n<li><code>:parent</code>: Finds all elements that contains another element.\n<em>Positional Selector Additions</em></li>\n<li><code>:first</code>/</code>:last</code>: Finds the first or last matching element on the page. (e.g. <code>div:first</code> would find the first div on the page, in document order)</li>\n<li><code>:even</code>/<code>:odd</code>: Finds every other element on the page (counting begins at 0, so <code>:even</code> would match the first element).</li>\n<li><code>:eq</code>/<code>:nth</code>: Finds the Nth element on the page (e.g. <code>:eq(5)</code> finds the 6th element on the page).</li>\n<li><code>:lt</code>/<code>:gt</code>: Finds all elements at positions less than or greater than the specified positions.\n<em>Form Selector Additions</em></li>\n<li><code>:input</code>: Finds all input elements (includes textareas, selects, and buttons).</li>\n<li><code>:text</code>, <code>:checkbox</code>, <code>:file</code>, <code>:password</code>, <code>:submit</code>, <code>:image</code>, <code>:reset</code>, <code>:button</code>: Finds the input element with the specified input type (<code>:button</code> also finds button elements).\nBased on Sizzle by John Resig, see:</li>\n<li>http://sizzlejs.com/\nFor further usage details also have a look at the wiki page at:</li>\n<li>https://github.com/jquery/sizzle/wiki/Sizzle-Home</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "query": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 15
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Queries the document for the given selector. Supports all CSS3 selectors\n plus some extensions as mentioned in the class description.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(selector, context)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selector {String} Valid selector (CSS3 + extensions)",
            "paramName": "selector",
            "description": " Valid selector (CSS3 + extensions)",
            "type": "qx.bom.String"
          },
          {
            "name": "@param",
            "body": "context {Element} Context element (result elements must be children of this element)",
            "paramName": "context",
            "description": " Context element (result elements must be children of this element)",
            "type": "qx.bom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Matching elements",
            "type": "Array",
            "description": " Matching elements"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "matches": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an reduced array which only contains the elements from the given\n array which matches the given selector</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(selector, set)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selector {String} Selector to filter given set",
            "paramName": "selector",
            "description": " Selector to filter given set",
            "type": "qx.bom.String"
          },
          {
            "name": "@param",
            "body": "set {Array} List to filter according to given selector",
            "paramName": "set",
            "description": " List to filter according to given selector",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} New array containing matching elements",
            "type": "Array",
            "description": " New array containing matching elements"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "descendants": []
}