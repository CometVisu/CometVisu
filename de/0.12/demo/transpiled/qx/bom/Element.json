{
  "className": "qx.bom.Element",
  "packageName": "qx.bom",
  "name": "Element",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 35,
        "column": 0
      },
      "end": {
        "line": 267,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>This class is mainly a convenience wrapper for DOM elements to\n qooxdoo's event system.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.event.dispatch.Direct"
        },
        {
          "name": "@require",
          "body": "qx.event.dispatch.DomBubbling"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Keyboard"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Mouse"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Element"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Appear"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Touch"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Offline"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Input"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Pointer"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Gesture"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "addListener": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  EVENTS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Add an event listener to a DOM element. The event listener is passed an\n instance of {@link Event} containing all relevant information\n about the event as parameter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to attach the event on.",
            "paramName": "element",
            "description": " DOM element to attach the event on.",
            "type": "qx.bom.Element"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event e.g. \"click\", \"keydown\", ...",
            "paramName": "type",
            "description": " Name of the event e.g. \"click\", \"keydown\", ...",
            "type": "qx.bom.String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Event listener function",
            "paramName": "listener",
            "description": " Event listener function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n       capturing phase or the bubbling phase of the event. The default is\n       to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n       capturing phase or the bubbling phase of the event. The default is\n       to attach the event handler to the bubbling phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n       using the {@link #removeListenerById} method.",
            "type": "qx.bom.String",
            "description": " An opaque id, which can be used to remove the event listener\n       using the {@link #removeListenerById} method."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an event listener from a from DOM node.\n Note: All registered event listeners will automatically be removed from\n   the DOM at page unload so it is not necessary to detach events yourself.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM Element",
            "paramName": "element",
            "description": " DOM Element",
            "type": "qx.bom.Element"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "qx.bom.String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The pointer to the event listener",
            "paramName": "listener",
            "description": " The pointer to the event listener",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\n       the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\n       the bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the listener was removed",
            "type": "Boolean",
            "description": " <code>true</code> if the listener was removed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from an event target by an id returned by\n {@link #addListener}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "qx.bom.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the listener was removed",
            "type": "Boolean",
            "description": " <code>true</code> if the listener was removed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasListener": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether there are one or more listeners for an event type\n registered at the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element",
            "paramName": "element",
            "description": " DOM element",
            "type": "qx.bom.Element"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "qx.bom.String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\n       the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\n       the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element has event listeners of the given type.",
            "type": "Boolean",
            "description": " Whether the element has event listeners of the given type."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "focus": {
      "location": {
        "start": {
          "line": 128,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focuses the given element. The element needs to have a positive <code>tabIndex</code> value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.bom.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Blurs the given element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to blur",
            "paramName": "element",
            "description": " DOM element to blur",
            "type": "qx.bom.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 148,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activates the given element. The active element receives all key board events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.bom.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deactivates the given element. The active element receives all key board events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.bom.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "capture": {
      "location": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Captures the given element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to capture",
            "paramName": "element",
            "description": " DOM element to capture",
            "type": "qx.bom.Element"
          },
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Releases the given element (from a previous {@link #capture} call)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to release",
            "paramName": "element",
            "description": " DOM element to release",
            "type": "qx.bom.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clone": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  UTILS\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Clone given DOM element. May optionally clone all attached\n events (recursively) as well.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Element to clone",
            "paramName": "element",
            "description": " Element to clone",
            "type": "qx.bom.Element"
          },
          {
            "name": "@param",
            "body": "events {Boolean?false} Whether events should be copied as well",
            "paramName": "events",
            "description": " Whether events should be copied as well",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The copied element",
            "type": "qx.bom.Element",
            "description": " The copied element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}