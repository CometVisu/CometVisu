{
  "className": "qx.bom.Shortcut",
  "packageName": "qx.bom",
  "name": "Shortcut",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 444,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Shortcuts can be used to globally define keyboard shortcuts.\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 49,
        "column": 14
      },
      "end": {
        "line": 61,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Create a new instance of Command</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "shortcut {String} shortcuts can be composed of optional modifier\n    keys Control, Alt, Shift, Meta and a non modifier key.\n    If no non modifier key is specified, the second parameter is evaluated.\n    The key must be separated by a <code>+</code> or <code>-</code> character.\n    Examples: Alt+F1, Control+C, Control+Alt+Delete",
          "paramName": "shortcut",
          "description": " shortcuts can be composed of optional modifier\n    keys Control, Alt, Shift, Meta and a non modifier key.\n    If no non modifier key is specified, the second parameter is evaluated.\n    The key must be separated by a <code>+</code> or <code>-</code> character.\n    Examples: Alt+F1, Control+C, Control+Alt+Delete",
          "type": "qx.bom.String"
        }
      ]
    }
  },
  "events": {
    "execute": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 76,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the command is executed. Sets the \"data\" property of the event to\n the object that issued the command.</p>"
          }
        ]
      },
      "name": "execute",
      "type": "qx.event.type.Data"
    }
  },
  "properties": {
    "enabled": {
      "location": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>whether the command should be respected/enabled</p>"
          }
        ]
      },
      "name": "enabled",
      "propertyType": "new",
      "event": "changeEnabled",
      "apply": "_applyEnabled",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "shortcut": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The command shortcut</p>"
          }
        ]
      },
      "name": "shortcut",
      "propertyType": "new",
      "apply": "_applyShortcut",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "autoRepeat": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the execute event should be fired repeatedly if the user keep\n the keys pressed.</p>"
          }
        ]
      },
      "name": "autoRepeat",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__modifier": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__key": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 14
        }
      },
      "type": "variable",
      "access": "private"
    },
    "execute": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire the \"execute\" event on this shortcut.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Object which issued the execute event",
            "paramName": "target",
            "description": " Object which issued the execute event",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__onKeyDown": {
      "location": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Key down event handler.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.KeySequence} The key event object",
            "paramName": "event",
            "description": " The key event object",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onKeyPress": {
      "location": {
        "start": {
          "line": 172,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Key press event handler.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.KeySequence} The key event object",
            "paramName": "event",
            "description": " The key event object",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 202,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "enabled"
      ]
    },
    "_applyShortcut": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 5
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "shortcut"
      ]
    },
    "__matchesKeyEvent": {
      "location": {
        "start": {
          "line": 292,
          "column": 4
        },
        "end": {
          "line": 322,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the given key event matches the shortcut's shortcut</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} the key event object",
            "paramName": "e",
            "description": " the key event object",
            "type": "qx.event.type.KeySequence"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the shortcuts shortcut matches the key event",
            "type": "Boolean",
            "description": " whether the shortcuts shortcut matches the key event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__oldKeyNameToKeyIdentifierMap": {
      "location": {
        "start": {
          "line": 334,
          "column": 4
        },
        "end": {
          "line": 358,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__oldKeyNameToKeyIdentifierMap)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__normalizeKeyIdentifier": {
      "location": {
        "start": {
          "line": 367,
          "column": 4
        },
        "end": {
          "line": 388,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks and normalizes the key identifier.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "keyName {String} name of the key.",
            "paramName": "keyName",
            "description": " name of the key.",
            "type": "qx.bom.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} normalized keyIdentifier or \"Unidentified\" if a conversion was not possible",
            "type": "qx.bom.String",
            "description": " normalized keyIdentifier or \"Unidentified\" if a conversion was not possible"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getShortcut": {
      "type": "function",
      "name": "getShortcut",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>shortcut</code>.\n\nFor further details take a look at the property definition: {@link #shortcut}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for shortcut"
          }
        ]
      }
    },
    "setShortcut": {
      "type": "function",
      "name": "setShortcut",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>shortcut</code>.\n\nFor further details take a look at the property definition: {@link #shortcut}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for shortcut"
          }
        ]
      }
    },
    "resetShortcut": {
      "type": "function",
      "name": "resetShortcut",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>shortcut</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #shortcut}."
          }
        ]
      }
    },
    "getAutoRepeat": {
      "type": "function",
      "name": "getAutoRepeat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoRepeat</code>.\n\nFor further details take a look at the property definition: {@link #autoRepeat}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoRepeat"
          }
        ]
      }
    },
    "isAutoRepeat": {
      "type": "function",
      "name": "isAutoRepeat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoRepeat</code>.\n\nFor further details take a look at the property definition: {@link #autoRepeat}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoRepeat"
          }
        ]
      }
    },
    "setAutoRepeat": {
      "type": "function",
      "name": "setAutoRepeat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoRepeat</code>.\n\nFor further details take a look at the property definition: {@link #autoRepeat}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for autoRepeat"
          }
        ]
      }
    },
    "resetAutoRepeat": {
      "type": "function",
      "name": "resetAutoRepeat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoRepeat</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoRepeat}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 437,
        "column": 13
      },
      "end": {
        "line": 443,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}