{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/webfonts/Validator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "fontFamily",
    "comparisonString",
    "setComparisonString",
    "setFontFamily",
    "__requestedHelpers",
    "_getRequestedHelpers",
    "statics",
    "COMPARISON_FONTS",
    "sans",
    "serif",
    "HELPER_CSS",
    "position",
    "margin",
    "padding",
    "top",
    "left",
    "fontSize",
    "width",
    "height",
    "lineHeight",
    "fontVariant",
    "visibility",
    "COMPARISON_STRING",
    "__defaultSizes",
    "__defaultHelpers",
    "removeDefaultHelperElements",
    "defaultHelpers",
    "bom",
    "webfonts",
    "Validator",
    "prop",
    "document",
    "body",
    "removeChild",
    "properties",
    "nullable",
    "init",
    "apply",
    "timeout",
    "check",
    "events",
    "members",
    "__checkTimer",
    "__checkStarted",
    "validate",
    "Date",
    "getTime",
    "restart",
    "event",
    "Timer",
    "addListener",
    "__onTimerInterval",
    "once",
    "start",
    "_reset",
    "elem",
    "_isFontValid",
    "__init",
    "style",
    "requestedSans",
    "element",
    "Dimension",
    "getWidth",
    "requestedSerif",
    "cls",
    "fontsSans",
    "getFontFamily",
    "concat",
    "fontsSerif",
    "_getHelperElement",
    "getComparisonString",
    "styleMap",
    "lang",
    "clone",
    "join",
    "createElement",
    "innerHTML",
    "Style",
    "setStyles",
    "appendChild",
    "_applyFontFamily",
    "value",
    "old",
    "stop",
    "fireDataEvent",
    "family",
    "valid",
    "now",
    "getTimeout",
    "destruct",
    "removeListener",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Checks whether a given font is available on the document and fires events\n * accordingly.\n * \n * This class does not need to be disposed, unless you want to abort the validation\n * early\n */\nqx.Class.define(\"qx.bom.webfonts.Validator\", {\n\n  extend : qx.core.Object,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param fontFamily {String} The name of the font to be verified\n   * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n   * whether the font has loaded properly\n   */\n  construct : function(fontFamily, comparisonString)\n  {\n    this.base(arguments);\n\n    if (comparisonString) {\n      this.setComparisonString(comparisonString);\n    }\n\n    if (fontFamily) {\n      this.setFontFamily(fontFamily);\n      this.__requestedHelpers = this._getRequestedHelpers();\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Sets of serif and sans-serif fonts to be used for size comparisons.\n     * At least one of these fonts should be present on any system.\n     */\n    COMPARISON_FONTS : {\n      sans : [\"Arial\", \"Helvetica\", \"sans-serif\"],\n      serif : [\"Times New Roman\", \"Georgia\", \"serif\"]\n    },\n\n\n    /**\n     * Map of common CSS attributes to be used for all  size comparison elements\n     */\n    HELPER_CSS : {\n      position: \"absolute\",\n      margin: \"0\",\n      padding: \"0\",\n      top: \"-1000px\",\n      left: \"-1000px\",\n      fontSize: \"350px\",\n      width: \"auto\",\n      height: \"auto\",\n      lineHeight: \"normal\",\n      fontVariant: \"normal\",\n      visibility: \"hidden\"\n    },\n\n\n    /**\n     * The string to be used in the size comparison elements. This is the default string\n     * which is used for the {@link #COMPARISON_FONTS} and the font to be validated. It\n     * can be overridden for the font to be validated using the {@link #comparisonString}\n     * property.\n     */\n    COMPARISON_STRING : \"WEei\",\n    __defaultSizes : null,\n    __defaultHelpers : null,\n\n\n    /**\n     * Removes the two common helper elements used for all size comparisons from\n     * the DOM\n     */\n    removeDefaultHelperElements : function()\n    {\n      var defaultHelpers = qx.bom.webfonts.Validator.__defaultHelpers;\n      if (defaultHelpers) {\n        for (var prop in defaultHelpers) {\n          document.body.removeChild(defaultHelpers[prop]);\n        }\n      }\n      delete qx.bom.webfonts.Validator.__defaultHelpers;\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The font-family this validator should check\n     */\n    fontFamily :\n    {\n      nullable : true,\n      init : null,\n      apply : \"_applyFontFamily\"\n    },\n\n    /**\n     * Comparison string used to check whether the font has loaded or not.\n     */\n    comparisonString :\n    {\n      nullable : true,\n      init : null\n    },\n\n    /**\n     * Time in milliseconds from the beginning of the check until it is assumed\n     * that a font is not available\n     */\n    timeout :\n    {\n      check : \"Integer\",\n      init : 5000\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * Fired when the status of a web font has been determined. The event data\n     * is a map with the keys \"family\" (the font-family name) and \"valid\"\n     * (Boolean).\n     */\n    \"changeStatus\" : \"qx.event.type.Data\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __requestedHelpers : null,\n    __checkTimer : null,\n    __checkStarted : null,\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Validates the font\n     */\n    validate : function()\n    {\n      this.__checkStarted = new Date().getTime();\n\n      if (this.__checkTimer) {\n        this.__checkTimer.restart();\n      }\n      else {\n        this.__checkTimer = new qx.event.Timer(100);\n        this.__checkTimer.addListener(\"interval\", this.__onTimerInterval, this);\n        // Give the browser a chance to render the new elements\n        qx.event.Timer.once(function() {\n          this.__checkTimer.start();\n        }, this, 0);\n      }\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Removes the helper elements from the DOM\n     */\n    _reset : function()\n    {\n      if (this.__requestedHelpers) {\n        for (var prop in this.__requestedHelpers) {\n          var elem = this.__requestedHelpers[prop];\n          document.body.removeChild(elem);\n        }\n        this.__requestedHelpers = null;\n      }\n    },\n\n\n    /**\n     * Checks if the font is available by comparing the widths of the elements\n     * using the generic fonts to the widths of the elements using the font to\n     * be validated\n     *\n     * @return {Boolean} Whether or not the font caused the elements to differ\n     * in size\n     */\n    _isFontValid : function()\n    {\n      if (!qx.bom.webfonts.Validator.__defaultSizes) {\n        this.__init();\n      }\n\n      if (!this.__requestedHelpers) {\n        this.__requestedHelpers = this._getRequestedHelpers();\n      }\n\n      // force rerendering for chrome\n      this.__requestedHelpers.sans.style.visibility = \"visible\";\n      this.__requestedHelpers.sans.style.visibility = \"hidden\";\n      this.__requestedHelpers.serif.style.visibility = \"visible\";\n      this.__requestedHelpers.serif.style.visibility = \"hidden\";\n\n      var requestedSans = qx.bom.element.Dimension.getWidth(this.__requestedHelpers.sans);\n      var requestedSerif = qx.bom.element.Dimension.getWidth(this.__requestedHelpers.serif);\n\n      var cls = qx.bom.webfonts.Validator;\n      if (requestedSans !== cls.__defaultSizes.sans ||\n          requestedSerif !== cls.__defaultSizes.serif)\n      {\n        return true;\n      }\n      return false;\n    },\n\n\n    /**\n     * Creates the two helper elements styled with the font to be checked\n     *\n     * @return {Map} A map with the keys <pre>sans</pre> and <pre>serif</pre>\n     * and the created span elements as values\n     */\n    _getRequestedHelpers : function()\n    {\n      var fontsSans = [this.getFontFamily()].concat(qx.bom.webfonts.Validator.COMPARISON_FONTS.sans);\n      var fontsSerif = [this.getFontFamily()].concat(qx.bom.webfonts.Validator.COMPARISON_FONTS.serif);\n      return {\n        sans : this._getHelperElement(fontsSans, this.getComparisonString()),\n        serif : this._getHelperElement(fontsSerif, this.getComparisonString())\n      };\n    },\n\n\n    /**\n     * Creates a span element with the comparison text (either {@link #COMPARISON_STRING} or\n     * {@link #comparisonString}) and styled with the default CSS ({@link #HELPER_CSS}) plus\n     * the given font-family value and appends it to the DOM\n     *\n     * @param fontFamily {String} font-family string\n     * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n     * @return {Element} the created DOM element\n     */\n    _getHelperElement : function(fontFamily, comparisonString)\n    {\n      var styleMap = qx.lang.Object.clone(qx.bom.webfonts.Validator.HELPER_CSS);\n      if (fontFamily) {\n        if (styleMap.fontFamily) {\n          styleMap.fontFamily += \",\" + fontFamily.join(\",\");\n        }\n        else {\n          styleMap.fontFamily = fontFamily.join(\",\");\n        }\n      }\n\n      var elem = document.createElement(\"span\");\n      elem.innerHTML = comparisonString || qx.bom.webfonts.Validator.COMPARISON_STRING;\n      qx.bom.element.Style.setStyles(elem, styleMap);\n      document.body.appendChild(elem);\n      return elem;\n    },\n\n\n    // property apply\n    _applyFontFamily : function(value, old)\n    {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Creates the default helper elements and gets their widths\n     */\n    __init : function()\n    {\n      var cls = qx.bom.webfonts.Validator;\n      if (!cls.__defaultHelpers) {\n        cls.__defaultHelpers = {\n          sans : this._getHelperElement(cls.COMPARISON_FONTS.sans),\n          serif : this._getHelperElement(cls.COMPARISON_FONTS.serif)\n        };\n      }\n\n      cls.__defaultSizes = {\n        sans : qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.sans),\n        serif: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.serif)\n      };\n    },\n\n\n    /**\n     * Triggers helper element size comparison and fires a ({@link #changeStatus})\n     * event with the result.\n     */\n    __onTimerInterval : function()\n    {\n      if (this._isFontValid()) {\n        this.__checkTimer.stop();\n        this._reset();\n        this.fireDataEvent(\"changeStatus\", {\n          family : this.getFontFamily(),\n          valid : true\n        });\n      }\n      else\n      {\n        var now = new Date().getTime();\n        if (now - this.__checkStarted >= this.getTimeout()) {\n          this.__checkTimer.stop();\n          this._reset();\n          this.fireDataEvent(\"changeStatus\", {\n            family : this.getFontFamily(),\n            valid : false\n          });\n        }\n      }\n    }\n\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._reset();\n    this.__checkTimer.stop();\n    this.__checkTimer.removeListener(\"interval\", this.__onTimerInterval, this);\n    this._disposeObjects(\"__checkTimer\");\n  }\n});\n"
  ]
}