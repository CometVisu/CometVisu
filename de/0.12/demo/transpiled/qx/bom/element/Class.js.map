{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/bom/element/Class.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__splitter",
    "__trim",
    "add",
    "element",
    "name",
    "length",
    "classList",
    "has",
    "className",
    "core",
    "Environment",
    "get",
    "addClasses",
    "classes",
    "i",
    "keys",
    "result",
    "old",
    "split",
    "l",
    "push",
    "join",
    "getClass",
    "baseVal",
    "contains",
    "regexp",
    "RegExp",
    "test",
    "remove",
    "replace",
    "removeClasses",
    "reg",
    "oldName",
    "newName",
    "toggle",
    "undefined",
    "bom",
    "Class"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Base2\n     http://code.google.com/p/base2/\n     Version 0.9\n\n     Copyright:\n       (c) 2006-2007, Dean Edwards\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       * Dean Edwards\n\n************************************************************************ */\n\n\n/**\n * CSS class name support for HTML elements. Supports multiple class names\n * for each element. Can query and apply class names to HTML elements.\n */\nqx.Bootstrap.define(\"qx.bom.element.Class\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {RegExp} Regular expressions to split class names */\n    __splitter : /\\s+/g,\n\n    /** @type {RegExp} String trim regular expression. */\n    __trim : /^\\s+|\\s+$/g,\n\n    /**\n     * Adds a className to the given element\n     * If successfully added the given className will be returned\n     *\n     * @signature function(element, name)\n     * @param element {Element} The element to modify\n     * @param name {String} The class name to add\n     * @return {String} The added classname (if so)\n     */\n    add :{\n      \"native\" : function(element, name)\n      {\n        if (name.length > 0) {\n          element.classList.add(name);\n        }\n\n        return name;\n      },\n\n      \"default\" : function(element, name)\n      {\n        if (!this.has(element, name)) {\n          element.className += (element.className ? \" \" : \"\") + name;\n        }\n\n        return name;\n      }\n    }[qx.core.Environment.get(\"html.classlist\") ? \"native\" : \"default\"],\n\n\n    /**\n     * Adds multiple classes to the given element\n     *\n     * @signature function(element, classes)\n     * @param element {Element} DOM element to modify\n     * @param classes {String[]} List of classes to add.\n     * @return {String} The resulting class name which was applied\n     */\n    addClasses :{\n      \"native\" : function(element, classes)\n      {\n        for (var i=0; i<classes.length; i++) {\n          if (classes[i].length > 0) {\n            element.classList.add(classes[i]);\n          }\n        }\n        return element.className;\n      },\n\n      \"default\" : function(element, classes)\n      {\n        var keys = {};\n        var result;\n\n        var old = element.className;\n        if (old)\n        {\n          result = old.split(this.__splitter);\n          for (var i=0, l=result.length; i<l; i++) {\n            keys[result[i]] = true;\n          }\n\n          for (var i=0, l=classes.length; i<l; i++)\n          {\n            if (!keys[classes[i]]) {\n              result.push(classes[i]);\n            }\n          }\n        }\n        else {\n          result = classes;\n        }\n\n        return element.className = result.join(\" \");\n      }\n    }[qx.core.Environment.get(\"html.classlist\") ? \"native\" : \"default\"],\n\n\n    /**\n     * Gets the classname of the given element\n     *\n     * @param element {Element} The element to query\n     * @return {String} The retrieved classname\n     */\n    get : function(element) {\n      var className = element.className;\n      if(typeof className.split !== 'function')\n      {\n        if(typeof className === 'object')\n        {\n          if(qx.Bootstrap.getClass(className) == 'SVGAnimatedString')\n          {\n            className = className.baseVal;\n          }\n          else\n          {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              qx.log.Logger.warn(this, \"className for element \" + element + \" cannot be determined\");\n            }\n            className = '';\n          }\n        }\n        if(typeof className === 'undefined')\n        {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            qx.log.Logger.warn(this, \"className for element \" + element + \" is undefined\");\n          }\n          className = '';\n        }\n      }\n      return className;\n    },\n\n\n    /**\n     * Whether the given element has the given className.\n     *\n     * @signature function(element, name)\n     * @param element {Element} The DOM element to check\n     * @param name {String} The class name to check for\n     * @return {Boolean} true when the element has the given classname\n     */\n    has : {\n      \"native\" : function(element, name) {\n        return element.classList.contains(name);\n      },\n\n      \"default\" : function(element, name)\n      {\n        var regexp = new RegExp(\"(^|\\\\s)\" + name + \"(\\\\s|$)\");\n        return regexp.test(element.className);\n      }\n    }[qx.core.Environment.get(\"html.classlist\") ? \"native\" : \"default\"],\n\n\n    /**\n     * Removes a className from the given element\n     *\n     * @signature function(element, name)\n     * @param element {Element} The DOM element to modify\n     * @param name {String} The class name to remove\n     * @return {String} The removed class name\n     */\n    remove : {\n      \"native\" : function(element, name)\n      {\n        element.classList.remove(name);\n        return name;\n      },\n\n      \"default\" : function(element, name)\n      {\n        var regexp = new RegExp(\"(^|\\\\s)\" + name + \"(\\\\s|$)\");\n        element.className = element.className.replace(regexp, \"$2\");\n\n        return name;\n      }\n    }[qx.core.Environment.get(\"html.classlist\") ? \"native\" : \"default\"],\n\n\n    /**\n     * Removes multiple classes from the given element\n     *\n     * @signature function(element, classes)\n     * @param element {Element} DOM element to modify\n     * @param classes {String[]} List of classes to remove.\n     * @return {String} The resulting class name which was applied\n     */\n    removeClasses : {\n      \"native\" : function(element, classes)\n      {\n        for (var i=0; i<classes.length; i++) {\n          element.classList.remove(classes[i]);\n        }\n        return element.className;\n      },\n\n      \"default\" : function(element, classes)\n      {\n        var reg = new RegExp(\"\\\\b\" + classes.join(\"\\\\b|\\\\b\") + \"\\\\b\", \"g\");\n        return element.className = element.className.replace(reg, \"\").replace(this.__trim, \"\").replace(this.__splitter, \" \");\n      }\n    }[qx.core.Environment.get(\"html.classlist\") ? \"native\" : \"default\"],\n\n\n    /**\n     * Replaces the first given class name with the second one\n     *\n     * @param element {Element} The DOM element to modify\n     * @param oldName {String} The class name to remove\n     * @param newName {String} The class name to add\n     * @return {String} The added class name\n     */\n    replace : function(element, oldName, newName)\n    {\n      if (!this.has(element, oldName)) {\n        return \"\";\n      }\n\n      this.remove(element, oldName);\n      return this.add(element, newName);\n    },\n\n\n    /**\n     * Toggles a className of the given element\n     *\n     * @signature function(element, name, toggle)\n     * @param element {Element} The DOM element to modify\n     * @param name {String} The class name to toggle\n     * @param toggle {Boolean?null} Whether to switch class on/off. Without\n     *    the parameter an automatic toggling would happen.\n     * @return {String} The class name\n     */\n    toggle : {\n      \"native\" : function(element, name, toggle)\n      {\n        if (toggle === undefined) {\n          element.classList.toggle(name);\n        } else {\n          toggle ? this.add(element, name) : this.remove(element, name);\n        }\n        return name;\n      },\n\n      \"default\" : function(element, name, toggle)\n      {\n        if (toggle == null) {\n          toggle = !this.has(element, name);\n        }\n\n        toggle ? this.add(element, name) : this.remove(element, name);\n        return name;\n      }\n    }[qx.core.Environment.get(\"html.classlist\") ? \"native\" : \"default\"]\n  }\n});\n"
  ]
}