{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/external/qooxdoo/framework/source/class/qx/bom/element/Dimension.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getWidth",
    "element",
    "rect",
    "getBoundingClientRect",
    "Math",
    "round",
    "right",
    "left",
    "getHeight",
    "bottom",
    "top",
    "getSize",
    "width",
    "height",
    "__hiddenScrollbars",
    "visible",
    "hidden",
    "getContentWidth",
    "Style",
    "bom",
    "overflowX",
    "get",
    "paddingLeft",
    "parseInt",
    "paddingRight",
    "contentWidth",
    "clientWidth",
    "core",
    "Environment",
    "dom",
    "Node",
    "isBlockNode",
    "offsetHeight",
    "offsetWidth",
    "scrollWidth",
    "max",
    "getContentHeight",
    "overflowY",
    "paddingTop",
    "paddingBottom",
    "clientHeight",
    "scrollHeight",
    "getContentSize",
    "Dimension"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains support for calculating dimensions of HTML elements.\n *\n * We differ between the box (or border) size which is available via\n * {@link #getWidth} and {@link #getHeight} and the content or scroll\n * sizes which are available via {@link #getContentWidth} and\n * {@link #getContentHeight}.\n */\nqx.Bootstrap.define(\"qx.bom.element.Dimension\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Returns the rendered width of the given element.\n     *\n     * This is the visible width of the object, which need not to be identical\n     * to the width configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} width of the element\n     */\n    getWidth: function(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.right - rect.left);\n    },\n\n\n    /**\n     * Returns the rendered height of the given element.\n     *\n     * This is the visible height of the object, which need not to be identical\n     * to the height configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} height of the element\n     */\n    getHeight: function(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.bottom - rect.top);\n    },\n\n\n    /**\n     * Returns the rendered size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the width and height of the element\n     */\n    getSize : function(element)\n    {\n      return {\n        width: this.getWidth(element),\n        height: this.getHeight(element)\n      };\n    },\n\n\n    /** @type {Map} Contains all overflow values where scrollbars are invisible */\n    __hiddenScrollbars :\n    {\n      visible : true,\n      hidden : true\n    },\n\n\n    /**\n     * Returns the content width.\n     *\n     * The content width is basically the maximum\n     * width used or the maximum width which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content width returned\n     * may be larger than the box width returned via {@link #getWidth}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content width\n     */\n    getContentWidth : function(element)\n    {\n      var Style = qx.bom.element.Style;\n\n      var overflowX = qx.bom.element.Style.get(element, \"overflowX\");\n      var paddingLeft = parseInt(Style.get(element, \"paddingLeft\")||\"0px\", 10);\n      var paddingRight = parseInt(Style.get(element, \"paddingRight\")||\"0px\", 10);\n\n      if (this.__hiddenScrollbars[overflowX])\n      {\n        var contentWidth = element.clientWidth;\n\n        if ((qx.core.Environment.get(\"engine.name\") == \"opera\") ||\n          qx.dom.Node.isBlockNode(element))\n        {\n          contentWidth = contentWidth - paddingLeft - paddingRight;\n        }\n\n        // IE seems to return 0 on clientWidth if the element is 0px\n        // in height so we use the offsetWidth instead\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          if (contentWidth === 0 && element.offsetHeight === 0) {\n            return element.offsetWidth;\n          }\n        }\n\n        return contentWidth;\n      }\n      else\n      {\n        if (element.clientWidth >= element.scrollWidth)\n        {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return Math.max(element.clientWidth, element.scrollWidth) - paddingLeft - paddingRight;\n        }\n        else\n        {\n          // Scrollbars visible and needed. We just remove the left padding,\n          // as the right padding is not respected in rendering.\n          var width = element.scrollWidth - paddingLeft;\n\n          // IE renders the paddingRight as well with scrollbars on\n          if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n            width -= paddingRight;\n          }\n\n          return width;\n        }\n      }\n    },\n\n\n    /**\n     * Returns the content height.\n     *\n     * The content height is basically the maximum\n     * height used or the maximum height which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content height returned\n     * may be larger than the box height returned via {@link #getHeight}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content height\n     */\n    getContentHeight : function(element)\n    {\n      var Style = qx.bom.element.Style;\n\n      var overflowY = qx.bom.element.Style.get(element, \"overflowY\");\n      var paddingTop = parseInt(Style.get(element, \"paddingTop\")||\"0px\", 10);\n      var paddingBottom = parseInt(Style.get(element, \"paddingBottom\")||\"0px\", 10);\n\n      if (this.__hiddenScrollbars[overflowY])\n      {\n        return element.clientHeight - paddingTop - paddingBottom;\n      }\n      else\n      {\n        if (element.clientHeight >= element.scrollHeight)\n        {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return Math.max(element.clientHeight, element.scrollHeight) - paddingTop - paddingBottom;\n        }\n        else\n        {\n          // Scrollbars visible and needed. We just remove the top padding,\n          // as the bottom padding is not respected in rendering.\n          return element.scrollHeight - paddingTop;\n        }\n      }\n    },\n\n\n    /**\n     * Returns the rendered content size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the content width and height of the element\n     */\n    getContentSize : function(element)\n    {\n      return {\n        width: this.getContentWidth(element),\n        height: this.getContentHeight(element)\n      };\n    }\n  }\n});\n"
  ]
}