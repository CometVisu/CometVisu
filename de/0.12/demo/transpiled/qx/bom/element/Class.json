{
  "className": "qx.bom.element.Class",
  "packageName": "qx.bom.element",
  "name": "Class",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 41,
        "column": 0
      },
      "end": {
        "line": 293,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2008 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Sebastian Werner (wpbasti)\n   ======================================================================\n   This class contains code based on the following work:\n Base2\n     http://code.google.com/p/base2/\n     Version 0.9\n     Copyright:\n       (c) 2006-2007, Dean Edwards\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n     Authors:\n Dean Edwards\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>CSS class name support for HTML elements. Supports multiple class names\n for each element. Can query and apply class names to HTML elements.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__splitter": {
      "location": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 23
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{RegExp} Regular expressions to split class names"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__trim": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 55,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{RegExp} String trim regular expression."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "add": {
      "location": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 71
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a className to the given element\n If successfully added the given className will be returned</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The element to modify",
            "paramName": "element",
            "description": " The element to modify",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "name {String} The class name to add",
            "paramName": "name",
            "description": " The class name to add",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The added classname (if so)",
            "type": "String",
            "description": " The added classname (if so)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "addClasses": {
      "location": {
        "start": {
          "line": 95,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 71
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds multiple classes to the given element</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, classes)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to modify",
            "paramName": "element",
            "description": " DOM element to modify",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "classes {String[]} List of classes to add.",
            "paramName": "classes",
            "description": " List of classes to add.",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The resulting class name which was applied",
            "type": "String",
            "description": " The resulting class name which was applied"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "get": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the classname of the given element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The element to query",
            "paramName": "element",
            "description": " The element to query",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The retrieved classname",
            "type": "String",
            "description": " The retrieved classname"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "has": {
      "location": {
        "start": {
          "line": 179,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 71
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given element has the given className.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to check",
            "paramName": "element",
            "description": " The DOM element to check",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "name {String} The class name to check for",
            "paramName": "name",
            "description": " The class name to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the element has the given classname",
            "type": "Boolean",
            "description": " true when the element has the given classname"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 71
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a className from the given element</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to modify",
            "paramName": "element",
            "description": " The DOM element to modify",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "name {String} The class name to remove",
            "paramName": "name",
            "description": " The class name to remove",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The removed class name",
            "type": "String",
            "description": " The removed class name"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "removeClasses": {
      "location": {
        "start": {
          "line": 225,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 71
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes multiple classes from the given element</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, classes)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to modify",
            "paramName": "element",
            "description": " DOM element to modify",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "classes {String[]} List of classes to remove.",
            "paramName": "classes",
            "description": " List of classes to remove.",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The resulting class name which was applied",
            "type": "String",
            "description": " The resulting class name which was applied"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "replace": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 258,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces the first given class name with the second one</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to modify",
            "paramName": "element",
            "description": " The DOM element to modify",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "oldName {String} The class name to remove",
            "paramName": "oldName",
            "description": " The class name to remove",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "newName {String} The class name to add",
            "paramName": "newName",
            "description": " The class name to add",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The added class name",
            "type": "String",
            "description": " The added class name"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toggle": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 71
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Toggles a className of the given element</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, name, toggle)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to modify",
            "paramName": "element",
            "description": " The DOM element to modify",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "name {String} The class name to toggle",
            "paramName": "name",
            "description": " The class name to toggle",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "toggle {Boolean?null} Whether to switch class on/off. Without\n    the parameter an automatic toggling would happen.",
            "paramName": "toggle",
            "description": " Whether to switch class on/off. Without\n    the parameter an automatic toggling would happen.",
            "optional": true,
            "defaultValue": "null",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The class name",
            "type": "String",
            "description": " The class name"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "descendants": []
}