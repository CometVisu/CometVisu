{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/request/SimpleXhr.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "event",
    "Emitter",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "url",
    "method",
    "undefined",
    "setUrl",
    "useCaching",
    "setMethod",
    "_transport",
    "_registerTransportListener",
    "_createTransport",
    "ObjectRegistry",
    "register",
    "__requestHeaders",
    "__parser",
    "_createResponseParser",
    "members",
    "setRequestHeader",
    "key",
    "value",
    "getRequestHeader",
    "getResponseHeader",
    "header",
    "getAllResponseHeaders",
    "lang",
    "Type",
    "isString",
    "__url",
    "getUrl",
    "util",
    "Request",
    "isMethod",
    "__method",
    "getMethod",
    "setRequestData",
    "data",
    "isObject",
    "indexOf",
    "getClass",
    "__requestData",
    "getRequestData",
    "getResponse",
    "__response",
    "responseXML",
    "responseText",
    "getTransport",
    "setParser",
    "parser",
    "setTimeout",
    "millis",
    "isNumber",
    "__timeout",
    "getTimeout",
    "isBoolean",
    "__cache",
    "isCaching",
    "isDone",
    "readyState",
    "bom",
    "request",
    "Xhr",
    "DONE",
    "toHashCode",
    "$$hash",
    "isDisposed",
    "__disposed",
    "send",
    "curTimeout",
    "hasRequestData",
    "hasCacheControlHeader",
    "hasOwnProperty",
    "isBodyForMethodAllowed",
    "methodAllowsRequestBody",
    "curContentType",
    "serializedData",
    "_serializeData",
    "Uri",
    "appendParamsToUrl",
    "nocache",
    "Date",
    "valueOf",
    "timeout",
    "open",
    "abort",
    "dispose",
    "transport",
    "onreadystatechange",
    "Function",
    "bind",
    "_onReadyStateChange",
    "onloadend",
    "_onLoadEnd",
    "ontimeout",
    "_onTimeout",
    "onerror",
    "_onError",
    "onabort",
    "_onAbort",
    "onprogress",
    "_onProgress",
    "ResponseParser",
    "_setResponse",
    "response",
    "contentType",
    "isPost",
    "isJson",
    "test",
    "isArray",
    "Json",
    "stringify",
    "toParameter",
    "addListenerOnce",
    "name",
    "listener",
    "ctx",
    "once",
    "addListener",
    "_emitter",
    "on",
    "Environment",
    "get",
    "debug",
    "__onReadyStateDone",
    "status",
    "isSuccessful",
    "parse",
    "emit",
    "e",
    "SimpleXhr"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * This class is internal because it's tailored to {@link qx.io.rest.Resource}\n * which needs more functionality than {@link qx.bom.request.Xhr} provides.\n * The usage of {@link qx.io.request.Xhr} isn't possible either due to it's qx.Class nature.\n *\n * For alternatives to this class have a look at:\n *\n * * \"qx.bom.request.Xhr\" (low level, cross-browser XHR abstraction compatible with spec)\n * * \"qx.io.request.Xhr\" (high level XHR abstraction)\n *\n * A wrapper of {@link qx.bom.request.Xhr} which offers:\n *\n * * set/get HTTP method, URL, request data and headers\n * * retrieve the parsed response as object (content-type recognition)\n * * more fine-grained events such as success, fail, ...\n * * supports hash code for request identification\n *\n * It does *not* comply the interface defined by {@link qx.bom.request.IRequest}.\n *\n * <div class=\"desktop\">\n * Example:\n *\n * <pre class=\"javascript\">\n *  var req = new qx.bom.request.SimpleXhr(\"/some/path/file.json\");\n *  req.setRequestData({\"a\":\"b\"});\n *  req.once(\"success\", function successHandler() {\n *    var response = req.getResponse();\n *  }, this);\n *  req.once(\"fail\", function successHandler() {\n *    var response = req.getResponse();\n *  }, this);\n *  req.send();\n * </pre>\n * </div>\n *\n * @internal\n */\nqx.Bootstrap.define(\"qx.bom.request.SimpleXhr\",\n{\n\n  extend: qx.event.Emitter,\n  implement: [ qx.core.IDisposable ],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   * @param method {String?\"GET\"} The HTTP method.\n   */\n  construct: function(url, method) {\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.useCaching(true);\n    this.setMethod((method !== undefined) ? method : \"GET\");\n    this._transport = this._registerTransportListener(this._createTransport());\n\n    qx.core.ObjectRegistry.register(this);\n\n    this.__requestHeaders = {};\n    this.__parser = this._createResponseParser();\n  },\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets a request header.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setRequestHeader: function(key, value) {\n      this.__requestHeaders[key] = value;\n      return this;\n    },\n\n    /**\n     * Gets a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader: function(key) {\n      return this.__requestHeaders[key];\n    },\n\n\n    /**\n     * Returns a single response header\n     *\n     * @param header {String} Name of the header to get.\n     * @return {String} Response header\n     */\n    getResponseHeader: function(header) {\n      return this._transport.getResponseHeader(header);\n    },\n\n\n    /**\n     * Returns all response headers\n     * @return {String} String of response headers\n     */\n    getAllResponseHeaders: function() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Sets the URL.\n     *\n     * @param url {String} URL to be requested.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setUrl: function(url) {\n      if (qx.lang.Type.isString(url)) {\n        this.__url = url;\n      }\n      return this;\n    },\n\n    /**\n     * Gets the URL.\n     *\n     * @return {String} URL to be requested.\n     */\n    getUrl: function() {\n      return this.__url;\n    },\n\n    /**\n     * Sets the HTTP-Method.\n     *\n     * @param method {String} The method.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setMethod: function(method) {\n      if (qx.util.Request.isMethod(method)) {\n        this.__method = method;\n      }\n      return this;\n    },\n\n    /**\n     * Gets the HTTP-Method.\n     *\n     * @return {String} The method.\n     */\n    getMethod: function() {\n      return this.__method;\n    },\n\n    /**\n     * Sets the request data to be send as part of the request.\n     *\n     * The request data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * @param data {String|Object} The request data.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setRequestData: function(data) {\n      if (qx.lang.Type.isString(data) || qx.lang.Type.isObject(data) ||\n         [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(qx.lang.Type.getClass(data)) !== -1) {\n        this.__requestData = data;\n      }\n      return this;\n    },\n\n    /**\n     * Gets the request data.\n     *\n     * @return {String} The request data.\n     */\n    getRequestData: function() {\n      return this.__requestData;\n    },\n\n    /**\n     * Gets parsed response.\n     *\n     * If problems occurred an empty string (\"\") is more likely to be returned (instead of null).\n     *\n     * @return {String|null} The parsed response of the request.\n     */\n    getResponse: function() {\n      if (this.__response !== null) {\n        return this.__response;\n      } else {\n        return (this._transport.responseXML !== null) ? this._transport.responseXML : this._transport.responseText;\n      }\n\n      return null;\n    },\n\n    /**\n     * Gets low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n     // This method mainly exists so that some methods found in the\n     // low-level transport can be deliberately omitted here,\n     // but still be accessed should it be absolutely necessary.\n     //\n     // Valid use cases include to query the transport’s responseXML\n     // property if performance is critical and any extra parsing\n     // should be avoided at all costs.\n     //\n    getTransport: function() {\n      return this._transport;\n    },\n\n    /**\n     * Sets (i.e. override) the parser for the response parsing.\n     *\n     * @see qx.util.ResponseParser#setParser\n     *\n     * @param parser {String|Function}\n     * @return {Function} The parser function\n     */\n    setParser: function(parser) {\n      return this.__parser.setParser(parser);\n    },\n\n    /**\n     * Sets the timout limit in milliseconds.\n     *\n     * @param millis {Number} limit in milliseconds.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setTimeout: function(millis) {\n      if (qx.lang.Type.isNumber(millis)) {\n        this.__timeout = millis;\n      }\n      return this;\n    },\n\n    /**\n     * The current timeout in milliseconds.\n     *\n     * @return {Number} The current timeout in milliseconds.\n     */\n    getTimeout: function() {\n      return this.__timeout;\n    },\n\n    /**\n     * Whether to allow request to be answered from cache.\n     *\n     * Allowed values:\n     *\n     * * <code>true</code>: Allow caching (Default)\n     * * <code>false</code>: Prohibit caching. Appends 'nocache' parameter to URL.\n     *\n     * Consider setting a Cache-Control header instead. A request’s Cache-Control\n     * header may contain a number of directives controlling the behavior of\n     * any caches in between client and origin server and allows therefore a more\n     * fine grained control over caching. If such a header is provided, the setting\n     * of setCache() will be ignored.\n     *\n     * * <code>\"no-cache\"</code>: Force caches to submit request in order to\n     * validate the freshness of the representation. Note that the requested\n     * resource may still be served from cache if the representation is\n     * considered fresh. Use this directive to ensure freshness but save\n     * bandwidth when possible.\n     * * <code>\"no-store\"</code>: Do not keep a copy of the representation under\n     * any conditions.\n     *\n     * See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\n     * Caching tutorial</a> for an excellent introduction to Caching in general.\n     * Refer to the corresponding section in the\n     * <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\n     * HTTP 1.1 specification</a> for more details and advanced directives.\n     *\n     * It is recommended to choose an appropriate Cache-Control directive rather\n     * than prohibit caching using the nocache parameter.\n     *\n     * @param value {Boolean}\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    useCaching: function(value) {\n      if (qx.lang.Type.isBoolean(value)) {\n        this.__cache = value;\n      }\n      return this;\n    },\n\n    /**\n     * Whether requests are cached.\n     *\n     * @return {Boolean} Whether requests are cached.\n     */\n    isCaching: function() {\n      return this.__cache;\n    },\n\n    /**\n     * Whether request completed (is done).\n\n     * @return {Boolean} Whether request is completed.\n     */\n    isDone: function() {\n      return (this._transport.readyState === qx.bom.request.Xhr.DONE);\n    },\n\n    /**\n     * Returns unique hash code of object.\n     *\n     * @return {Integer} unique hash code of the object\n     */\n    toHashCode : function() {\n      return this.$$hash;\n    },\n\n    /**\n     * Returns true if the object is disposed.\n     *\n     * @return {Boolean} Whether the object has been disposed\n     */\n    isDisposed: function() {\n      return !!this.__disposed;\n    },\n\n    /**\n     * Sends request.\n     *\n     * Relies on set before:\n     * * a HTTP method\n     * * an URL\n     * * optional request headers\n     * * optional request data\n     */\n    send: function() {\n      var curTimeout = this.getTimeout(),\n          hasRequestData = (this.getRequestData() !== null),\n          hasCacheControlHeader = this.__requestHeaders.hasOwnProperty(\"Cache-Control\"),\n          isBodyForMethodAllowed = qx.util.Request.methodAllowsRequestBody(this.getMethod()),\n          curContentType = this.getRequestHeader(\"Content-Type\"),\n          serializedData = this._serializeData(this.getRequestData(), curContentType);\n\n      // add GET params if needed\n      if (this.getMethod() === \"GET\" && hasRequestData) {\n        this.setUrl(qx.util.Uri.appendParamsToUrl(this.getUrl(), serializedData));\n      }\n\n      // cache prevention\n      if (this.isCaching() === false && !hasCacheControlHeader) {\n        // Make sure URL cannot be served from cache and new request is made\n        this.setUrl(qx.util.Uri.appendParamsToUrl(this.getUrl(), {nocache: new Date().valueOf()}));\n      }\n\n      // set timeout\n      if (curTimeout) {\n        this._transport.timeout = curTimeout;\n      }\n\n      // initialize request\n      this._transport.open(this.getMethod(), this.getUrl(), true);\n\n      // set all previously stored headers on initialized request\n      for (var key in this.__requestHeaders) {\n        this._transport.setRequestHeader(key, this.__requestHeaders[key]);\n      }\n\n      // send\n      if (!isBodyForMethodAllowed) {\n        // GET & HEAD\n        this._transport.send();\n      } else {\n        // POST & PUT ...\n        if (typeof curContentType === \"undefined\" && [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(qx.Bootstrap.getClass(serializedData)) === -1) {\n          // by default, set content-type urlencoded for requests with body\n          this._transport.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n\n        this._transport.send(serializedData);\n      }\n    },\n\n    /**\n     * Aborts request.\n     *\n     * Cancels any network activity.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    abort: function() {\n      this._transport.abort();\n      return this;\n    },\n\n    /**\n     * Disposes object and wrapped transport.\n     * @return {Boolean} <code>true</code> if the object was successfully disposed\n     */\n    dispose: function() {\n      if (this._transport.dispose()) {\n        this.__parser = null;\n        this.__disposed = true;\n        return true;\n      }\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Creates XHR transport.\n     *\n     * May be overridden to change type of resource.\n     * @return {qx.bom.request.IRequest} Transport.\n     */\n    _createTransport: function() {\n      return new qx.bom.request.Xhr();\n    },\n\n    /**\n     * Registers common listeners on given transport.\n     *\n     * @param transport {qx.bom.request.IRequest} Transport.\n     * @return {qx.bom.request.IRequest} Transport.\n     */\n    _registerTransportListener: function(transport) {\n      transport.onreadystatechange = qx.lang.Function.bind(this._onReadyStateChange, this);\n      transport.onloadend = qx.lang.Function.bind(this._onLoadEnd, this);\n      transport.ontimeout = qx.lang.Function.bind(this._onTimeout, this);\n      transport.onerror = qx.lang.Function.bind(this._onError, this);\n      transport.onabort = qx.lang.Function.bind(this._onAbort, this);\n      transport.onprogress = qx.lang.Function.bind(this._onProgress, this);\n      return transport;\n    },\n\n    /**\n     * Creates response parser.\n     *\n     * @return {qx.util.ResponseParser} parser.\n     */\n    _createResponseParser: function() {\n        return new qx.util.ResponseParser();\n    },\n\n    /**\n     * Sets the response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse: function(response) {\n      this.__response = response;\n    },\n\n    /**\n     * Serializes data.\n     *\n     * @param data {String|Map} Data to serialize.\n     * @param contentType {String?} Content-Type which influences the serialization.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData: function(data, contentType) {\n      var isPost = this.getMethod() === \"POST\",\n          isJson = (/application\\/.*\\+?json/).test(contentType);\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (isJson && (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      if ([\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(qx.Bootstrap.getClass(data)) !== -1) {\n        return data;\n      }\n\n      return null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * {Array} Request headers.\n     */\n    __requestHeaders: null,\n    /**\n     * {Object} Request data (i.e. body).\n     */\n    __requestData: null,\n    /**\n     * {String} HTTP method to use for request.\n     */\n    __method: \"\",\n    /**\n     * {String} Requested URL.\n     */\n    __url: \"\",\n    /**\n     * {Object} Response data.\n     */\n    __response: null,\n    /**\n     * {Function} Parser.\n     */\n    __parser: null,\n    /**\n     * {Boolean} Whether caching will be enabled.\n     */\n    __cache: null,\n    /**\n     * {Number} The current timeout in milliseconds.\n     */\n    __timeout: null,\n    /**\n     * {Boolean} Whether object has been disposed.\n     */\n    __disposed: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an event listener for the given event name which is executed only once.\n     *\n     * @param name {String} The name of the event to listen to.\n     * @param listener {Function} The function to execute when the event is fired\n     * @param ctx {var?} The context of the listener.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    addListenerOnce: function(name, listener, ctx) {\n      this.once(name, listener, ctx);\n      return this;\n    },\n\n    /**\n     * Adds an event listener for the given event name.\n     *\n     * @param name {String} The name of the event to listen to.\n     * @param listener {Function} The function to execute when the event is fired\n     * @param ctx {var?} The context of the listener.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    addListener: function(name, listener, ctx) {\n      this._transport._emitter.on(name, listener, ctx);\n      return this;\n    },\n\n    /**\n     * Handles \"readyStateChange\" event.\n     */\n    _onReadyStateChange: function() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        qx.Bootstrap.debug(\"Fire readyState: \" + this._transport.readyState);\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone: function() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        qx.Bootstrap.debug(\"Request completed with HTTP status: \" + this._transport.status);\n      }\n\n      var response = this._transport.responseText;\n      var contentType = this._transport.getResponseHeader(\"Content-Type\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this._transport.status)) {\n\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          qx.Bootstrap.debug(\"Response is of type: '\" + contentType + \"'\");\n        }\n\n        this._setResponse(this.__parser.parse(response, contentType));\n\n        this.emit(\"success\");\n\n      // Erroneous HTTP status\n      } else {\n\n        try {\n          this._setResponse(this.__parser.parse(response, contentType));\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this._transport.status !== 0) {\n          this.emit(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handles \"loadEnd\" event.\n     */\n    _onLoadEnd: function() {\n      this.emit(\"loadEnd\");\n    },\n\n    /**\n     * Handles \"abort\" event.\n     */\n    _onAbort: function() {\n      this.emit(\"abort\");\n    },\n\n    /**\n     * Handles \"timeout\" event.\n     */\n    _onTimeout: function() {\n      this.emit(\"timeout\");\n\n      // A network error failure\n      this.emit(\"fail\");\n    },\n\n    /**\n     * Handles \"error\" event.\n     */\n    _onError: function() {\n      this.emit(\"error\");\n\n      // A network error failure\n      this.emit(\"fail\");\n    },\n\n    /**\n     * Handles \"error\" event.\n     */\n    _onProgress: function() {\n      this.emit(\"progress\");\n    }\n\n  }\n});\n"
  ]
}