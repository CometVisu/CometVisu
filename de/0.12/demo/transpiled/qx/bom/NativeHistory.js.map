{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/NativeHistory.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "bom",
    "History",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "__attachListeners",
    "members",
    "__checkOnHashChange",
    "SUPPORTS_HASH_CHANGE_EVENT",
    "boundFunc",
    "lang",
    "Function",
    "bind",
    "__onHashChange",
    "event",
    "GlobalError",
    "observeMethod",
    "Event",
    "addNativeListener",
    "window",
    "Idle",
    "getInstance",
    "addListener",
    "__detatchListeners",
    "removeNativeListener",
    "removeListener",
    "currentState",
    "_readState",
    "Type",
    "isString",
    "getState",
    "_onHistoryLoad",
    "_decode",
    "_getHash",
    "_writeState",
    "Environment",
    "select",
    "state",
    "Timer",
    "once",
    "_setHash",
    "_encode",
    "destruct",
    "NativeHistory"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Default history manager implementation. Either polls for URL fragment\n * identifier (hash) changes or uses the native \"hashchange\" event.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @internal\n */\nqx.Class.define(\"qx.bom.NativeHistory\",\n{\n  extend : qx.bom.History,\n  implement: [ qx.core.IDisposable ],\n\n  construct : function()\n  {\n    this.base(arguments);\n    this.__attachListeners();\n  },\n\n\n  members :\n  {\n    __checkOnHashChange : null,\n\n\n    /**\n     * Attach hash change listeners\n     */\n    __attachListeners : function()\n    {\n      if (qx.bom.History.SUPPORTS_HASH_CHANGE_EVENT)\n      {\n        var boundFunc = qx.lang.Function.bind(this.__onHashChange, this);\n        this.__checkOnHashChange = qx.event.GlobalError.observeMethod(boundFunc);\n        qx.bom.Event.addNativeListener(window, \"hashchange\", this.__checkOnHashChange);\n      }\n      else\n      {\n        qx.event.Idle.getInstance().addListener(\"interval\", this.__onHashChange, this);\n      }\n    },\n\n\n    /**\n     * Remove hash change listeners\n     */\n    __detatchListeners : function()\n    {\n      if (qx.bom.History.SUPPORTS_HASH_CHANGE_EVENT) {\n        qx.bom.Event.removeNativeListener(window, \"hashchange\", this.__checkOnHashChange);\n      } else {\n        qx.event.Idle.getInstance().removeListener(\"interval\", this.__onHashChange, this);\n      }\n    },\n\n\n    /**\n     * hash change event handler\n     */\n    __onHashChange : function()\n    {\n      var currentState = this._readState();\n\n      if (qx.lang.Type.isString(currentState) && currentState != this.getState()) {\n        this._onHistoryLoad(currentState);\n      }\n    },\n\n\n    /**\n     * Browser dependent function to read the current state of the history\n     *\n     * @return {String} current state of the browser history\n     */\n    _readState : function() {\n      return this._decode(this._getHash());\n    },\n\n\n    /**\n     * Save a state into the browser history.\n     *\n     * @param state {String} state to save\n     */\n    _writeState : qx.core.Environment.select(\"engine.name\",\n    {\n      \"opera\" : function(state)\n      {\n        qx.event.Timer.once(function()\n        {\n          this._setHash(this._encode(state));\n        }, this, 0);\n      },\n\n      \"default\" : function (state) {\n        this._setHash(this._encode(state));\n      }\n    })\n  },\n\n\n  destruct : function() {\n    this.__detatchListeners();\n  }\n});\n"
  ]
}