{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/Blocker.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__init",
    "members",
    "__iframeElement",
    "__blockerElement",
    "__blockedElement",
    "__isActive",
    "__defaultZIndex",
    "__defaultBlockerOpacity",
    "__defaultBlockerColor",
    "block",
    "element",
    "event",
    "Registration",
    "addListener",
    "window",
    "__onResize",
    "styles",
    "__calculateStyles",
    "__styleAndInsertBlocker",
    "unblock",
    "__removeBlocker",
    "removeListener",
    "isBlocked",
    "getBlockerElement",
    "setBlockerColor",
    "color",
    "bom",
    "Style",
    "set",
    "getBlockerColor",
    "get",
    "setBlockerOpacity",
    "opacity",
    "Opacity",
    "getBlockerOpacity",
    "setBlockerZIndex",
    "zIndex",
    "getBlockerZIndex",
    "__setupBlockerElement",
    "Environment",
    "__setupIframeElement",
    "dom",
    "Element",
    "create",
    "setStyles",
    "display",
    "backgroundColor",
    "Iframe",
    "Attribute",
    "position",
    "__isWholeDocumentBlockTarget",
    "left",
    "top",
    "right",
    "bottom",
    "width",
    "Document",
    "getWidth",
    "height",
    "getHeight",
    "Dimension",
    "Location",
    "getLeft",
    "getTop",
    "target",
    "document",
    "body",
    "insertEnd",
    "remove",
    "e",
    "__resizeBlocker",
    "Timer",
    "once",
    "dimension",
    "Node",
    "isWindow",
    "isDocument",
    "Blocker"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Alexander Steitz (aback)\n\n************************************************************************ */\n\n/**\n * This class provides an unified blocker which offers three different modes.\n *\n * *Blocker modes*\n *\n * * block the whole document\n * * block the content of an element\n * * act as an underlying blocker for an element to shim native controls\n *\n *\n * The third mode is mainly necessary for IE browsers.\n *\n *\n * The first mode is the easiest to use. Just use the {@link #block} method\n * without a parameter.\n * The second and third mode are taking a DOM element as parameter for the\n * {@link #block} method. Additionally one need to setup the \"zIndex\" value\n * correctly to get the right results (see at {@link #setBlockerZIndex} method).\n *\n *\n * The zIndex value defaults to the value \"10000\". Either you set an appropriate\n * value for the blocker zIndex or for your DOM element to block. If you want\n * to block the content of your DOM element it has to have at least the zIndex\n * value of \"10001\" with default blocker values.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.bom.Element)\n * @require(qx.bom.Iframe)\n */\nqx.Class.define(\"qx.bom.Blocker\",\n{\n  extend : qx.core.Object,\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__init();\n  },\n\n\n  members :\n  {\n    __iframeElement : null,\n    __blockerElement : null,\n    __blockedElement : null,\n    __isActive : false,\n    __defaultZIndex: 10000,\n    __defaultBlockerOpacity: 0,\n    __defaultBlockerColor: \"transparent\",\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Blocks the whole document (if no parameter is given) or acts as an\n     * underlying blocker for native controls.\n     *\n     * @param element {element?null} If no element is given the whole document is blocked.\n     */\n    block : function(element)\n    {\n      if (!this.__isActive)\n      {\n        qx.event.Registration.addListener(window, \"resize\", this.__onResize, this);\n        \n        this.__blockedElement = element;\n\n        var styles = this.__calculateStyles();\n        this.__styleAndInsertBlocker(styles);\n        this.__isActive = true;\n      }\n    },\n\n\n    /**\n     * Releases the blocking\n     */\n    unblock : function()\n    {\n      if (this.__isActive)\n      {\n        this.__removeBlocker();\n        qx.event.Registration.removeListener(window, \"resize\", this.__onResize, this);\n        this.__isActive = false;\n      }\n    },\n\n\n    /**\n     * Whether the blocker is already active.\n     *\n     * @return {Boolean} Blocker active\n     */\n    isBlocked : function() {\n      return this.__isActive;\n    },\n\n\n    /**\n     * Returns the blocker element. Useful if the element should be animated.\n     *\n     * @return {Element} DOM element\n     */\n    getBlockerElement : function() {\n      return this.__blockerElement;\n    },\n\n\n    /**\n     * Sets the color of the blocker element. Be sure to set also a suitable\n     * opacity value to get the desired result.\n     *\n     * @param color {String} CSS color value\n     * @see #setBlockerOpacity\n     */\n    setBlockerColor : function(color) {\n      qx.bom.element.Style.set(this.__blockerElement, \"backgroundColor\", color);\n    },\n\n\n    /**\n     * Returns the current blocker color.\n     *\n     * @return {String} CSS color value\n     */\n    getBlockerColor : function() {\n      return qx.bom.element.Style.get(this.__blockerElement, \"backgroundColor\");\n    },\n\n\n    /**\n     * Sets the blocker opacity. Be sure to set also a suitable blocker color\n     * value to get the desired result.\n     *\n     * @param opacity {String} CSS opacity value\n     * @see #setBlockerColor\n     */\n    setBlockerOpacity : function(opacity) {\n      qx.bom.element.Opacity.set(this.__blockerElement, opacity);\n    },\n\n\n    /**\n     * Returns the blocker opacity value.\n     *\n     * @return {Integer} CSS opacity value\n     */\n    getBlockerOpacity : function() {\n      return qx.bom.element.Opacity.get(this.__blockerElement);\n    },\n\n\n    /**\n     * Set the zIndex of the blocker element. For most use cases you do not need\n     * to manipulate this value.\n     *\n     * @param zIndex {Integer} CSS zIndex value\n     */\n    setBlockerZIndex : function(zIndex) {\n      qx.bom.element.Style.set(this.__blockerElement, \"zIndex\", zIndex);\n    },\n\n\n    /**\n     * Returns the blocker zIndex value\n     *\n     * @return {Integer} CSS zIndex value\n     */\n    getBlockerZIndex : function() {\n      return qx.bom.element.Style.get(this.__blockerElement, \"zIndex\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Setups the elements and registers a \"resize\" event.\n     */\n    __init : function()\n    {\n      this.__setupBlockerElement();\n\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\")) {\n        this.__setupIframeElement();\n      }\n    },\n\n\n    /**\n     * Create blocker element and set initial styles.\n     */\n    __setupBlockerElement : function()\n    {\n      this.__blockerElement = qx.dom.Element.create(\"div\");\n      qx.bom.element.Style.setStyles(this.__blockerElement,\n      {\n        display: \"block\",\n        opacity: this.__defaultBlockerOpacity,\n        backgroundColor: this.__defaultBlockerColor\n      });\n      this.setBlockerZIndex(this.__defaultZIndex);\n    },\n\n\n    /**\n     * Create iframe blocker element and set initial styles.\n     *\n     * Needed to block native form elements\n     * // see: http://www.macridesweb.com/oltest/IframeShim.html\n     */\n    __setupIframeElement : function()\n    {\n      this.__iframeElement = qx.bom.Iframe.create();\n\n      qx.bom.element.Attribute.set(this.__iframeElement, \"allowTransparency\", false);\n      qx.bom.element.Attribute.set(this.__iframeElement, \"src\", \"javascript:false;\");\n      qx.bom.element.Style.setStyles(this.__iframeElement,\n      {\n        display: \"block\",\n        opacity: this.__defaultBlockerOpacity\n      });\n    },\n\n\n    /**\n     * Calculates the necessary styles for the blocker element.\n     * Either the values of the document or of the element to block are used.\n     *\n     * @return {Map} Object with necessary style infos\n     */\n    __calculateStyles : function()\n    {\n      var styles = { position: \"absolute\" };\n\n      if (this.__isWholeDocumentBlockTarget())\n      {\n        styles.left = \"0px\";\n        styles.top = \"0px\";\n        styles.right = null;\n        styles.bottom = null;\n        styles.width = qx.bom.Document.getWidth() + \"px\";\n        styles.height = qx.bom.Document.getHeight() + \"px\";\n      }\n      else\n      {\n        styles.width = qx.bom.element.Dimension.getWidth(this.__blockedElement) + \"px\";\n        styles.height = qx.bom.element.Dimension.getHeight(this.__blockedElement) + \"px\";\n        styles.left = qx.bom.element.Location.getLeft(this.__blockedElement) + \"px\";\n        styles.top = qx.bom.element.Location.getTop(this.__blockedElement) + \"px\";\n      }\n\n      return styles;\n    },\n\n\n    /**\n     * Apply the given styles and inserts the blocker.\n     *\n     * @param styles {Object} styles to apply\n     */\n    __styleAndInsertBlocker : function(styles)\n    {\n      var target = document.body;\n\n      qx.bom.element.Style.setStyles(this.__blockerElement, styles);\n      qx.dom.Element.insertEnd(this.__blockerElement, target);\n\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        styles.zIndex = this.getBlockerZIndex() - 1;\n\n        qx.bom.element.Style.setStyles(this.__iframeElement, styles);\n        qx.dom.Element.insertEnd(this.__iframeElement, document.body);\n      }\n    },\n\n\n    /**\n     * Remove the blocker elements.\n     */\n    __removeBlocker: function()\n    {\n      qx.dom.Element.remove(this.__blockerElement);\n\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\")) {\n        qx.dom.Element.remove(this.__iframeElement);\n      }\n    },\n\n\n    /**\n     * Reacts on window resize and adapts the new size for the blocker element\n     * if the whole document is blocked.\n     *\n     * @param e {qx.event.type.Event} event instance\n     */\n    __onResize : function(e)\n    {\n      if (this.__isWholeDocumentBlockTarget())\n      {\n        // reset the blocker to get the right calculated document dimension\n        this.__resizeBlocker({ width: \"0px\", height: \"0px\" });\n\n        // If the HTML document is very large, the getWidth() and getHeight()\n        // returns the old size (it seems that the rendering engine is to slow).\n        qx.event.Timer.once(function()\n        {\n          var dimension = { width: qx.bom.Document.getWidth() + \"px\",\n                          height: qx.bom.Document.getHeight() + \"px\" };\n          this.__resizeBlocker(dimension);\n        }, this, 0);\n      }\n    },\n\n\n    /**\n     * Does the resizing for blocker element and blocker iframe element (IE)\n     *\n     * @param dimension {Object} Map with width and height as keys\n     */\n    __resizeBlocker : function(dimension)\n    {\n      qx.bom.element.Style.setStyles(this.__blockerElement, dimension);\n\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\")) {\n        qx.bom.element.Style.setStyles(this.__iframeElement, dimension);\n      }\n    },\n\n\n    /**\n     * Checks whether the whole document is be blocked.\n     *\n     * @return {Boolean} block mode\n     */\n    __isWholeDocumentBlockTarget : function() {\n      return (this.__blockedElement == null ||\n              qx.dom.Node.isWindow(this.__blockedElement) ||\n              qx.dom.Node.isDocument(this.__blockedElement));\n    }\n  }\n});\n"
  ]
}