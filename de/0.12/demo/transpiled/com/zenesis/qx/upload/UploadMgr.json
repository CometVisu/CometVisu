{
  "className": "com.zenesis.qx.upload.UploadMgr",
  "packageName": "com.zenesis.qx.upload",
  "name": "UploadMgr",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [
    "com.zenesis.qx.upload.MParameters"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0
      },
      "end": {
        "line": 349,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>****************************************************************\n</code></pre>\n<p>UploadMgr - provides an API for uploading one or multiple files\n   with progress feedback (on modern browsers), does not block the user\n   interface during uploads, supports cancelling uploads.\n   http://qooxdoo.org\n   Copyright:\n     2011 Zenesis Limited, http://www.zenesis.com\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     This software is provided under the same licensing terms as Qooxdoo,\n     please see the LICENSE file in the Qooxdoo project's top-level directory\n     for details.\n   Authors:\n John Spackman (john.spackman@zenesis.com)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em></p>"
        },
        {
          "name": "@description",
          "body": "<p>Manages uploading of files to the server; this class can use any suitable\n widget to attach the input[type=file] to, provided the widget includes\n com.zenesis.qx.upload.MUploadButton.\n Uploader will use XhrHandler to upload via XMLHttpRequest if supported or\n will fall back to FormHandler.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.event.handler.Input"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 38,
        "column": 13
      },
      "end": {
        "line": 45,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "events": {
    "addFile": {
      "location": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a file is added to the queue; data is the\n com.zenesis.qx.upload.File</p>"
          }
        ]
      },
      "name": "addFile",
      "type": "qx.event.type.Data"
    },
    "beginUpload": {
      "location": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a file starts to be uploaded; data is the\n com.zenesis.qx.upload.File</p>"
          }
        ]
      },
      "name": "beginUpload",
      "type": "qx.event.type.Data"
    },
    "completeUpload": {
      "location": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 42
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a file has been uploaded; data is the\n com.zenesis.qx.upload.File</p>"
          }
        ]
      },
      "name": "completeUpload",
      "type": "qx.event.type.Data"
    },
    "cancelUpload": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a file upload has been cancelled; data is the\n com.zenesis.qx.upload.File</p>"
          }
        ]
      },
      "name": "cancelUpload",
      "type": "qx.event.type.Data"
    }
  },
  "properties": {
    "uploadUrl": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The URL to upload to</p>"
          }
        ]
      },
      "name": "uploadUrl",
      "propertyType": "new",
      "event": "changeUploadUrl",
      "nullable": false,
      "init": "",
      "allowNull": false,
      "check": "String",
      "defaultValue": ""
    },
    "autoUpload": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to automatically start uploading when a file is added\n (default=true)</p>"
          }
        ]
      },
      "name": "autoUpload",
      "propertyType": "new",
      "event": "changeAutoUpload",
      "apply": "_applyAutoUpload",
      "nullable": false,
      "init": true,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": true
    },
    "multiple": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to support multiple files (default=true); this is not supported\n on older browsers</p>"
          }
        ]
      },
      "name": "multiple",
      "propertyType": "new",
      "event": "changeMultiple",
      "apply": "_applyMultiple",
      "nullable": false,
      "init": true,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": true
    },
    "inputNamePrefix": {
      "location": {
        "start": {
          "line": 111,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Prefix to apply to the name of input fields</p>"
          }
        ]
      },
      "name": "inputNamePrefix",
      "propertyType": "new",
      "event": "changeInputNamePrefix",
      "nullable": false,
      "init": "uploadMgrInput",
      "allowNull": false,
      "check": "String",
      "defaultValue": "uploadMgrInput"
    },
    "requireMultipartFormData": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the server can only handle multipart/form-data content type</p>"
          }
        ]
      },
      "name": "requireMultipartFormData",
      "propertyType": "new",
      "event": "changeRequireMultipartFormData",
      "apply": "_applyRequireMultipartFormData",
      "nullable": false,
      "init": true,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__widgetsData": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__inputSerial": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__uploadHandler": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__uploadId": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 17
        }
      },
      "type": "variable",
      "access": "private"
    },
    "addWidget": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a widget which is to have an input[type=file] attached; this would\n typically be an instance of com.zenesis.qx.upload.UploadButton (see\n com.zenesis.qx.upload.MUploadButton for implementing for other widgets)</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeWidget": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 199,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to remvove",
            "paramName": "widget",
            "description": " Widget to remvove",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addBlob": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a blob to the upload list</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "blob    {Blob}    the blob to upload",
            "paramName": "blob",
            "description": "    the blob to upload",
            "type": "Blob"
          },
          {
            "name": "@param",
            "body": "params  {Object}  List of params added to the upload params",
            "paramName": "params",
            "description": "  List of params added to the upload params",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__fixupSize": {
      "location": {
        "start": {
          "line": 219,
          "column": 4
        },
        "end": {
          "line": 233,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method that corrects the size of the input element to match the\n size of the widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to fixup size",
            "paramName": "widget",
            "description": " Widget to fixup size",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyAutoUpload": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 238,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property apply</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "autoUpload"
      ]
    },
    "_applyMultiple": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property apply</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "multiple"
      ]
    },
    "_applyRequireMultipartFormData": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 253,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>property apply</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "requireMultipartFormData"
      ]
    },
    "cancel": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 262,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancels a file being uploaded</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "file {String} Upload to cancel",
            "paramName": "file",
            "description": " Upload to cancel",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancelAll": {
      "location": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancels all files being uploaded</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_createInputElement": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 284,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the input[type=file] element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeInputElement": {
      "location": {
        "start": {
          "line": 290,
          "column": 4
        },
        "end": {
          "line": 297,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the input element - ie discards the current one (which presumably\n has already been queued for uploading)</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_resetInputElement": {
      "location": {
        "start": {
          "line": 303,
          "column": 4
        },
        "end": {
          "line": 307,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the input element - ie discards the current one (which presumably\n has already been queued for uploading) and creates a new one</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onInputChange": {
      "location": {
        "start": {
          "line": 316,
          "column": 4
        },
        "end": {
          "line": 323,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Callback for changes to the input[ty=file]'s value, ie this is called\n when the user has selected a file to upload</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} Element which is affected",
            "paramName": "elem",
            "description": " Element which is affected",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "evt {Event} Event data",
            "paramName": "evt",
            "description": " Event data",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getUploadHandler": {
      "location": {
        "start": {
          "line": 330,
          "column": 4
        },
        "end": {
          "line": 338,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the upload handler</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "",
            "type": "",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "allocateUploadId": {
      "location": {
        "start": {
          "line": 344,
          "column": 4
        },
        "end": {
          "line": 346,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Allocates a new upload ID; this is just a unique number that widgets or\n application code can use to uniquely identify themselves to the server</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setParam": {
      "type": "function",
      "name": "setParam",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "com.zenesis.qx.upload.MParameters",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets a parameter value to be sent with the file</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name\n          {String} name of the parameter",
            "paramName": "name",
            "description": " name of the parameter",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value\n          {String} the value of the parameter, or null to delete a\n          previous parameter",
            "paramName": "value",
            "description": " the value of the parameter, or null to delete a\n          previous parameter",
            "type": "String"
          }
        ]
      }
    },
    "getParam": {
      "type": "function",
      "name": "getParam",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "com.zenesis.qx.upload.MParameters",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a parameter value to be sent with the file</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the parameter",
            "paramName": "name",
            "description": " Name of the parameter",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      }
    },
    "getParamNames": {
      "type": "function",
      "name": "getParamNames",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "com.zenesis.qx.upload.MParameters",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of parameter names</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "Array",
            "description": ""
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getUploadUrl": {
      "type": "function",
      "name": "getUploadUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>uploadUrl</code>.\n\nFor further details take a look at the property definition: {@link #uploadUrl}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for uploadUrl"
          }
        ]
      }
    },
    "setUploadUrl": {
      "type": "function",
      "name": "setUploadUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>uploadUrl</code>.\n\nFor further details take a look at the property definition: {@link #uploadUrl}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for uploadUrl"
          }
        ]
      }
    },
    "resetUploadUrl": {
      "type": "function",
      "name": "resetUploadUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>uploadUrl</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #uploadUrl}."
          }
        ]
      }
    },
    "getAutoUpload": {
      "type": "function",
      "name": "getAutoUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoUpload</code>.\n\nFor further details take a look at the property definition: {@link #autoUpload}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoUpload"
          }
        ]
      }
    },
    "isAutoUpload": {
      "type": "function",
      "name": "isAutoUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoUpload</code>.\n\nFor further details take a look at the property definition: {@link #autoUpload}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoUpload"
          }
        ]
      }
    },
    "setAutoUpload": {
      "type": "function",
      "name": "setAutoUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoUpload</code>.\n\nFor further details take a look at the property definition: {@link #autoUpload}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for autoUpload"
          }
        ]
      }
    },
    "resetAutoUpload": {
      "type": "function",
      "name": "resetAutoUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoUpload</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoUpload}."
          }
        ]
      }
    },
    "getMultiple": {
      "type": "function",
      "name": "getMultiple",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>multiple</code>.\n\nFor further details take a look at the property definition: {@link #multiple}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for multiple"
          }
        ]
      }
    },
    "isMultiple": {
      "type": "function",
      "name": "isMultiple",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>multiple</code>.\n\nFor further details take a look at the property definition: {@link #multiple}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for multiple"
          }
        ]
      }
    },
    "setMultiple": {
      "type": "function",
      "name": "setMultiple",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>multiple</code>.\n\nFor further details take a look at the property definition: {@link #multiple}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for multiple"
          }
        ]
      }
    },
    "resetMultiple": {
      "type": "function",
      "name": "resetMultiple",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>multiple</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #multiple}."
          }
        ]
      }
    },
    "getInputNamePrefix": {
      "type": "function",
      "name": "getInputNamePrefix",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>inputNamePrefix</code>.\n\nFor further details take a look at the property definition: {@link #inputNamePrefix}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for inputNamePrefix"
          }
        ]
      }
    },
    "setInputNamePrefix": {
      "type": "function",
      "name": "setInputNamePrefix",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>inputNamePrefix</code>.\n\nFor further details take a look at the property definition: {@link #inputNamePrefix}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for inputNamePrefix"
          }
        ]
      }
    },
    "resetInputNamePrefix": {
      "type": "function",
      "name": "resetInputNamePrefix",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>inputNamePrefix</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #inputNamePrefix}."
          }
        ]
      }
    },
    "getRequireMultipartFormData": {
      "type": "function",
      "name": "getRequireMultipartFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requireMultipartFormData</code>.\n\nFor further details take a look at the property definition: {@link #requireMultipartFormData}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for requireMultipartFormData"
          }
        ]
      }
    },
    "isRequireMultipartFormData": {
      "type": "function",
      "name": "isRequireMultipartFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requireMultipartFormData</code>.\n\nFor further details take a look at the property definition: {@link #requireMultipartFormData}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for requireMultipartFormData"
          }
        ]
      }
    },
    "setRequireMultipartFormData": {
      "type": "function",
      "name": "setRequireMultipartFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requireMultipartFormData</code>.\n\nFor further details take a look at the property definition: {@link #requireMultipartFormData}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for requireMultipartFormData"
          }
        ]
      }
    },
    "resetRequireMultipartFormData": {
      "type": "function",
      "name": "resetRequireMultipartFormData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>requireMultipartFormData</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #requireMultipartFormData}."
          }
        ]
      }
    }
  },
  "descendants": [
    "cv.ui.manager.upload.UploadMgr"
  ]
}