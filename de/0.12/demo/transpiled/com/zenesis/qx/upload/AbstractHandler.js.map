{
  "version": 3,
  "sources": [
    "/home/travis/build/CometVisu/CometVisu/qx_packages/johnspackman_UploadMgr_v1_0_4/source/class/com/zenesis/qx/upload/AbstractHandler.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "uploader",
    "Assert",
    "assertNotNull",
    "__queue",
    "__current",
    "__params",
    "__uploader",
    "properties",
    "maxConnections",
    "check",
    "init",
    "nullable",
    "event",
    "members",
    "__lastId",
    "addFile",
    "input",
    "widget",
    "files",
    "_createFile",
    "lang",
    "Type",
    "isArray",
    "setUploadWidget",
    "_addFile",
    "i",
    "length",
    "addBlob",
    "filename",
    "blob",
    "params",
    "file",
    "fireDataEvent",
    "push",
    "beginUploads",
    "getMaxConnections",
    "shift",
    "setState",
    "_doUpload",
    "cancel",
    "wasUploading",
    "_cancel",
    "getAutoUpload",
    "cancelAll",
    "current",
    "splice",
    "inCurrent",
    "queue",
    "_doCancel",
    "_onCompleted",
    "response",
    "setResponse",
    "getState",
    "_getUploader",
    "_getUniqueFileId",
    "addParam",
    "key",
    "value",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "arguments",
    "callee",
    "getParams",
    "_getMergedParams",
    "result",
    "name",
    "merge",
    "obj",
    "names",
    "getParamNames",
    "getParam",
    "getUploadWidget",
    "com",
    "zenesis",
    "upload",
    "AbstractHandler"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,uCAAhB,EAAyD;AACvDC,IAAAA,IAAI,EAAG,UADgD;AAEvDC,IAAAA,MAAM,EAAEP,EAAE,CAACQ,IAAH,CAAQC,MAFuC;;AAIvD;;;;;;AAMAC,IAAAA,SAAS,EAAE,mBAASC,QAAT,EAAmB;AAC5B;AACAX,MAAAA,EAAE,CAACQ,IAAH,CAAQI,MAAR,CAAeC,aAAf,CAA6BF,QAA7B;AACA,WAAKG,SAAL,GAAe,EAAf;AACA,WAAKC,SAAL,GAAiB,EAAjB;AACA,WAAKC,SAAL,GAAgB,EAAhB;AACA,WAAKC,SAAL,GAAkBN,QAAlB;AACD,KAjBsD;AAmBvDO,IAAAA,UAAU,EAAE;AACV;;;AAGAC,MAAAA,cAAc,EAAE;AACdC,QAAAA,KAAK,EAAE,SADO;AAEdC,QAAAA,IAAI,EAAE,CAFQ;AAGdC,QAAAA,QAAQ,EAAE,KAHI;AAIdC,QAAAA,KAAK,EAAE;AAJO;AAJN,KAnB2C;AA+BvDC,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,SAAQ,EAAE,CAFH;AAIP;AACAR,MAAAA,SAAU,EAAE,IALL;AAOP;AACAH,MAAAA,SAAO,EAAE,IARF;AAUP;AACAC,MAAAA,SAAS,EAAE,IAXJ;AAaP;AACAC,MAAAA,SAAQ,EAAE,IAdH;;AAgBP;;;;;;;;;;AAUAU,MAAAA,OAAO,EAAE,iBAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAC/B,YAAIC,KAAK,GAAG,KAAKC,WAAL,CAAiBH,KAAjB,CAAZ;;AACA,YAAI,CAAC3B,EAAE,CAAC+B,IAAH,CAAQC,IAAR,CAAaC,OAAb,CAAqBJ,KAArB,CAAL,EAAkC;AAChCA,UAAAA,KAAK,CAACK,eAAN,CAAsBN,MAAtB;;AACA,eAAKO,QAAL,CAAcN,KAAd;AACD,SAHD,MAIE,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCP,UAAAA,KAAK,CAACO,CAAD,CAAL,CAASF,eAAT,CAAyBN,MAAzB;;AACA,eAAKO,QAAL,CAAcN,KAAK,CAACO,CAAD,CAAnB;AACD;AACJ,OApCM;;AAsCP;;;;;;;AAOAE,MAAAA,OAAO,EAAE,iBAAUC,QAAV,EAAoBC,IAApB,EAA0BC,MAA1B,EAAiC;AACxC;AACD,OA/CM;;AAiDP;;;;;;AAMAN,MAAAA,QAAQ,EAAE,kBAASO,IAAT,EAAe;AACvB,YAAI,KAAKzB,SAAL,CAAgB0B,aAAhB,CAA8B,SAA9B,EAAyCD,IAAzC,EAA+C,IAA/C,EAAqD,IAArD,CAAJ,EACE,KAAK5B,SAAL,CAAa8B,IAAb,CAAkBF,IAAlB;AACH,OA1DM;;AA4DP;;;AAGAG,MAAAA,YAAY,EAAE,wBAAW;AACvB,eAAO,KAAK/B,SAAL,CAAauB,MAAb,GAAsB,CAAtB,IAA2B,KAAKtB,SAAL,CAAesB,MAAf,GAAwB,KAAKS,iBAAL,EAA1D,EAAoF;AAClF,cAAIJ,IAAI,GAAG,KAAK5B,SAAL,CAAaiC,KAAb,EAAX;;AACA,eAAKhC,SAAL,CAAe6B,IAAf,CAAoBF,IAApB;;AACA,eAAKzB,SAAL,CAAgB0B,aAAhB,CAA8B,aAA9B,EAA6CD,IAA7C;;AACAA,UAAAA,IAAI,CAACM,QAAL,CAAc,WAAd;;AACA,eAAKC,SAAL,CAAeP,IAAf;AACD;AACF,OAvEM;;AAyEP;;;;;;AAMAQ,MAAAA,MAAM,EAAE,gBAASR,IAAT,EAAe;AACrB,YAAIS,YAAY,GAAG,KAAKpC,SAAL,CAAesB,MAAf,GAAwB,CAA3C,CADqB,CAErB;AACA;;AACA,aAAKe,OAAL,CAAaV,IAAb;;AACA,YAAIS,YAAY,IAAI,KAAKlC,SAAL,CAAgBoC,aAAhB,EAApB,EACE,KAAKR,YAAL;AACH,OAtFM;;AAwFP;;;AAGAS,MAAAA,SAAS,EAAE,qBAAW;AACpB,aAAK,IAAIC,OAAO,GAAG,KAAKxC,SAAnB,EAA8BqB,CAAC,GAAG,CAAvC,EAA0CA,CAAC,GAAGmB,OAAO,CAAClB,MAAtD,EAA8DD,CAAC,EAA/D;AACE,eAAKgB,OAAL,CAAaG,OAAO,CAACnB,CAAD,CAApB;AADF;;AAEA,aAAKrB,SAAL,CAAeyC,MAAf,CAAsB,CAAtB,EAAyB,KAAKzC,SAAL,CAAesB,MAAxC;;AACA,aAAKvB,SAAL,CAAa0C,MAAb,CAAoB,CAApB,EAAuB,KAAK1C,SAAL,CAAauB,MAApC;AACD,OAhGM;;AAkGP;;;;;;AAMAe,MAAAA,OAAO,EAAE,iBAASV,IAAT,EAAe;AACtB,YAAIe,SAAS,GAAG,KAAhB;;AACA,aAAK,IAAIF,OAAO,GAAG,KAAKxC,SAAnB,EAA8BqB,CAAC,GAAG,CAAvC,EAA0CA,CAAC,GAAGmB,OAAO,CAAClB,MAAtD,EAA8DD,CAAC,EAA/D;AACE,cAAImB,OAAO,CAACnB,CAAD,CAAP,IAAcM,IAAlB,EAAwB;AACtBa,YAAAA,OAAO,CAACC,MAAR,CAAepB,CAAf,EAAkB,CAAlB;AACAqB,YAAAA,SAAS,GAAG,IAAZ;AACA;AACD;AALH;;AAMA,aAAK,IAAIC,KAAK,GAAG,KAAK5C,SAAjB,EAA0BsB,CAAC,GAAG,CAAnC,EAAsCA,CAAC,GAAGsB,KAAK,CAACrB,MAAhD,EAAwDD,CAAC,EAAzD;AACE,cAAIsB,KAAK,CAACtB,CAAD,CAAL,IAAYM,IAAhB,EAAsB;AACpBgB,YAAAA,KAAK,CAACF,MAAN,CAAapB,CAAb,EAAgB,CAAhB;AACA;AACD;AAJH;;AAKAM,QAAAA,IAAI,CAACM,QAAL,CAAc,WAAd;AACA,YAAIS,SAAJ,EACE,KAAKE,SAAL,CAAejB,IAAf;;AACF,aAAKzB,SAAL,CAAgB0B,aAAhB,CAA8B,cAA9B,EAA8CD,IAA9C;AACD,OAzHM;;AA2HP;;;;;;;;;AASAkB,MAAAA,YAAY,EAAE,sBAASlB,IAAT,EAAemB,QAAf,EAAyB;AACrC;AACA;AACA,YAAIN,OAAO,GAAG,KAAKxC,SAAnB;;AACA,aAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,OAAO,CAAClB,MAA5B,EAAoCD,CAAC,EAArC;AACE,cAAImB,OAAO,CAACnB,CAAD,CAAP,IAAcM,IAAlB,EAAwB;AACtBa,YAAAA,OAAO,CAACC,MAAR,CAAepB,CAAf,EAAkB,CAAlB;AACA;AACD;AAJH;;AAMAM,QAAAA,IAAI,CAACoB,WAAL,CAAiBD,QAAjB,EAVqC,CAYrC;;AACA,YAAInB,IAAI,CAACqB,QAAL,MAAmB,WAAvB,EAAoC;AAClCrB,UAAAA,IAAI,CAACM,QAAL,CAAc,UAAd;;AACA,eAAK/B,SAAL,CAAgB0B,aAAhB,CAA8B,gBAA9B,EAAgDD,IAAhD;AACD,SAhBoC,CAkBrC;;;AACA,aAAKG,YAAL;AACD,OAxJM;;AA0JP;;;;;AAKAmB,MAAAA,YAAY,EAAE,wBAAW;AACvB,eAAO,KAAK/C,SAAZ;AACD,OAjKM;;AAmKP;;;;;AAKAgD,MAAAA,gBAAgB,EAAE,4BAAW;AAC3B,eAAO,EAAE,KAAKxC,SAAd;AACD,OA1KM;;AA4KP;;;;;;;;;;AAUAyC,MAAAA,QAAQ,EAAE,kBAASC,GAAT,EAAcC,KAAd,EAAqB;AAC7BpE,QAAAA,EAAE,CAACqE,GAAH,CAAOC,MAAP,CAAcC,uBAAd,CAAsCC,SAAS,CAACC,MAAhD,EACI,qFADJ;AAEA,aAAKzD,SAAL,CAAcmD,GAAd,IAAqBC,KAArB;AACD,OA1LM;;AA4LP;;;;;;AAMAM,MAAAA,SAAS,EAAE,qBAAW;AACpB1E,QAAAA,EAAE,CAACqE,GAAH,CAAOC,MAAP,CAAcC,uBAAd,CAAsCC,SAAS,CAACC,MAAhD,EACI,qFADJ;AAEA,eAAO,KAAKzD,SAAZ;AACD,OAtMM;;AAwMP;;;;;;;;AAQA2D,MAAAA,gBAAgB,EAAE,0BAASjC,IAAT,EAAe;AAC/B,YAAIkC,MAAM,GAAG,EAAb;;AACA,aAAM,IAAIC,IAAV,IAAkB,KAAK7D,SAAvB,EAAiC;AAC/B,cAAIoD,KAAK,GAAG,KAAKpD,SAAL,CAAc6D,IAAd,CAAZ;AACA,cAAIT,KAAK,KAAK,IAAd,EACEQ,MAAM,CAACC,IAAD,CAAN,GAAeT,KAAf;AACH;;AACD,iBAASU,KAAT,CAAeC,GAAf,EAAoB;AAClB,cAAIC,KAAK,GAAGD,GAAG,CAACE,aAAJ,EAAZ;;AACA,eAAK,IAAI7C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4C,KAAK,CAAC3C,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,gBAAIyC,IAAI,GAAGG,KAAK,CAAC5C,CAAD,CAAhB;AAAA,gBAAqBgC,KAAK,GAAGW,GAAG,CAACG,QAAJ,CAAaL,IAAb,CAA7B;AACA,gBAAIT,KAAK,KAAK,IAAd,EACEQ,MAAM,CAACC,IAAD,CAAN,GAAeT,KAAf,CADF,KAGE,OAAOQ,MAAM,CAACC,IAAD,CAAb;AACH;AACF;;AACDC,QAAAA,KAAK,CAAC,KAAK7D,SAAN,CAAL;AACA,YAAIW,MAAM,GAAGc,IAAI,CAACyC,eAAL,EAAb;AACA,YAAIvD,MAAM,IAAK,OAAOA,MAAM,CAACqD,aAAd,IAA+B,UAA9C,EACEH,KAAK,CAAClD,MAAD,CAAL;AACF,YAAI,OAAOc,IAAI,CAACuC,aAAZ,IAA6B,UAAjC,EACEH,KAAK,CAACpC,IAAD,CAAL;AACF,eAAOkC,MAAP;AACD,OAxOM;;AA0OP;;;;;;;;AAQA9C,MAAAA,WAAW,EAAE,qBAASH,KAAT,EAAgB;AAC3B;AACD,OApPM;;AAsPP;;;;;;AAMAsB,MAAAA,SAAS,EAAE,mBAASP,IAAT,EAAe;AACxB;AACD,OA9PM;;AAgQP;;;;;;AAMAiB,MAAAA,SAAS,EAAE,mBAASjB,IAAT,EAAe;AACxB;AACD;AAxQM;AA/B8C,GAAzD;AA3BA0C,EAAAA,GAAG,CAACC,OAAJ,CAAYrF,EAAZ,CAAesF,MAAf,CAAsBC,eAAtB,CAAsCpF,aAAtC,GAAsDA,aAAtD",
  "sourcesContent": [
    "/* ***********************************************************************\n\n   UploadMgr - provides an API for uploading one or multiple files\n   with progress feedback (on modern browsers), does not block the user \n   interface during uploads, supports cancelling uploads.\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     \n     This software is provided under the same licensing terms as Qooxdoo,\n     please see the LICENSE file in the Qooxdoo project's top-level directory \n     for details.\n\n   Authors:\n * John Spackman (john.spackman@zenesis.com)\n\n ************************************************************************/\n\n/**\n * Base class for upload implementations; operates a queue of pending and\n * current uploads, and restricts the number of simultaneous uploads.\n */\nqx.Class.define(\"com.zenesis.qx.upload.AbstractHandler\", {\n  type : \"abstract\", \n  extend: qx.core.Object,\n\n  /**\n   * Constructor\n   * \n   * @param uploader\n   *          {com.zenesis.qx.upload.UploadMgr} controller for uploading\n   */\n  construct: function(uploader) {\n    this.base(arguments);\n    qx.core.Assert.assertNotNull(uploader);\n    this.__queue = [];\n    this.__current = [];\n    this.__params = {};\n    this.__uploader = uploader;\n  },\n\n  properties: {\n    /**\n     * Maximum number of simultaneous uploads\n     */\n    maxConnections: {\n      check: \"Integer\",\n      init: 5,\n      nullable: false,\n      event: \"changeMaxConnections\"\n    }\n  },\n\n  members: {\n    // Last unique ID used\n    __lastId: 0,\n\n    // Uploader instance\n    __uploader: null,\n\n    // Queue of com.zenesis.qx.upload.File's to send\n    __queue: null,\n\n    // List of com.zenesis.qx.upload.File's currently being sent\n    __current: null,\n\n    // Parameters to post with the file\n    __params: null,\n\n    /**\n     * Adds a file to the upload queue; this does not start uploading until\n     * beginUploads is called.\n     * \n     * @param input\n     *          {DOM} either one input[type=file] or an array of\n     *          input[type=file]\n     * @param widget\n     *          {Widget} the widget that trigger the upload\n     */\n    addFile: function(input, widget) {\n      var files = this._createFile(input);\n      if (!qx.lang.Type.isArray(files)) {\n        files.setUploadWidget(widget);\n        this._addFile(files);\n      } else\n        for (var i = 0; i < files.length; i++) {\n          files[i].setUploadWidget(widget);\n          this._addFile(files[i]);\n        }\n    },\n\n    /**\n     * Adds a blob to the upload list \n     * \n     * @param filename    {String}  name of object\n     * @param blob        {Blob}    the blob to upload\n     * @param params      {Object}  List of params added to the upload params\n     */\n    addBlob: function (filename, blob, params){\n      /* abstract */\n    },\n\n    /**\n     * Adds a file to the outbound queue\n     * \n     * @param file\n     *          {com.zenesis.qx.upload.File} the file to add\n     */\n    _addFile: function(file) {\n      if (this.__uploader.fireDataEvent(\"addFile\", file, null, true))\n        this.__queue.push(file);\n    },\n\n    /**\n     * Begins spooling uploads to the server, up to the maxConnections\n     */\n    beginUploads: function() {\n      while (this.__queue.length > 0 && this.__current.length < this.getMaxConnections()) {\n        var file = this.__queue.shift();\n        this.__current.push(file);\n        this.__uploader.fireDataEvent(\"beginUpload\", file);\n        file.setState(\"uploading\");\n        this._doUpload(file);\n      }\n    },\n\n    /**\n     * Cancels a file\n     * \n     * @param file\n     *          {com.zenesis.qx.upload.File} the file to cancel\n     */\n    cancel: function(file) {\n      var wasUploading = this.__current.length > 0;\n      // this.debug(\"cancelled: id=\" + file.getId() + \", fileName=\" +\n      // file.getFilename());\n      this._cancel(file);\n      if (wasUploading && this.__uploader.getAutoUpload())\n        this.beginUploads();\n    },\n\n    /**\n     * Cancels all uploads\n     */\n    cancelAll: function() {\n      for (var current = this.__current, i = 0; i < current.length; i++)\n        this._cancel(current[i]);\n      this.__current.splice(0, this.__current.length);\n      this.__queue.splice(0, this.__queue.length);\n    },\n\n    /**\n     * Cancels a file\n     * \n     * @param file\n     *          {com.zenesis.qx.upload.File} the file to cancel\n     */\n    _cancel: function(file) {\n      var inCurrent = false;\n      for (var current = this.__current, i = 0; i < current.length; i++)\n        if (current[i] == file) {\n          current.splice(i, 1);\n          inCurrent = true;\n          break;\n        }\n      for (var queue = this.__queue, i = 0; i < queue.length; i++)\n        if (queue[i] == file) {\n          queue.splice(i, 1);\n          break;\n        }\n      file.setState(\"cancelled\");\n      if (inCurrent)\n        this._doCancel(file);\n      this.__uploader.fireDataEvent(\"cancelUpload\", file);\n    },\n\n    /**\n     * Called by derived classes when a file has completed\n     * \n     * @param file\n     *          {com.zenesis.qx.upload.File} the file which has finsihed\n     *          uploading\n     * @param response\n     *          {String} text received\n     */\n    _onCompleted: function(file, response) {\n      // this.debug(\"completed: id=\" + file.getId() + \", fileName=\" +\n      // file.getFilename() + \", response=\" + response);\n      var current = this.__current;\n      for (var i = 0; i < current.length; i++)\n        if (current[i] == file) {\n          current.splice(i, 1);\n          break;\n        }\n\n      file.setResponse(response);\n\n      // File state should be uploading or cancelled\n      if (file.getState() == \"uploading\") {\n        file.setState(\"uploaded\");\n        this.__uploader.fireDataEvent(\"completeUpload\", file);\n      }\n\n      // Start the next one\n      this.beginUploads();\n    },\n\n    /**\n     * Returns the uploader\n     * \n     * @returns {com.zenesis.qx.upload.UploadMgr}\n     */\n    _getUploader: function() {\n      return this.__uploader;\n    },\n\n    /**\n     * Allocates a unique ID\n     * \n     * @returns {Number}\n     */\n    _getUniqueFileId: function() {\n      return ++this.__lastId;\n    },\n\n    /**\n     * Adds a parameter to send to the client\n     * \n     * @param key\n     *          {String} the name of the parameter\n     * @param value\n     *          {String} the value of the parameter\n     * @deprecated {1.0} see com.zenesis.qx.upload.UploadMgr.setParam or\n     *             com.zenesis.qx.upload.File.setParam\n     */\n    addParam: function(key, value) {\n      qx.log.Logger.deprecatedMethodWarning(arguments.callee,\n          \"see com.zenesis.qx.upload.UploadMgr.setParam or com.zenesis.qx.upload.File.setParam\");\n      this.__params[key] = value;\n    },\n\n    /**\n     * Returns the paramaters map\n     * \n     * @returns {Map}\n     * @deprecated {1.0} see com.zenesis.qx.upload.File.getParam\n     */\n    getParams: function() {\n      qx.log.Logger.deprecatedMethodWarning(arguments.callee,\n          \"see com.zenesis.qx.upload.UploadMgr.getParam or com.zenesis.qx.upload.File.getParam\");\n      return this.__params;\n    },\n\n    /**\n     * Helper method that produces a final list of parameter values, by merging\n     * those set in this with those in the file.\n     * \n     * @param file\n     *          {File} the file object\n     * @returns {Map} map of parameters to sent to the server\n     */\n    _getMergedParams: function(file) {\n      var result = {};\n      for ( var name in this.__params) {\n        var value = this.__params[name];\n        if (value !== null)\n          result[name] = value;\n      }\n      function merge(obj) {\n        var names = obj.getParamNames();\n        for (var i = 0; i < names.length; i++) {\n          var name = names[i], value = obj.getParam(name);\n          if (value !== null)\n            result[name] = value;\n          else\n            delete result[name];\n        }\n      }\n      merge(this.__uploader);\n      var widget = file.getUploadWidget();\n      if (widget && (typeof widget.getParamNames == \"function\"))\n        merge(widget);\n      if (typeof file.getParamNames == \"function\")\n        merge(file);\n      return result;\n    },\n\n    /**\n     * Implementation must create a com.zenesis.qx.upload.File or array of\n     * com.zenesis.qx.upload.File\n     * \n     * @param input\n     *          {DOM} the DOM input[type=file]\n     * @return {com.zenesis.qx.upload.File|com.zenesis.qx.upload.File[]}\n     */\n    _createFile: function(input) {\n      /* abstract */\n    },\n\n    /**\n     * Called to do the real work of uploading the file\n     * \n     * @param file\n     *          {com.zenesis.qx.upload.File}\n     */\n    _doUpload: function(file) {\n      /* abstract */\n    },\n\n    /**\n     * Called to cancel the upload\n     * \n     * @param file\n     *          {com.zenesis.qx.upload.File} file to cancel uploading\n     */\n    _doCancel: function(file) {\n      /* abstract */\n    }\n\n  }\n});\n"
  ]
}