{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v3_1_2/source/class/qxl/dialog/formElement/SelectBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "register",
    "qxl",
    "dialog",
    "Dialog",
    "registerFormElementHandlers",
    "_registration",
    "initElement",
    "fieldType",
    "fieldData",
    "key",
    "formElement",
    "ui",
    "form",
    "SelectBox",
    "model",
    "data",
    "marshal",
    "Json",
    "createModel",
    "options",
    "controller",
    "List",
    "addToFormController",
    "_formController",
    "addTarget",
    "converter",
    "value",
    "selected",
    "selectables",
    "getSelectables",
    "forEach",
    "selectable",
    "getModel",
    "getValue",
    "bind",
    "selection"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EACA;AACEC,IAAAA,OAAO,EACP;AACEC,MAAAA,QAAQ,EAAG,oBAAW;AACpBC,QAAAA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkBC,2BAAlB,CACE,WADF,EACe,KAAKC,aADpB;AAED,OAJH;AAMEA,MAAAA,aAAa,EAAG;AACdC,QAAAA,WAAW,EAAG,qBAASC,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoC;AAChD,cAAIC,WAAW,GAAG,IAAIjB,EAAE,CAACkB,EAAH,CAAMC,IAAN,CAAWC,SAAf,EAAlB;AACA,cAAIC,KAAK,GAAGrB,EAAE,CAACsB,IAAH,CAAQC,OAAR,CAAgBC,IAAhB,CAAqBC,WAArB,CAAiCV,SAAS,CAACW,OAA3C,CAAZ;AACA,cAAI1B,EAAE,CAACsB,IAAH,CAAQK,UAAR,CAAmBC,IAAvB,CAA4BP,KAA5B,EAAmCJ,WAAnC,EAAgD,OAAhD;AACA,iBAAOA,WAAP;AACD,SANa;AAQdY,QAAAA,mBAAmB,EAAG,6BAASf,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,WAApC,EAAiD;AACrE,eAAKa,eAAL,CAAqBC,SAArB,CAA+Bd,WAA/B,EAA4C,WAA5C,EAAyDD,GAAzD,EAA8D,IAA9D,EAAoE;AAClEgB,YAAAA,SAAS,EAAE,UAAUC,KAAV,EAAiB;AAC1B,kBAAIC,QAAQ,GAAG,IAAf;AACA,kBAAIC,WAAW,GAAGlB,WAAW,CAACmB,cAAZ,EAAlB;AACAD,cAAAA,WAAW,CAACE,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AACxC,oBAAIA,UAAU,CAACC,QAAX,GAAsBC,QAAtB,OAAqCP,KAAzC,EAAgD;AAC9CC,kBAAAA,QAAQ,GAAGI,UAAX;AACD;AACF,eAJD,EAIG,IAJH;;AAKA,kBAAI,CAACJ,QAAL,EAAe;AACb,uBAAO,CAACC,WAAW,CAAC,CAAD,CAAZ,CAAP;AACD;;AACD,qBAAO,CAACD,QAAD,CAAP;AACD,aAZU,CAYTO,IAZS,CAYJ,IAZI;AADuD,WAApE,EAcG;AACDT,YAAAA,SAAS,EAAE,mBAAUU,SAAV,EAAqB;AAC9B,kBAAIT,KAAK,GAAGS,SAAS,CAAC,CAAD,CAAT,CAAaH,QAAb,GAAwBC,QAAxB,EAAZ;AACA,qBAAOP,KAAP;AACD;AAJA,WAdH;AAoBD;AA7Ba;AANlB;AAFF,GADA;AAnBAzB,EAAAA,GAAG,CAACC,MAAJ,CAAWQ,WAAX,CAAuBG,SAAvB,CAAiCjB,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2020 Christian Boulanger, Derrell Lipman\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\nqx.Class.define(\"qxl.dialog.formElement.SelectBox\",\n{\n  statics :\n  {\n    register : function() {\n      qxl.dialog.Dialog.registerFormElementHandlers(\n        \"selectbox\", this._registration);\n    },\n\n    _registration : {\n      initElement : function(fieldType, fieldData, key) {\n        let formElement = new qx.ui.form.SelectBox();\n        let model = qx.data.marshal.Json.createModel(fieldData.options);\n        new qx.data.controller.List(model, formElement, \"label\");\n        return formElement;\n      },\n\n      addToFormController : function(fieldType, fieldData, key, formElement) {\n        this._formController.addTarget(formElement, \"selection\", key, true, {\n          converter: function (value) {\n            let selected = null;\n            let selectables = formElement.getSelectables();\n            selectables.forEach(function (selectable) {\n              if (selectable.getModel().getValue() === value) {\n                selected = selectable;\n              }\n            }, this);\n            if (!selected) {\n              return [selectables[0]];\n            }\n            return [selected];\n          }.bind(this)\n        }, {\n          converter: function (selection) {\n            let value = selection[0].getModel().getValue();\n            return value;\n          }\n        });\n      }\n    }\n  }\n});\n"
  ]
}