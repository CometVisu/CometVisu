{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_qxl_dialog_v3_1_2/source/class/qxl/dialog/formElement/Spinner.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "register",
    "qxl",
    "dialog",
    "Dialog",
    "registerFormElementHandlers",
    "_registration",
    "initElement",
    "fieldType",
    "fieldData",
    "key",
    "formElement",
    "ui",
    "form",
    "Spinner",
    "min",
    "setMinimum",
    "max",
    "setMaximum",
    "step",
    "setSingleStep",
    "fractionsDigits",
    "fd",
    "nf",
    "util",
    "format",
    "NumberFormat",
    "setMinimumFractionDigits",
    "setMaximumFractionDigits",
    "setNumberFormat",
    "addToFormController",
    "_formController",
    "addTarget",
    "converter",
    "value",
    "_form",
    "getValidationManager",
    "validate",
    "bind"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,gCAAhB,EACA;AACEC,IAAAA,OAAO,EACP;AACEC,MAAAA,QAAQ,EAAG,oBAAW;AACpBC,QAAAA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkBC,2BAAlB,CACE,SADF,EACa,KAAKC,aADlB;AAED,OAJH;AAMEA,MAAAA,aAAa,EAAG;AACdC,QAAAA,WAAW,EAAG,qBAASC,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoC;AAChD,cAAIC,WAAW,GAAG,IAAIjB,EAAE,CAACkB,EAAH,CAAMC,IAAN,CAAWC,OAAf,EAAlB;;AACA,cAAIL,SAAS,CAACM,GAAd,EAAmB;AACjBJ,YAAAA,WAAW,CAACK,UAAZ,CAAuBP,SAAS,CAACM,GAAjC;AACD;;AACD,cAAIN,SAAS,CAACQ,GAAd,EAAmB;AACjBN,YAAAA,WAAW,CAACO,UAAZ,CAAuBT,SAAS,CAACQ,GAAjC;AACD;;AACD,cAAIR,SAAS,CAACU,IAAd,EAAoB;AAClBR,YAAAA,WAAW,CAACS,aAAZ,CAA0BX,SAAS,CAACU,IAApC;AACD;;AACD,cAAIV,SAAS,CAACY,eAAd,EAA+B;AAC7B,gBAAIC,EAAE,GAAGb,SAAS,CAACY,eAAnB;AACA,gBAAIE,EAAE,GAAG,IAAI7B,EAAE,CAAC8B,IAAH,CAAQC,MAAR,CAAeC,YAAnB,EAAT;;AACA,gBAAIJ,EAAE,CAACP,GAAP,EAAY;AACVQ,cAAAA,EAAE,CAACI,wBAAH,CAA4BL,EAAE,CAACP,GAA/B;AACD;;AACD,gBAAIO,EAAE,CAACL,GAAP,EAAY;AACVM,cAAAA,EAAE,CAACK,wBAAH,CAA4BN,EAAE,CAACL,GAA/B;AACD;;AACDN,YAAAA,WAAW,CAACkB,eAAZ,CAA4BN,EAA5B;AACD;;AACD,iBAAOZ,WAAP;AACD,SAxBa;AA0BdmB,QAAAA,mBAAmB,EAAG,6BAAStB,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,WAApC,EAAiD;AACrE,eAAKoB,eAAL,CAAqBC,SAArB,CAA+BrB,WAA/B,EAA4C,OAA5C,EAAqDD,GAArD,EAA0D,IAA1D,EAAgE,IAAhE,EAAsE;AACpEuB,YAAAA,SAAS,EAAE,UAAUC,KAAV,EAAiB;AAC1B,mBAAKC,KAAL,CAAWC,oBAAX,GAAkCC,QAAlC;;AACA,qBAAOH,KAAP;AACD,aAHU,CAGTI,IAHS,CAGJ,IAHI;AADyD,WAAtE;AAMD;AAjCa;AANlB;AAFF,GADA;AAnBApC,EAAAA,GAAG,CAACC,MAAJ,CAAWQ,WAAX,CAAuBG,OAAvB,CAA+BjB,aAA/B,GAA+CA,aAA/C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2020 Christian Boulanger, Derrell Lipman\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     *  Christian Boulanger (cboulanger)\n     *  Derrell Lipman (derrell)\n\n************************************************************************ */\n\nqx.Class.define(\"qxl.dialog.formElement.Spinner\",\n{\n  statics :\n  {\n    register : function() {\n      qxl.dialog.Dialog.registerFormElementHandlers(\n        \"spinner\", this._registration);\n    },\n\n    _registration : {\n      initElement : function(fieldType, fieldData, key) {\n        let formElement = new qx.ui.form.Spinner();\n        if (fieldData.min) {\n          formElement.setMinimum(fieldData.min);\n        }\n        if (fieldData.max) {\n          formElement.setMaximum(fieldData.max);\n        }\n        if (fieldData.step) {\n          formElement.setSingleStep(fieldData.step);\n        }\n        if (fieldData.fractionsDigits) {\n          let fd = fieldData.fractionsDigits;\n          let nf = new qx.util.format.NumberFormat();\n          if (fd.min) {\n            nf.setMinimumFractionDigits(fd.min);\n          }\n          if (fd.max) {\n            nf.setMaximumFractionDigits(fd.max);\n          }\n          formElement.setNumberFormat(nf);\n        }\n        return formElement;\n      },\n\n      addToFormController : function(fieldType, fieldData, key, formElement) {\n        this._formController.addTarget(formElement, \"value\", key, true, null, {\n          converter: function (value) {\n            this._form.getValidationManager().validate();\n            return value;\n          }.bind(this)\n        });\n      }\n    }\n  }\n});\n"
  ]
}