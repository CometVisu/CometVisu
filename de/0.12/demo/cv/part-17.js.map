{"version":3,"sources":["../../../source/class/cv/plugins/tr064/CallList.js"],"names":["qx","Bootstrap","executePendingDefers","$$dbClassInfo","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Refresh","Update","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseFormat","parseAddress","parseRefresh","device","max","transform","value","columns","default","TAM","TAMColor","TAMwait","TAMwaitColor","TAMplay","TAMplayColor","TAMstop","TAMstopColor","typeIncoming","typeIncomingColor","typeMissed","typeMissedColor","typeOutgoing","typeOutgoingColor","typeActiveIncoming","typeActiveIncomingColor","typeRejectedIncoming","typeRejectedIncomingColor","typeActiveOutgoing","typeActiveOutgoingColor","typeUnknown","typeUnknownColor","events","tr064ListRefreshed","properties","check","init","members","__calllistUri","__calllistList","undefined","__refreshingCalllist","__TAMeventAttached","_getInnerDomString","refreshCalllist","_setupRefreshAction","_timer","event","Timer","getRefresh","addListener","start","_update","address","_displayCalllist","self","clLi","getDomElement","getElementsByClassName","sid","replace","html","types","0","name","getTypeUnknown","color","getTypeUnknownColor","1","getTypeIncoming","getTypeIncomingColor","2","getTypeMissed","getTypeMissedColor","3","getTypeOutgoing","getTypeOutgoingColor","9","getTypeActiveIncoming","getTypeActiveIncomingColor","10","getTypeRejectedIncoming","getTypeRejectedIncomingColor","11","getTypeActiveOutgoing","getTypeActiveOutgoingColor","forEach","cl","audio","type","Type","Path","getDevice","IconHandler","getInstance","getIconText","getTAM","getTAMColor","getColumns","split","col","Date","Name","Caller","innerHTML","tamList","i","length","addEventListener","__playTAM","_getCallListURI","url","window","fetch","then","response","ok","json","console","error","status","statusText","source","getMax","text","str","DOMParser","parseFromString","itemList","getElementsByTagName","childrenList","children","entry","ii","nodeName","textContent","push","fireEvent","element","previousElementSibling","__TAMstop","readyState","__TAMwait","paused","playPromise","play","__TAMplay","pause","currentTime","getTAMwait","getTAMwaitColor","getTAMplay","getTAMplayColor","getTAMstop","getTAMstopColor","defer","util","ScriptLoader","addStyles","addHandler","plugins","tr064","CallList","WidgetFactory","registerClass"],"mappings":"2WAACA,GAAEC,UAAUC,qBAAqBC,GA6BjCH,GAAEI,MAAMC,OAAO,6BACdC,OAAQC,GAAGC,GAAGC,UAAUC,eACxBC,SAAUJ,GAAGC,GAAGI,OAAOC,QAASN,GAAGC,GAAGI,OAAOE,QAa7CC,SAWEC,MAAO,SAAUC,EAAKC,EAAMC,EAASC,GACnC,IAAIC,EAAOd,GAAGe,OAAOC,aAAaC,aAAaC,KAAMR,EAAKC,EAAMC,EAASC,EAAUK,KAAKC,kCACxFnB,GAAGe,OAAOC,aAAaI,YAAYV,EAAKC,GACxCX,GAAGe,OAAOC,aAAaK,aAAaX,EAAKC,GACzCX,GAAGe,OAAOC,aAAaM,aAAaZ,EAAKC,GACzC,OAAOG,GAGTK,+BAAgC,WAC9B,OACEI,UACAC,KAAQC,UAAW,SAASC,GAAS,OAAQA,IAC7CC,SAAaC,QAAW,8BACxBC,KAAkBD,QAAW,mBAC7BE,UAAkBF,QAAW,IAC7BG,SAAkBH,QAAW,kBAC7BI,cAAkBJ,QAAW,IAC7BK,SAAkBL,QAAW,cAC7BM,cAAkBN,QAAW,IAC7BO,SAAkBP,QAAW,mBAC7BQ,cAAkBR,QAAW,IAC7BS,cAAgCT,QAAW,iBAC3CU,mBAAgCV,QAAW,IAC3CW,YAAgCX,QAAW,mBAC3CY,iBAAgCZ,QAAW,IAC3Ca,cAAgCb,QAAW,kBAC3Cc,mBAAgCd,QAAW,IAC3Ce,oBAAgCf,QAAW,iBAC3CgB,yBAAgChB,QAAW,IAC3CiB,sBAAgCjB,QAAW,qBAC3CkB,2BAAgClB,QAAW,IAC3CmB,oBAAgCnB,QAAW,kBAC3CoB,yBAAgCpB,QAAW,IAC3CqB,aAAgCrB,QAAW,sBAC3CsB,kBAAgCtB,QAAW,OAUjDuB,QACEC,mBAAsB,uBAQxBC,YACE9B,QACE+B,MAAO,SACPC,KAAM,IAER/B,KACE8B,MAAO,SACPC,KAAM,GAER5B,SAAgB2B,MAAO,UACvBzB,KAAgByB,MAAO,UACvBxB,UAAgBwB,MAAO,UACvBvB,SAAgBuB,MAAO,UACvBtB,cAAgBsB,MAAO,UACvBrB,SAAgBqB,MAAO,UACvBpB,cAAgBoB,MAAO,UACvBnB,SAAgBmB,MAAO,UACvBlB,cAAgBkB,MAAO,UACvBjB,cAA8BiB,MAAO,UACrChB,mBAA8BgB,MAAO,UACrCf,YAA8Be,MAAO,UACrCd,iBAA8Bc,MAAO,UACrCb,cAA8Ba,MAAO,UACrCZ,mBAA8BY,MAAO,UACrCX,oBAA8BW,MAAO,UACrCV,yBAA8BU,MAAO,UACrCT,sBAA8BS,MAAO,UACrCR,2BAA8BQ,MAAO,UACrCP,oBAA8BO,MAAO,UACrCN,yBAA8BM,MAAO,UACrCL,aAA8BK,MAAO,UACrCJ,kBAA8BI,MAAO,WAQvCE,SACEC,cAAe,GACfC,oBAAgBC,EAChBC,sBAAsB,EAMtBC,sBAEAC,mBAAoB,WAClB5C,KAAK6C,gBAAgB,WACrB,MAAO,sGAETC,oBAAqB,WACnB9C,KAAK+C,OAAS,IAAIxE,GAAGyE,MAAMC,MAAMjD,KAAKkD,cACtClD,KAAK+C,OAAOI,YAAY,WAAY,WAC7BnD,KAAK0C,sBAER1C,KAAK6C,gBAAgB,UAEtB7C,MACHA,KAAK+C,OAAOK,SAEdC,QAAS,SAASC,EAAS9C,GACpBR,KAAK0C,sBAER1C,KAAK6C,gBAAgB,WAIzBU,iBAAkB,WAChB,IACEC,EAAOxD,KACPyD,EAAOzD,KAAK0D,gBAAgBC,uBAAuB,kBAAkB,GACrEC,EAAO5D,KAAKuC,cAAgBvC,KAAKuC,cAAcsB,QAAQ,SAAS,IAAM,GACtEC,EAAO,GACPC,GACEC,GAAMC,KAAMjE,KAAKkE,iBAA4BC,MAAOnE,KAAKoE,uBACzDC,GAAMJ,KAAMjE,KAAKsE,kBAA4BH,MAAOnE,KAAKuE,wBACzDC,GAAMP,KAAMjE,KAAKyE,gBAA4BN,MAAOnE,KAAK0E,sBACzDC,GAAMV,KAAMjE,KAAK4E,kBAA4BT,MAAOnE,KAAK6E,wBACzDC,GAAMb,KAAMjE,KAAK+E,wBAA4BZ,MAAOnE,KAAKgF,8BACzDC,IAAMhB,KAAMjE,KAAKkF,0BAA4Bf,MAAOnE,KAAKmF,gCACzDC,IAAMnB,KAAMjE,KAAKqF,wBAA4BlB,MAAOnE,KAAKsF,+BAG7DtF,KAAKwC,eAAe+C,QAAQ,SAASC,GACnC,IACEC,EAAQ,GACRC,EAAQF,EAAGG,QAAQ5B,EAASA,EAAMyB,EAAGG,MAAQ5B,EAAM,GAEjDyB,EAAGI,OAELH,EAAQ,8EACsDjC,EAAKqC,YAAc,QAAQL,EAAGI,KAAK,UAAUhC,EAAI,wCAG3G9E,GAAGgH,YAAYC,cAAcC,YAAaxC,EAAKyC,SAAU,IAAK,IAAKzC,EAAK0C,eACxE,UAGNpC,GAAQ,OACRN,EAAK2C,aAAaC,MAAM,KAAKb,QAAS,SAASc,GAC7C,OAAQA,GAEN,IAAK,OACHvC,GAAQ,OAAShF,GAAGgH,YAAYC,cAAcC,YAAaN,EAAKzB,KAAM,IAAK,IAAKyB,EAAKvB,OAAW,QAChG,MAEF,IAAK,OACHL,GAAQ,OAAS0B,EAAGc,KAAS,QAC7B,MAEF,IAAK,OACHxC,GAAQ,OAAS0B,EAAGe,KAAS,QAC7B,MAEF,IAAK,SACHzC,GAAQ,OAAS0B,EAAGgB,OAAS,QAC7B,MAEF,IAAK,eACa,KAAZhB,EAAGe,KAELzC,GAAQ,OAAS0B,EAAGe,KAAS,QAE7BzC,GAAQ,OAAS0B,EAAGgB,OAAS,QAE/B,MAEF,IAAK,MACH1C,GAAQ,OAAS2B,EAAQ,WAK/B3B,GAAQ,UAEVL,EAAKgD,UAAY3C,EAEjB,IADA,IAAI4C,EAAUjD,EAAKE,uBAAuB,OACjCgD,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAElCD,EAAQC,GAAGE,iBAAiB,QAAS,WAAYrD,EAAKsD,UAAU9G,SASpE+G,gBAAiB,WACf,IACEvD,EAAOxD,KACPgH,EAAM,0CAA4ChH,KAAK6F,YAAc,gGAEvEoB,OAAOC,MAAOF,GACXG,KAAM,SAAUC,GACf,GAAIA,EAASC,GAEX,OAAOD,EAASE,OAGlBC,QAAQC,MAAM,uBAAyBJ,EAASJ,IAAM,uBAAyBI,EAASK,OAAS,KAAOL,EAASM,YACjHlE,EAAKjB,cAAgB,WAEtB4E,KAAM,SAAUvH,GACf,GAAoB,iBAATA,EAAoB,CAC7B4D,EAAKjB,cAAgB3C,EACrB4D,EAAKX,gBAAgB,sBAChB,CACL0E,QAAQC,MAAM,uBAAyBR,EAAM,wBAAyBpH,GACtE4D,EAAKjB,cAAgB,aAK7BM,gBAAiB,SAAS8E,GACxB3H,KAAK0C,sBAAuB,EAE5B,GAA2B,WAAvB1C,KAAKuC,cAKT,GAA2B,KAAvBvC,KAAKuC,cAAT,CAMA,IACEiB,EAAOxD,KACPgH,EAAM,2CAA6ChH,KAAK6F,YAAc,QAAU7F,KAAKuC,cAAgB,UAAYvC,KAAK4H,SAExHX,OAAOC,MAAOF,GACXG,KAAM,SAAUC,GACf,GAAIA,EAASC,GAEX,OAAOD,EAASS,OAGlBN,QAAQC,MAAM,uBAAyBJ,EAASJ,IAAM,uBAAyBI,EAASK,OAAS,KAAOL,EAASM,YACjH,MAAO,WAERP,KAAM,SAAUW,GACf,OAAQ,IAAIb,OAAOc,WAAaC,gBAAgBF,EAAK,cAEtDX,KAAM,SAAUvH,GACf4D,EAAKhB,kBAEL,IADA,IAAIyF,EAAWrI,EAAKsI,qBAAqB,QAChCvB,EAAI,EAAGA,EAAIsB,EAASrB,OAAQD,IAAM,CAIzC,IAHA,IACEwB,EAAeF,EAAStB,GAAGyB,SAC3BC,KACOC,EAAK,EAAGA,EAAKH,EAAavB,OAAQ0B,IACzCD,EAAMF,EAAaG,GAAIC,UAAYJ,EAAaG,GAAIE,YAEtDhF,EAAKhB,eAAeiG,KAAMJ,GAE5B7E,EAAKD,mBACLC,EAAKd,sBAAuB,EAC5Bc,EAAKkF,UAAU,wBA3BnB,MA6BU,SAAUlB,GAChBD,QAAQC,MAAO,kCAAmCA,UAtCpDxH,KAAK+G,mBA6CTD,UAAW,SAAU6B,GACnB,IACEnF,EAAOxD,KACPyF,EAAQkD,EAAQC,uBAElB,IAAK5I,KAAK2C,mBAAmB8C,GAC7B,CACEA,EAAMoB,iBAAkB,QAAS,WAAWrD,EAAKqF,UAAUF,KAC3D3I,KAAK2C,mBAAmB8C,IAAS,EAG/BA,EAAMqD,WAAa,GAErB9I,KAAK+I,UAAUJ,GAGjB,GAAIlD,EAAMuD,OACV,CACE,IAAIC,EAAcxD,EAAMyD,YACJzG,IAAhBwG,GAEFA,EACG9B,KAAK,WAAW3D,EAAK2F,UAAUR,KADlC,MAES,kBAEN,CACLlD,EAAM2D,QACN3D,EAAM4D,YAAc,EACpBrJ,KAAK6I,UAAUF,KAInBI,UAAW,SAAUJ,GACnBA,EAAQlC,UAAY3H,GAAGgH,YAAYC,cAAcC,YAAahG,KAAKsJ,aAAc,IAAK,IAAKtJ,KAAKuJ,oBAGlGJ,UAAW,SAAUR,GACnBA,EAAQlC,UAAY3H,GAAGgH,YAAYC,cAAcC,YAAahG,KAAKwJ,aAAc,IAAK,IAAKxJ,KAAKyJ,oBAGlGZ,UAAW,SAAUF,GACnBA,EAAQlC,UAAY3H,GAAGgH,YAAYC,cAAcC,YAAahG,KAAK0J,aAAc,IAAK,IAAK1J,KAAK2J,qBAIpGC,MAAO,SAAStK,GACDR,GAAG+K,KAAKC,aAAa/D,cAC3BgE,UAAU,2BACjBjL,GAAGe,OAAOC,aAAakK,WAAW,WAAYlL,GAAGmL,QAAQC,MAAMC,UAC/DrL,GAAGC,GAAGC,UAAUoL,cAAcC,cAAc,WAAY/K,MAtY3DR,GAAEmL,QAAQC,MAAMC,SAASzL,cAAgBA","sourcesContent":["/* CallList.js \n * \n * copyright (c) 2018, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * The TR-064 plugin and widget creates a interface to routers that are\n * configured by the TR-064 protocol, like the well known Fritz!Box routers.\n * \n * The protocol is described at: https://avm.de/service/schnittstellen/\n * \n * @author Christian Mayer\n * @since 0.11.0\n */\n\nqx.Class.define('cv.plugins.tr064.CallList', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Refresh, cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path);\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        'device': {},\n        'max': {transform: function(value) { return +value;}},\n        'columns': { 'default': 'type;date;nameOrCaller;tam' },\n        'TAM':          { 'default': 'phone_answering' },\n        'TAMColor':     { 'default': '' },\n        'TAMwait':      { 'default': 'control_reload' },\n        'TAMwaitColor': { 'default': '' },\n        'TAMplay':      { 'default': 'audio_play' },\n        'TAMplayColor': { 'default': '' },\n        'TAMstop':      { 'default': 'phone_answering' },\n        'TAMstopColor': { 'default': '' },\n        'typeIncoming':               { 'default': 'phone_call_in' },\n        'typeIncomingColor':          { 'default': '' },\n        'typeMissed':                 { 'default': 'phone_missed_in' },\n        'typeMissedColor':            { 'default': '' },\n        'typeOutgoing':               { 'default': 'phone_call_out' },\n        'typeOutgoingColor':          { 'default': '' },\n        'typeActiveIncoming':         { 'default': 'phone_ring_in' },\n        'typeActiveIncomingColor':    { 'default': '' },\n        'typeRejectedIncoming':       { 'default': 'phone_call_end_in' },\n        'typeRejectedIncomingColor':  { 'default': '' },\n        'typeActiveOutgoing':         { 'default': 'phone_ring_out' },\n        'typeActiveOutgoingColor':    { 'default': '' },\n        'typeUnknown':                { 'default': 'text_question_mark' },\n        'typeUnknownColor':           { 'default': '' }\n      };\n    }\n  },\n\n  /*\n  ***********************************************\n    EVENTS\n  ***********************************************\n  */\n  events: {\n    'tr064ListRefreshed': 'qx.event.type.Event' // event to support unit test\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    device: {\n      check: 'String',\n      init: ''\n    },\n    max: {\n      check: 'Number',\n      init: 0\n    },\n    columns:      { check: 'String' },\n    TAM:          { check: 'String' },\n    TAMColor:     { check: 'String' },\n    TAMwait:      { check: 'String' },\n    TAMwaitColor: { check: 'String' },\n    TAMplay:      { check: 'String' },\n    TAMplayColor: { check: 'String' },\n    TAMstop:      { check: 'String' },\n    TAMstopColor: { check: 'String' },\n    typeIncoming:               { check: 'String' },\n    typeIncomingColor:          { check: 'String' },\n    typeMissed:                 { check: 'String' },\n    typeMissedColor:            { check: 'String' },\n    typeOutgoing:               { check: 'String' },\n    typeOutgoingColor:          { check: 'String' },\n    typeActiveIncoming:         { check: 'String' },\n    typeActiveIncomingColor:    { check: 'String' },\n    typeRejectedIncoming:       { check: 'String' },\n    typeRejectedIncomingColor:  { check: 'String' },\n    typeActiveOutgoing:         { check: 'String' },\n    typeActiveOutgoingColor:    { check: 'String' },\n    typeUnknown:                { check: 'String' },\n    typeUnknownColor:           { check: 'String' }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __calllistUri: '',\n    __calllistList: undefined,\n    __refreshingCalllist: false,\n    /**\n     * Prevent warning \"Reference values are shared across all instances\"\n     * as the keys are unique a share doesn't matter:\n     * @lint ignoreReferenceField(__TAMeventAttached)\n     */\n    __TAMeventAttached: {},\n    \n    _getInnerDomString: function () {\n      this.refreshCalllist('initial');\n      return '<div class=\"actor\"><table class=\"TR064_calllist\"><tr><td>Loading TR-064...</td></tr></table></div>';\n    },\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', function () {\n        if( !this.__refreshingCalllist )\n        {\n          this.refreshCalllist('timer');\n        }\n      }, this);\n      this._timer.start();\n    },\n    _update: function(address, value) {\n      if( !this.__refreshingCalllist )\n      {\n        this.refreshCalllist('update');\n      }\n    },\n      \n    _displayCalllist: function() {\n      var \n        self = this,\n        clLi = this.getDomElement().getElementsByClassName('TR064_calllist')[0],\n        sid  = this.__calllistUri ? this.__calllistUri.replace(/.*sid=/,'') : '',\n        html = '',\n        types = {\n          0:  { name: this.getTypeUnknown()          , color: this.getTypeUnknownColor()           },\n          1:  { name: this.getTypeIncoming()         , color: this.getTypeIncomingColor()          },\n          2:  { name: this.getTypeMissed()           , color: this.getTypeMissedColor()            },\n          3:  { name: this.getTypeOutgoing()         , color: this.getTypeOutgoingColor()          },\n          9:  { name: this.getTypeActiveIncoming ()  , color: this.getTypeActiveIncomingColor()    },\n          10: { name: this.getTypeRejectedIncoming() , color: this.getTypeRejectedIncomingColor()  },\n          11: { name: this.getTypeActiveOutgoing()   , color: this.getTypeActiveOutgoingColor()    }\n        };\n      \n      this.__calllistList.forEach(function(cl){\n        var \n          audio = '',\n          type = (cl.Type in types) ? types[cl.Type] : types[0];\n        \n        if( cl.Path )\n        {\n          audio = '<audio preload=\"none\">'\n            + '<source src=\"resource/plugins/tr064/proxy.php?device=' + self.getDevice() + '&uri='+cl.Path+'%26sid='+sid+'\">'\n            + '</audio>'\n            + '<div class=\"tam clickable\">'\n            + cv.IconHandler.getInstance().getIconText( self.getTAM(), '*', '*', self.getTAMColor() )\n            + '</div>';\n        }\n        \n        html += '<tr>';\n        self.getColumns().split(';').forEach( function(col){\n          switch( col )\n          {\n            case 'type':\n              html += '<td>' + cv.IconHandler.getInstance().getIconText( type.name, '*', '*', type.color )  + '</td>';\n              break;\n            \n            case 'date':\n              html += '<td>' + cl.Date   + '</td>';\n              break;\n            \n            case 'name':\n              html += '<td>' + cl.Name   + '</td>';\n              break;\n            \n            case 'caller':\n              html += '<td>' + cl.Caller + '</td>';\n              break;\n            \n            case 'nameOrCaller':\n              if( cl.Name !== '' )\n              {\n                html += '<td>' + cl.Name   + '</td>';\n              } else {\n                html += '<td>' + cl.Caller + '</td>';\n              }\n              break;\n            \n            case 'tam':\n              html += '<td>' + audio + '</td>'\n              break;\n            \n          }\n        });\n        html += '</tr>';\n      });\n      clLi.innerHTML = html;\n      var tamList = clLi.getElementsByClassName('tam');\n      for( var i = 0; i < tamList.length; i++ )\n      {\n        tamList[i].addEventListener(\"click\", function(){ self.__playTAM(this); } );\n      }\n    },\n    \n    /**\n     * Fetch the TR-064 resource\n     *   /upnp/control/x_contact urn:dslforum-org:service:X_AVM-DE_OnTel:1 \n     *   GetCallList\n     */\n    _getCallListURI: function() {\n      var\n        self = this,\n        url = 'resource/plugins/tr064/soap.php?device=' + this.getDevice() + '&location=upnp/control/x_contact&uri=urn:dslforum-org:service:X_AVM-DE_OnTel:1&fn=GetCallList';\n      \n      window.fetch( url )\n        .then( function( response ) {\n          if( response.ok )\n          {\n            return response.json(); \n          }\n          // else:\n          console.error('Error: reading URL \"' + response.url + ' failed with status ' + response.status + ': ' + response.statusText );\n          self.__calllistUri = '<fail>';\n        })\n        .then( function( data ) {\n          if( typeof data === 'string' ) {\n            self.__calllistUri = data;\n            self.refreshCalllist('getCallListURI');\n          } else {\n            console.error('Error: reading URL \"' + url + ' failed with content:', data );\n            self.__calllistUri = '<fail>';\n          }\n        });\n    },\n\n    refreshCalllist: function(source) {\n      this.__refreshingCalllist = true;\n      \n      if( this.__calllistUri === '<fail>' )\n      {\n        return; // this problem won't fix anymore during this instance\n      }\n      \n      if( this.__calllistUri === '' )\n      {\n        this._getCallListURI();\n        return;\n      }\n      \n      var\n        self = this,\n        url = 'resource/plugins/tr064/proxy.php?device=' + this.getDevice() + '&uri=' + this.__calllistUri + '%26max=' + this.getMax();\n        \n      window.fetch( url )\n        .then( function( response ) {\n          if( response.ok )\n          {\n            return response.text(); \n          }\n          // else:\n          console.error('Error: reading URL \"' + response.url + ' failed with status ' + response.status + ': ' + response.statusText );\n          return '<xml/>';\n        })\n        .then( function( str ) {\n          return (new window.DOMParser()).parseFromString(str, \"text/xml\");\n        })\n        .then( function( data ) {\n          self.__calllistList = [];\n          var itemList = data.getElementsByTagName('Call');\n          for( var i = 0; i < itemList.length; i++ ) {\n            var\n              childrenList = itemList[i].children,\n              entry = {};\n            for( var ii = 0; ii < childrenList.length; ii++ ) {\n              entry[childrenList[ii].nodeName] = childrenList[ii].textContent;\n            }\n            self.__calllistList.push( entry );\n          }\n          self._displayCalllist();\n          self.__refreshingCalllist = false;\n          self.fireEvent('tr064ListRefreshed');\n        })\n        .catch( function( error ) { \n          console.error( 'TR-064 refreshCalllist() error:', error ); \n        });\n    },\n    \n    /**\n     * The EventListener for click on the TAM button.\n     */\n    __playTAM: function( element ) {\n      var\n        self = this,\n        audio = element.previousElementSibling;\n      \n      if( !this.__TAMeventAttached[audio] )\n      {\n        audio.addEventListener( 'ended', function(){self.__TAMstop(element)} );\n        this.__TAMeventAttached[audio] = true;\n      }\n      \n      if( audio.readyState < 4 ) // not ready yet\n      {\n        this.__TAMwait(element);\n      }\n      \n      if( audio.paused )\n      {\n        var playPromise = audio.play();\n        if( playPromise !== undefined )\n        {\n          playPromise\n            .then(function(){self.__TAMplay(element)})\n            .catch(function(){/*NOP*/});\n        }\n      } else {\n        audio.pause();\n        audio.currentTime = 0;\n        this.__TAMstop(element);\n      }\n    },\n    \n    __TAMwait: function( element ) {\n      element.innerHTML = cv.IconHandler.getInstance().getIconText( this.getTAMwait(), '*', '*', this.getTAMwaitColor() );\n    },\n    \n    __TAMplay: function( element ) {\n      element.innerHTML = cv.IconHandler.getInstance().getIconText( this.getTAMplay(), '*', '*', this.getTAMplayColor() );\n    },\n    \n    __TAMstop: function( element ) {\n      element.innerHTML = cv.IconHandler.getInstance().getIconText( this.getTAMstop(), '*', '*', this.getTAMstopColor() );\n    }\n  },\n\n  defer: function(statics) {\n    var loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/tr064/tr064.css');\n    cv.parser.WidgetParser.addHandler(\"calllist\", cv.plugins.tr064.CallList);\n    cv.ui.structure.WidgetFactory.registerClass(\"calllist\", statics);\n  }\n\n});"]}