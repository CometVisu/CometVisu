{"version":3,"sources":["../../../source/class/cv/plugins/Gauge.js"],"names":["steelseries","audioElement","thresholdRising","undefined","parameters","knobType","KnobType","STANDARD_KNOB","knobStyle","KnobStyle","SILVER","lcdColor","LcdColor","STANDARD","lcdDecimals","userLedColor","LedColor","GREEN_LED","userLedVisible","thresholdVisible","minMeasuredValueVisible","maxMeasuredValueVisible","foregroundType","ForegroundType","TYPE1","foregroundVisible","labelNumberFormat","LabelNumberFormat","playAlarm","alarmSound","customLayer","tickLabelOrientation","gaugeType","GaugeType","TickLabelOrientation","TANGENT","NORMAL","trendVisible","trendColors","RED_LED","CYAN_LED","useOdometer","odometerParams","odometerUseValue","fullScaleDeflectionTime","mainCtx","getCanvasContext","canvas","size","Math","min","width","height","doc","createElement","setAttribute","tween","freeAreaAngle","rotationOffset","angleRange","angleStep","odoPosX","lcdBuffer","trendUpBuffer","trendSteadyBuffer","trendDownBuffer","trendOffBuffer","odoGauge","odoBuffer","odoContext","value","minValue","odoValue","self","this","minMeasuredValue","maxValue","maxMeasuredValue","ledBlinking","userLedBlinking","ledTimerId","userLedTimerId","repainting","trendIndicator","TrendState","OFF","trendSize","trendPosX","trendPosY","angle","imageWidth","imageHeight","centerX","centerY","ledSize","ledPosX","ledPosY","userLedPosX","TYPE3","userLedPosY","lcdFontHeight","floor","stdFont","stdFontName","lcdFont","lcdFontName","lcdHeight","lcdWidth","lcdPosX","lcdPosY","odoPosY","shadowOffset","initialized","niceMinValue","niceMaxValue","niceRange","range","minorTickSpacing","majorTickSpacing","frameBuffer","createBuffer","frameContext","getContext","backgroundBuffer","backgroundContext","ledBufferOn","ledContextOn","ledBufferOff","ledContextOff","ledBuffer","userLedBufferOn","userLedContextOn","userLedBufferOff","userLedContextOff","userLedBuffer","minMeasuredValueBuffer","ceil","minMeasuredValueCtx","maxMeasuredValueBuffer","maxMeasuredValueCtx","pointerBuffer","pointerContext","foregroundBuffer","foregroundContext","lcdVisible","drawAreaSectionImage","ctx","start","stop","color","filled","strokeStyle","fillStyle","lineWidth","startAngle","translate","beginPath","moveTo","arc","stopAngle","fill","stroke","restore","niceScale","calcNiceNumber","PI","HALF_PI","RAD_FACTOR","TWO_PI","save","type","drawImage","createKnobImage","textRotationAngle","i","fontSize","alpha","valueCounter","majorTickCounter","maxNoOfMinorTicks","OUTER_POINT","MAJOR_INNER_POINT","MED_INNER_POINT","MINOR_INNER_POINT","TEXT_TRANSLATE_X","TEXT_WIDTH","MAX_VALUE_ROUNDED","parseFloat","toFixed","backgroundColor","labelColor","setAlpha","textAlign","textBaseline","font","getRgbaColor","thresholdCtx","thresholdBuffer","gradThreshold","createLinearGradient","addColorStop","lineTo","closePath","textColor","STANDARD_GREEN","shadowOffsetX","fillText"],"mappings":"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","sourcesContent":["/* Gauge.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates Gauge (in canvas) into the visualization\n *\n * @author NetFritz [NetFritz at gmx dot de]\n * @since 0.8.1\n *\n * @ignore(steelseries.*)\n * @asset(plugins/gauge/gauge.css)\n * @asset(plugins/gauge/dep/steelseries.js)\n * @asset(plugins/gauge/dep/tween.js)\n*/ \nqx.Class.define('cv.plugins.Gauge', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Update, cv.ui.common.Operate ],\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    pagejumpTarget          : { check: \"String\", nullable: true },\n    gaugeType               : { check: \"String\", nullable: true },\n    subtype                 : { check: \"String\", nullable: true },\n    gType                   : { check: \"String\", init: \"Radial\" },\n    titleString             : { check: \"String\", nullable: true },\n    unitString              : { check: \"String\", nullable: true },\n    unitStringVisible       : { check: \"Boolean\", init: false },\n    size                    : { check: \"Number\", init: 150 },\n    width                   : { check: \"Number\", init: 320 },\n    height                  : { check: \"Number\", init: 140 },\n    minValue                : { check: \"Number\", init: 0 },\n    maxValue                : { check: \"Number\", init: 100 },\n    frameDesign             : { check: \"String\", nullable: true },\n    backgroundColor         : { check: \"String\", nullable: true },\n    foregroundType          : { check: \"String\", nullable: true },\n    pointerType             : { check: \"String\", nullable: true },\n    pointerColor            : { check: \"String\", nullable: true },\n    lcdColor                : { check: \"String\", nullable: true },\n    lcdVisible              : { check: \"Boolean\", init: false },\n    lcdDecimals             : { check: \"Number\", nullable:true },\n    ledVisible              : { check: \"Boolean\", init: false },\n    ledColor                : { check: \"String\", nullable: true },\n    valueColor              : { check: \"String\", nullable: true },\n    trendVisible            : { check: \"Boolean\", init: false },\n    thresholdRising         : { check: \"Boolean\", init: false },\n    threshold               : {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyThreshold\"\n    },\n    thresholdVisible        : { check: \"Boolean\", init: false },\n    autoScroll              : { check: \"Boolean\", init: false },\n    valuesNumeric           : { check: \"Boolean\", init: false }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'target': {target: 'pagejumpTarget'},\n        'type': { target: \"gType\", \"default\": \"Radial\" },\n        'subtype': { },\n        'titleString': { },\n        'unitString': { },\n        'unitStringVisible': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'size': { \"default\": 150, transform: parseFloat },\n        'width': { \"default\": 320, transform: parseFloat },\n        'height': { \"default\": 140, transform: parseFloat },\n        'minValue': { \"default\": 0, transform: parseFloat },\n        'maxValue': { \"default\": 100, transform: parseFloat },\n        'framedesign': { target: 'frameDesign' },\n        'background': { target: 'backgroundColor' },\n        'lcdVisible': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'lcdDecimals': { \"default\": 0, transform: parseInt },\n        'ledVisible': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'valueColor': { },\n        'trendVisible': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'thresholdRising': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'threshold': { \"default\": 0, transform: parseFloat },\n        'autoScroll': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'valuesNumeric': {\n          transform: function(value) {\n            return value === \"true\";\n          }\n        }\n      };\n    },\n\n    makeAddressListFn: function( src, transform, mode, variant ) {\n      return [ true, variant ];\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __gaugeElement: null,\n    __updateQueue: null,\n\n    _getInnerDomString: function() {\n      return '<div class=\"actor' + (this.getPagejumpTarget() ? 'clickable' : '') + '\"><canvas id=\"gauge_' + this.getPath() + '\"></canvas></div>';\n    },\n\n    // overridden\n    _onDomReady: function() {\n      var additional = {\n        gaugeType: this.getSubtype() ? steelseries.GaugeType[this.getSubtype()] : undefined,\n        frameDesign: this.getFrameDesign() ? steelseries.FrameDesign[this.getFrameDesign()] : undefined,\n        backgroundColor: this.getBackgroundColor() ? steelseries.BackgroundColor[this.getBackgroundColor()] : undefined,\n        valueColor: this.getValueColor() ? steelseries.ColorDef[this.getValueColor()] : steelseries.ColorDef.RED,\n        foregroundType: steelseries.ForegroundType.TYPE1,\n        pointerType: steelseries.PointerType.TYPE1,\n        pointerColor: steelseries.ColorDef.RED,\n        lcdColor: steelseries.LcdColor.STANDARD,\n        ledColor: steelseries.LedColor.RED_LED\n      };\n      var params = Object.assign({}, cv.data.Model.getInstance().getWidgetData(this.getPath()), additional );\n      this.__gaugeElement = new steelseries[this.getGType()](\"gauge_\"+this.getPath(), params);\n      this.base(arguments);\n    },\n\n    // overridden\n    getValueElement: function() {\n      return this.getDomElement().querySelector('#gauge_' + this.getPath());\n    },\n\n    // property apply\n    _applyThreshold: function(value) {\n      if (value > 0) {\n        this.setThresholdVisible(true);\n      }\n    },\n\n    // overridden\n    _processIncomingValue: function(address, data) {\n      if (address && data) {\n        return this.defaultUpdate(address, data, this.getDomElement(), true, this.getPath());\n      }\n      return null;\n    },\n\n    /**\n     * Handle the incoming data\n     * @param value {var} Processed incoming value\n     * @param address {String} source address of the value\n     */\n    handleUpdate: function( value, address) {\n      if (!address || value === undefined) { return; }\n\n      var variant = this.getAddress()[address][2];\n      var gaugeElement = this.__gaugeElement;\n      if (gaugeElement) {\n        switch (variant) {\n          case 'average':\n            if (gaugeElement.setValueAnimatedAverage) {\n              gaugeElement.setValueAnimatedAverage(value);\n            }\n            break;\n          case 'setValue':\n            if (gaugeElement.setValue) {\n              gaugeElement.setValue(value);\n            }\n            break;\n          case 'trend':\n            if (gaugeElement.setTrend) {\n              var trend;\n              if (value > 0) {\n                trend = steelseries.TrendState.UP;\n              }\n              else if (value < 0) {\n                trend = steelseries.TrendState.DOWN;\n              }\n              else {\n                trend = steelseries.TrendState.STEADY;\n              }\n              gaugeElement.setTrend(trend);\n            }\n            break;\n          case 'threshold':\n            if (gaugeElement.setThreshold) {\n              gaugeElement.setThreshold(value);\n            }\n            break;\n          case 'min':\n            if (gaugeElement.setMinValue) {\n              gaugeElement.setMinValue(value);\n            }\n            break;\n          case 'max':\n            if (gaugeElement.setMaxValue) {\n              gaugeElement.setMaxValue(value);\n            }\n            break;\n          default:\n            if (gaugeElement.setValueAnimatedLatest) {\n              gaugeElement.setValueAnimatedLatest(value);\n            }\n            if (gaugeElement.setValueAnimated) {\n              gaugeElement.setValueAnimated(value);\n            }\n        }\n      }\n    },\n\n    // overridden\n    _action: function() {\n      if (this.getPagejumpTarget()) {\n        cv.TemplateEngine.getInstance().scrollToPage( this.getPagejumpTarget() );\n      }\n    }\n  },\n\n  defer: function(statics) {\n    var loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/gauge/gauge.css');\n    loader.addScripts([\n      'plugins/gauge/dep/tween.js',\n      'plugins/gauge/dep/steelseries.js'\n    ]);\n    cv.parser.WidgetParser.addHandler(\"gauge\", cv.plugins.Gauge);\n    cv.ui.structure.WidgetFactory.registerClass(\"gauge\", statics);\n  }\n});"]}