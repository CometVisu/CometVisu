{"version":3,"sources":["../../../source/class/cv/plugins/OpenweatherMap.js"],"names":["forecastToday","units","options","forecast24hItems","parseInt","forecastDailyItems","showSunrise","Date","ext","locales","a","A","b","B","this","each","i","e","$element","$","hasClass","_process","currentURL","baseURL","paramsDefault","join","forecastURL","length","addClass","appendTo","children","_request","data","cod","sunrise","sys","sunset","id","parent","css","html","description","_processDataDetailed","_processDataForecast","_processDataDaily","forecastDailyURL","after","url","detailItems","$item","dt","jOWM","theme","_proccessSunrise","append","dataItems","index","elem"],"mappings":"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","sourcesContent":["/* OpenweatherMap.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates OpenWeatherMap data.\n *\n * @author Stefan Borchert (stefan@borchert.cc)\n * @author Matthias\n * @since 0.9.0\n * @asset(plugins/openweathermap/owm_core.js)\n * @asset(plugins/openweathermap/owm_basic_style.css)\n * @asset(plugins/openweathermap/owm_weathericon.css)\n */\nqx.Class.define('cv.plugins.OpenweatherMap', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: cv.ui.common.Refresh,\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function(props) {\n    props.refresh = props.refresh * 60;\n    this.base(arguments, props);\n    this.__options = {};\n    Object.keys(props).forEach(function (key) {\n      if (props[key]) {\n        this.__options[key] = props[key];\n      }\n    }, this);\n    if (cv.TemplateEngine.getInstance().isDomFinished()) {\n      this._refreshAction();\n    } else {\n      qx.event.message.Bus.subscribe(\"setup.dom.finished\", function () {\n        // init once\n        this._refreshAction();\n      }, this);\n    }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        'class': { target: 'cssClass' },\n        'lang':   { },\n        'owID':  { },\n        'q':   { },\n        'lat':   { },\n        'lon':   { },\n        'units':   { },\n        'type':   { },\n        'forecast24hItems':   { },\n        'forecastDailyItems':   { },\n        'detailItems':   { },\n        'showSunrise': { },\n        'appid':   { },\n        'description':   { }\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    cssClass: {\n      check: \"String\",\n      nullable: true\n    },\n    lang: {\n      check: \"String\",\n      nullable: true\n    },\n    owID: {\n      check: \"String\",\n      nullable: true\n    },\n    q: {\n      check: \"String\",\n      nullable: true\n    },\n    lat: {\n      check: \"String\",\n      nullable: true\n    },\n    lon: {\n      check: \"String\",\n      nullable: true\n    },\n    units: {\n      check: \"String\",\n      nullable: true\n    },\n    type: {\n      check: \"String\",\n      nullable: true\n    },\n    forecast24hItems: {\n      check: \"String\",\n      nullable: true\n    },\n    forecastDailyhItems: {\n      check: \"String\",\n      nullable: true\n    },\n    showSunrise: {\n      check: \"String\",\n      nullable: true\n    },\n    detailItems: {\n      check: \"String\",\n      nullable: true\n    },\n    appid: {\n      check: \"String\",\n      nullable: true\n    },\n    description: {\n      check: \"String\",\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __options: null,\n\n    _getInnerDomString: function(){\n      var classes = \"widget clearfix text openweathermap\";\n      if (this.getCssClass()) {\n        classes+=\" \"+this.getCssClass();\n      }\n      return '<div class=\"'+classes+'\"><div id=\"owm_' + this.getPath() + '\" class=\"openweathermap_value\"></div></div>';\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', this._refreshAction, this);\n      this._timer.start();\n      // call once immediately\n      this._refreshAction();\n    },\n\n    _refreshAction: function() {\n      var elem = $(this.getDomElement());\n      elem.openweathermap(this.__options);\n    }\n  },\n\n  defer: function(statics) {\n    var loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/openweathermap/owm_basic_style.css');\n    loader.addStyles('plugins/openweathermap/owm_weathericon.css');\n    loader.addScripts('plugins/openweathermap/owm_core.js');\n    // register the parser\n    cv.parser.WidgetParser.addHandler(\"openweathermap\", cv.plugins.OpenweatherMap);\n    cv.ui.structure.WidgetFactory.registerClass(\"openweathermap\", statics);\n  }\n});\n"]}