{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/RssLog.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Refresh","Update","Operate","properties","src","check","nullable","transform","apply","filter","datetime","init","mode","limit","timeformat","itemoffset","itemack","future","width","height","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseFormat","parseAddress","parseRefresh","default","value","parseFloat","query","members","__P_13_0","__P_13_1","__P_13_2","__P_13_3","__P_13_4","__P_13_5","__P_13_6","__P_13_7","__P_13_8","normalizeUrl","parts","util","Uri","parseUri","substring","indexOf","queryKey","_applySrc","match","_getInnerDomString","style","getWidth","getHeight","_setupRefreshAction","_timer","event","Timer","getRefresh","refreshRSSlog","_onDomReady","$$domReady","plugins","RssLog","prototype","base","call","_update","_action","brss","String","htmlStringToDomElement","getPath","label","document","querySelector","title","innerText","popup","PopupHandler","showPopup","content","parent","Tree","getParent","Object","entries","margin","forEach","key_value","stop","stopPropagation","Registration","addListener","getCurrentDomElement","classList","contains","getItemack","once","Model","isWriteAddress","getAddress","addr","overflow","isBig","getSrc","error","__P_13_9","send","isEnabled","start","requestData","assign","f","getFilter","getLimit","getFuture","io","request","Xhr","ResourceManager","getInstance","toUri","accept","method","ev","getTarget","getResponse","__P_13_11","ul","c","innerHTML","appendChild","dummyDiv","rect","getBoundingClientRect","itemheight","Math","round","bottom","top","parentNode","removeChild","widget","displayheight","widgetRect","labelElem","labelElemRect","displayrows","__P_13_10","result","__P_13_12","items","_this","selector","debug","getAttribute","createElement","itemnum","getMode","parseInt","dataset","last","Date","strftime","i","idx","item","class","row","rowElem","itemHtml","mappedValue","applyMapping","state","mapping","self","_applyValueToDom","span","e","add","tmp","tags","_onTap","__P_13_13","getLink","getTitle","getDescription","replace","entryDate","publishedDate","getTimeformat","toLocaleDateString","toLocaleTimeString","thisday","getCurrentTarget","id","toggle","defaultValue2DOM","req","set","u","defer","ScriptLoader","addStyles","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* RssLog.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * @author Michael Markstaller\n * @since 2011\n * @asset(plugins/rsslog/*)\n */\nqx.Class.define('cv.plugins.RssLog', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Refresh, cv.ui.common.Update, cv.ui.common.Operate],\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    src: {\n      check: 'String',\n      nullable:true,\n      transform: 'normalizeUrl',\n      apply: '_applySrc'\n    },\n    filter: {\n      check: 'String',\n      nullable:true\n    },\n    datetime: {\n      check: 'Boolean',\n      init: true\n    },\n    mode: {\n      check: 'String',\n      init: 'last'\n    },\n    limit: {\n      check: 'Number',\n      init: 0\n    },\n    timeformat: {\n      check: 'String',\n      nullable:true\n    },\n    itemoffset: {\n      check: 'Number',\n      init: 0\n    },\n    itemack: {\n      check: ['modify', 'display', 'disable'],\n      init: 'modify'\n    },\n    future:     {\n      check: 'String',\n      nullable: true\n    },\n    width: {\n      check: 'String',\n      nullable: true\n    },\n    height: {\n      check: 'String',\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path);\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        src:    {},\n        width:  {},\n        height: {},\n        filter: {},\n        datetime:   {\n          'default': true,\n          transform: function(value) {\n            if (typeof value === 'boolean') {\n              return value;\n            }\n            return value === 'true';\n          }\n        },\n        mode:       { 'default': 'last' },\n        limit:      { 'default': 0, transform: parseFloat },\n        timeformat: {},\n        itemack:    { 'default': 'modify'}, // allowed: modify, display, disable\n        future:     {},\n        query:      {}\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __request: null,\n    __html: null,\n    __wrapper: null,\n    __fixedRequestData: null,\n    __external : false,\n\n    __separatordate: null,\n    __separatoradd: null,\n    __isFuture: null,\n    __separatorprevday: null,\n\n    /**\n     * Strip querystring from URL and store is as Map\n     * @param value {String} URL\n     * @return {String} normalized URL\n     */\n    normalizeUrl: function(value) {\n      this.__fixedRequestData = {};\n      if (value && value.indexOf('?') > 0) {\n        const parts = qx.util.Uri.parseUri(value);\n        value = value.substring(0, value.indexOf('?'));\n        this.__fixedRequestData = parts.queryKey;\n      }\n      return value;\n    },\n\n    // property apply\n    _applySrc: function(value) {\n      this.__external = !value.match(/rsslog\\.php/) && !value.match(/rsslog_mysql\\.php/) && !value.match(/rsslog_oh\\.php/);\n    },\n\n    _getInnerDomString: function () {\n      let style = '';\n      if (this.getWidth()) {\n        style += 'width:' + this.getWidth() + ';';\n      }\n      if (this.getHeight()) {\n        style += 'height:' + this.getHeight();\n      }\n\n      return '<div class=\"actor rsslogBody\"><div class=\"rsslog_inline\" id=\"rss_' + this.getPath() + '\" style=\"' + style + '\"></div></div>';\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', function () {\n        this.refreshRSSlog();\n      }, this);\n      this._timer.start();\n    },\n\n    _onDomReady: function () {\n      if (!this.$$domReady) {\n        this.base(arguments);\n        qx.event.message.Bus.subscribe('path.' + this.getParentPage().getPath() + '.beforePageChange', this.refreshRSSlog, this);\n        this.__html = '<span class=\"mappedValue\"></span><span>{text}</span>';\n        if (this.getDatetime()) {\n          this.__html = '{date}: ' + this.__html;\n        }\n        this.__wrapper = 'li';\n\n        if (cv.Config.currentPageId === this.getParentPage().getPath()) {\n          this.refreshRSSlog();\n        }\n      }\n    },\n\n    _update: function () {\n      this.refreshRSSlog();\n    },\n\n    _action: function () {\n      const brss = cv.util.String.htmlStringToDomElement('<div class=\"rsslog_popup\" id=\"rss_' + this.getPath() + '_big\"/>');\n      const label = document.querySelector('#' + this.getPath() + ' .label');\n      const title = label ? (label.innerText || '') : '';\n      const popup = cv.ui.PopupHandler.showPopup('rsslog', {title: title, content: brss});\n      const parent = cv.util.Tree.getParent(brss, 'div', null, 1)[0];\n      Object.entries({height: '90%', width: '90%', margin: 'auto'}).forEach(function(key_value) {\n parent.style[key_value[0]]=key_value[1]; \n}); // define parent as 100%!\n      if (this._timer) {\n        this._timer.stop();\n      }\n      qx.event.Registration.addListener(brss, 'tap', function(event) {\n        // don't let the popup know about the click, or it will close on touch-displays\n        event.stopPropagation();\n      }, this);\n      qx.event.Registration.addListener(popup, 'close', function () {\n        // reload main data - but only once (popup and popup_background are caught\n        // here).\n        // But delay it so that any change done to the data has a chance to\n        // arrive here.\n\n        if (popup.getCurrentDomElement() && popup.getCurrentDomElement().classList.contains('popup') && this.getItemack() === 'modify') {\n          qx.event.Timer.once(function () {\n            this.refreshRSSlog();\n          }, this, 100);\n          for (let addr in this.getAddress()) {\n            if (!cv.data.Model.isWriteAddress(this.getAddress()[addr])) {\n continue; \n}// skip when write flag not set\n            cv.TemplateEngine.getInstance().visu.write(addr, cv.Transform.encode(this.getAddress()[addr].transform, 0));\n          }\n        }\n      }, this);\n      popup.getCurrentDomElement().querySelector('.main').style.overflow = 'auto';\n      this.refreshRSSlog(true);\n    },\n\n    refreshRSSlog: function (isBig) {\n      const src = this.getSrc();\n      if (!src) {\n        this.error('no src given, aborting RSS-Log refresh');\n        return;\n      }\n      if (!this.__request) {\n        if (!this.__external) {\n          this.__refreshRss();\n        } else {\n          this.error('external sources are no longer supported');\n        }\n      }\n      this.__request.setUserData('big', isBig);\n      if (this.__request instanceof qx.io.request.Xhr) {\n        this.__request.send();\n      }\n\n      const refresh = this.getRefresh();\n      if (typeof (refresh) !== 'undefined' && refresh) {\n        // reload regularly\n        if (this._timer && this._timer.isEnabled()) {\n          this._timer.start();\n        }\n      }\n    },\n\n    /**\n     * Fetch data from builtin PHP script\n     */\n    __refreshRss: function() {\n      const src = this.getSrc();\n      const requestData = Object.assign({}, this.__fixedRequestData);\n      if (this.getFilter()) {\n        requestData.f = this.getFilter();\n      }\n      if (this.getLimit()) {\n        requestData.limit = this.getLimit();\n      }\n      if (this.getFuture()) {\n        requestData.future = this.getFuture();\n      }\n      requestData.j = 1;\n      this.__request = new qx.io.request.Xhr(qx.util.ResourceManager.getInstance().toUri(src));\n      this.__request.set({\n        accept: 'application/json',\n        requestData: requestData,\n        method: 'GET'\n      });\n      this.__request.addListener('success', this.__updateRssContent, this);\n      this.__request.addListener('error', function(ev) {\n        this.error('C: #rss_%s, Error: %s, Feed: %s', this.getPath(), ev.getTarget().getResponse(), src);\n      }, this);\n    },\n\n    __prepareContentElement: function(ul, c) {\n      c.innerHTML = '';\n\n      c.appendChild(ul);\n\n      // get height of one entry, calc max num of display items in widget\n      let displayrows = parseInt(c.dataset['last_rowcount'], 10) || 0;\n      ul.innerHTML = '<li class=\"rsslogRow odd\" id=\"dummydiv\">.</li>';\n      const dummyDiv = c.querySelector('#dummydiv');\n      const rect = dummyDiv.getBoundingClientRect();\n      const itemheight = Math.round(rect.bottom - rect.top);\n      dummyDiv.parentNode.removeChild(dummyDiv);\n      if (itemheight !== 0) {\n        const widget = c.parentNode.parentNode; // get the parent widget\n        const widgetRect = widget.getBoundingClientRect();\n        let displayheight = Math.round(widgetRect.bottom - widgetRect.top);\n        const labelElem = widget.querySelector('.label');\n        if (labelElem) {\n          // max. height of actor is widget-label(if exists)\n          const labelElemRect = labelElem.getBoundingClientRect();\n          displayheight -= Math.round(labelElemRect.bottom - labelElemRect.top);\n        }\n        displayrows = Math.floor(displayheight / itemheight);\n      }\n      c.dataset['last_rowcount'] = displayrows;\n      return displayrows;\n    },\n\n    __updateRssContent: function(ev) {\n      const result = ev.getTarget().getResponse();\n      if (typeof result === 'string') {\n        // no json -> error\n        this.error(result);\n        return;\n      }\n      this.__updateContent(result.responseData.feed.entries);\n    },\n\n    __updateContent: function(items) {\n      const isBig = this.__request.getUserData('big');\n      const selector = '#rss_' + this.getPath() + (isBig === true ? '_big' : '');\n      const c = document.querySelector(selector);\n      const itemack = isBig === true ? this.getItemack() : (this.getItemack() === 'modify' ? 'display' : this.getItemack());\n\n      this.debug('ID: '+c.getAttribute('id')+', Feed: '+this.getSrc());\n\n      const ul = document.createElement('ul');\n      const displayrows = this.__prepareContentElement(ul, c);\n\n      const itemnum = items.length;\n      this.debug('C: #'+this.getPath()+', '+itemnum+' element(s) found, '+displayrows+' displayrow(s) available');\n\n      let itemoffset = 0; // correct if mode='last' or itemnum<=displayrows\n\n      if (itemnum > displayrows) { // no need to check mode if items are less than rows\n        if (this.getMode() === 'first') {\n          itemoffset = itemnum - displayrows;\n        }\n        if (this.getMode() === 'rollover') {\n          itemoffset = parseInt(c.dataset['itemoffset'], 10) || 0;\n          if (itemoffset === itemnum) {\n            itemoffset = 0;\n          }\n          c.dataset['itemoffset'] = itemoffset + 1;\n        }\n      }\n\n      let row = 'rsslogodd';\n      let last = itemoffset + displayrows;\n      last = (last > itemnum) ? itemnum : last;\n\n      this.__separatordate = new Date().strftime('%d');\n      this.__separatoradd = false;\n      this.__separatorprevday = false;\n      this.__isFuture = false;\n\n      for (let i = itemoffset; i < last; i++) {\n        this.debug('C: #'+this.getPath()+', processing item: '+i+' of '+itemnum);\n        let idx = i;\n        idx = (i >= itemnum) ? (idx -= itemnum) : idx;\n\n        const item = items[idx];\n        const itemHtml = this.__getItemHtml(item, isBig);\n\n        const rowElem = qx.dom.Element.create('li', {'class': 'rsslogRow ' + row});\n        rowElem.innerHTML = itemHtml;\n\n        if (item.mapping && item.mapping !== '') {\n          const mappedValue = this.applyMapping(itemack === 'disable' ? 0 : item.state, item.mapping);\n          const span = rowElem.querySelector('.mappedValue');\n          const self = this;\n          this.defaultValue2DOM(mappedValue, function(e) {\n self._applyValueToDom(span, e); \n});\n        }\n        if (this.__separatoradd && idx !== 0) {\n          rowElem.classList.add('rsslog_separator');\n          this.__separatorprevday = true;\n        } else {\n          this.__separatorprevday = false;\n        }\n\n        if (this.__separatorprevday === true) {\n          rowElem.classList.add('rsslog_prevday');\n        }\n\n        if (this.__isFuture) {\n          rowElem.classList.add((row === 'rsslogodd') ? 'rsslog_futureeven' : 'rsslog_futureodd');\n        }\n\n        rowElem.dataset['id'] = item.id;\n        rowElem.dataset['mapping'] = item.mapping;\n        if (item.tags) {\n          const tmp = rowElem.querySelector('span');\n          if (Array.isArray(item.tags)) {\n            tmp.classList.add.apply(tmp.classList, item.tags);\n          } else {\n            tmp.classList.add(item.tags);\n          }\n        }\n        if (item.state === '1' && itemack !== 'disable') {\n          rowElem.classList.add('rsslog_ack');\n        }\n\n        if (itemack === 'modify') {\n          qx.event.Registration.addListener(rowElem, 'tap', this._onTap, this);\n        }\n        ul.appendChild(rowElem);\n\n        // Alternate row classes\n        row = (row === 'rsslogodd') ? 'rsslogeven' : 'rsslogodd';\n      }\n    },\n\n    __getItemHtml: function(item, isBig) {\n      let itemHtml = '';\n      if (!this.__external) {\n        itemHtml = this.__html;\n\n        itemHtml = itemHtml.replace(/\\{text\\}/, item.content);\n        const entryDate = new Date(item.publishedDate);\n        if (entryDate) {\n          itemHtml = (this.getTimeformat())\n            ? (itemHtml.replace(/\\{date\\}/, entryDate.strftime(this.getTimeformat()) + '&nbsp;'))\n            : (itemHtml.replace(/\\{date\\}/, entryDate.toLocaleDateString() + ' ' + entryDate.toLocaleTimeString() + '&nbsp;'));\n          const thisday = entryDate.strftime('%d');\n          this.__separatoradd = ((this.__separatordate > 0) && (this.__separatordate !== thisday));\n          this.__separatordate = thisday;\n          this.__isFuture = (entryDate > new Date());\n        } else {\n          itemHtml = itemHtml.replace(/\\{date\\}/, '');\n        }\n      } else {\n        if (isBig) {\n          return '<b><a href=\"' + item.getLink() + '\">' + item.getTitle() + '</a></b><br/>' + item.getDescription();\n        } \n          return '<b>' + item.getTitle() + '</b><br/>' + item.getDescription();\n      }\n\n      return itemHtml;\n    },\n\n    _onTap: function(ev) {\n      const item = ev.getCurrentTarget();\n\n      const id = item.dataset['id'];\n      const mapping = item.dataset['mapping'];\n      item.classList.toggle('rsslog_ack');\n      const state = +item.classList.contains('rsslog_ack'); // the new state is the same as hasClass\n      if (mapping && mapping !== '') {\n        const mappedValue = this.applyMapping(state, mapping);\n        const span = item.querySelector('.mappedValue');\n        span.innerHTML = '';\n        const self = this;\n        this.defaultValue2DOM(mappedValue, function(e) {\n self._applyValueToDom(span, e); \n});\n      }\n      const req = new qx.io.request.Xhr(this.__request.getUrl());\n      req.set({\n        method: 'GET',\n        requestData: Object.assign({}, this.__fixedRequestData, {\n          'u': id,\n          'state': state\n        }),\n        accept: 'application/json'\n      });\n      req.send();\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/rsslog/rsslog.css');\n    cv.parser.WidgetParser.addHandler('rsslog', cv.plugins.RssLog);\n    cv.ui.structure.WidgetFactory.registerClass('rsslog', statics);\n  }\n});\n"]}