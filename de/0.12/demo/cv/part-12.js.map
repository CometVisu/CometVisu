{"version":3,"sources":["../../../source/class/cv/plugins/Rss.js"],"names":["$","fn","rssfeed","url","options","$e","e","api","_process","data","responseData","msg","responseDetails","html","feeds","feed","row","media","xmlEntries","string","xml","navigator","appName","async","loadXML","DOMParser","parseFromString","getXMLDocument","xmlString","getElementsByTagName","header","link","description","title","i","entries","length","entry","publishedDate","entryDate","Date","pubDate","toLocaleDateString","toLocaleTimeString","content","snippet","contentSnippet","xmlMedia","m","xmlUrl","getAttribute","xmlType","xmlSize","split","pop","formatFilesize","bytes","Math","pow","floor","toFixed","cv","util","ScriptLoader","markAsLoaded","$$dbClassInfo","dependsOn","qx.Class","usage","require","cv.ui.structure.AbstractWidget","cv.ui.common.Refresh"],"mappings":"uGAACA,EAAAC,GAAEC,QAAU,SAAAC,EAAAC,EAAqBH,sLAoBjC,IAAAI,EAAAL,EAAAM,sQAgBAC,GAAA,qEASCC,EAASF,EAAAG,EAAAC,aAAAN,+FAYLO,EAAQF,EAAMG,gBAEdZ,EAAAM,GAAAO,KAAO,4BAAPF,EAAA,oBAMW,IAAAH,EAFJ,SAAAF,EAAAG,EAAAL,GAGK,IAAAU,EAHLL,EAAAM,KAIL,IAAAD,EAAW,OAAA,EACX,IAAAD,EAAA,GAAYG,EAAA,MACF,GAAAZ,EAAAa,MAAF,IACRC,EA0CF,SAAOC,GACR,IAEDC,EACE,GAAA,+BATKC,UAAAC,QASL,2CACAC,MAAK,QACNH,EAXMI,QAAAL,QAcLC,GAAA,IAAKK,WAAaC,gBAAeP,EAAK,YACtC,OAAAC,EA3DOO,CAAAlB,EAAAmB,WAOMC,qBAAA,QACEzB,EAAA0B,SAAFjB,GARN,mCASLC,EAAAiB,KAAa,YAAAjB,EAAAkB,YAAA,KAAAlB,EAAAmB,MAAA,cACJpB,GAAA,4BACK,IAAA,IAXTqB,EAAA,EAAAA,EAAApB,EAAAqB,QAAAC,OAAAF,IAAA,CAYG,IAAAG,EAZHvB,EAAAqB,QAAAD,GAAA,GAAAG,EAAPC,cAeD,IAAAC,EAAA,IAAAC,KAAAH,EAAAC,eA1C6BG,EAAAF,EAAAG,qBAAA,IAAAH,EAAAI,qBAAA,sLAkDhC,GAAAvC,EAAUwC,QAAE,CACc,GAAAxC,EAAMyC,SAAA,IAAAR,EAAAS,eAAzB,IADKF,EAAAP,EAAAS,oBAECF,EAAMP,EAAAO,QACL/B,GAAI,MAAE+B,EAAA,OACT,GAJCxC,EAAAa,OAAAC,EAAAkB,OAAA,EAAA,CAKV,IAAAW,EAAU7B,EAAAgB,GAAAL,qBAAA,aAAE,GAAAkB,EAAMX,OAAA,EAAA,CAARvB,GALA,mDAMV,IAAA,IAAQmC,EAAA,EAAAA,EAAAD,EAAAX,OAAAY,IAAA,CAAE,IAAAC,EAAMF,EAAAC,GAAAE,aAAA,OANNC,EAAAJ,EAAAC,GAAAE,aAAA,QAOVE,EAAWL,EAAAC,GAAAE,aAAA,UAAErC,GAAM,gBAAAoC,EAAA,iCAAAA,EAAAI,MAAA,KAAAC,MAAA,SAAAH,EAAA,KAAAI,EAAAH,GAAA,SACnBvC,GAAA,cAAWA,GARD,QAUDG,EAAF,OAAPA,EAAS,OACT,MACUH,GAAA,cACCb,EAAAM,GAAAO,KAAIA,oGAQjB,OAAA2C,EAASC,KAAAC,IAAA,KAAAD,KAAAE,MAAArD,KAAAsD,QAAA,GAAA,uCAAAtD,aAmBNuD,GAAAC,KAnBMC,aAAAC,aAAA,gDAqBP,WACE,IAAAC,GACAC,WACDC,YA/F6BC,MAAA,UAkGhCC,SAAO,GAELC,kCACED,SAAQ,GAEXE,wBAvGFF,SAAA,u6DA4FG","sourcesContent":["/* Rss.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates zrssfeed to display RSS-Feeds via Google-API \n * and a parser for local feeds using jQuery 1.5+ into CometVisu.\n * rssfeedlocal is derived from simplerss and zrssfeed\n * rssfeedlocal is mainly meant to be used with rsslog.php and plugins\n *\n * <pre class=\"sunlight-highlight-xml\">\n *   &lt;rss src=&quot;/visu/plugins/rss/rsslog.php&quot; refresh=&quot;300&quot; link=&quot;false&quot; title=&quot;false&quot;&gt;&lt;/rss&gt;\n *   &lt;rss src=&quot;http://www.tagesschau.de/xml/rss2&quot; refresh=&quot;300&quot;&gt;Test API&lt;/rss&gt;\n *   &lt;rss src=&quot;/visu/plugins/rss/tagesschau-rss2.xml&quot; refresh=&quot;300&quot; header=&quot;true&quot; date=&quot;true&quot;&gt;&lt;/rss&gt;\n * </pre>\n *\n * @author Michael Markstaller\n * @since 2011\n * @asset(plugins/rss/dep/zrssfeed/jquery.zrssfeed.js)\n */\nqx.Class.define('cv.plugins.Rss', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Refresh],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'src': {},\n        'width': { \"default\": \"\" },\n        'height': { \"default\": \"\" },\n        'limit': { \"default\": 10 },\n        'header': { \"default\": true },\n        'date': { \"default\": true },\n        'content': { \"default\": true },\n        'snippet': { \"default\": true },\n        'showerror': { \"default\": true },\n        'ssl': { \"default\": false },\n        'linktarget': { \"default\": \"_new\" },\n        'link': { \"default\": true },\n        'title': { \"default\": true }\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    src: { check: \"String\", init: \"\" },\n    'width': { init: \"\" },\n    'height': { init: \"\" },\n    'limit': { init: 10 },\n    'header': { init: true },\n    'date': { init: true },\n    'content': { init: true },\n    'snippet': { init: true },\n    'showerror': { init: true },\n    'ssl': { init: false },\n    'linktarget': { init: \"_new\" },\n    'link': { init: true },\n    'title': { init: true }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _getInnerDomString: function () {\n      var rssstyle = '' +\n        this.getWidth() ? 'width:' + this.getWidth() : '' +\n        this.getHeight() ? 'height:' + this.getHeight() : '';\n      return '<div class=\"actor\"><div class=\"rss_inline\" id=\"rss_' + this.getPath() + '\" style=\"' + rssstyle + '\"></div>';\n    },\n\n    _onDomReady: function () {\n      this.base(arguments);\n      this.refreshRSS();\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener(\"interval\", function () {\n        this.refreshRSS();\n      }, this);\n      this._timer.start();\n    },\n\n    refreshRSS: function () {\n      var data = cv.data.Model.getInstance().getWidgetData(this.getPath());\n      $('#' + this.getPath() + ' .rss_inline').rssfeed(this.getSrc(), data);\n    }\n  },\n\n  defer: function(statics) {\n    var loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts('plugins/rss/dep/zrssfeed/jquery.zrssfeed.js');\n    cv.parser.WidgetParser.addHandler(\"rss\", cv.plugins.Rss);\n    cv.ui.structure.WidgetFactory.registerClass(\"rss\", statics);\n  }\n});\n"]}