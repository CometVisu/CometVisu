{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/openhab/Openhab.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/openhab/Settings.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/openhab/renderer/Single.js"],"names":["qx","Class","define","extend","core","Object","type","construct","constructor","call","this","__P_20_0","cv","notifications","Router","getInstance","sse","client","getCurrentTransport","subscribe","_onNotification","members","__P_20_1","_openSettings","_createSettings","settingsRoot","dom","Element","create","id","html","insertAfter","document","querySelector","ui","NotificationCenter","getRootElementId","util","IconTools","svgKUF","style","command","Command","show","insertBegin","button","event","Registration","addListener","flex","e","data","error","destruct","_disposeObjects","defer","statics","plugins","openhab","Openhab","$$dbClassInfo","Bootstrap","executePendingDefers","Widget","_setLayout","layout","VBox","set","padding","backgroundColor","textColor","getBounds","getContentElement","setStyle","addListenerOnce","__P_21_0","__P_21_1","_initConfigRestClient","properties","modified","check","init","__P_21_2","__P_21_3","__P_21_4","__P_21_5","_store","__P_21_6","_initStore","pid","serviceDesc","get","method","url","delete","put","service","io","rest","Resource","TemplateEngine","visu","store","Rest","configureRequest","req","setRequestHeader","authorize","manipulateData","n","getOwnPropertyNames","forEach","key","replace","prototype","hasOwnProperty","autoDownload","JSON","parse","Serializer","toJson","getModel","_saveConfig","close","description","config","ev","_createForm","getRequest","getResponse","Array","isArray","parameters","_createChildControl","form","getChildControl","param","field","TextField","defaultValue","setPlaceholder","CheckBox","setValue","readOnly","setReadOnly","required","setRequired","setToolTipText","_onFormFieldChange","add","label","name","renderer","Single","Config","guessIfProxied","setBottomText","tr","textAlign","font","addButton","_addAt","controller","Form","bind","setModified","items","getItems","some","getValue","debug","_createChildControlImpl","hash","control","basic","Label","marginBottom","allowGrowX","decorator","Button","locale","Manager","Settings","base","setVisibility","AbstractRenderer","bottomText","nullable","apply","_applyBottomText","value","exclude","container","Composite","getBottomText","rich","wrap","hbox","HBox","setAlignX","setSpacing","addItems","names","title","_createHeader","i","length","_createLabel","item","setBuddy","box","width","_connectVisibility","_names","push","getLayout","_getLayout","_createLabelText","_labels","setRich","setAppearance","header","setFont","_row","setMarginTop"],"mappings":"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","sourcesContent":["/* Openhab.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This Plugin provides some specials to improve the integration with openHAB backend.\n *\n * .. NOTE::\n *\n *    This plugin gets automatically activated if the openHAB2 backend is used.\n *    There is no need to add it to the ``plugins`` section of the ``visu_config.xml``.\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n *\n * @require(qx.ui.root.Inline)\n */\nqx.Class.define('cv.plugins.openhab.Openhab', {\n  extend: qx.core.Object,\n  type: 'singleton',\n\n  /*\n *****************************************************************************\n    CONSTRUCTOR\n *****************************************************************************\n */\n  construct: function () {\n    this.base(arguments);\n    if (!Object.prototype.hasOwnProperty.call(cv.Config.request.queryKey, 'preview')) {\n      this.__notificationRouter = cv.core.notifications.Router.getInstance();\n\n      // listen to notifications\n      const client = cv.TemplateEngine.getInstance().visu;\n      const sse = client.getCurrentTransport && client.getCurrentTransport();\n      if (sse) {\n        sse.subscribe('notifications', this._onNotification, this);\n      }\n      cv.TemplateEngine.getInstance().executeWhenDomFinished(this._createSettings, this);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __notificationRouter: null,\n    __settings: null,\n    _openSettings: null,\n\n    _createSettings: function() {\n      // add element structure to notification-center\n      const settingsRoot = qx.dom.Element.create('section', {'id': 'qxsettings', 'html': '<div></div>'});\n      qx.dom.Element.insertAfter(settingsRoot, document.querySelector('#'+cv.ui.NotificationCenter.getInstance().getRootElementId()+' section.messages'));\n\n      // add a settings button to trigger opening the settings\n      const button = qx.dom.Element.create('div', {\n        html: cv.util.IconTools.svgKUF('edit_settings')(null, 'width: 22px; height: 22px;', '', true),\n        style: 'float: left;'\n      });\n      this._openSettings = new qx.ui.command.Command('Ctrl+S');\n      this._openSettings.addListener('execute', function() {\n        cv.ui.NotificationCenter.getInstance().show();\n        this.__settings.show();\n      }, this);\n      cv.TemplateEngine.getInstance().getCommands().add('open-settings', this._openSettings);\n      qx.dom.Element.insertBegin(button, document.querySelector('#notification-center footer'));\n      qx.event.Registration.addListener(button, 'tap', function() {\n        this.__settings.show();\n      }, this);\n\n      //add to DOM\n      qx.theme.manager.Meta.getInstance().setTheme(cv.theme.Dark);\n\n      // Initialize tooltip manager (currently disable as it requires a root with basic layout\n      // and that breaks the inline container sizes)\n      // qx.ui.tooltip.Manager.getInstance();\n\n      this._inline = new qx.ui.root.Inline(document.querySelector('#qxsettings > div'), true, false);\n      this._inline.setLayout(new qx.ui.layout.VBox());\n      this.__settings = new cv.plugins.openhab.Settings();\n      this.__settings.exclude();\n      this._inline.add(this.__settings, {flex: 1});\n    },\n\n    /**\n     * Handles notification messages from backend\n     * @param e {Event}\n     * @protected\n     */\n    _onNotification: function(e) {\n      if (!e.data) {\n        this.error('invalid content received from SSE: ', e);\n      }\n      const json = typeof e.data === 'object' ? e.data : JSON.parse(e.data);\n      this.__notificationRouter.dispatchMessage(json.topic || 'cv.backend', json);\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct: function() {\n    this._disposeObjects('__settings', '_openSettings');\n    this.__notificationRouter = null;\n  },\n\n  defer: function(statics) {\n    // initialize on load\n    statics.getInstance();\n  }\n});\n","/* Settings.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Show and edit openHAB CometVisu backends settings via openHAB api.\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n *\n */\nqx.Class.define('cv.plugins.openhab.Settings', {\n  extend: qx.ui.core.Widget,\n\n  /*\n *****************************************************************************\n    CONSTRUCTOR\n *****************************************************************************\n */\n  construct: function () {\n    this.base(arguments);\n    this._setLayout(new qx.ui.layout.VBox());\n    this.set({\n      padding: 10,\n      backgroundColor: 'rgba(216, 216, 216, 1.0)',\n      textColor: 'rgb(61, 61, 61)'\n    });\n    // override text-shadow setting\n    if (!this.getBounds()) {\n      this.addListenerOnce('appear', function() {\n        this.getContentElement().setStyle('text-shadow', 'none');\n      }, this);\n    } else {\n      this.getContentElement().setStyle('text-shadow', 'none');\n    }\n\n    this.__servicePid = 'org.openhab.cometvisu';\n    this.__uri = 'ui:cometvisu';\n\n    this._initConfigRestClient();\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n\n    modified: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeModified'\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __servicePid: null,\n    __uri: null,\n    __configDescriptionResource: null,\n    __service: null,\n    __configDescription: null,\n    __inDom: false,\n    _store: null,\n    __initialValues: null,\n\n    _initStore: function(pid) {\n      const serviceDesc = {\n        'get': {method: 'GET', url: '/rest/services/' + pid + '/config'},\n        'delete': {method: 'DELETE', url: '/rest/services/' + pid + '/config'},\n        'put': {method: 'PUT', url: '/rest/services/' + pid + '/config'}\n      };\n      const service = this.__service = new qx.io.rest.Resource(serviceDesc);\n      const client = cv.TemplateEngine.getInstance().visu;\n\n      this._store = new qx.data.store.Rest(service, 'get', {\n        configureRequest: function(req) {\n          req.setRequestHeader('Content-Type', 'application/json');\n          if (client instanceof cv.io.openhab.Rest) {\n            client.authorize(req);\n          }\n        },\n        manipulateData: function(data) {\n          // normalize the keys (replace .> with _) for the marshaller\n          const n = {};\n          Object.getOwnPropertyNames(data).forEach(function(key) {\n            n[key.replace(/[\\.>]/g, '_')] = data[key];\n          });\n          if (!Object.prototype.hasOwnProperty.call(n, 'autoDownload')) {\n            n.autoDownload = false;\n          }\n          return n;\n        }\n      });\n      // load data\n      service.get();\n      this._store.addListenerOnce('changeModel', function() {\n        this.__initialValues = JSON.parse(qx.util.Serializer.toJson(this._store.getModel()));\n      }, this);\n    },\n\n    _saveConfig: function() {\n      let data = qx.util.Serializer.toJson(this._store.getModel());\n      data = data.replace(/icons_mapping_/g, 'icons.mapping>');\n      data = JSON.parse(data.replace('icons_enableMapping', 'icons>enableMapping'));\n      this.__service.put(null, data);\n      this.__service.addListenerOnce('putSuccess', this.close, this);\n    },\n\n    _initConfigRestClient: function() {\n      const description = {\n        'get': {method: 'GET', url: '/rest/config-descriptions/' + this.__uri}\n      };\n\n      const config = this.__configDescriptionResource = new qx.io.rest.Resource(description);\n      const client = cv.TemplateEngine.getInstance().visu;\n\n      config.addListener('getSuccess', function(ev) {\n        this._createForm(ev.getRequest().getResponse());\n      }, this);\n      config.configureRequest(function(req) {\n        req.setRequestHeader('Content-Type', 'application/json');\n        if (client instanceof cv.io.openhab.Rest) {\n          client.authorize(req);\n        }\n      });\n      config.get();\n\n      this._initStore(this.__servicePid);\n    },\n\n    _createForm: function(config) {\n      if (config && Object.prototype.hasOwnProperty.call(config, 'parameters') && Array.isArray(config.parameters)) {\n        this._createChildControl('title');\n        const form = this.getChildControl('form');\n        config.parameters.forEach(function (param) {\n          let field;\n          switch (param.type) {\n            case 'TEXT':\n              field = new qx.ui.form.TextField();\n              if (param.defaultValue) {\n                field.setPlaceholder(param.defaultValue);\n              }\n              break;\n            case 'BOOLEAN':\n              field = new qx.ui.form.CheckBox();\n              field.setValue(param.defaultValue === 'true');\n              break;\n          }\n          if (param.readOnly) {\n            field.setReadOnly(true);\n          }\n          if (param.required) {\n            field.setRequired(true);\n          }\n          field.setToolTipText(param.description);\n          field.addListener('changeValue', this._onFormFieldChange, this);\n          form.add(field, param.label, null, param.name, null, param);\n        }, this);\n\n        const renderer = new cv.plugins.openhab.renderer.Single(form);\n        if (cv.Config.guessIfProxied()) {\n          renderer.setBottomText(this.tr('The CometVisu seems to be delivered by a proxied webserver. Changing configuration values might not have the expected effect. Please proceed only if you know what you are doing.'));\n          renderer.getChildControl('bottom-text').set({\n            padding: 10,\n            textAlign: 'center',\n            font: 'bold'\n          });\n        }\n        renderer.addButton(this.getChildControl('cancel-button'));\n        renderer.addButton(this.getChildControl('save-button'));\n\n        this._addAt(renderer, 1);\n        const controller = new qx.data.controller.Form(null, form);\n\n        this._store.bind('model', controller, 'model');\n\n        this.setModified(false);\n      }\n    },\n\n    _onFormFieldChange: function() {\n      let modified = false;\n      const items = this.getChildControl('form').getItems();\n      Object.getOwnPropertyNames(items).some(function(name) {\n        // noinspection EqualityComparisonWithCoercionJS\n        if (this.__initialValues[name] != items[name].getValue()) { // jshint ignore:line\n          this.debug(name+' has changed from '+this.__initialValues[name]+' to '+items[name].getValue());\n          modified = true;\n          return true;\n        }\n        return false;\n      }, this);\n      this.setModified(modified);\n    },\n\n    // overridden\n    _createChildControlImpl : function(id, hash) {\n      let control;\n      switch (id) {\n        case 'title':\n          control = new qx.ui.basic.Label(this.tr('openHAB backend settings'));\n          control.set({\n            font: 'bold',\n            marginBottom: 5,\n            allowGrowX: true,\n            decorator: 'window-caption'\n          });\n          this._addAt(control, 0);\n          break;\n\n        case 'form':\n          control = new qx.ui.form.Form();\n          break;\n\n        case 'cancel-button':\n          control = new qx.ui.form.Button(qx.locale.Manager.tr('Cancel'));\n          control.addListener('execute', this.close, this);\n          break;\n\n        case 'save-button':\n          control = new qx.ui.form.Button(qx.locale.Manager.tr('Save'));\n          control.addListener('execute', this._saveConfig, this);\n          this.bind('modified', control, 'enabled');\n          break;\n      }\n      return control || this.base(arguments, id, hash);\n    },\n\n    close: function() {\n      this.setVisibility('excluded');\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct: function() {\n    this._disposeObjects('__configDescriptionResource', '__service', '__root', '_store', '_window');\n  }\n});\n","/* Single.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * {@link qx.ui.form.renderer.Single} with right column flexed.\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n */\n\nqx.Class.define('cv.plugins.openhab.renderer.Single', {\n  extend: qx.ui.form.renderer.AbstractRenderer,\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function(form) {\n    const layout = new qx.ui.layout.VBox(6);\n    this._setLayout(layout);\n\n    this.base(arguments, form);\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    bottomText: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyBottomText'\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n\n    // property apply\n    _applyBottomText: function(value) {\n      const control = this.getChildControl('bottom-text');\n      if (value) {\n        control.setValue(value);\n        control.show();\n      } else {\n        control.exclude();\n      }\n    },\n\n    // overridden\n    _createChildControlImpl : function(id, hash) {\n      let control;\n      switch (id) {\n        case 'content':\n          control = new qx.ui.container.Composite(new qx.ui.layout.VBox(8));\n          this._addAt(control, 1);\n          break;\n\n        case 'bottom-text':\n          control = new qx.ui.basic.Label(this.getBottomText());\n          control.set({\n            rich: true,\n            wrap: true\n          });\n          this._addAt(control, 2);\n          if (this.getBottomText()) {\n            control.show();\n          } else {\n            control.exclude();\n          }\n          break;\n\n        case 'button-container': {\n          const hbox = new qx.ui.layout.HBox();\n          hbox.setAlignX('right');\n          hbox.setSpacing(5);\n          control = new qx.ui.container.Composite(hbox);\n          this._addAt(control, 3);\n          break;\n        }\n      }\n      return control || this.base(arguments, id, hash);\n    },\n\n    /**\n     * Add a group of form items with the corresponding names. The names are\n     * displayed as label.\n     * The title is optional and is used as grouping for the given form\n     * items.\n     *\n     * @param items {qx.ui.core.Widget[]} An array of form items to render.\n     * @param names {String[]} An array of names for the form items.\n     * @param title {String?} A title of the group you are adding.\n     */\n    addItems : function(items, names, title) {\n      // add the header\n      if (title !== null) {\n        this.getChildControl('content').add(this._createHeader(title));\n      }\n\n      const container = this.getChildControl('content');\n\n      // add the items\n      for (let i = 0; i < items.length; i++) {\n        const label = this._createLabel(names[i], items[i]);\n        const item = items[i];\n        label.setBuddy(item);\n\n        if (item instanceof qx.ui.form.CheckBox) {\n          // label + checkbox in one line\n          const box = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n          box.add(label, {width: '50%'});\n          box.add(item, {width: '50%'});\n          container.add(box);\n        } else {\n          container.add(label);\n          container.add(item);\n        }\n\n        this._connectVisibility(item, label);\n\n        // store the names for translation\n        if (qx.core.Environment.get('qx.dynlocale')) {\n          this._names.push({name: names[i], label: label, item: items[i]});\n        }\n      }\n    },\n\n    /**\n     * Adds a button to the form renderer. All buttons will be added in a\n     * single row at the bottom of the form.\n     *\n     * @param button {qx.ui.form.Button} The button to add.\n     */\n    addButton : function(button) {\n      // add the button\n      this.getChildControl('button-container').add(button);\n    },\n\n    /**\n     * Returns the set layout for configuration.\n     *\n     * @return {qx.ui.layout.Grid} The grid layout of the widget.\n     */\n    getLayout : function() {\n      return this._getLayout();\n    },\n\n    /**\n     * Creates a label for the given form item.\n     *\n     * @param name {String} The content of the label without the\n     *   trailing * and :\n     * @param item {qx.ui.core.Widget} The item, which has the required state.\n     * @return {qx.ui.basic.Label} The label for the given item.\n     */\n    _createLabel : function(name, item) {\n      const label = new qx.ui.basic.Label(this._createLabelText(name, item));\n      // store labels for disposal\n      this._labels.push(label);\n      label.setRich(true);\n      label.setAppearance('form-renderer-label');\n      return label;\n    },\n\n\n    /**\n     * Creates a header label for the form groups.\n     *\n     * @param title {String} Creates a header label.\n     * @return {qx.ui.basic.Label} The header for the form groups.\n     */\n    _createHeader : function(title) {\n      const header = new qx.ui.basic.Label(title);\n      // store labels for disposal\n      this._labels.push(header);\n      header.setFont('bold');\n      if (this._row != 0) {\n        header.setMarginTop(10);\n      }\n      header.setAlignX('left');\n      return header;\n    }\n  }\n});\n"]}