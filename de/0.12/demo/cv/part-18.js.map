{"version":3,"sources":["../../../source/class/cv/plugins/Svg.js"],"names":["qx","Bootstrap","executePendingDefers","$$dbClassInfo","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Update","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","parseFormat","parseAddress","members","_getInnerDomString","_onDomReady","plugins","Svg","prototype","base","call","ajaxRequest","io","request","Xhr","util","ResourceManager","getInstance","toUri","set","accept","cache","Config","forceReload","addListenerOnce","e","req","getTarget","getActor","innerHTML","getResponseText","send","_update","address","value","defaultValueHandling","line","i","l","element","Math","floor","querySelector","setAttribute","linewidth","defer","addHandler","WidgetFactory","registerClass"],"mappings":"yTAACA,GAAEC,UAAUC,qBAAqBC,GAyBjCH,GAAEI,MAAMC,OAAO,kBACdC,OAAQC,GAAGC,GAAGC,UAAUC,eACxBC,SAAUJ,GAAGC,GAAGI,OAAOC,QAOvBC,SAWEC,MAAO,SAAUC,EAAKC,EAAMC,EAASC,GACnC,IAAIC,EAAOb,GAAGc,OAAOC,aAAaC,aAAaC,KAAMR,EAAKC,EAAMC,EAASC,GACzEZ,GAAGc,OAAOC,aAAaG,YAAYT,EAAKC,GACxCV,GAAGc,OAAOC,aAAaI,aAAaV,EAAKC,GACzC,OAAOG,IASXO,SACEC,mBAAoB,WAClB,MAAO,6BAGTC,YAAa,WACXtB,GAAAuB,QAAAC,IAAAC,UAAAH,YAAAI,KAAAC,KAAAV,MACA,IAAIW,EAAc,IAAInC,GAAGoC,GAAGC,QAAQC,IAAItC,GAAGuC,KAAKC,gBAAgBC,cAAcC,MAAM,0BACpFP,EAAYQ,KACVC,OAAQ,aACRC,OAAQtC,GAAGuC,OAAOC,cAEpBZ,EAAYa,gBAAgB,UAAW,SAAUC,GAC/C,IAAIC,EAAMD,EAAEE,YACA3B,KAAK4B,WACXC,UAAYH,EAAII,mBACrB9B,MACHW,EAAYoB,QAGdC,QAAS,SAASC,EAASC,GACzBA,EAAQlC,KAAKmC,qBAAqBF,EAASC,GAC3C,IAKIE,EAAMC,EAAGC,EALTC,EAAUvC,KAAK4B,WAMnB,IAAIS,EAAI,EAAGC,EAAIE,KAAKC,MAAMP,EAFX,IAE4BG,GAAGC,EAAED,IAAK,EACnDD,EAAOG,EAAQG,cAAc,SAASL,EAAE,KACnCM,aAAa,KAAM,EALdC,EAKuBP,EAAKH,EAJzB,GAAA,GADHU,GAMVR,EAAKO,aAAa,KAAM,EANdC,EAMuBP,EAAKH,EALzB,GAAA,GADHU,GAQZ,IAAIP,EAAIG,KAAKC,MAAMP,EAPJ,IAOoB,EAAGG,GAPvB,GAOmCA,IAAK,EACrDD,EAAOG,EAAQG,cAAc,SAASL,EAAE,KACnCM,aAAa,KAAM,GACxBP,EAAKO,aAAa,KAAM,MAK9BE,MAAO,SAASvD,GAEdP,GAAGc,OAAOC,aAAagD,WAAW,MAAO/D,GAAGuB,QAAQC,KACpDxB,GAAGC,GAAGC,UAAU8D,cAAcC,cAAc,MAAO1D,MAtGtDP,GAAEuB,QAAQC,IAAI5B,cAAgBA","sourcesContent":["/* Svg.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * @author christian523\n * @since 2012\n * @asset(plugins/svg/rollo.svg)\n */\nqx.Class.define('cv.plugins.Svg', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType);\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path);\n      return data;\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _getInnerDomString: function() {\n      return '<div class=\"actor\"></div>';\n    },\n\n    _onDomReady: function() {\n      this.base(arguments);\n      var ajaxRequest = new qx.io.request.Xhr(qx.util.ResourceManager.getInstance().toUri('plugins/svg/rollo.svg'));\n      ajaxRequest.set({\n        accept: \"text/plain\",\n        cache: !cv.Config.forceReload\n      });\n      ajaxRequest.addListenerOnce(\"success\", function (e) {\n        var req = e.getTarget();\n        var actor = this.getActor();\n        actor.innerHTML = req.getResponseText();\n      }, this);\n      ajaxRequest.send();\n    },\n\n    _update: function(address, value) {\n      value = this.defaultValueHandling(address, value);\n      var element = this.getActor();\n      var linewidth=3;\n      var space = 1;\n      var total = linewidth + space;\n      var line_qty = 48 / total;\n      var line, i, l;\n      for(i = 0, l = Math.floor(value/line_qty); i<=l;i++) {\n        line = element.querySelector('#line'+(i+1));\n        line.setAttribute('y1', 9+total*(i)+((value%line_qty)/line_qty)*total);\n        line.setAttribute('y2', 9+total*(i)+((value%line_qty)/line_qty)*total);\n      }\n      for(i = Math.floor(value/line_qty)+1; i<=line_qty;i++) {\n        line = element.querySelector('#line'+(i+1));\n        line.setAttribute('y1', 9);\n        line.setAttribute('y2', 9);\n      }\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler(\"svg\", cv.plugins.Svg);\n    cv.ui.structure.WidgetFactory.registerClass(\"svg\", statics);\n  }\n});"]}