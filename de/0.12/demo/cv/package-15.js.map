{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/tr064/CallList.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Refresh","Update","construct","props","_this","this","__P_22_0","addListenerOnce","refreshCalllist","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","getAttributeToPropertyMappings","parseFormat","parseAddress","parseRefresh","device","max","transform","value","columns","default","TAM","TAMColor","TAMwait","TAMwaitColor","TAMplay","TAMplayColor","TAMstop","TAMstopColor","typeIncoming","typeIncomingColor","typeMissed","typeMissedColor","typeOutgoing","typeOutgoingColor","typeActiveIncoming","typeActiveIncomingColor","typeRejectedIncoming","typeRejectedIncomingColor","typeActiveOutgoing","typeActiveOutgoingColor","typeUnknown","typeUnknownColor","events","tr064ListRefreshed","properties","check","init","members","__P_22_1","__P_22_2","undefined","__P_22_3","_getInnerDomString","_setupRefreshAction","_timer","event","Timer","getRefresh","_update","address","_displayCalllist","self","clLi","getDomElement","getElementsByClassName","sid","replace","html","types","0","name","getTypeUnknown","color","getTypeUnknownColor","1","getTypeIncoming","getTypeIncomingColor","2","getTypeMissed","getTypeMissedColor","3","getTypeOutgoing","getTypeOutgoingColor","9","getTypeActiveIncoming","getTypeActiveIncomingColor","10","getTypeRejectedIncoming","getTypeRejectedIncomingColor","11","getTypeActiveOutgoing","getTypeActiveOutgoingColor","audio","type","cl","Type","getDevice","Path","IconHandler","getInstance","getIconElement","getTAM","getTAMColor","getColumns","split","forEach","col","Date","Name","Caller","tamList","i","addEventListener","__P_22_4","_getCallListURI","url","window","fetch","then","response","ok","json","title","locale","Manager","tr","severity","message","status","statusText","core","notifications","Router","dispatchMessage","JSON","stringify","source","getMax","text","str","DOMParser","parseFromString","itemList","getElementsByTagName","childrenList","children","entry","ii","nodeName","textContent","fireEvent","error","element","previousElementSibling","__P_22_5","__P_22_6","playPromise","play","__P_22_7","pause","currentTime","innerHTML","getTAMwait","getTAMwaitColor","getTAMplay","getTAMplayColor","getTAMstop","getTAMstopColor","defer","util","ScriptLoader","addStyles","addHandler","plugins","tr064","CallList","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* CallList.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * The TR-064 plugin and widget creates a interface to routers that are\n * configured by the TR-064 protocol, like the well known Fritz!Box routers.\n * \n * The protocol is described at: https://avm.de/service/schnittstellen/\n * \n * @author Christian Mayer\n * @since 0.11.0\n * @asset(plugins/tr064/*)\n */\n\nqx.Class.define('cv.plugins.tr064.CallList', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Refresh, cv.ui.common.Update],\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function (props) {\n    this.base(arguments, props);\n    this.__TAMeventAttached = {};\n    this.addListenerOnce('domReady', () => {\n      this.refreshCalllist('initial');\n    });\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path);\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        'device': {},\n        'max': {\n          transform: function (value) {\n            return +value;\n          }\n        },\n        'columns': { 'default': 'type;date;nameOrCaller;tam' },\n        'TAM':          { 'default': 'phone_answering' },\n        'TAMColor':     { 'default': '' },\n        'TAMwait':      { 'default': 'control_reload' },\n        'TAMwaitColor': { 'default': '' },\n        'TAMplay':      { 'default': 'audio_play' },\n        'TAMplayColor': { 'default': '' },\n        'TAMstop':      { 'default': 'phone_answering' },\n        'TAMstopColor': { 'default': '' },\n        'typeIncoming':               { 'default': 'phone_call_in' },\n        'typeIncomingColor':          { 'default': '' },\n        'typeMissed':                 { 'default': 'phone_missed_in' },\n        'typeMissedColor':            { 'default': '' },\n        'typeOutgoing':               { 'default': 'phone_call_out' },\n        'typeOutgoingColor':          { 'default': '' },\n        'typeActiveIncoming':         { 'default': 'phone_ring_in' },\n        'typeActiveIncomingColor':    { 'default': '' },\n        'typeRejectedIncoming':       { 'default': 'phone_call_end_in' },\n        'typeRejectedIncomingColor':  { 'default': '' },\n        'typeActiveOutgoing':         { 'default': 'phone_ring_out' },\n        'typeActiveOutgoingColor':    { 'default': '' },\n        'typeUnknown':                { 'default': 'text_question_mark' },\n        'typeUnknownColor':           { 'default': '' }\n      };\n    }\n  },\n\n  /*\n  ***********************************************\n    EVENTS\n  ***********************************************\n  */\n  events: {\n    'tr064ListRefreshed': 'qx.event.type.Event' // event to support unit test\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    device: {\n      check: 'String',\n      init: ''\n    },\n    max: {\n      check: 'Number',\n      init: 0\n    },\n    columns:      { check: 'String' },\n    TAM:          { check: 'String' },\n    TAMColor:     { check: 'String' },\n    TAMwait:      { check: 'String' },\n    TAMwaitColor: { check: 'String' },\n    TAMplay:      { check: 'String' },\n    TAMplayColor: { check: 'String' },\n    TAMstop:      { check: 'String' },\n    TAMstopColor: { check: 'String' },\n    typeIncoming:               { check: 'String' },\n    typeIncomingColor:          { check: 'String' },\n    typeMissed:                 { check: 'String' },\n    typeMissedColor:            { check: 'String' },\n    typeOutgoing:               { check: 'String' },\n    typeOutgoingColor:          { check: 'String' },\n    typeActiveIncoming:         { check: 'String' },\n    typeActiveIncomingColor:    { check: 'String' },\n    typeRejectedIncoming:       { check: 'String' },\n    typeRejectedIncomingColor:  { check: 'String' },\n    typeActiveOutgoing:         { check: 'String' },\n    typeActiveOutgoingColor:    { check: 'String' },\n    typeUnknown:                { check: 'String' },\n    typeUnknownColor:           { check: 'String' }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __calllistUri: '',\n    __calllistList: undefined,\n    __refreshingCalllist: false,\n    /**\n     * Prevent warning \"Reference values are shared across all instances\"\n     * as the keys are unique a share doesn't matter:\n     * @lint ignoreReferenceField(__TAMeventAttached)\n     */\n    __TAMeventAttached: null,\n    \n    _getInnerDomString: function () {\n      return '<div class=\"actor\"><table class=\"TR064_calllist\"><tr><td>Loading TR-064...</td></tr></table></div>';\n    },\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', function () {\n        if (!this.__refreshingCalllist) {\n          this.refreshCalllist('timer');\n        }\n      }, this);\n      this._timer.start();\n    },\n    _update: function(address, value) {\n      if (!this.__refreshingCalllist) {\n        this.refreshCalllist('update');\n      }\n    },\n      \n    _displayCalllist: function() {\n      const self = this;\n      const clLi = this.getDomElement().getElementsByClassName('TR064_calllist')[0];\n      const sid = this.__calllistUri ? this.__calllistUri.replace(/.*sid=/, '') : '';\n      let html = '';\n      const types = {\n        0: {name: this.getTypeUnknown(), color: this.getTypeUnknownColor()},\n        1: {name: this.getTypeIncoming(), color: this.getTypeIncomingColor()},\n        2: {name: this.getTypeMissed(), color: this.getTypeMissedColor()},\n        3: {name: this.getTypeOutgoing(), color: this.getTypeOutgoingColor()},\n        9: {name: this.getTypeActiveIncoming(), color: this.getTypeActiveIncomingColor()},\n        10: {name: this.getTypeRejectedIncoming(), color: this.getTypeRejectedIncomingColor()},\n        11: {name: this.getTypeActiveOutgoing(), color: this.getTypeActiveOutgoingColor()}\n      };\n\n      this.__calllistList.forEach(function(cl) {\n        let audio = '';\n        const type = (cl.Type in types) ? types[cl.Type] : types[0];\n\n        if (cl.Path) {\n          audio = '<audio preload=\"none\">' +\n            '<source src=\"resource/plugins/tr064/proxy.php?device=' + self.getDevice() + '&uri='+cl.Path+'%26sid='+sid+'\">' +\n            '</audio>' +\n            '<div class=\"tam clickable\">' +\n            cv.IconHandler.getInstance().getIconElement(self.getTAM(), '*', '*', self.getTAMColor(), '', '', true) +\n            '</div>';\n        }\n        \n        html += '<tr>';\n        self.getColumns().split(';').forEach(function(col) {\n          switch (col) {\n            case 'type':\n              html += '<td>' + cv.IconHandler.getInstance().getIconElement(type.name, '*', '*', type.color, '', '', true) + '</td>';\n              break;\n            \n            case 'date':\n              html += '<td>' + cl.Date + '</td>';\n              break;\n            \n            case 'name':\n              html += '<td>' + cl.Name + '</td>';\n              break;\n            \n            case 'caller':\n              html += '<td>' + cl.Caller + '</td>';\n              break;\n            \n            case 'nameOrCaller':\n              if (cl.Name !== '') {\n                html += '<td>' + cl.Name + '</td>';\n              } else {\n                html += '<td>' + cl.Caller + '</td>';\n              }\n              break;\n            \n            case 'tam':\n              html += '<td>' + audio + '</td>';\n              break;\n          }\n        });\n        html += '</tr>';\n      });\n      clLi.innerHTML = html;\n      const tamList = clLi.getElementsByClassName('tam');\n      for (let i = 0; i < tamList.length; i++) {\n        tamList[i].addEventListener('click', function () {\n          self.__playTAM(this);\n        });\n      }\n    },\n    \n    /**\n     * Fetch the TR-064 resource\n     *   /upnp/control/x_contact urn:dslforum-org:service:X_AVM-DE_OnTel:1 \n     *   GetCallList\n     */\n    _getCallListURI: function() {\n      const self = this;\n      const url = 'resource/plugins/tr064/soap.php?device=' + this.getDevice() + '&location=upnp/control/x_contact&uri=urn:dslforum-org:service:X_AVM-DE_OnTel:1&fn=GetCallList';\n\n      window.fetch(url)\n        .then(function(response) {\n          if (response.ok) {\n            return response.json(); \n          }\n          // else:\n          cv.core.notifications.Router.dispatchMessage('cv.tr064.error', {\n            title: qx.locale.Manager.tr('TR-064 communication error'),\n            severity: 'urgent',\n            message: qx.locale.Manager.tr('Reading URL \"%1\" failed with status \"%2\": \"%2\"', response.url, response.status, response.statusText)\n          });\n          self.__calllistUri = '<fail>';\n          return null;\n        })\n        .then(function(data) {\n          if (typeof data === 'string') {\n            self.__calllistUri = data;\n            self.refreshCalllist('getCallListURI');\n          } else {\n            cv.core.notifications.Router.dispatchMessage('cv.tr064.error', {\n              title: qx.locale.Manager.tr('TR-064 communication response error'),\n              severity: 'urgent',\n              message: qx.locale.Manager.tr('Reading URL \"%1\" failed with content: \"%2\"', url, JSON.stringify(data))\n            });\n            self.__calllistUri = '<fail>';\n          }\n        });\n    },\n\n    refreshCalllist: function(source) {\n      this.__refreshingCalllist = true;\n      \n      if (this.__calllistUri === '<fail>') {\n        return; // this problem won't fix anymore during this instance\n      }\n      \n      if (this.__calllistUri === '') {\n        this._getCallListURI();\n        return;\n      }\n\n      const self = this;\n      const url = 'resource/plugins/tr064/proxy.php?device=' + this.getDevice() + '&uri=' + this.__calllistUri + '%26max=' + this.getMax();\n\n      window.fetch(url)\n        .then(function(response) {\n          if (response.ok) {\n            return response.text(); \n          }\n          // else:\n          cv.core.notifications.Router.dispatchMessage('cv.tr064.error', {\n            title: qx.locale.Manager.tr('TR-064 communication error'),\n            severity: 'urgent',\n            message: qx.locale.Manager.tr('Reading URL \"%1\" failed with status \"%2\": \"%2\"', response.url, response.status, response.statusText)\n          });\n          return '<xml/>';\n        })\n        .then(function(str) {\n          return (new window.DOMParser()).parseFromString(str, 'text/xml');\n        })\n        .then(function(data) {\n          self.__calllistList = [];\n          const itemList = data.getElementsByTagName('Call');\n          for (let i = 0; i < itemList.length; i++) {\n            const childrenList = itemList[i].children;\n            const entry = {};\n            for (let ii = 0; ii < childrenList.length; ii++) {\n              entry[childrenList[ii].nodeName] = childrenList[ii].textContent;\n            }\n            self.__calllistList.push(entry);\n          }\n          self._displayCalllist();\n          self.__refreshingCalllist = false;\n          self.fireEvent('tr064ListRefreshed');\n        })\n        .catch(function(error) {\n          cv.core.notifications.Router.dispatchMessage('cv.tr064.error', {\n            title: qx.locale.Manager.tr('TR-064 communication error'),\n            severity: 'urgent',\n            message: qx.locale.Manager.tr('refreshCalllist() error: \"%1\"', JSON.stringify(error))\n          });\n          self.error('TR-064 refreshCalllist() error:', error);\n        });\n    },\n    \n    /**\n     * The EventListener for click on the TAM button.\n     * @param element\n     */\n    __playTAM: function(element) {\n      const self = this;\n      const audio = element.previousElementSibling;\n\n      if (!this.__TAMeventAttached[audio]) {\n        audio.addEventListener('ended', function () {\n          self.__TAMstop(element);\n        });\n        this.__TAMeventAttached[audio] = true;\n      }\n      \n      if (audio.readyState < 4) { // not ready yet\n        this.__TAMwait(element);\n      }\n      \n      if (audio.paused) {\n        const playPromise = audio.play();\n        if (playPromise !== undefined) {\n          playPromise\n            .then(function() {\n              self.__TAMplay(element);\n            })\n            .catch(function() { /*NOP*/ });\n        }\n      } else {\n        audio.pause();\n        audio.currentTime = 0;\n        this.__TAMstop(element);\n      }\n    },\n    \n    __TAMwait: function(element) {\n      element.innerHTML = cv.IconHandler.getInstance().getIconElement(this.getTAMwait(), '*', '*', this.getTAMwaitColor(), '', '', true);\n    },\n    \n    __TAMplay: function(element) {\n      element.innerHTML = cv.IconHandler.getInstance().getIconElement(this.getTAMplay(), '*', '*', this.getTAMplayColor(), '', '', true);\n    },\n    \n    __TAMstop: function(element) {\n      element.innerHTML = cv.IconHandler.getInstance().getIconElement(this.getTAMstop(), '*', '*', this.getTAMstopColor(), '', '', true);\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/tr064/tr064.css');\n    cv.parser.WidgetParser.addHandler('calllist', cv.plugins.tr064.CallList);\n    cv.ui.structure.WidgetFactory.registerClass('calllist', statics);\n  }\n\n});\n"]}