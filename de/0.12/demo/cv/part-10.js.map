{"version":3,"sources":["../../../source/class/cv/plugins/PowerSpectrum.js"],"names":["$","e","t","a","i","n","resize","extend","r","s","u","m","o","l","f","event","special","setup","this","push","data","w","width","h","height","length","teardown","splice","removeData","cancelAnimationFrame","clearTimeout","add","apply","arguments","isFunction","handler","is","c","d","trigger","requestAnimationFrame","setTimeout","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Date","getTime","webkitCancelRequestAnimationFrame","mozCancelRequestAnimationFrame","oCancelRequestAnimationFrame","msCancelRequestAnimationFrame","jQuery","plot","plugins","init","onResize","placeholder","getPlaceholder","setupGrid","draw","hooks","bindEvents","eventHolder","shutdown","unbind","options","name","version","cv","util","ScriptLoader","markAsLoaded","isMarkedAsLoaded","cv.ui.common.Update","cv.ui.structure.WidgetFactory","defer","qx","Class","define","ui","structure","AbstractWidget","include","common","Update","construct","props","name1","singlePhase","name2","setSpectrum","isSinglePhase","setupSpectrum","setCurve","setupCurve","statics","CURRENT","VOLTAGE","limitEN50160_1999","limitEN61000_3_2","referenceSin","fixLimits","entry","index","array","lastShifted","last","parse","xml","path","flavour","pageType","parser","WidgetParser","parseElement","getAttributeToPropertyMappings","parseFormat","parseAddress","makeAddressListFn","type","target","transform","value","PowerSpectrum","singlephase","limitname","spectrumonly","showlegend","limitcolor","default","color1","color2","color3","src","mode","variant","properties","displayType","check","spectrum","limitName","showCurve","limitColor","members","__plot","__plotCurve","_getInnerDomString","actor","isShowCurve","_onDomReady","prototype","base","call","colors","getLimitColor","getColor1","getColor2","getColor3","diagramCurve","getPath","empty","legend","show","isShowLegend","yaxis","diagramSpectrum","optionsSpectrum","series","bars","fill","fillColor","align","barWidth","xaxis","createDatasetCurve","optionsCurve","bind","layout","ResizeHandler","states","addListenerOnce","_update","ga","undefined","addressInfo","getAddress","phase","Transform","encode","getCurrent","substr","parseInt","factor","getSpectrum","values","setData","createDatasetSpectrum","updateCurve","getCurve","ret_val","offset","input","inp","out","shift","Math","PI","phi","cos","j","color","label","getLimitName","getDisplayType","lines","getName1","steps"],"mappings":"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","sourcesContent":["/* PowerSpectrum.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * The powerspectrum plugin and widget creates a graph to show the power \n * spectral data that the Enertex Smartmeter can send on the KNX bus.\n * \n * @author Christian Mayer\n * @since 0.10.0\n * @asset(plugins/diagram/dep/flot/jquery.flot.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.canvas.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.resize.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.navigate.min.js)\n */\nqx.Class.define('cv.plugins.PowerSpectrum', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function(props) {\n    if (!props.name1) {\n      props.name1 = props.singlePhase === true ? \"L\" : \"L1\";\n    }\n    if (!props.name2) {\n      props.name2 = \"L2\";\n    }\n    if (!props.name3) {\n      props.name3 = \"L3\";\n    }\n    this.base(arguments, props);\n\n    // some initializations\n    this.setSpectrum(this.isSinglePhase() ? [ this.setupSpectrum() ] : [ this.setupSpectrum(-0.26), this.setupSpectrum(0), this.setupSpectrum(0.26) ]);\n    this.setCurve(this.isSinglePhase() ? [ this.setupCurve() ] : [ this.setupCurve(), this.setupCurve(), this.setupCurve() ]);\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    // Constants\n    CURRENT: 0,\n    VOLTAGE: 1,\n    limitEN50160_1999: [[2, 0.02], [3, 0.05], [4, 0.01], [5, 0.06], [6, 0.005], [7, 0.05],\n      [8, 0.005], [9, 0.015], [10, 0.005], [11, 0.035], [12, 0.005], [13, 0.03], [14, 0.005],\n      [15, 0.005], [16, 0.005], [17, 0.02], [18, 0.005], [19, 0.015], [20, 0.005],\n      [21, 0.005], [22, 0.005], [23, 0.015], [24, 0.005], [25, 0.015]\n    ], // limit for voltage in ratio\n    limitEN61000_3_2: [[2, 1.620], [3, 3.450], [4, 0.650], [5, 1.710], [6, 0.450],\n      [7, 1.160], [8, 0.350], [9, 0.600], [10, 0.280], [11, 0.500], [12, 0.233], [13, 0.320],\n      [14, 0.200], [15, 0.230], [16, 0.175], [17, 0.203], [18, 0.155], [19, 0.182],\n      [20, 0.140], [21, 0.164], [22, 0.127], [23, 0.150], [24, 0.117], [25, 0.139]\n    ], // limit for current in Ampere\n    referenceSin: [[], [], []],\n\n    // fix limits for better displaying\n    fixLimits: function( entry, index, array )\n    {\n      array[index][0] -= 0.5;\n    },\n    lastShifted: function( array )\n    {\n      var last = array[ array.length-1 ];\n      return [ last[0]+1, last[1] ];\n    },\n\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      var data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'type': {\n          target: 'displayType',\n          transform: function(value) {\n            return value === 'current' ? cv.plugins.PowerSpectrum.CURRENT : cv.plugins.PowerSpectrum.VOLTAGE;\n          }\n        },\n        'singlephase': {\n          target: 'singlePhase',\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'limitname': {\n          target: 'limitName',\n          \"default\": \"limit\"\n        },\n        'name1': { },\n        'name2': { },\n        'name3': { },\n        'spectrumonly': {\n          target: 'showCurve',\n          transform: function(value) {\n            return value !== 'true';\n          }\n        },\n        'showlegend': {\n          target: 'showLegend',\n          transform: function(value) {\n            return value === \"true\";\n          }\n        },\n        'limitcolor': {\n          target: \"limitColor\",\n          \"default\": \"#edc240\" // default directly from flot code\n        },\n        'color1': {\n          \"default\": \"#afd8f8\"\n        },\n        'color2': {\n          \"default\": \"#cb4b4b\"\n        },\n        'color3': {\n          \"default\": \"#4da74d\"\n        }\n      };\n    },\n\n    makeAddressListFn: function(src, transform, mode, variant) {\n      if( !variant ) {\n        variant = 'spectrum'; // the default\n      }\n      return [true, variant];\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    displayType: {\n      check: [0, 1],\n      init: 1\n    },\n    singlePhase: {\n      check: \"Boolean\",\n      init: false\n    },\n    spectrum: {\n      check: \"Array\",\n      init: []\n    },\n    limitName: {\n      check: \"String\",\n      init: \"limit\"\n    },\n    name1: {\n      check: \"String\",\n      init: \"L1\"\n    },\n    name2: {\n      check: \"String\",\n      init: \"L2\"\n    },\n    name3: {\n      check: \"String\",\n      init: \"L3\"\n    },\n    curve: {\n      check: \"Array\",\n      init: []\n    },\n    showCurve: {\n      check: \"Boolean\",\n      init: false\n    },\n    showLegend: {\n      check: \"Boolean\",\n      init: false\n    },\n    current: {\n      check: \"Array\",\n      init: []\n    },\n    limitColor: {\n      check: \"Color\",\n      init: \"#edc240\"\n    },\n    color1: {\n      check: \"Color\",\n      init: \"#afd8f8\"\n    },\n    color2: {\n      check: \"Color\",\n      init: \"#cb4b4b\"\n    },\n    color3: {\n      check: \"Color\",\n      init: \"#4da74d\"\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __plot: null,\n    __plotCurve: null,\n    \n    _getInnerDomString: function() {\n      // create the actor\n      var actor = '<div class=\"actor clickable\">';\n      if( this.isShowCurve() ) {\n        actor += '<div class=\"diagram_inline curve\">loading...</div>';\n      }\n      actor += '<div class=\"diagram_inline spectrum\">loading...</div></div>';\n      return actor;\n    },\n    \n    _onDomReady: function() {\n      this.base(arguments);\n      var colors = [ this.getLimitColor(), this.getColor1(), this.getColor2(), this.getColor3() ];\n        \n      var\n        diagramCurve = this.isShowCurve() && $( '#' + this.getPath() + ' .actor div.curve' ).empty(),\n        optionsCurve = this.isShowCurve() && {\n            colors: colors,\n            legend: {\n              show: this.isShowLegend()\n            },\n            xaxis: {\n              show: false\n            },\n            yaxis: {\n              show: false\n            }\n          },\n        diagramSpectrum = $( '#' + this.getPath() + ' .actor div.spectrum' ).empty(),\n        optionsSpectrum = {\n          colors: colors,\n          series: {\n            bars: {\n              show: true,\n              fill: 1,\n              fillColor: null,\n              lineWidth: 0\n            }\n          },\n          bars: {\n            align: \"center\",\n            barWidth: this.isSinglePhase() ? 0.75 : 0.25\n          },\n          legend: {\n            show: this.isShowLegend()\n          },\n          xaxis: {\n            show: false\n          },\n          yaxis: {\n            show: false\n          }\n        };\n\n      var init = function() {\n        this.__plotCurve = this.isShowCurve() && $.plot(diagramCurve, this.createDatasetCurve(), optionsCurve);\n        this.__plot = $.plot(diagramSpectrum, this.createDatasetSpectrum(), optionsSpectrum);\n      }.bind(this);\n\n      // check if sizes are set yet, otherwise wait some time\n      if (cv.ui.layout.ResizeHandler.states.isPageSizeInvalid()) {\n        cv.ui.layout.ResizeHandler.states.addListenerOnce('changePageSizeInvalid', init);\n      } else {\n        init();\n      }\n    },\n\n    _update: function( ga, data ) {\n      if (ga === undefined) { return; }\n      var addressInfo = this.getAddress()[ ga ];\n\n      var phase;\n      if( addressInfo[2][0] === 'I' )\n      {\n        phase = this.isSinglePhase() ? 1 : +(addressInfo[2][1] || 1);\n        var value = cv.Transform.encode( addressInfo[0], data );\n        this.getCurrent()[phase-1] = value / 1000; // transform mA to A\n      } else if (addressInfo[2].substr(0,8) === 'spectrum' && data.length === 28 ) // sanity check for 14 bytes\n      {\n        phase = this.isSinglePhase() ? 1 : +(addressInfo[2][8] || 1);\n        var\n          index = parseInt(data.substr(0, 2), 16),\n          factor = this.getCurrent()[phase - 1] || 1,\n          values = [];\n\n        for (var i = 0; i < 13; i++) {\n          if (index + i < 2) {\n            continue;\n          }\n          values[i] = Math.pow(10, (parseInt(data.substr(i * 2 + 2, 2), 16) - 253) / 80);\n          this.getSpectrum()[phase - 1][index + i - 2][1] = values[i] * factor;\n        }\n        this.__plot.setData(this.createDatasetSpectrum());\n        this.__plot.draw();\n\n        if (this.__plotCurve) {\n          this.updateCurve(this.getSpectrum(), this.getCurve(), phase - 1);\n          this.__plotCurve.setData(this.createDatasetCurve());\n          this.__plotCurve.draw();\n        }\n      }\n    },\n    \n    /**\n     * Setup helper\n     */\n    setupCurve: function()\n    {\n      return [[0,0],[0.4,0],[0.8,0],[1.2,0],[1.6,0],[2,0],[2.4,0],[2.8,0],[3.2,0],\n        [3.6,0],[4,0],[4.4,0],[4.8,0],[5.2,0],[5.6,0],[6,0],[6.4,0],[6.8,0],[7.2,0],\n        [7.6,0],[8,0],[8.4,0],[8.8,0],[9.2,0],[9.6,0],[10,0],[10.4,0],[10.8,0],\n        [11.2,0],[11.6,0],[12,0],[12.4,0],[12.8,0],[13.2,0],[13.6,0],[14,0],\n        [14.4,0],[14.8,0],[15.2,0],[15.6,0],[16,0],[16.4,0],[16.8,0],[17.2,0],\n        [17.6,0],[18,0],[18.4,0],[18.8,0],[19.2,0],[19.6,0]];\n    },\n    setupSpectrum: function( offset )\n    {\n      var ret_val = [];\n\n      if( undefined === offset ) {\n        offset = 0;\n      }\n      for( var i = 2; i < 52; i++ ) {\n        ret_val.push([i + offset, 0]);\n      }\n      return ret_val;\n    },\n\n    /**\n     * Convert a spectrum to a curve\n     */\n    updateCurve: function( input, target, phase )\n    {\n      var\n        inp = input[phase],\n        out = target[phase],\n        shift = (phase * 2 / 3 - 0.5) * Math.PI;\n\n      for( var i = 0; i < 50; i++ )\n      {\n        var\n          phi  = i * Math.PI / 25,\n          value = Math.cos( phi + shift ); // the base with 50 Hz\n\n        // the harmonics\n        for( var j = 2; j < 50; j++ )\n        {\n          value += Math.cos( (phi+shift) * j ) * inp[j][1];\n        }\n\n        out[i][1] = value;\n      }\n    },\n\n    /**\n     * Little helper to setup the Flot dataset structure.\n     */\n    createDatasetCurve: function()\n    {\n      return this.isSinglePhase() ?\n        [\n          { label: null, data: this.self(arguments).referenceSin[0], color:13 }, // trick flot to automatically make color darker\n          { label: 'L', data: this.getCurve()[0], color:1 }\n        ] :\n        [\n          { label: null, data: this.self(arguments).referenceSin[0], color:13 },\n          { label: null, data: this.self(arguments).referenceSin[1], color:14 },\n          { label: null, data: this.self(arguments).referenceSin[2], color:15 },\n          { label: 'L1', data: this.getCurve()[0], color:1 },\n          { label: 'L2', data: this.getCurve()[1], color:2 },\n          { label: 'L3', data: this.getCurve()[2], color:3 }\n        ];\n    },\n\n    /**\n     * Little helper to setup the Flot dataset structure.\n     */\n    createDatasetSpectrum: function() {\n      return this.isSinglePhase() ?\n        [\n          { label: this.getLimitName(), data: this.getDisplayType()===this.self(arguments).VOLTAGE ? this.self(arguments).limitEN50160_1999 : this.self(arguments).limitEN61000_3_2, bars:{show:false}, lines:{steps:true}, color:0 },\n          { label: this.getName1(), data:this.getSpectrum()[0] , color:1}\n        ] :\n        [\n          { \n            label: this.getLimitName(), \n            data: this.getDisplayType() === this.self(arguments).VOLTAGE ? this.self(arguments).limitEN50160_1999 : this.self(arguments).limitEN61000_3_2, bars:{show:false}, lines:{steps:true}, color:0 },\n          { label: this.getName1(), data:this.getSpectrum()[0], color:1 },\n          { label: this.getName2(), data:this.getSpectrum()[1], color:2 },\n          { label: this.getName3(), data:this.getSpectrum()[2], color:3 }\n        ];\n    }\n  },\n\n  defer: function(statics) {\n    var loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts([\n      'plugins/diagram/dep/flot/jquery.flot.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.canvas.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.resize.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.navigate.min.js'\n    ]);\n    cv.parser.WidgetParser.addHandler(\"powerspectrum\", cv.plugins.PowerSpectrum);\n    cv.ui.structure.WidgetFactory.registerClass(\"powerspectrum\", statics);\n    \n    // init\n    statics.limitEN50160_1999.forEach( statics.fixLimits );\n    statics.limitEN50160_1999.push( statics.lastShifted( statics.limitEN50160_1999 ) );\n    statics.limitEN61000_3_2.forEach( statics.fixLimits );\n    statics.limitEN61000_3_2.push( statics.lastShifted( statics.limitEN61000_3_2 ) );\n\n    // fill reference\n    for( var phi = 0; phi < 50; phi++ )\n    {\n      var\n        time = phi * 20 / 50; // time in milliseconds\n\n      statics.referenceSin[0].push( [ time, Math.sin( (phi      ) * Math.PI / 25 ) ] );\n      statics.referenceSin[1].push( [ time, Math.sin( (phi+ 50/3) * Math.PI / 25 ) ] );\n      statics.referenceSin[2].push( [ time, Math.sin( (phi+100/3) * Math.PI / 25 ) ] );\n    }\n  }\n\n});"]}