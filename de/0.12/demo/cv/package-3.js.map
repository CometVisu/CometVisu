{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/diagram/AbstractDiagram.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/diagram/Diagram.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/diagram/Info.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Operate","Refresh","type","construct","props","constructor","call","this","_debouncedLoadDiagramData","util","Function","debounce","loadDiagramData","bind","statics","cache","parse","xml","path","flavour","pageType","mappings","Object","assign","getAttributeToPropertyMappings","parser","WidgetParser","parseRefresh","legend","getAttribute","data","Model","getInstance","setWidgetData","content","getDiagramElements","legendInline","indexOf","legendPopup","series","default","seriesStart","seriesEnd","seriesResolution","transform","parseInt","period","legendposition","timeformat","timeformatTooltip","zoomYAxis","value","title","target","refresh","gridcolor","previewlabels","popup","tooltip","xmlElement","retVal","axes","axesnum","ts","tsnum","axesNameIndex","querySelectorAll","forEach","elem","unit","axisLabel","position","min","max","tickDecimals","tickFormatter","v","axis","toFixed","textContent","src","tagName","steps","fillMissing","tsType","color","label","axisIndex","fill","scaling","parseFloat","cFunc","fillTs","resol","offset","style","align","barWidth","getInfluxFilter","dsIndex","children","length","retval","i","child","lookupTsCache","start","end","res","forceNowDatapoint","force","callback","callbackParameter","key","url","client","TemplateEngine","visu","chartsResource","getResourcePath","encodeURIComponent","filter","field","authentication","urlNotInCache","undefined","Date","now","timestamp","waitingCallbacks","xhr","dispose","authorize","set","accept","addListener","ev","_onSuccess","_onStatusError","send","tsdata","getTarget","getResponse","processChartsData","millisOffset","newRrd","Array","j","l","last","from","push","waitingCallback","log","Logger","error","properties","check","init","nullable","apply","members","_init","popupplot","plot","plotted","_timerPopup","__P_18_0","_applyTitle","setLabel","_setupRefreshAction","getRefresh","_timer","event","Timer","_stopRefresh","timer","isEnabled","stop","_startRefresh","runImmediately","fireEvent","_action","popupDiagram","dom","Element","create","class","id","getPath","PopupHandler","showPopup","getLabel","page","getParentPage","shutdown","parent","parentNode","entries","height","width","margin","key_value","Registration","stopPropagation","initDiagram","isPopup","options","canvas","getTooltip","tooltipOpts","xDateFormat","getTimeformatTooltip","shifts","x","y","defaultTheme","zoom","interactive","trigger","amount","pan","cursor","frameRate","triggerOnDrag","yaxes","JSON","stringify","getContent","xaxes","mode","getTimeformat","show","isLegendPopup","isLegendInline","backgroundColor","getLegendposition","grid","aboveData","getGridcolor","tickColor","markingsColor","borderColor","hoverable","touch","scale","autoWidth","autoHeight","delayTouchEnded","simulClick","tapThreshold","dbltapThreshold","tapPrecision","val","axisLabelColour","yaxis","zoomRange","getZoomYAxis","xaxis","panRange","clickable","ticks","diagram","empty","$","debug","that","container","closest","actor","action","getPlaceholder","unbind","getSeriesSettings","xAxis","isInteractive","ret","getSeriesStart","getSeriesEnd","getSeriesResolution","selectedSeries","hour","day","fullday","week","month","year","getSeries","forceReload","tsloaded","tsSuccessful","isNaN","getForceNowDatapoint","plugins","AbstractDiagram","bars","lines","zero","points","fulldata","loadedData","loadedIndex","k","setupGrid","draw","destruct","_disposeObjects","defer","ScriptLoader","addScripts","$$dbClassInfo","Bootstrap","executePendingDefers","__P_19_0","_onDomReady","$$domReady","pageId","broker","message","Bus","setRestartOnVisible","subscribe","isVisible","DeferredCall","schedule","getData","removeListenerById","initListeners","_getInnerDomString","getPreviewlabels","getWidth","getHeight","addHandler","WidgetFactory","registerClass","Diagram","Update","parseAddress","parseFormat","_update","address","defaultUpdate","getDomElement","Info"],"mappings":"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","sourcesContent":["/* AbstractDiagram.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates flot (diagrams in javascript) into the visualization.\n * server-side data-storage is rrd or InfluxDB.\n *\n * short documentation\n *\n * <h4>widgets:</h4>\n * <ul>\n *   <li>diagram</li>\n *   <li>diagram_info</li>\n * </ul>\n *\n * <h4>attributes (per diagram):</h4>\n * <ul>\n *   <li>series:               optional, \"hour\", \"day\" (default), \"week\", \"month\", \"year\"</li>\n *   <li>period:               optional, number of \"series\" to be shown</li>\n *   <li>refresh:              optional, refresh-rate in seconds, no refresh if missing</li>\n *   <li>gridcolor:            optional, color for dataline and grid, HTML-colorcode</li>\n *   <li>width, height:        optional, width and height of \"inline\"-diagram</li>\n *   <li>previewlabels:        optional, show labels on \"inline\"-diagram</li>\n *   <li>popup:                optional, make diagram clickable and open popup</li>\n *   <li>legend:               optional, \"none\", \"both\", \"inline\", \"popup\" select display of legend</li>\n *   <li>title:                optional, diagram title (overrides label-content)</li>\n * </ul>\n *\n * <h4>attributes (per graph):</h4>\n * <ul>\n *   <li>style:                optional, \"lines\" (default), \"bars\", \"points\" select graph type</li>\n *   <li>fill:                 optional, true or false - fill the space under the line / within the bar (line / bar style graphs)</li>\n *   <li>barWidth:             optional, width of bars (bar style graphs)</li>\n *   <li>align:                optional, \"left\" (default), \"center\", \"right\" select qlignemnt of bars (bar style graphs)</li>\n * </ul>\n *\n * @author Michael Hausl [michael at hausl dot com]\n * @since 0.6.0\n *\n * @asset(plugins/diagram/influxfetch.php)\n * @asset(plugins/diagram/dep/flot/jquery.flot.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.touch.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.canvas.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.resize.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.time.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.axislabels.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.tooltip.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.navigate.min.js)\n */\nqx.Class.define('cv.plugins.diagram.AbstractDiagram', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Operate, cv.ui.common.Refresh],\n  type: 'abstract',\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct: function (props) {\n    this.base(arguments, props);\n    this._debouncedLoadDiagramData = qx.util.Function.debounce(this.loadDiagramData.bind(this), 200);\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    cache: {},\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @param mappings\n     */\n    parse: function (xml, path, flavour, pageType, mappings) {\n      if (mappings) {\n        mappings = Object.assign(mappings, this.getAttributeToPropertyMappings());\n      } else {\n        mappings = this.getAttributeToPropertyMappings();\n      }\n      cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, mappings);\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n\n      const legend = xml.getAttribute('legend') || 'both';\n      return cv.data.Model.getInstance().setWidgetData(path, {\n        content           : this.getDiagramElements(xml),\n        legendInline      : ['both', 'inline'].indexOf(legend) >= 0,\n        legendPopup       : ['both', 'popup'].indexOf(legend) >= 0\n      });\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        series            : { 'default': 'day' },\n        seriesStart       : { 'default': 'end-month' },\n        seriesEnd         : { 'default': 'now' },\n        seriesResolution  : { 'default': 300, transform: parseInt },\n        period            : { 'default': 1, transform: parseInt },\n        legendposition    : { 'default': 'ne' },\n        timeformat        : {},\n        timeformatTooltip : { 'default': '%d.%m.%Y %H:%M' },\n        zoomYAxis         : { transform: function(value) {\n          return value === 'true';\n        }},\n        title             : { target: 'title' },\n        refresh           : {},\n        gridcolor         : { 'default': '#81664B' },\n        previewlabels     : { transform: function(value) {\n          return value === 'true';\n        }},\n        popup             : { transform: function(value) {\n          return value === 'true';\n        }},\n        tooltip           : { transform: function(value) {\n          return value === 'true';\n        }}\n      };\n    },\n\n    getDiagramElements: function(xmlElement) {\n      const retVal = {\n        axes: [],\n        axesnum: 0,\n        ts: [],\n        tsnum: 0\n      };\n      const axesNameIndex = [];\n\n      xmlElement.querySelectorAll('axis').forEach(function(elem) {\n        const unit = elem.getAttribute('unit') || '';\n        retVal.axes[retVal.axesnum] = {\n          axisLabel     : elem.getAttribute('label') || null,\n          position      : elem.getAttribute('position') || 'left',\n          min           : elem.getAttribute('min') || null,\n          max           : elem.getAttribute('max') || null,\n          unit          : unit,\n          tickDecimals  : elem.getAttribute('decimals') || null,\n          tickFormatter : function (v, axis) {\n            return v.toFixed(axis.tickDecimals) + unit;\n          }\n        };\n        retVal.axesnum++;\n        axesNameIndex[elem.textContent] = retVal.axesnum;\n      }, this);\n\n      xmlElement.querySelectorAll('influx,rrd').forEach(function(elem) {\n        const src = elem.tagName === 'rrd' ? elem.textContent : elem.getAttribute('measurement');\n        const steps = (elem.getAttribute('steps') || 'false') === 'true';\n        const fillMissing = elem.getAttribute('fillMissing');\n        retVal.ts[retVal.tsnum] = {\n          tsType    : elem.tagName,\n          src       : src,\n          color     : elem.getAttribute('color'),\n          label     : elem.getAttribute('label') || src,\n          axisIndex : axesNameIndex[elem.getAttribute('yaxis')] || 1,\n          steps     : steps,\n          fill      : (elem.getAttribute('fill') || 'false') === 'true',\n          scaling   : parseFloat(elem.getAttribute('scaling')) || 1.0,\n          cFunc     : elem.getAttribute('consolidationFunction') || (elem.tagName === 'rrd' ? 'AVERAGE' : 'MEAN'),\n          fillTs    : (fillMissing === null) ? (steps ? 'previous' : 'linear') : fillMissing,\n          resol     : parseInt(elem.getAttribute('resolution')),\n          offset    : parseInt(elem.getAttribute('offset')),\n          style     : elem.getAttribute('style') || 'lines',\n          align     : elem.getAttribute('align') || 'center',\n          barWidth  : elem.getAttribute('barWidth') || 1\n        };\n        if (elem.tagName === 'influx') {\n          retVal.ts[retVal.tsnum]['filter'] = this.getInfluxFilter(elem, 'AND');\n          retVal.ts[retVal.tsnum]['field'] = elem.getAttribute('field');\n          retVal.ts[retVal.tsnum]['authentication'] = elem.getAttribute('authentication');\n        } else {\n          let dsIndex = elem.getAttribute('datasourceIndex') || 0;\n          if (dsIndex < 0) {\n            dsIndex = 0;\n          }\n          retVal.ts[retVal.tsnum].dsIndex = dsIndex;\n        }\n        retVal.tsnum++;\n      }, this);\n      return retVal;\n    },\n\n    /**\n     * Recursively walk through the elem to build filter sting\n     * @param elem\n     * @param type\n     */\n    getInfluxFilter: function(elem, type) {\n      const children = elem.children;\n      const length = children.length;\n      let retval = '';\n      let i = 0;\n\n      for (; i < length; i++) {\n        const child = children[i];\n\n        if (retval != '') {\n          retval += ' ' + type + ' ';\n        }\n\n        switch (child.tagName) {\n          case 'and':\n            retval += this.getInfluxFilter(child, 'AND');\n            break;\n\n          case 'or':\n            retval += this.getInfluxFilter(child, 'OR');\n            break;\n\n          case 'tag':\n            retval += child.getAttribute('key') + ' ' + child.getAttribute('operator') + ' \\'' + child.getAttribute('value') + '\\'';\n            break;\n\n          default:\n             // ignore unknown\n        }\n      }\n\n      if (type) {\n        return '(' + retval + ')';\n      }\n\n      return retval;\n    },\n\n    /**\n     * Get the rrd or InfluxDB and put it's content in the cache.\n     * @param ts\n     * @param start\n     * @param end\n     * @param res\n     * @param forceNowDatapoint\n     * @param refresh {Number} time is seconds to refresh the data\n     * @param force {Boolean} Update even when the cache is still valid\n     * @param callback {Function} call when the data has arrived\n     * @param callbackParameter\n     */\n    lookupTsCache: function(ts, start, end, res, forceNowDatapoint, refresh, force, callback, callbackParameter) {\n      const client = cv.TemplateEngine.getInstance().visu;\n      let key;\n      let url;\n      const chartsResource = client.getResourcePath('charts', {\n        src: ts.src,\n        start: start,\n        end: end\n      });\n      if (ts.tsType !== 'influx' && chartsResource !== null) {\n        // the backend provides an charts resource that must be processed differently (e.g. openHABs persistence data\n        url = chartsResource;\n        key = url;\n      } else {\n        url = ((ts.tsType === 'influx')\n            ? 'resource/plugins/diagram/influxfetch.php?ts=' + ts.src\n            : client.getResourcePath('rrd') + '?rrd=' + encodeURIComponent(ts.src) + '.rrd') +\n            '&ds=' + encodeURIComponent(ts.cFunc) +\n            // NOTE: don't encodeURIComponent `start` and `end` for RRD as the \"+\" needs to be in the URL in plain text\n            //       although it looks wrong (as a \"+\" in a URL translates in the decode to a space: \" \")\n            '&start=' + (ts.tsType === 'rrd' ? start : encodeURIComponent(start)) +\n            '&end=' + (ts.tsType === 'rrd' ? end : encodeURIComponent(end)) +\n            '&res=' + encodeURIComponent(res) +\n            (ts.fillTs ? '&fill=' + encodeURIComponent(ts.fillTs) : '') +\n            (ts.filter ? '&filter=' + encodeURIComponent(ts.filter) : '') +\n            (ts.field ? '&field=' + encodeURIComponent(ts.field) : '') +\n            (ts.authentication ? '&auth=' + encodeURIComponent(ts.authentication) : '');\n        key = url + (ts.tsType === 'rrd' ? '|' + ts.dsIndex : '');\n      }\n      let\n        urlNotInCache = !(key in this.cache);\n        let doLoad = force || urlNotInCache || !('data' in this.cache[key]) || (refresh!==undefined && (Date.now()-this.cache[key].timestamp) > refresh*1000);\n\n      if (doLoad) {\n        if (urlNotInCache) {\n          this.cache[key] = {waitingCallbacks: []};\n        }\n        this.cache[key].waitingCallbacks.push([ callback, callbackParameter ]);\n\n        if (this.cache[key].waitingCallbacks.length === 1) {\n          if (this.cache[key].xhr) {\n            this.cache[key].xhr.dispose();\n          }\n          const xhr = new qx.io.request.Xhr(url);\n          client.authorize(xhr);\n          xhr.set({\n            accept: 'application/json'\n          });\n          xhr.addListener('success', function(ev) {\n            this._onSuccess(ts, key, ev, forceNowDatapoint);\n          }, this);\n          xhr.addListener('statusError', function(ev) {\n            this._onStatusError(ts, key, ev);\n          }, this);\n          this.cache[key].xhr = xhr;\n          xhr.send();\n        }\n      } else {\n        callback(this.cache[key].data, callbackParameter);\n      }\n    },\n\n    _onSuccess: function(ts, key, ev, forceNowDatapoint) {\n      let tsdata = ev.getTarget().getResponse();\n      if (tsdata !== null) {\n        const client = cv.TemplateEngine.getInstance().visu;\n        if (client.hasCustomChartsDataProcessor(tsdata)) {\n          tsdata = client.processChartsData(tsdata);\n        } else {\n          // calculate timestamp offset and scaling\n          const millisOffset = (ts.offset ? ts.offset * 1000 : 0);\n          const newRrd = new Array(tsdata.length);\n          let j = 0;\n          const l = tsdata.length;\n          for (; j < l; j++) {\n            if (ts.tsType === 'rrd') {\n              newRrd[j] = [(tsdata[j][0] + millisOffset), (parseFloat(tsdata[j][1][ts.dsIndex]) * ts.scaling)];\n            } else {\n              newRrd[j] = [(tsdata[j][0] + millisOffset), (parseFloat(tsdata[j][1]) * ts.scaling)];\n            }\n          }\n          tsdata = newRrd;\n        }\n      }\n\n      let now = Date.now();\n\n      if (forceNowDatapoint) {\n        let last = Array.from(tsdata[tsdata.length - 1]); // force copy\n        last[0] = now;\n        tsdata.push(last);\n      }\n\n      this.cache[key].data = tsdata;\n      this.cache[key].timestamp = now;\n\n      this.cache[key].waitingCallbacks.forEach(function (waitingCallback) {\n        waitingCallback[0](tsdata, waitingCallback[1]);\n      }, this);\n      this.cache[key].waitingCallbacks.length = 0; // empty array)\n    },\n\n    _onStatusError: function(ts, key, ev) {\n      qx.log.Logger.error(this, '_onStatusError', ts, key, ev);\n      const tsdata = [];\n\n      this.cache[key].data = tsdata;\n      this.cache[key].timestamp = Date.now();\n\n      this.cache[key].waitingCallbacks.forEach(function (waitingCallback) {\n        waitingCallback[0](tsdata, waitingCallback[1]);\n      }, this);\n      this.cache[key].waitingCallbacks.length = 0; // empty array)\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    content: {\n      check: 'Object',\n      init: {}\n    },\n    title: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyTitle'\n    },\n    series: {\n      check: ['hour', 'day', 'week', 'month', 'year', 'fullday', 'custom'],\n      init: 'day'\n    },\n    seriesStart: {\n      check: 'String',\n      init: 'end-month'\n    },\n    seriesEnd: {\n      check: 'String',\n      init: 'now'\n    },\n    seriesResolution: {\n      check: 'Number',\n      init: 300\n    },\n    forceNowDatapoint: {\n      check: 'Boolean',\n      init: true\n    },\n    period: {\n      check: 'Number',\n      init: 1\n    },\n    legendInline: {\n      check: 'Boolean',\n      init: true\n    },\n    legendPopup: {\n      check: 'Boolean',\n      init: true\n    },\n    legendposition: {\n      check: ['nw', 'ne', 'sw', 'se'],\n      init: 'ne'\n    },\n    timeformat: {\n      check: 'String',\n      nullable: true\n    },\n    timeformatTooltip: {\n      check: 'String',\n      init: '%d.%m.%Y %H:%M'\n    },\n    zoomYAxis: {\n      check: 'Boolean',\n      init: false\n    },\n    gridcolor: {\n      check: 'String',\n      init: '#81664B'\n    },\n    previewlabels: {\n      check: 'Boolean',\n      init: false\n    },\n    popup: {\n      check: 'Boolean',\n      init: false\n    },\n    tooltip: {\n      check: 'Boolean',\n      init: false\n    }\n  },\n\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _init: null,\n    popupplot: null,\n    plot: null,\n    plotted: null,\n    _timerPopup: null,\n    __isPopup: false,\n\n    // property apply\n    _applyTitle: function(value) {\n      if (value) {\n        // override label\n        this.setLabel('<div class=\"label\">' + value + '</div>');\n      }\n    },\n\n    _setupRefreshAction: function() {\n      if (this.getRefresh()) {\n        if (!this._timer) {\n          this._timer = new qx.event.Timer(this.getRefresh());\n          this._timer.addListener('interval', function () {\n            this.loadDiagramData(this.plot, false, true);\n          }, this);\n        }\n\n        if (!this._timerPopup) {\n          this._timerPopup = new qx.event.Timer(this.getRefresh());\n          this._timerPopup.addListener('interval', function () {\n            this.loadDiagramData(this.popupplot, false, true);\n          }, this);\n        }\n      }\n    },\n\n    /**\n     * Stop the refresh timer\n     *\n     * @param timer {qx.event.Timer} stop this timer\n     * @protected\n     */\n    _stopRefresh: function(timer) {\n      if (timer && timer.isEnabled()) {\n        timer.stop();\n      }\n    },\n\n    /**\n     * Start the refresh timer\n     *\n     * @param timer {qx.event.Timer} start this timer\n     * @param runImmediately {Boolean} fire the timers 'interval' event immediately to trigger an refresh right now\n     * @protected\n     */\n    _startRefresh: function(timer, runImmediately) {\n      if (timer) {\n        if (!timer.isEnabled()) {\n          timer.start();\n        }\n        if (runImmediately === true) {\n          timer.fireEvent('interval');\n        }\n      }\n    },\n\n    _action: function() {\n      const popupDiagram = qx.dom.Element.create('div', {\n        'class': 'diagram',\n        id: this.getPath() + '_big',\n        style: 'height: 90%'\n      });\n      this._init = true;\n      const popup = cv.ui.PopupHandler.showPopup('diagram', {\n        title: this.getLabel(),\n        content: popupDiagram,\n        page: this.getParentPage().getPath()\n      });\n\n      // this will be called when the popup is being closed.\n      // NOTE: this will be called twice, one time for the foreground and one\n      //       time for the background.\n      popup.addListener('close', function() {\n        this._stopRefresh(this._timerPopup);\n        qx.event.Registration.removeAllListeners(popupDiagram);\n        if (this.popupplot) {\n          this.popupplot.shutdown();\n          this.popupplot = null;\n        }\n      }, this);\n\n      const parent = popupDiagram.parentNode;\n      Object.entries({height: '100%', width: '95%', margin: 'auto'}).forEach(function(key_value) {\n parent.style[key_value[0]]=key_value[1]; \n});// define parent as 100%!\n      popupDiagram.innerHTML = '';\n      qx.event.Registration.addListener(popupDiagram, 'tap', function(event) {\n        // don't let the popup know about the click, or it will close\n        event.stopPropagation();\n      }, this);\n\n      this.initDiagram(true);\n\n      this._startRefresh(this._timerPopup, true);\n    },\n\n    initDiagram: function(isPopup) {\n      if (!this._init) {\n        return;\n      }\n      this._init = false;\n      isPopup = isPopup || this.__isPopup;\n\n      const options = {\n        canvas: true,\n        tooltip: this.getTooltip(),\n        tooltipOpts: {\n          content: '<center>%x<br/>%y</center>',\n          xDateFormat: this.getTimeformatTooltip(),\n          shifts: {\n            x: 20,\n            y: 10\n          },\n          defaultTheme: false\n        },\n        zoom: {\n          interactive: isPopup,\n          trigger: 'dblclick',\n          amount: 1.5\n        },\n        pan: {\n          interactive: isPopup,\n          cursor: 'move',\n          frameRate: 20,\n          triggerOnDrag: false\n        },\n        yaxes: JSON.parse(JSON.stringify(this.getContent().axes)), // deep copy to prevent side effects\n        xaxes: [{\n          mode: 'time',\n          timeformat: this.getTimeformat()\n        }],\n        legend: {\n          show: (isPopup && this.isLegendPopup()) || (!isPopup && this.isLegendInline()),\n          backgroundColor: '#101010',\n          position: this.getLegendposition()\n        },\n        grid: {\n          show: true,\n          aboveData: false,\n          color: this.getGridcolor(),\n          backgroundColor: '#000000',\n          tickColor: this.getGridcolor(),\n          markingsColor: this.getGridcolor(),\n          borderColor: this.getGridcolor(),\n          hoverable: true\n        },\n        touch: {\n          pan: isPopup ? 'x' : 'none', // what axis pan work\n          scale: isPopup ? 'x' : 'none', // what axis zoom work\n          autoWidth: false,\n          autoHeight: false,\n          delayTouchEnded: 500, // delay in ms before touchended event is fired if no more touches\n          callback: null, // other plot draw callback\n          simulClick: true, // plugin will generate Mouse click event to brwoser on tap or double tap\n          tapThreshold: 150, // range of time where a tap event could be detected\n          dbltapThreshold: 200, // delay needed to detect a double tap\n          tapPrecision: 60 / 2 // tap events boundaries ( 60px square by default )\n        }\n      };\n      options.yaxes.forEach(function(val) {\n        Object.assign(val, {axisLabelColour: this.getGridcolor(), color: this.getGridcolor()});\n      }, this);\n      options.xaxes.forEach(function(val) {\n        Object.assign(val, {axisLabelColour: this.getGridcolor(), color: this.getGridcolor()});\n      }, this);\n      if (isPopup) {\n        Object.assign(options, {\n          yaxis : {\n            isPopup   : true,\n            zoomRange : this.getZoomYAxis() ? [null, null] : false\n          },\n          xaxis : {\n            zoomRange : [null, null],\n            panRange  : [null, null]\n          }\n        });\n      }\n      if (this.getTooltip()) {\n        options.grid.hoverable = true;\n        options.grid.clickable = true;\n      }\n\n      if (!isPopup && !this.getPreviewlabels()) {\n        Object.assign(options, {xaxes: [ {ticks: 0, mode: options.xaxes[0].mode } ]});\n        if (options.yaxes.length === 0) {\n          options.yaxes[0] = {};\n        }\n        options.yaxes.forEach(function(val) {\n          Object.assign(val, {ticks:0, axisLabel: null});\n        }, this);\n      }\n\n      // plot diagram initially with empty values\n      const diagram = isPopup ? $('#' + this.getPath() + '_big') : $('#' + this.getPath() + ' .actor div');\n      diagram.empty();\n      const plot = $.plot(diagram, [], options);\n      if (isPopup) {\n        this.debug('popup plot generated');\n        this.popupplot = plot;\n      } else {\n        this.debug('plot generated');\n        this.plot = plot;\n      }\n      this.plotted = true;\n\n      const that = this;\n      diagram.bind('plotpan', function(event, plot) {\n        that._debouncedLoadDiagramData(plot, isPopup, false);\n      }).bind('plotzoom', function() {\n        that.loadDiagramData(plot, isPopup, false);\n      }).bind('touchended', function() {\n        that.loadDiagramData(plot, isPopup, false);\n      }).bind('tap', function() {\n        const self = this;\n        const container = $(self).closest('.widget_container')[0];\n        if (!isPopup && container !== undefined) {\n          const actor = $(self).closest('.actor')[0];\n          const path = container.id;\n          if (actor !== undefined && path.length > 0) {\n            that.action();\n          }\n        }\n      });\n\n      if (!isPopup) {\n        // disable touch plugin in non-popup\n        plot.getPlaceholder().unbind('touchstart').unbind('touchmove').unbind('touchend');\n      }\n\n      this.loadDiagramData(plot, isPopup, false);\n    },\n\n    getSeriesSettings: function(xAxis, isInteractive) {\n      const series = {\n        hour: {res: '60', start: 'hour', end: 'now'},\n        day: {res: '300', start: 'day', end: 'now'},\n        fullday: {res: '300', start: 'day', end: 'midnight+24hour'},\n        week: {res: '1800', start: 'week', end: 'now'},\n        month: {res: '21600', start: 'month', end: 'now'},\n        year: {res: '432000', start: 'year', end: 'now'}\n      };\n\n      const ret = {\n        start: null,\n        end: null,\n        res: null\n      };\n      if (this.getSeries() === 'custom') {\n        // initial load, take parameters from custom configuration\n        ret.start = this.getSeriesStart();\n        ret.end = this.getSeriesEnd();\n        ret.res = this.getSeriesResolution();\n      } else {\n        const selectedSeries = series[this.getSeries()];\n        if (!selectedSeries) {\n          return null;\n        }\n\n        // initial load, take parameters from configuration\n        ret.start = 'end-' + this.getPeriod() + selectedSeries.start;\n        ret.end = selectedSeries.end;\n        ret.res = this.getSeriesResolution() ? this.getSeriesResolution() : selectedSeries.res;\n      }\n\n      if (xAxis.datamin && xAxis.datamax && isInteractive) {\n        ret.start = (xAxis.min / 1000).toFixed(0);\n      }\n      return ret;\n    },\n\n    loadDiagramData: function(plot, isInteractive, forceReload) {\n      if (!plot) {\n        return;\n      }\n      const series = this.getSeriesSettings(plot.getAxes().xaxis, isInteractive);\n      if (!series) {\n        return;\n      }\n\n      // init\n      let loadedData = [];\n      let tsloaded = 0;\n      let tsSuccessful = 0;\n      // get all time series data\n      this.getContent().ts.forEach(function(ts, index) {\n        const res = isNaN(ts.resol) ? series.res : ts.resol;\n        const forceNowDatapoint = this.getForceNowDatapoint();\n        const refresh = this.getRefresh() ? this.getRefresh() : res;\n\n        cv.plugins.diagram.AbstractDiagram.lookupTsCache(ts, series.start, series.end, res, forceNowDatapoint, refresh, forceReload, function(tsdata) {\n          tsloaded++;\n          if (tsdata !== null) {\n            tsSuccessful++;\n\n            // store the data for diagram plotting\n            loadedData[index] = {\n              label: ts.label,\n              color: ts.color,\n              data: tsdata,\n              yaxis: parseInt(ts.axisIndex),\n              bars: { show: ts.style === 'bars', fill: ts.fill, barWidth: parseInt(ts.barWidth), align: ts.align },\n              lines: { show: ts.style === 'lines', steps: ts.steps, fill: ts.fill, zero: false },\n              points: { show: ts.style === 'points', fill: ts.fill }\n            };\n          }\n\n          // if loading has finished, i.e. all time series have been retrieved,\n          // go on and plot the diagram\n          if (tsloaded === this.getContent().tsnum) {\n            let fulldata;\n            // If all time series were successfully loaded, no extra action is needed.\n            // Otherwise we need to reduce the array to the loaded data.\n            if (tsSuccessful === tsloaded) {\n              fulldata = loadedData;\n            } else {\n              fulldata = [];\n              let loadedIndex = -1;\n              for (let j = 0; j < tsSuccessful; j++) {\n                for (let k = loadedIndex + 1; k < loadedData.length; k++) {\n                  if (loadedData[k] !== null) {\n                    fulldata[j] = loadedData[k];\n                    loadedIndex = k;\n                    break;\n                  }\n                }\n              }\n            }\n\n            // plot\n            plot.setData(fulldata);\n            plot.setupGrid();\n            plot.draw();\n\n            loadedData = [];\n          }\n        }.bind(this));\n      }, this);\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct: function() {\n    if (this._timerPopup) {\n      this._disposeObjects('_timerPopup');\n    }\n  },\n\n  defer: function() {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts([\n      'plugins/diagram/dep/flot/jquery.flot.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.touch.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.canvas.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.resize.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.time.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.axislabels.js',\n      'plugins/diagram/dep/flot/jquery.flot.tooltip.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.navigate.min.js'\n    ], [0]);\n  }\n});\n","/* Diagram.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\nqx.Class.define('cv.plugins.diagram.Diagram', {\n  extend: cv.plugins.diagram.AbstractDiagram,\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct: function(props) {\n    this._init = true;\n    this.base(arguments, props);\n  },\n\n  /*\n   ******************************************************\n   PROPERTIES\n   ******************************************************\n   */\n  properties: {\n    width: {\n      check: 'String',\n      nullable: true\n    },\n    height: {\n      check: 'String',\n      nullable: true\n    }\n  },\n\n  /*\n   ******************************************************\n   STATICS\n   ******************************************************\n   */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse: function (xml, path, flavour, pageType) {\n      return cv.plugins.diagram.AbstractDiagram.parse(xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        width: { transform: function(value) {\n          return value ? parseInt(value)+'px' : null;\n        }},\n        height: { transform: function(value) {\n          return value ? parseInt(value)+'px' : null;\n        }}\n      };\n    }\n  },\n\n  /*\n   ******************************************************\n   MEMBERS\n   ******************************************************\n   */\n  members: {\n    __vlid1: null,\n\n    _onDomReady: function() {\n      if (!this.$$domReady) {\n        const pageId = this.getParentPage().getPath();\n        const broker = qx.event.message.Bus;\n\n        // let the refresh only be active when this widget is visible\n        this.setRestartOnVisible(true);\n\n        broker.subscribe('path.' + pageId + '.beforePageChange', function () {\n          if (!this._init) {\n            this.loadDiagramData(this.plot, false, false);\n          }\n        }, this);\n\n        broker.subscribe('page.' + pageId + '.appear', function () {\n          // create diagram when it's not already existing\n          if (this._init) {\n            this.initDiagram(false);\n          }\n        }, this);\n\n        // initialize the diagram but don't make the initialization process wait for it\n        // by using a deferred call\n        if (this.isVisible()) {\n          new qx.util.DeferredCall(function () {\n            if (!this._init) {\n              this.loadDiagramData(this.plot, false, false);\n            } else {\n              this.initDiagram(false);\n            }\n          }, this).schedule();\n        } else {\n          this.__vlid1 = this.addListener('changeVisible', function(ev) {\n            if (ev.getData()) {\n              if (!this._init) {\n                this.loadDiagramData(this.plot, false, false);\n              } else {\n                this.initDiagram(false);\n              }\n              this.removeListenerById(this.__vlid1);\n              this.__vlid1 = null;\n            }\n          }, this);\n        }\n        this.$$domReady = true;\n        this.initListeners();\n      }\n    },\n\n    _getInnerDomString: function() {\n      const classStr = this.getPreviewlabels() ? 'diagram_inline' : 'diagram_preview';\n      const styleStr = 'min-height: 40px' +\n        (this.getWidth() ? (';width:' + this.getWidth()) : '') +\n        (this.getHeight() ? (';height:' + this.getHeight()) : ';height: 100%');\n\n      return '<div class=\"actor clickable\" style=\"height: 100%; min-height: 40px;\"><div class=\"' + classStr + '\" style=\"' + styleStr + '\">loading...</div></div>';\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler('diagram', statics);\n    cv.ui.structure.WidgetFactory.registerClass('diagram', statics);\n  }\n});\n","/* Info.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\nqx.Class.define('cv.plugins.diagram.Info', {\n  extend: cv.plugins.diagram.AbstractDiagram,\n  include: [cv.ui.common.Update],\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct: function(props) {\n    this._init = false;\n    this.base(arguments, props);\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.plugins.diagram.AbstractDiagram.parse(xml, path, flavour, pageType);\n      cv.parser.WidgetParser.parseAddress(xml, path);\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      return data;\n    }\n  },\n\n\n  /*\n   ******************************************************\n   MEMBERS\n   ******************************************************\n   */\n  members: {\n    _getInnerDomString: function() {\n      return '<div class=\"actor clickable switchUnpressed\"><div class=\"value\">-</div></div>';\n    },\n    _update: function(address, data) {\n      if (address !== undefined && data !== undefined) {\n        return this.defaultUpdate(address, data, this.getDomElement(), true, this.getPath());\n      }\n      return null;\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler('diagram_info', statics);\n    cv.ui.structure.WidgetFactory.registerClass('diagram_info', statics);\n  }\n});\n"]}