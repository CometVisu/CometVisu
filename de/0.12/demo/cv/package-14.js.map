{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Speech.js"],"names":["qx","Class","define","extend","core","Object","include","cv","ui","common","Update","construct","props","this","_initOnCreate","constructor","call","set","__P_15_0","statics","parse","element","path","window","speechSynthesis","log","Logger","warn","data","Model","getInstance","setWidgetData","language","getAttribute","toLowerCase","address","mapping","repeatTimeout","parseInt","$$type","$$initOnCacheLoad","properties","check","init","parentWidget","members","getDomString","_processIncomingValue","value","applyTransform","handleUpdate","text","TemplateEngine","visu","getDataReceived","substring","getRepeatTimeout","Math","round","Date","now","time","notifications","SpeechHandler","say","getLanguage","debug","defer","parser","WidgetParser","addHandler","plugins","Speech","structure","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"8XAwDCA,GAAAC,MAAAC,OAAA,qBACCC,OAAOH,GAAAI,KAAOC,OACdC,QAAQC,GAAGC,GAAHC,OAD2BC,OAQpCC,UAAA,SAAAC,GACCC,KAAAC,eAAW,EACTd,GAAAI,KAAKC,OAAAU,YAALC,KAAAH,MACAA,KAAAI,IAAAL,GACAC,KAAKK,aASRC,SACCC,MAAS,SAAAC,EAAAC,GACP,IAAOC,OAAAC,gBAAmB,CACxBxB,GAAKyB,IAAAC,OAAOC,KAAAd,KAAZ,oDACE,OAAO,uDAIT,OAAMN,GAAAqB,KAAUC,MAAGC,cAAOC,cAAaT,GAEvCA,KAAUA,EACRU,SADqDX,EAAAY,aAAA,QAAAZ,EAAAY,aAAA,QAAAC,cAAA,KAErDC,QAAAA,EACAC,QAAYf,EAHyCY,aAAA,WAIrDI,cAAYhB,EAAQY,aAAa,kBAJoBK,SAAAjB,EAAAY,aAAA,oBAAA,EAKrDM,OAAA,SAEAC,mBAAA,MAUPC,YACCnB,MACEoB,MAAoB,UAAAH,QACpBG,MAAoB,UAAAF,mBACpBE,MAAA,WAAoBV,UACpBU,MAAQ,UAAYN,SACpBM,MAAoB,SAAEC,KAAK,IAAPN,eACpBK,MAAA,SAAsBC,MAAO,GAATC,cACpBF,MAAA,sCACEC,KAAK,OASVE,SACC3B,SAAS,KACP4B,aADO,aAKNC,sBALM,SAAAZ,EAAAP,GAQL,IAAAoB,EAAAnC,KAAAoC,eAAAd,EAAAP,gCAKDsB,aAbM,SAAAC,EAAAhB,GAeP,GAAA5B,GAAA6C,eAActB,cAASuB,KAAMC,oFAkBzBH,EAAAA,EAAAI,UAAA,QACI,GAAG1C,KAAK2C,oBAAZ,GAEA3C,KAAAK,SAAAiB,IAAAtB,KAAAK,SAAAiB,GAAAgB,OAAAA,IAAA,IAAAtC,KAAA2C,oBAAA3C,KAAA2C,oBAAAC,KAAAC,OAAAC,KAAAC,MAAA/C,KAAAK,SAAAiB,GAAA0B,MAAA,MAAA,CAGEhD,KAAAK,SAAAiB,GAAA0B,KAAAF,KAAAC,0DAGA,uGAIJ/C,KAAKK,SAAMiB,IACXgB,KAAKA,EACHU,KAAMF,KADqBC,OAAArD,GAA7BH,KAAA0D,cAAAC,cAAAjC,cAAAkC,IAAAb,EAAAtC,KAAAoD,oBApBEpD,KAAAqD,MAAA,+BAZJ,CAEIrD,KAAAK,SAAAiB,IACAgB,KAAKA,EACHU,KAAMF,KADqBC,OAAA/C,KAA7BqD,MAAA,4BAAAf,MAlBGgB,MAnE0B,SAAAhD,GA4HjCZ,GAAA6D,OAAAC,aAAAC,WAAA,SAAA/D,GAAAgE,QAAAC,QACAjE,GAAGC,GAAAiE,UAAOC,cAAaC,cAAqB,SAAAxD,MA7HXZ,GAApCgE,QAAAC,OAAAI,cAAAA","sourcesContent":["/* Speech.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Use the Web Speech API (https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API)\n * to make text-to-speech service available. This plugin listens to a address and forwards the\n * incoming data to the browser TTS engine (if the browser supports it)\n *\n * <h4>Simple example</h4>\n * <pre class=\"sunlight-highlight-xml\">\n * &lt;speech lang=&quot;en&quot;&gt;\n *  &lt;address transform=&quot;OH:string&quot; mode=&quot;read&quot;&gt;Speak&lt;/address&gt;\n * &lt;/speech&gt;\n * </pre>\n *\n * <h4>Example preventing repetition within a timeout and use mapping</h4>\n * <pre class=\"sunlight-highlight-xml\">\n * ...\n * &lt;meta&gt;\n *  &lt;plugins&gt;\n *    &lt;plugin name=&quot;speech&quot; /&gt;\n *  &lt;/plugins&gt;\n *  &lt;mappings&gt;\n *    &lt;mapping name=&quot;speak&quot;&gt;\n *      &lt;entry value=&quot;0&quot;&gt;Hello, welcome home&lt;/entry&gt;\n *      &lt;entry value=&quot;1&quot;&gt;Please close all windows&lt;/entry&gt;\n *      &lt;entry value=&quot;2&quot;&gt;Please close all doors&lt;/entry&gt;\n *    &lt;/mapping&gt;\n *  &lt;/mappings&gt;\n * &lt;/meta&gt;\n * ...\n * &lt;speech lang=&quot;en&quot; repeat-timout=&quot;300&quot; mapping=&quot;speak&quot;&gt;\n *  &lt;address transform=&quot;DPT:5.010&quot; mode=&quot;read&quot;&gt;Speak&lt;/address&gt;\n * &lt;/speech&gt;\n * </pre>\n *\n * @author Tobias BrÃ¤utigam\n * @since 0.10.0\n *\n */\nqx.Class.define('cv.plugins.Speech', {\n  extend: qx.core.Object,\n  include: cv.ui.common.Update,\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct: function(props) {\n    this._initOnCreate = true;\n    this.base(arguments);\n    this.set(props);\n    this.__lastSpeech = {};\n  },\n\n\n  /*\n   ******************************************************\n   STATICS\n   ******************************************************\n   */\n  statics: {\n    parse: function (element, path) {\n      if (!window.speechSynthesis) {\n        qx.log.Logger.warn(this, 'this browser does not support the Web Speech API');\n        return null;\n      }\n\n      const address = cv.parser.WidgetParser.makeAddressList(element, path);\n\n      return cv.data.Model.getInstance().setWidgetData(path, {\n        'path'    : path,\n        'language': element.getAttribute('lang') ? element.getAttribute('lang').toLowerCase() : null,\n        'address' : address,\n        'mapping' : element.getAttribute('mapping'),\n        'repeatTimeout': element.getAttribute('repeat-timeout') ? parseInt(element.getAttribute('repeat-timeout')) : -1,\n        '$$type'  : 'speech',\n        // this widget needs to be initialized when the cache is used, otherwise it wont be available\n        '$$initOnCacheLoad': true\n      });\n    }\n  },\n\n  /*\n   ******************************************************\n   PROPERTIES\n   ******************************************************\n   */\n  properties: {\n    path              : { check: 'String' },\n    $$type            : { check: 'String' },\n    $$initOnCacheLoad : { check: 'Boolean' },\n    language          : { check: 'String' },\n    mapping           : { check: 'String', init: '' },\n    repeatTimeout     : { check: 'Number', init: -1 },\n    parentWidget: {\n      check: 'cv.ui.structure.AbstractBasicWidget',\n      init: null\n    }\n  },\n\n  /*\n   ******************************************************\n   MEMBERS\n   ******************************************************\n   */\n  members: {\n    __lastSpeech : null,\n\n    getDomString: function() {\n      return undefined;\n    },\n\n    _processIncomingValue: function(address, data) {\n      // #1: transform the raw value to a JavaScript type\n      const value = this.applyTransform(address, data);\n\n      // #2: map it to a value the user wants to see\n      return this.applyMapping(value);\n    },\n\n    handleUpdate: function(text, address) {\n      if (!cv.TemplateEngine.getInstance().visu.getDataReceived()) {\n        // first call -> skipping\n        this.__lastSpeech[address] = {\n          text: text,\n          time: Date.now()\n        };\n        this.debug('skipping initial TTS for '+text);\n        return;\n      }\n\n      if (!text || text.length === 0) {\n        // nothing to say\n        this.debug('no text to speech given');\n        return;\n      }\n\n      if (typeof text === 'string' && text.substring(0, 1) === '!') {\n        // override repeatTimeout, force saying this\n        text = text.substring(1);\n      } else if (this.getRepeatTimeout() >= 0) {\n        // do not repeat (within timeout when this.repeatTimeout > 0)\n        if (this.__lastSpeech[address] && this.__lastSpeech[address].text === text && (this.getRepeatTimeout() === 0 ||\n          this.getRepeatTimeout() >= Math.round((Date.now()-this.__lastSpeech[address].time)/1000))) {\n          // update time\n          this.__lastSpeech[address].time = Date.now();\n          // do not repeat\n          this.debug('skipping TTS because of repetition ' + text);\n          return;\n        }\n      }\n      this.debug('changing lastSpeech from \\'%s\\' to \\'%s\\'', this.__lastSpeech[address] ? this.__lastSpeech[address].text : '', text);\n      this.__lastSpeech[address] = {\n        text: text,\n        time: Date.now()\n      };\n\n      cv.core.notifications.SpeechHandler.getInstance().say(text, this.getLanguage());\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler('speech', cv.plugins.Speech);\n    cv.ui.structure.WidgetFactory.registerClass('speech', statics);\n  }\n});\n"]}