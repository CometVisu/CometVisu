{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/OpenweatherMap.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Refresh","construct","props","refresh","constructor","call","this","__P_11_0","Object","keys","forEach","key","TemplateEngine","getInstance","isDomFinished","_refreshAction","event","message","Bus","subscribe","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","getAttributeToPropertyMappings","parseRefresh","class","target","lang","owID","q","lat","lon","units","type","forecast24hItems","forecastDailyItems","detailItems","showSunrise","appid","description","properties","cssClass","check","nullable","forecastDailyhItems","members","_getInnerDomString","classes","getCssClass","_setupRefreshAction","_timer","Timer","getRefresh","$","getDomElement","openweathermap","defer","loader","util","ScriptLoader","addStyles","addScripts","WidgetFactory","registerClass","plugins","OpenweatherMap","$$dbClassInfo"],"mappings":"+aAgCCA,GAAAC,MAAAC,OAAA,6BACCC,OAAOC,GAAAC,GAAOC,UAAAC,eACdC,QAAQJ,GAAGC,GAAGI,OAAAC,QAOfC,UAAA,SAAAC,GACCA,EAAAC,SAAW,GACTT,GAAAC,GAAMC,UAANC,eAAAO,YAAAC,KAAAC,KAAAJ,GACAI,KAAAC,YACAC,OAAKC,KAAAP,GAALQ,QAAA,SAAAC,GACMT,EAAMS,KACVL,KAAIC,SAAYI,GAAAT,EAAAS,KAEfL,sBAECZ,GAAKkB,eAATC,cAAyBC,gBACvBR,KAAOS,iBAAPzB,GAAA0B,MAEOC,QAAAC,IAAAC,UAAA,qBAAA,WAEHb,KAAAS,kBACAT,QAUTc,SAWAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACG,IAAKC,EAAEhC,GAAAiC,OAAUC,aAAWC,aAASvB,KAAUgB,EAAAC,EAAAC,EAAAC,EAAAnB,KAAAwB,kCAC7CpC,GAAAiC,OAAUC,aAAaG,aAAaT,EAAAC,GACpC,OAAGG,GAEJI,+BAfM,WAiBP,OACEE,OACEC,OAAS,YAAAC,QACTC,QACAC,KACAC,OACAC,OACAC,SACAC,QACAC,oBACAC,sBACAC,eACAC,eACAC,SACAC,kBAUPC,YACCC,UACEC,MAAQ,SACNC,UAAO,GADChB,MAIVe,MAAM,SACJC,UAAO,GADHf,MAINc,MAAM,SACJC,UAAO,GADHd,GAILa,MAAE,SACDC,UAAO,GADNb,KAIHY,MAAK,SACHC,UAAO,GADJZ,KAILW,MAAK,SACHC,UAAO,GADJX,OAILU,MAAO,SACLC,UAAO,GADFV,MAIPS,MAAM,SACJC,UAAO,GADHT,kBAINQ,MAAA,SACEC,UAAO,GADSC,qBAIlBF,MAAA,SACEC,UAAO,GADYN,aAIrBK,MAAA,SACEC,UAAO,GADIP,aAIbM,MAAA,SACEC,UAAO,GADIL,OAIbI,MAAO,SACLC,UAAO,GADFJ,aAIPG,MAAA,SACEC,UAAO,IASZE,SACC7C,SAAS,KACP8C,mBADO,WAGP,IAAAC,EAAA,2DAEEA,GAAS,IAAAhD,KAAeiD,sHAIzBC,oBATM,WAWPlD,KAAAmD,OAAA,IAAmBnE,GAAE0B,MAAA0C,MAAApD,KAAAqD,sHAMpB5C,eAjBM,WAmBP6C,EAActD,KAAEuD,iBACRC,eAAcxD,KAAAC,YApBfwD,MA7IkC,SAAA3C,GAsK3C,IAAK4C,EAAEtE,GAAAuE,KAASC,aAASrD,cACvBmD,EAAMG,UAAY,8CAClBH,EAAOG,UAAU,8CACjBH,EAAOI,WAAU,oHAGjB1E,GAAGC,GAAAC,UAAOyE,cAAaC,cAAW,iBAAkBlD,MA5KX1B,GAA5C6E,QAAAC,eAAAC,cAAAA","sourcesContent":["/* OpenweatherMap.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates OpenWeatherMap data.\n *\n * @author Stefan Borchert (stefan@borchert.cc)\n * @author Matthias\n * @since 0.9.0\n * @asset(plugins/openweathermap/owm_core.js)\n * @asset(plugins/openweathermap/owm_basic_style.css)\n * @asset(plugins/openweathermap/owm_weathericon.css)\n * @asset(plugins/openweathermap/font/weathericons-regular-webfont.eot)\n * @asset(plugins/openweathermap/font/weathericons-regular-webfont.woff)\n * @asset(plugins/openweathermap/font/weathericons-regular-webfont.ttf)\n */\nqx.Class.define('cv.plugins.OpenweatherMap', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: cv.ui.common.Refresh,\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function(props) {\n    props.refresh *= 60;\n    this.base(arguments, props);\n    this.__options = {};\n    Object.keys(props).forEach(function (key) {\n      if (props[key]) {\n        this.__options[key] = props[key];\n      }\n    }, this);\n    if (props.refresh === 0) {\n      if (cv.TemplateEngine.getInstance().isDomFinished()) {\n        this._refreshAction();\n      } else {\n        qx.event.message.Bus.subscribe('setup.dom.finished', function() {\n          // init once\n          this._refreshAction();\n        }, this);\n      }\n    }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function () {\n      return {\n        'class': { target: 'cssClass' },\n        'lang':   { },\n        'owID':  { },\n        'q':   { },\n        'lat':   { },\n        'lon':   { },\n        'units':   { },\n        'type':   { },\n        'forecast24hItems':   { },\n        'forecastDailyItems':   { },\n        'detailItems':   { },\n        'showSunrise': { },\n        'appid':   { },\n        'description':   { }\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    cssClass: {\n      check: 'String',\n      nullable: true\n    },\n    lang: {\n      check: 'String',\n      nullable: true\n    },\n    owID: {\n      check: 'String',\n      nullable: true\n    },\n    q: {\n      check: 'String',\n      nullable: true\n    },\n    lat: {\n      check: 'String',\n      nullable: true\n    },\n    lon: {\n      check: 'String',\n      nullable: true\n    },\n    units: {\n      check: 'String',\n      nullable: true\n    },\n    type: {\n      check: 'String',\n      nullable: true\n    },\n    forecast24hItems: {\n      check: 'String',\n      nullable: true\n    },\n    forecastDailyhItems: {\n      check: 'String',\n      nullable: true\n    },\n    showSunrise: {\n      check: 'String',\n      nullable: true\n    },\n    detailItems: {\n      check: 'String',\n      nullable: true\n    },\n    appid: {\n      check: 'String',\n      nullable: true\n    },\n    description: {\n      check: 'String',\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __options: null,\n\n    _getInnerDomString: function() {\n      let classes = 'widget clearfix text openweathermap';\n      if (this.getCssClass()) {\n        classes+=' '+this.getCssClass();\n      }\n      return '<div class=\"'+classes+'\"><div id=\"owm_' + this.getPath() + '\" class=\"openweathermap_value\"></div></div>';\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', this._refreshAction, this);\n      this._timer.start();\n      // call once immediately\n      this._refreshAction();\n    },\n\n    _refreshAction: function() {\n      const elem = $(this.getDomElement());\n      elem.openweathermap(this.__options);\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/openweathermap/owm_basic_style.css');\n    loader.addStyles('plugins/openweathermap/owm_weathericon.css');\n    loader.addScripts('plugins/openweathermap/owm_core.js');\n    // register the parser\n    cv.parser.WidgetParser.addHandler('openweathermap', cv.plugins.OpenweatherMap);\n    cv.ui.structure.WidgetFactory.registerClass('openweathermap', statics);\n  }\n});\n"]}