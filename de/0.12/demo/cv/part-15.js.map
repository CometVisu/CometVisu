{"version":3,"sources":["../../../source/class/cv/plugins/Speech.js"],"names":["qx","Bootstrap","executePendingDefers","$$dbClassInfo","Class","define","extend","core","Object","include","cv","ui","common","Update","construct","props","this","_initOnCreate","constructor","call","set","__lastSpeech","statics","parse","element","path","window","speechSynthesis","address","parser","WidgetParser","makeAddressList","data","Model","getInstance","setWidgetData","language","getAttribute","toLowerCase","mapping","repeatTimeout","parseInt","$$type","$$initOnCacheLoad","log","Logger","warn","properties","check","init","parentWidget","members","getDomString","_processIncomingValue","value","applyTransform","applyMapping","handleUpdate","text","TemplateEngine","visu","getDataReceived","length","substring","getRepeatTimeout","Math","round","Date","now","time","debug","notifications","SpeechHandler","say","getLanguage","defer","addHandler","plugins","Speech","structure","WidgetFactory","registerClass"],"mappings":"yVAACA,GAAEC,UAAUC,qBAAqBC,GAyDjCH,GAAEI,MAAMC,OAAO,qBACdC,OAAQN,GAAGO,KAAKC,OAChBC,QAASC,GAAGC,GAAGC,OAAOC,OAOtBC,UAAW,SAASC,GAClBC,KAAKC,eAAgB,EACrBjB,GAAAO,KAAAC,OAAAU,YAAAC,KAAAH,MACAA,KAAKI,IAAIL,GACTC,KAAKK,iBASPC,SACEC,MAAO,SAAUC,EAASC,GACxB,GAAKC,OAAOC,gBAAZ,CAKA,IAAIC,EAAUlB,GAAGmB,OAAOC,aAAaC,gBAAgBP,EAASC,GAE9D,OAAOf,GAAGsB,KAAKC,MAAMC,cAAcC,cAAeV,GAChDA,KAAYA,EACZW,SAAYZ,EAAQa,aAAa,QAAUb,EAAQa,aAAa,QAASC,cAAgB,KACzFV,QAAYA,EACZW,QAAYf,EAAQa,aAAa,WACjCG,cAAiBhB,EAAQa,aAAa,kBAAoBI,SAASjB,EAAQa,aAAa,oBAAsB,EAC9GK,OAAY,SAEZC,mBAAqB,IAdrB3C,GAAG4C,IAAIC,OAAOC,KAAK9B,KAAM,sDAwB/B+B,YACEtB,MAAsBuB,MAAO,UAC7BN,QAAsBM,MAAO,UAC7BL,mBAAsBK,MAAO,WAC7BZ,UAAsBY,MAAO,UAC7BT,SAAsBS,MAAO,SAAUC,KAAM,IAC7CT,eAAsBQ,MAAO,SAAUC,MAAO,GAC9CC,cACEF,MAAO,sCACPC,KAAM,OASVE,SACE9B,aAAe,KAEf+B,aAAc,aAIdC,sBAAuB,SAASzB,EAASI,GAEvC,IAAIsB,EAAQtC,KAAKuC,eAAe3B,EAASI,GAGzC,OAAOhB,KAAKwC,aAAaF,IAG3BG,aAAc,SAASC,EAAM9B,GAE3B,GAAKlB,GAAGiD,eAAezB,cAAc0B,KAAKC,kBAU1C,GAAKH,GAAwB,IAAhBA,EAAKI,OAAlB,CAMA,GAAoB,iBAATJ,GAA6C,MAAxBA,EAAKK,UAAU,EAAE,GAE/CL,EAAOA,EAAKK,UAAU,QAEnB,GAAI/C,KAAKgD,oBAAsB,GAE9BhD,KAAKK,aAAaO,IAAYZ,KAAKK,aAAaO,GAAS8B,OAASA,IAAqC,IAA5B1C,KAAKgD,oBAClFhD,KAAKgD,oBAAsBC,KAAKC,OAAOC,KAAKC,MAAMpD,KAAKK,aAAaO,GAASyC,MAAM,MAAQ,CAE3FrD,KAAKK,aAAaO,GAASyC,KAAOF,KAAKC,MAEvCpD,KAAKsD,MAAM,sCAAwCZ,GACnD,OAGJ1C,KAAKsD,MAAM,wCAAyCtD,KAAKK,aAAaO,GAAWZ,KAAKK,aAAaO,GAAS8B,KAAO,GAAIA,GACvH1C,KAAKK,aAAaO,IAChB8B,KAAMA,EACNW,KAAMF,KAAKC,OAGb1D,GAAGH,KAAKgE,cAAcC,cAActC,cAAcuC,IAAIf,EAAM1C,KAAK0D,oBAzB/D1D,KAAKsD,MAAM,+BAZb,CAEEtD,KAAKK,aAAaO,IAChB8B,KAAMA,EACNW,KAAMF,KAAKC,OAEbpD,KAAKsD,MAAM,4BAA4BZ,MAmC7CiB,MAAO,SAASrD,GAEdZ,GAAGmB,OAAOC,aAAa8C,WAAW,SAAUlE,GAAGmE,QAAQC,QACvDpE,GAAGC,GAAGoE,UAAUC,cAAcC,cAAc,SAAU3D,MAzLzDZ,GAAEmE,QAAQC,OAAO3E,cAAgBA","sourcesContent":["/* Speech.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * Use the Web Speech API (https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API)\n * to make text-to-speech service available. This plugin listens to a address and forwards the\n * incoming data to the browser TTS engine (if the browser supports it)\n *\n * <h4>Simple example</h4>\n * <pre class=\"sunlight-highlight-xml\">\n * &lt;speech lang=&quot;en&quot;&gt;\n *  &lt;address transform=&quot;OH:string&quot; mode=&quot;read&quot;&gt;Speak&lt;/address&gt;\n * &lt;/speech&gt;\n * </pre>\n *\n * <h4>Example preventing repetition within a timeout and use mapping</h4>\n * <pre class=\"sunlight-highlight-xml\">\n * ...\n * &lt;meta&gt;\n *  &lt;plugins&gt;\n *    &lt;plugin name=&quot;speech&quot; /&gt;\n *  &lt;/plugins&gt;\n *  &lt;mappings&gt;\n *    &lt;mapping name=&quot;speak&quot;&gt;\n *      &lt;entry value=&quot;0&quot;&gt;Hello, welcome home&lt;/entry&gt;\n *      &lt;entry value=&quot;1&quot;&gt;Please close all windows&lt;/entry&gt;\n *      &lt;entry value=&quot;2&quot;&gt;Please close all doors&lt;/entry&gt;\n *    &lt;/mapping&gt;\n *  &lt;/mappings&gt;\n * &lt;/meta&gt;\n * ...\n * &lt;speech lang=&quot;en&quot; repeat-timout=&quot;300&quot; mapping=&quot;speak&quot;&gt;\n *  &lt;address transform=&quot;DPT:5.010&quot; mode=&quot;read&quot;&gt;Speak&lt;/address&gt;\n * &lt;/speech&gt;\n * </pre>\n *\n * @author Tobias BrÃ¤utigam\n * @since 0.10.0\n *\n */\nqx.Class.define('cv.plugins.Speech', {\n  extend: qx.core.Object,\n  include: cv.ui.common.Update,\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct: function(props) {\n    this._initOnCreate = true;\n    this.base(arguments);\n    this.set(props);\n    this.__lastSpeech = {};\n  },\n\n\n  /*\n   ******************************************************\n   STATICS\n   ******************************************************\n   */\n  statics: {\n    parse: function (element, path) {\n      if (!window.speechSynthesis) {\n        qx.log.Logger.warn(this, \"this browser does not support the Web Speech API\");\n        return;\n      }\n\n      var address = cv.parser.WidgetParser.makeAddressList(element, path);\n\n      return cv.data.Model.getInstance().setWidgetData( path, {\n        'path'    : path,\n        'language': element.getAttribute('lang') ? element.getAttribute('lang') .toLowerCase() : null,\n        'address' : address,\n        'mapping' : element.getAttribute('mapping'),\n        'repeatTimeout': element.getAttribute('repeat-timeout') ? parseInt(element.getAttribute('repeat-timeout')) : -1,\n        '$$type'  : 'speech',\n        // this widget needs to be initialized when the cache is used, otherwise it wont be available\n        '$$initOnCacheLoad': true\n      });\n    }\n  },\n\n  /*\n   ******************************************************\n   PROPERTIES\n   ******************************************************\n   */\n  properties: {\n    path              : { check: \"String\" },\n    $$type            : { check: \"String\" },\n    $$initOnCacheLoad : { check: \"Boolean\" },\n    language          : { check: \"String\" },\n    mapping           : { check: \"String\", init: \"\" },\n    repeatTimeout     : { check: \"Number\", init: -1 },\n    parentWidget: {\n      check: \"cv.ui.structure.AbstractBasicWidget\",\n      init: null\n    }\n  },\n\n  /*\n   ******************************************************\n   MEMBERS\n   ******************************************************\n   */\n  members: {\n    __lastSpeech : null,\n\n    getDomString: function() {\n      return undefined;\n    },\n\n    _processIncomingValue: function(address, data) {\n      // #1: transform the raw value to a JavaScript type\n      var value = this.applyTransform(address, data);\n\n      // #2: map it to a value the user wants to see\n      return this.applyMapping(value);\n    },\n\n    handleUpdate: function(text, address) {\n\n      if (!cv.TemplateEngine.getInstance().visu.getDataReceived()) {\n        // first call -> skipping\n        this.__lastSpeech[address] = {\n          text: text,\n          time: Date.now()\n        };\n        this.debug(\"skipping initial TTS for \"+text);\n        return;\n      }\n\n      if (!text || text.length === 0) {\n        // nothing to say\n        this.debug(\"no text to speech given\");\n        return;\n      }\n\n      if (typeof text === \"string\" && text.substring(0,1) === \"!\") {\n        // override repeatTimeout, force saying this\n        text = text.substring(1);\n      }\n      else if (this.getRepeatTimeout() >= 0) {\n        // do not repeat (within timeout when this.repeatTimeout > 0)\n        if (this.__lastSpeech[address] && this.__lastSpeech[address].text === text && (this.getRepeatTimeout() === 0 ||\n          this.getRepeatTimeout() >= Math.round((Date.now()-this.__lastSpeech[address].time)/1000))) {\n          // update time\n          this.__lastSpeech[address].time = Date.now();\n          // do not repeat\n          this.debug(\"skipping TTS because of repetition \" + text);\n          return;\n        }\n      }\n      this.debug(\"changing lastSpeech from '%s' to '%s'\", this.__lastSpeech[address] ? this.__lastSpeech[address].text : \"\", text);\n      this.__lastSpeech[address] = {\n        text: text,\n        time: Date.now()\n      };\n\n      cv.core.notifications.SpeechHandler.getInstance().say(text, this.getLanguage());\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.WidgetParser.addHandler(\"speech\", cv.plugins.Speech);\n    cv.ui.structure.WidgetFactory.registerClass(\"speech\", statics);\n  }\n});\n"]}