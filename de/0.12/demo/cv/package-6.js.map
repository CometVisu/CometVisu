{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Gauge.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Update","Operate","properties","pagejumpTarget","check","nullable","gaugeType","subtype","gType","init","titleString","unitString","unitStringVisible","size","width","height","minValue","maxValue","frameDesign","backgroundColor","foregroundType","pointerType","pointerColor","lcdColor","lcdVisible","lcdDecimals","ledVisible","ledColor","valueColor","trendVisible","thresholdRising","threshold","apply","thresholdVisible","autoScroll","valuesNumeric","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseFormat","parseAddress","makeAddressListFn","target","type","default","transform","value","parseFloat","framedesign","background","parseInt","src","mode","variant","members","__P_10_0","__P_10_1","_getInnerDomString","getPagejumpTarget","getPath","_onDomReady","additional","getSubtype","steelseries","GaugeType","undefined","getFrameDesign","FrameDesign","getBackgroundColor","BackgroundColor","getValueColor","ColorDef","RED","ForegroundType","TYPE1","PointerType","LcdColor","STANDARD","LedColor","RED_LED","params","Object","assign","Model","getInstance","getWidgetData","getGType","getValueElement","getDomElement","querySelector","_applyThreshold","setThresholdVisible","_processIncomingValue","address","defaultUpdate","handleUpdate","gaugeElement","setValueAnimatedAverage","setValue","setTrend","trend","TrendState","UP","DOWN","STEADY","setThreshold","setMinValue","setMaxValue","setValueAnimatedLatest","setValueAnimated","_action","TemplateEngine","scrollToPage","defer","loader","util","ScriptLoader","addStyles","addScripts","addHandler","plugins","Gauge","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* Gauge.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates Gauge (in canvas) into the visualization\n *\n * @author NetFritz [NetFritz at gmx dot de]\n * @since 0.8.1\n *\n * @ignore(steelseries.*)\n * @asset(plugins/gauge/gauge.css)\n * @asset(plugins/gauge/dep/steelseries.js)\n * @asset(plugins/gauge/dep/tween.js)\n*/ \nqx.Class.define('cv.plugins.Gauge', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Update, cv.ui.common.Operate ],\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    pagejumpTarget          : { check: 'String', nullable: true },\n    gaugeType               : { check: 'String', nullable: true },\n    subtype                 : { check: 'String', nullable: true },\n    gType                   : { check: 'String', init: 'Radial' },\n    titleString             : { check: 'String', nullable: true },\n    unitString              : { check: 'String', nullable: true },\n    unitStringVisible       : { check: 'Boolean', init: false },\n    size                    : { check: 'Number', init: 150 },\n    width                   : { check: 'Number', init: 320 },\n    height                  : { check: 'Number', init: 140 },\n    minValue                : { check: 'Number', init: 0 },\n    maxValue                : { check: 'Number', init: 100 },\n    frameDesign             : { check: 'String', nullable: true },\n    backgroundColor         : { check: 'String', nullable: true },\n    foregroundType          : { check: 'String', nullable: true },\n    pointerType             : { check: 'String', nullable: true },\n    pointerColor            : { check: 'String', nullable: true },\n    lcdColor                : { check: 'String', nullable: true },\n    lcdVisible              : { check: 'Boolean', init: false },\n    lcdDecimals             : { check: 'Number', nullable:true },\n    ledVisible              : { check: 'Boolean', init: false },\n    ledColor                : { check: 'String', nullable: true },\n    valueColor              : { check: 'String', nullable: true },\n    trendVisible            : { check: 'Boolean', init: false },\n    thresholdRising         : { check: 'Boolean', init: false },\n    threshold               : {\n      check: 'Number',\n      init: 0,\n      apply: '_applyThreshold'\n    },\n    thresholdVisible        : { check: 'Boolean', init: false },\n    autoScroll              : { check: 'Boolean', init: false },\n    valuesNumeric           : { check: 'Boolean', init: false }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'target': {target: 'pagejumpTarget'},\n        'type': { target: 'gType', 'default': 'Radial' },\n        'subtype': { },\n        'titleString': { },\n        'unitString': { },\n        'unitStringVisible': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'size': { 'default': 150, transform: parseFloat },\n        'width': { 'default': 320, transform: parseFloat },\n        'height': { 'default': 140, transform: parseFloat },\n        'minValue': { 'default': 0, transform: parseFloat },\n        'maxValue': { 'default': 100, transform: parseFloat },\n        'framedesign': { target: 'frameDesign' },\n        'background': { target: 'backgroundColor' },\n        'lcdVisible': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'lcdDecimals': { 'default': 0, transform: parseInt },\n        'ledVisible': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'valueColor': { },\n        'trendVisible': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'thresholdRising': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'threshold': { 'default': 0, transform: parseFloat },\n        'autoScroll': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'valuesNumeric': {\n          transform: function(value) {\n            return value === 'true';\n          }\n        }\n      };\n    },\n\n    makeAddressListFn: function(src, transform, mode, variant) {\n      return [ true, variant ];\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __gaugeElement: null,\n    __updateQueue: null,\n\n    _getInnerDomString: function() {\n      return '<div class=\"actor' + (this.getPagejumpTarget() ? 'clickable' : '') + '\"><canvas id=\"gauge_' + this.getPath() + '\"></canvas></div>';\n    },\n\n    // overridden\n    _onDomReady: function() {\n      const additional = {\n        gaugeType: this.getSubtype() ? steelseries.GaugeType[this.getSubtype()] : undefined,\n        frameDesign: this.getFrameDesign() ? steelseries.FrameDesign[this.getFrameDesign()] : undefined,\n        backgroundColor: this.getBackgroundColor() ? steelseries.BackgroundColor[this.getBackgroundColor()] : undefined,\n        valueColor: this.getValueColor() ? steelseries.ColorDef[this.getValueColor()] : steelseries.ColorDef.RED,\n        foregroundType: steelseries.ForegroundType.TYPE1,\n        pointerType: steelseries.PointerType.TYPE1,\n        pointerColor: steelseries.ColorDef.RED,\n        lcdColor: steelseries.LcdColor.STANDARD,\n        ledColor: steelseries.LedColor.RED_LED\n      };\n      const params = Object.assign({}, cv.data.Model.getInstance().getWidgetData(this.getPath()), additional);\n      this.__gaugeElement = new steelseries[this.getGType()]('gauge_'+this.getPath(), params);\n      this.base(arguments);\n    },\n\n    // overridden\n    getValueElement: function() {\n      return this.getDomElement().querySelector('#gauge_' + this.getPath());\n    },\n\n    // property apply\n    _applyThreshold: function(value) {\n      if (value > 0) {\n        this.setThresholdVisible(true);\n      }\n    },\n\n    // overridden\n    _processIncomingValue: function(address, data) {\n      if (address && data) {\n        return this.defaultUpdate(address, data, this.getDomElement(), true, this.getPath());\n      }\n      return null;\n    },\n\n    /**\n     * Handle the incoming data\n     * @param value {var} Processed incoming value\n     * @param address {String} source address of the value\n     */\n    handleUpdate: function(value, address) {\n      if (!address || value === undefined) {\n return; \n}\n\n      const variant = this.getAddress()[address].variantInfo;\n      const gaugeElement = this.__gaugeElement;\n      if (gaugeElement) {\n        switch (variant) {\n          case 'average':\n            if (gaugeElement.setValueAnimatedAverage) {\n              gaugeElement.setValueAnimatedAverage(value);\n            }\n            break;\n          case 'setValue':\n            if (gaugeElement.setValue) {\n              gaugeElement.setValue(value);\n            }\n            break;\n          case 'trend':\n            if (gaugeElement.setTrend) {\n              let trend;\n              if (value > 0) {\n                trend = steelseries.TrendState.UP;\n              } else if (value < 0) {\n                trend = steelseries.TrendState.DOWN;\n              } else {\n                trend = steelseries.TrendState.STEADY;\n              }\n              gaugeElement.setTrend(trend);\n            }\n            break;\n          case 'threshold':\n            if (gaugeElement.setThreshold) {\n              gaugeElement.setThreshold(value);\n            }\n            break;\n          case 'min':\n            if (gaugeElement.setMinValue) {\n              gaugeElement.setMinValue(value);\n            }\n            break;\n          case 'max':\n            if (gaugeElement.setMaxValue) {\n              gaugeElement.setMaxValue(value);\n            }\n            break;\n          default:\n            if (gaugeElement.setValueAnimatedLatest) {\n              gaugeElement.setValueAnimatedLatest(value);\n            }\n            if (gaugeElement.setValueAnimated) {\n              gaugeElement.setValueAnimated(value);\n            }\n        }\n      }\n    },\n\n    // overridden\n    _action: function() {\n      if (this.getPagejumpTarget()) {\n        cv.TemplateEngine.getInstance().scrollToPage(this.getPagejumpTarget());\n      }\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/gauge/gauge.css');\n    loader.addScripts([\n      'plugins/gauge/dep/tween.js',\n      'plugins/gauge/dep/steelseries.js'\n    ]);\n    cv.parser.WidgetParser.addHandler('gauge', cv.plugins.Gauge);\n    cv.ui.structure.WidgetFactory.registerClass('gauge', statics);\n  }\n});\n"]}