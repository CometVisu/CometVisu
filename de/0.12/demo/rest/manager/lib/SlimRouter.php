<?php
/**
 * SlimRouter
 *
 * PHP version 7
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * CometVisu Manager backend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\App;
use Slim\Interfaces\RouteInterface;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/config/hidden',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractConfigApi',
            'userClassname' => 'ConfigApi',
            'operationId' => 'saveHiddenConfig',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/config/hidden/{section}/{key}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractConfigApi',
            'userClassname' => 'ConfigApi',
            'operationId' => 'createHiddenConfig',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/config/hidden/{section}/{key}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractConfigApi',
            'userClassname' => 'ConfigApi',
            'operationId' => 'deleteHiddenConfig',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/config/hidden/{section}/{key}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractConfigApi',
            'userClassname' => 'ConfigApi',
            'operationId' => 'getHiddenConfig',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/config/hidden/{section}/{key}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractConfigApi',
            'userClassname' => 'ConfigApi',
            'operationId' => 'updateHiddenConfig',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/data/addresses',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDataproviderApi',
            'userClassname' => 'DataproviderApi',
            'operationId' => 'getAddresses',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/data/designs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDataproviderApi',
            'userClassname' => 'DataproviderApi',
            'operationId' => 'getDesigns',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/data/influxdbfields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDataproviderApi',
            'userClassname' => 'DataproviderApi',
            'operationId' => 'getInfluxDBFields',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/data/influxdbtags',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDataproviderApi',
            'userClassname' => 'DataproviderApi',
            'operationId' => 'getInfluxDBTags',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/data/influxdbs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDataproviderApi',
            'userClassname' => 'DataproviderApi',
            'operationId' => 'getInfluxDBs',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/data/rrds',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDataproviderApi',
            'userClassname' => 'DataproviderApi',
            'operationId' => 'getRRDs',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/fs/check',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFsApi',
            'userClassname' => 'FsApi',
            'operationId' => 'checkEnvironment',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/fs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFsApi',
            'userClassname' => 'FsApi',
            'operationId' => 'create',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/fs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFsApi',
            'userClassname' => 'FsApi',
            'operationId' => 'delete',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/fs/move',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFsApi',
            'userClassname' => 'FsApi',
            'operationId' => 'move',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/fs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFsApi',
            'userClassname' => 'FsApi',
            'operationId' => 'read',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/fs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFsApi',
            'userClassname' => 'FsApi',
            'operationId' => 'update',
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws InvalidArgumentException When no container is provided that implements ContainerInterface
     * @throws Exception When implementation class doesn't exists
     */
    public function __construct($settings = [])
    {
        $this->slimApp = new App($settings);

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();


        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new Exception($message);
                return $response->withStatus(501)->write($message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }


            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $options Params which need to merge into user options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $options)
    {
        if (is_array($this->slimApp->getContainer()['tokenAuthenticationOptions']) === false) {
            return $options;
        }

        return array_merge($this->slimApp->getContainer()['tokenAuthenticationOptions'], $options);
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
