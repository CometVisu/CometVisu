{"version":3,"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Operate","Refresh","type","construct","props","constructor","call","this","_debouncedLoadDiagramData","util","Function","debounce","loadDiagramData","bind","statics","cache","parse","xml","path","flavour","pageType","mappings","Object","assign","getAttributeToPropertyMappings","parser","WidgetParser","parseElement","parseRefresh","legend","getAttribute","data","Model","getInstance","setWidgetData","content","getDiagramElements","legendInline","indexOf","legendPopup","series","default","seriesStart","seriesEnd","seriesResolution","transform","parseInt","period","legendposition","timeformat","timeformatTooltip","zoomYAxis","value","title","target","refresh","gridcolor","previewlabels","popup","tooltip","xmlElement","retVal","axes","axesnum","ts","tsnum","axesNameIndex","querySelectorAll","forEach","elem","unit","axisLabel","position","min","max","tickDecimals","tickFormatter","v","axis","toFixed","textContent","src","tagName","steps","fillMissing","tsType","color","label","axisIndex","fill","scaling","parseFloat","cFunc","fillTs","resol","offset","style","align","barWidth","filter","getInfluxFilter","field","authentication","dsIndex","children","length","retval","i","child","lookupTsCache","start","end","res","forceNowDatapoint","force","callback","callbackParameter","key","url","_this","client","io","BackendConnections","getClient","chartsResource","getResourcePath","encodeURIComponent","urlNotInCache","undefined","Date","now","timestamp","waitingCallbacks","push","xhr","dispose","request","Xhr","authorize","set","accept","addListener","ev","_onSuccess","_onStatusError","send","tsdata","getTarget","getResponse","hasCustomChartsDataProcessor","processChartsData","millisOffset","Number","isFinite","newRrd","Array","j","l","last","from","waitingCallback","core","notifications","Router","dispatchMessage","locale","Manager","tr","severity","message","JSON","stringify","_target","_transport","responseText","window","console","error","properties","check","init","nullable","apply","members","_init","popupplot","plot","plotted","_timerPopup","__P_20_0","_applyTitle","setLabel","_setupRefreshAction","_this2","getRefresh","_timer","event","Timer","_stopRefresh","timer","isEnabled","stop","_startRefresh","runImmediately","fireEvent","_action","_this3","popupDiagram","dom","Element","create","class","id","getPath","PopupHandler","showPopup","getLabel","page","getParentPage","Registration","removeAllListeners","shutdown","parent","parentNode","entries","height","width","margin","key_value","innerHTML","stopPropagation","initDiagram","isPopup","options","canvas","getTooltip","tooltipOpts","xDateFormat","getTimeformatTooltip","shifts","x","y","defaultTheme","zoom","interactive","trigger","amount","pan","cursor","frameRate","triggerOnDrag","yaxes","getContent","xaxes","mode","getTimeformat","show","isLegendPopup","isLegendInline","backgroundColor","getLegendposition","grid","aboveData","getGridcolor","tickColor","markingsColor","borderColor","hoverable","touch","scale","autoWidth","autoHeight","delayTouchEnded","simulClick","tapThreshold","dbltapThreshold","tapPrecision","val","axisLabelColour","yaxis","zoomRange","getZoomYAxis","xaxis","panRange","clickable","getPreviewlabels","ticks","diagram","$","empty","debug","that","container","closest","actor","action","getPlaceholder","unbind","getSeriesSettings","xAxis","isInteractive","ret","getSeries","getSeriesStart","getSeriesEnd","getSeriesResolution","selectedSeries","hour","day","fullday","week","month","year","getPeriod","datamin","datamax","forceReload","getAxes","loadedData","tsloaded","tsSuccessful","index","getForceNowDatapoint","plugins","AbstractDiagram","bars","lines","zero","points","fulldata","loadedIndex","k","setData","setupGrid","draw","destruct","_disposeObjects","defer","ScriptLoader","addScripts","$$dbClassInfo","Bootstrap","executePendingDefers","__P_21_0","_onDomReady","$$domReady","pageId","broker","Bus","setRestartOnVisible","subscribe","isVisible","DeferredCall","schedule","getData","removeListenerById","initListeners","_getInnerDomString","getWidth","getHeight","addHandler","WidgetFactory","registerClass","Diagram","Update","parseAddress","parseFormat","_update","address","defaultUpdate","getDomElement","Info"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/diagram/AbstractDiagram.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/diagram/Diagram.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/diagram/Info.js"],"sourcesContent":["/* AbstractDiagram.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * This plugins integrates flot (diagrams in javascript) into the visualization.\n * server-side data-storage is rrd or InfluxDB.\n *\n * short documentation\n *\n * <h4>widgets:</h4>\n * <ul>\n *   <li>diagram</li>\n *   <li>diagram_info</li>\n * </ul>\n *\n * <h4>attributes (per diagram):</h4>\n * <ul>\n *   <li>series:               optional, \"hour\", \"day\" (default), \"week\", \"month\", \"year\"</li>\n *   <li>period:               optional, number of \"series\" to be shown</li>\n *   <li>refresh:              optional, refresh-rate in seconds, no refresh if missing</li>\n *   <li>gridcolor:            optional, color for dataline and grid, HTML-colorcode</li>\n *   <li>width, height:        optional, width and height of \"inline\"-diagram</li>\n *   <li>previewlabels:        optional, show labels on \"inline\"-diagram</li>\n *   <li>popup:                optional, make diagram clickable and open popup</li>\n *   <li>legend:               optional, \"none\", \"both\", \"inline\", \"popup\" select display of legend</li>\n *   <li>title:                optional, diagram title (overrides label-content)</li>\n * </ul>\n *\n * <h4>attributes (per graph):</h4>\n * <ul>\n *   <li>style:                optional, \"lines\" (default), \"bars\", \"points\" select graph type</li>\n *   <li>fill:                 optional, true or false - fill the space under the line / within the bar (line / bar style graphs)</li>\n *   <li>barWidth:             optional, width of bars (bar style graphs)</li>\n *   <li>align:                optional, \"left\" (default), \"center\", \"right\" select qlignemnt of bars (bar style graphs)</li>\n * </ul>\n *\n * @author Michael Hausl [michael at hausl dot com]\n * @since 0.6.0\n *\n * @asset(plugins/diagram/influxfetch.php)\n * @asset(plugins/diagram/dep/flot/jquery.flot.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.touch.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.canvas.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.resize.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.time.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.axislabels.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.tooltip.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.navigate.min.js)\n */\nqx.Class.define('cv.plugins.diagram.AbstractDiagram', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Operate, cv.ui.common.Refresh],\n  type: 'abstract',\n\n  /*\n  ***********************************************\n    CONSTRUCTOR\n  ***********************************************\n  */\n  construct(props) {\n    super(props);\n    this._debouncedLoadDiagramData = qx.util.Function.debounce(this.loadDiagramData.bind(this), 200);\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    cache: {},\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @param mappings\n     */\n    parse(xml, path, flavour, pageType, mappings) {\n      if (mappings) {\n        mappings = Object.assign(mappings, this.getAttributeToPropertyMappings());\n      } else {\n        mappings = this.getAttributeToPropertyMappings();\n      }\n      cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType, mappings);\n\n      cv.parser.pure.WidgetParser.parseRefresh(xml, path);\n\n      const legend = xml.getAttribute('legend') || 'both';\n      return cv.data.Model.getInstance().setWidgetData(path, {\n        content: this.getDiagramElements(xml),\n        legendInline: ['both', 'inline'].indexOf(legend) >= 0,\n        legendPopup: ['both', 'popup'].indexOf(legend) >= 0\n      });\n    },\n\n    getAttributeToPropertyMappings() {\n      return {\n        series: { default: 'day' },\n        seriesStart: { default: 'end-month' },\n        seriesEnd: { default: 'now' },\n        seriesResolution: { default: 300, transform: parseInt },\n        period: { default: 1, transform: parseInt },\n        legendposition: { default: 'ne' },\n        timeformat: {},\n        timeformatTooltip: { default: '%d.%m.%Y %H:%M' },\n        zoomYAxis: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        title: { target: 'title' },\n        refresh: {},\n        gridcolor: { default: '#81664B' },\n        previewlabels: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        popup: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        tooltip: {\n          transform(value) {\n            return value === 'true';\n          }\n        }\n      };\n    },\n\n    getDiagramElements(xmlElement) {\n      const retVal = {\n        axes: [],\n        axesnum: 0,\n        ts: [],\n        tsnum: 0\n      };\n\n      const axesNameIndex = [];\n\n      xmlElement.querySelectorAll('axis').forEach(function (elem) {\n        const unit = elem.getAttribute('unit') || '';\n        retVal.axes[retVal.axesnum] = {\n          axisLabel: elem.getAttribute('label') || null,\n          position: elem.getAttribute('position') || 'left',\n          min: elem.getAttribute('min') || null,\n          max: elem.getAttribute('max') || null,\n          unit: unit,\n          tickDecimals: elem.getAttribute('decimals') || null,\n          tickFormatter(v, axis) {\n            return v.toFixed(axis.tickDecimals) + unit;\n          }\n        };\n\n        retVal.axesnum++;\n        axesNameIndex[elem.textContent] = retVal.axesnum;\n      }, this);\n\n      xmlElement.querySelectorAll('influx,rrd').forEach(function (elem) {\n        const src = elem.tagName === 'rrd' ? elem.textContent : elem.getAttribute('measurement');\n        const steps = (elem.getAttribute('steps') || 'false') === 'true';\n        const fillMissing = elem.getAttribute('fillMissing');\n        retVal.ts[retVal.tsnum] = {\n          tsType: elem.tagName,\n          src: src,\n          color: elem.getAttribute('color'),\n          label: elem.getAttribute('label') || src,\n          axisIndex: axesNameIndex[elem.getAttribute('yaxis')] || 1,\n          steps: steps,\n          fill: (elem.getAttribute('fill') || 'false') === 'true',\n          scaling: parseFloat(elem.getAttribute('scaling')) || 1.0,\n          cFunc: elem.getAttribute('consolidationFunction') || (elem.tagName === 'rrd' ? 'AVERAGE' : 'MEAN'),\n          fillTs: fillMissing === null ? (steps ? 'previous' : 'linear') : fillMissing,\n          resol: parseInt(elem.getAttribute('resolution')),\n          offset: parseInt(elem.getAttribute('offset')),\n          style: elem.getAttribute('style') || 'lines',\n          align: elem.getAttribute('align') || 'center',\n          barWidth: elem.getAttribute('barWidth') || 1\n        };\n\n        if (elem.tagName === 'influx') {\n          retVal.ts[retVal.tsnum].filter = this.getInfluxFilter(elem, 'AND');\n          retVal.ts[retVal.tsnum].field = elem.getAttribute('field');\n          retVal.ts[retVal.tsnum].authentication = elem.getAttribute('authentication');\n        } else {\n          let dsIndex = elem.getAttribute('datasourceIndex') || 0;\n          if (dsIndex < 0) {\n            dsIndex = 0;\n          }\n          retVal.ts[retVal.tsnum].dsIndex = dsIndex;\n        }\n        retVal.tsnum++;\n      }, this);\n      return retVal;\n    },\n\n    /**\n     * Recursively walk through the elem to build filter sting\n     * @param elem\n     * @param type\n     */\n    getInfluxFilter(elem, type) {\n      const children = elem.children;\n      const length = children.length;\n      let retval = '';\n      let i = 0;\n\n      for (; i < length; i++) {\n        const child = children[i];\n\n        if (retval !== '') {\n          retval += ' ' + type + ' ';\n        }\n\n        switch (child.tagName) {\n          case 'and':\n            retval += this.getInfluxFilter(child, 'AND');\n            break;\n\n          case 'or':\n            retval += this.getInfluxFilter(child, 'OR');\n            break;\n\n          case 'tag':\n            retval +=\n              child.getAttribute('key') +\n              ' ' +\n              child.getAttribute('operator') +\n              ' \\'' +\n              child.getAttribute('value') +\n              '\\'';\n            break;\n\n          default:\n          // ignore unknown\n        }\n      }\n\n      if (type) {\n        return '(' + retval + ')';\n      }\n\n      return retval;\n    },\n\n    /**\n     * Get the rrd or InfluxDB and put it's content in the cache.\n     * @param ts\n     * @param start\n     * @param end\n     * @param res\n     * @param forceNowDatapoint\n     * @param refresh {Number} time is seconds to refresh the data\n     * @param force {Boolean} Update even when the cache is still valid\n     * @param callback {Function} call when the data has arrived\n     * @param callbackParameter\n     */\n    lookupTsCache(ts, start, end, res, forceNowDatapoint, refresh, force, callback, callbackParameter) {\n      const client = cv.io.BackendConnections.getClient();\n      let key;\n      let url;\n      const chartsResource = client.getResourcePath('charts', {\n        src: ts.src,\n        start: start,\n        end: end\n      });\n\n      if (ts.tsType !== 'influx' && chartsResource !== null) {\n        // the backend provides an charts resource that must be processed differently (e.g. openHABs persistence data\n        url = chartsResource;\n        key = url;\n      } else {\n        url =\n          (ts.tsType === 'influx'\n            ? 'resource/plugins/diagram/influxfetch.php?ts=' + ts.src\n            : client.getResourcePath('rrd') + '?rrd=' + encodeURIComponent(ts.src) + '.rrd') +\n          '&ds=' +\n          encodeURIComponent(ts.cFunc) +\n          // NOTE: don't encodeURIComponent `start` and `end` for RRD as the \"+\" needs to be in the URL in plain text\n          //       although it looks wrong (as a \"+\" in a URL translates in the decode to a space: \" \")\n          '&start=' +\n          (ts.tsType === 'rrd' ? start : encodeURIComponent(start)) +\n          '&end=' +\n          (ts.tsType === 'rrd' ? end : encodeURIComponent(end)) +\n          '&res=' +\n          encodeURIComponent(res) +\n          (ts.fillTs ? '&fill=' + encodeURIComponent(ts.fillTs) : '') +\n          (ts.filter ? '&filter=' + encodeURIComponent(ts.filter) : '') +\n          (ts.field ? '&field=' + encodeURIComponent(ts.field) : '') +\n          (ts.authentication ? '&auth=' + encodeURIComponent(ts.authentication) : '');\n        key = url + (ts.tsType === 'rrd' ? '|' + ts.dsIndex : '');\n      }\n      let urlNotInCache = !(key in this.cache);\n      let doLoad =\n        force ||\n        urlNotInCache ||\n        !('data' in this.cache[key]) ||\n        (refresh !== undefined && Date.now() - this.cache[key].timestamp > refresh * 1000);\n\n      if (doLoad) {\n        if (urlNotInCache) {\n          this.cache[key] = { waitingCallbacks: [] };\n        }\n        this.cache[key].waitingCallbacks.push([callback, callbackParameter]);\n\n        if (this.cache[key].waitingCallbacks.length === 1) {\n          if (this.cache[key].xhr) {\n            this.cache[key].xhr.dispose();\n          }\n          const xhr = new qx.io.request.Xhr(url);\n          client.authorize(xhr);\n          xhr.set({\n            accept: 'application/json'\n          });\n\n          xhr.addListener('success', ev => {\n            this._onSuccess(ts, key, ev, forceNowDatapoint);\n          });\n          xhr.addListener('statusError', ev => {\n            this._onStatusError(ts, key, ev);\n          });\n          this.cache[key].xhr = xhr;\n          xhr.send();\n        }\n      } else {\n        callback(this.cache[key].data, callbackParameter);\n      }\n    },\n\n    _onSuccess(ts, key, ev, forceNowDatapoint) {\n      let tsdata = ev.getTarget().getResponse();\n      if (tsdata !== null) {\n        const client = cv.io.BackendConnections.getClient();\n        if (client.hasCustomChartsDataProcessor(tsdata)) {\n          tsdata = client.processChartsData(tsdata);\n        } else {\n          // calculate timestamp offset and scaling\n          const millisOffset = Number.isFinite(ts.offset) ? ts.offset * 1000 : 0;\n          const newRrd = new Array(tsdata.length);\n          let j = 0;\n          const l = tsdata.length;\n          for (; j < l; j++) {\n            if (ts.tsType === 'rrd') {\n              newRrd[j] = [tsdata[j][0] + millisOffset, parseFloat(tsdata[j][1][ts.dsIndex]) * ts.scaling];\n            } else {\n              newRrd[j] = [tsdata[j][0] + millisOffset, parseFloat(tsdata[j][1]) * ts.scaling];\n            }\n          }\n          tsdata = newRrd;\n        }\n      }\n\n      let now = Date.now();\n\n      if (forceNowDatapoint && tsdata.length > 0) {\n        let last = Array.from(tsdata[tsdata.length - 1]); // force copy\n        last[0] = now;\n        tsdata.push(last);\n      }\n\n      this.cache[key].data = tsdata;\n      this.cache[key].timestamp = now;\n\n      this.cache[key].waitingCallbacks.forEach(function (waitingCallback) {\n        waitingCallback[0](tsdata, waitingCallback[1]);\n      }, this);\n      this.cache[key].waitingCallbacks.length = 0; // empty array)\n    },\n\n    _onStatusError(ts, key, ev) {\n      cv.core.notifications.Router.dispatchMessage('cv.diagram.error', {\n        title: qx.locale.Manager.tr('Diagram communication error'),\n        severity: 'urgent',\n        message: qx.locale.Manager.tr(\n          'URL: %1<br/><br/>Response:</br>%2',\n          JSON.stringify(key),\n          ev._target._transport.responseText\n        )\n      });\n\n      window.console.error('Diagram _onStatusError', ts, key, ev);\n      const tsdata = [];\n\n      this.cache[key].data = tsdata;\n      this.cache[key].timestamp = Date.now();\n\n      this.cache[key].waitingCallbacks.forEach(function (waitingCallback) {\n        waitingCallback[0](tsdata, waitingCallback[1]);\n      }, this);\n      this.cache[key].waitingCallbacks.length = 0; // empty array)\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    content: {\n      check: 'Object',\n      init: {}\n    },\n\n    title: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyTitle'\n    },\n\n    series: {\n      check: ['hour', 'day', 'week', 'month', 'year', 'fullday', 'custom'],\n      init: 'day'\n    },\n\n    seriesStart: {\n      check: 'String',\n      init: 'end-month'\n    },\n\n    seriesEnd: {\n      check: 'String',\n      init: 'now'\n    },\n\n    seriesResolution: {\n      check: 'Number',\n      init: 300\n    },\n\n    forceNowDatapoint: {\n      check: 'Boolean',\n      init: true\n    },\n\n    period: {\n      check: 'Number',\n      init: 1\n    },\n\n    legendInline: {\n      check: 'Boolean',\n      init: true\n    },\n\n    legendPopup: {\n      check: 'Boolean',\n      init: true\n    },\n\n    legendposition: {\n      check: ['nw', 'ne', 'sw', 'se'],\n      init: 'ne'\n    },\n\n    timeformat: {\n      check: 'String',\n      nullable: true\n    },\n\n    timeformatTooltip: {\n      check: 'String',\n      init: '%d.%m.%Y %H:%M'\n    },\n\n    zoomYAxis: {\n      check: 'Boolean',\n      init: false\n    },\n\n    gridcolor: {\n      check: 'String',\n      init: '#81664B'\n    },\n\n    previewlabels: {\n      check: 'Boolean',\n      init: false\n    },\n\n    popup: {\n      check: 'Boolean',\n      init: false\n    },\n\n    tooltip: {\n      check: 'Boolean',\n      init: false\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _init: null,\n    popupplot: null,\n    plot: null,\n    plotted: null,\n    _timerPopup: null,\n    __isPopup: false,\n\n    // property apply\n    _applyTitle(value) {\n      if (value) {\n        // override label\n        this.setLabel('<div class=\"label\">' + value + '</div>');\n      }\n    },\n\n    _setupRefreshAction() {\n      if (this.getRefresh()) {\n        if (!this._timer) {\n          this._timer = new qx.event.Timer(this.getRefresh());\n          this._timer.addListener('interval', () => {\n            this.loadDiagramData(this.plot, false, true);\n          });\n        }\n\n        if (!this._timerPopup) {\n          this._timerPopup = new qx.event.Timer(this.getRefresh());\n          this._timerPopup.addListener('interval', () => {\n            this.loadDiagramData(this.popupplot, false, true);\n          });\n        }\n      }\n    },\n\n    /**\n     * Stop the refresh timer\n     *\n     * @param timer {qx.event.Timer} stop this timer\n     * @protected\n     */\n    _stopRefresh(timer) {\n      if (timer && timer.isEnabled()) {\n        timer.stop();\n      }\n    },\n\n    /**\n     * Start the refresh timer\n     *\n     * @param timer {qx.event.Timer} start this timer\n     * @param runImmediately {Boolean} fire the timers 'interval' event immediately to trigger an refresh right now\n     * @protected\n     */\n    _startRefresh(timer, runImmediately) {\n      if (timer) {\n        if (!timer.isEnabled()) {\n          timer.start();\n        }\n        if (runImmediately === true) {\n          timer.fireEvent('interval');\n        }\n      }\n    },\n\n    _action() {\n      const popupDiagram = qx.dom.Element.create('div', {\n        class: 'diagram',\n        id: this.getPath() + '_big',\n        style: 'height: 90%'\n      });\n\n      this._init = true;\n      const popup = cv.ui.PopupHandler.showPopup('diagram', {\n        title: this.getLabel(),\n        content: popupDiagram,\n        page: this.getParentPage().getPath()\n      });\n\n      // this will be called when the popup is being closed.\n      // NOTE: this will be called twice, one time for the foreground and one\n      //       time for the background.\n      popup.addListener('close', () => {\n        this._stopRefresh(this._timerPopup);\n        qx.event.Registration.removeAllListeners(popupDiagram);\n        if (this.popupplot) {\n          this.popupplot.shutdown();\n          this.popupplot = null;\n        }\n      });\n\n      const parent = popupDiagram.parentNode;\n      Object.entries({ height: '100%', width: '95%', margin: 'auto' }).forEach(function (key_value) {\n        parent.style[key_value[0]] = key_value[1];\n      });\n\n      // define parent as 100%!\n      popupDiagram.innerHTML = '';\n      qx.event.Registration.addListener(\n        popupDiagram,\n        'tap',\n        function (event) {\n          // don't let the popup know about the click, or it will close\n          event.stopPropagation();\n        },\n        this\n      );\n\n      this.initDiagram(true);\n\n      this._startRefresh(this._timerPopup, true);\n    },\n\n    initDiagram(isPopup) {\n      if (!this._init) {\n        return;\n      }\n      this._init = false;\n      isPopup = isPopup || this.__isPopup;\n\n      const options = {\n        canvas: true,\n        tooltip: this.getTooltip(),\n        tooltipOpts: {\n          content: '<center>%x<br/>%y</center>',\n          xDateFormat: this.getTimeformatTooltip(),\n          shifts: {\n            x: 20,\n            y: 10\n          },\n\n          defaultTheme: false\n        },\n\n        zoom: {\n          interactive: isPopup,\n          trigger: 'dblclick',\n          amount: 1.5\n        },\n\n        pan: {\n          interactive: isPopup,\n          cursor: 'move',\n          frameRate: 20,\n          triggerOnDrag: false\n        },\n\n        yaxes: JSON.parse(JSON.stringify(this.getContent().axes)), // deep copy to prevent side effects\n        xaxes: [\n          {\n            mode: 'time',\n            timeformat: this.getTimeformat()\n          }\n        ],\n\n        legend: {\n          show: (isPopup && this.isLegendPopup()) || (!isPopup && this.isLegendInline()),\n          backgroundColor: '#101010',\n          position: this.getLegendposition()\n        },\n\n        grid: {\n          show: true,\n          aboveData: false,\n          color: this.getGridcolor(),\n          backgroundColor: '#000000',\n          tickColor: this.getGridcolor(),\n          markingsColor: this.getGridcolor(),\n          borderColor: this.getGridcolor(),\n          hoverable: true\n        },\n\n        touch: {\n          pan: isPopup ? 'x' : 'none', // what axis pan work\n          scale: isPopup ? 'x' : 'none', // what axis zoom work\n          autoWidth: false,\n          autoHeight: false,\n          delayTouchEnded: 500, // delay in ms before touchended event is fired if no more touches\n          callback: null, // other plot draw callback\n          simulClick: true, // plugin will generate Mouse click event to brwoser on tap or double tap\n          tapThreshold: 150, // range of time where a tap event could be detected\n          dbltapThreshold: 200, // delay needed to detect a double tap\n          tapPrecision: 60 / 2 // tap events boundaries ( 60px square by default )\n        }\n      };\n\n      options.yaxes.forEach(function (val) {\n        Object.assign(val, {\n          axisLabelColour: this.getGridcolor(),\n          color: this.getGridcolor()\n        });\n      }, this);\n      options.xaxes.forEach(function (val) {\n        Object.assign(val, {\n          axisLabelColour: this.getGridcolor(),\n          color: this.getGridcolor()\n        });\n      }, this);\n      if (isPopup) {\n        Object.assign(options, {\n          yaxis: {\n            isPopup: true,\n            zoomRange: this.getZoomYAxis() ? [null, null] : false\n          },\n\n          xaxis: {\n            zoomRange: [null, null],\n            panRange: [null, null]\n          }\n        });\n      }\n      if (this.getTooltip()) {\n        options.grid.hoverable = true;\n        options.grid.clickable = true;\n      }\n\n      if (!isPopup && !this.getPreviewlabels()) {\n        Object.assign(options, {\n          xaxes: [{ ticks: 0, mode: options.xaxes[0].mode }]\n        });\n\n        if (options.yaxes.length === 0) {\n          options.yaxes[0] = {};\n        }\n        options.yaxes.forEach(function (val) {\n          Object.assign(val, { ticks: 0, axisLabel: null });\n        }, this);\n      }\n\n      // plot diagram initially with empty values\n      const diagram = isPopup ? $('#' + this.getPath() + '_big') : $('#' + this.getPath() + ' .actor div');\n      diagram.empty();\n      const plot = $.plot(diagram, [], options);\n      if (isPopup) {\n        this.debug('popup plot generated');\n        this.popupplot = plot;\n      } else {\n        this.debug('plot generated');\n        this.plot = plot;\n      }\n      this.plotted = true;\n\n      const that = this;\n      diagram\n        .bind('plotpan', function (event, plot) {\n          that._debouncedLoadDiagramData(plot, isPopup, false);\n        })\n        .bind('plotzoom', function () {\n          that.loadDiagramData(plot, isPopup, false);\n        })\n        .bind('touchended', function () {\n          that.loadDiagramData(plot, isPopup, false);\n        })\n        .bind('tap', function () {\n          const self = this;\n          const container = $(self).closest('.widget_container')[0];\n          if (!isPopup && container !== undefined) {\n            const actor = $(self).closest('.actor')[0];\n            const path = container.id;\n            if (actor !== undefined && path.length > 0) {\n              that.action();\n            }\n          }\n        });\n\n      if (!isPopup) {\n        // disable touch plugin in non-popup\n        plot.getPlaceholder().unbind('touchstart').unbind('touchmove').unbind('touchend');\n      }\n\n      this.loadDiagramData(plot, isPopup, false);\n    },\n\n    getSeriesSettings(xAxis, isInteractive) {\n      const series = {\n        hour: { res: 60, start: 'hour', end: 'now' },\n        day: { res: 300, start: 'day', end: 'now' },\n        fullday: { res: 300, start: 'day', end: 'midnight+24hour' },\n        week: { res: 1800, start: 'week', end: 'now' },\n        month: { res: 21600, start: 'month', end: 'now' },\n        year: { res: 432000, start: 'year', end: 'now' }\n      };\n\n      const ret = {\n        start: null,\n        end: null,\n        res: null\n      };\n\n      if (this.getSeries() === 'custom') {\n        // initial load, take parameters from custom configuration\n        ret.start = this.getSeriesStart();\n        ret.end = this.getSeriesEnd();\n        ret.res = this.getSeriesResolution();\n      } else {\n        const selectedSeries = series[this.getSeries()];\n        if (!selectedSeries) {\n          return null;\n        }\n\n        // initial load, take parameters from configuration\n        ret.start = 'end-' + this.getPeriod() + selectedSeries.start;\n        ret.end = selectedSeries.end;\n        ret.res = this.getSeriesResolution() ? this.getSeriesResolution() : selectedSeries.res;\n      }\n\n      if (xAxis.datamin && xAxis.datamax && isInteractive) {\n        ret.start = (xAxis.min / 1000).toFixed(0);\n      }\n      return ret;\n    },\n\n    loadDiagramData(plot, isInteractive, forceReload) {\n      if (!plot) {\n        return;\n      }\n      const series = this.getSeriesSettings(plot.getAxes().xaxis, isInteractive);\n\n      if (!series) {\n        return;\n      }\n\n      // init\n      let loadedData = [];\n      let tsloaded = 0;\n      let tsSuccessful = 0;\n      // get all time series data\n      this.getContent().ts.forEach(function (ts, index) {\n        const res = Number.isFinite(ts.resol) ? ts.resol : series.res;\n        const forceNowDatapoint = this.getForceNowDatapoint();\n        const refresh = this.getRefresh() ? this.getRefresh() : res;\n\n        cv.plugins.diagram.AbstractDiagram.lookupTsCache(\n          ts,\n          series.start,\n          series.end,\n          res,\n          forceNowDatapoint,\n          refresh,\n          forceReload,\n          function (tsdata) {\n            tsloaded++;\n            if (tsdata !== null) {\n              tsSuccessful++;\n\n              // store the data for diagram plotting\n              loadedData[index] = {\n                label: ts.label,\n                color: ts.color,\n                data: tsdata,\n                yaxis: parseInt(ts.axisIndex),\n                bars: {\n                  show: ts.style === 'bars',\n                  fill: ts.fill,\n                  barWidth: parseInt(ts.barWidth),\n                  align: ts.align\n                },\n\n                lines: {\n                  show: ts.style === 'lines',\n                  steps: ts.steps,\n                  fill: ts.fill,\n                  zero: false\n                },\n\n                points: { show: ts.style === 'points', fill: ts.fill }\n              };\n            }\n\n            // if loading has finished, i.e. all time series have been retrieved,\n            // go on and plot the diagram\n            if (tsloaded === this.getContent().tsnum) {\n              let fulldata;\n              // If all time series were successfully loaded, no extra action is needed.\n              // Otherwise we need to reduce the array to the loaded data.\n              if (tsSuccessful === tsloaded) {\n                fulldata = loadedData;\n              } else {\n                fulldata = [];\n                let loadedIndex = -1;\n                for (let j = 0; j < tsSuccessful; j++) {\n                  for (let k = loadedIndex + 1; k < loadedData.length; k++) {\n                    if (loadedData[k] !== null) {\n                      fulldata[j] = loadedData[k];\n                      loadedIndex = k;\n                      break;\n                    }\n                  }\n                }\n              }\n\n              // plot\n              plot.setData(fulldata);\n              plot.setupGrid();\n              plot.draw();\n\n              loadedData = [];\n            }\n          }.bind(this)\n        );\n      }, this);\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    if (this._timerPopup) {\n      this._disposeObjects('_timerPopup');\n    }\n  },\n\n  defer() {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts(\n      [\n        'plugins/diagram/dep/flot/jquery.flot.min.js',\n        'plugins/diagram/dep/flot/jquery.flot.touch.min.js',\n        'plugins/diagram/dep/flot/jquery.flot.canvas.min.js',\n        'plugins/diagram/dep/flot/jquery.flot.resize.min.js',\n        'plugins/diagram/dep/flot/jquery.flot.time.min.js',\n        'plugins/diagram/dep/flot/jquery.flot.axislabels.js',\n        'plugins/diagram/dep/flot/jquery.flot.tooltip.min.js',\n        'plugins/diagram/dep/flot/jquery.flot.navigate.min.js'\n      ],\n\n      [0]\n    );\n  }\n});\n","/* Diagram.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\nqx.Class.define('cv.plugins.diagram.Diagram', {\n  extend: cv.plugins.diagram.AbstractDiagram,\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct(props) {\n    this._init = true;\n    super(props);\n  },\n\n  /*\n   ******************************************************\n   PROPERTIES\n   ******************************************************\n   */\n  properties: {\n    width: {\n      check: 'String',\n      nullable: true\n    },\n\n    height: {\n      check: 'String',\n      nullable: true\n    }\n  },\n\n  /*\n   ******************************************************\n   STATICS\n   ******************************************************\n   */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse(xml, path, flavour, pageType) {\n      return cv.plugins.diagram.AbstractDiagram.parse(\n        xml,\n        path,\n        flavour,\n        pageType,\n        this.getAttributeToPropertyMappings()\n      );\n    },\n\n    getAttributeToPropertyMappings() {\n      return {\n        width: {\n          transform(value) {\n            return value ? parseInt(value) + 'px' : '100%';\n          }\n        },\n\n        height: {\n          transform(value) {\n            return value ? parseInt(value) + 'px' : null;\n          }\n        }\n      };\n    }\n  },\n\n  /*\n   ******************************************************\n   MEMBERS\n   ******************************************************\n   */\n  members: {\n    __vlid1: null,\n\n    _onDomReady() {\n      if (!this.$$domReady) {\n        const pageId = this.getParentPage().getPath();\n        const broker = qx.event.message.Bus;\n\n        // let the refresh only be active when this widget is visible\n        this.setRestartOnVisible(true);\n\n        broker.subscribe(\n          'path.' + pageId + '.beforePageChange',\n          function () {\n            if (!this._init) {\n              this.loadDiagramData(this.plot, false, false);\n            }\n          },\n          this\n        );\n\n        broker.subscribe(\n          'page.' + pageId + '.appear',\n          function () {\n            // create diagram when it's not already existing\n            if (this._init) {\n              this.initDiagram(false);\n            }\n          },\n          this\n        );\n\n        // initialize the diagram but don't make the initialization process wait for it\n        // by using a deferred call\n        if (this.isVisible()) {\n          new qx.util.DeferredCall(function () {\n            if (!this._init) {\n              this.loadDiagramData(this.plot, false, false);\n            } else {\n              this.initDiagram(false);\n            }\n          }, this).schedule();\n        } else {\n          this.__vlid1 = this.addListener('changeVisible', ev => {\n            if (ev.getData()) {\n              if (!this._init) {\n                this.loadDiagramData(this.plot, false, false);\n              } else {\n                this.initDiagram(false);\n              }\n              this.removeListenerById(this.__vlid1);\n              this.__vlid1 = null;\n            }\n          });\n        }\n        this.$$domReady = true;\n        this.initListeners();\n      }\n    },\n\n    _getInnerDomString() {\n      const classStr = this.getPreviewlabels() ? 'diagram_inline' : 'diagram_preview';\n      const styleStr =\n        'min-height: 40px' +\n        (this.getWidth() ? ';width:' + this.getWidth() : '') +\n        (this.getHeight() ? ';height:' + this.getHeight() : ';height: 100%');\n\n      return (\n        '<div class=\"actor clickable\" style=\"height: 100%; min-height: 40px;\"><div class=\"' +\n        classStr +\n        '\" style=\"' +\n        styleStr +\n        '\">loading...</div></div>'\n      );\n    }\n  },\n\n  defer(statics) {\n    // register the parser\n    cv.parser.pure.WidgetParser.addHandler('diagram', statics);\n    cv.ui.structure.WidgetFactory.registerClass('diagram', statics);\n  }\n});\n","/* Info.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\nqx.Class.define('cv.plugins.diagram.Info', {\n  extend: cv.plugins.diagram.AbstractDiagram,\n  include: [cv.ui.common.Update],\n\n  /*\n   ******************************************************\n   CONSTRUCTOR\n   ******************************************************\n   */\n  construct(props) {\n    this._init = false;\n    super(props);\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     */\n    parse(xml, path, flavour, pageType) {\n      const data = cv.plugins.diagram.AbstractDiagram.parse(xml, path, flavour, pageType);\n\n      cv.parser.pure.WidgetParser.parseAddress(xml, path);\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      return data;\n    }\n  },\n\n  /*\n   ******************************************************\n   MEMBERS\n   ******************************************************\n   */\n  members: {\n    _getInnerDomString() {\n      return '<div class=\"actor clickable switchUnpressed\"><div class=\"value\">-</div></div>';\n    },\n    _update(address, data) {\n      if (address !== undefined && data !== undefined) {\n        return this.defaultUpdate(address, data, this.getDomElement(), true, this.getPath());\n      }\n      return null;\n    }\n  },\n\n  defer(statics) {\n    // register the parser\n    cv.parser.pure.WidgetParser.addHandler('diagram_info', statics);\n    cv.ui.structure.WidgetFactory.registerClass('diagram_info', statics);\n  }\n});\n"],"mappings":"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"}