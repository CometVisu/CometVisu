{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Rss.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Refresh","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseRefresh","src","width","default","height","limit","header","date","content","snippet","showerror","ssl","linktarget","link","title","properties","check","init","members","_parser","_getInnerDomString","getWidth","getHeight","_onDomReady","plugins","Rss","prototype","base","call","refreshRSS","_setupRefreshAction","_timer","event","Timer","getRefresh","_this","actor","getActor","error","err","target","textContent","headline","querySelector","document","createElement","insertBefore","firstElementChild","elements","i","remove","a","elem","useLink","setAttribute","getLinktarget","appendChild","classList","add","entry","innerHTML","getSnippet","contentSnippet","innerText","Date","isoDate","toLocaleString","destruct","defer","util","ScriptLoader","getInstance","addScripts","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* Rss.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins displays RSS-Feeds in the CometVisu.\n *\n * <pre class=\"sunlight-highlight-xml\">\n *   &lt;rss src=&quot;/visu/plugins/rss/rsslog.php&quot; refresh=&quot;300&quot; link=&quot;false&quot; title=&quot;false&quot;&gt;&lt;/rss&gt;\n *   &lt;rss src=&quot;http://www.tagesschau.de/xml/rss2&quot; refresh=&quot;300&quot;&gt;Test API&lt;/rss&gt;\n *   &lt;rss src=&quot;/visu/plugins/rss/tagesschau-rss2.xml&quot; refresh=&quot;300&quot; header=&quot;true&quot; date=&quot;true&quot;&gt;&lt;/rss&gt;\n * </pre>\n *\n * @author Michael Markstaller\n * @since 2011\n * @ignore(RSSParser)\n * @asset(plugins/rss/rss-parser.min.js)\n */\nqx.Class.define('cv.plugins.Rss', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Refresh],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'src': {},\n        'width': { 'default': '' },\n        'height': { 'default': '' },\n        'limit': { 'default': 10 },\n        'header': { 'default': true },\n        'date': { 'default': true },\n        'content': { 'default': true },\n        'snippet': { 'default': true },\n        'showerror': { 'default': true },\n        'ssl': { 'default': false },\n        'linktarget': { 'default': '_new' },\n        'link': { 'default': true },\n        'title': { 'default': true }\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    src: { check: 'String', init: '' },\n    'width': { init: '' },\n    'height': { init: '' },\n    'limit': { init: 10 },\n    'header': { init: true },\n    'date': { init: true },\n    'content': { init: true },\n    'snippet': { init: true },\n    'showerror': { init: true },\n    'ssl': { init: false },\n    'linktarget': { init: '_new' },\n    'link': { init: true },\n    'title': { init: true }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _parser: null,\n\n    _getInnerDomString: function () {\n      const rssstyle = '' +\n      this.getWidth() ? 'width:' + this.getWidth() : '' +\n      this.getHeight() ? 'height:' + this.getHeight() : '';\n      return '<div class=\"actor\"><ul class=\"rss_inline\" style=\"' + rssstyle + '\"></ul>';\n    },\n\n    _onDomReady: function () {\n      this.base(arguments);\n      this._parser = new RSSParser();\n      this.refreshRSS();\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', function () {\n        this.refreshRSS();\n      }, this);\n      this._timer.start();\n    },\n\n    refreshRSS: function () {\n      this._parser.parseURL(this.getSrc(), (err, feed) => {\n        const actor = this.getActor();\n        let target = actor.querySelector('.rss_inline');\n        if (err) {\n          this.error(err);\n          if (this.getShowerror()) {\n            target.textContent = 'ERROR: ' +err;\n          }\n          return;\n        }\n        if (this.getHeader()) {\n          let headline = actor.querySelector(':scope > h3');\n          if (!headline) {\n            headline = document.createElement('h3');\n            actor.insertBefore(headline, actor.firstElementChild);\n          }\n          headline.textContent = feed.title;\n        }\n\n        const elements = target.querySelectorAll(':scope > li');\n        for (let i = elements.length; i >= feed.items.length; i--) {\n          elements[i].remove();\n        }\n\n        const useLink = this.getLink();\n        const showContent = this.getContent();\n        const showDate = this.getDate();\n\n        feed.items.some((entry, i) => {\n          let elem = target.querySelector(':scope > li[data-row=\"'+i+'\"]');\n          let a;\n          let content;\n          let date;\n          if (!elem) {\n            elem = document.createElement('li');\n            if (useLink) {\n              a = document.createElement('a');\n              a.setAttribute('target', this.getLinktarget());\n              elem.appendChild(a);\n            }\n            if (showContent) {\n              content = document.createElement('p');\n              content.classList.add('content');\n              elem.appendChild(content);\n            }\n            if (showDate) {\n              date = document.createElement('p');\n              date.classList.add('date');\n              elem.appendChild(date);\n            }\n            elem.setAttribute('data-row', ''+i);\n            target.appendChild(elem);\n          } else {\n            if (useLink) {\n              a = elem.querySelector(':scope > a');\n            }\n            if (showContent) {\n              content = elem.querySelector(':scope > p.content');\n            }\n            if (showDate) {\n              date = elem.querySelector(':scope > p.date');\n            }\n          }\n          if (useLink) {\n            a.textContent = entry.title;\n            a.setAttribute('href', entry.link);\n          } else {\n            elem.textContent = entry.title;\n          }\n          if (showContent) {\n            content.innerHTML = this.getSnippet() ? entry.contentSnippet : entry.content;\n          }\n          if (showDate) {\n            date.innerText = new Date(entry.isoDate).toLocaleString();\n          }\n          return i >= this.getLimit();\n        });\n      });\n    }\n  },\n\n  destruct: function() {\n    this._parser = null;\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts('plugins/rss/rss-parser.min.js');\n    cv.parser.WidgetParser.addHandler('rss', cv.plugins.Rss);\n    cv.ui.structure.WidgetFactory.registerClass('rss', statics);\n  }\n});\n"]}