{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Rss.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Refresh","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseRefresh","src","width","default","height","limit","header","date","content","snippet","showerror","ssl","linktarget","link","title","properties","check","init","members","_getInnerDomString","rssstyle","getWidth","getHeight","getPath","_onDomReady","plugins","Rss","prototype","base","call","_setupRefreshAction","_timer","event","Timer","getRefresh","refreshRSS","Model","getInstance","getWidgetData","$","rssfeed","getSrc","defer","util","ScriptLoader","addScripts","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"4WAmCCA,GAAAC,MAAAC,OAAA,kBACCC,OAAOC,GAAAC,GAAOC,UAAAC,eACdC,SAAUJ,GAAFC,GAAMI,OAANC,SAOTC,SAWAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACG,IAAKC,EAAEb,GAAAc,OAAUC,aAAWC,aAASC,KAAUR,EAAAC,EAAAC,EAAAC,EAAAK,KAAAC,kCAC7ClB,GAAAc,OAAUC,aAAaI,aAAaV,EAAAC,GACpC,OAAGG,GAEJK,+BAfM,WAiBP,OACEE,OACEC,OACAC,QAAS,IAAAC,QACTD,QAAU,IAAAE,OACVF,QAAS,IAAAG,QACTH,SAAU,GAAAI,MACVJ,SAAQ,GAAAK,SACRL,SAAW,GAAAM,SACXN,SAAW,GAAAO,WACXP,SAAa,GAAAQ,KACbR,SAAO,GAAAS,YACPT,QAAA,QAAcU,MACdV,SAAQ,GAAAW,OACRX,SAAS,MAShBY,YACCd,KACEe,MAAK,SAAEC,KAAK,IAAPf,OACLe,KAAA,IAASb,QACTa,KAAA,IAAUZ,OACVY,KAAA,IAASX,QACTW,MAAA,GAAUV,MACVU,MAAQ,GAAAT,SACRS,MAAA,GAAWR,SACXQ,MAAA,GAAWP,WACXO,MAAA,GAAaN,KACbM,MAAO,GAAAL,YACPK,KAAA,QAAcJ,MACdI,MAAQ,GAAAH,OACRG,MAAA,IAOHC,SACCC,mBAAS,WACP,IAAAC,EAAA,GAAoBtB,KAAAuB,WAAA,SAAYvB,KAAAuB,WAAA,GAAAvB,KAAAwB,YAAA,UAAAxB,KAAAwB,YAAA,GAC9B,MAAM,sDACuBxB,KAAkByB,UAC1C,YAAcH,EAAY,YAEhCI,YANM,WAQP3C,GAAA4C,QAAaC,IAAAC,UAAAH,YAAYI,KAAAC,KAAA/B,yBAGxBgC,oBAXM,WAaPhC,KAAAiC,OAAA,IAAmBtD,GAAEuD,MAAAC,MAAAnC,KAAAoC,4DAEnBpC,KAAKqC,cACHrC,2BAGHqC,WAnBM,WAqBP,IAAAzC,EAAYb,GAAAa,KAAA0C,MAAAC,cAAYC,cAAAxC,KAAAyB,WACtBgB,EAAA,IAAUzC,KAAKyB,UAAY,gBAAciB,QAAA1C,KAAc2C,SAAK/C,KAtBvDgD,MAvEuB,SAAAtD,GAkGzBP,GAAA8D,KAASC,aAASP,cACjBQ,WAAY,+CAClBhE,GAAAc,OAAOC,aAAWkD,WAAA,MAAAjE,GAAA4C,QAAAC,KAClB7C,GAAGC,GAAAC,UAAOgE,cAAaC,cAAqB,MAAH5D,MArGXP,GAAjC4C,QAAAC,IAAAuB,cAAAA","sourcesContent":["/* Rss.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * This plugins integrates zrssfeed to display RSS-Feeds via Google-API \n * and a parser for local feeds using jQuery 1.5+ into CometVisu.\n * rssfeedlocal is derived from simplerss and zrssfeed\n * rssfeedlocal is mainly meant to be used with rsslog.php and plugins\n *\n * <pre class=\"sunlight-highlight-xml\">\n *   &lt;rss src=&quot;/visu/plugins/rss/rsslog.php&quot; refresh=&quot;300&quot; link=&quot;false&quot; title=&quot;false&quot;&gt;&lt;/rss&gt;\n *   &lt;rss src=&quot;http://www.tagesschau.de/xml/rss2&quot; refresh=&quot;300&quot;&gt;Test API&lt;/rss&gt;\n *   &lt;rss src=&quot;/visu/plugins/rss/tagesschau-rss2.xml&quot; refresh=&quot;300&quot; header=&quot;true&quot; date=&quot;true&quot;&gt;&lt;/rss&gt;\n * </pre>\n *\n * @author Michael Markstaller\n * @since 2011\n * @asset(plugins/rss/dep/zrssfeed/jquery.zrssfeed.js)\n */\nqx.Class.define('cv.plugins.Rss', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Refresh],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'src': {},\n        'width': { 'default': '' },\n        'height': { 'default': '' },\n        'limit': { 'default': 10 },\n        'header': { 'default': true },\n        'date': { 'default': true },\n        'content': { 'default': true },\n        'snippet': { 'default': true },\n        'showerror': { 'default': true },\n        'ssl': { 'default': false },\n        'linktarget': { 'default': '_new' },\n        'link': { 'default': true },\n        'title': { 'default': true }\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    src: { check: 'String', init: '' },\n    'width': { init: '' },\n    'height': { init: '' },\n    'limit': { init: 10 },\n    'header': { init: true },\n    'date': { init: true },\n    'content': { init: true },\n    'snippet': { init: true },\n    'showerror': { init: true },\n    'ssl': { init: false },\n    'linktarget': { init: '_new' },\n    'link': { init: true },\n    'title': { init: true }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _getInnerDomString: function () {\n      const rssstyle = '' +\n      this.getWidth() ? 'width:' + this.getWidth() : '' +\n      this.getHeight() ? 'height:' + this.getHeight() : '';\n      return '<div class=\"actor\"><div class=\"rss_inline\" id=\"rss_' + this.getPath() + '\" style=\"' + rssstyle + '\"></div>';\n    },\n\n    _onDomReady: function () {\n      this.base(arguments);\n      this.refreshRSS();\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', function () {\n        this.refreshRSS();\n      }, this);\n      this._timer.start();\n    },\n\n    refreshRSS: function () {\n      const data = cv.data.Model.getInstance().getWidgetData(this.getPath());\n      $('#' + this.getPath() + ' .rss_inline').rssfeed(this.getSrc(), data);\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts('plugins/rss/dep/zrssfeed/jquery.zrssfeed.js');\n    cv.parser.WidgetParser.addHandler('rss', cv.plugins.Rss);\n    cv.ui.structure.WidgetFactory.registerClass('rss', statics);\n  }\n});\n"]}