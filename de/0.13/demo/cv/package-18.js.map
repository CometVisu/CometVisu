{"version":3,"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Refresh","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseRefresh","debug","target","transform","value","label","player_ip_addr","player_port","parseInt","uniqid","Date","getTime","properties","traceFlag","check","init","playerIp","nullable","playerPort","members","upnpcontroller_uid","upnpcontroller_song_process_rel","_getInnerDomString","id","plugins","UpnpController","controller","_onDomReady","superclass","prototype","call","refreshUpnpcontroller","initListeners","Reg","event","Registration","addListener","document","querySelector","toggleMute","togglePlay","callNext","callPrev","callvolumedown","callvolumeup","callgetplaylists","_setupRefreshAction","_this","getRefresh","_timer","Timer","start","getPlayerIp","getPlayerPort","traceLog","isTraceFlag","__P_19_0","ev","getTarget","getResponse","JSON","volume","reltimeResponse","durationResponse","title","__P_19_1","muteState","transportState","artist","album","e","error","mute","playMode","reltime","duration","classList","replace","innerText","calculateSongProcessed","setAttribute","type","callback","req","io","request","Xhr","util","ResourceManager","getInstance","toUri","Object","assign","port","set","requestData","accept","method","send","undefined","durationParts","split","secondsTotal","Number","reltimeParts","secondsProcessed","Math","floor","currentValue","getAttribute","playlists","totalMatches","i","playLists","length","urlenc","name","url","innerHTML","currentVolume","muteButton","muteValue","cmd","playValue","playButton","msg","defer","ScriptLoader","addStyles","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/UpnpController.js"],"sourcesContent":["/* UpnpController.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n//noinspection JSUnusedGlobalSymbols\n/**\n * @author Mark K. [mr dot remy at gmx dot de]\n * @since 2012\n * @asset(plugins/upnpcontroller/upnpcontroller.css)\n * @asset(plugins/upnpcontroller/*.php)\n */\nqx.Class.define('cv.plugins.UpnpController', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Refresh],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse(xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(\n        this,\n        xml,\n        path,\n        flavour,\n        pageType,\n        this.getAttributeToPropertyMappings()\n      );\n\n      cv.parser.pure.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings() {\n      return {\n        debug: {\n          target: 'traceFlag',\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        label: {},\n        player_ip_addr: { target: 'playerIp' },\n        player_port: {\n          target: 'playerPort',\n          transform(value) {\n            return value ? parseInt(value) : 1440;\n          }\n        }\n      };\n    },\n\n    uniqid() {\n      const newDate = new Date();\n      return newDate.getTime();\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    traceFlag: {\n      check: 'Boolean',\n      init: false\n    },\n\n    playerIp: {\n      check: 'String',\n      nullable: true\n    },\n\n    playerPort: {\n      check: 'Number',\n      init: 1440\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    upnpcontroller_uid: null,\n    upnpcontroller_song_process_rel: null,\n\n    _getInnerDomString() {\n      const id = 'upnpcontroller_' + this.self(arguments).uniqid();\n      this.upnpcontroller_uid = id;\n      const ret_val = '<div class=\"actor\"><div class=\"upnpcontroller\" id=\"' + id + '\">';\n      let controller = '<div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_title\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Title</div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_artist\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Artist</div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_album\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Album</div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_time\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'></div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><progress id=\\'' + id + '_progress\\'  max=\\'100\\' value=\\'0\\'></progress></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_volumedown\\' class=\\'actor center switchUnpressed\\'><div class=\\'value\\'>-</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_volume\\' class=\\'actor center switchInvisible\\' style=\\'text-align: center;\\'><div class=\\'value\\'>20</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_volumeup\\' class=\\'actor center switchUnpressed\\'><div class=\\'value\\'>+</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_playButton\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>-</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_muteButton\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>-</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_prev\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>prev</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_next\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>next</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_getplaylists\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>play lists</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' + id + '_playlistsresult\\'><div class=\\'value\\'></div></div></div>';\n\n      controller += '</div>';\n      return ret_val + controller;\n    },\n\n    _onDomReady() {\n      super._onDomReady();\n      this.refreshUpnpcontroller();\n    },\n\n    /**\n     * Initialize the event listeners\n     */\n    initListeners() {\n      const Reg = qx.event.Registration;\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_muteButton'),\n        'tap',\n        this.toggleMute,\n        this\n      );\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_playButton'),\n        'tap',\n        this.togglePlay,\n        this\n      );\n\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_next'), 'tap', this.callNext, this);\n\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_prev'), 'tap', this.callPrev, this);\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_volumedown'),\n        'tap',\n        this.callvolumedown,\n        this\n      );\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_volumeup'),\n        'tap',\n        this.callvolumeup,\n        this\n      );\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_getplaylists'),\n        'tap',\n        this.callgetplaylists,\n        this\n      );\n    },\n\n    _setupRefreshAction() {\n      if (this.getRefresh() && this.getRefresh() > 0) {\n        this._timer = new qx.event.Timer(this.getRefresh());\n        this._timer.addListener('interval', () => {\n          this.refreshUpnpcontroller();\n        });\n        this._timer.start();\n      }\n    },\n\n    refreshUpnpcontroller() {\n      const playerIp = this.getPlayerIp();\n      const playerPort = this.getPlayerPort();\n\n      this.traceLog('debug     : ' + this.isTraceFlag());\n      this.traceLog('playerIp  : ' + playerIp);\n      this.traceLog('playerPort: ' + playerPort);\n\n      this.__callRemote('status', {}, function (ev) {\n        let data = ev.getTarget().getResponse();\n        try {\n          if (typeof data === 'string') {\n            data = JSON.parse(data);\n          }\n          this.traceLog('volume          : ' + data.volume);\n          this.traceLog('reltime         : ' + data.reltimeResponse);\n          this.traceLog('durationResponse: ' + data.durationResponse);\n          this.traceLog('title           : ' + data.title);\n\n          this.__updateController(\n            data.volume,\n            data.muteState,\n            data.transportState,\n            data.title,\n            data.reltimeResponse,\n            data.durationResponse,\n            data.artist,\n            data.album\n          );\n        } catch (e) {\n          this.error(e);\n        }\n      });\n    },\n\n    __updateController(volume, mute, playMode, title, reltime, duration, artist, album) {\n      const id = this.upnpcontroller_uid;\n\n      if (mute === 0) {\n        document.querySelector('#' + id + '_muteButton').classList.replace('switchPressed', 'switchUnpressed');\n      } else {\n        document.querySelector('#' + id + '_muteButton').classList.replace('switchUnpressed', 'switchPressed');\n      }\n\n      if (playMode === 'Play') {\n        document.querySelector('#' + id + '_playButton').classList.replace('switchPressed', 'switchUnpressed');\n      } else {\n        document.querySelector('#' + id + '_playButton').classList.replace('switchUnpressed', 'switchPressed');\n      }\n\n      document.querySelector('#' + id + '_muteButton div.value').innerText = mute;\n      document.querySelector('#' + id + '_playButton div.value').innerText = playMode;\n      document.querySelector('#' + id + '_volume div.value').innerText = volume;\n      document.querySelector('#' + id + '_title div.value').innerText = title;\n      document.querySelector('#' + id + '_artist div.value').innerText = artist;\n      document.querySelector('#' + id + '_album div.value').innerText = album;\n      document.querySelector('#' + id + '_time div.value').innerText = reltime + ' of ' + duration;\n\n      this.upnpcontroller_song_process_rel = this.calculateSongProcessed(reltime, duration);\n\n      this.traceLog('song_process_rel: ' + this.upnpcontroller_song_process_rel);\n\n      document.querySelector('#' + id + '_progress').setAttribute('value', this.upnpcontroller_song_process_rel);\n    },\n\n    /**\n     * Internal helper method for remote calls to backend UPNP controller scripts\n     * @param type {String} type of backend controller\n     * @param data {Map|null} additional data to send to the backend\n     * @param callback {Function} callback that should be called in success\n     */\n    __callRemote(type, data, callback) {\n      const req = new qx.io.request.Xhr(\n        qx.util.ResourceManager.getInstance().toUri('plugins/upnpcontroller/' + type + '.php')\n      );\n\n      if (!data) {\n        data = {};\n      }\n      data = Object.assign(data, {\n        player_ip_addr: this.getPlayerIp(),\n        port: this.getPlayerPort()\n      });\n\n      req.set({\n        requestData: data,\n        accept: 'application/json',\n        method: 'GET'\n      });\n\n      req.addListener('success', callback, this);\n      req.send();\n    },\n\n    calculateSongProcessed(reltime, duration) {\n      if (reltime === undefined || duration === undefined) {\n        return 0;\n      }\n      this.traceLog('calculateSongProcessed');\n\n      const durationParts = duration.split(':');\n      const secondsTotal =\n        Number(durationParts[2]) + Number(durationParts[1]) * 60 + Number(durationParts[0]) * 60 * 60;\n      const reltimeParts = reltime.split(':');\n      const secondsProcessed =\n        Number(reltimeParts[2]) + Number(reltimeParts[1]) * 60 + Number(reltimeParts[0]) * 60 * 60;\n      this.traceLog('secondsTotal    : ' + secondsTotal);\n      this.traceLog('secondsProcessed: ' + secondsProcessed);\n\n      return Math.floor((secondsProcessed * 100) / secondsTotal);\n    },\n\n    callgetplaylists() {\n      this.traceLog('click callgetplaylists');\n      const playlist = document.querySelector('#' + this.upnpcontroller_uid + '_getplaylists');\n\n      const currentValue = playlist.getAttribute('value');\n      const playerIp = this.getPlayerIp();\n      const playerPort = this.getPlayerPort();\n\n      this.traceLog('currentValue: ' + currentValue);\n      this.traceLog('playerPort  : ' + playerPort);\n\n      this.__callRemote('playlists', {}, function (ev) {\n        let data = ev.getTarget().getResponse();\n        try {\n          if (typeof data === 'string') {\n            data = JSON.parse(data);\n          }\n        } catch (e) {\n          this.error(e);\n          return;\n        }\n        let playlists = '';\n\n        this.traceLog('totalMatches: ' + data.totalMatches);\n\n        for (let i = 0; i < data.playLists.length; i++) {\n          playlists +=\n            '<a href=\\'' +\n            'plugins/upnpcontroller/selectplaylist.php?player_ip_addr=' +\n            playerIp +\n            '&listurl=' +\n            data.playLists[i].urlenc +\n            '&port=' +\n            playerPort +\n            '\\'>' +\n            data.playLists[i].name +\n            '</a></br>';\n\n          if (this.isTraceFlag() === 'true') {\n            this.debug('name: ' + data.playLists[i].name);\n            this.debug('url: ' + data.playLists[i].url);\n          }\n        }\n\n        if (currentValue !== 'pressed') {\n          document.querySelector('#' + this.upnpcontroller_uid + '_playlistsresult div.value').innerHTML = playlists;\n          playlists.setAttribute('value', 'pressed');\n          playlists.classList.replace('switchUnpressed', 'switchPressed');\n        } else {\n          document.querySelector('#' + this.upnpcontroller_uid + '_playlistsresult div.value').innerText = '';\n          playlists.setAttribute('value', 'unpressed');\n          playlists.classList.replace('switchUnpressed', 'switchPressed');\n        }\n      });\n    },\n\n    callvolumedown() {\n      this.traceLog('click callvolumedown');\n      const currentVolume = document.querySelector('#' + this.upnpcontroller_uid + '_volume div.value').innerText;\n\n      this.traceLog('currentVolume: ' + currentVolume);\n      const volume = Number(currentVolume) - 5;\n      this.__callRemote('volume', { volume: volume }, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callvolumeup() {\n      this.traceLog('click callvolumeup');\n      const currentVolume = document.querySelector('#' + this.upnpcontroller_uid + '_volume div.value').innerText;\n      this.traceLog('currentVolume: ' + currentVolume);\n      const volume = Number(currentVolume) + 5;\n\n      this.__callRemote('volume', { volume: volume }, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callNext() {\n      this.traceLog('click next');\n      this.__callRemote('next', {}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callPrev() {\n      this.traceLog('click prev');\n      this.__callRemote('prev', {}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    toggleMute() {\n      this.traceLog('click mute');\n      const muteButton = document.querySelector('#' + this.upnpcontroller_uid + '_muteButton');\n\n      let muteValue = muteButton.querySelector('div.value').innerText;\n\n      this.traceLog('current muteValue: ' + muteValue);\n\n      if (muteValue === 0) {\n        muteValue = 1;\n        muteButton.classList.replace('switchUnpressed', 'switchPressed');\n      } else {\n        muteValue = 0;\n        muteButton.classList.replace('switchPressed', 'switchUnpressed');\n      }\n\n      this.__callRemote('mute', { mute: muteValue }, function (data) {\n        this.traceLog('data: ' + data);\n      });\n\n      this.refreshUpnpcontroller();\n    },\n\n    togglePlay() {\n      this.traceLog('click play');\n      const playValue = document.querySelector('#' + this.upnpcontroller_uid + '_playButton div.value').innerText;\n      let cmd;\n\n      this.traceLog('current playValue: ' + playValue);\n\n      const playButton = document.querySelector('#' + this.upnpcontroller_uid + '_playButton');\n\n      if (playValue === 'Play') {\n        cmd = 'pause';\n        playButton.classList.replace('switchUnpressed', 'switchPressed');\n      } else {\n        cmd = 'play';\n        playButton.classList.replace('switchPressed', 'switchUnpressed');\n      }\n\n      this.__callRemote(cmd, {}, function (ev) {\n        this.traceLog('data: ' + ev.getTarget().getResponse());\n      });\n\n      this.refreshUpnpcontroller();\n    },\n\n    traceLog(msg) {\n      if (this.isTraceFlag()) {\n        this.debug(msg);\n      }\n    }\n  },\n\n  defer(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/upnpcontroller/upnpcontroller.css');\n    cv.parser.pure.WidgetParser.addHandler('upnpcontroller', cv.plugins.UpnpController);\n\n    cv.ui.structure.WidgetFactory.registerClass('upnpcontroller', statics);\n  }\n});\n"],"mappings":"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","ignoreList":[]}