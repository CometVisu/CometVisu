{"version":3,"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Refresh","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseRefresh","debug","target","transform","value","label","player_ip_addr","player_port","parseInt","uniqid","Date","getTime","properties","traceFlag","check","init","playerIp","nullable","playerPort","members","upnpcontroller_uid","upnpcontroller_song_process_rel","_getInnerDomString","id","plugins","UpnpController","controller","_onDomReady","superclass","prototype","call","initListeners","Reg","event","Registration","addListener","document","querySelector","toggleMute","togglePlay","callNext","callPrev","callvolumedown","callvolumeup","callgetplaylists","_setupRefreshAction","_this","_timer","Timer","getRefresh","refreshUpnpcontroller","getPlayerIp","getPlayerPort","traceLog","isTraceFlag","ev","getTarget","getResponse","JSON","reltimeResponse","durationResponse","title","e","error","__P_19_1","volume","mute","playMode","reltime","duration","artist","album","classList","replace","innerText","calculateSongProcessed","setAttribute","__P_19_0","type","callback","req","io","request","Xhr","util","ResourceManager","getInstance","toUri","port","set","requestData","accept","method","send","undefined","durationParts","split","secondsTotal","Number","reltimeParts","secondsProcessed","Math","floor","currentValue","getAttribute","totalMatches","playlists","playLists","i","urlenc","name","url","innerHTML","currentVolume","muteButton","muteValue","cmd","playValue","playButton","msg","defer","ScriptLoader","addStyles","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/UpnpController.js"],"sourcesContent":["/* UpnpController.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n//noinspection JSUnusedGlobalSymbols\n/**\n * @author Mark K. [mr dot remy at gmx dot de]\n * @since 2012\n * @asset(plugins/upnpcontroller/upnpcontroller.css)\n * @asset(plugins/upnpcontroller/*.php)\n */\nqx.Class.define('cv.plugins.UpnpController', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Refresh],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse(xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(\n        this,\n        xml,\n        path,\n        flavour,\n        pageType,\n        this.getAttributeToPropertyMappings()\n      );\n\n      cv.parser.pure.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings() {\n      return {\n        debug: {\n          target: 'traceFlag',\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        label: {},\n        player_ip_addr: { target: 'playerIp' },\n        player_port: {\n          target: 'playerPort',\n          transform(value) {\n            return value ? parseInt(value) : 1440;\n          }\n        }\n      };\n    },\n\n    uniqid() {\n      const newDate = new Date();\n      return newDate.getTime();\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    traceFlag: {\n      check: 'Boolean',\n      init: false\n    },\n\n    playerIp: {\n      check: 'String',\n      nullable: true\n    },\n\n    playerPort: {\n      check: 'Number',\n      init: 1440\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    upnpcontroller_uid: null,\n    upnpcontroller_song_process_rel: null,\n\n    _getInnerDomString() {\n      const id = 'upnpcontroller_' + this.self(arguments).uniqid();\n      this.upnpcontroller_uid = id;\n      const ret_val = '<div class=\"actor\"><div class=\"upnpcontroller\" id=\"' + id + '\">';\n      let controller = '<div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_title\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Title</div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_artist\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Artist</div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_album\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Album</div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div id=\\'' +\n        id +\n        '_time\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'></div><div class=\\'value\\'>-</div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><progress id=\\'' + id + '_progress\\'  max=\\'100\\' value=\\'0\\'></progress></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_volumedown\\' class=\\'actor center switchUnpressed\\'><div class=\\'value\\'>-</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_volume\\' class=\\'actor center switchInvisible\\' style=\\'text-align: center;\\'><div class=\\'value\\'>20</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_volumeup\\' class=\\'actor center switchUnpressed\\'><div class=\\'value\\'>+</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_playButton\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>-</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_muteButton\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>-</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_prev\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>prev</div></div>' +\n        '<div id=\\'' +\n        id +\n        '_next\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>next</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' +\n        id +\n        '_getplaylists\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>play lists</div></div></div>';\n      controller +=\n        '<div style=\\'float: left;\\'><div id=\\'' + id + '_playlistsresult\\'><div class=\\'value\\'></div></div></div>';\n\n      controller += '</div>';\n      return ret_val + controller;\n    },\n\n    _onDomReady() {\n      super._onDomReady();\n      this.refreshUpnpcontroller();\n    },\n\n    /**\n     * Initialize the event listeners\n     */\n    initListeners() {\n      const Reg = qx.event.Registration;\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_muteButton'),\n        'tap',\n        this.toggleMute,\n        this\n      );\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_playButton'),\n        'tap',\n        this.togglePlay,\n        this\n      );\n\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_next'), 'tap', this.callNext, this);\n\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_prev'), 'tap', this.callPrev, this);\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_volumedown'),\n        'tap',\n        this.callvolumedown,\n        this\n      );\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_volumeup'),\n        'tap',\n        this.callvolumeup,\n        this\n      );\n\n      Reg.addListener(\n        document.querySelector('#' + this.upnpcontroller_uid + '_getplaylists'),\n        'tap',\n        this.callgetplaylists,\n        this\n      );\n    },\n\n    _setupRefreshAction() {\n      if (this.getRefresh() && this.getRefresh() > 0) {\n        this._timer = new qx.event.Timer(this.getRefresh());\n        this._timer.addListener('interval', () => {\n          this.refreshUpnpcontroller();\n        });\n        this._timer.start();\n      }\n    },\n\n    refreshUpnpcontroller() {\n      const playerIp = this.getPlayerIp();\n      const playerPort = this.getPlayerPort();\n\n      this.traceLog('debug     : ' + this.isTraceFlag());\n      this.traceLog('playerIp  : ' + playerIp);\n      this.traceLog('playerPort: ' + playerPort);\n\n      this.__callRemote('status', {}, function (ev) {\n        let data = ev.getTarget().getResponse();\n        try {\n          if (typeof data === 'string') {\n            data = JSON.parse(data);\n          }\n          this.traceLog('volume          : ' + data.volume);\n          this.traceLog('reltime         : ' + data.reltimeResponse);\n          this.traceLog('durationResponse: ' + data.durationResponse);\n          this.traceLog('title           : ' + data.title);\n\n          this.__updateController(\n            data.volume,\n            data.muteState,\n            data.transportState,\n            data.title,\n            data.reltimeResponse,\n            data.durationResponse,\n            data.artist,\n            data.album\n          );\n        } catch (e) {\n          this.error(e);\n        }\n      });\n    },\n\n    __updateController(volume, mute, playMode, title, reltime, duration, artist, album) {\n      const id = this.upnpcontroller_uid;\n\n      if (mute === 0) {\n        document.querySelector('#' + id + '_muteButton').classList.replace('switchPressed', 'switchUnpressed');\n      } else {\n        document.querySelector('#' + id + '_muteButton').classList.replace('switchUnpressed', 'switchPressed');\n      }\n\n      if (playMode === 'Play') {\n        document.querySelector('#' + id + '_playButton').classList.replace('switchPressed', 'switchUnpressed');\n      } else {\n        document.querySelector('#' + id + '_playButton').classList.replace('switchUnpressed', 'switchPressed');\n      }\n\n      document.querySelector('#' + id + '_muteButton div.value').innerText = mute;\n      document.querySelector('#' + id + '_playButton div.value').innerText = playMode;\n      document.querySelector('#' + id + '_volume div.value').innerText = volume;\n      document.querySelector('#' + id + '_title div.value').innerText = title;\n      document.querySelector('#' + id + '_artist div.value').innerText = artist;\n      document.querySelector('#' + id + '_album div.value').innerText = album;\n      document.querySelector('#' + id + '_time div.value').innerText = reltime + ' of ' + duration;\n\n      this.upnpcontroller_song_process_rel = this.calculateSongProcessed(reltime, duration);\n\n      this.traceLog('song_process_rel: ' + this.upnpcontroller_song_process_rel);\n\n      document.querySelector('#' + id + '_progress').setAttribute('value', this.upnpcontroller_song_process_rel);\n    },\n\n    /**\n     * Internal helper method for remote calls to backend UPNP controller scripts\n     * @param type {String} type of backend controller\n     * @param data {Map|null} additional data to send to the backend\n     * @param callback {Function} callback that should be called in success\n     */\n    __callRemote(type, data, callback) {\n      const req = new qx.io.request.Xhr(\n        qx.util.ResourceManager.getInstance().toUri('plugins/upnpcontroller/' + type + '.php')\n      );\n\n      if (!data) {\n        data = {};\n      }\n      data = Object.assign(data, {\n        player_ip_addr: this.getPlayerIp(),\n        port: this.getPlayerPort()\n      });\n\n      req.set({\n        requestData: data,\n        accept: 'application/json',\n        method: 'GET'\n      });\n\n      req.addListener('success', callback, this);\n      req.send();\n    },\n\n    calculateSongProcessed(reltime, duration) {\n      if (reltime === undefined || duration === undefined) {\n        return 0;\n      }\n      this.traceLog('calculateSongProcessed');\n\n      const durationParts = duration.split(':');\n      const secondsTotal =\n        Number(durationParts[2]) + Number(durationParts[1]) * 60 + Number(durationParts[0]) * 60 * 60;\n      const reltimeParts = reltime.split(':');\n      const secondsProcessed =\n        Number(reltimeParts[2]) + Number(reltimeParts[1]) * 60 + Number(reltimeParts[0]) * 60 * 60;\n      this.traceLog('secondsTotal    : ' + secondsTotal);\n      this.traceLog('secondsProcessed: ' + secondsProcessed);\n\n      return Math.floor((secondsProcessed * 100) / secondsTotal);\n    },\n\n    callgetplaylists() {\n      this.traceLog('click callgetplaylists');\n      const playlist = document.querySelector('#' + this.upnpcontroller_uid + '_getplaylists');\n\n      const currentValue = playlist.getAttribute('value');\n      const playerIp = this.getPlayerIp();\n      const playerPort = this.getPlayerPort();\n\n      this.traceLog('currentValue: ' + currentValue);\n      this.traceLog('playerPort  : ' + playerPort);\n\n      this.__callRemote('playlists', {}, function (ev) {\n        let data = ev.getTarget().getResponse();\n        try {\n          if (typeof data === 'string') {\n            data = JSON.parse(data);\n          }\n        } catch (e) {\n          this.error(e);\n          return;\n        }\n        let playlists = '';\n\n        this.traceLog('totalMatches: ' + data.totalMatches);\n\n        for (let i = 0; i < data.playLists.length; i++) {\n          playlists +=\n            '<a href=\\'' +\n            'plugins/upnpcontroller/selectplaylist.php?player_ip_addr=' +\n            playerIp +\n            '&listurl=' +\n            data.playLists[i].urlenc +\n            '&port=' +\n            playerPort +\n            '\\'>' +\n            data.playLists[i].name +\n            '</a></br>';\n\n          if (this.isTraceFlag() === 'true') {\n            this.debug('name: ' + data.playLists[i].name);\n            this.debug('url: ' + data.playLists[i].url);\n          }\n        }\n\n        if (currentValue !== 'pressed') {\n          document.querySelector('#' + this.upnpcontroller_uid + '_playlistsresult div.value').innerHTML = playlists;\n          playlists.setAttribute('value', 'pressed');\n          playlists.classList.replace('switchUnpressed', 'switchPressed');\n        } else {\n          document.querySelector('#' + this.upnpcontroller_uid + '_playlistsresult div.value').innerText = '';\n          playlists.setAttribute('value', 'unpressed');\n          playlists.classList.replace('switchUnpressed', 'switchPressed');\n        }\n      });\n    },\n\n    callvolumedown() {\n      this.traceLog('click callvolumedown');\n      const currentVolume = document.querySelector('#' + this.upnpcontroller_uid + '_volume div.value').innerText;\n\n      this.traceLog('currentVolume: ' + currentVolume);\n      const volume = Number(currentVolume) - 5;\n      this.__callRemote('volume', { volume: volume }, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callvolumeup() {\n      this.traceLog('click callvolumeup');\n      const currentVolume = document.querySelector('#' + this.upnpcontroller_uid + '_volume div.value').innerText;\n      this.traceLog('currentVolume: ' + currentVolume);\n      const volume = Number(currentVolume) + 5;\n\n      this.__callRemote('volume', { volume: volume }, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callNext() {\n      this.traceLog('click next');\n      this.__callRemote('next', {}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callPrev() {\n      this.traceLog('click prev');\n      this.__callRemote('prev', {}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    toggleMute() {\n      this.traceLog('click mute');\n      const muteButton = document.querySelector('#' + this.upnpcontroller_uid + '_muteButton');\n\n      let muteValue = muteButton.querySelector('div.value').innerText;\n\n      this.traceLog('current muteValue: ' + muteValue);\n\n      if (muteValue === 0) {\n        muteValue = 1;\n        muteButton.classList.replace('switchUnpressed', 'switchPressed');\n      } else {\n        muteValue = 0;\n        muteButton.classList.replace('switchPressed', 'switchUnpressed');\n      }\n\n      this.__callRemote('mute', { mute: muteValue }, function (data) {\n        this.traceLog('data: ' + data);\n      });\n\n      this.refreshUpnpcontroller();\n    },\n\n    togglePlay() {\n      this.traceLog('click play');\n      const playValue = document.querySelector('#' + this.upnpcontroller_uid + '_playButton div.value').innerText;\n      let cmd;\n\n      this.traceLog('current playValue: ' + playValue);\n\n      const playButton = document.querySelector('#' + this.upnpcontroller_uid + '_playButton');\n\n      if (playValue === 'Play') {\n        cmd = 'pause';\n        playButton.classList.replace('switchUnpressed', 'switchPressed');\n      } else {\n        cmd = 'play';\n        playButton.classList.replace('switchPressed', 'switchUnpressed');\n      }\n\n      this.__callRemote(cmd, {}, function (ev) {\n        this.traceLog('data: ' + ev.getTarget().getResponse());\n      });\n\n      this.refreshUpnpcontroller();\n    },\n\n    traceLog(msg) {\n      if (this.isTraceFlag()) {\n        this.debug(msg);\n      }\n    }\n  },\n\n  defer(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/upnpcontroller/upnpcontroller.css');\n    cv.parser.pure.WidgetParser.addHandler('upnpcontroller', cv.plugins.UpnpController);\n\n    cv.ui.structure.WidgetFactory.registerClass('upnpcontroller', statics);\n  }\n});\n"],"mappings":"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"}