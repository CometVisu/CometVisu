{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/UpnpController.js"],"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Refresh","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseRefresh","debug","target","transform","value","label","player_ip_addr","player_port","parseInt","uniqid","Date","getTime","properties","traceFlag","check","init","playerIp","nullable","playerPort","members","upnpcontroller_uid","upnpcontroller_song_process_rel","_getInnerDomString","id","plugins","UpnpController","controller","_onDomReady","superclass","prototype","call","initListeners","Reg","event","Registration","addListener","document","querySelector","toggleMute","togglePlay","callNext","callPrev","callvolumedown","callvolumeup","callgetplaylists","_setupRefreshAction","getRefresh","_timer","Timer","refreshUpnpcontroller","getPlayerIp","getPlayerPort","traceLog","isTraceFlag","ev","getTarget","getResponse","JSON","reltimeResponse","durationResponse","title","e","error","__P_17_1","volume","mute","playMode","reltime","duration","artist","album","classList","replace","innerText","calculateSongProcessed","setAttribute","__P_17_0","type","callback","req","io","request","Xhr","util","ResourceManager","getInstance","toUri","port","set","requestData","accept","method","send","undefined","durationParts","split","secondsTotal","Number","reltimeParts","secondsProcessed","Math","floor","currentValue","getAttribute","totalMatches","playlists","playLists","i","urlenc","name","url","innerHTML","currentVolume","muteButton","muteValue","cmd","playValue","playButton","msg","defer","ScriptLoader","addStyles","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* UpnpController.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n//noinspection JSUnusedGlobalSymbols\n/**\n * @author Mark K. [mr dot remy at gmx dot de]\n * @since 2012\n * @asset(plugins/upnpcontroller/upnpcontroller.css)\n * @asset(plugins/upnpcontroller/*.php)\n */\nqx.Class.define('cv.plugins.UpnpController', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Refresh],\n  \n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.pure.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'debug': {\n          target: 'traceFlag',\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'label': {},\n        'player_ip_addr': { target: 'playerIp' },\n        'player_port': {\n          target: 'playerPort',\n          transform: function(value) {\n            return value ? parseInt(value) : 1440;\n          }\n        }\n      };\n    },\n\n    uniqid: function() {\n      const newDate = new Date();\n      return newDate.getTime();\n    }\n  },\n  \n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    traceFlag: {\n      check: 'Boolean',\n      init: false\n    },\n    playerIp: {\n      check: 'String',\n      nullable: true\n    },\n    playerPort: {\n      check: 'Number',\n      init: 1440\n    }\n  },\n  \n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    upnpcontroller_uid: null,\n    upnpcontroller_song_process_rel: null,\n\n    _getInnerDomString: function () {\n      const id = 'upnpcontroller_' + this.self(arguments).uniqid();\n      this.upnpcontroller_uid = id;\n      const ret_val = '<div class=\"actor\"><div class=\"upnpcontroller\" id=\"' + id + '\">';\n      let controller = '<div>';\n      controller += '<div id=\\'' + id + '_title\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Title</div><div class=\\'value\\'>-</div></div>';\n      controller += '<div id=\\'' + id + '_artist\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Artist</div><div class=\\'value\\'>-</div></div>';\n      controller += '<div id=\\'' + id + '_album\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'>Album</div><div class=\\'value\\'>-</div></div>';\n      controller += '<div id=\\'' + id + '_time\\' class=\\'upnplabelgroup\\'><div class=\\'upnplabel\\'></div><div class=\\'value\\'>-</div></div>';\n      controller += '<div style=\\'float: left;\\'><progress id=\\'' + id + '_progress\\'  max=\\'100\\' value=\\'0\\'></progress></div>';\n      controller += '<div style=\\'float: left;\\'><div id=\\'' + id + '_volumedown\\' class=\\'actor center switchUnpressed\\'><div class=\\'value\\'>-</div></div>' +\n        '<div id=\\'' + id + '_volume\\' class=\\'actor center switchInvisible\\' style=\\'text-align: center;\\'><div class=\\'value\\'>20</div></div>' +\n        '<div id=\\'' + id + '_volumeup\\' class=\\'actor center switchUnpressed\\'><div class=\\'value\\'>+</div></div></div>';\n      controller += '<div style=\\'float: left;\\'><div id=\\'' + id + '_playButton\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>-</div></div>' +\n        '<div id=\\'' + id + '_muteButton\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>-</div></div></div>';\n      controller += '<div style=\\'float: left;\\'><div id=\\'' + id + '_prev\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>prev</div></div>' +\n        '<div id=\\'' + id + '_next\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>next</div></div></div>';\n      controller += '<div style=\\'float: left;\\'><div id=\\'' + id + '_getplaylists\\' class=\\'actor switchUnpressed center\\'><div class=\\'value\\'>play lists</div></div></div>';\n      controller += '<div style=\\'float: left;\\'><div id=\\'' + id + '_playlistsresult\\'><div class=\\'value\\'></div></div></div>';\n\n      controller += '</div>';\n      return ret_val + controller;\n    },\n\n    _onDomReady: function () {\n      this.base(arguments);\n      this.refreshUpnpcontroller();\n    },\n\n    /**\n     * Initialize the event listeners\n     */\n    initListeners: function () {\n      const Reg = qx.event.Registration;\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_muteButton'), 'tap', this.toggleMute, this);\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_playButton'), 'tap', this.togglePlay, this);\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_next'), 'tap', this.callNext, this);\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_prev'), 'tap', this.callPrev, this);\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_volumedown'), 'tap', this.callvolumedown, this);\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_volumeup'), 'tap', this.callvolumeup, this);\n      Reg.addListener(document.querySelector('#' + this.upnpcontroller_uid + '_getplaylists'), 'tap', this.callgetplaylists, this);\n    },\n\n    _setupRefreshAction: function () {\n      if (this.getRefresh() && this.getRefresh() > 0) {\n        this._timer = new qx.event.Timer(this.getRefresh());\n        this._timer.addListener('interval', function () {\n          this.refreshUpnpcontroller();\n        }, this);\n        this._timer.start();\n      }\n    },\n\n    refreshUpnpcontroller: function () {\n      const playerIp = this.getPlayerIp();\n      const playerPort = this.getPlayerPort();\n\n      this.traceLog('debug     : ' + this.isTraceFlag());\n      this.traceLog('playerIp  : ' + playerIp);\n      this.traceLog('playerPort: ' + playerPort);\n\n      this.__callRemote('status', {}, function (ev) {\n        let data = ev.getTarget().getResponse();\n        try {\n          if (typeof data === 'string') {\n            data = JSON.parse(data);\n          }\n          this.traceLog('volume          : ' + data.volume);\n          this.traceLog('reltime         : ' + data.reltimeResponse);\n          this.traceLog('durationResponse: ' + data.durationResponse);\n          this.traceLog('title           : ' + data.title);\n\n          this.__updateController(data.volume, data.muteState, data.transportState, data.title,\n            data.reltimeResponse, data.durationResponse, data.artist, data.album);\n        } catch (e) {\n          this.error(e);\n        }\n      });\n    },\n\n    __updateController: function (volume, mute, playMode, title, reltime, duration, artist, album) {\n      const id = this.upnpcontroller_uid;\n\n      if (mute === 0) {\n        document.querySelector('#' + id + '_muteButton').classList.replace('switchPressed', 'switchUnpressed');\n      } else {\n        document.querySelector('#' + id + '_muteButton').classList.replace('switchUnpressed', 'switchPressed');\n      }\n\n      if (playMode === 'Play') {\n        document.querySelector('#' + id + '_playButton').classList.replace('switchPressed', 'switchUnpressed');\n      } else {\n        document.querySelector('#' + id + '_playButton').classList.replace('switchUnpressed', 'switchPressed');\n      }\n\n      document.querySelector('#' + id + '_muteButton div.value').innerText = mute;\n      document.querySelector('#' + id + '_playButton div.value').innerText = playMode;\n      document.querySelector('#' + id + '_volume div.value').innerText = volume;\n      document.querySelector('#' + id + '_title div.value').innerText = title;\n      document.querySelector('#' + id + '_artist div.value').innerText = artist;\n      document.querySelector('#' + id + '_album div.value').innerText = album;\n      document.querySelector('#' + id + '_time div.value').innerText = reltime + ' of ' + duration;\n\n      this.upnpcontroller_song_process_rel = this.calculateSongProcessed(reltime, duration);\n      this.traceLog('song_process_rel: ' + this.upnpcontroller_song_process_rel);\n      document.querySelector('#' + id + '_progress').setAttribute('value', this.upnpcontroller_song_process_rel);\n    },\n\n    /**\n     * Internal helper method for remote calls to backend UPNP controller scripts\n     * @param type {String} type of backend controller\n     * @param data {Map|null} additional data to send to the backend\n     * @param callback {Function} callback that should be called in success\n     */\n    __callRemote: function (type, data, callback) {\n      const req = new qx.io.request.Xhr(qx.util.ResourceManager.getInstance().toUri('plugins/upnpcontroller/' + type + '.php'));\n      if (!data) {\n        data = {};\n      }\n      data = Object.assign(data, {\n        player_ip_addr: this.getPlayerIp(),\n        port: this.getPlayerPort()\n      });\n      req.set({\n        requestData: data,\n        accept: 'application/json',\n        method: 'GET'\n      });\n      req.addListener('success', callback, this);\n      req.send();\n    },\n\n    calculateSongProcessed: function (reltime, duration) {\n      if (reltime === undefined || duration === undefined) {\n        return 0;\n      }\n      this.traceLog('calculateSongProcessed');\n\n      const durationParts = duration.split(':');\n      const secondsTotal = Number(durationParts[2]) + Number(durationParts[1]) * 60 + Number(durationParts[0]) * 60 * 60;\n      const reltimeParts = reltime.split(':');\n      const secondsProcessed = Number(reltimeParts[2]) + Number(reltimeParts[1]) * 60 + Number(reltimeParts[0]) * 60 * 60;\n      this.traceLog('secondsTotal    : ' + secondsTotal);\n      this.traceLog('secondsProcessed: ' + secondsProcessed);\n\n      return Math.floor(secondsProcessed * 100 / secondsTotal);\n    },\n\n    callgetplaylists: function () {\n      this.traceLog('click callgetplaylists');\n      const playlist = document.querySelector('#' + this.upnpcontroller_uid + '_getplaylists');\n      const currentValue = playlist.getAttribute('value');\n      const playerIp = this.getPlayerIp();\n      const playerPort = this.getPlayerPort();\n\n      this.traceLog('currentValue: ' + currentValue);\n      this.traceLog('playerPort  : ' + playerPort);\n\n      this.__callRemote('playlists', {}, function (ev) {\n        let data = ev.getTarget().getResponse();\n        try {\n          if (typeof data === 'string') {\n            data = JSON.parse(data);\n          }\n        } catch (e) {\n          this.error(e);\n          return;\n        }\n        let playlists = '';\n\n        this.traceLog('totalMatches: ' + data.totalMatches);\n\n        for (let i = 0; i < data.playLists.length; i++) {\n          playlists += '<a href=\\'' +\n            'plugins/upnpcontroller/selectplaylist.php?player_ip_addr=' + playerIp +\n            '&listurl=' + data.playLists[i].urlenc + '&port=' + playerPort + '\\'>' +\n            data.playLists[i].name + '</a></br>';\n\n          if (this.isTraceFlag() === 'true') {\n            this.debug('name: ' + data.playLists[i].name);\n            this.debug('url: ' + data.playLists[i].url);\n          }\n        }\n\n        if (currentValue !== 'pressed') {\n          document.querySelector('#' + this.upnpcontroller_uid + '_playlistsresult div.value').innerHTML = playlists;\n          playlists.setAttribute('value', 'pressed');\n          playlists.classList.replace('switchUnpressed', 'switchPressed');\n        } else {\n          document.querySelector('#' + this.upnpcontroller_uid + '_playlistsresult div.value').innerText = '';\n          playlists.setAttribute('value', 'unpressed');\n          playlists.classList.replace('switchUnpressed', 'switchPressed');\n        }\n      });\n    },\n\n    callvolumedown: function () {\n      this.traceLog('click callvolumedown');\n      const currentVolume = document.querySelector('#' + this.upnpcontroller_uid + '_volume div.value').innerText;\n\n      this.traceLog('currentVolume: ' + currentVolume);\n      const volume = Number(currentVolume) - 5;\n      this.__callRemote('volume', {volume: volume}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callvolumeup: function () {\n      this.traceLog('click callvolumeup');\n      const currentVolume = document.querySelector('#' + this.upnpcontroller_uid + '_volume div.value').innerText;\n      this.traceLog('currentVolume: ' + currentVolume);\n      const volume = Number(currentVolume) + 5;\n\n      this.__callRemote('volume', {volume: volume}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callNext: function () {\n      this.traceLog('click next');\n      this.__callRemote('next', {}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    callPrev: function () {\n      this.traceLog('click prev');\n      this.__callRemote('prev', {}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n    },\n\n    toggleMute: function () {\n      this.traceLog('click mute');\n      const muteButton = document.querySelector('#' + this.upnpcontroller_uid + '_muteButton');\n      let muteValue = muteButton.querySelector('div.value').innerText;\n\n      this.traceLog('current muteValue: ' + muteValue);\n\n\n      if (muteValue === 0) {\n        muteValue = 1;\n        muteButton.classList.replace('switchUnpressed', 'switchPressed');\n      } else {\n        muteValue = 0;\n        muteButton.classList.replace('switchPressed', 'switchUnpressed');\n      }\n\n      this.__callRemote('mute', {mute: muteValue}, function (data) {\n        this.traceLog('data: ' + data);\n      });\n\n      this.refreshUpnpcontroller();\n    },\n\n    togglePlay: function () {\n      this.traceLog('click play');\n      const playValue = document.querySelector('#' + this.upnpcontroller_uid + '_playButton div.value').innerText;\n      let cmd;\n\n      this.traceLog('current playValue: ' + playValue);\n\n      const playButton = document.querySelector('#' + this.upnpcontroller_uid + '_playButton');\n      if (playValue === 'Play') {\n        cmd = 'pause';\n        playButton.classList.replace('switchUnpressed', 'switchPressed');\n      } else {\n        cmd = 'play';\n        playButton.classList.replace('switchPressed', 'switchUnpressed');\n      }\n\n      this.__callRemote(cmd, {}, function (ev) {\n        this.traceLog('data: ' + ev.getTarget().getResponse());\n      });\n\n      this.refreshUpnpcontroller();\n    },\n\n    traceLog: function(msg) {\n      if (this.isTraceFlag()) {\n        this.debug(msg);\n      }\n    }\n  },\n  \n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/upnpcontroller/upnpcontroller.css');\n    cv.parser.pure.WidgetParser.addHandler('upnpcontroller', cv.plugins.UpnpController);\n    cv.ui.structure.WidgetFactory.registerClass('upnpcontroller', statics);\n  }\n});\n"]}