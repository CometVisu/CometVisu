{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Svg.js"],"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Update","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","parseFormat","parseAddress","members","_getInnerDomString","_onDomReady","plugins","Svg","superclass","prototype","call","ajaxRequest","set","accept","cache","Config","forceReload","addListenerOnce","e","req","getTarget","getActor","innerHTML","getResponseText","send","_update","address","value","defaultValueHandling","line","i","l","element","querySelector","setAttribute","linewidth","defer","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"wWAwBCA,GAAAC,MAAAC,OAAA,kBACCC,OAAOC,GAAAC,GAAOC,UAAAC,KAAAC,eACdC,SAAUL,GAAFC,GAAMK,OAANC,QAOTC,SAWAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACG,IAAKC,EAAEd,GAAAe,OAAUZ,KAAKa,aAAfC,aAAwCC,KAAAR,EAAAC,EAAAC,EAAAC,GAC7Cb,GAAAe,OAAUZ,KAAMa,aAAYG,YAAaT,EAAAC,GACzCX,GAAGe,OAAOZ,KAAKa,aAAaI,aAAYV,EAAKC,GAC7C,OAAGG,IASRO,SACCC,mBAAS,WACP,MAAA,6BAECC,YAHM,WAKPvB,GAAAwB,QAAaC,IAAAC,WAAAC,UAAWJ,YAAAK,KAAAV,wGAEtBW,EAAMC,KACNC,OAAA,aACEC,OAAQhC,GAAAiC,OAAAC,cADML,EAAhBM,gBAAA,UAAA,SAAAC,GAIA,IAAAC,EAAYD,EAAAE,YACIpB,KAAAqB,WACRC,UAAaH,EAAAI,mBACnBvB,MACDW,EAJDa,QAMDC,QAlBM,SAAAC,EAAAC,GAoBPA,EAAS3B,KAAA4B,qBAAkBF,EAAOC,GAChC,IAKME,EACFC,EACAC,EAPJC,EAAahC,KAAAqB,kCAIC,eAKdQ,EAASG,EAAOC,cAAW,SAAMH,EAAW,KACtCI,aAAW,KAAA,EAPHC,EAOiBL,EAASH,EAN1B,GAAA,GADAQ,GAQZN,EAAKK,aAAa,KAAM,EARZC,EAQqBL,EAAKH,EAP1B,GAAA,GADAQ,sBACA,SAAA,SAUdN,EAASG,EAAKC,cAAY,SAA1BH,EAAwC,KAClCI,aAAW,KAAA,GACfL,EAAKK,aAAa,KAAM,MArCrBE,MAjCuB,SAAA9C,GA6E9BR,GAAAe,OAAAZ,KAAAa,aAAAuC,WAAA,MAAAvD,GAAAwB,QAAAC,KACAzB,GAAGC,GAAAC,UAAYsD,cAAaC,cAA5B,MAAiDjD,MA9EnBR,GAAjCwB,QAAAC,IAAAiC,cAAAA","sourcesContent":["/* Svg.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * @author christian523\n * @since 2012\n * @asset(plugins/svg/rollo.svg)\n */\nqx.Class.define('cv.plugins.Svg', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType);\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      cv.parser.pure.WidgetParser.parseAddress(xml, path);\n      return data;\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _getInnerDomString: function() {\n      return '<div class=\"actor\"></div>';\n    },\n\n    _onDomReady: function() {\n      this.base(arguments);\n      const ajaxRequest = new qx.io.request.Xhr(qx.util.ResourceManager.getInstance().toUri('plugins/svg/rollo.svg'));\n      ajaxRequest.set({\n        accept: 'text/plain',\n        cache: !cv.Config.forceReload\n      });\n      ajaxRequest.addListenerOnce('success', function (e) {\n        const req = e.getTarget();\n        const actor = this.getActor();\n        actor.innerHTML = req.getResponseText();\n      }, this);\n      ajaxRequest.send();\n    },\n\n    _update: function(address, value) {\n      value = this.defaultValueHandling(address, value);\n      const element = this.getActor();\n      const linewidth = 3;\n      const space = 1;\n      const total = linewidth + space;\n      const line_qty = 48 / total;\n      let line;\n      let i;\n      let l;\n      for (i = 0, l = Math.floor(value/line_qty); i<=l; i++) {\n        line = element.querySelector('#line'+(i+1));\n        line.setAttribute('y1', 9+total*(i)+((value%line_qty)/line_qty)*total);\n        line.setAttribute('y2', 9+total*(i)+((value%line_qty)/line_qty)*total);\n      }\n      for (i = Math.floor(value/line_qty)+1; i<=line_qty; i++) {\n        line = element.querySelector('#line'+(i+1));\n        line.setAttribute('y1', 9);\n        line.setAttribute('y2', 9);\n      }\n    }\n  },\n\n  defer: function(statics) {\n    // register the parser\n    cv.parser.pure.WidgetParser.addHandler('svg', cv.plugins.Svg);\n    cv.ui.structure.WidgetFactory.registerClass('svg', statics);\n  }\n});\n"]}