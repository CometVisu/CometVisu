{"version":3,"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Update","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","parseFormat","parseAddress","members","_getInnerDomString","_onDomReady","_this","plugins","Svg","superclass","prototype","call","ajaxRequest","io","request","Xhr","util","ResourceManager","getInstance","toUri","set","accept","cache","Config","forceReload","addListenerOnce","e","req","getTarget","getActor","innerHTML","getResponseText","send","_update","address","value","defaultValueHandling","line","i","l","element","line_qty","Math","floor","querySelector","setAttribute","linewidth","defer","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Svg.js"],"sourcesContent":["/* Svg.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * @author christian523\n * @since 2012\n * @asset(plugins/svg/rollo.svg)\n */\nqx.Class.define('cv.plugins.Svg', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse(xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType);\n\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      cv.parser.pure.WidgetParser.parseAddress(xml, path);\n      return data;\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    _getInnerDomString() {\n      return '<div class=\"actor\"></div>';\n    },\n\n    _onDomReady() {\n      super._onDomReady();\n      const ajaxRequest = new qx.io.request.Xhr(qx.util.ResourceManager.getInstance().toUri('plugins/svg/rollo.svg'));\n\n      ajaxRequest.set({\n        accept: 'text/plain',\n        cache: !cv.Config.forceReload\n      });\n\n      ajaxRequest.addListenerOnce('success', e => {\n        const req = e.getTarget();\n        const actor = this.getActor();\n        actor.innerHTML = req.getResponseText();\n      });\n      ajaxRequest.send();\n    },\n\n    _update(address, value) {\n      value = this.defaultValueHandling(address, value);\n      const element = this.getActor();\n      const linewidth = 3;\n      const space = 1;\n      const total = linewidth + space;\n      const line_qty = 48 / total;\n      let line;\n      let i;\n      let l;\n      for (i = 0, l = Math.floor(value / line_qty); i <= l; i++) {\n        line = element.querySelector('#line' + (i + 1));\n        line.setAttribute('y1', 9 + total * i + ((value % line_qty) / line_qty) * total);\n\n        line.setAttribute('y2', 9 + total * i + ((value % line_qty) / line_qty) * total);\n      }\n      for (i = Math.floor(value / line_qty) + 1; i <= line_qty; i++) {\n        line = element.querySelector('#line' + (i + 1));\n        line.setAttribute('y1', 9);\n        line.setAttribute('y2', 9);\n      }\n    }\n  },\n\n  defer(statics) {\n    // register the parser\n    cv.parser.pure.WidgetParser.addHandler('svg', cv.plugins.Svg);\n    cv.ui.structure.WidgetFactory.registerClass('svg', statics);\n  }\n});\n"],"mappings":"wWAuBCA,GAAAC,MAAAC,OAAA,kBACCC,OAAOC,GAAAC,GAAOC,UAAAC,KAAAC,eACdC,QAAQ,CAAEL,GAAGC,GAACK,OAASC,QAOxBC,QAAA,CAWAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACG,IAAKC,EAAAd,GAAAe,OAACZ,KAAKa,aAAaC,aAAYC,KAAAR,EAAAC,EAAAC,EAAAC,GAClCb,GAAAe,OAAUZ,KAAMa,aAAYG,YAAaT,EAAAC,GAEzCX,GAAGe,OAAOZ,KAAKa,aAAaI,aAAYV,EAAKC,GAC7C,OAAGG,C,GASRO,QAAA,CACCC,mBAAS,WACP,iC,EAEAC,YAAC,WAED,IAAAC,EAAWN,KAAGlB,GAAAyB,QAAAC,IAAAC,WAAAC,UAAAL,YAAAM,KAAAX,MACZ,IAAAY,EAAA,IAAAlC,GAAAmC,GAAAC,QAAAC,IAAArC,GAAAsC,KAAAC,gBAAAC,cAAAC,MAAA,0BACAP,EAAMQ,IAAW,CAEjBC,OAAA,aACEC,OAAQxC,GAAAyC,OAAAC,cAEVZ,EAAEa,gBAAA,oBAAAC,GAEF,IAAAC,EAAYD,EAAAE,YACItB,EAAAuB,WACRC,UAAaH,EAAAI,iB,IAErBnB,EAAEoB,M,EAEJC,QAAC,SAAAC,EAAAC,GAEDA,EAAOnC,KAAAoC,qBAAUF,EAAOC,GACtB,IAKME,EACFC,EACAC,EAPJC,EAAaxC,KAAA6B,WAIPY,EAAQ,GAId,IAAKH,EAAA,EAAAC,EAAAG,KAAAC,MAAAR,EAAAM,GAAAH,GAAAC,EAAAD,IAAA,EACLD,EAASG,EAAOI,cAAW,SAAQN,EAAW,KACxCO,aAAW,OAPHC,EAOwBR,EAAIH,EAAOM,IAPnCK,GAQZT,EAAKQ,aAAa,KAAM,EARZC,EAQwBR,EAAMH,EAAQM,EAAYA,EARlDK,E,CAWd,IAAAR,EAAAI,KAAAC,MAAAR,EAAAM,GAAA,EAAAH,GAAAG,EAAAH,IAAA,EACAD,EAASG,EAAKI,cAAc,SAAaN,EAAG,KACtCO,aAAW,QACfR,EAAKQ,aAAa,KAAM,E,IAI9BE,MAAC,SAAAzD,GAGCR,GAAAe,OAAAZ,KAAAa,aAAAkD,WAAA,MAAAlE,GAAAyB,QAAAC,KACA1B,GAAGC,GAAAC,UAAYiE,cAAaC,cAAgB,MAAK5D,E,IAGpDR,GAACyB,QAAAC,IAAA2C,e"}