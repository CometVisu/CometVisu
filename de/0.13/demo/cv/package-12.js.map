{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/RssLog.js"],"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Refresh","Update","Operate","properties","src","check","nullable","transform","apply","database","delay","init","filter","datetime","mode","limit","timeformat","itemoffset","itemack","future","width","height","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseFormat","parseAddress","parseRefresh","default","parseInt","value","parseFloat","query","members","__P_13_0","__P_13_1","__P_13_2","__P_13_3","__P_13_4","__P_13_5","__P_13_6","__P_13_7","__P_13_8","normalizeUrl","parts","util","Uri","parseUri","substring","indexOf","queryKey","getDatabase","_applySrc","match","error","_getInnerDomString","style","getWidth","getHeight","_setupRefreshAction","_timer","event","Timer","getRefresh","refreshRSSlog","_onDomReady","$$domReady","plugins","RssLog","superclass","prototype","call","_update","_this","getDelay","_action","brss","String","htmlStringToDomElement","getPath","label","document","querySelector","title","innerText","popup","PopupHandler","showPopup","content","parent","Tree","getParent","Object","entries","margin","forEach","key_value","stop","stopPropagation","Registration","addListener","getCurrentDomElement","classList","contains","getItemack","once","Model","isWriteAddress","getAddress","addr","overflow","isBig","getSrc","__P_13_9","send","isEnabled","start","requestData","assign","f","getFilter","getLimit","getFuture","io","request","Xhr","ResourceManager","getInstance","toUri","accept","method","ev","getTarget","getResponse","__P_13_11","ul","c","replaceChildren","innerHTML","dummyDiv","rect","getBoundingClientRect","itemheight","Math","round","bottom","top","parentNode","removeChild","widget","displayheight","widgetRect","labelElem","labelElemRect","displayrows","__P_13_10","result","getResponseContentType","__P_13_12","items","getUserData","selector","debug","getAttribute","createElement","itemnum","getMode","dataset","last","Date","strftime","i","idx","item","class","row","rowElem","itemHtml","mappedValue","applyMapping","state","mapping","span","defaultValue2DOM","add","tmp","tags","x","_onTap","__P_13_13","getLink","getTitle","getDescription","replace","entryDate","publishedDate","getTimeformat","toLocaleDateString","toLocaleTimeString","thisday","getCurrentTarget","id","toggle","req","set","u","defer","ScriptLoader","addStyles","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* RssLog.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * @author Michael Markstaller\n * @since 2011\n * @asset(plugins/rsslog/*)\n */\nqx.Class.define('cv.plugins.RssLog', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Refresh, cv.ui.common.Update, cv.ui.common.Operate],\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    src: {\n      check: 'String',\n      nullable: true,\n      transform: 'normalizeUrl',\n      apply: '_applySrc'\n    },\n    database: {\n      check: 'String',\n      nullable: true\n    },\n    delay: {\n      check: 'Number',\n      init: 0\n    },\n    filter: {\n      check: 'String',\n      nullable: true\n    },\n    datetime: {\n      check: 'Boolean',\n      init: true\n    },\n    mode: {\n      check: 'String',\n      init: 'last'\n    },\n    limit: {\n      check: 'Number',\n      init: 0\n    },\n    timeformat: {\n      check: 'String',\n      nullable:true\n    },\n    itemoffset: {\n      check: 'Number',\n      init: 0\n    },\n    itemack: {\n      check: ['modify', 'display', 'disable'],\n      init: 'modify'\n    },\n    future:     {\n      check: 'String',\n      nullable: true\n    },\n    width: {\n      check: 'String',\n      nullable: true\n    },\n    height: {\n      check: 'String',\n      nullable: true\n    }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      cv.parser.pure.WidgetParser.parseAddress(xml, path);\n      cv.parser.pure.WidgetParser.parseRefresh(xml, path);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        src:    {},\n        database: {},\n        delay: { 'default': 0, transform: parseInt },\n        width:  {},\n        height: {},\n        filter: {},\n        datetime:   {\n          'default': true,\n          transform: function(value) {\n            if (typeof value === 'boolean') {\n              return value;\n            }\n            return value === 'true';\n          }\n        },\n        mode:       { 'default': 'last' },\n        limit:      { 'default': 0, transform: parseFloat },\n        timeformat: {},\n        itemack:    { 'default': 'modify'}, // allowed: modify, display, disable\n        future:     {},\n        query:      {}\n      };\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __request: null,\n    __html: null,\n    __wrapper: null,\n    __fixedRequestData: null,\n    __external : false,\n\n    __separatordate: null,\n    __separatoradd: null,\n    __isFuture: null,\n    __separatorprevday: null,\n\n    /**\n     * Strip querystring from URL and store it as Map\n     * @param value {String} URL\n     * @return {String} normalized URL\n     */\n    normalizeUrl: function(value) {\n      this.__fixedRequestData = {};\n      if (value && value.indexOf('?') > 0) {\n        const parts = qx.util.Uri.parseUri(value);\n        value = value.substring(0, value.indexOf('?'));\n        this.__fixedRequestData = parts.queryKey;\n      }\n      if (this.getDatabase()) {\n        this.__fixedRequestData.database = this.getDatabase();\n      }\n      return value;\n    },\n\n    // property apply\n    _applySrc: function(value) {\n      if (value.match(/rsslog_mysql\\.php/)) {\n        this.error('Use of rsslog_mysql.php is depreciated. Please consult the documentation.');\n      }\n      this.__external = !value.match(/rsslog\\.php/) && !value.match(/rsslog_mysql\\.php/) && !value.match(/rsslog_oh\\.php/);\n    },\n\n    _getInnerDomString: function () {\n      let style = '';\n      if (this.getWidth()) {\n        style += 'width:' + this.getWidth() + ';';\n      }\n      if (this.getHeight()) {\n        style += 'height:' + this.getHeight();\n      }\n\n      return '<div class=\"actor rsslogBody\"><div class=\"rsslog_inline\" id=\"rss_' + this.getPath() + '\" style=\"' + style + '\"></div></div>';\n    },\n\n    _setupRefreshAction: function() {\n      this._timer = new qx.event.Timer(this.getRefresh());\n      this._timer.addListener('interval', function () {\n        this.refreshRSSlog();\n      }, this);\n      this._timer.start();\n    },\n\n    _onDomReady: function () {\n      if (!this.$$domReady) {\n        this.base(arguments);\n        qx.event.message.Bus.subscribe('path.' + this.getParentPage().getPath() + '.beforePageChange', this.refreshRSSlog, this);\n        this.__html = '<span class=\"mappedValue\"></span><span>{text}</span>';\n        if (this.getDatetime()) {\n          this.__html = '{date}: ' + this.__html;\n        }\n        this.__wrapper = 'li';\n\n        if (cv.Config.currentPageId === this.getParentPage().getPath()) {\n          this.refreshRSSlog();\n        }\n      }\n    },\n\n    _update: function () {\n      setTimeout(() => this.refreshRSSlog(), this.getDelay());\n    },\n\n    _action: function () {\n      const brss = cv.util.String.htmlStringToDomElement('<div class=\"rsslog_popup\" id=\"rss_' + this.getPath() + '_big\"/>');\n      const label = document.querySelector('#' + this.getPath() + ' .label');\n      const title = label ? (label.innerText || '') : '';\n      const popup = cv.ui.PopupHandler.showPopup('rsslog', {title: title, content: brss});\n      const parent = cv.util.Tree.getParent(brss, 'div', null, 1)[0];\n      Object.entries({height: '90%', width: '90%', margin: 'auto'}).forEach(function(key_value) {\n        parent.style[key_value[0]]=key_value[1];\n      }); // define parent as 100%!\n      if (this._timer) {\n        this._timer.stop();\n      }\n      qx.event.Registration.addListener(brss, 'tap', function(event) {\n        // don't let the popup know about the click, or it will close on touch-displays\n        event.stopPropagation();\n      }, this);\n      qx.event.Registration.addListener(popup, 'close', function () {\n        // reload main data - but only once (popup and popup_background are caught\n        // here).\n        // But delay it so that any change done to the data has a chance to\n        // arrive here.\n\n        if (popup.getCurrentDomElement() && popup.getCurrentDomElement().classList.contains('popup') && this.getItemack() === 'modify') {\n          qx.event.Timer.once(function () {\n            this.refreshRSSlog();\n          }, this, 100);\n          for (let addr in this.getAddress()) {\n            if (!cv.data.Model.isWriteAddress(this.getAddress()[addr])) {\n              continue;\n            }// skip when write flag not set\n            cv.io.BackendConnections.getClient().write(addr, cv.Transform.encode(this.getAddress()[addr], 0));\n          }\n        }\n      }, this);\n      popup.getCurrentDomElement().querySelector('.main').style.overflow = 'auto';\n      this.refreshRSSlog(true);\n    },\n\n    refreshRSSlog: function (isBig) {\n      const src = this.getSrc();\n      if (!src) {\n        this.error('no src given, aborting RSS-Log refresh');\n        return;\n      }\n      if (!this.__request) {\n        if (!this.__external) {\n          this.__refreshRss();\n        } else {\n          this.error('external sources are no longer supported');\n        }\n      }\n      this.__request.setUserData('big', isBig);\n      if (this.__request instanceof qx.io.request.Xhr) {\n        this.__request.send();\n      }\n\n      const refresh = this.getRefresh();\n      if (typeof (refresh) !== 'undefined' && refresh) {\n        // reload regularly\n        if (this._timer && this._timer.isEnabled()) {\n          this._timer.start();\n        }\n      }\n    },\n\n    /**\n     * Fetch data from builtin PHP script\n     */\n    __refreshRss: function() {\n      const src = this.getSrc();\n      const requestData = Object.assign({}, this.__fixedRequestData);\n      if (this.getFilter()) {\n        requestData.f = this.getFilter();\n      }\n      if (this.getLimit()) {\n        requestData.limit = this.getLimit();\n      }\n      if (this.getFuture()) {\n        requestData.future = this.getFuture();\n      }\n      requestData.j = 1;\n      this.__request = new qx.io.request.Xhr(qx.util.ResourceManager.getInstance().toUri(src));\n      this.__request.set({\n        accept: 'application/json',\n        requestData: requestData,\n        method: 'GET'\n      });\n      this.__request.addListener('success', this.__updateRssContent, this);\n      this.__request.addListener('error', function(ev) {\n        this.error('C: #rss_%s, Error: %s, Feed: %s', this.getPath(), ev.getTarget().getResponse(), src);\n      }, this);\n    },\n\n    __prepareContentElement: function(ul, c) {\n      c.replaceChildren(); // delete anything inside\n\n      c.appendChild(ul);\n\n      // get height of one entry, calc max num of display items in widget\n      let displayrows = parseInt(c.dataset['last_rowcount'], 10) || 0;\n      ul.innerHTML = '<li class=\"rsslogRow odd\" id=\"dummydiv\">.</li>';\n      const dummyDiv = c.querySelector('#dummydiv');\n      const rect = dummyDiv.getBoundingClientRect();\n      const itemheight = Math.round(rect.bottom - rect.top);\n      dummyDiv.parentNode.removeChild(dummyDiv);\n      if (itemheight !== 0) {\n        const widget = c.parentNode.parentNode; // get the parent widget\n        const widgetRect = widget.getBoundingClientRect();\n        let displayheight = Math.round(widgetRect.bottom - widgetRect.top);\n        const labelElem = widget.querySelector('.label');\n        if (labelElem) {\n          // max. height of actor is widget-label(if exists)\n          const labelElemRect = labelElem.getBoundingClientRect();\n          displayheight -= Math.round(labelElemRect.bottom - labelElemRect.top);\n        }\n        displayrows = Math.floor(displayheight / itemheight);\n      }\n      c.dataset.last_rowcount = displayrows;\n      return displayrows;\n    },\n\n    __updateRssContent: function(ev) {\n      const result = ev.getTarget().getResponse();\n      if (typeof result === 'string') {\n        // no json -> error\n        this.error('Expected JSON, but got response MIME:', ev.getTarget().getResponseContentType());\n        this.error(result);\n        return;\n      }\n      this.__updateContent(result.responseData.feed.entries);\n    },\n\n    __updateContent: function(items) {\n      const isBig = this.__request.getUserData('big');\n      const selector = '#rss_' + this.getPath() + (isBig === true ? '_big' : '');\n      const c = document.querySelector(selector);\n      const itemack = isBig === true ? this.getItemack() : (this.getItemack() === 'modify' ? 'display' : this.getItemack());\n\n      this.debug('ID: '+c.getAttribute('id')+', Feed: '+this.getSrc());\n\n      const ul = document.createElement('ul');\n      const displayrows = this.__prepareContentElement(ul, c);\n\n      const itemnum = items.length;\n      this.debug('C: #'+this.getPath()+', '+itemnum+' element(s) found, '+displayrows+' displayrow(s) available');\n\n      let itemoffset = 0; // correct if mode='last' or itemnum<=displayrows\n\n      if (itemnum > displayrows) { // no need to check mode if items are less than rows\n        if (this.getMode() === 'first') {\n          itemoffset = itemnum - displayrows;\n        }\n        if (this.getMode() === 'rollover') {\n          itemoffset = parseInt(c.dataset.itemoffset, 10) || 0;\n          if (itemoffset === itemnum) {\n            itemoffset = 0;\n          }\n          c.dataset.itemoffset = itemoffset + 1;\n        }\n      }\n\n      let row = 'rsslogodd';\n      let last = itemoffset + displayrows;\n      last = (last > itemnum) ? itemnum : last;\n\n      this.__separatordate = new Date().strftime('%d');\n      this.__separatoradd = false;\n      this.__separatorprevday = false;\n      this.__isFuture = false;\n\n      for (let i = itemoffset; i < last; i++) {\n        this.debug('C: #'+this.getPath()+', processing item: '+i+' of '+itemnum);\n        let idx = i;\n        idx = (i >= itemnum) ? (idx -= itemnum) : idx;\n\n        const item = items[idx];\n        const itemHtml = this.__getItemHtml(item, isBig);\n\n        const rowElem = qx.dom.Element.create('li', {'class': 'rsslogRow ' + row});\n        rowElem.innerHTML = itemHtml;\n\n        if (item.mapping && item.mapping !== '') {\n          const mappedValue = this.applyMapping(itemack === 'disable' ? 0 : item.state, item.mapping);\n          const span = rowElem.querySelector('.mappedValue');\n          this.defaultValue2DOM(mappedValue, span);\n        }\n        if (this.__separatoradd && idx !== 0) {\n          rowElem.classList.add('rsslog_separator');\n          this.__separatorprevday = true;\n        } else {\n          this.__separatorprevday = false;\n        }\n\n        if (this.__separatorprevday === true) {\n          rowElem.classList.add('rsslog_prevday');\n        }\n\n        if (this.__isFuture) {\n          rowElem.classList.add((row === 'rsslogodd') ? 'rsslog_futureeven' : 'rsslog_futureodd');\n        }\n\n        rowElem.dataset.id = item.id;\n        rowElem.dataset.mapping = item.mapping;\n        if (item.tags) {\n          const tmp = rowElem.querySelector('span');\n          if (Array.isArray(item.tags)) {\n            const tags = item.tags.filter(x => x !== '');\n            if (tags.length > 0) {\n              tmp.classList.add.apply(tmp.classList, item.tags);\n            }\n          } else {\n            tmp.classList.add(item.tags);\n          }\n        }\n        if (item.state === '1' && itemack !== 'disable') {\n          rowElem.classList.add('rsslog_ack');\n        }\n\n        if (itemack === 'modify') {\n          qx.event.Registration.addListener(rowElem, 'tap', this._onTap, this);\n        }\n        ul.appendChild(rowElem);\n\n        // Alternate row classes\n        row = (row === 'rsslogodd') ? 'rsslogeven' : 'rsslogodd';\n      }\n    },\n\n    __getItemHtml: function(item, isBig) {\n      let itemHtml = '';\n      if (!this.__external) {\n        itemHtml = this.__html;\n\n        itemHtml = itemHtml.replace(/\\{text\\}/, item.content);\n        const entryDate = new Date(item.publishedDate);\n        if (entryDate) {\n          itemHtml = (this.getTimeformat())\n            ? (itemHtml.replace(/\\{date\\}/, entryDate.strftime(this.getTimeformat()) + '&nbsp;'))\n            : (itemHtml.replace(/\\{date\\}/, entryDate.toLocaleDateString() + ' ' + entryDate.toLocaleTimeString() + '&nbsp;'));\n          const thisday = entryDate.strftime('%d');\n          this.__separatoradd = ((this.__separatordate > 0) && (this.__separatordate !== thisday));\n          this.__separatordate = thisday;\n          this.__isFuture = (entryDate > new Date());\n        } else {\n          itemHtml = itemHtml.replace(/\\{date\\}/, '');\n        }\n      } else {\n        if (isBig) {\n          return '<b><a href=\"' + item.getLink() + '\">' + item.getTitle() + '</a></b><br/>' + item.getDescription();\n        } \n          return '<b>' + item.getTitle() + '</b><br/>' + item.getDescription();\n      }\n\n      return itemHtml;\n    },\n\n    _onTap: function(ev) {\n      const item = ev.getCurrentTarget();\n\n      const id = item.dataset.id;\n      const mapping = item.dataset.mapping;\n      item.classList.toggle('rsslog_ack');\n      const state = +item.classList.contains('rsslog_ack'); // the new state is the same as hasClass\n      if (mapping && mapping !== '') {\n        const mappedValue = this.applyMapping(state, mapping);\n        let span = item.querySelector('.mappedValue');\n        span.replaceChildren(); // delete anything inside\n        this.defaultValue2DOM(mappedValue, span);\n      }\n      const req = new qx.io.request.Xhr(this.__request.getUrl());\n      req.set({\n        method: 'GET',\n        requestData: Object.assign({}, this.__fixedRequestData, {\n          'u': id,\n          'state': state\n        }),\n        accept: 'application/json'\n      });\n      req.send();\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/rsslog/rsslog.css');\n    cv.parser.pure.WidgetParser.addHandler('rsslog', cv.plugins.RssLog);\n    cv.ui.structure.WidgetFactory.registerClass('rsslog', statics);\n  }\n});\n"]}