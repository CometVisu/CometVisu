{"version":3,"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Update","Operate","properties","pagejumpTarget","check","nullable","gaugeType","subtype","gType","init","titleString","unitString","unitStringVisible","size","width","height","minValue","maxValue","frameDesign","backgroundColor","foregroundType","pointerType","pointerColor","lcdColor","lcdVisible","lcdDecimals","ledVisible","ledColor","valueColor","trendVisible","thresholdRising","threshold","apply","thresholdVisible","autoScroll","valuesNumeric","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","getAttributeToPropertyMappings","parseFormat","parseAddress","makeAddressListFn","target","type","default","transform","value","parseFloat","framedesign","background","parseInt","src","mode","variant","members","__P_11_0","__P_11_1","_getInnerDomString","getPagejumpTarget","getPath","_onDomReady","additional","getSubtype","steelseries","GaugeType","undefined","getFrameDesign","FrameDesign","getBackgroundColor","BackgroundColor","getValueColor","ColorDef","RED","ForegroundType","TYPE1","PointerType","LcdColor","STANDARD","LedColor","RED_LED","params","Object","assign","Model","getInstance","getWidgetData","getGType","plugins","Gauge","superclass","prototype","call","getValueElement","getDomElement","querySelector","_applyThreshold","setThresholdVisible","_processIncomingValue","address","defaultUpdate","handleUpdate","getAddress","variantInfo","gaugeElement","setValueAnimatedAverage","setValue","setTrend","trend","TrendState","UP","DOWN","STEADY","setThreshold","setMinValue","setMaxValue","setValueAnimatedLatest","setValueAnimated","_action","Application","structureController","scrollToPage","defer","loader","util","ScriptLoader","addStyles","addScripts","addHandler","WidgetFactory","registerClass","$$dbClassInfo"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/Gauge.js"],"sourcesContent":["/* Gauge.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * This plugins integrates Gauge (in canvas) into the visualization\n *\n * @author NetFritz [NetFritz at gmx dot de]\n * @since 0.8.1\n *\n * @ignore(steelseries.*)\n * @asset(plugins/gauge/gauge.css)\n * @asset(plugins/gauge/dep/steelseries.js)\n * @asset(plugins/gauge/dep/tween.js)\n */\nqx.Class.define('cv.plugins.Gauge', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Update, cv.ui.common.Operate],\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    pagejumpTarget: { check: 'String', nullable: true },\n    gaugeType: { check: 'String', nullable: true },\n    subtype: { check: 'String', nullable: true },\n    gType: { check: 'String', init: 'Radial' },\n    titleString: { check: 'String', nullable: true },\n    unitString: { check: 'String', nullable: true },\n    unitStringVisible: { check: 'Boolean', init: false },\n    size: { check: 'Number', init: 150 },\n    width: { check: 'Number', init: 320 },\n    height: { check: 'Number', init: 140 },\n    minValue: { check: 'Number', init: 0 },\n    maxValue: { check: 'Number', init: 100 },\n    frameDesign: { check: 'String', nullable: true },\n    backgroundColor: { check: 'String', nullable: true },\n    foregroundType: { check: 'String', nullable: true },\n    pointerType: { check: 'String', nullable: true },\n    pointerColor: { check: 'String', nullable: true },\n    lcdColor: { check: 'String', nullable: true },\n    lcdVisible: { check: 'Boolean', init: false },\n    lcdDecimals: { check: 'Number', nullable: true },\n    ledVisible: { check: 'Boolean', init: false },\n    ledColor: { check: 'String', nullable: true },\n    valueColor: { check: 'String', nullable: true },\n    trendVisible: { check: 'Boolean', init: false },\n    thresholdRising: { check: 'Boolean', init: false },\n    threshold: {\n      check: 'Number',\n      init: 0,\n      apply: '_applyThreshold'\n    },\n\n    thresholdVisible: { check: 'Boolean', init: false },\n    autoScroll: { check: 'Boolean', init: false },\n    valuesNumeric: { check: 'Boolean', init: false }\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse(xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(\n        this,\n        xml,\n        path,\n        flavour,\n        pageType,\n        this.getAttributeToPropertyMappings()\n      );\n\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      cv.parser.pure.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n\n      return data;\n    },\n\n    getAttributeToPropertyMappings() {\n      return {\n        target: { target: 'pagejumpTarget' },\n        type: { target: 'gType', default: 'Radial' },\n        subtype: {},\n        titleString: {},\n        unitString: {},\n        unitStringVisible: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        size: { default: 150, transform: parseFloat },\n        width: { default: 320, transform: parseFloat },\n        height: { default: 140, transform: parseFloat },\n        minValue: { default: 0, transform: parseFloat },\n        maxValue: { default: 100, transform: parseFloat },\n        framedesign: { target: 'frameDesign' },\n        background: { target: 'backgroundColor' },\n        lcdVisible: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        lcdDecimals: { default: 0, transform: parseInt },\n        ledVisible: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        valueColor: {},\n        trendVisible: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        thresholdRising: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        threshold: { default: 0, transform: parseFloat },\n        autoScroll: {\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        valuesNumeric: {\n          transform(value) {\n            return value === 'true';\n          }\n        }\n      };\n    },\n\n    makeAddressListFn(src, transform, mode, variant) {\n      return [true, variant];\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __gaugeElement: null,\n    __updateQueue: null,\n\n    _getInnerDomString() {\n      return (\n        '<div class=\"actor' +\n        (this.getPagejumpTarget() ? 'clickable' : '') +\n        '\"><canvas id=\"gauge_' +\n        this.getPath() +\n        '\"></canvas></div>'\n      );\n    },\n\n    // overridden\n    _onDomReady() {\n      const additional = {\n        gaugeType: this.getSubtype() ? steelseries.GaugeType[this.getSubtype()] : undefined,\n        frameDesign: this.getFrameDesign() ? steelseries.FrameDesign[this.getFrameDesign()] : undefined,\n        backgroundColor: this.getBackgroundColor() ? steelseries.BackgroundColor[this.getBackgroundColor()] : undefined,\n        valueColor: this.getValueColor() ? steelseries.ColorDef[this.getValueColor()] : steelseries.ColorDef.RED,\n        foregroundType: steelseries.ForegroundType.TYPE1,\n        pointerType: steelseries.PointerType.TYPE1,\n        pointerColor: steelseries.ColorDef.RED,\n        lcdColor: steelseries.LcdColor.STANDARD,\n        ledColor: steelseries.LedColor.RED_LED\n      };\n\n      const params = Object.assign({}, cv.data.Model.getInstance().getWidgetData(this.getPath()), additional);\n\n      this.__gaugeElement = new steelseries[this.getGType()]('gauge_' + this.getPath(), params);\n\n      super._onDomReady();\n    },\n\n    // overridden\n    getValueElement() {\n      return this.getDomElement().querySelector('#gauge_' + this.getPath());\n    },\n\n    // property apply\n    _applyThreshold(value) {\n      if (value > 0) {\n        this.setThresholdVisible(true);\n      }\n    },\n\n    // overridden\n    _processIncomingValue(address, data) {\n      if (address && data) {\n        return this.defaultUpdate(address, data, this.getDomElement(), true, this.getPath());\n      }\n      return null;\n    },\n\n    /**\n     * Handle the incoming data\n     * @param value {var} Processed incoming value\n     * @param address {String} source address of the value\n     */\n    handleUpdate(value, address) {\n      if (!address || value === undefined) {\n        return;\n      }\n\n      const variant = this.getAddress()[address].variantInfo;\n      const gaugeElement = this.__gaugeElement;\n      if (gaugeElement) {\n        switch (variant) {\n          case 'average':\n            if (gaugeElement.setValueAnimatedAverage) {\n              gaugeElement.setValueAnimatedAverage(value);\n            }\n            break;\n          case 'setValue':\n            if (gaugeElement.setValue) {\n              gaugeElement.setValue(value);\n            }\n            break;\n          case 'trend':\n            if (gaugeElement.setTrend) {\n              let trend;\n              if (value > 0) {\n                trend = steelseries.TrendState.UP;\n              } else if (value < 0) {\n                trend = steelseries.TrendState.DOWN;\n              } else {\n                trend = steelseries.TrendState.STEADY;\n              }\n              gaugeElement.setTrend(trend);\n            }\n            break;\n          case 'threshold':\n            if (gaugeElement.setThreshold) {\n              gaugeElement.setThreshold(value);\n            }\n            break;\n          case 'min':\n            if (gaugeElement.setMinValue) {\n              gaugeElement.setMinValue(value);\n            }\n            break;\n          case 'max':\n            if (gaugeElement.setMaxValue) {\n              gaugeElement.setMaxValue(value);\n            }\n            break;\n          default:\n            if (gaugeElement.setValueAnimatedLatest) {\n              gaugeElement.setValueAnimatedLatest(value);\n            }\n            if (gaugeElement.setValueAnimated) {\n              gaugeElement.setValueAnimated(value);\n            }\n        }\n      }\n    },\n\n    // overridden\n    _action() {\n      if (this.getPagejumpTarget()) {\n        cv.Application.structureController.scrollToPage(this.getPagejumpTarget());\n      }\n    }\n  },\n\n  defer(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/gauge/gauge.css');\n    loader.addScripts(['plugins/gauge/dep/tween.js', 'plugins/gauge/dep/steelseries.js']);\n\n    cv.parser.pure.WidgetParser.addHandler('gauge', cv.plugins.Gauge);\n    cv.ui.structure.WidgetFactory.registerClass('gauge', statics);\n  }\n});\n"],"mappings":"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","ignoreList":[]}