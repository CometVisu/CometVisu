{"version":3,"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","Update","construct","props","name1","singlePhase","name2","name3","this","setCurve","isSinglePhase","setupCurve","statics","CURRENT","VOLTAGE","limitEN50160_1999","limitEN61000_3_2","referenceSin","fixLimits","entry","index","array","lastShifted","last","length","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","getAttributeToPropertyMappings","parseFormat","parseAddress","makeAddressListFn","type","target","transform","value","plugins","PowerSpectrum","singlephase","limitname","default","spectrumonly","showlegend","limitcolor","color1","color2","color3","src","mode","variant","properties","displayType","check","init","spectrum","limitName","curve","showCurve","showLegend","current","limitColor","members","__P_14_0","__P_14_1","_getInnerDomString","actor","_onDomReady","superclass","prototype","call","diagramCurve","isShowCurve","$","getPath","empty","optionsCurve","colors","legend","show","isShowLegend","xaxis","yaxis","diagramSpectrum","optionsSpectrum","series","bars","fill","fillColor","lineWidth","align","barWidth","plot","createDatasetCurve","createDatasetSpectrum","bind","layout","ResizeHandler","states","addListenerOnce","_update","ga","undefined","phase","addressInfo","variantInfo","Transform","encode","getCurrent","substr","parseInt","factor","values","i","getSpectrum","updateCurve","getCurve","setupSpectrum","offset","ret_val","push","input","inp","out","shift","Math","PI","phi","cos","j","label","color","getLimitName","getDisplayType","lines","steps","getName1","getName2","getName3","defer","util","ScriptLoader","getInstance","addScripts","addHandler","WidgetFactory","registerClass","forEach","time","sin","$$dbClassInfo"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/PowerSpectrum.js"],"sourcesContent":["/* PowerSpectrum.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * The powerspectrum plugin and widget creates a graph to show the power\n * spectral data that the Enertex Smartmeter can send on the KNX bus.\n *\n * @author Christian Mayer\n * @since 0.10.0\n * @asset(plugins/diagram/dep/flot/jquery.flot.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.canvas.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.resize.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.navigate.min.js)\n */\nqx.Class.define('cv.plugins.PowerSpectrum', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct(props) {\n    if (!props.name1) {\n      props.name1 = props.singlePhase === true ? 'L' : 'L1';\n    }\n    if (!props.name2) {\n      props.name2 = 'L2';\n    }\n    if (!props.name3) {\n      props.name3 = 'L3';\n    }\n    super(props);\n\n    // some initializations\n    this.setSpectrum(\n      this.isSinglePhase()\n        ? [this.setupSpectrum()]\n        : [this.setupSpectrum(-0.26), this.setupSpectrum(0), this.setupSpectrum(0.26)]\n    );\n\n    this.setCurve(\n      this.isSinglePhase() ? [this.setupCurve()] : [this.setupCurve(), this.setupCurve(), this.setupCurve()]\n    );\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    // Constants\n    CURRENT: 0,\n    VOLTAGE: 1,\n    limitEN50160_1999: [\n      [2, 0.02],\n      [3, 0.05],\n      [4, 0.01],\n      [5, 0.06],\n      [6, 0.005],\n      [7, 0.05],\n      [8, 0.005],\n      [9, 0.015],\n      [10, 0.005],\n      [11, 0.035],\n      [12, 0.005],\n      [13, 0.03],\n      [14, 0.005],\n      [15, 0.005],\n      [16, 0.005],\n      [17, 0.02],\n      [18, 0.005],\n      [19, 0.015],\n      [20, 0.005],\n      [21, 0.005],\n      [22, 0.005],\n      [23, 0.015],\n      [24, 0.005],\n      [25, 0.015]\n    ],\n\n    // limit for voltage in ratio\n    limitEN61000_3_2: [\n      [2, 1.62],\n      [3, 3.45],\n      [4, 0.65],\n      [5, 1.71],\n      [6, 0.45],\n      [7, 1.16],\n      [8, 0.35],\n      [9, 0.6],\n      [10, 0.28],\n      [11, 0.5],\n      [12, 0.233],\n      [13, 0.32],\n      [14, 0.2],\n      [15, 0.23],\n      [16, 0.175],\n      [17, 0.203],\n      [18, 0.155],\n      [19, 0.182],\n      [20, 0.14],\n      [21, 0.164],\n      [22, 0.127],\n      [23, 0.15],\n      [24, 0.117],\n      [25, 0.139]\n    ],\n\n    // limit for current in Ampere\n    referenceSin: [[], [], []],\n\n    // fix limits for better displaying\n    fixLimits(entry, index, array) {\n      array[index][0] -= 0.5;\n    },\n    lastShifted(array) {\n      const last = array[array.length - 1];\n      return [last[0] + 1, last[1]];\n    },\n\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse(xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(\n        this,\n        xml,\n        path,\n        flavour,\n        pageType,\n        this.getAttributeToPropertyMappings()\n      );\n\n      cv.parser.pure.WidgetParser.parseFormat(xml, path);\n      cv.parser.pure.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n\n      return data;\n    },\n\n    getAttributeToPropertyMappings() {\n      return {\n        type: {\n          target: 'displayType',\n          transform(value) {\n            return value === 'current' ? cv.plugins.PowerSpectrum.CURRENT : cv.plugins.PowerSpectrum.VOLTAGE;\n          }\n        },\n\n        singlephase: {\n          target: 'singlePhase',\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        limitname: {\n          target: 'limitName',\n          default: 'limit'\n        },\n\n        name1: {},\n        name2: {},\n        name3: {},\n        spectrumonly: {\n          target: 'showCurve',\n          transform(value) {\n            return value !== 'true';\n          }\n        },\n\n        showlegend: {\n          target: 'showLegend',\n          transform(value) {\n            return value === 'true';\n          }\n        },\n\n        limitcolor: {\n          target: 'limitColor',\n          default: '#edc240' // default directly from flot code\n        },\n        color1: {\n          default: '#afd8f8'\n        },\n\n        color2: {\n          default: '#cb4b4b'\n        },\n\n        color3: {\n          default: '#4da74d'\n        }\n      };\n    },\n\n    makeAddressListFn(src, transform, mode, variant) {\n      if (!variant) {\n        variant = 'spectrum'; // the default\n      }\n      return [true, variant];\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    displayType: {\n      check: [0, 1],\n      init: 1\n    },\n\n    singlePhase: {\n      check: 'Boolean',\n      init: false\n    },\n\n    spectrum: {\n      check: 'Array',\n      init: []\n    },\n\n    limitName: {\n      check: 'String',\n      init: 'limit'\n    },\n\n    name1: {\n      check: 'String',\n      init: 'L1'\n    },\n\n    name2: {\n      check: 'String',\n      init: 'L2'\n    },\n\n    name3: {\n      check: 'String',\n      init: 'L3'\n    },\n\n    curve: {\n      check: 'Array',\n      init: []\n    },\n\n    showCurve: {\n      check: 'Boolean',\n      init: false\n    },\n\n    showLegend: {\n      check: 'Boolean',\n      init: false\n    },\n\n    current: {\n      check: 'Array',\n      init: []\n    },\n\n    limitColor: {\n      check: 'Color',\n      init: '#edc240'\n    },\n\n    color1: {\n      check: 'Color',\n      init: '#afd8f8'\n    },\n\n    color2: {\n      check: 'Color',\n      init: '#cb4b4b'\n    },\n\n    color3: {\n      check: 'Color',\n      init: '#4da74d'\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __plot: null,\n    __plotCurve: null,\n\n    _getInnerDomString() {\n      // create the actor\n      let actor = '<div class=\"actor clickable\">';\n      if (this.isShowCurve()) {\n        actor += '<div class=\"diagram_inline curve\">loading...</div>';\n      }\n      actor += '<div class=\"diagram_inline spectrum\">loading...</div></div>';\n      return actor;\n    },\n\n    _onDomReady() {\n      super._onDomReady();\n      const colors = [this.getLimitColor(), this.getColor1(), this.getColor2(), this.getColor3()];\n\n      const diagramCurve = this.isShowCurve() && $('#' + this.getPath() + ' .actor div.curve').empty();\n      const optionsCurve = this.isShowCurve() && {\n        colors: colors,\n        legend: {\n          show: this.isShowLegend()\n        },\n\n        xaxis: {\n          show: false\n        },\n\n        yaxis: {\n          show: false\n        }\n      };\n\n      const diagramSpectrum = $('#' + this.getPath() + ' .actor div.spectrum').empty();\n      const optionsSpectrum = {\n        colors: colors,\n        series: {\n          bars: {\n            show: true,\n            fill: 1,\n            fillColor: null,\n            lineWidth: 0\n          }\n        },\n\n        bars: {\n          align: 'center',\n          barWidth: this.isSinglePhase() ? 0.75 : 0.25\n        },\n\n        legend: {\n          show: this.isShowLegend()\n        },\n\n        xaxis: {\n          show: false\n        },\n\n        yaxis: {\n          show: false\n        }\n      };\n\n      const init = function () {\n        this.__plotCurve = this.isShowCurve() && $.plot(diagramCurve, this.createDatasetCurve(), optionsCurve);\n        this.__plot = $.plot(diagramSpectrum, this.createDatasetSpectrum(), optionsSpectrum);\n      }.bind(this);\n\n      // check if sizes are set yet, otherwise wait some time\n      if (cv.ui.structure.pure.layout.ResizeHandler.states.isPageSizeInvalid()) {\n        cv.ui.structure.pure.layout.ResizeHandler.states.addListenerOnce('changePageSizeInvalid', init);\n      } else {\n        init();\n      }\n    },\n\n    _update(ga, data) {\n      if (ga === undefined) {\n        return;\n      }\n      const addressInfo = this.getAddress()[ga];\n\n      let phase;\n      if (addressInfo.variantInfo[0] === 'I') {\n        phase = this.isSinglePhase() ? 1 : +(addressInfo.variantInfo[1] || 1);\n        const value = cv.Transform.encode(addressInfo, data);\n        this.getCurrent()[phase - 1] = value / 1000; // transform mA to A\n      } else if (addressInfo.variantInfo.substr(0, 8) === 'spectrum' && data.length === 28) {\n        // sanity check for 14 bytes\n        phase = this.isSinglePhase() ? 1 : +(addressInfo.variantInfo[8] || 1);\n        const index = parseInt(data.substr(0, 2), 16);\n        const factor = this.getCurrent()[phase - 1] || 1;\n        const values = [];\n\n        for (let i = 0; i < 13; i++) {\n          if (index + i < 2) {\n            continue;\n          }\n          values[i] = Math.pow(10, (parseInt(data.substr(i * 2 + 2, 2), 16) - 253) / 80);\n\n          this.getSpectrum()[phase - 1][index + i - 2][1] = values[i] * factor;\n        }\n        this.__plot.setData(this.createDatasetSpectrum());\n        this.__plot.draw();\n\n        if (this.__plotCurve) {\n          this.updateCurve(this.getSpectrum(), this.getCurve(), phase - 1);\n          this.__plotCurve.setData(this.createDatasetCurve());\n          this.__plotCurve.draw();\n        }\n      }\n    },\n\n    /**\n     * Setup helper\n     */\n    setupCurve() {\n      return [\n        [0, 0],\n        [0.4, 0],\n        [0.8, 0],\n        [1.2, 0],\n        [1.6, 0],\n        [2, 0],\n        [2.4, 0],\n        [2.8, 0],\n        [3.2, 0],\n        [3.6, 0],\n        [4, 0],\n        [4.4, 0],\n        [4.8, 0],\n        [5.2, 0],\n        [5.6, 0],\n        [6, 0],\n        [6.4, 0],\n        [6.8, 0],\n        [7.2, 0],\n        [7.6, 0],\n        [8, 0],\n        [8.4, 0],\n        [8.8, 0],\n        [9.2, 0],\n        [9.6, 0],\n        [10, 0],\n        [10.4, 0],\n        [10.8, 0],\n        [11.2, 0],\n        [11.6, 0],\n        [12, 0],\n        [12.4, 0],\n        [12.8, 0],\n        [13.2, 0],\n        [13.6, 0],\n        [14, 0],\n        [14.4, 0],\n        [14.8, 0],\n        [15.2, 0],\n        [15.6, 0],\n        [16, 0],\n        [16.4, 0],\n        [16.8, 0],\n        [17.2, 0],\n        [17.6, 0],\n        [18, 0],\n        [18.4, 0],\n        [18.8, 0],\n        [19.2, 0],\n        [19.6, 0]\n      ];\n    },\n    setupSpectrum(offset) {\n      const ret_val = [];\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n      for (let i = 2; i < 52; i++) {\n        ret_val.push([i + offset, 0]);\n      }\n      return ret_val;\n    },\n\n    /**\n     * Convert a spectrum to a curve\n     * @param input\n     * @param target\n     * @param phase\n     */\n    updateCurve(input, target, phase) {\n      const inp = input[phase];\n      const out = target[phase];\n      const shift = ((phase * 2) / 3 - 0.5) * Math.PI;\n\n      for (let i = 0; i < 50; i++) {\n        const phi = (i * Math.PI) / 25;\n        let value = Math.cos(phi + shift); // the base with 50 Hz\n\n        // the harmonics\n        for (let j = 2; j < 50; j++) {\n          value += Math.cos((phi + shift) * j) * inp[j][1];\n        }\n\n        out[i][1] = value;\n      }\n    },\n\n    /**\n     * Little helper to setup the Flot dataset structure.\n     */\n    createDatasetCurve() {\n      return this.isSinglePhase()\n        ? [\n            {\n              label: null,\n              data: this.self(arguments).referenceSin[0],\n              color: 13\n            },\n\n            // trick flot to automatically make color darker\n            { label: 'L', data: this.getCurve()[0], color: 1 }\n          ]\n        : [\n            {\n              label: null,\n              data: this.self(arguments).referenceSin[0],\n              color: 13\n            },\n\n            {\n              label: null,\n              data: this.self(arguments).referenceSin[1],\n              color: 14\n            },\n\n            {\n              label: null,\n              data: this.self(arguments).referenceSin[2],\n              color: 15\n            },\n\n            { label: 'L1', data: this.getCurve()[0], color: 1 },\n            { label: 'L2', data: this.getCurve()[1], color: 2 },\n            { label: 'L3', data: this.getCurve()[2], color: 3 }\n          ];\n    },\n\n    /**\n     * Little helper to setup the Flot dataset structure.\n     */\n    createDatasetSpectrum() {\n      return this.isSinglePhase()\n        ? [\n            {\n              label: this.getLimitName(),\n              data:\n                this.getDisplayType() === this.self(arguments).VOLTAGE\n                  ? this.self(arguments).limitEN50160_1999\n                  : this.self(arguments).limitEN61000_3_2,\n              bars: { show: false },\n              lines: { steps: true },\n              color: 0\n            },\n\n            { label: this.getName1(), data: this.getSpectrum()[0], color: 1 }\n          ]\n        : [\n            {\n              label: this.getLimitName(),\n              data:\n                this.getDisplayType() === this.self(arguments).VOLTAGE\n                  ? this.self(arguments).limitEN50160_1999\n                  : this.self(arguments).limitEN61000_3_2,\n              bars: { show: false },\n              lines: { steps: true },\n              color: 0\n            },\n\n            { label: this.getName1(), data: this.getSpectrum()[0], color: 1 },\n            { label: this.getName2(), data: this.getSpectrum()[1], color: 2 },\n            { label: this.getName3(), data: this.getSpectrum()[2], color: 3 }\n          ];\n    }\n  },\n\n  defer(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts([\n      'plugins/diagram/dep/flot/jquery.flot.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.canvas.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.resize.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.navigate.min.js'\n    ]);\n\n    cv.parser.pure.WidgetParser.addHandler('powerspectrum', cv.plugins.PowerSpectrum);\n\n    cv.ui.structure.WidgetFactory.registerClass('powerspectrum', statics);\n\n    // init\n    statics.limitEN50160_1999.forEach(statics.fixLimits);\n    statics.limitEN50160_1999.push(statics.lastShifted(statics.limitEN50160_1999));\n\n    statics.limitEN61000_3_2.forEach(statics.fixLimits);\n    statics.limitEN61000_3_2.push(statics.lastShifted(statics.limitEN61000_3_2));\n\n    // fill reference\n    for (let phi = 0; phi < 50; phi++) {\n      const time = (phi * 20) / 50; // time in milliseconds\n\n      statics.referenceSin[0].push([time, Math.sin((phi * Math.PI) / 25)]);\n      statics.referenceSin[1].push([time, Math.sin(((phi + 50 / 3) * Math.PI) / 25)]);\n\n      statics.referenceSin[2].push([time, Math.sin(((phi + 100 / 3) * Math.PI) / 25)]);\n    }\n  }\n});\n"],"mappings":"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"}