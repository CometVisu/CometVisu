{"version":3,"names":["qx","Class","define","extend","core","Object","type","construct","constructor","call","this","__P_22_0","cv","notifications","Router","getInstance","sse","client","getCurrentTransport","subscribe","_onNotification","members","__P_22_1","_openSettings","_createSettings","_this","settingsRoot","dom","Element","create","id","html","insertAfter","document","querySelector","ui","NotificationCenter","getRootElementId","util","IconTools","svgKUF","style","command","Command","show","insertBegin","button","event","Registration","addListener","flex","e","data","error","destruct","_disposeObjects","defer","statics","Timer","once","plugins","openhab","Openhab","$$dbClassInfo","Bootstrap","executePendingDefers","Widget","_setLayout","layout","VBox","set","padding","backgroundColor","textColor","getBounds","getContentElement","setStyle","addListenerOnce","__P_23_0","__P_23_1","_initConfigRestClient","properties","modified","check","init","__P_23_2","__P_23_3","__P_23_4","__P_23_5","_store","__P_23_6","_initStore","pid","_this2","serviceDesc","get","method","url","delete","put","service","io","rest","Resource","BackendConnections","getClientByType","store","Rest","configureRequest","req","setRequestHeader","authorize","manipulateData","n","getOwnPropertyNames","forEach","key","replace","prototype","hasOwnProperty","autoDownload","JSON","parse","Serializer","toJson","getModel","_saveConfig","close","_this3","description","config","ev","_createForm","getRequest","getResponse","Array","isArray","parameters","_createChildControl","form","getChildControl","param","field","TextField","defaultValue","setPlaceholder","CheckBox","setValue","readOnly","setReadOnly","required","setRequired","setToolTipText","_onFormFieldChange","add","label","name","renderer","Single","Config","guessIfProxied","setBottomText","tr","textAlign","font","addButton","_addAt","controller","Form","bind","setModified","items","getItems","some","getValue","debug","_createChildControlImpl","hash","control","basic","Label","marginBottom","allowGrowX","decorator","Button","locale","Manager","Settings","superclass","setVisibility","AbstractRenderer","bottomText","nullable","apply","_applyBottomText","value","exclude","container","Composite","getBottomText","rich","wrap","hbox","HBox","setAlignX","setSpacing","addItems","names","title","_createHeader","i","length","_createLabel","item","setBuddy","box","width","_connectVisibility","_names","push","getLayout","_getLayout","_createLabelText","_labels","setRich","setAppearance","header","setFont","_row","setMarginTop"],"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/openhab/Openhab.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/openhab/Settings.js","/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/openhab/renderer/Single.js"],"sourcesContent":["/* Openhab.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * This Plugin provides some specials to improve the integration with openHAB backend.\n *\n * .. NOTE::\n *\n *    This plugin gets automatically activated if the openHAB2 backend is used.\n *    There is no need to add it to the ``plugins`` section of the ``visu_config.xml``.\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n *\n * @require(qx.ui.root.Inline)\n */\nqx.Class.define('cv.plugins.openhab.Openhab', {\n  extend: qx.core.Object,\n  type: 'singleton',\n\n  /*\n  *****************************************************************************\n    CONSTRUCTOR\n  *****************************************************************************\n  */\n  construct() {\n    super();\n    if (!Object.prototype.hasOwnProperty.call(cv.Config.request.queryKey, 'preview')) {\n      this.__notificationRouter = cv.core.notifications.Router.getInstance();\n\n      // listen to notifications\n      const client = cv.io.BackendConnections.getClientByType('openhab');\n      if (client) {\n        const sse = client.getCurrentTransport && client.getCurrentTransport();\n        if (sse) {\n          sse.subscribe('notifications', this._onNotification, this);\n        }\n        cv.TemplateEngine.getInstance().executeWhenDomFinished(this._createSettings, this);\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __notificationRouter: null,\n    __settings: null,\n    _openSettings: null,\n\n    _createSettings() {\n      // add element structure to notification-center\n      const settingsRoot = qx.dom.Element.create('section', {\n        id: 'qxsettings',\n        html: '<div></div>'\n      });\n\n      qx.dom.Element.insertAfter(\n        settingsRoot,\n        document.querySelector('#' + cv.ui.NotificationCenter.getInstance().getRootElementId() + ' section.messages')\n      );\n\n      // add a settings button to trigger opening the settings\n      const button = qx.dom.Element.create('div', {\n        html: cv.util.IconTools.svgKUF('edit_settings')(null, 'width: 22px; height: 22px;', '', true),\n\n        style: 'float: left;'\n      });\n\n      this._openSettings = new qx.ui.command.Command('Ctrl+S');\n      this._openSettings.addListener('execute', () => {\n        cv.ui.NotificationCenter.getInstance().show();\n        this.__settings.show();\n      });\n      cv.TemplateEngine.getInstance().getCommands().add('open-settings', this._openSettings);\n      qx.dom.Element.insertBegin(button, document.querySelector('#notification-center footer'));\n\n      qx.event.Registration.addListener(\n        button,\n        'tap',\n        function () {\n          this.__settings.show();\n        },\n        this\n      );\n\n      //add to DOM\n      qx.theme.manager.Meta.getInstance().setTheme(cv.theme.Dark);\n\n      // Initialize tooltip manager (currently disable as it requires a root with basic layout\n      // and that breaks the inline container sizes)\n      // qx.ui.tooltip.Manager.getInstance();\n\n      this._inline = new qx.ui.root.Inline(document.querySelector('#qxsettings > div'), true, false);\n\n      this._inline.setLayout(new qx.ui.layout.VBox());\n      this.__settings = new cv.plugins.openhab.Settings();\n      this.__settings.exclude();\n      this._inline.add(this.__settings, { flex: 1 });\n    },\n\n    /**\n     * Handles notification messages from backend\n     * @param e {Event}\n     * @protected\n     */\n    _onNotification(e) {\n      if (!e.data) {\n        this.error('invalid content received from SSE: ', e);\n      }\n      const json = typeof e.data === 'object' ? e.data : JSON.parse(e.data);\n      this.__notificationRouter.dispatchMessage(json.topic || 'cv.backend', json);\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    this._disposeObjects('__settings', '_openSettings');\n    this.__notificationRouter = null;\n  },\n\n  defer(statics) {\n    // initialize on load but delay the call\n    qx.event.Timer.once(statics.getInstance, statics, 1000);\n  }\n});\n","/* Settings.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * Show and edit openHAB CometVisu backends settings via openHAB api.\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n *\n */\nqx.Class.define('cv.plugins.openhab.Settings', {\n  extend: qx.ui.core.Widget,\n\n  /*\n  *****************************************************************************\n    CONSTRUCTOR\n  *****************************************************************************\n  */\n  construct() {\n    super();\n    this._setLayout(new qx.ui.layout.VBox());\n    this.set({\n      padding: 10,\n      backgroundColor: 'rgba(216, 216, 216, 1.0)',\n      textColor: 'rgb(61, 61, 61)'\n    });\n\n    // override text-shadow setting\n    if (!this.getBounds()) {\n      this.addListenerOnce('appear', () => {\n        this.getContentElement().setStyle('text-shadow', 'none');\n      });\n    } else {\n      this.getContentElement().setStyle('text-shadow', 'none');\n    }\n\n    this.__servicePid = 'org.openhab.cometvisu';\n    this.__uri = 'ui:cometvisu';\n\n    this._initConfigRestClient();\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    modified: {\n      check: 'Boolean',\n      init: false,\n      event: 'changeModified'\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __servicePid: null,\n    __uri: null,\n    __configDescriptionResource: null,\n    __service: null,\n    __configDescription: null,\n    __inDom: false,\n    _store: null,\n    __initialValues: null,\n\n    _initStore(pid) {\n      const serviceDesc = {\n        get: { method: 'GET', url: '/rest/services/' + pid + '/config' },\n        delete: { method: 'DELETE', url: '/rest/services/' + pid + '/config' },\n        put: { method: 'PUT', url: '/rest/services/' + pid + '/config' }\n      };\n\n      const service = (this.__service = new qx.io.rest.Resource(serviceDesc));\n      const client = cv.io.BackendConnections.getClientByType('openhab');\n\n      this._store = new qx.data.store.Rest(service, 'get', {\n        configureRequest(req) {\n          req.setRequestHeader('Content-Type', 'application/json');\n          if (client instanceof cv.io.openhab.Rest) {\n            client.authorize(req);\n          }\n        },\n        manipulateData(data) {\n          // normalize the keys (replace .> with _) for the marshaller\n          const n = {};\n          Object.getOwnPropertyNames(data).forEach(function (key) {\n            n[key.replace(/[\\.>]/g, '_')] = data[key];\n          });\n          if (!Object.prototype.hasOwnProperty.call(n, 'autoDownload')) {\n            n.autoDownload = false;\n          }\n          return n;\n        }\n      });\n\n      // load data\n      service.get();\n      this._store.addListenerOnce('changeModel', () => {\n        this.__initialValues = JSON.parse(qx.util.Serializer.toJson(this._store.getModel()));\n      });\n    },\n\n    _saveConfig() {\n      let data = qx.util.Serializer.toJson(this._store.getModel());\n      data = data.replace(/icons_mapping_/g, 'icons.mapping>');\n      data = JSON.parse(data.replace('icons_enableMapping', 'icons>enableMapping'));\n\n      this.__service.put(null, data);\n      this.__service.addListenerOnce('putSuccess', this.close, this);\n    },\n\n    _initConfigRestClient() {\n      const description = {\n        get: { method: 'GET', url: '/rest/config-descriptions/' + this.__uri }\n      };\n\n      const config = (this.__configDescriptionResource = new qx.io.rest.Resource(description));\n      const client = cv.io.BackendConnections.getClientByType('openhab');\n\n      config.addListener('getSuccess', ev => {\n        this._createForm(ev.getRequest().getResponse());\n      });\n      config.configureRequest(function (req) {\n        req.setRequestHeader('Content-Type', 'application/json');\n        if (client instanceof cv.io.openhab.Rest) {\n          client.authorize(req);\n        }\n      });\n      config.get();\n\n      this._initStore(this.__servicePid);\n    },\n\n    _createForm(config) {\n      if (config && Object.prototype.hasOwnProperty.call(config, 'parameters') && Array.isArray(config.parameters)) {\n        this._createChildControl('title');\n        const form = this.getChildControl('form');\n        config.parameters.forEach(function (param) {\n          let field;\n          switch (param.type) {\n            case 'TEXT':\n              field = new qx.ui.form.TextField();\n              if (param.defaultValue) {\n                field.setPlaceholder(param.defaultValue);\n              }\n              break;\n            case 'BOOLEAN':\n              field = new qx.ui.form.CheckBox();\n              field.setValue(param.defaultValue === 'true');\n              break;\n          }\n\n          if (param.readOnly) {\n            field.setReadOnly(true);\n          }\n          if (param.required) {\n            field.setRequired(true);\n          }\n          field.setToolTipText(param.description);\n          field.addListener('changeValue', this._onFormFieldChange, this);\n          form.add(field, param.label, null, param.name, null, param);\n        }, this);\n\n        const renderer = new cv.plugins.openhab.renderer.Single(form);\n        if (cv.Config.guessIfProxied()) {\n          renderer.setBottomText(\n            this.tr(\n              'The CometVisu seems to be delivered by a proxied webserver. Changing configuration values might not have the expected effect. Please proceed only if you know what you are doing.'\n            )\n          );\n\n          renderer.getChildControl('bottom-text').set({\n            padding: 10,\n            textAlign: 'center',\n            font: 'bold'\n          });\n        }\n        renderer.addButton(this.getChildControl('cancel-button'));\n        renderer.addButton(this.getChildControl('save-button'));\n\n        this._addAt(renderer, 1);\n        const controller = new qx.data.controller.Form(null, form);\n\n        this._store.bind('model', controller, 'model');\n\n        this.setModified(false);\n      }\n    },\n\n    _onFormFieldChange() {\n      let modified = false;\n      const items = this.getChildControl('form').getItems();\n      Object.getOwnPropertyNames(items).some(function (name) {\n        // noinspection EqualityComparisonWithCoercionJS\n        if (this.__initialValues[name] != items[name].getValue()) {\n          this.debug(name + ' has changed from ' + this.__initialValues[name] + ' to ' + items[name].getValue());\n\n          modified = true;\n          return true;\n        }\n        return false;\n      }, this);\n      this.setModified(modified);\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      let control;\n      switch (id) {\n        case 'title':\n          control = new qx.ui.basic.Label(this.tr('openHAB backend settings'));\n          control.set({\n            font: 'bold',\n            marginBottom: 5,\n            allowGrowX: true,\n            decorator: 'window-caption'\n          });\n\n          this._addAt(control, 0);\n          break;\n\n        case 'form':\n          control = new qx.ui.form.Form();\n          break;\n\n        case 'cancel-button':\n          control = new qx.ui.form.Button(qx.locale.Manager.tr('Cancel'));\n          control.addListener('execute', this.close, this);\n          break;\n\n        case 'save-button':\n          control = new qx.ui.form.Button(qx.locale.Manager.tr('Save'));\n          control.addListener('execute', this._saveConfig, this);\n          this.bind('modified', control, 'enabled');\n          break;\n      }\n\n      return control || super._createChildControlImpl(id, hash);\n    },\n\n    close() {\n      this.setVisibility('excluded');\n    }\n  },\n\n  /*\n  ******************************************************\n    DESTRUCTOR\n  ******************************************************\n  */\n  destruct() {\n    this._disposeObjects('__configDescriptionResource', '__service', '__root', '_store', '_window');\n  }\n});\n","/* Single.js\n *\n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n/**\n * {@link qx.ui.form.renderer.Single} with right column flexed.\n *\n * @author Tobias Bräutigam\n * @since 0.11.0\n */\n\nqx.Class.define('cv.plugins.openhab.renderer.Single', {\n  extend: qx.ui.form.renderer.AbstractRenderer,\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct(form) {\n    const layout = new qx.ui.layout.VBox(6);\n    this._setLayout(layout);\n\n    super(form);\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    bottomText: {\n      check: 'String',\n      nullable: true,\n      apply: '_applyBottomText'\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    // property apply\n    _applyBottomText(value) {\n      const control = this.getChildControl('bottom-text');\n      if (value) {\n        control.setValue(value);\n        control.show();\n      } else {\n        control.exclude();\n      }\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      let control;\n      switch (id) {\n        case 'content':\n          control = new qx.ui.container.Composite(new qx.ui.layout.VBox(8));\n          this._addAt(control, 1);\n          break;\n\n        case 'bottom-text':\n          control = new qx.ui.basic.Label(this.getBottomText());\n          control.set({\n            rich: true,\n            wrap: true\n          });\n\n          this._addAt(control, 2);\n          if (this.getBottomText()) {\n            control.show();\n          } else {\n            control.exclude();\n          }\n          break;\n\n        case 'button-container': {\n          const hbox = new qx.ui.layout.HBox();\n          hbox.setAlignX('right');\n          hbox.setSpacing(5);\n          control = new qx.ui.container.Composite(hbox);\n          this._addAt(control, 3);\n          break;\n        }\n      }\n\n      return control || super._createChildControlImpl(id, hash);\n    },\n\n    /**\n     * Add a group of form items with the corresponding names. The names are\n     * displayed as label.\n     * The title is optional and is used as grouping for the given form\n     * items.\n     *\n     * @param items {qx.ui.core.Widget[]} An array of form items to render.\n     * @param names {String[]} An array of names for the form items.\n     * @param title {String?} A title of the group you are adding.\n     */\n    addItems(items, names, title) {\n      // add the header\n      if (title !== null) {\n        this.getChildControl('content').add(this._createHeader(title));\n      }\n\n      const container = this.getChildControl('content');\n\n      // add the items\n      for (let i = 0; i < items.length; i++) {\n        const label = this._createLabel(names[i], items[i]);\n        const item = items[i];\n        label.setBuddy(item);\n\n        if (item instanceof qx.ui.form.CheckBox) {\n          // label + checkbox in one line\n          const box = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n          box.add(label, { width: '50%' });\n          box.add(item, { width: '50%' });\n          container.add(box);\n        } else {\n          container.add(label);\n          container.add(item);\n        }\n\n        this._connectVisibility(item, label);\n\n        // store the names for translation\n        if (qx.core.Environment.get('qx.dynlocale')) {\n          this._names.push({ name: names[i], label: label, item: items[i] });\n        }\n      }\n    },\n\n    /**\n     * Adds a button to the form renderer. All buttons will be added in a\n     * single row at the bottom of the form.\n     *\n     * @param button {qx.ui.form.Button} The button to add.\n     */\n    addButton(button) {\n      // add the button\n      this.getChildControl('button-container').add(button);\n    },\n\n    /**\n     * Returns the set layout for configuration.\n     *\n     * @return {qx.ui.layout.Grid} The grid layout of the widget.\n     */\n    getLayout() {\n      return this._getLayout();\n    },\n\n    /**\n     * Creates a label for the given form item.\n     *\n     * @param name {String} The content of the label without the\n     *   trailing * and :\n     * @param item {qx.ui.core.Widget} The item, which has the required state.\n     * @return {qx.ui.basic.Label} The label for the given item.\n     */\n    _createLabel(name, item) {\n      const label = new qx.ui.basic.Label(this._createLabelText(name, item));\n      // store labels for disposal\n      this._labels.push(label);\n      label.setRich(true);\n      label.setAppearance('form-renderer-label');\n      return label;\n    },\n\n    /**\n     * Creates a header label for the form groups.\n     *\n     * @param title {String} Creates a header label.\n     * @return {qx.ui.basic.Label} The header for the form groups.\n     */\n    _createHeader(title) {\n      const header = new qx.ui.basic.Label(title);\n      // store labels for disposal\n      this._labels.push(header);\n      header.setFont('bold');\n      if (this._row != 0) {\n        header.setMarginTop(10);\n      }\n      header.setAlignX('left');\n      return header;\n    }\n  }\n});\n"],"mappings":"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"}