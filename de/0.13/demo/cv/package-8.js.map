{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/PowerSpectrum.js"],"names":["qx","Class","define","extend","cv","ui","structure","AbstractWidget","include","common","Update","construct","props","name1","singlePhase","name2","name3","this","setCurve","isSinglePhase","setupCurve","statics","CURRENT","VOLTAGE","limitEN50160_1999","limitEN61000_3_2","referenceSin","fixLimits","entry","index","array","lastShifted","last","length","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","getAttributeToPropertyMappings","parseFormat","parseAddress","makeAddressListFn","type","target","transform","value","plugins","PowerSpectrum","singlephase","limitname","default","spectrumonly","showlegend","limitcolor","color1","color2","color3","src","mode","variant","properties","displayType","check","init","spectrum","limitName","curve","showCurve","showLegend","current","limitColor","members","__P_12_0","__P_12_1","_getInnerDomString","actor","_onDomReady","prototype","base","call","diagramCurve","isShowCurve","$","getPath","empty","optionsCurve","colors","legend","show","isShowLegend","xaxis","yaxis","diagramSpectrum","optionsSpectrum","series","bars","fill","fillColor","lineWidth","align","barWidth","plot","createDatasetCurve","createDatasetSpectrum","bind","layout","ResizeHandler","states","addListenerOnce","_update","ga","undefined","phase","addressInfo","variantInfo","Transform","encode","getCurrent","substr","parseInt","factor","values","i","getSpectrum","updateCurve","getCurve","setupSpectrum","offset","ret_val","push","input","inp","out","shift","Math","PI","phi","cos","j","label","color","getLimitName","getDisplayType","lines","steps","getName1","getName2","getName3","defer","util","ScriptLoader","getInstance","addScripts","addHandler","WidgetFactory","registerClass","forEach","time","sin","$$dbClassInfo"],"mappings":"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","sourcesContent":["/* PowerSpectrum.js \n * \n * copyright (c) 2010-2017, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * The powerspectrum plugin and widget creates a graph to show the power \n * spectral data that the Enertex Smartmeter can send on the KNX bus.\n * \n * @author Christian Mayer\n * @since 0.10.0\n * @asset(plugins/diagram/dep/flot/jquery.flot.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.canvas.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.resize.min.js)\n * @asset(plugins/diagram/dep/flot/jquery.flot.navigate.min.js)\n */\nqx.Class.define('cv.plugins.PowerSpectrum', {\n  extend: cv.ui.structure.AbstractWidget,\n  include: [cv.ui.common.Update],\n\n  /*\n  ******************************************************\n    CONSTRUCTOR\n  ******************************************************\n  */\n  construct: function(props) {\n    if (!props.name1) {\n      props.name1 = props.singlePhase === true ? 'L' : 'L1';\n    }\n    if (!props.name2) {\n      props.name2 = 'L2';\n    }\n    if (!props.name3) {\n      props.name3 = 'L3';\n    }\n    this.base(arguments, props);\n\n    // some initializations\n    this.setSpectrum(this.isSinglePhase() ? [ this.setupSpectrum() ] : [ this.setupSpectrum(-0.26), this.setupSpectrum(0), this.setupSpectrum(0.26) ]);\n    this.setCurve(this.isSinglePhase() ? [ this.setupCurve() ] : [ this.setupCurve(), this.setupCurve(), this.setupCurve() ]);\n  },\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n    // Constants\n    CURRENT: 0,\n    VOLTAGE: 1,\n    limitEN50160_1999: [[2, 0.02], [3, 0.05], [4, 0.01], [5, 0.06], [6, 0.005], [7, 0.05],\n      [8, 0.005], [9, 0.015], [10, 0.005], [11, 0.035], [12, 0.005], [13, 0.03], [14, 0.005],\n      [15, 0.005], [16, 0.005], [17, 0.02], [18, 0.005], [19, 0.015], [20, 0.005],\n      [21, 0.005], [22, 0.005], [23, 0.015], [24, 0.005], [25, 0.015]\n    ], // limit for voltage in ratio\n    limitEN61000_3_2: [[2, 1.620], [3, 3.450], [4, 0.650], [5, 1.710], [6, 0.450],\n      [7, 1.160], [8, 0.350], [9, 0.600], [10, 0.280], [11, 0.500], [12, 0.233], [13, 0.320],\n      [14, 0.200], [15, 0.230], [16, 0.175], [17, 0.203], [18, 0.155], [19, 0.182],\n      [20, 0.140], [21, 0.164], [22, 0.127], [23, 0.150], [24, 0.117], [25, 0.139]\n    ], // limit for current in Ampere\n    referenceSin: [[], [], []],\n\n    // fix limits for better displaying\n    fixLimits: function(entry, index, array) {\n      array[index][0] -= 0.5;\n    },\n    lastShifted: function(array) {\n      const last = array[array.length - 1];\n      return [ last[0]+1, last[1] ];\n    },\n\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.WidgetParser.parseElement(this, xml, path, flavour, pageType, this.getAttributeToPropertyMappings());\n      cv.parser.WidgetParser.parseFormat(xml, path);\n      cv.parser.WidgetParser.parseAddress(xml, path, this.makeAddressListFn);\n      return data;\n    },\n\n    getAttributeToPropertyMappings: function() {\n      return {\n        'type': {\n          target: 'displayType',\n          transform: function(value) {\n            return value === 'current' ? cv.plugins.PowerSpectrum.CURRENT : cv.plugins.PowerSpectrum.VOLTAGE;\n          }\n        },\n        'singlephase': {\n          target: 'singlePhase',\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'limitname': {\n          target: 'limitName',\n          'default': 'limit'\n        },\n        'name1': { },\n        'name2': { },\n        'name3': { },\n        'spectrumonly': {\n          target: 'showCurve',\n          transform: function(value) {\n            return value !== 'true';\n          }\n        },\n        'showlegend': {\n          target: 'showLegend',\n          transform: function(value) {\n            return value === 'true';\n          }\n        },\n        'limitcolor': {\n          target: 'limitColor',\n          'default': '#edc240' // default directly from flot code\n        },\n        'color1': {\n          'default': '#afd8f8'\n        },\n        'color2': {\n          'default': '#cb4b4b'\n        },\n        'color3': {\n          'default': '#4da74d'\n        }\n      };\n    },\n\n    makeAddressListFn: function(src, transform, mode, variant) {\n      if (!variant) {\n        variant = 'spectrum'; // the default\n      }\n      return [true, variant];\n    }\n  },\n\n  /*\n  ******************************************************\n    PROPERTIES\n  ******************************************************\n  */\n  properties: {\n    displayType: {\n      check: [0, 1],\n      init: 1\n    },\n    singlePhase: {\n      check: 'Boolean',\n      init: false\n    },\n    spectrum: {\n      check: 'Array',\n      init: []\n    },\n    limitName: {\n      check: 'String',\n      init: 'limit'\n    },\n    name1: {\n      check: 'String',\n      init: 'L1'\n    },\n    name2: {\n      check: 'String',\n      init: 'L2'\n    },\n    name3: {\n      check: 'String',\n      init: 'L3'\n    },\n    curve: {\n      check: 'Array',\n      init: []\n    },\n    showCurve: {\n      check: 'Boolean',\n      init: false\n    },\n    showLegend: {\n      check: 'Boolean',\n      init: false\n    },\n    current: {\n      check: 'Array',\n      init: []\n    },\n    limitColor: {\n      check: 'Color',\n      init: '#edc240'\n    },\n    color1: {\n      check: 'Color',\n      init: '#afd8f8'\n    },\n    color2: {\n      check: 'Color',\n      init: '#cb4b4b'\n    },\n    color3: {\n      check: 'Color',\n      init: '#4da74d'\n    }\n  },\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __plot: null,\n    __plotCurve: null,\n    \n    _getInnerDomString: function() {\n      // create the actor\n      let actor = '<div class=\"actor clickable\">';\n      if (this.isShowCurve()) {\n        actor += '<div class=\"diagram_inline curve\">loading...</div>';\n      }\n      actor += '<div class=\"diagram_inline spectrum\">loading...</div></div>';\n      return actor;\n    },\n    \n    _onDomReady: function() {\n      this.base(arguments);\n      const colors = [this.getLimitColor(), this.getColor1(), this.getColor2(), this.getColor3()];\n\n      const diagramCurve = this.isShowCurve() && $('#' + this.getPath() + ' .actor div.curve').empty();\n      const optionsCurve = this.isShowCurve() && {\n        colors: colors,\n        legend: {\n          show: this.isShowLegend()\n        },\n        xaxis: {\n          show: false\n        },\n        yaxis: {\n          show: false\n        }\n      };\n      const diagramSpectrum = $('#' + this.getPath() + ' .actor div.spectrum').empty();\n      const optionsSpectrum = {\n        colors: colors,\n        series: {\n          bars: {\n            show: true,\n            fill: 1,\n            fillColor: null,\n            lineWidth: 0\n          }\n        },\n        bars: {\n          align: 'center',\n          barWidth: this.isSinglePhase() ? 0.75 : 0.25\n        },\n        legend: {\n          show: this.isShowLegend()\n        },\n        xaxis: {\n          show: false\n        },\n        yaxis: {\n          show: false\n        }\n      };\n\n      const init = function () {\n        this.__plotCurve = this.isShowCurve() && $.plot(diagramCurve, this.createDatasetCurve(), optionsCurve);\n        this.__plot = $.plot(diagramSpectrum, this.createDatasetSpectrum(), optionsSpectrum);\n      }.bind(this);\n\n      // check if sizes are set yet, otherwise wait some time\n      if (cv.ui.layout.ResizeHandler.states.isPageSizeInvalid()) {\n        cv.ui.layout.ResizeHandler.states.addListenerOnce('changePageSizeInvalid', init);\n      } else {\n        init();\n      }\n    },\n\n    _update: function(ga, data) {\n      if (ga === undefined) {\n return; \n}\n      const addressInfo = this.getAddress()[ga];\n\n      let phase;\n      if (addressInfo.variantInfo[0] === 'I') {\n        phase = this.isSinglePhase() ? 1 : +(addressInfo.variantInfo[1] || 1);\n        const value = cv.Transform.encode(addressInfo.transform, data);\n        this.getCurrent()[phase-1] = value / 1000; // transform mA to A\n      } else if (addressInfo.variantInfo.substr(0, 8) === 'spectrum' && data.length === 28) { // sanity check for 14 bytes\n        phase = this.isSinglePhase() ? 1 : +(addressInfo.variantInfo[8] || 1);\n        const index = parseInt(data.substr(0, 2), 16);\n        const factor = this.getCurrent()[phase - 1] || 1;\n        const values = [];\n\n        for (let i = 0; i < 13; i++) {\n          if (index + i < 2) {\n            continue;\n          }\n          values[i] = Math.pow(10, (parseInt(data.substr(i * 2 + 2, 2), 16) - 253) / 80);\n          this.getSpectrum()[phase - 1][index + i - 2][1] = values[i] * factor;\n        }\n        this.__plot.setData(this.createDatasetSpectrum());\n        this.__plot.draw();\n\n        if (this.__plotCurve) {\n          this.updateCurve(this.getSpectrum(), this.getCurve(), phase - 1);\n          this.__plotCurve.setData(this.createDatasetCurve());\n          this.__plotCurve.draw();\n        }\n      }\n    },\n    \n    /**\n     * Setup helper\n     */\n    setupCurve: function() {\n      return [[0, 0], [0.4, 0], [0.8, 0], [1.2, 0], [1.6, 0], [2, 0], [2.4, 0], [2.8, 0], [3.2, 0],\n        [3.6, 0], [4, 0], [4.4, 0], [4.8, 0], [5.2, 0], [5.6, 0], [6, 0], [6.4, 0], [6.8, 0], [7.2, 0],\n        [7.6, 0], [8, 0], [8.4, 0], [8.8, 0], [9.2, 0], [9.6, 0], [10, 0], [10.4, 0], [10.8, 0],\n        [11.2, 0], [11.6, 0], [12, 0], [12.4, 0], [12.8, 0], [13.2, 0], [13.6, 0], [14, 0],\n        [14.4, 0], [14.8, 0], [15.2, 0], [15.6, 0], [16, 0], [16.4, 0], [16.8, 0], [17.2, 0],\n        [17.6, 0], [18, 0], [18.4, 0], [18.8, 0], [19.2, 0], [19.6, 0]];\n    },\n    setupSpectrum: function(offset) {\n      const ret_val = [];\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n      for (let i = 2; i < 52; i++) {\n        ret_val.push([i + offset, 0]);\n      }\n      return ret_val;\n    },\n\n    /**\n     * Convert a spectrum to a curve\n     * @param input\n     * @param target\n     * @param phase\n     */\n    updateCurve: function(input, target, phase) {\n      const inp = input[phase];\n      const out = target[phase];\n      const shift = (phase * 2 / 3 - 0.5) * Math.PI;\n\n      for (let i = 0; i < 50; i++) {\n        const phi = i * Math.PI / 25;\n        let value = Math.cos(phi + shift); // the base with 50 Hz\n\n        // the harmonics\n        for (let j = 2; j < 50; j++) {\n          value += Math.cos((phi+shift) * j) * inp[j][1];\n        }\n\n        out[i][1] = value;\n      }\n    },\n\n    /**\n     * Little helper to setup the Flot dataset structure.\n     */\n    createDatasetCurve: function() {\n      return this.isSinglePhase()\n        ? [\n          { label: null, data: this.self(arguments).referenceSin[0], color:13 }, // trick flot to automatically make color darker\n          { label: 'L', data: this.getCurve()[0], color:1 }\n        ]\n        : [\n          { label: null, data: this.self(arguments).referenceSin[0], color:13 },\n          { label: null, data: this.self(arguments).referenceSin[1], color:14 },\n          { label: null, data: this.self(arguments).referenceSin[2], color:15 },\n          { label: 'L1', data: this.getCurve()[0], color:1 },\n          { label: 'L2', data: this.getCurve()[1], color:2 },\n          { label: 'L3', data: this.getCurve()[2], color:3 }\n        ];\n    },\n\n    /**\n     * Little helper to setup the Flot dataset structure.\n     */\n    createDatasetSpectrum: function() {\n      return this.isSinglePhase()\n        ? [\n          { label: this.getLimitName(), data: this.getDisplayType()===this.self(arguments).VOLTAGE ? this.self(arguments).limitEN50160_1999 : this.self(arguments).limitEN61000_3_2, bars:{show:false}, lines:{steps:true}, color:0 },\n          { label: this.getName1(), data:this.getSpectrum()[0], color:1}\n        ]\n        : [\n          { \n            label: this.getLimitName(), \n            data: this.getDisplayType() === this.self(arguments).VOLTAGE ? this.self(arguments).limitEN50160_1999 : this.self(arguments).limitEN61000_3_2, bars:{show:false}, lines:{steps:true}, color:0 },\n          { label: this.getName1(), data:this.getSpectrum()[0], color:1 },\n          { label: this.getName2(), data:this.getSpectrum()[1], color:2 },\n          { label: this.getName3(), data:this.getSpectrum()[2], color:3 }\n        ];\n    }\n  },\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addScripts([\n      'plugins/diagram/dep/flot/jquery.flot.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.canvas.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.resize.min.js',\n      'plugins/diagram/dep/flot/jquery.flot.navigate.min.js'\n    ]);\n    cv.parser.WidgetParser.addHandler('powerspectrum', cv.plugins.PowerSpectrum);\n    cv.ui.structure.WidgetFactory.registerClass('powerspectrum', statics);\n    \n    // init\n    statics.limitEN50160_1999.forEach(statics.fixLimits);\n    statics.limitEN50160_1999.push(statics.lastShifted(statics.limitEN50160_1999));\n    statics.limitEN61000_3_2.forEach(statics.fixLimits);\n    statics.limitEN61000_3_2.push(statics.lastShifted(statics.limitEN61000_3_2));\n\n    // fill reference\n    for (let phi = 0; phi < 50; phi++) {\n      const time = phi * 20 / 50; // time in milliseconds\n\n      statics.referenceSin[0].push([ time, Math.sin((phi) * Math.PI / 25) ]);\n      statics.referenceSin[1].push([ time, Math.sin((phi+ 50/3) * Math.PI / 25) ]);\n      statics.referenceSin[2].push([ time, Math.sin((phi+100/3) * Math.PI / 25) ]);\n    }\n  }\n\n});\n"]}