{"version":3,"sources":["/home/runner/work/CometVisu/CometVisu/source/class/cv/plugins/MobileMenu.js"],"names":["qx","Class","define","extend","cv","ui","structure","pure","AbstractWidget","include","common","HasChildren","statics","parse","xml","path","flavour","pageType","data","parser","WidgetParser","parseElement","this","parseChildren","getWidgetElements","xmlElement","Model","getInstance","setWidgetData","containerClass","members","__P_10_0","__P_10_1","getDomString","window","innerWidth","Config","maxMobileScreenWidth","navLeft","document","querySelector","classList","add","event","message","Bus","subscribe","navbar","bom","element","Animation","animate","util","SLIDE_LEFT_OUT","addListenerOnce","style","display","getChildrenDomString","_onDomReady","isTouchDevice","touchScroll","_action","id","scrollStartPos","elem","Registration","addListener","scrollTop","touches","pageY","preventDefault","createEvent","e","defer","ScriptLoader","addStyles","addHandler","WidgetFactory","registerClass","plugins","MobileMenu","$$dbClassInfo"],"mappings":"+dAwBCA,GAAAC,MAAAC,OAAA,yBACCC,OAAOC,GAAAC,GAAOC,UAAAC,KAAAC,eACdC,SAAUL,GAAFC,GAAMK,OAANC,aAOTC,SAYAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACG,IAAKC,EAAEd,GAAAe,OAAUZ,KAAKa,aAAfC,aAAwCC,KAAAR,EAAAC,EAAAC,EAAAC,GAC7Cb,GAAAe,OAAUZ,KAAMa,aAAYG,cAAaT,EAAAC,EAAaC,EAAzCC,GACb,OAAGC,GAEJM,kBAhBM,SAAAC,EAAAV,GAkBPX,GAAAc,KAAAQ,MAAAC,cAAmBC,cAAAb,EAAS,MACxBc,eAAY,YAWnBC,SACCC,SAAS,KACPC,SAAY,KAGZC,aAAA,WACA,GAAAC,OAAYC,YAAE/B,GAAAgC,OAAAC,qBAAW,CACvB,IAAIC,EAAOhB,KAAPS,SAAwBQ,SAAOC,cAAnC,mDAEEF,EAAKG,UAAQC,IAAU,qCAGvB1C,GAAA2C,MAAQC,QAAMC,IAAdC,UAAA,mBAAA,WACE,IAACC,EAAMT,EAAYE,cAAU,WACdxC,GAAAgD,IAAQC,QAAAC,UAAcC,QAArCJ,EAAA/C,GAAAoD,KAAAF,UAAAG,gBACMC,gBAAmB,MAAQ,WACjChB,EAAUiB,MAAAC,QAAgB,QACxBlC,QAEH,MAND,2CAAAA,KAAAmC,uBAAA,uFAWHC,YAvBM,WAyBPpC,KAAWqC,iBACTrC,KAAIsC,YAAK,eAGVC,QA7BM,WA+BP,GAAA3B,OAASC,YAAA/B,GAAWgC,OAAAC,sBACdf,KAAOqC,gBAAiB,CAC1BrC,KAAIS,SAAKwB,MAALC,QAAsB,wIAM7BI,YAvCM,SAAAE,GAyCP,IAAAC,EAAa,EACPC,EAAAzB,SAAcC,cAAlB,IAAAsB,GAEA9D,GAAA2C,MAAUsB,aAAYC,YAAcF,EAAM,aAA1C,SAAArB,GACEoB,EAAOzC,KAAa6C,UAAYxB,EAAMyB,QAAA,GAAxCC,MACE1B,EAAA2B,mBACA,GACDtE,GAAE2C,MAHHsB,aAAAC,YAAAF,EAAA,YAAA,SAAArB,GAKErB,KAAC6C,UAAMJ,EAAyBpB,EAAMyB,QAAA,GAAaC,MACnD1B,EAAK2B,mBACL,IAEHX,cAtDM,WAwDP,GAAe,OAAfrC,KAAAU,SACE,IACEO,SAAIgC,YAAA,cACFjD,KAAAU,UAAS,EACT,MAAKwC,GACLlD,KAAAU,UAAU,yBAclByC,MAAA,SAAA7D,GAEOR,GAAAgD,KAASsB,aAAS/C,cACjBgD,UAAY,qCAClBvE,GAAAe,OAAOZ,KAAAa,aAAUwD,WAAA,aAAjBhE,GACAR,GAAGC,GAAAC,UAAYuE,cAAaC,cAAW,aAAclE,MAxHhBR,GAAxC2E,QAAAC,WAAAC,cAAAA","sourcesContent":["/* MobileMenu.js \n * \n * copyright (c) 2010-2022, Christian Mayer and the CometVisu contributers.\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA\n */\n\n\n/**\n * @author alltime84\n * @since 2016\n * @asset(plugins/mobilemenu/*.css)\n */\nqx.Class.define('cv.plugins.MobileMenu', {\n  extend: cv.ui.structure.pure.AbstractWidget,\n  include: [cv.ui.common.HasChildren],\n\n  /*\n  ******************************************************\n    STATICS\n  ******************************************************\n  */\n  statics: {\n\n    /**\n     * Parses the widgets XML configuration and extracts the given information\n     * to a simple key/value map.\n     *\n     * @param xml {Element} XML-Element\n     * @param path {String} internal path of the widget\n     * @param flavour {String} Flavour of the widget\n     * @param pageType {String} Page type (2d, 3d, ...)\n     * @return {Map} extracted data from config element as key/value map\n     */\n    parse: function (xml, path, flavour, pageType) {\n      const data = cv.parser.pure.WidgetParser.parseElement(this, xml, path, flavour, pageType);\n      cv.parser.pure.WidgetParser.parseChildren(xml, path, flavour, pageType);\n      return data;\n    },\n\n    getWidgetElements: function(xmlElement, path) {\n      cv.data.Model.getInstance().setWidgetData(path+'_0', {\n        containerClass           : 'actor'\n      });\n    }\n  },\n\n\n  /*\n  ******************************************************\n    MEMBERS\n  ******************************************************\n  */\n  members: {\n    __navLeft : null,\n    __isTouchDevice: null,\n\n    // overridden\n    getDomString: function() {\n      if (window.innerWidth <= cv.Config.maxMobileScreenWidth) {\n        const navLeft = this.__navLeft = document.querySelector('#navbarLeft');\n        if (!navLeft.classList.contains('mobilemenu')) {\n          navLeft.classList.add('mobilemenu');\n        }\n        navLeft.style.display = 'none';\n        qx.event.message.Bus.subscribe('path.pageChanged', function() {\n          const navbar = navLeft.querySelector('.navbar');\n          const animation = qx.bom.element.Animation.animate(navbar, qx.util.Animation.SLIDE_LEFT_OUT);\n          animation.addListenerOnce('end', function() {\n            navLeft.style.display = 'none';\n          }, this);\n        });\n\n        return '<div class=\"clearfix mobilemenuTrigger\">' + this.getChildrenDomString() + '</div>';\n      } \n        return '<div class=\"clearfix mobilemenuTrigger\" style=\"display: none\"></div>';\n    },\n\n    _onDomReady: function() {\n      if (this.isTouchDevice()) {\n        this.touchScroll('navbarLeft');\n      }\n    },\n\n    _action: function() {\n      if (window.innerWidth <= cv.Config.maxMobileScreenWidth) {\n        if (this.isTouchDevice()) {\n          this.__navLeft.style.display = 'block';\n          const navbar = this.__navLeft.querySelector('.navbar.navbarActive');\n          qx.bom.element.Animation.animate(navbar, qx.util.Animation.SLIDE_LEFT_IN);\n        }\n      }\n    },\n\n    touchScroll: function(id) {\n      let scrollStartPos = 0;\n\n      const elem = document.querySelector('#' + id);\n      qx.event.Registration.addListener(elem, 'touchstart', function(event) {\n        scrollStartPos=this.scrollTop+event.touches[0].pageY;\n        event.preventDefault();\n      }, false);\n\n      qx.event.Registration.addListener(elem, 'touchmove', function(event) {\n        this.scrollTop=scrollStartPos-event.touches[0].pageY;\n        event.preventDefault();\n      }, false);\n    },\n\n    isTouchDevice: function() {\n      if (this.__isTouchDevice === null) {\n        try {\n          document.createEvent('TouchEvent');\n          this.__isTouchDevice = true;\n        } catch (e) {\n          this.__isTouchDevice = false;\n        }\n      }\n      return this.__isTouchDevice;\n    }\n  },\n\n  // VisuDesign_Custom.prototype.addCreator(\"mobilemenu\", {\n  //   create: function(element, path, flavour, type) {\n  //     var $e = $(element);\n  //     var data = templateEngine.widgetDataInsert( path, {\n  //       content           : getWidgetElements($e, path)\n  //     } );\n  // });\n\n  defer: function(statics) {\n    const loader = cv.util.ScriptLoader.getInstance();\n    loader.addStyles('plugins/mobilemenu/mobilemenu.css');\n    cv.parser.pure.WidgetParser.addHandler('mobilemenu', statics);\n    cv.ui.structure.WidgetFactory.registerClass('mobilemenu', statics);\n  }\n});\n"]}