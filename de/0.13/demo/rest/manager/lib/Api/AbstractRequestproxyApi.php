<?php

/**
 * CometVisu Manager backend
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractRequestproxyApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractRequestproxyApi
{
    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }

    /**
     * DELETE deleteProxied
     * Output-Formats: [application/_*, image/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteProxied(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $url = key_exists('url', $queryParams) ? $queryParams['url'] : null;
        $authType = key_exists('auth-type', $queryParams) ? $queryParams['auth-type'] : null;
        $configSection = key_exists('config-section', $queryParams) ? $queryParams['config-section'] : null;
        $selfSigned = key_exists('self-signed', $queryParams) ? $queryParams['self-signed'] : null;
        $message =
            'How about implementing deleteProxied as a DELETE method in OpenAPIServer\Api\RequestproxyApi class?';
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getProxied
     * Output-Formats: [application/_*, image/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getProxied(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $url = key_exists('url', $queryParams) ? $queryParams['url'] : null;
        $authType = key_exists('auth-type', $queryParams) ? $queryParams['auth-type'] : null;
        $configSection = key_exists('config-section', $queryParams) ? $queryParams['config-section'] : null;
        $selfSigned = key_exists('self-signed', $queryParams) ? $queryParams['self-signed'] : null;
        $message = 'How about implementing getProxied as a GET method in OpenAPIServer\Api\RequestproxyApi class?';
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postProxied
     * Output-Formats: [application/_*, image/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postProxied(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $url = key_exists('url', $queryParams) ? $queryParams['url'] : null;
        $authType = key_exists('auth-type', $queryParams) ? $queryParams['auth-type'] : null;
        $configSection = key_exists('config-section', $queryParams) ? $queryParams['config-section'] : null;
        $selfSigned = key_exists('self-signed', $queryParams) ? $queryParams['self-signed'] : null;
        $message = 'How about implementing postProxied as a POST method in OpenAPIServer\Api\RequestproxyApi class?';
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT putProxied
     * Output-Formats: [application/_*, image/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function putProxied(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $url = key_exists('url', $queryParams) ? $queryParams['url'] : null;
        $authType = key_exists('auth-type', $queryParams) ? $queryParams['auth-type'] : null;
        $configSection = key_exists('config-section', $queryParams) ? $queryParams['config-section'] : null;
        $selfSigned = key_exists('self-signed', $queryParams) ? $queryParams['self-signed'] : null;
        $message = 'How about implementing putProxied as a PUT method in OpenAPIServer\Api\RequestproxyApi class?';
        throw new HttpNotImplementedException($request, $message);
    }
}
