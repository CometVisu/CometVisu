@use "sass:math";

/* colors */
$appBackground: #525151;
$tileBackground: #2e2e2e;
$buttonBackground: #1f1f1f;
$primaryColor: #ff9900;
$secondaryColor: #666666;
$borderColor: #7a7a7a;
$blockerColor: #000000;

$primaryText: #b6b6b6;
$secondaryText: #7e7d7d;

/* dimensions */
$defaultSpace: 8px;
$tileCellSize: 64px;
$defaultButtonSize: 56px;
$borderRadius: 18px;
$tileRows: 3;
$tileColumns: 3;


:root {
    --tileCellWidth: #{$tileCellSize};
    --tileCellHeight: #{$tileCellSize};
    --spacing: #{$defaultSpace};
    --defaultButtonSize: calc(#{$defaultButtonSize} - #{$defaultSpace});
}

@font-face {
    font-family: "Roboto";
    font-style: normal;
    font-weight: 400;
    src: url("../metal/fonts/Roboto-Regular.ttf");
}

@import url("fonts/remixicon.css");
@import url("../../icons/knx-uf-iconset.css");

body {
    background-color: $appBackground;
    font-family: Roboto Arial sans-serif;
    color: $primaryText;
    margin: 0;
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100vh;

    main {
        flex: 1
    }

    svg.defs-only {
        display:block; position: absolute;
        height:0; width:0; margin: 0; padding: 0;
        border: none; overflow: hidden;
    }

    .blocker {
        background-color: $blockerColor;
        opacity: 0.5;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 10000;
        cursor: default;
        border-radius: inherit;
    }

    nav {
        position: relative;
        background-color: $buttonBackground;
        z-index: 10;

        /* expand icons in sub levels */
        > ul > li > details > ul details > summary:after {
            content: "\ea54";
        }

        > ul ul ul {
            margin-left: calc(100% - 1.2em);
            margin-top: -40px;
        }

        ul {
            margin: 0;
            padding: 0;
            list-style-type: none;

            li {
                display: inline-block;
                background-color: $buttonBackground;
                position: relative;
                height: 40px;

                details {
                    summary::-webkit-details-marker, summary::marker {
                        display: none;
                        content: "";
                    }
                    z-index: 100;

                    summary {
                        display: inline-block;
                        white-space: nowrap;
                    }

                    summary:after {
                        display: inline-block;
                        margin-left: calc(var(--spacing)*-1);
                        content: "\ea50";
                        font-family: 'remixicon' !important;
                        font-style: normal;
                        -webkit-font-smoothing: antialiased;
                        -moz-osx-font-smoothing: grayscale;
                        vertical-align: text-bottom;
                        font-size: 28px;
                        line-height: 20px;
                    }

                    &[open] > summary:after {
                        transform:rotate(180deg);
                    }

                    ul {
                        z-index: 100;
                        position: absolute;
                        li {
                            padding: 0;
                            width: 100%;
                        }
                    }
                }
                a {
                    display: inline-block;
                    padding: var(--spacing) calc(var(--spacing)*2);
                }
                /*&:hover {
                    background-color: $secondaryColor;
                }*/
                &.active {
                    > a, > details > summary, > details > summary > a {
                        color: $primaryColor;
                    }
                }
                &.sub-active {
                    > details > summary:after {
                        color: $primaryColor;
                    }
                }
            }
        }
        a {
            color: $primaryText;
            text-align: center;
            text-decoration: none;
            font-size: 20px;
        }

        .menu {
            display: none;
        }
    }

    cv-page.screenshots {
        /* white background for screenshots of widgets with border radius */
        background-color: white;
    }

    cv-page.active {
        display: flex;
    }

    cv-page {
        padding: var(--spacing);
        display: none;
        flex-flow: row wrap;
        align-items: center;
        align-content: flex-start;
        column-gap: var(--spacing);
        overflow-y: auto;
        overflow-x: hidden;

        > :not(details) {
            /* Row gap for everything that is no detail element */
            margin-bottom: var(--spacing);
        }

        details {
            flex: 0 0 100%;
            border-top: 1px solid $borderColor;
            summary::-webkit-details-marker, summary::marker {
                display: none;
                content: "";
            }
            summary {
                padding: calc(var(--spacing) * 2) var(--spacing);
                float: none !important;
                margin-left: 0 !important;
            }
            > *:not(summary) {
                float: left;
                margin-bottom: var(--spacing);
                margin-right: var(--spacing);
            }
        }
        details:first-child {
            border-top: none;
            margin-top: 0;
        }

        details > summary:before {
            font-family: 'remixicon' !important;
            font-style: normal;
            -webkit-font-smoothing: antialiased;
            content: "\EA6E";
            vertical-align: text-bottom;
            padding-right: $defaultSpace;
        }
        details[open] > summary:before {
            content: "\EA4E";
        }
        details > summary:after {
            content: "..."
        }
        details[open] > summary:after {
            content: "";
        }
    }
    cv-switch, cv-shutter {
        width: calc(var(--tileCellWidth) * #{$tileColumns});
        height: calc(var(--tileCellHeight) * #{$tileRows});
    }

    cv-tile {
        width: calc(var(--tileCellWidth) * #{$tileColumns});
        height: calc(var(--tileCellHeight) * #{$tileRows});
        background-color: $tileBackground;
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        border-radius: $borderRadius;
        box-shadow: 2px 4px 4px rgba(0, 0, 0, 0.25);
        display: grid;
        grid-template-columns: repeat($tileColumns, 1fr);
        grid-template-rows: repeat($tileRows, 1fr);
        justify-items: center;
        position: relative;

        .row {
            height: var(--tileCellHeight);
            width: 100%;
        }

        @for $i from 2 through $tileColumns {
            > .colspan-#{$i} {
                grid-column: 1 / span #{$i};
            }

            > [column='#{$i}'] {
                grid-column: #{$i};
            }

            @if 2*$i - 1 <= $tileColumns {
                > .colspan-#{$i}[column='#{$i}'] {
                    grid-column: #{$i} / span #{$i};
                }
            }
        }
        @for $i from 2 through $tileRows {
            > .rowspan-#{$i} {
                grid-row: 1 / span #{$i};
            }
            > [row='#{$i}'] {
                grid-row: #{$i};
            }

            @if 2*$i - 1 <= $tileRows {
                > .rowspan-#{$i}[row='#{$i}'] {
                    grid-row: #{$i} / span #{$i};
                }
            }
        }

        cv-row {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        > [align='center'] {
            align-self: center;
        }

        > [row='first'] {
            grid-row: 1;
            justify-content: space-evenly;
        }

        > [row='middle'] {
            grid-row: math.ceil(math.div($tileRows, 2));
        }

        > [row='last'] {
            grid-row: $tileRows;
            justify-content: flex-start;
        }

        > [row='last'] > label:first-child {
            margin-top: 4px;
        }

        cv-icon {
            font-size: calc((min(var(--tileCellWidth), var(--tileCellHeight)) - #{$defaultSpace}*2) / 2);
            position: relative;

            svg {
                color: $primaryText;
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
            }
        }
        cv-icon[size='large'] {
            font-size: calc((min(var(--tileCellWidth), var(--tileCellHeight))) / 2);
        }
        cv-icon[size='x-large'] {
            font-size: calc((min(var(--tileCellWidth), var(--tileCellHeight))) - var(--spacing)*2);
        }
        cv-icon[size='xx-large'] {
            font-size: calc((min(var(--tileCellWidth), var(--tileCellHeight))) - var(--spacing));
        }
        cv-icon[size='xxx-large'] {
            font-size: calc((min(var(--tileCellWidth), var(--tileCellHeight))));
        }
    }
    cv-tile[size="1x0.5"] {
        height: calc(var(--tileCellHeight) * #{$tileRows} * 0.5 - var(--spacing)/2);
    }
    cv-tile[size="2x1"] {
        width: calc(var(--tileCellWidth) * #{$tileColumns} * 2 + var(--spacing));
    }
    cv-tile[size="2x2"] {
        width: calc(var(--tileCellWidth) * #{$tileColumns} * 2 + var(--spacing));
        height: calc(var(--tileCellHeight) * #{$tileRows} * 2 + var(--spacing));
    }
    cv-tile[size="1x2"] {
        height: calc(var(--tileCellHeight) * #{$tileRows} * 2 + var(--spacing));
    }
    cv-tile[size="2x4"] {
        width: calc(var(--tileCellWidth) * #{$tileColumns} * 2 + var(--spacing));
        height: calc(var(--tileCellHeight) * #{$tileRows} * 4 + var(--spacing) * 3);
    }
    .clickable {
        cursor: pointer;
    }
    cv-tile.has-bg-image {
        label {
            mix-blend-mode: difference;
            filter: drop-shadow(.05em .05em white);
        }

    }
    cv-tile.has-bg-image {
        > * {
            z-index: 2;
        }

        > .overlay {
            display: block;
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            opacity: 0.75;
            background-color: black;
            border-radius: $borderRadius;
        }
    }

    cv-tile[disabled="true"] {
        opacity: 0.5;
    }
    label, label.primary {
        font-style: normal;
        font-weight: normal;
        font-size: 18px;
        /* identical to box height */
        text-align: center;
        color: $primaryText;
        display: block;
    }

    label.secondary {
        font-style: normal;
        font-weight: normal;
        font-size: 14px;
        text-align: center;
        color: $secondaryText;
        display: block;
    }

    cv-meta, cv-address, cv-mapping, cv-styling {
        display: none;
    }

    cv-button {
        width: var(--defaultButtonSize);
        height: var(--defaultButtonSize);
        border-radius: var(--spacing);
        background: $buttonBackground;
        box-sizing: border-box;
        text-align: center;
        position: relative;
        color: $secondaryColor;
        border: 1px solid $secondaryColor;
        box-shadow: 0 0 1px 0 $secondaryColor inset, 0 0 1px 0 $secondaryColor;
        align-self: center;
        cursor: pointer;
        display: block;

        .value, cv-icon {
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        cv-icon {
            font-size: calc((min(var(--tileCellWidth), var(--tileCellHeight)) - #{$defaultSpace}*2) / 2);
        }

        svg[type="circle"] {
            transform: rotate(90deg);
            overflow: initial;
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;

            circle {
                fill: none;
                stroke: $primaryColor;
                position: relative;
                z-index: 1;
                transition: stroke-dashoffset 0.35s;
            }

        }
    }

    cv-button.round-button {
        border-radius: calc(max(var(--tileCellWidth), var(--tileCellHeight)) / 2);
    }

    cv-button[size="small"] {
        width: calc(var(--defaultButtonSize) - var(--spacing));
        height: calc(var(--defaultButtonSize) - var(--spacing));
    }

    cv-button[size="large"] {
        width: min(var(--tileCellWidth), var(--tileCellHeight));
        height: min(var(--tileCellWidth), var(--tileCellHeight));
    }

    cv-button.active {
        color: $primaryColor;
    }
    cv-button.active:not(.progress) {
        border: 1px solid $primaryColor;
        box-shadow: 0 0 1px 0 $primaryColor inset, 0 0 1px 0 $primaryColor;
    }

    cv-value {
        p {
            margin-block-start: 0;
            margin-block-end: 0;
        }
        label.value.medium {
            font-size: medium;
        }
        label.value {
            font-size: x-large;
        }
        label.value.large {
            font-size: xxx-large;
        }
        label.unit {
            color: $primaryText;
        }
        meter, progress {
            width: calc(var(--tileCellWidth) * #{$tileColumns} - var(--spacing)*2);
            border: 0;
        }
        progress[value]::-webkit-progress-bar, meter[value]::-webkit-meter-bar {
            background-color: $borderColor;
            border: 0;
            height: var(--spacing);
            border-radius: var(--spacing);
            overflow: hidden;
        }
        progress[value]::-webkit-progress-value, meter[value]::-webkit-meter-optimum-value {
            background-color: $primaryColor;
            //box-shadow: 1px 1px 5px 3px rgba( 255, 0, 0, 0.8 );*/
            //background-image: $primaryColor !important;
            //background-image: linear-gradient(to right, #F0CB35, #C02425);
        }
    }

    cv-round-progress {
        position: relative;
        display: block;

        svg[type="circle"] {
            transform: rotate(90deg);
            overflow: initial;

            circle {
                fill: none;
            }

            circle.bg {
                stroke: $borderColor;
            }

            circle.bar {
                stroke: $primaryColor;
                position: relative;
                z-index: 1;
                transition: stroke-dashoffset 0.35s;
            }

        }

        svg[type="semiCircle"] {
            path {
                fill: none;
            }

            path.bg {
                stroke: $borderColor;
            }

            path.bar {
                stroke: $primaryColor;
                position: relative;
                z-index: 1;
            }
        }
        label {
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 28px;
            color: $primaryText;
        }
    }
    cv-round-progress[type='semiCircle'] {
        label {
            top: 100%;
            transform: translate(-50%, -100%);
        }
    }

    cv-select {
        position: relative;
        width: 100%;
        border-top: 1px solid $borderColor;
        border-bottom: 1px solid $borderColor;

        .value {
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .popup {
            display: none;
            position: absolute;
            background-color: $buttonBackground;
            top: var(--tileCellHeight);
            width: 100%;

            cv-option {
                display: block;
                padding: calc(var(--spacing)/2) var(--spacing);
                vertical-align: middle;
                font-size: 18px;
            }
        }

        cv-icon:not(.dropdown) {
            font-size: 32px;
            vertical-align: middle;
            margin-right: var(--spacing);
        }
        cv-icon.dropdown {
            font-size: 24px;
            margin: 0;
            position: absolute;
            top: 50%;
            right: $defaultSpace * 2;
            transform: translate(0, -50%);
        }
    }

    cv-spinner {
        position: relative;
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: stretch;

        .left, .value, .right {
            width: 33%;
            align-self: center;
            text-align: center;
        }

        cv-icon {
            font-size: 32px;
        }
    }

    cv-slider {
        width: calc(100% - var(--spacing)*2);
        grid-column: 1 / span 3;
        position: relative;
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        gap: 4px;
        justify-content: center;
        align-items: center;
        padding: 0 var(--spacing);

        label.value {
            position: absolute;
            top: calc(50% - var(--spacing)*2);
            left: 50%;
            transform: translate(-50%, -50%);
        }

        cv-icon {
            flex: 0 0 auto;
            font-size: 24px;
        }
        .increase {
            order: 3;
        }
        .decrease {
            order: 1;
        }

        input[type="range"] {
            order: 2;
            -webkit-appearance: none;
            appearance: none;
            flex: 4 0 auto;
            margin: 0;
            padding: 0;
            //color: $borderColor;

            background: $borderColor;
            border: 0;
            height: var(--spacing);
            border-radius: var(--spacing);
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }
        input[type="range"]:hover {
            opacity: 1;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: $defaultSpace * 2;
            height: $defaultSpace * 2;
            border-radius: 50%;
            background: $primaryColor;
            cursor: pointer;
        }

        input[type="range"]::-moz-range-thumb {
            width: $defaultSpace * 2;
            height: $defaultSpace * 2;
            border-radius: 50%;
            background: $primaryColor;
            cursor: pointer;
        }
    }

    cv-image {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
    }

    cv-chart {
        width: 100%;
        height: 100%;
    }
}
